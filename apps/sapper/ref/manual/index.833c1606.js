import {
	S as SvelteComponentDev,
	i as init,
	s as safe_not_equal,
	d as dispatch_dev,
	c as create_slot,
	v as validate_slots,
	e as element,
	a as claim_element,
	b as children,
	f as detach_dev,
	g as add_location,
	h as insert_dev,
	u as update_slot,
	t as transition_in,
	j as transition_out,
	k as text,
	l as space,
	m as create_component,
	n as claim_text,
	o as claim_space,
	p as claim_component,
	q as append_dev,
	r as mount_component,
	w as set_data_dev,
	x as destroy_component,
	y as attr_dev,
	z as noop,
} from "./client.0a45144a.js";

/* src\cases\adapter\SimpleComponent.svelte generated by Svelte v3.29.0 */

const file = "src\\cases\\adapter\\SimpleComponent.svelte";
const get_title_slot_changes = (dirty) => ({});
const get_title_slot_context = (ctx) => ({});

function create_fragment(ctx) {
	let div;
	let current;
	const title_slot_template = /*#slots*/ ctx[1].title;
	const title_slot = create_slot(
		title_slot_template,
		ctx,
		/*$$scope*/ ctx[0],
		get_title_slot_context
	);

	const block = {
		c: function create() {
			div = element("div");
			if (title_slot) title_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			if (title_slot) title_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (title_slot) {
				title_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (title_slot) {
				if (title_slot.p && dirty & /*$$scope*/ 1) {
					update_slot(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[0],
						dirty,
						get_title_slot_changes,
						get_title_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (title_slot) title_slot.d(detaching);
		},
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx,
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SimpleComponent", slots, ["title"]);
	const writable_props = [];

	Object.keys($$props).forEach((key) => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$")
			console.warn(
				`<SimpleComponent> was created with unknown prop '${key}'`
			);
	});

	$$self.$$set = ($$props) => {
		if ("$$scope" in $$props) $$invalidate(0, ($$scope = $$props.$$scope));
	};

	return [$$scope, slots];
}

class SimpleComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SimpleComponent",
			options,
			id: create_fragment.name,
		});
	}
}

/* src\cases\adapter\to_react.svelte generated by Svelte v3.29.0 */
const file$1 = "src\\cases\\adapter\\to_react.svelte";

// (20:1) <div slot="title">
function create_title_slot(ctx) {
	let div;
	let t0;
	let t1;
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(title);
			t1 = text(",");
			t2 = text(/*timestamp*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, title);
			t1 = claim_text(div_nodes, ",");
			t2 = claim_text(div_nodes, /*timestamp*/ ctx[0]);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "title");
			add_location(div, file$1, 19, 1, 485);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			append_dev(div, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*timestamp*/ 1) set_data_dev(t2, /*timestamp*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		},
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_title_slot.name,
		type: "slot",
		source: '(20:1) <div slot=\\"title\\">',
		ctx,
	});

	return block;
}

function create_fragment$1(ctx) {
	let span;
	let t0;
	let t1;
	let simplecomponent;
	let current;

	simplecomponent = new SimpleComponent({
		props: {
			$$slots: { title: [create_title_slot] },
			$$scope: { ctx },
		},
		$$inline: true,
	});

	const block = {
		c: function create() {
			span = element("span");
			t0 = text(/*timestamp*/ ctx[0]);
			t1 = space();
			create_component(simplecomponent.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, /*timestamp*/ ctx[0]);
			span_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(simplecomponent.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			add_location(span, file$1, 17, 0, 439);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			insert_dev(target, t1, anchor);
			mount_component(simplecomponent, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*timestamp*/ 1)
				set_data_dev(t0, /*timestamp*/ ctx[0]);
			const simplecomponent_changes = {};

			if (dirty & /*$$scope, timestamp*/ 3) {
				simplecomponent_changes.$$scope = { dirty, ctx };
			}

			simplecomponent.$set(simplecomponent_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(simplecomponent.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(simplecomponent.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t1);
			destroy_component(simplecomponent, detaching);
		},
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx,
	});

	return block;
}

const title = "Simple title.";

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("To_react", slots, []);
	let timestamp = Date.now();

	setInterval(() => {
		$$invalidate(0, (timestamp = Date.now()));
	}, 1000);

	const writable_props = [];

	Object.keys($$props).forEach((key) => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$")
			console.warn(`<To_react> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ SimpleComponent, title, timestamp });

	$$self.$inject_state = ($$props) => {
		if ("timestamp" in $$props)
			$$invalidate(0, (timestamp = $$props.timestamp));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [timestamp];
}

class To_react extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "To_react",
			options,
			id: create_fragment$1.name,
		});
	}
}

/* src\routes\index.svelte generated by Svelte v3.29.0 */

function create_fragment$2(ctx) {
	let adapter;
	let current;
	adapter = new To_react({ $$inline: true });

	const block = {
		c: function create() {
			create_component(adapter.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(adapter.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(adapter, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(adapter.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(adapter.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(adapter, detaching);
		},
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx,
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach((key) => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$")
			console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Adapter: To_react });
	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$2.name,
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguODMzYzE2MDYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jYXNlcy9hZGFwdGVyL3RvX3JlYWN0LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxyXG5cdC8vIGltcG9ydCB7IGNvbXBpbGUsIFZFUlNJT04gfSBmcm9tIFwic3ZlbHRlL2NvbXBpbGVyXCI7XHJcblx0Ly8gaW1wb3J0IGV4YW1wbGUgZnJvbSBcIi4vZXhhbXBsZVwiO1xyXG5cdC8vIGNvbnN0IHNvdXJjZSA9IGV4YW1wbGU7XHJcblx0Ly8gY29uc3QgcmVzdWx0ID0gY29tcGlsZShzb3VyY2UpO1xyXG5cdC8vIGNvbnNvbGUubG9nKHJlc3VsdCwgXCJAQEBcIiwgVkVSU0lPTik7XHJcblx0Ly8gY29uc29sZS5sb2cocmVzdWx0LmpzLmNvZGUpO1xyXG5cdGltcG9ydCBTaW1wbGVDb21wb25lbnQgZnJvbSBcIi4vU2ltcGxlQ29tcG9uZW50XCI7XHJcblxyXG5cdGNvbnN0IHRpdGxlID0gXCJTaW1wbGUgdGl0bGUuXCI7XHJcblx0bGV0IHRpbWVzdGFtcCA9IERhdGUubm93KCk7XHJcblxyXG5cdHNldEludGVydmFsKCgpID0+IHtcclxuXHRcdHRpbWVzdGFtcCA9IERhdGUubm93KCk7XHJcblx0fSwgMTAwMCk7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHNwYW4+e3RpbWVzdGFtcH08L3NwYW4+XHJcbjxTaW1wbGVDb21wb25lbnQ+XHJcblx0PGRpdiBzbG90PVwidGl0bGVcIj57dGl0bGV9LHt0aW1lc3RhbXB9PC9kaXY+XHJcbjwvU2ltcGxlQ29tcG9uZW50PlxyXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzthQW1Cb0IsS0FBSzs7MkJBQUcsR0FBUzs7Ozs7OzhCQUFqQixLQUFLOzs0Q0FBRyxHQUFTOzs7Ozs7Ozs7Ozs7Ozs7K0RBQVQsR0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJCQUY5QixHQUFTOzs7Ozs7Ozs2Q0FBVCxHQUFTOzs7Ozs7Ozs7Ozs7Ozs7OzsyRUFBVCxHQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUFSVCxLQUFLLEdBQUcsZUFBZTs7Ozs7S0FDekIsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHOztDQUV4QixXQUFXOzttQkFDVixTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUc7O0VBQ2xCLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
