(function (factory) {
  typeof define === 'function' && define.amd ? define(factory) :
  factory();
}((function () { 'use strict';

  const process = { env: { NODE_ENV: "production" } };

  var nestRE = /^(attrs|props|on|nativeOn|class|style|hook)$/;

  var babelHelperVueJsxMergeProps = function mergeJSXProps (objs) {
    return objs.reduce(function (a, b) {
      var aa, bb, key, nestedKey, temp;
      for (key in b) {
        aa = a[key];
        bb = b[key];
        if (aa && nestRE.test(key)) {
          // normalize class
          if (key === 'class') {
            if (typeof aa === 'string') {
              temp = aa;
              a[key] = aa = {};
              aa[temp] = true;
            }
            if (typeof bb === 'string') {
              temp = bb;
              b[key] = bb = {};
              bb[temp] = true;
            }
          }
          if (key === 'on' || key === 'nativeOn' || key === 'hook') {
            // merge functions
            for (nestedKey in bb) {
              aa[nestedKey] = mergeFn(aa[nestedKey], bb[nestedKey]);
            }
          } else if (Array.isArray(aa)) {
            a[key] = aa.concat(bb);
          } else if (Array.isArray(bb)) {
            a[key] = [aa].concat(bb);
          } else {
            for (nestedKey in bb) {
              aa[nestedKey] = bb[nestedKey];
            }
          }
        } else {
          a[key] = b[key];
        }
      }
      return a
    }, {})
  };

  function mergeFn (a, b) {
    return function () {
      a && a.apply(this, arguments);
      b && b.apply(this, arguments);
    }
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, basedir, module) {
  	return module = {
  		path: basedir,
  		exports: {},
  		require: function (path, base) {
  			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
  		}
  	}, fn(module, module.exports), module.exports;
  }

  function getAugmentedNamespace(n) {
  	if (n.__esModule) return n;
  	var a = Object.defineProperty({}, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
  }

  var _global = createCommonjsModule(function (module) {
  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math
    ? window : typeof self != 'undefined' && self.Math == Math ? self
    // eslint-disable-next-line no-new-func
    : Function('return this')();
  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
  });

  var _core = createCommonjsModule(function (module) {
  var core = module.exports = { version: '2.6.11' };
  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
  });

  var _aFunction = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };

  // optional / simple context binding

  var _ctx = function (fn, that, length) {
    _aFunction(fn);
    if (that === undefined) return fn;
    switch (length) {
      case 1: return function (a) {
        return fn.call(that, a);
      };
      case 2: return function (a, b) {
        return fn.call(that, a, b);
      };
      case 3: return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
    }
    return function (/* ...args */) {
      return fn.apply(that, arguments);
    };
  };

  var _isObject = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

  var _anObject = function (it) {
    if (!_isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };

  var _fails = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };

  // Thank's IE8 for his funny defineProperty
  var _descriptors = !_fails(function () {
    return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
  });

  var document$1 = _global.document;
  // typeof document.createElement is 'object' in old IE
  var is = _isObject(document$1) && _isObject(document$1.createElement);
  var _domCreate = function (it) {
    return is ? document$1.createElement(it) : {};
  };

  var _ie8DomDefine = !_descriptors && !_fails(function () {
    return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
  });

  // 7.1.1 ToPrimitive(input [, PreferredType])

  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  var _toPrimitive = function (it, S) {
    if (!_isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var dP = Object.defineProperty;

  var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    _anObject(O);
    P = _toPrimitive(P, true);
    _anObject(Attributes);
    if (_ie8DomDefine) try {
      return dP(O, P, Attributes);
    } catch (e) { /* empty */ }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };

  var _objectDp = {
  	f: f
  };

  var _propertyDesc = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var _hide = _descriptors ? function (object, key, value) {
    return _objectDp.f(object, key, _propertyDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var hasOwnProperty = {}.hasOwnProperty;
  var _has = function (it, key) {
    return hasOwnProperty.call(it, key);
  };

  var PROTOTYPE = 'prototype';

  var $export = function (type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var IS_WRAP = type & $export.W;
    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
    var expProto = exports[PROTOTYPE];
    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] : (_global[name] || {})[PROTOTYPE];
    var key, own, out;
    if (IS_GLOBAL) source = name;
    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined;
      if (own && _has(exports, key)) continue;
      // export native or passed
      out = own ? target[key] : source[key];
      // prevent global pollution for namespaces
      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
      // bind timers to global for call from export context
      : IS_BIND && own ? _ctx(out, _global)
      // wrap global constructors for prevent change them in library
      : IS_WRAP && target[key] == out ? (function (C) {
        var F = function (a, b, c) {
          if (this instanceof C) {
            switch (arguments.length) {
              case 0: return new C();
              case 1: return new C(a);
              case 2: return new C(a, b);
            } return new C(a, b, c);
          } return C.apply(this, arguments);
        };
        F[PROTOTYPE] = C[PROTOTYPE];
        return F;
      // make static versions for prototype methods
      })(out) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
      // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
      if (IS_PROTO) {
        (exports.virtual || (exports.virtual = {}))[key] = out;
        // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
        if (type & $export.R && expProto && !expProto[key]) _hide(expProto, key, out);
      }
    }
  };
  // type bitmap
  $export.F = 1;   // forced
  $export.G = 2;   // global
  $export.S = 4;   // static
  $export.P = 8;   // proto
  $export.B = 16;  // bind
  $export.W = 32;  // wrap
  $export.U = 64;  // safe
  $export.R = 128; // real proto method for `library`
  var _export = $export;

  // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
  _export(_export.S + _export.F * !_descriptors, 'Object', { defineProperty: _objectDp.f });

  var $Object = _core.Object;
  var defineProperty = function defineProperty(it, key, desc) {
    return $Object.defineProperty(it, key, desc);
  };

  var defineProperty$1 = createCommonjsModule(function (module) {
  module.exports = { "default": defineProperty, __esModule: true };
  });

  var defineProperty$2 = createCommonjsModule(function (module, exports) {

  exports.__esModule = true;



  var _defineProperty2 = _interopRequireDefault(defineProperty$1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.default = function (obj, key, value) {
    if (key in obj) {
      (0, _defineProperty2.default)(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };
  });

  var _defineProperty = /*@__PURE__*/getDefaultExportFromCjs(defineProperty$2);

  // 7.1.4 ToInteger
  var ceil = Math.ceil;
  var floor = Math.floor;
  var _toInteger = function (it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };

  // 7.2.1 RequireObjectCoercible(argument)
  var _defined = function (it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };

  // true  -> String#at
  // false -> String#codePointAt
  var _stringAt = function (TO_STRING) {
    return function (that, pos) {
      var s = String(_defined(that));
      var i = _toInteger(pos);
      var l = s.length;
      var a, b;
      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
        ? TO_STRING ? s.charAt(i) : a
        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };

  var _library = true;

  var _redefine = _hide;

  var _iterators = {};

  var toString = {}.toString;

  var _cof = function (it) {
    return toString.call(it).slice(8, -1);
  };

  // fallback for non-array-like ES3 and non-enumerable old V8 strings

  // eslint-disable-next-line no-prototype-builtins
  var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return _cof(it) == 'String' ? it.split('') : Object(it);
  };

  // to indexed object, toObject with fallback for non-array-like ES3 strings


  var _toIobject = function (it) {
    return _iobject(_defined(it));
  };

  // 7.1.15 ToLength

  var min = Math.min;
  var _toLength = function (it) {
    return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };

  var max = Math.max;
  var min$1 = Math.min;
  var _toAbsoluteIndex = function (index, length) {
    index = _toInteger(index);
    return index < 0 ? max(index + length, 0) : min$1(index, length);
  };

  // false -> Array#indexOf
  // true  -> Array#includes



  var _arrayIncludes = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = _toIobject($this);
      var length = _toLength(O.length);
      var index = _toAbsoluteIndex(fromIndex, length);
      var value;
      // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++];
        // eslint-disable-next-line no-self-compare
        if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
      } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      } return !IS_INCLUDES && -1;
    };
  };

  var _shared = createCommonjsModule(function (module) {
  var SHARED = '__core-js_shared__';
  var store = _global[SHARED] || (_global[SHARED] = {});

  (module.exports = function (key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: _core.version,
    mode:  'pure' ,
    copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
  });
  });

  var id = 0;
  var px = Math.random();
  var _uid = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };

  var shared = _shared('keys');

  var _sharedKey = function (key) {
    return shared[key] || (shared[key] = _uid(key));
  };

  var arrayIndexOf = _arrayIncludes(false);
  var IE_PROTO = _sharedKey('IE_PROTO');

  var _objectKeysInternal = function (object, names) {
    var O = _toIobject(object);
    var i = 0;
    var result = [];
    var key;
    for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while (names.length > i) if (_has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
    return result;
  };

  // IE 8- don't enum bug keys
  var _enumBugKeys = (
    'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
  ).split(',');

  // 19.1.2.14 / 15.2.3.14 Object.keys(O)



  var _objectKeys = Object.keys || function keys(O) {
    return _objectKeysInternal(O, _enumBugKeys);
  };

  var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
    _anObject(O);
    var keys = _objectKeys(Properties);
    var length = keys.length;
    var i = 0;
    var P;
    while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
    return O;
  };

  var document$2 = _global.document;
  var _html = document$2 && document$2.documentElement;

  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



  var IE_PROTO$1 = _sharedKey('IE_PROTO');
  var Empty = function () { /* empty */ };
  var PROTOTYPE$1 = 'prototype';

  // Create object with fake `null` prototype: use iframe Object with cleared prototype
  var createDict = function () {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = _domCreate('iframe');
    var i = _enumBugKeys.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';
    _html.appendChild(iframe);
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
    return createDict();
  };

  var _objectCreate = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      Empty[PROTOTYPE$1] = _anObject(O);
      result = new Empty();
      Empty[PROTOTYPE$1] = null;
      // add "__proto__" for Object.getPrototypeOf polyfill
      result[IE_PROTO$1] = O;
    } else result = createDict();
    return Properties === undefined ? result : _objectDps(result, Properties);
  };

  var _wks = createCommonjsModule(function (module) {
  var store = _shared('wks');

  var Symbol = _global.Symbol;
  var USE_SYMBOL = typeof Symbol == 'function';

  var $exports = module.exports = function (name) {
    return store[name] || (store[name] =
      USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
  };

  $exports.store = store;
  });

  var def = _objectDp.f;

  var TAG = _wks('toStringTag');

  var _setToStringTag = function (it, tag, stat) {
    if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
  };

  var IteratorPrototype = {};

  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  _hide(IteratorPrototype, _wks('iterator'), function () { return this; });

  var _iterCreate = function (Constructor, NAME, next) {
    Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
    _setToStringTag(Constructor, NAME + ' Iterator');
  };

  // 7.1.13 ToObject(argument)

  var _toObject = function (it) {
    return Object(_defined(it));
  };

  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


  var IE_PROTO$2 = _sharedKey('IE_PROTO');
  var ObjectProto = Object.prototype;

  var _objectGpo = Object.getPrototypeOf || function (O) {
    O = _toObject(O);
    if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    } return O instanceof Object ? ObjectProto : null;
  };

  var ITERATOR = _wks('iterator');
  var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
  var FF_ITERATOR = '@@iterator';
  var KEYS = 'keys';
  var VALUES = 'values';

  var returnThis = function () { return this; };

  var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    _iterCreate(Constructor, NAME, next);
    var getMethod = function (kind) {
      if (!BUGGY && kind in proto) return proto[kind];
      switch (kind) {
        case KEYS: return function keys() { return new Constructor(this, kind); };
        case VALUES: return function values() { return new Constructor(this, kind); };
      } return function entries() { return new Constructor(this, kind); };
    };
    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype;
    // Fix native
    if ($anyNative) {
      IteratorPrototype = _objectGpo($anyNative.call(new Base()));
      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
        // Set @@toStringTag to native iterators
        _setToStringTag(IteratorPrototype, TAG, true);
      }
    }
    // fix Array#{values, @@iterator}.name in V8 / FF
    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;
      $default = function values() { return $native.call(this); };
    }
    // Define iterator
    if (( FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
      _hide(proto, ITERATOR, $default);
    }
    // Plug for library
    _iterators[NAME] = $default;
    _iterators[TAG] = returnThis;
    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) _redefine(proto, key, methods[key]);
      } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };

  var $at = _stringAt(true);

  // 21.1.3.27 String.prototype[@@iterator]()
  _iterDefine(String, 'String', function (iterated) {
    this._t = String(iterated); // target
    this._i = 0;                // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var index = this._i;
    var point;
    if (index >= O.length) return { value: undefined, done: true };
    point = $at(O, index);
    this._i += point.length;
    return { value: point, done: false };
  });

  var _iterStep = function (done, value) {
    return { value: value, done: !!done };
  };

  // 22.1.3.4 Array.prototype.entries()
  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()
  var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
    this._t = _toIobject(iterated); // target
    this._i = 0;                   // next index
    this._k = kind;                // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;
    if (!O || index >= O.length) {
      this._t = undefined;
      return _iterStep(1);
    }
    if (kind == 'keys') return _iterStep(0, index);
    if (kind == 'values') return _iterStep(0, O[index]);
    return _iterStep(0, [index, O[index]]);
  }, 'values');

  // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
  _iterators.Arguments = _iterators.Array;

  var TO_STRING_TAG = _wks('toStringTag');

  var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
    'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
    'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
    'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
    'TextTrackList,TouchList').split(',');

  for (var i = 0; i < DOMIterables.length; i++) {
    var NAME = DOMIterables[i];
    var Collection = _global[NAME];
    var proto = Collection && Collection.prototype;
    if (proto && !proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);
    _iterators[NAME] = _iterators.Array;
  }

  var f$1 = _wks;

  var _wksExt = {
  	f: f$1
  };

  var iterator = _wksExt.f('iterator');

  var iterator$1 = createCommonjsModule(function (module) {
  module.exports = { "default": iterator, __esModule: true };
  });

  var _meta = createCommonjsModule(function (module) {
  var META = _uid('meta');


  var setDesc = _objectDp.f;
  var id = 0;
  var isExtensible = Object.isExtensible || function () {
    return true;
  };
  var FREEZE = !_fails(function () {
    return isExtensible(Object.preventExtensions({}));
  });
  var setMeta = function (it) {
    setDesc(it, META, { value: {
      i: 'O' + ++id, // object ID
      w: {}          // weak collections IDs
    } });
  };
  var fastKey = function (it, create) {
    // return primitive with prefix
    if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!_has(it, META)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return 'F';
      // not necessary to add metadata
      if (!create) return 'E';
      // add missing metadata
      setMeta(it);
    // return object ID
    } return it[META].i;
  };
  var getWeak = function (it, create) {
    if (!_has(it, META)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return true;
      // not necessary to add metadata
      if (!create) return false;
      // add missing metadata
      setMeta(it);
    // return hash weak collections IDs
    } return it[META].w;
  };
  // add metadata on freeze-family methods calling
  var onFreeze = function (it) {
    if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
    return it;
  };
  var meta = module.exports = {
    KEY: META,
    NEED: false,
    fastKey: fastKey,
    getWeak: getWeak,
    onFreeze: onFreeze
  };
  });

  var defineProperty$3 = _objectDp.f;
  var _wksDefine = function (name) {
    var $Symbol = _core.Symbol || (_core.Symbol =  {} );
    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty$3($Symbol, name, { value: _wksExt.f(name) });
  };

  var f$2 = Object.getOwnPropertySymbols;

  var _objectGops = {
  	f: f$2
  };

  var f$3 = {}.propertyIsEnumerable;

  var _objectPie = {
  	f: f$3
  };

  // all enumerable object keys, includes symbols



  var _enumKeys = function (it) {
    var result = _objectKeys(it);
    var getSymbols = _objectGops.f;
    if (getSymbols) {
      var symbols = getSymbols(it);
      var isEnum = _objectPie.f;
      var i = 0;
      var key;
      while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
    } return result;
  };

  // 7.2.2 IsArray(argument)

  var _isArray = Array.isArray || function isArray(arg) {
    return _cof(arg) == 'Array';
  };

  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

  var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

  var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return _objectKeysInternal(O, hiddenKeys);
  };

  var _objectGopn = {
  	f: f$4
  };

  // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

  var gOPN = _objectGopn.f;
  var toString$1 = {}.toString;

  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
    ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function (it) {
    try {
      return gOPN(it);
    } catch (e) {
      return windowNames.slice();
    }
  };

  var f$5 = function getOwnPropertyNames(it) {
    return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));
  };

  var _objectGopnExt = {
  	f: f$5
  };

  var gOPD = Object.getOwnPropertyDescriptor;

  var f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
    O = _toIobject(O);
    P = _toPrimitive(P, true);
    if (_ie8DomDefine) try {
      return gOPD(O, P);
    } catch (e) { /* empty */ }
    if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
  };

  var _objectGopd = {
  	f: f$6
  };

  // ECMAScript 6 symbols shim





  var META = _meta.KEY;





















  var gOPD$1 = _objectGopd.f;
  var dP$1 = _objectDp.f;
  var gOPN$1 = _objectGopnExt.f;
  var $Symbol = _global.Symbol;
  var $JSON = _global.JSON;
  var _stringify = $JSON && $JSON.stringify;
  var PROTOTYPE$2 = 'prototype';
  var HIDDEN = _wks('_hidden');
  var TO_PRIMITIVE = _wks('toPrimitive');
  var isEnum = {}.propertyIsEnumerable;
  var SymbolRegistry = _shared('symbol-registry');
  var AllSymbols = _shared('symbols');
  var OPSymbols = _shared('op-symbols');
  var ObjectProto$1 = Object[PROTOTYPE$2];
  var USE_NATIVE = typeof $Symbol == 'function' && !!_objectGops.f;
  var QObject = _global.QObject;
  // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
  var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;

  // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
  var setSymbolDesc = _descriptors && _fails(function () {
    return _objectCreate(dP$1({}, 'a', {
      get: function () { return dP$1(this, 'a', { value: 7 }).a; }
    })).a != 7;
  }) ? function (it, key, D) {
    var protoDesc = gOPD$1(ObjectProto$1, key);
    if (protoDesc) delete ObjectProto$1[key];
    dP$1(it, key, D);
    if (protoDesc && it !== ObjectProto$1) dP$1(ObjectProto$1, key, protoDesc);
  } : dP$1;

  var wrap = function (tag) {
    var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);
    sym._k = tag;
    return sym;
  };

  var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
    return typeof it == 'symbol';
  } : function (it) {
    return it instanceof $Symbol;
  };

  var $defineProperty = function defineProperty(it, key, D) {
    if (it === ObjectProto$1) $defineProperty(OPSymbols, key, D);
    _anObject(it);
    key = _toPrimitive(key, true);
    _anObject(D);
    if (_has(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
        D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });
      } return setSymbolDesc(it, key, D);
    } return dP$1(it, key, D);
  };
  var $defineProperties = function defineProperties(it, P) {
    _anObject(it);
    var keys = _enumKeys(P = _toIobject(P));
    var i = 0;
    var l = keys.length;
    var key;
    while (l > i) $defineProperty(it, key = keys[i++], P[key]);
    return it;
  };
  var $create = function create(it, P) {
    return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
  };
  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key = _toPrimitive(key, true));
    if (this === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
    return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    it = _toIobject(it);
    key = _toPrimitive(key, true);
    if (it === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
    var D = gOPD$1(it, key);
    if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
    return D;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = gOPN$1(_toIobject(it));
    var result = [];
    var i = 0;
    var key;
    while (names.length > i) {
      if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
    } return result;
  };
  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectProto$1;
    var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));
    var result = [];
    var i = 0;
    var key;
    while (names.length > i) {
      if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto$1, key) : true)) result.push(AllSymbols[key]);
    } return result;
  };

  // 19.4.1.1 Symbol([description])
  if (!USE_NATIVE) {
    $Symbol = function Symbol() {
      if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
      var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);
      var $set = function (value) {
        if (this === ObjectProto$1) $set.call(OPSymbols, value);
        if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, _propertyDesc(1, value));
      };
      if (_descriptors && setter) setSymbolDesc(ObjectProto$1, tag, { configurable: true, set: $set });
      return wrap(tag);
    };
    _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
      return this._k;
    });

    _objectGopd.f = $getOwnPropertyDescriptor;
    _objectDp.f = $defineProperty;
    _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
    _objectPie.f = $propertyIsEnumerable;
    _objectGops.f = $getOwnPropertySymbols;

    if (_descriptors && !_library) {
      _redefine(ObjectProto$1, 'propertyIsEnumerable', $propertyIsEnumerable);
    }

    _wksExt.f = function (name) {
      return wrap(_wks(name));
    };
  }

  _export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });

  for (var es6Symbols = (
    // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
    'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
  ).split(','), j = 0; es6Symbols.length > j;)_wks(es6Symbols[j++]);

  for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) _wksDefine(wellKnownSymbols[k++]);

  _export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {
    // 19.4.2.1 Symbol.for(key)
    'for': function (key) {
      return _has(SymbolRegistry, key += '')
        ? SymbolRegistry[key]
        : SymbolRegistry[key] = $Symbol(key);
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(sym) {
      if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
      for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
    },
    useSetter: function () { setter = true; },
    useSimple: function () { setter = false; }
  });

  _export(_export.S + _export.F * !USE_NATIVE, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols
  });

  // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
  // https://bugs.chromium.org/p/v8/issues/detail?id=3443
  var FAILS_ON_PRIMITIVES = _fails(function () { _objectGops.f(1); });

  _export(_export.S + _export.F * FAILS_ON_PRIMITIVES, 'Object', {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
      return _objectGops.f(_toObject(it));
    }
  });

  // 24.3.2 JSON.stringify(value [, replacer [, space]])
  $JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {
    var S = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    // WebKit converts symbol values to JSON as null
    // V8 throws on boxed symbols
    return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
  })), 'JSON', {
    stringify: function stringify(it) {
      var args = [it];
      var i = 1;
      var replacer, $replacer;
      while (arguments.length > i) args.push(arguments[i++]);
      $replacer = replacer = args[1];
      if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
      if (!_isArray(replacer)) replacer = function (key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return _stringify.apply($JSON, args);
    }
  });

  // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
  $Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);
  // 19.4.3.5 Symbol.prototype[@@toStringTag]
  _setToStringTag($Symbol, 'Symbol');
  // 20.2.1.9 Math[@@toStringTag]
  _setToStringTag(Math, 'Math', true);
  // 24.3.3 JSON[@@toStringTag]
  _setToStringTag(_global.JSON, 'JSON', true);

  _wksDefine('asyncIterator');

  _wksDefine('observable');

  var symbol = _core.Symbol;

  var symbol$1 = createCommonjsModule(function (module) {
  module.exports = { "default": symbol, __esModule: true };
  });

  var _typeof_1 = createCommonjsModule(function (module, exports) {

  exports.__esModule = true;



  var _iterator2 = _interopRequireDefault(iterator$1);



  var _symbol2 = _interopRequireDefault(symbol$1);

  var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof(obj);
  } : function (obj) {
    return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
  };
  });

  var _typeof = /*@__PURE__*/getDefaultExportFromCjs(_typeof_1);

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  var _freeGlobal = freeGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = _freeGlobal || freeSelf || Function('return this')();

  var _root = root;

  /** Built-in value references. */
  var Symbol$1 = _root.Symbol;

  var _Symbol = Symbol$1;

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /** Built-in value references. */
  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty$1.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  var _getRawTag = getRawTag;

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$1.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString$1.call(value);
  }

  var _objectToString = objectToString;

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag$1 && symToStringTag$1 in Object(value))
      ? _getRawTag(value)
      : _objectToString(value);
  }

  var _baseGetTag = baseGetTag;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  var _overArg = overArg;

  /** Built-in value references. */
  var getPrototype = _overArg(Object.getPrototypeOf, Object);

  var _getPrototype = getPrototype;

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  var isObjectLike_1 = isObjectLike;

  /** `Object#toString` result references. */
  var objectTag = '[object Object]';

  /** Used for built-in method references. */
  var funcProto = Function.prototype,
      objectProto$2 = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

  /** Used to infer the `Object` constructor. */
  var objectCtorString = funcToString.call(Object);

  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject(value) {
    if (!isObjectLike_1(value) || _baseGetTag(value) != objectTag) {
      return false;
    }
    var proto = _getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty$2.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor &&
      funcToString.call(Ctor) == objectCtorString;
  }

  var isPlainObject_1 = isPlainObject;

  var ObjProto = Object.prototype;
  var toString$2 = ObjProto.toString;
  var hasOwn = ObjProto.hasOwnProperty;

  var FN_MATCH_REGEXP = /^\s*function (\w+)/;

  // https://github.com/vuejs/vue/blob/dev/src/core/util/props.js#L159
  var getType = function getType(fn) {
    var type = fn !== null && fn !== undefined ? fn.type ? fn.type : fn : null;
    var match = type && type.toString().match(FN_MATCH_REGEXP);
    return match && match[1];
  };

  var getNativeType = function getNativeType(value) {
    if (value === null || value === undefined) return null;
    var match = value.constructor.toString().match(FN_MATCH_REGEXP);
    return match && match[1];
  };

  /**
   * No-op function
   */
  var noop = function noop() {};

  /**
   * Determines whether the passed value is an integer. Uses `Number.isInteger` if available
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
   * @param {*} value - The value to be tested for being an integer.
   * @returns {boolean}
   */
  var isInteger = Number.isInteger || function (value) {
    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
  };

  /**
   * Determines whether the passed value is an Array.
   *
   * @param {*} value - The value to be tested for being an array.
   * @returns {boolean}
   */
  var isArray = Array.isArray || function (value) {
    return toString$2.call(value) === '[object Array]';
  };

  /**
   * Checks if a value is a function
   *
   * @param {any} value - Value to check
   * @returns {boolean}
   */
  var isFunction = function isFunction(value) {
    return toString$2.call(value) === '[object Function]';
  };

  /**
   * Adds a `def` method to the object returning a new object with passed in argument as `default` property
   *
   * @param {object} type - Object to enhance
   */
  var withDefault = function withDefault(type) {
    Object.defineProperty(type, 'def', {
      value: function value(def) {
        if (def === undefined && this['default'] === undefined) {
          this['default'] = undefined;
          return this;
        }
        if (!isFunction(def) && !validateType(this, def)) {
          warn(this._vueTypes_name + ' - invalid default value: "' + def + '"', def);
          return this;
        }
        this['default'] = isArray(def) || isPlainObject_1(def) ? function () {
          return def;
        } : def;

        return this;
      },

      enumerable: false,
      writable: false
    });
  };

  /**
   * Adds a `isRequired` getter returning a new object with `required: true` key-value
   *
   * @param {object} type - Object to enhance
   */
  var withRequired = function withRequired(type) {
    Object.defineProperty(type, 'isRequired', {
      get: function get() {
        this.required = true;
        return this;
      },

      enumerable: false
    });
  };

  /**
   * Adds `isRequired` and `def` modifiers to an object
   *
   * @param {string} name - Type internal name
   * @param {object} obj - Object to enhance
   * @returns {object}
   */
  var toType = function toType(name, obj) {
    Object.defineProperty(obj, '_vueTypes_name', {
      enumerable: false,
      writable: false,
      value: name
    });
    withRequired(obj);
    withDefault(obj);

    if (isFunction(obj.validator)) {
      obj.validator = obj.validator.bind(obj);
    }
    return obj;
  };

  /**
   * Validates a given value against a prop type object
   *
   * @param {Object|*} type - Type to use for validation. Either a type object or a constructor
   * @param {*} value - Value to check
   * @param {boolean} silent - Silence warnings
   * @returns {boolean}
   */
  var validateType = function validateType(type, value) {
    var silent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var typeToCheck = type;
    var valid = true;
    var expectedType = void 0;
    if (!isPlainObject_1(type)) {
      typeToCheck = { type: type };
    }
    var namePrefix = typeToCheck._vueTypes_name ? typeToCheck._vueTypes_name + ' - ' : '';

    if (hasOwn.call(typeToCheck, 'type') && typeToCheck.type !== null) {
      if (isArray(typeToCheck.type)) {
        valid = typeToCheck.type.some(function (type) {
          return validateType(type, value, true);
        });
        expectedType = typeToCheck.type.map(function (type) {
          return getType(type);
        }).join(' or ');
      } else {
        expectedType = getType(typeToCheck);

        if (expectedType === 'Array') {
          valid = isArray(value);
        } else if (expectedType === 'Object') {
          valid = isPlainObject_1(value);
        } else if (expectedType === 'String' || expectedType === 'Number' || expectedType === 'Boolean' || expectedType === 'Function') {
          valid = getNativeType(value) === expectedType;
        } else {
          valid = value instanceof typeToCheck.type;
        }
      }
    }

    if (!valid) {
      silent === false && warn(namePrefix + 'value "' + value + '" should be of type "' + expectedType + '"');
      return false;
    }

    if (hasOwn.call(typeToCheck, 'validator') && isFunction(typeToCheck.validator)) {
      valid = typeToCheck.validator(value);
      if (!valid && silent === false) warn(namePrefix + 'custom validation failed');
      return valid;
    }
    return valid;
  };

  var warn = noop;

  if (process.env.NODE_ENV !== 'production') {
    var hasConsole = typeof console !== 'undefined';
    warn = function warn(msg) {
      if (hasConsole) {
        console.warn('[VueTypes warn]: ' + msg);
      }
    };
  }

  var VuePropTypes = {
    get any() {
      return toType('any', {
        type: null
      });
    },

    get func() {
      return toType('function', {
        type: Function
      }).def(currentDefaults.func);
    },

    get bool() {
      return toType('boolean', {
        type: Boolean
      }).def(currentDefaults.bool);
    },

    get string() {
      return toType('string', {
        type: String
      }).def(currentDefaults.string);
    },

    get number() {
      return toType('number', {
        type: Number
      }).def(currentDefaults.number);
    },

    get array() {
      return toType('array', {
        type: Array
      }).def(currentDefaults.array);
    },

    get object() {
      return toType('object', {
        type: Object
      }).def(currentDefaults.object);
    },

    get integer() {
      return toType('integer', {
        type: Number,
        validator: function validator(value) {
          return isInteger(value);
        }
      }).def(currentDefaults.integer);
    },

    get symbol() {
      return toType('symbol', {
        type: null,
        validator: function validator(value) {
          return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'symbol';
        }
      });
    },

    custom: function custom(validatorFn) {
      var warnMsg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'custom validation failed';

      if (typeof validatorFn !== 'function') {
        throw new TypeError('[VueTypes error]: You must provide a function as argument');
      }

      return toType(validatorFn.name || '<<anonymous function>>', {
        validator: function validator() {
          var valid = validatorFn.apply(undefined, arguments);
          if (!valid) warn(this._vueTypes_name + ' - ' + warnMsg);
          return valid;
        }
      });
    },
    oneOf: function oneOf(arr) {
      if (!isArray(arr)) {
        throw new TypeError('[VueTypes error]: You must provide an array as argument');
      }
      var msg = 'oneOf - value should be one of "' + arr.join('", "') + '"';
      var allowedTypes = arr.reduce(function (ret, v) {
        if (v !== null && v !== undefined) {
          ret.indexOf(v.constructor) === -1 && ret.push(v.constructor);
        }
        return ret;
      }, []);

      return toType('oneOf', {
        type: allowedTypes.length > 0 ? allowedTypes : null,
        validator: function validator(value) {
          var valid = arr.indexOf(value) !== -1;
          if (!valid) warn(msg);
          return valid;
        }
      });
    },
    instanceOf: function instanceOf(instanceConstructor) {
      return toType('instanceOf', {
        type: instanceConstructor
      });
    },
    oneOfType: function oneOfType(arr) {
      if (!isArray(arr)) {
        throw new TypeError('[VueTypes error]: You must provide an array as argument');
      }

      var hasCustomValidators = false;

      var nativeChecks = arr.reduce(function (ret, type) {
        if (isPlainObject_1(type)) {
          if (type._vueTypes_name === 'oneOf') {
            return ret.concat(type.type || []);
          }
          if (type.type && !isFunction(type.validator)) {
            if (isArray(type.type)) return ret.concat(type.type);
            ret.push(type.type);
          } else if (isFunction(type.validator)) {
            hasCustomValidators = true;
          }
          return ret;
        }
        ret.push(type);
        return ret;
      }, []);

      if (!hasCustomValidators) {
        // we got just native objects (ie: Array, Object)
        // delegate to Vue native prop check
        return toType('oneOfType', {
          type: nativeChecks
        }).def(undefined);
      }

      var typesStr = arr.map(function (type) {
        if (type && isArray(type.type)) {
          return type.type.map(getType);
        }
        return getType(type);
      }).reduce(function (ret, type) {
        return ret.concat(isArray(type) ? type : [type]);
      }, []).join('", "');

      return this.custom(function oneOfType(value) {
        var valid = arr.some(function (type) {
          if (type._vueTypes_name === 'oneOf') {
            return type.type ? validateType(type.type, value, true) : true;
          }
          return validateType(type, value, true);
        });
        if (!valid) warn('oneOfType - value type should be one of "' + typesStr + '"');
        return valid;
      }).def(undefined);
    },
    arrayOf: function arrayOf(type) {
      return toType('arrayOf', {
        type: Array,
        validator: function validator(values) {
          var valid = values.every(function (value) {
            return validateType(type, value);
          });
          if (!valid) warn('arrayOf - value must be an array of "' + getType(type) + '"');
          return valid;
        }
      });
    },
    objectOf: function objectOf(type) {
      return toType('objectOf', {
        type: Object,
        validator: function validator(obj) {
          var valid = Object.keys(obj).every(function (key) {
            return validateType(type, obj[key]);
          });
          if (!valid) warn('objectOf - value must be an object of "' + getType(type) + '"');
          return valid;
        }
      });
    },
    shape: function shape(obj) {
      var keys = Object.keys(obj);
      var requiredKeys = keys.filter(function (key) {
        return obj[key] && obj[key].required === true;
      });

      var type = toType('shape', {
        type: Object,
        validator: function validator(value) {
          var _this = this;

          if (!isPlainObject_1(value)) {
            return false;
          }
          var valueKeys = Object.keys(value);

          // check for required keys (if any)
          if (requiredKeys.length > 0 && requiredKeys.some(function (req) {
            return valueKeys.indexOf(req) === -1;
          })) {
            warn('shape - at least one of required properties "' + requiredKeys.join('", "') + '" is not present');
            return false;
          }

          return valueKeys.every(function (key) {
            if (keys.indexOf(key) === -1) {
              if (_this._vueTypes_isLoose === true) return true;
              warn('shape - object is missing "' + key + '" property');
              return false;
            }
            var type = obj[key];
            return validateType(type, value[key]);
          });
        }
      });

      Object.defineProperty(type, '_vueTypes_isLoose', {
        enumerable: false,
        writable: true,
        value: false
      });

      Object.defineProperty(type, 'loose', {
        get: function get() {
          this._vueTypes_isLoose = true;
          return this;
        },

        enumerable: false
      });

      return type;
    }
  };

  var typeDefaults = function typeDefaults() {
    return {
      func: undefined,
      bool: undefined,
      string: undefined,
      number: undefined,
      array: undefined,
      object: undefined,
      integer: undefined
    };
  };

  var currentDefaults = typeDefaults();

  Object.defineProperty(VuePropTypes, 'sensibleDefaults', {
    enumerable: false,
    set: function set(value) {
      if (value === false) {
        currentDefaults = {};
      } else if (value === true) {
        currentDefaults = typeDefaults();
      } else if (isPlainObject_1(value)) {
        currentDefaults = value;
      }
    },
    get: function get() {
      return currentDefaults;
    }
  });

  var classnames = createCommonjsModule(function (module) {
  /*!
    Copyright (c) 2017 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */
  /* global define */

  (function () {

  	var hasOwn = {}.hasOwnProperty;

  	function classNames () {
  		var classes = [];

  		for (var i = 0; i < arguments.length; i++) {
  			var arg = arguments[i];
  			if (!arg) continue;

  			var argType = typeof arg;

  			if (argType === 'string' || argType === 'number') {
  				classes.push(arg);
  			} else if (Array.isArray(arg) && arg.length) {
  				var inner = classNames.apply(null, arg);
  				if (inner) {
  					classes.push(inner);
  				}
  			} else if (argType === 'object') {
  				for (var key in arg) {
  					if (hasOwn.call(arg, key) && arg[key]) {
  						classes.push(key);
  					}
  				}
  			}
  		}

  		return classes.join(' ');
  	}

  	if ( module.exports) {
  		classNames.default = classNames;
  		module.exports = classNames;
  	} else {
  		window.classNames = classNames;
  	}
  }());
  });

  // 19.1.2.1 Object.assign(target, source, ...)






  var $assign = Object.assign;

  // should work with symbols and should have deterministic property order (V8 bug)
  var _objectAssign = !$assign || _fails(function () {
    var A = {};
    var B = {};
    // eslint-disable-next-line no-undef
    var S = Symbol();
    var K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function (k) { B[k] = k; });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
  }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
    var T = _toObject(target);
    var aLen = arguments.length;
    var index = 1;
    var getSymbols = _objectGops.f;
    var isEnum = _objectPie.f;
    while (aLen > index) {
      var S = _iobject(arguments[index++]);
      var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
      var length = keys.length;
      var j = 0;
      var key;
      while (length > j) {
        key = keys[j++];
        if (!_descriptors || isEnum.call(S, key)) T[key] = S[key];
      }
    } return T;
  } : $assign;

  // 19.1.3.1 Object.assign(target, source)


  _export(_export.S + _export.F, 'Object', { assign: _objectAssign });

  var assign = _core.Object.assign;

  var assign$1 = createCommonjsModule(function (module) {
  module.exports = { "default": assign, __esModule: true };
  });

  var _extends = createCommonjsModule(function (module, exports) {

  exports.__esModule = true;



  var _assign2 = _interopRequireDefault(assign$1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.default = _assign2.default || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  });

  var _extends$1 = /*@__PURE__*/getDefaultExportFromCjs(_extends);

  function omit(obj, fields) {
    var shallowCopy = _extends$1({}, obj);
    for (var i = 0; i < fields.length; i++) {
      var key = fields[i];
      delete shallowCopy[key];
    }
    return shallowCopy;
  }

  /**
   * A collection of shims that provide minimal functionality of the ES6 collections.
   *
   * These implementations are not meant to be used outside of the ResizeObserver
   * modules as they cover only a limited range of use cases.
   */
  /* eslint-disable require-jsdoc, valid-jsdoc */
  var MapShim = (function () {
      if (typeof Map !== 'undefined') {
          return Map;
      }
      /**
       * Returns index in provided array that matches the specified key.
       *
       * @param {Array<Array>} arr
       * @param {*} key
       * @returns {number}
       */
      function getIndex(arr, key) {
          var result = -1;
          arr.some(function (entry, index) {
              if (entry[0] === key) {
                  result = index;
                  return true;
              }
              return false;
          });
          return result;
      }
      return /** @class */ (function () {
          function class_1() {
              this.__entries__ = [];
          }
          Object.defineProperty(class_1.prototype, "size", {
              /**
               * @returns {boolean}
               */
              get: function () {
                  return this.__entries__.length;
              },
              enumerable: true,
              configurable: true
          });
          /**
           * @param {*} key
           * @returns {*}
           */
          class_1.prototype.get = function (key) {
              var index = getIndex(this.__entries__, key);
              var entry = this.__entries__[index];
              return entry && entry[1];
          };
          /**
           * @param {*} key
           * @param {*} value
           * @returns {void}
           */
          class_1.prototype.set = function (key, value) {
              var index = getIndex(this.__entries__, key);
              if (~index) {
                  this.__entries__[index][1] = value;
              }
              else {
                  this.__entries__.push([key, value]);
              }
          };
          /**
           * @param {*} key
           * @returns {void}
           */
          class_1.prototype.delete = function (key) {
              var entries = this.__entries__;
              var index = getIndex(entries, key);
              if (~index) {
                  entries.splice(index, 1);
              }
          };
          /**
           * @param {*} key
           * @returns {void}
           */
          class_1.prototype.has = function (key) {
              return !!~getIndex(this.__entries__, key);
          };
          /**
           * @returns {void}
           */
          class_1.prototype.clear = function () {
              this.__entries__.splice(0);
          };
          /**
           * @param {Function} callback
           * @param {*} [ctx=null]
           * @returns {void}
           */
          class_1.prototype.forEach = function (callback, ctx) {
              if (ctx === void 0) { ctx = null; }
              for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                  var entry = _a[_i];
                  callback.call(ctx, entry[1], entry[0]);
              }
          };
          return class_1;
      }());
  })();

  /**
   * Detects whether window and document objects are available in current environment.
   */
  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

  // Returns global object of a current environment.
  var global$1 = (function () {
      if (typeof global !== 'undefined' && global.Math === Math) {
          return global;
      }
      if (typeof self !== 'undefined' && self.Math === Math) {
          return self;
      }
      if (typeof window !== 'undefined' && window.Math === Math) {
          return window;
      }
      // eslint-disable-next-line no-new-func
      return Function('return this')();
  })();

  /**
   * A shim for the requestAnimationFrame which falls back to the setTimeout if
   * first one is not supported.
   *
   * @returns {number} Requests' identifier.
   */
  var requestAnimationFrame$1 = (function () {
      if (typeof requestAnimationFrame === 'function') {
          // It's required to use a bounded function because IE sometimes throws
          // an "Invalid calling object" error if rAF is invoked without the global
          // object on the left hand side.
          return requestAnimationFrame.bind(global$1);
      }
      return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
  })();

  // Defines minimum timeout before adding a trailing call.
  var trailingTimeout = 2;
  /**
   * Creates a wrapper function which ensures that provided callback will be
   * invoked only once during the specified delay period.
   *
   * @param {Function} callback - Function to be invoked after the delay period.
   * @param {number} delay - Delay after which to invoke callback.
   * @returns {Function}
   */
  function throttle (callback, delay) {
      var leadingCall = false, trailingCall = false, lastCallTime = 0;
      /**
       * Invokes the original callback function and schedules new invocation if
       * the "proxy" was called during current request.
       *
       * @returns {void}
       */
      function resolvePending() {
          if (leadingCall) {
              leadingCall = false;
              callback();
          }
          if (trailingCall) {
              proxy();
          }
      }
      /**
       * Callback invoked after the specified delay. It will further postpone
       * invocation of the original function delegating it to the
       * requestAnimationFrame.
       *
       * @returns {void}
       */
      function timeoutCallback() {
          requestAnimationFrame$1(resolvePending);
      }
      /**
       * Schedules invocation of the original function.
       *
       * @returns {void}
       */
      function proxy() {
          var timeStamp = Date.now();
          if (leadingCall) {
              // Reject immediately following calls.
              if (timeStamp - lastCallTime < trailingTimeout) {
                  return;
              }
              // Schedule new call to be in invoked when the pending one is resolved.
              // This is important for "transitions" which never actually start
              // immediately so there is a chance that we might miss one if change
              // happens amids the pending invocation.
              trailingCall = true;
          }
          else {
              leadingCall = true;
              trailingCall = false;
              setTimeout(timeoutCallback, delay);
          }
          lastCallTime = timeStamp;
      }
      return proxy;
  }

  // Minimum delay before invoking the update of observers.
  var REFRESH_DELAY = 20;
  // A list of substrings of CSS properties used to find transition events that
  // might affect dimensions of observed elements.
  var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
  // Check if MutationObserver is available.
  var mutationObserverSupported = typeof MutationObserver !== 'undefined';
  /**
   * Singleton controller class which handles updates of ResizeObserver instances.
   */
  var ResizeObserverController = /** @class */ (function () {
      /**
       * Creates a new instance of ResizeObserverController.
       *
       * @private
       */
      function ResizeObserverController() {
          /**
           * Indicates whether DOM listeners have been added.
           *
           * @private {boolean}
           */
          this.connected_ = false;
          /**
           * Tells that controller has subscribed for Mutation Events.
           *
           * @private {boolean}
           */
          this.mutationEventsAdded_ = false;
          /**
           * Keeps reference to the instance of MutationObserver.
           *
           * @private {MutationObserver}
           */
          this.mutationsObserver_ = null;
          /**
           * A list of connected observers.
           *
           * @private {Array<ResizeObserverSPI>}
           */
          this.observers_ = [];
          this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
          this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
      }
      /**
       * Adds observer to observers list.
       *
       * @param {ResizeObserverSPI} observer - Observer to be added.
       * @returns {void}
       */
      ResizeObserverController.prototype.addObserver = function (observer) {
          if (!~this.observers_.indexOf(observer)) {
              this.observers_.push(observer);
          }
          // Add listeners if they haven't been added yet.
          if (!this.connected_) {
              this.connect_();
          }
      };
      /**
       * Removes observer from observers list.
       *
       * @param {ResizeObserverSPI} observer - Observer to be removed.
       * @returns {void}
       */
      ResizeObserverController.prototype.removeObserver = function (observer) {
          var observers = this.observers_;
          var index = observers.indexOf(observer);
          // Remove observer if it's present in registry.
          if (~index) {
              observers.splice(index, 1);
          }
          // Remove listeners if controller has no connected observers.
          if (!observers.length && this.connected_) {
              this.disconnect_();
          }
      };
      /**
       * Invokes the update of observers. It will continue running updates insofar
       * it detects changes.
       *
       * @returns {void}
       */
      ResizeObserverController.prototype.refresh = function () {
          var changesDetected = this.updateObservers_();
          // Continue running updates if changes have been detected as there might
          // be future ones caused by CSS transitions.
          if (changesDetected) {
              this.refresh();
          }
      };
      /**
       * Updates every observer from observers list and notifies them of queued
       * entries.
       *
       * @private
       * @returns {boolean} Returns "true" if any observer has detected changes in
       *      dimensions of it's elements.
       */
      ResizeObserverController.prototype.updateObservers_ = function () {
          // Collect observers that have active observations.
          var activeObservers = this.observers_.filter(function (observer) {
              return observer.gatherActive(), observer.hasActive();
          });
          // Deliver notifications in a separate cycle in order to avoid any
          // collisions between observers, e.g. when multiple instances of
          // ResizeObserver are tracking the same element and the callback of one
          // of them changes content dimensions of the observed target. Sometimes
          // this may result in notifications being blocked for the rest of observers.
          activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
          return activeObservers.length > 0;
      };
      /**
       * Initializes DOM listeners.
       *
       * @private
       * @returns {void}
       */
      ResizeObserverController.prototype.connect_ = function () {
          // Do nothing if running in a non-browser environment or if listeners
          // have been already added.
          if (!isBrowser || this.connected_) {
              return;
          }
          // Subscription to the "Transitionend" event is used as a workaround for
          // delayed transitions. This way it's possible to capture at least the
          // final state of an element.
          document.addEventListener('transitionend', this.onTransitionEnd_);
          window.addEventListener('resize', this.refresh);
          if (mutationObserverSupported) {
              this.mutationsObserver_ = new MutationObserver(this.refresh);
              this.mutationsObserver_.observe(document, {
                  attributes: true,
                  childList: true,
                  characterData: true,
                  subtree: true
              });
          }
          else {
              document.addEventListener('DOMSubtreeModified', this.refresh);
              this.mutationEventsAdded_ = true;
          }
          this.connected_ = true;
      };
      /**
       * Removes DOM listeners.
       *
       * @private
       * @returns {void}
       */
      ResizeObserverController.prototype.disconnect_ = function () {
          // Do nothing if running in a non-browser environment or if listeners
          // have been already removed.
          if (!isBrowser || !this.connected_) {
              return;
          }
          document.removeEventListener('transitionend', this.onTransitionEnd_);
          window.removeEventListener('resize', this.refresh);
          if (this.mutationsObserver_) {
              this.mutationsObserver_.disconnect();
          }
          if (this.mutationEventsAdded_) {
              document.removeEventListener('DOMSubtreeModified', this.refresh);
          }
          this.mutationsObserver_ = null;
          this.mutationEventsAdded_ = false;
          this.connected_ = false;
      };
      /**
       * "Transitionend" event handler.
       *
       * @private
       * @param {TransitionEvent} event
       * @returns {void}
       */
      ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
          var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
          // Detect whether transition may affect dimensions of an element.
          var isReflowProperty = transitionKeys.some(function (key) {
              return !!~propertyName.indexOf(key);
          });
          if (isReflowProperty) {
              this.refresh();
          }
      };
      /**
       * Returns instance of the ResizeObserverController.
       *
       * @returns {ResizeObserverController}
       */
      ResizeObserverController.getInstance = function () {
          if (!this.instance_) {
              this.instance_ = new ResizeObserverController();
          }
          return this.instance_;
      };
      /**
       * Holds reference to the controller's instance.
       *
       * @private {ResizeObserverController}
       */
      ResizeObserverController.instance_ = null;
      return ResizeObserverController;
  }());

  /**
   * Defines non-writable/enumerable properties of the provided target object.
   *
   * @param {Object} target - Object for which to define properties.
   * @param {Object} props - Properties to be defined.
   * @returns {Object} Target object.
   */
  var defineConfigurable = (function (target, props) {
      for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
          var key = _a[_i];
          Object.defineProperty(target, key, {
              value: props[key],
              enumerable: false,
              writable: false,
              configurable: true
          });
      }
      return target;
  });

  /**
   * Returns the global object associated with provided element.
   *
   * @param {Object} target
   * @returns {Object}
   */
  var getWindowOf = (function (target) {
      // Assume that the element is an instance of Node, which means that it
      // has the "ownerDocument" property from which we can retrieve a
      // corresponding global object.
      var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
      // Return the local global object if it's not possible extract one from
      // provided element.
      return ownerGlobal || global$1;
  });

  // Placeholder of an empty content rectangle.
  var emptyRect = createRectInit(0, 0, 0, 0);
  /**
   * Converts provided string to a number.
   *
   * @param {number|string} value
   * @returns {number}
   */
  function toFloat(value) {
      return parseFloat(value) || 0;
  }
  /**
   * Extracts borders size from provided styles.
   *
   * @param {CSSStyleDeclaration} styles
   * @param {...string} positions - Borders positions (top, right, ...)
   * @returns {number}
   */
  function getBordersSize(styles) {
      var positions = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          positions[_i - 1] = arguments[_i];
      }
      return positions.reduce(function (size, position) {
          var value = styles['border-' + position + '-width'];
          return size + toFloat(value);
      }, 0);
  }
  /**
   * Extracts paddings sizes from provided styles.
   *
   * @param {CSSStyleDeclaration} styles
   * @returns {Object} Paddings box.
   */
  function getPaddings(styles) {
      var positions = ['top', 'right', 'bottom', 'left'];
      var paddings = {};
      for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
          var position = positions_1[_i];
          var value = styles['padding-' + position];
          paddings[position] = toFloat(value);
      }
      return paddings;
  }
  /**
   * Calculates content rectangle of provided SVG element.
   *
   * @param {SVGGraphicsElement} target - Element content rectangle of which needs
   *      to be calculated.
   * @returns {DOMRectInit}
   */
  function getSVGContentRect(target) {
      var bbox = target.getBBox();
      return createRectInit(0, 0, bbox.width, bbox.height);
  }
  /**
   * Calculates content rectangle of provided HTMLElement.
   *
   * @param {HTMLElement} target - Element for which to calculate the content rectangle.
   * @returns {DOMRectInit}
   */
  function getHTMLElementContentRect(target) {
      // Client width & height properties can't be
      // used exclusively as they provide rounded values.
      var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
      // By this condition we can catch all non-replaced inline, hidden and
      // detached elements. Though elements with width & height properties less
      // than 0.5 will be discarded as well.
      //
      // Without it we would need to implement separate methods for each of
      // those cases and it's not possible to perform a precise and performance
      // effective test for hidden elements. E.g. even jQuery's ':visible' filter
      // gives wrong results for elements with width & height less than 0.5.
      if (!clientWidth && !clientHeight) {
          return emptyRect;
      }
      var styles = getWindowOf(target).getComputedStyle(target);
      var paddings = getPaddings(styles);
      var horizPad = paddings.left + paddings.right;
      var vertPad = paddings.top + paddings.bottom;
      // Computed styles of width & height are being used because they are the
      // only dimensions available to JS that contain non-rounded values. It could
      // be possible to utilize the getBoundingClientRect if only it's data wasn't
      // affected by CSS transformations let alone paddings, borders and scroll bars.
      var width = toFloat(styles.width), height = toFloat(styles.height);
      // Width & height include paddings and borders when the 'border-box' box
      // model is applied (except for IE).
      if (styles.boxSizing === 'border-box') {
          // Following conditions are required to handle Internet Explorer which
          // doesn't include paddings and borders to computed CSS dimensions.
          //
          // We can say that if CSS dimensions + paddings are equal to the "client"
          // properties then it's either IE, and thus we don't need to subtract
          // anything, or an element merely doesn't have paddings/borders styles.
          if (Math.round(width + horizPad) !== clientWidth) {
              width -= getBordersSize(styles, 'left', 'right') + horizPad;
          }
          if (Math.round(height + vertPad) !== clientHeight) {
              height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
          }
      }
      // Following steps can't be applied to the document's root element as its
      // client[Width/Height] properties represent viewport area of the window.
      // Besides, it's as well not necessary as the <html> itself neither has
      // rendered scroll bars nor it can be clipped.
      if (!isDocumentElement(target)) {
          // In some browsers (only in Firefox, actually) CSS width & height
          // include scroll bars size which can be removed at this step as scroll
          // bars are the only difference between rounded dimensions + paddings
          // and "client" properties, though that is not always true in Chrome.
          var vertScrollbar = Math.round(width + horizPad) - clientWidth;
          var horizScrollbar = Math.round(height + vertPad) - clientHeight;
          // Chrome has a rather weird rounding of "client" properties.
          // E.g. for an element with content width of 314.2px it sometimes gives
          // the client width of 315px and for the width of 314.7px it may give
          // 314px. And it doesn't happen all the time. So just ignore this delta
          // as a non-relevant.
          if (Math.abs(vertScrollbar) !== 1) {
              width -= vertScrollbar;
          }
          if (Math.abs(horizScrollbar) !== 1) {
              height -= horizScrollbar;
          }
      }
      return createRectInit(paddings.left, paddings.top, width, height);
  }
  /**
   * Checks whether provided element is an instance of the SVGGraphicsElement.
   *
   * @param {Element} target - Element to be checked.
   * @returns {boolean}
   */
  var isSVGGraphicsElement = (function () {
      // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
      // interface.
      if (typeof SVGGraphicsElement !== 'undefined') {
          return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
      }
      // If it's so, then check that element is at least an instance of the
      // SVGElement and that it has the "getBBox" method.
      // eslint-disable-next-line no-extra-parens
      return function (target) { return (target instanceof getWindowOf(target).SVGElement &&
          typeof target.getBBox === 'function'); };
  })();
  /**
   * Checks whether provided element is a document element (<html>).
   *
   * @param {Element} target - Element to be checked.
   * @returns {boolean}
   */
  function isDocumentElement(target) {
      return target === getWindowOf(target).document.documentElement;
  }
  /**
   * Calculates an appropriate content rectangle for provided html or svg element.
   *
   * @param {Element} target - Element content rectangle of which needs to be calculated.
   * @returns {DOMRectInit}
   */
  function getContentRect(target) {
      if (!isBrowser) {
          return emptyRect;
      }
      if (isSVGGraphicsElement(target)) {
          return getSVGContentRect(target);
      }
      return getHTMLElementContentRect(target);
  }
  /**
   * Creates rectangle with an interface of the DOMRectReadOnly.
   * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
   *
   * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
   * @returns {DOMRectReadOnly}
   */
  function createReadOnlyRect(_a) {
      var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
      // If DOMRectReadOnly is available use it as a prototype for the rectangle.
      var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
      var rect = Object.create(Constr.prototype);
      // Rectangle's properties are not writable and non-enumerable.
      defineConfigurable(rect, {
          x: x, y: y, width: width, height: height,
          top: y,
          right: x + width,
          bottom: height + y,
          left: x
      });
      return rect;
  }
  /**
   * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
   * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
   *
   * @param {number} x - X coordinate.
   * @param {number} y - Y coordinate.
   * @param {number} width - Rectangle's width.
   * @param {number} height - Rectangle's height.
   * @returns {DOMRectInit}
   */
  function createRectInit(x, y, width, height) {
      return { x: x, y: y, width: width, height: height };
  }

  /**
   * Class that is responsible for computations of the content rectangle of
   * provided DOM element and for keeping track of it's changes.
   */
  var ResizeObservation = /** @class */ (function () {
      /**
       * Creates an instance of ResizeObservation.
       *
       * @param {Element} target - Element to be observed.
       */
      function ResizeObservation(target) {
          /**
           * Broadcasted width of content rectangle.
           *
           * @type {number}
           */
          this.broadcastWidth = 0;
          /**
           * Broadcasted height of content rectangle.
           *
           * @type {number}
           */
          this.broadcastHeight = 0;
          /**
           * Reference to the last observed content rectangle.
           *
           * @private {DOMRectInit}
           */
          this.contentRect_ = createRectInit(0, 0, 0, 0);
          this.target = target;
      }
      /**
       * Updates content rectangle and tells whether it's width or height properties
       * have changed since the last broadcast.
       *
       * @returns {boolean}
       */
      ResizeObservation.prototype.isActive = function () {
          var rect = getContentRect(this.target);
          this.contentRect_ = rect;
          return (rect.width !== this.broadcastWidth ||
              rect.height !== this.broadcastHeight);
      };
      /**
       * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
       * from the corresponding properties of the last observed content rectangle.
       *
       * @returns {DOMRectInit} Last observed content rectangle.
       */
      ResizeObservation.prototype.broadcastRect = function () {
          var rect = this.contentRect_;
          this.broadcastWidth = rect.width;
          this.broadcastHeight = rect.height;
          return rect;
      };
      return ResizeObservation;
  }());

  var ResizeObserverEntry = /** @class */ (function () {
      /**
       * Creates an instance of ResizeObserverEntry.
       *
       * @param {Element} target - Element that is being observed.
       * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
       */
      function ResizeObserverEntry(target, rectInit) {
          var contentRect = createReadOnlyRect(rectInit);
          // According to the specification following properties are not writable
          // and are also not enumerable in the native implementation.
          //
          // Property accessors are not being used as they'd require to define a
          // private WeakMap storage which may cause memory leaks in browsers that
          // don't support this type of collections.
          defineConfigurable(this, { target: target, contentRect: contentRect });
      }
      return ResizeObserverEntry;
  }());

  var ResizeObserverSPI = /** @class */ (function () {
      /**
       * Creates a new instance of ResizeObserver.
       *
       * @param {ResizeObserverCallback} callback - Callback function that is invoked
       *      when one of the observed elements changes it's content dimensions.
       * @param {ResizeObserverController} controller - Controller instance which
       *      is responsible for the updates of observer.
       * @param {ResizeObserver} callbackCtx - Reference to the public
       *      ResizeObserver instance which will be passed to callback function.
       */
      function ResizeObserverSPI(callback, controller, callbackCtx) {
          /**
           * Collection of resize observations that have detected changes in dimensions
           * of elements.
           *
           * @private {Array<ResizeObservation>}
           */
          this.activeObservations_ = [];
          /**
           * Registry of the ResizeObservation instances.
           *
           * @private {Map<Element, ResizeObservation>}
           */
          this.observations_ = new MapShim();
          if (typeof callback !== 'function') {
              throw new TypeError('The callback provided as parameter 1 is not a function.');
          }
          this.callback_ = callback;
          this.controller_ = controller;
          this.callbackCtx_ = callbackCtx;
      }
      /**
       * Starts observing provided element.
       *
       * @param {Element} target - Element to be observed.
       * @returns {void}
       */
      ResizeObserverSPI.prototype.observe = function (target) {
          if (!arguments.length) {
              throw new TypeError('1 argument required, but only 0 present.');
          }
          // Do nothing if current environment doesn't have the Element interface.
          if (typeof Element === 'undefined' || !(Element instanceof Object)) {
              return;
          }
          if (!(target instanceof getWindowOf(target).Element)) {
              throw new TypeError('parameter 1 is not of type "Element".');
          }
          var observations = this.observations_;
          // Do nothing if element is already being observed.
          if (observations.has(target)) {
              return;
          }
          observations.set(target, new ResizeObservation(target));
          this.controller_.addObserver(this);
          // Force the update of observations.
          this.controller_.refresh();
      };
      /**
       * Stops observing provided element.
       *
       * @param {Element} target - Element to stop observing.
       * @returns {void}
       */
      ResizeObserverSPI.prototype.unobserve = function (target) {
          if (!arguments.length) {
              throw new TypeError('1 argument required, but only 0 present.');
          }
          // Do nothing if current environment doesn't have the Element interface.
          if (typeof Element === 'undefined' || !(Element instanceof Object)) {
              return;
          }
          if (!(target instanceof getWindowOf(target).Element)) {
              throw new TypeError('parameter 1 is not of type "Element".');
          }
          var observations = this.observations_;
          // Do nothing if element is not being observed.
          if (!observations.has(target)) {
              return;
          }
          observations.delete(target);
          if (!observations.size) {
              this.controller_.removeObserver(this);
          }
      };
      /**
       * Stops observing all elements.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.disconnect = function () {
          this.clearActive();
          this.observations_.clear();
          this.controller_.removeObserver(this);
      };
      /**
       * Collects observation instances the associated element of which has changed
       * it's content rectangle.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.gatherActive = function () {
          var _this = this;
          this.clearActive();
          this.observations_.forEach(function (observation) {
              if (observation.isActive()) {
                  _this.activeObservations_.push(observation);
              }
          });
      };
      /**
       * Invokes initial callback function with a list of ResizeObserverEntry
       * instances collected from active resize observations.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.broadcastActive = function () {
          // Do nothing if observer doesn't have active observations.
          if (!this.hasActive()) {
              return;
          }
          var ctx = this.callbackCtx_;
          // Create ResizeObserverEntry instance for every active observation.
          var entries = this.activeObservations_.map(function (observation) {
              return new ResizeObserverEntry(observation.target, observation.broadcastRect());
          });
          this.callback_.call(ctx, entries, ctx);
          this.clearActive();
      };
      /**
       * Clears the collection of active observations.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.clearActive = function () {
          this.activeObservations_.splice(0);
      };
      /**
       * Tells whether observer has active observations.
       *
       * @returns {boolean}
       */
      ResizeObserverSPI.prototype.hasActive = function () {
          return this.activeObservations_.length > 0;
      };
      return ResizeObserverSPI;
  }());

  // Registry of internal observers. If WeakMap is not available use current shim
  // for the Map collection as it has all required methods and because WeakMap
  // can't be fully polyfilled anyway.
  var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
  /**
   * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
   * exposing only those methods and properties that are defined in the spec.
   */
  var ResizeObserver = /** @class */ (function () {
      /**
       * Creates a new instance of ResizeObserver.
       *
       * @param {ResizeObserverCallback} callback - Callback that is invoked when
       *      dimensions of the observed elements change.
       */
      function ResizeObserver(callback) {
          if (!(this instanceof ResizeObserver)) {
              throw new TypeError('Cannot call a class as a function.');
          }
          if (!arguments.length) {
              throw new TypeError('1 argument required, but only 0 present.');
          }
          var controller = ResizeObserverController.getInstance();
          var observer = new ResizeObserverSPI(callback, controller, this);
          observers.set(this, observer);
      }
      return ResizeObserver;
  }());
  // Expose public methods of ResizeObserver.
  [
      'observe',
      'unobserve',
      'disconnect'
  ].forEach(function (method) {
      ResizeObserver.prototype[method] = function () {
          var _a;
          return (_a = observers.get(this))[method].apply(_a, arguments);
      };
  });

  var index = (function () {
      // Export existing implementation if available.
      if (typeof global$1.ResizeObserver !== 'undefined') {
          return global$1.ResizeObserver;
      }
      return ResizeObserver;
  })();

  // based on rc-resize-observer 0.1.3

  // Still need to be compatible with React 15, we use class component here
  var VueResizeObserver = {
    name: 'ResizeObserver',
    props: {
      disabled: Boolean
    },
    data: function data() {
      this.currentElement = null;
      this.resizeObserver = null;
      return {
        width: 0,
        height: 0
      };
    },
    mounted: function mounted() {
      this.onComponentUpdated();
    },
    updated: function updated() {
      this.onComponentUpdated();
    },
    beforeDestroy: function beforeDestroy() {
      this.destroyObserver();
    },

    methods: {
      onComponentUpdated: function onComponentUpdated() {
        var disabled = this.$props.disabled;

        // Unregister if disabled

        if (disabled) {
          this.destroyObserver();
          return;
        }

        // Unregister if element changed
        var element = this.$el;
        var elementChanged = element !== this.currentElement;
        if (elementChanged) {
          this.destroyObserver();
          this.currentElement = element;
        }

        if (!this.resizeObserver && element) {
          this.resizeObserver = new index(this.onResize);
          this.resizeObserver.observe(element);
        }
      },
      onResize: function onResize(entries) {
        var target = entries[0].target;

        var _target$getBoundingCl = target.getBoundingClientRect(),
            width = _target$getBoundingCl.width,
            height = _target$getBoundingCl.height;
        /**
         * Resize observer trigger when content size changed.
         * In most case we just care about element size,
         * let's use `boundary` instead of `contentRect` here to avoid shaking.
         */


        var fixedWidth = Math.floor(width);
        var fixedHeight = Math.floor(height);

        if (this.width !== fixedWidth || this.height !== fixedHeight) {
          var size = { width: fixedWidth, height: fixedHeight };
          this.width = fixedWidth;
          this.height = fixedHeight;
          this.$emit('resize', size);
        }
      },
      destroyObserver: function destroyObserver() {
        if (this.resizeObserver) {
          this.resizeObserver.disconnect();
          this.resizeObserver = null;
        }
      }
    },

    render: function render() {
      return this.$slots['default'][0];
    }
  };

  // call something on iterator step with safe closing on error

  var _iterCall = function (iterator, fn, value, entries) {
    try {
      return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
    } catch (e) {
      var ret = iterator['return'];
      if (ret !== undefined) _anObject(ret.call(iterator));
      throw e;
    }
  };

  // check on default Array iterator

  var ITERATOR$1 = _wks('iterator');
  var ArrayProto = Array.prototype;

  var _isArrayIter = function (it) {
    return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$1] === it);
  };

  var _createProperty = function (object, index, value) {
    if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));
    else object[index] = value;
  };

  // getting tag from 19.1.3.6 Object.prototype.toString()

  var TAG$1 = _wks('toStringTag');
  // ES3 wrong here
  var ARG = _cof(function () { return arguments; }()) == 'Arguments';

  // fallback for IE11 Script Access Denied error
  var tryGet = function (it, key) {
    try {
      return it[key];
    } catch (e) { /* empty */ }
  };

  var _classof = function (it) {
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null'
      // @@toStringTag case
      : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
      // builtinTag case
      : ARG ? _cof(O)
      // ES3 arguments fallback
      : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };

  var ITERATOR$2 = _wks('iterator');

  var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
    if (it != undefined) return it[ITERATOR$2]
      || it['@@iterator']
      || _iterators[_classof(it)];
  };

  var ITERATOR$3 = _wks('iterator');
  var SAFE_CLOSING = false;

  try {
    var riter = [7][ITERATOR$3]();
    riter['return'] = function () { SAFE_CLOSING = true; };
    // eslint-disable-next-line no-throw-literal
    Array.from(riter, function () { throw 2; });
  } catch (e) { /* empty */ }

  var _iterDetect = function (exec, skipClosing) {
    if (!skipClosing && !SAFE_CLOSING) return false;
    var safe = false;
    try {
      var arr = [7];
      var iter = arr[ITERATOR$3]();
      iter.next = function () { return { done: safe = true }; };
      arr[ITERATOR$3] = function () { return iter; };
      exec(arr);
    } catch (e) { /* empty */ }
    return safe;
  };

  _export(_export.S + _export.F * !_iterDetect(function (iter) { Array.from(iter); }), 'Array', {
    // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
    from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
      var O = _toObject(arrayLike);
      var C = typeof this == 'function' ? this : Array;
      var aLen = arguments.length;
      var mapfn = aLen > 1 ? arguments[1] : undefined;
      var mapping = mapfn !== undefined;
      var index = 0;
      var iterFn = core_getIteratorMethod(O);
      var length, result, step, iterator;
      if (mapping) mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
      // if object isn't iterable or it's array with default iterator - use simple case
      if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {
        for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
          _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);
        }
      } else {
        length = _toLength(O.length);
        for (result = new C(length); length > index; index++) {
          _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
        }
      }
      result.length = index;
      return result;
    }
  });

  var from_1 = _core.Array.from;

  var from_1$1 = createCommonjsModule(function (module) {
  module.exports = { "default": from_1, __esModule: true };
  });

  var toConsumableArray = createCommonjsModule(function (module, exports) {

  exports.__esModule = true;



  var _from2 = _interopRequireDefault(from_1$1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.default = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return (0, _from2.default)(arr);
    }
  };
  });

  var _toConsumableArray = /*@__PURE__*/getDefaultExportFromCjs(toConsumableArray);

  var ITERATOR$4 = _wks('iterator');

  var core_isIterable = _core.isIterable = function (it) {
    var O = Object(it);
    return O[ITERATOR$4] !== undefined
      || '@@iterator' in O
      // eslint-disable-next-line no-prototype-builtins
      || _iterators.hasOwnProperty(_classof(O));
  };

  var isIterable = core_isIterable;

  var isIterable$1 = createCommonjsModule(function (module) {
  module.exports = { "default": isIterable, __esModule: true };
  });

  var core_getIterator = _core.getIterator = function (it) {
    var iterFn = core_getIteratorMethod(it);
    if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
    return _anObject(iterFn.call(it));
  };

  var getIterator = core_getIterator;

  var getIterator$1 = createCommonjsModule(function (module) {
  module.exports = { "default": getIterator, __esModule: true };
  });

  var slicedToArray = createCommonjsModule(function (module, exports) {

  exports.__esModule = true;



  var _isIterable3 = _interopRequireDefault(isIterable$1);



  var _getIterator3 = _interopRequireDefault(getIterator$1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.default = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if ((0, _isIterable3.default)(Object(arr))) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();
  });

  var _slicedToArray = /*@__PURE__*/getDefaultExportFromCjs(slicedToArray);

  function getType$1(fn) {
    var match = fn && fn.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : '';
  }

  var camelizeRE = /-(\w)/g;
  var camelize = function camelize(str) {
    return str.replace(camelizeRE, function (_, c) {
      return c ? c.toUpperCase() : '';
    });
  };
  var parseStyleText = function parseStyleText() {
    var cssText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var camel = arguments[1];

    var res = {};
    var listDelimiter = /;(?![^(]*\))/g;
    var propertyDelimiter = /:(.+)/;
    cssText.split(listDelimiter).forEach(function (item) {
      if (item) {
        var tmp = item.split(propertyDelimiter);
        if (tmp.length > 1) {
          var k = camel ? camelize(tmp[0].trim()) : tmp[0].trim();
          res[k] = tmp[1].trim();
        }
      }
    });
    return res;
  };

  var hasProp = function hasProp(instance, prop) {
    var $options = instance.$options || {};
    var propsData = $options.propsData || {};
    return prop in propsData;
  };
  var slotHasProp = function slotHasProp(slot, prop) {
    var $options = slot.componentOptions || {};
    var propsData = $options.propsData || {};
    return prop in propsData;
  };
  var filterProps = function filterProps(props) {
    var propsData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var res = {};
    Object.keys(props).forEach(function (k) {
      if (k in propsData || props[k] !== undefined) {
        res[k] = props[k];
      }
    });
    return res;
  };

  var getScopedSlots = function getScopedSlots(ele) {
    return ele.data && ele.data.scopedSlots || {};
  };

  var getSlots = function getSlots(ele) {
    var componentOptions = ele.componentOptions || {};
    if (ele.$vnode) {
      componentOptions = ele.$vnode.componentOptions || {};
    }
    var children = ele.children || componentOptions.children || [];
    var slots = {};
    children.forEach(function (child) {
      if (!isEmptyElement(child)) {
        var name = child.data && child.data.slot || 'default';
        slots[name] = slots[name] || [];
        slots[name].push(child);
      }
    });
    return _extends$1({}, slots, getScopedSlots(ele));
  };
  var getSlot = function getSlot(self) {
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    return self.$scopedSlots && self.$scopedSlots[name] && self.$scopedSlots[name](options) || self.$slots[name] || [];
  };

  var getAllChildren = function getAllChildren(ele) {
    var componentOptions = ele.componentOptions || {};
    if (ele.$vnode) {
      componentOptions = ele.$vnode.componentOptions || {};
    }
    return ele.children || componentOptions.children || [];
  };
  var getSlotOptions = function getSlotOptions(ele) {
    if (ele.fnOptions) {
      // 函数式组件
      return ele.fnOptions;
    }
    var componentOptions = ele.componentOptions;
    if (ele.$vnode) {
      componentOptions = ele.$vnode.componentOptions;
    }
    return componentOptions ? componentOptions.Ctor.options || {} : {};
  };
  var getOptionProps = function getOptionProps(instance) {
    if (instance.componentOptions) {
      var componentOptions = instance.componentOptions;
      var _componentOptions$pro = componentOptions.propsData,
          propsData = _componentOptions$pro === undefined ? {} : _componentOptions$pro,
          _componentOptions$Cto = componentOptions.Ctor,
          Ctor = _componentOptions$Cto === undefined ? {} : _componentOptions$Cto;

      var props = (Ctor.options || {}).props || {};
      var res = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Object.entries(props)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ref = _step.value;

          var _ref2 = _slicedToArray(_ref, 2);

          var k = _ref2[0];
          var v = _ref2[1];

          var def = v['default'];
          if (def !== undefined) {
            res[k] = typeof def === 'function' && getType$1(v.type) !== 'Function' ? def.call(instance) : def;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return _extends$1({}, res, propsData);
    }
    var _instance$$options = instance.$options,
        $options = _instance$$options === undefined ? {} : _instance$$options,
        _instance$$props = instance.$props,
        $props = _instance$$props === undefined ? {} : _instance$$props;

    return filterProps($props, $options.propsData);
  };

  var getComponentFromProp = function getComponentFromProp(instance, prop) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : instance;
    var execute = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

    if (instance.$createElement) {
      var h = instance.$createElement;
      var temp = instance[prop];
      if (temp !== undefined) {
        return typeof temp === 'function' && execute ? temp(h, options) : temp;
      }
      return instance.$scopedSlots[prop] && execute && instance.$scopedSlots[prop](options) || instance.$scopedSlots[prop] || instance.$slots[prop] || undefined;
    } else {
      var _h = instance.context.$createElement;
      var _temp = getPropsData(instance)[prop];
      if (_temp !== undefined) {
        return typeof _temp === 'function' && execute ? _temp(_h, options) : _temp;
      }
      var slotScope = getScopedSlots(instance)[prop];
      if (slotScope !== undefined) {
        return typeof slotScope === 'function' && execute ? slotScope(_h, options) : slotScope;
      }
      var slotsProp = [];
      var componentOptions = instance.componentOptions || {};
      (componentOptions.children || []).forEach(function (child) {
        if (child.data && child.data.slot === prop) {
          if (child.data.attrs) {
            delete child.data.attrs.slot;
          }
          if (child.tag === 'template') {
            slotsProp.push(child.children);
          } else {
            slotsProp.push(child);
          }
        }
      });
      return slotsProp.length ? slotsProp : undefined;
    }
  };

  var getPropsData = function getPropsData(ele) {
    var componentOptions = ele.componentOptions;
    if (ele.$vnode) {
      componentOptions = ele.$vnode.componentOptions;
    }
    return componentOptions ? componentOptions.propsData || {} : {};
  };
  var getValueByProp = function getValueByProp(ele, prop) {
    return getPropsData(ele)[prop];
  };

  var getAttrs = function getAttrs(ele) {
    var data = ele.data;
    if (ele.$vnode) {
      data = ele.$vnode.data;
    }
    return data ? data.attrs || {} : {};
  };

  var getKey = function getKey(ele) {
    var key = ele.key;
    if (ele.$vnode) {
      key = ele.$vnode.key;
    }
    return key;
  };

  function getEvents(child) {
    var events = {};
    if (child.componentOptions && child.componentOptions.listeners) {
      events = child.componentOptions.listeners;
    } else if (child.data && child.data.on) {
      events = child.data.on;
    }
    return _extends$1({}, events);
  }

  // 获取 xxx.native 或者 原生标签 事件
  function getDataEvents(child) {
    var events = {};
    if (child.data && child.data.on) {
      events = child.data.on;
    }
    return _extends$1({}, events);
  }

  // use getListeners instead this.$listeners
  // https://github.com/vueComponent/ant-design-vue/issues/1705
  function getListeners(context) {
    return (context.$vnode ? context.$vnode.componentOptions.listeners : context.$listeners) || {};
  }
  function getClass(ele) {
    var data = {};
    if (ele.data) {
      data = ele.data;
    } else if (ele.$vnode && ele.$vnode.data) {
      data = ele.$vnode.data;
    }
    var tempCls = data['class'] || {};
    var staticClass = data.staticClass;
    var cls = {};
    staticClass && staticClass.split(' ').forEach(function (c) {
      cls[c.trim()] = true;
    });
    if (typeof tempCls === 'string') {
      tempCls.split(' ').forEach(function (c) {
        cls[c.trim()] = true;
      });
    } else if (Array.isArray(tempCls)) {
      classnames(tempCls).split(' ').forEach(function (c) {
        cls[c.trim()] = true;
      });
    } else {
      cls = _extends$1({}, cls, tempCls);
    }
    return cls;
  }
  function getStyle(ele, camel) {
    var data = {};
    if (ele.data) {
      data = ele.data;
    } else if (ele.$vnode && ele.$vnode.data) {
      data = ele.$vnode.data;
    }
    var style = data.style || data.staticStyle;
    if (typeof style === 'string') {
      style = parseStyleText(style, camel);
    } else if (camel && style) {
      // 驼峰化
      var res = {};
      Object.keys(style).forEach(function (k) {
        return res[camelize(k)] = style[k];
      });
      return res;
    }
    return style;
  }

  function getComponentName(opts) {
    return opts && (opts.Ctor.options.name || opts.tag);
  }

  function isEmptyElement(c) {
    return !(c.tag || c.text && c.text.trim() !== '');
  }

  function isStringElement(c) {
    return !c.tag;
  }

  function filterEmpty() {
    var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    return children.filter(function (c) {
      return !isEmptyElement(c);
    });
  }
  var initDefaultProps = function initDefaultProps(propTypes, defaultProps) {
    Object.keys(defaultProps).forEach(function (k) {
      if (propTypes[k]) {
        propTypes[k].def && (propTypes[k] = propTypes[k].def(defaultProps[k]));
      } else {
        throw new Error('not have ' + k + ' prop');
      }
    });
    return propTypes;
  };

  function mergeProps() {
    var args = [].slice.call(arguments, 0);
    var props = {};
    args.forEach(function () {
      var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = Object.entries(p)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _ref3 = _step2.value;

          var _ref4 = _slicedToArray(_ref3, 2);

          var k = _ref4[0];
          var v = _ref4[1];

          props[k] = props[k] || {};
          if (isPlainObject_1(v)) {
            _extends$1(props[k], v);
          } else {
            props[k] = v;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2['return']) {
            _iterator2['return']();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    });
    return props;
  }

  function isValidElement(element) {
    return element && (typeof element === 'undefined' ? 'undefined' : _typeof(element)) === 'object' && 'componentOptions' in element && 'context' in element && element.tag !== undefined; // remove text node
  }

  var BaseMixin = {
    methods: {
      setState: function setState() {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var callback = arguments[1];

        var newState = typeof state === 'function' ? state(this.$data, this.$props) : state;
        if (this.getDerivedStateFromProps) {
          var s = this.getDerivedStateFromProps(getOptionProps(this), _extends$1({}, this.$data, newState));
          if (s === null) {
            return;
          } else {
            newState = _extends$1({}, newState, s || {});
          }
        }
        _extends$1(this.$data, newState);
        this.$forceUpdate();
        this.$nextTick(function () {
          callback && callback();
        });
      },
      __emit: function __emit() {
        // 直接调用listeners，底层组件不需要vueTool记录events
        var args = [].slice.call(arguments, 0);
        var eventName = args[0];
        var event = this.$listeners[eventName];
        if (args.length && event) {
          if (Array.isArray(event)) {
            for (var i = 0, l = event.length; i < l; i++) {
              event[i].apply(event, _toConsumableArray(args.slice(1)));
            }
          } else {
            event.apply(undefined, _toConsumableArray(args.slice(1)));
          }
        }
      }
    }
  };

  var performanceNow = createCommonjsModule(function (module) {
  // Generated by CoffeeScript 1.12.2
  (function() {
    var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

    if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
      module.exports = function() {
        return performance.now();
      };
    } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
      module.exports = function() {
        return (getNanoSeconds() - nodeLoadTime) / 1e6;
      };
      hrtime = process.hrtime;
      getNanoSeconds = function() {
        var hr;
        hr = hrtime();
        return hr[0] * 1e9 + hr[1];
      };
      moduleLoadTime = getNanoSeconds();
      upTime = process.uptime() * 1e9;
      nodeLoadTime = moduleLoadTime - upTime;
    } else if (Date.now) {
      module.exports = function() {
        return Date.now() - loadTime;
      };
      loadTime = Date.now();
    } else {
      module.exports = function() {
        return new Date().getTime() - loadTime;
      };
      loadTime = new Date().getTime();
    }

  }).call(commonjsGlobal);


  });

  var root$1 = typeof window === 'undefined' ? commonjsGlobal : window
    , vendors = ['moz', 'webkit']
    , suffix = 'AnimationFrame'
    , raf = root$1['request' + suffix]
    , caf = root$1['cancel' + suffix] || root$1['cancelRequest' + suffix];

  for(var i$1 = 0; !raf && i$1 < vendors.length; i$1++) {
    raf = root$1[vendors[i$1] + 'Request' + suffix];
    caf = root$1[vendors[i$1] + 'Cancel' + suffix]
        || root$1[vendors[i$1] + 'CancelRequest' + suffix];
  }

  // Some versions of FF have rAF but not cAF
  if(!raf || !caf) {
    var last = 0
      , id$1 = 0
      , queue = []
      , frameDuration = 1000 / 60;

    raf = function(callback) {
      if(queue.length === 0) {
        var _now = performanceNow()
          , next = Math.max(0, frameDuration - (_now - last));
        last = next + _now;
        setTimeout(function() {
          var cp = queue.slice(0);
          // Clear queue here to prevent
          // callbacks from appending listeners
          // to the current frame's queue
          queue.length = 0;
          for(var i = 0; i < cp.length; i++) {
            if(!cp[i].cancelled) {
              try{
                cp[i].callback(last);
              } catch(e) {
                setTimeout(function() { throw e }, 0);
              }
            }
          }
        }, Math.round(next));
      }
      queue.push({
        handle: ++id$1,
        callback: callback,
        cancelled: false
      });
      return id$1
    };

    caf = function(handle) {
      for(var i = 0; i < queue.length; i++) {
        if(queue[i].handle === handle) {
          queue[i].cancelled = true;
        }
      }
    };
  }

  var raf_1 = function(fn) {
    // Wrap in a new function to prevent
    // `cancel` potentially being assigned
    // to the native rAF function
    return raf.call(root$1, fn)
  };
  var cancel = function() {
    caf.apply(root$1, arguments);
  };
  var polyfill = function(object) {
    if (!object) {
      object = root$1;
    }
    object.requestAnimationFrame = raf;
    object.cancelAnimationFrame = caf;
  };
  raf_1.cancel = cancel;
  raf_1.polyfill = polyfill;

  function throttleByAnimationFrame(fn) {
    var requestId = void 0;

    var later = function later(args) {
      return function () {
        requestId = null;
        fn.apply(undefined, _toConsumableArray(args));
      };
    };

    var throttled = function throttled() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (requestId == null) {
        requestId = raf_1(later(args));
      }
    };

    throttled.cancel = function () {
      return raf_1.cancel(requestId);
    };

    return throttled;
  }

  /*!
   * Vue.js v2.6.12
   * (c) 2014-2020 Evan You
   * Released under the MIT License.
   */
  /*  */

  var emptyObject = Object.freeze({});

  // These helpers produce better VM code in JS engines due to their
  // explicitness and function inlining.
  function isUndef (v) {
    return v === undefined || v === null
  }

  function isDef (v) {
    return v !== undefined && v !== null
  }

  function isTrue (v) {
    return v === true
  }

  function isFalse (v) {
    return v === false
  }

  /**
   * Check if value is primitive.
   */
  function isPrimitive (value) {
    return (
      typeof value === 'string' ||
      typeof value === 'number' ||
      // $flow-disable-line
      typeof value === 'symbol' ||
      typeof value === 'boolean'
    )
  }

  /**
   * Quick object check - this is primarily used to tell
   * Objects from primitive values when we know the value
   * is a JSON-compliant type.
   */
  function isObject (obj) {
    return obj !== null && typeof obj === 'object'
  }

  /**
   * Get the raw type string of a value, e.g., [object Object].
   */
  var _toString = Object.prototype.toString;

  function toRawType (value) {
    return _toString.call(value).slice(8, -1)
  }

  /**
   * Strict object type check. Only returns true
   * for plain JavaScript objects.
   */
  function isPlainObject$1 (obj) {
    return _toString.call(obj) === '[object Object]'
  }

  function isRegExp (v) {
    return _toString.call(v) === '[object RegExp]'
  }

  /**
   * Check if val is a valid array index.
   */
  function isValidArrayIndex (val) {
    var n = parseFloat(String(val));
    return n >= 0 && Math.floor(n) === n && isFinite(val)
  }

  function isPromise (val) {
    return (
      isDef(val) &&
      typeof val.then === 'function' &&
      typeof val.catch === 'function'
    )
  }

  /**
   * Convert a value to a string that is actually rendered.
   */
  function toString$3 (val) {
    return val == null
      ? ''
      : Array.isArray(val) || (isPlainObject$1(val) && val.toString === _toString)
        ? JSON.stringify(val, null, 2)
        : String(val)
  }

  /**
   * Convert an input value to a number for persistence.
   * If the conversion fails, return original string.
   */
  function toNumber (val) {
    var n = parseFloat(val);
    return isNaN(n) ? val : n
  }

  /**
   * Make a map and return a function for checking if a key
   * is in that map.
   */
  function makeMap (
    str,
    expectsLowerCase
  ) {
    var map = Object.create(null);
    var list = str.split(',');
    for (var i = 0; i < list.length; i++) {
      map[list[i]] = true;
    }
    return expectsLowerCase
      ? function (val) { return map[val.toLowerCase()]; }
      : function (val) { return map[val]; }
  }

  /**
   * Check if a tag is a built-in tag.
   */
  var isBuiltInTag = makeMap('slot,component', true);

  /**
   * Check if an attribute is a reserved attribute.
   */
  var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

  /**
   * Remove an item from an array.
   */
  function remove (arr, item) {
    if (arr.length) {
      var index = arr.indexOf(item);
      if (index > -1) {
        return arr.splice(index, 1)
      }
    }
  }

  /**
   * Check whether an object has the property.
   */
  var hasOwnProperty$3 = Object.prototype.hasOwnProperty;
  function hasOwn$1 (obj, key) {
    return hasOwnProperty$3.call(obj, key)
  }

  /**
   * Create a cached version of a pure function.
   */
  function cached (fn) {
    var cache = Object.create(null);
    return (function cachedFn (str) {
      var hit = cache[str];
      return hit || (cache[str] = fn(str))
    })
  }

  /**
   * Camelize a hyphen-delimited string.
   */
  var camelizeRE$1 = /-(\w)/g;
  var camelize$1 = cached(function (str) {
    return str.replace(camelizeRE$1, function (_, c) { return c ? c.toUpperCase() : ''; })
  });

  /**
   * Capitalize a string.
   */
  var capitalize = cached(function (str) {
    return str.charAt(0).toUpperCase() + str.slice(1)
  });

  /**
   * Hyphenate a camelCase string.
   */
  var hyphenateRE = /\B([A-Z])/g;
  var hyphenate = cached(function (str) {
    return str.replace(hyphenateRE, '-$1').toLowerCase()
  });

  /**
   * Simple bind polyfill for environments that do not support it,
   * e.g., PhantomJS 1.x. Technically, we don't need this anymore
   * since native bind is now performant enough in most browsers.
   * But removing it would mean breaking code that was able to run in
   * PhantomJS 1.x, so this must be kept for backward compatibility.
   */

  /* istanbul ignore next */
  function polyfillBind (fn, ctx) {
    function boundFn (a) {
      var l = arguments.length;
      return l
        ? l > 1
          ? fn.apply(ctx, arguments)
          : fn.call(ctx, a)
        : fn.call(ctx)
    }

    boundFn._length = fn.length;
    return boundFn
  }

  function nativeBind (fn, ctx) {
    return fn.bind(ctx)
  }

  var bind = Function.prototype.bind
    ? nativeBind
    : polyfillBind;

  /**
   * Convert an Array-like object to a real Array.
   */
  function toArray (list, start) {
    start = start || 0;
    var i = list.length - start;
    var ret = new Array(i);
    while (i--) {
      ret[i] = list[i + start];
    }
    return ret
  }

  /**
   * Mix properties into target object.
   */
  function extend (to, _from) {
    for (var key in _from) {
      to[key] = _from[key];
    }
    return to
  }

  /**
   * Merge an Array of Objects into a single Object.
   */
  function toObject (arr) {
    var res = {};
    for (var i = 0; i < arr.length; i++) {
      if (arr[i]) {
        extend(res, arr[i]);
      }
    }
    return res
  }

  /* eslint-disable no-unused-vars */

  /**
   * Perform no operation.
   * Stubbing args to make Flow happy without leaving useless transpiled code
   * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
   */
  function noop$1 (a, b, c) {}

  /**
   * Always return false.
   */
  var no = function (a, b, c) { return false; };

  /* eslint-enable no-unused-vars */

  /**
   * Return the same value.
   */
  var identity = function (_) { return _; };

  /**
   * Check if two values are loosely equal - that is,
   * if they are plain objects, do they have the same shape?
   */
  function looseEqual (a, b) {
    if (a === b) { return true }
    var isObjectA = isObject(a);
    var isObjectB = isObject(b);
    if (isObjectA && isObjectB) {
      try {
        var isArrayA = Array.isArray(a);
        var isArrayB = Array.isArray(b);
        if (isArrayA && isArrayB) {
          return a.length === b.length && a.every(function (e, i) {
            return looseEqual(e, b[i])
          })
        } else if (a instanceof Date && b instanceof Date) {
          return a.getTime() === b.getTime()
        } else if (!isArrayA && !isArrayB) {
          var keysA = Object.keys(a);
          var keysB = Object.keys(b);
          return keysA.length === keysB.length && keysA.every(function (key) {
            return looseEqual(a[key], b[key])
          })
        } else {
          /* istanbul ignore next */
          return false
        }
      } catch (e) {
        /* istanbul ignore next */
        return false
      }
    } else if (!isObjectA && !isObjectB) {
      return String(a) === String(b)
    } else {
      return false
    }
  }

  /**
   * Return the first index at which a loosely equal value can be
   * found in the array (if value is a plain object, the array must
   * contain an object of the same shape), or -1 if it is not present.
   */
  function looseIndexOf (arr, val) {
    for (var i = 0; i < arr.length; i++) {
      if (looseEqual(arr[i], val)) { return i }
    }
    return -1
  }

  /**
   * Ensure a function is called only once.
   */
  function once (fn) {
    var called = false;
    return function () {
      if (!called) {
        called = true;
        fn.apply(this, arguments);
      }
    }
  }

  var SSR_ATTR = 'data-server-rendered';

  var ASSET_TYPES = [
    'component',
    'directive',
    'filter'
  ];

  var LIFECYCLE_HOOKS = [
    'beforeCreate',
    'created',
    'beforeMount',
    'mounted',
    'beforeUpdate',
    'updated',
    'beforeDestroy',
    'destroyed',
    'activated',
    'deactivated',
    'errorCaptured',
    'serverPrefetch'
  ];

  /*  */



  var config = ({
    /**
     * Option merge strategies (used in core/util/options)
     */
    // $flow-disable-line
    optionMergeStrategies: Object.create(null),

    /**
     * Whether to suppress warnings.
     */
    silent: false,

    /**
     * Show production mode tip message on boot?
     */
    productionTip: process.env.NODE_ENV !== 'production',

    /**
     * Whether to enable devtools
     */
    devtools: process.env.NODE_ENV !== 'production',

    /**
     * Whether to record perf
     */
    performance: false,

    /**
     * Error handler for watcher errors
     */
    errorHandler: null,

    /**
     * Warn handler for watcher warns
     */
    warnHandler: null,

    /**
     * Ignore certain custom elements
     */
    ignoredElements: [],

    /**
     * Custom user key aliases for v-on
     */
    // $flow-disable-line
    keyCodes: Object.create(null),

    /**
     * Check if a tag is reserved so that it cannot be registered as a
     * component. This is platform-dependent and may be overwritten.
     */
    isReservedTag: no,

    /**
     * Check if an attribute is reserved so that it cannot be used as a component
     * prop. This is platform-dependent and may be overwritten.
     */
    isReservedAttr: no,

    /**
     * Check if a tag is an unknown element.
     * Platform-dependent.
     */
    isUnknownElement: no,

    /**
     * Get the namespace of an element
     */
    getTagNamespace: noop$1,

    /**
     * Parse the real tag name for the specific platform.
     */
    parsePlatformTagName: identity,

    /**
     * Check if an attribute must be bound using property, e.g. value
     * Platform-dependent.
     */
    mustUseProp: no,

    /**
     * Perform updates asynchronously. Intended to be used by Vue Test Utils
     * This will significantly reduce performance if set to false.
     */
    async: true,

    /**
     * Exposed for legacy reasons
     */
    _lifecycleHooks: LIFECYCLE_HOOKS
  });

  /*  */

  /**
   * unicode letters used for parsing html tags, component names and property paths.
   * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
   * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
   */
  var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

  /**
   * Check if a string starts with $ or _
   */
  function isReserved (str) {
    var c = (str + '').charCodeAt(0);
    return c === 0x24 || c === 0x5F
  }

  /**
   * Define a property.
   */
  function def$1 (obj, key, val, enumerable) {
    Object.defineProperty(obj, key, {
      value: val,
      enumerable: !!enumerable,
      writable: true,
      configurable: true
    });
  }

  /**
   * Parse simple path.
   */
  var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
  function parsePath (path) {
    if (bailRE.test(path)) {
      return
    }
    var segments = path.split('.');
    return function (obj) {
      for (var i = 0; i < segments.length; i++) {
        if (!obj) { return }
        obj = obj[segments[i]];
      }
      return obj
    }
  }

  /*  */

  // can we use __proto__?
  var hasProto = '__proto__' in {};

  // Browser environment sniffing
  var inBrowser = typeof window !== 'undefined';
  var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
  var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
  var UA = inBrowser && window.navigator.userAgent.toLowerCase();
  var isIE = UA && /msie|trident/.test(UA);
  var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
  var isEdge = UA && UA.indexOf('edge/') > 0;
  var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
  var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
  var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
  var isPhantomJS = UA && /phantomjs/.test(UA);
  var isFF = UA && UA.match(/firefox\/(\d+)/);

  // Firefox has a "watch" function on Object.prototype...
  var nativeWatch = ({}).watch;

  var supportsPassive = false;
  if (inBrowser) {
    try {
      var opts = {};
      Object.defineProperty(opts, 'passive', ({
        get: function get () {
          /* istanbul ignore next */
          supportsPassive = true;
        }
      })); // https://github.com/facebook/flow/issues/285
      window.addEventListener('test-passive', null, opts);
    } catch (e) {}
  }

  // this needs to be lazy-evaled because vue may be required before
  // vue-server-renderer can set VUE_ENV
  var _isServer;
  var isServerRendering = function () {
    if (_isServer === undefined) {
      /* istanbul ignore if */
      if (!inBrowser && !inWeex && typeof global !== 'undefined') {
        // detect presence of vue-server-renderer and avoid
        // Webpack shimming the process
        _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
      } else {
        _isServer = false;
      }
    }
    return _isServer
  };

  // detect devtools
  var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

  /* istanbul ignore next */
  function isNative (Ctor) {
    return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
  }

  var hasSymbol =
    typeof Symbol !== 'undefined' && isNative(Symbol) &&
    typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

  var _Set;
  /* istanbul ignore if */ // $flow-disable-line
  if (typeof Set !== 'undefined' && isNative(Set)) {
    // use native Set when available.
    _Set = Set;
  } else {
    // a non-standard Set polyfill that only works with primitive keys.
    _Set = /*@__PURE__*/(function () {
      function Set () {
        this.set = Object.create(null);
      }
      Set.prototype.has = function has (key) {
        return this.set[key] === true
      };
      Set.prototype.add = function add (key) {
        this.set[key] = true;
      };
      Set.prototype.clear = function clear () {
        this.set = Object.create(null);
      };

      return Set;
    }());
  }

  /*  */

  var warn$1 = noop$1;
  var tip = noop$1;
  var generateComponentTrace = (noop$1); // work around flow check
  var formatComponentName = (noop$1);

  if (process.env.NODE_ENV !== 'production') {
    var hasConsole$1 = typeof console !== 'undefined';
    var classifyRE = /(?:^|[-_])(\w)/g;
    var classify = function (str) { return str
      .replace(classifyRE, function (c) { return c.toUpperCase(); })
      .replace(/[-_]/g, ''); };

    warn$1 = function (msg, vm) {
      var trace = vm ? generateComponentTrace(vm) : '';

      if (config.warnHandler) {
        config.warnHandler.call(null, msg, vm, trace);
      } else if (hasConsole$1 && (!config.silent)) {
        console.error(("[Vue warn]: " + msg + trace));
      }
    };

    tip = function (msg, vm) {
      if (hasConsole$1 && (!config.silent)) {
        console.warn("[Vue tip]: " + msg + (
          vm ? generateComponentTrace(vm) : ''
        ));
      }
    };

    formatComponentName = function (vm, includeFile) {
      if (vm.$root === vm) {
        return '<Root>'
      }
      var options = typeof vm === 'function' && vm.cid != null
        ? vm.options
        : vm._isVue
          ? vm.$options || vm.constructor.options
          : vm;
      var name = options.name || options._componentTag;
      var file = options.__file;
      if (!name && file) {
        var match = file.match(/([^/\\]+)\.vue$/);
        name = match && match[1];
      }

      return (
        (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
        (file && includeFile !== false ? (" at " + file) : '')
      )
    };

    var repeat = function (str, n) {
      var res = '';
      while (n) {
        if (n % 2 === 1) { res += str; }
        if (n > 1) { str += str; }
        n >>= 1;
      }
      return res
    };

    generateComponentTrace = function (vm) {
      if (vm._isVue && vm.$parent) {
        var tree = [];
        var currentRecursiveSequence = 0;
        while (vm) {
          if (tree.length > 0) {
            var last = tree[tree.length - 1];
            if (last.constructor === vm.constructor) {
              currentRecursiveSequence++;
              vm = vm.$parent;
              continue
            } else if (currentRecursiveSequence > 0) {
              tree[tree.length - 1] = [last, currentRecursiveSequence];
              currentRecursiveSequence = 0;
            }
          }
          tree.push(vm);
          vm = vm.$parent;
        }
        return '\n\nfound in\n\n' + tree
          .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
              ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
              : formatComponentName(vm))); })
          .join('\n')
      } else {
        return ("\n\n(found in " + (formatComponentName(vm)) + ")")
      }
    };
  }

  /*  */

  var uid = 0;

  /**
   * A dep is an observable that can have multiple
   * directives subscribing to it.
   */
  var Dep = function Dep () {
    this.id = uid++;
    this.subs = [];
  };

  Dep.prototype.addSub = function addSub (sub) {
    this.subs.push(sub);
  };

  Dep.prototype.removeSub = function removeSub (sub) {
    remove(this.subs, sub);
  };

  Dep.prototype.depend = function depend () {
    if (Dep.target) {
      Dep.target.addDep(this);
    }
  };

  Dep.prototype.notify = function notify () {
    // stabilize the subscriber list first
    var subs = this.subs.slice();
    if (process.env.NODE_ENV !== 'production' && !config.async) {
      // subs aren't sorted in scheduler if not running async
      // we need to sort them now to make sure they fire in correct
      // order
      subs.sort(function (a, b) { return a.id - b.id; });
    }
    for (var i = 0, l = subs.length; i < l; i++) {
      subs[i].update();
    }
  };

  // The current target watcher being evaluated.
  // This is globally unique because only one watcher
  // can be evaluated at a time.
  Dep.target = null;
  var targetStack = [];

  function pushTarget (target) {
    targetStack.push(target);
    Dep.target = target;
  }

  function popTarget () {
    targetStack.pop();
    Dep.target = targetStack[targetStack.length - 1];
  }

  /*  */

  var VNode = function VNode (
    tag,
    data,
    children,
    text,
    elm,
    context,
    componentOptions,
    asyncFactory
  ) {
    this.tag = tag;
    this.data = data;
    this.children = children;
    this.text = text;
    this.elm = elm;
    this.ns = undefined;
    this.context = context;
    this.fnContext = undefined;
    this.fnOptions = undefined;
    this.fnScopeId = undefined;
    this.key = data && data.key;
    this.componentOptions = componentOptions;
    this.componentInstance = undefined;
    this.parent = undefined;
    this.raw = false;
    this.isStatic = false;
    this.isRootInsert = true;
    this.isComment = false;
    this.isCloned = false;
    this.isOnce = false;
    this.asyncFactory = asyncFactory;
    this.asyncMeta = undefined;
    this.isAsyncPlaceholder = false;
  };

  var prototypeAccessors = { child: { configurable: true } };

  // DEPRECATED: alias for componentInstance for backwards compat.
  /* istanbul ignore next */
  prototypeAccessors.child.get = function () {
    return this.componentInstance
  };

  Object.defineProperties( VNode.prototype, prototypeAccessors );

  var createEmptyVNode = function (text) {
    if ( text === void 0 ) text = '';

    var node = new VNode();
    node.text = text;
    node.isComment = true;
    return node
  };

  function createTextVNode (val) {
    return new VNode(undefined, undefined, undefined, String(val))
  }

  // optimized shallow clone
  // used for static nodes and slot nodes because they may be reused across
  // multiple renders, cloning them avoids errors when DOM manipulations rely
  // on their elm reference.
  function cloneVNode (vnode) {
    var cloned = new VNode(
      vnode.tag,
      vnode.data,
      // #7975
      // clone children array to avoid mutating original in case of cloning
      // a child.
      vnode.children && vnode.children.slice(),
      vnode.text,
      vnode.elm,
      vnode.context,
      vnode.componentOptions,
      vnode.asyncFactory
    );
    cloned.ns = vnode.ns;
    cloned.isStatic = vnode.isStatic;
    cloned.key = vnode.key;
    cloned.isComment = vnode.isComment;
    cloned.fnContext = vnode.fnContext;
    cloned.fnOptions = vnode.fnOptions;
    cloned.fnScopeId = vnode.fnScopeId;
    cloned.asyncMeta = vnode.asyncMeta;
    cloned.isCloned = true;
    return cloned
  }

  /*
   * not type checking this file because flow doesn't play well with
   * dynamically accessing methods on Array prototype
   */

  var arrayProto = Array.prototype;
  var arrayMethods = Object.create(arrayProto);

  var methodsToPatch = [
    'push',
    'pop',
    'shift',
    'unshift',
    'splice',
    'sort',
    'reverse'
  ];

  /**
   * Intercept mutating methods and emit events
   */
  methodsToPatch.forEach(function (method) {
    // cache original method
    var original = arrayProto[method];
    def$1(arrayMethods, method, function mutator () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      var result = original.apply(this, args);
      var ob = this.__ob__;
      var inserted;
      switch (method) {
        case 'push':
        case 'unshift':
          inserted = args;
          break
        case 'splice':
          inserted = args.slice(2);
          break
      }
      if (inserted) { ob.observeArray(inserted); }
      // notify change
      ob.dep.notify();
      return result
    });
  });

  /*  */

  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

  /**
   * In some cases we may want to disable observation inside a component's
   * update computation.
   */
  var shouldObserve = true;

  function toggleObserving (value) {
    shouldObserve = value;
  }

  /**
   * Observer class that is attached to each observed
   * object. Once attached, the observer converts the target
   * object's property keys into getter/setters that
   * collect dependencies and dispatch updates.
   */
  var Observer = function Observer (value) {
    this.value = value;
    this.dep = new Dep();
    this.vmCount = 0;
    def$1(value, '__ob__', this);
    if (Array.isArray(value)) {
      if (hasProto) {
        protoAugment(value, arrayMethods);
      } else {
        copyAugment(value, arrayMethods, arrayKeys);
      }
      this.observeArray(value);
    } else {
      this.walk(value);
    }
  };

  /**
   * Walk through all properties and convert them into
   * getter/setters. This method should only be called when
   * value type is Object.
   */
  Observer.prototype.walk = function walk (obj) {
    var keys = Object.keys(obj);
    for (var i = 0; i < keys.length; i++) {
      defineReactive$$1(obj, keys[i]);
    }
  };

  /**
   * Observe a list of Array items.
   */
  Observer.prototype.observeArray = function observeArray (items) {
    for (var i = 0, l = items.length; i < l; i++) {
      observe(items[i]);
    }
  };

  // helpers

  /**
   * Augment a target Object or Array by intercepting
   * the prototype chain using __proto__
   */
  function protoAugment (target, src) {
    /* eslint-disable no-proto */
    target.__proto__ = src;
    /* eslint-enable no-proto */
  }

  /**
   * Augment a target Object or Array by defining
   * hidden properties.
   */
  /* istanbul ignore next */
  function copyAugment (target, src, keys) {
    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      def$1(target, key, src[key]);
    }
  }

  /**
   * Attempt to create an observer instance for a value,
   * returns the new observer if successfully observed,
   * or the existing observer if the value already has one.
   */
  function observe (value, asRootData) {
    if (!isObject(value) || value instanceof VNode) {
      return
    }
    var ob;
    if (hasOwn$1(value, '__ob__') && value.__ob__ instanceof Observer) {
      ob = value.__ob__;
    } else if (
      shouldObserve &&
      !isServerRendering() &&
      (Array.isArray(value) || isPlainObject$1(value)) &&
      Object.isExtensible(value) &&
      !value._isVue
    ) {
      ob = new Observer(value);
    }
    if (asRootData && ob) {
      ob.vmCount++;
    }
    return ob
  }

  /**
   * Define a reactive property on an Object.
   */
  function defineReactive$$1 (
    obj,
    key,
    val,
    customSetter,
    shallow
  ) {
    var dep = new Dep();

    var property = Object.getOwnPropertyDescriptor(obj, key);
    if (property && property.configurable === false) {
      return
    }

    // cater for pre-defined getter/setters
    var getter = property && property.get;
    var setter = property && property.set;
    if ((!getter || setter) && arguments.length === 2) {
      val = obj[key];
    }

    var childOb = !shallow && observe(val);
    Object.defineProperty(obj, key, {
      enumerable: true,
      configurable: true,
      get: function reactiveGetter () {
        var value = getter ? getter.call(obj) : val;
        if (Dep.target) {
          dep.depend();
          if (childOb) {
            childOb.dep.depend();
            if (Array.isArray(value)) {
              dependArray(value);
            }
          }
        }
        return value
      },
      set: function reactiveSetter (newVal) {
        var value = getter ? getter.call(obj) : val;
        /* eslint-disable no-self-compare */
        if (newVal === value || (newVal !== newVal && value !== value)) {
          return
        }
        /* eslint-enable no-self-compare */
        if (process.env.NODE_ENV !== 'production' && customSetter) {
          customSetter();
        }
        // #7981: for accessor properties without setter
        if (getter && !setter) { return }
        if (setter) {
          setter.call(obj, newVal);
        } else {
          val = newVal;
        }
        childOb = !shallow && observe(newVal);
        dep.notify();
      }
    });
  }

  /**
   * Set a property on an object. Adds the new property and
   * triggers change notification if the property doesn't
   * already exist.
   */
  function set (target, key, val) {
    if (process.env.NODE_ENV !== 'production' &&
      (isUndef(target) || isPrimitive(target))
    ) {
      warn$1(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
    }
    if (Array.isArray(target) && isValidArrayIndex(key)) {
      target.length = Math.max(target.length, key);
      target.splice(key, 1, val);
      return val
    }
    if (key in target && !(key in Object.prototype)) {
      target[key] = val;
      return val
    }
    var ob = (target).__ob__;
    if (target._isVue || (ob && ob.vmCount)) {
      process.env.NODE_ENV !== 'production' && warn$1(
        'Avoid adding reactive properties to a Vue instance or its root $data ' +
        'at runtime - declare it upfront in the data option.'
      );
      return val
    }
    if (!ob) {
      target[key] = val;
      return val
    }
    defineReactive$$1(ob.value, key, val);
    ob.dep.notify();
    return val
  }

  /**
   * Delete a property and trigger change if necessary.
   */
  function del (target, key) {
    if (process.env.NODE_ENV !== 'production' &&
      (isUndef(target) || isPrimitive(target))
    ) {
      warn$1(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
    }
    if (Array.isArray(target) && isValidArrayIndex(key)) {
      target.splice(key, 1);
      return
    }
    var ob = (target).__ob__;
    if (target._isVue || (ob && ob.vmCount)) {
      process.env.NODE_ENV !== 'production' && warn$1(
        'Avoid deleting properties on a Vue instance or its root $data ' +
        '- just set it to null.'
      );
      return
    }
    if (!hasOwn$1(target, key)) {
      return
    }
    delete target[key];
    if (!ob) {
      return
    }
    ob.dep.notify();
  }

  /**
   * Collect dependencies on array elements when the array is touched, since
   * we cannot intercept array element access like property getters.
   */
  function dependArray (value) {
    for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
      e = value[i];
      e && e.__ob__ && e.__ob__.dep.depend();
      if (Array.isArray(e)) {
        dependArray(e);
      }
    }
  }

  /*  */

  /**
   * Option overwriting strategies are functions that handle
   * how to merge a parent option value and a child option
   * value into the final value.
   */
  var strats = config.optionMergeStrategies;

  /**
   * Options with restrictions
   */
  if (process.env.NODE_ENV !== 'production') {
    strats.el = strats.propsData = function (parent, child, vm, key) {
      if (!vm) {
        warn$1(
          "option \"" + key + "\" can only be used during instance " +
          'creation with the `new` keyword.'
        );
      }
      return defaultStrat(parent, child)
    };
  }

  /**
   * Helper that recursively merges two data objects together.
   */
  function mergeData (to, from) {
    if (!from) { return to }
    var key, toVal, fromVal;

    var keys = hasSymbol
      ? Reflect.ownKeys(from)
      : Object.keys(from);

    for (var i = 0; i < keys.length; i++) {
      key = keys[i];
      // in case the object is already observed...
      if (key === '__ob__') { continue }
      toVal = to[key];
      fromVal = from[key];
      if (!hasOwn$1(to, key)) {
        set(to, key, fromVal);
      } else if (
        toVal !== fromVal &&
        isPlainObject$1(toVal) &&
        isPlainObject$1(fromVal)
      ) {
        mergeData(toVal, fromVal);
      }
    }
    return to
  }

  /**
   * Data
   */
  function mergeDataOrFn (
    parentVal,
    childVal,
    vm
  ) {
    if (!vm) {
      // in a Vue.extend merge, both should be functions
      if (!childVal) {
        return parentVal
      }
      if (!parentVal) {
        return childVal
      }
      // when parentVal & childVal are both present,
      // we need to return a function that returns the
      // merged result of both functions... no need to
      // check if parentVal is a function here because
      // it has to be a function to pass previous merges.
      return function mergedDataFn () {
        return mergeData(
          typeof childVal === 'function' ? childVal.call(this, this) : childVal,
          typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
        )
      }
    } else {
      return function mergedInstanceDataFn () {
        // instance merge
        var instanceData = typeof childVal === 'function'
          ? childVal.call(vm, vm)
          : childVal;
        var defaultData = typeof parentVal === 'function'
          ? parentVal.call(vm, vm)
          : parentVal;
        if (instanceData) {
          return mergeData(instanceData, defaultData)
        } else {
          return defaultData
        }
      }
    }
  }

  strats.data = function (
    parentVal,
    childVal,
    vm
  ) {
    if (!vm) {
      if (childVal && typeof childVal !== 'function') {
        process.env.NODE_ENV !== 'production' && warn$1(
          'The "data" option should be a function ' +
          'that returns a per-instance value in component ' +
          'definitions.',
          vm
        );

        return parentVal
      }
      return mergeDataOrFn(parentVal, childVal)
    }

    return mergeDataOrFn(parentVal, childVal, vm)
  };

  /**
   * Hooks and props are merged as arrays.
   */
  function mergeHook (
    parentVal,
    childVal
  ) {
    var res = childVal
      ? parentVal
        ? parentVal.concat(childVal)
        : Array.isArray(childVal)
          ? childVal
          : [childVal]
      : parentVal;
    return res
      ? dedupeHooks(res)
      : res
  }

  function dedupeHooks (hooks) {
    var res = [];
    for (var i = 0; i < hooks.length; i++) {
      if (res.indexOf(hooks[i]) === -1) {
        res.push(hooks[i]);
      }
    }
    return res
  }

  LIFECYCLE_HOOKS.forEach(function (hook) {
    strats[hook] = mergeHook;
  });

  /**
   * Assets
   *
   * When a vm is present (instance creation), we need to do
   * a three-way merge between constructor options, instance
   * options and parent options.
   */
  function mergeAssets (
    parentVal,
    childVal,
    vm,
    key
  ) {
    var res = Object.create(parentVal || null);
    if (childVal) {
      process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm);
      return extend(res, childVal)
    } else {
      return res
    }
  }

  ASSET_TYPES.forEach(function (type) {
    strats[type + 's'] = mergeAssets;
  });

  /**
   * Watchers.
   *
   * Watchers hashes should not overwrite one
   * another, so we merge them as arrays.
   */
  strats.watch = function (
    parentVal,
    childVal,
    vm,
    key
  ) {
    // work around Firefox's Object.prototype.watch...
    if (parentVal === nativeWatch) { parentVal = undefined; }
    if (childVal === nativeWatch) { childVal = undefined; }
    /* istanbul ignore if */
    if (!childVal) { return Object.create(parentVal || null) }
    if (process.env.NODE_ENV !== 'production') {
      assertObjectType(key, childVal, vm);
    }
    if (!parentVal) { return childVal }
    var ret = {};
    extend(ret, parentVal);
    for (var key$1 in childVal) {
      var parent = ret[key$1];
      var child = childVal[key$1];
      if (parent && !Array.isArray(parent)) {
        parent = [parent];
      }
      ret[key$1] = parent
        ? parent.concat(child)
        : Array.isArray(child) ? child : [child];
    }
    return ret
  };

  /**
   * Other object hashes.
   */
  strats.props =
  strats.methods =
  strats.inject =
  strats.computed = function (
    parentVal,
    childVal,
    vm,
    key
  ) {
    if (childVal && process.env.NODE_ENV !== 'production') {
      assertObjectType(key, childVal, vm);
    }
    if (!parentVal) { return childVal }
    var ret = Object.create(null);
    extend(ret, parentVal);
    if (childVal) { extend(ret, childVal); }
    return ret
  };
  strats.provide = mergeDataOrFn;

  /**
   * Default strategy.
   */
  var defaultStrat = function (parentVal, childVal) {
    return childVal === undefined
      ? parentVal
      : childVal
  };

  /**
   * Validate component names
   */
  function checkComponents (options) {
    for (var key in options.components) {
      validateComponentName(key);
    }
  }

  function validateComponentName (name) {
    if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
      warn$1(
        'Invalid component name: "' + name + '". Component names ' +
        'should conform to valid custom element name in html5 specification.'
      );
    }
    if (isBuiltInTag(name) || config.isReservedTag(name)) {
      warn$1(
        'Do not use built-in or reserved HTML elements as component ' +
        'id: ' + name
      );
    }
  }

  /**
   * Ensure all props option syntax are normalized into the
   * Object-based format.
   */
  function normalizeProps (options, vm) {
    var props = options.props;
    if (!props) { return }
    var res = {};
    var i, val, name;
    if (Array.isArray(props)) {
      i = props.length;
      while (i--) {
        val = props[i];
        if (typeof val === 'string') {
          name = camelize$1(val);
          res[name] = { type: null };
        } else if (process.env.NODE_ENV !== 'production') {
          warn$1('props must be strings when using array syntax.');
        }
      }
    } else if (isPlainObject$1(props)) {
      for (var key in props) {
        val = props[key];
        name = camelize$1(key);
        res[name] = isPlainObject$1(val)
          ? val
          : { type: val };
      }
    } else if (process.env.NODE_ENV !== 'production') {
      warn$1(
        "Invalid value for option \"props\": expected an Array or an Object, " +
        "but got " + (toRawType(props)) + ".",
        vm
      );
    }
    options.props = res;
  }

  /**
   * Normalize all injections into Object-based format
   */
  function normalizeInject (options, vm) {
    var inject = options.inject;
    if (!inject) { return }
    var normalized = options.inject = {};
    if (Array.isArray(inject)) {
      for (var i = 0; i < inject.length; i++) {
        normalized[inject[i]] = { from: inject[i] };
      }
    } else if (isPlainObject$1(inject)) {
      for (var key in inject) {
        var val = inject[key];
        normalized[key] = isPlainObject$1(val)
          ? extend({ from: key }, val)
          : { from: val };
      }
    } else if (process.env.NODE_ENV !== 'production') {
      warn$1(
        "Invalid value for option \"inject\": expected an Array or an Object, " +
        "but got " + (toRawType(inject)) + ".",
        vm
      );
    }
  }

  /**
   * Normalize raw function directives into object format.
   */
  function normalizeDirectives (options) {
    var dirs = options.directives;
    if (dirs) {
      for (var key in dirs) {
        var def$$1 = dirs[key];
        if (typeof def$$1 === 'function') {
          dirs[key] = { bind: def$$1, update: def$$1 };
        }
      }
    }
  }

  function assertObjectType (name, value, vm) {
    if (!isPlainObject$1(value)) {
      warn$1(
        "Invalid value for option \"" + name + "\": expected an Object, " +
        "but got " + (toRawType(value)) + ".",
        vm
      );
    }
  }

  /**
   * Merge two option objects into a new one.
   * Core utility used in both instantiation and inheritance.
   */
  function mergeOptions (
    parent,
    child,
    vm
  ) {
    if (process.env.NODE_ENV !== 'production') {
      checkComponents(child);
    }

    if (typeof child === 'function') {
      child = child.options;
    }

    normalizeProps(child, vm);
    normalizeInject(child, vm);
    normalizeDirectives(child);

    // Apply extends and mixins on the child options,
    // but only if it is a raw options object that isn't
    // the result of another mergeOptions call.
    // Only merged options has the _base property.
    if (!child._base) {
      if (child.extends) {
        parent = mergeOptions(parent, child.extends, vm);
      }
      if (child.mixins) {
        for (var i = 0, l = child.mixins.length; i < l; i++) {
          parent = mergeOptions(parent, child.mixins[i], vm);
        }
      }
    }

    var options = {};
    var key;
    for (key in parent) {
      mergeField(key);
    }
    for (key in child) {
      if (!hasOwn$1(parent, key)) {
        mergeField(key);
      }
    }
    function mergeField (key) {
      var strat = strats[key] || defaultStrat;
      options[key] = strat(parent[key], child[key], vm, key);
    }
    return options
  }

  /**
   * Resolve an asset.
   * This function is used because child instances need access
   * to assets defined in its ancestor chain.
   */
  function resolveAsset (
    options,
    type,
    id,
    warnMissing
  ) {
    /* istanbul ignore if */
    if (typeof id !== 'string') {
      return
    }
    var assets = options[type];
    // check local registration variations first
    if (hasOwn$1(assets, id)) { return assets[id] }
    var camelizedId = camelize$1(id);
    if (hasOwn$1(assets, camelizedId)) { return assets[camelizedId] }
    var PascalCaseId = capitalize(camelizedId);
    if (hasOwn$1(assets, PascalCaseId)) { return assets[PascalCaseId] }
    // fallback to prototype chain
    var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
    if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
      warn$1(
        'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
        options
      );
    }
    return res
  }

  /*  */



  function validateProp (
    key,
    propOptions,
    propsData,
    vm
  ) {
    var prop = propOptions[key];
    var absent = !hasOwn$1(propsData, key);
    var value = propsData[key];
    // boolean casting
    var booleanIndex = getTypeIndex(Boolean, prop.type);
    if (booleanIndex > -1) {
      if (absent && !hasOwn$1(prop, 'default')) {
        value = false;
      } else if (value === '' || value === hyphenate(key)) {
        // only cast empty string / same name to boolean if
        // boolean has higher priority
        var stringIndex = getTypeIndex(String, prop.type);
        if (stringIndex < 0 || booleanIndex < stringIndex) {
          value = true;
        }
      }
    }
    // check default value
    if (value === undefined) {
      value = getPropDefaultValue(vm, prop, key);
      // since the default value is a fresh copy,
      // make sure to observe it.
      var prevShouldObserve = shouldObserve;
      toggleObserving(true);
      observe(value);
      toggleObserving(prevShouldObserve);
    }
    if (
      process.env.NODE_ENV !== 'production' &&
      // skip validation for weex recycle-list child component props
      !(false)
    ) {
      assertProp(prop, key, value, vm, absent);
    }
    return value
  }

  /**
   * Get the default value of a prop.
   */
  function getPropDefaultValue (vm, prop, key) {
    // no default, return undefined
    if (!hasOwn$1(prop, 'default')) {
      return undefined
    }
    var def = prop.default;
    // warn against non-factory defaults for Object & Array
    if (process.env.NODE_ENV !== 'production' && isObject(def)) {
      warn$1(
        'Invalid default value for prop "' + key + '": ' +
        'Props with type Object/Array must use a factory function ' +
        'to return the default value.',
        vm
      );
    }
    // the raw prop value was also undefined from previous render,
    // return previous default value to avoid unnecessary watcher trigger
    if (vm && vm.$options.propsData &&
      vm.$options.propsData[key] === undefined &&
      vm._props[key] !== undefined
    ) {
      return vm._props[key]
    }
    // call factory function for non-Function types
    // a value is Function if its prototype is function even across different execution context
    return typeof def === 'function' && getType$2(prop.type) !== 'Function'
      ? def.call(vm)
      : def
  }

  /**
   * Assert whether a prop is valid.
   */
  function assertProp (
    prop,
    name,
    value,
    vm,
    absent
  ) {
    if (prop.required && absent) {
      warn$1(
        'Missing required prop: "' + name + '"',
        vm
      );
      return
    }
    if (value == null && !prop.required) {
      return
    }
    var type = prop.type;
    var valid = !type || type === true;
    var expectedTypes = [];
    if (type) {
      if (!Array.isArray(type)) {
        type = [type];
      }
      for (var i = 0; i < type.length && !valid; i++) {
        var assertedType = assertType(value, type[i]);
        expectedTypes.push(assertedType.expectedType || '');
        valid = assertedType.valid;
      }
    }

    if (!valid) {
      warn$1(
        getInvalidTypeMessage(name, value, expectedTypes),
        vm
      );
      return
    }
    var validator = prop.validator;
    if (validator) {
      if (!validator(value)) {
        warn$1(
          'Invalid prop: custom validator check failed for prop "' + name + '".',
          vm
        );
      }
    }
  }

  var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

  function assertType (value, type) {
    var valid;
    var expectedType = getType$2(type);
    if (simpleCheckRE.test(expectedType)) {
      var t = typeof value;
      valid = t === expectedType.toLowerCase();
      // for primitive wrapper objects
      if (!valid && t === 'object') {
        valid = value instanceof type;
      }
    } else if (expectedType === 'Object') {
      valid = isPlainObject$1(value);
    } else if (expectedType === 'Array') {
      valid = Array.isArray(value);
    } else {
      valid = value instanceof type;
    }
    return {
      valid: valid,
      expectedType: expectedType
    }
  }

  /**
   * Use function string name to check built-in types,
   * because a simple equality check will fail when running
   * across different vms / iframes.
   */
  function getType$2 (fn) {
    var match = fn && fn.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : ''
  }

  function isSameType (a, b) {
    return getType$2(a) === getType$2(b)
  }

  function getTypeIndex (type, expectedTypes) {
    if (!Array.isArray(expectedTypes)) {
      return isSameType(expectedTypes, type) ? 0 : -1
    }
    for (var i = 0, len = expectedTypes.length; i < len; i++) {
      if (isSameType(expectedTypes[i], type)) {
        return i
      }
    }
    return -1
  }

  function getInvalidTypeMessage (name, value, expectedTypes) {
    var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
      " Expected " + (expectedTypes.map(capitalize).join(', '));
    var expectedType = expectedTypes[0];
    var receivedType = toRawType(value);
    var expectedValue = styleValue(value, expectedType);
    var receivedValue = styleValue(value, receivedType);
    // check if we need to specify expected value
    if (expectedTypes.length === 1 &&
        isExplicable(expectedType) &&
        !isBoolean(expectedType, receivedType)) {
      message += " with value " + expectedValue;
    }
    message += ", got " + receivedType + " ";
    // check if we need to specify received value
    if (isExplicable(receivedType)) {
      message += "with value " + receivedValue + ".";
    }
    return message
  }

  function styleValue (value, type) {
    if (type === 'String') {
      return ("\"" + value + "\"")
    } else if (type === 'Number') {
      return ("" + (Number(value)))
    } else {
      return ("" + value)
    }
  }

  function isExplicable (value) {
    var explicitTypes = ['string', 'number', 'boolean'];
    return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
  }

  function isBoolean () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
  }

  /*  */

  function handleError (err, vm, info) {
    // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
    // See: https://github.com/vuejs/vuex/issues/1505
    pushTarget();
    try {
      if (vm) {
        var cur = vm;
        while ((cur = cur.$parent)) {
          var hooks = cur.$options.errorCaptured;
          if (hooks) {
            for (var i = 0; i < hooks.length; i++) {
              try {
                var capture = hooks[i].call(cur, err, vm, info) === false;
                if (capture) { return }
              } catch (e) {
                globalHandleError(e, cur, 'errorCaptured hook');
              }
            }
          }
        }
      }
      globalHandleError(err, vm, info);
    } finally {
      popTarget();
    }
  }

  function invokeWithErrorHandling (
    handler,
    context,
    args,
    vm,
    info
  ) {
    var res;
    try {
      res = args ? handler.apply(context, args) : handler.call(context);
      if (res && !res._isVue && isPromise(res) && !res._handled) {
        res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
        // issue #9511
        // avoid catch triggering multiple times when nested calls
        res._handled = true;
      }
    } catch (e) {
      handleError(e, vm, info);
    }
    return res
  }

  function globalHandleError (err, vm, info) {
    if (config.errorHandler) {
      try {
        return config.errorHandler.call(null, err, vm, info)
      } catch (e) {
        // if the user intentionally throws the original error in the handler,
        // do not log it twice
        if (e !== err) {
          logError(e, null, 'config.errorHandler');
        }
      }
    }
    logError(err, vm, info);
  }

  function logError (err, vm, info) {
    if (process.env.NODE_ENV !== 'production') {
      warn$1(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
    }
    /* istanbul ignore else */
    if ((inBrowser || inWeex) && typeof console !== 'undefined') {
      console.error(err);
    } else {
      throw err
    }
  }

  /*  */

  var isUsingMicroTask = false;

  var callbacks = [];
  var pending = false;

  function flushCallbacks () {
    pending = false;
    var copies = callbacks.slice(0);
    callbacks.length = 0;
    for (var i = 0; i < copies.length; i++) {
      copies[i]();
    }
  }

  // Here we have async deferring wrappers using microtasks.
  // In 2.5 we used (macro) tasks (in combination with microtasks).
  // However, it has subtle problems when state is changed right before repaint
  // (e.g. #6813, out-in transitions).
  // Also, using (macro) tasks in event handler would cause some weird behaviors
  // that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
  // So we now use microtasks everywhere, again.
  // A major drawback of this tradeoff is that there are some scenarios
  // where microtasks have too high a priority and fire in between supposedly
  // sequential events (e.g. #4521, #6690, which have workarounds)
  // or even between bubbling of the same event (#6566).
  var timerFunc;

  // The nextTick behavior leverages the microtask queue, which can be accessed
  // via either native Promise.then or MutationObserver.
  // MutationObserver has wider support, however it is seriously bugged in
  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
  // completely stops working after triggering a few times... so, if native
  // Promise is available, we will use it:
  /* istanbul ignore next, $flow-disable-line */
  if (typeof Promise !== 'undefined' && isNative(Promise)) {
    var p = Promise.resolve();
    timerFunc = function () {
      p.then(flushCallbacks);
      // In problematic UIWebViews, Promise.then doesn't completely break, but
      // it can get stuck in a weird state where callbacks are pushed into the
      // microtask queue but the queue isn't being flushed, until the browser
      // needs to do some other work, e.g. handle a timer. Therefore we can
      // "force" the microtask queue to be flushed by adding an empty timer.
      if (isIOS) { setTimeout(noop$1); }
    };
    isUsingMicroTask = true;
  } else if (!isIE && typeof MutationObserver !== 'undefined' && (
    isNative(MutationObserver) ||
    // PhantomJS and iOS 7.x
    MutationObserver.toString() === '[object MutationObserverConstructor]'
  )) {
    // Use MutationObserver where native Promise is not available,
    // e.g. PhantomJS, iOS7, Android 4.4
    // (#6466 MutationObserver is unreliable in IE11)
    var counter = 1;
    var observer = new MutationObserver(flushCallbacks);
    var textNode = document.createTextNode(String(counter));
    observer.observe(textNode, {
      characterData: true
    });
    timerFunc = function () {
      counter = (counter + 1) % 2;
      textNode.data = String(counter);
    };
    isUsingMicroTask = true;
  } else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
    // Fallback to setImmediate.
    // Technically it leverages the (macro) task queue,
    // but it is still a better choice than setTimeout.
    timerFunc = function () {
      setImmediate(flushCallbacks);
    };
  } else {
    // Fallback to setTimeout.
    timerFunc = function () {
      setTimeout(flushCallbacks, 0);
    };
  }

  function nextTick (cb, ctx) {
    var _resolve;
    callbacks.push(function () {
      if (cb) {
        try {
          cb.call(ctx);
        } catch (e) {
          handleError(e, ctx, 'nextTick');
        }
      } else if (_resolve) {
        _resolve(ctx);
      }
    });
    if (!pending) {
      pending = true;
      timerFunc();
    }
    // $flow-disable-line
    if (!cb && typeof Promise !== 'undefined') {
      return new Promise(function (resolve) {
        _resolve = resolve;
      })
    }
  }

  /*  */

  /* not type checking this file because flow doesn't play well with Proxy */

  var initProxy;

  if (process.env.NODE_ENV !== 'production') {
    var allowedGlobals = makeMap(
      'Infinity,undefined,NaN,isFinite,isNaN,' +
      'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
      'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
      'require' // for Webpack/Browserify
    );

    var warnNonPresent = function (target, key) {
      warn$1(
        "Property or method \"" + key + "\" is not defined on the instance but " +
        'referenced during render. Make sure that this property is reactive, ' +
        'either in the data option, or for class-based components, by ' +
        'initializing the property. ' +
        'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
        target
      );
    };

    var warnReservedPrefix = function (target, key) {
      warn$1(
        "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
        'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
        'prevent conflicts with Vue internals. ' +
        'See: https://vuejs.org/v2/api/#data',
        target
      );
    };

    var hasProxy =
      typeof Proxy !== 'undefined' && isNative(Proxy);

    if (hasProxy) {
      var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
      config.keyCodes = new Proxy(config.keyCodes, {
        set: function set (target, key, value) {
          if (isBuiltInModifier(key)) {
            warn$1(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
            return false
          } else {
            target[key] = value;
            return true
          }
        }
      });
    }

    var hasHandler = {
      has: function has (target, key) {
        var has = key in target;
        var isAllowed = allowedGlobals(key) ||
          (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
        if (!has && !isAllowed) {
          if (key in target.$data) { warnReservedPrefix(target, key); }
          else { warnNonPresent(target, key); }
        }
        return has || !isAllowed
      }
    };

    var getHandler = {
      get: function get (target, key) {
        if (typeof key === 'string' && !(key in target)) {
          if (key in target.$data) { warnReservedPrefix(target, key); }
          else { warnNonPresent(target, key); }
        }
        return target[key]
      }
    };

    initProxy = function initProxy (vm) {
      if (hasProxy) {
        // determine which proxy handler to use
        var options = vm.$options;
        var handlers = options.render && options.render._withStripped
          ? getHandler
          : hasHandler;
        vm._renderProxy = new Proxy(vm, handlers);
      } else {
        vm._renderProxy = vm;
      }
    };
  }

  /*  */

  var seenObjects = new _Set();

  /**
   * Recursively traverse an object to evoke all converted
   * getters, so that every nested property inside the object
   * is collected as a "deep" dependency.
   */
  function traverse (val) {
    _traverse(val, seenObjects);
    seenObjects.clear();
  }

  function _traverse (val, seen) {
    var i, keys;
    var isA = Array.isArray(val);
    if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
      return
    }
    if (val.__ob__) {
      var depId = val.__ob__.dep.id;
      if (seen.has(depId)) {
        return
      }
      seen.add(depId);
    }
    if (isA) {
      i = val.length;
      while (i--) { _traverse(val[i], seen); }
    } else {
      keys = Object.keys(val);
      i = keys.length;
      while (i--) { _traverse(val[keys[i]], seen); }
    }
  }

  var mark;
  var measure;

  if (process.env.NODE_ENV !== 'production') {
    var perf = inBrowser && window.performance;
    /* istanbul ignore if */
    if (
      perf &&
      perf.mark &&
      perf.measure &&
      perf.clearMarks &&
      perf.clearMeasures
    ) {
      mark = function (tag) { return perf.mark(tag); };
      measure = function (name, startTag, endTag) {
        perf.measure(name, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
        // perf.clearMeasures(name)
      };
    }
  }

  /*  */

  var normalizeEvent = cached(function (name) {
    var passive = name.charAt(0) === '&';
    name = passive ? name.slice(1) : name;
    var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
    name = once$$1 ? name.slice(1) : name;
    var capture = name.charAt(0) === '!';
    name = capture ? name.slice(1) : name;
    return {
      name: name,
      once: once$$1,
      capture: capture,
      passive: passive
    }
  });

  function createFnInvoker (fns, vm) {
    function invoker () {
      var arguments$1 = arguments;

      var fns = invoker.fns;
      if (Array.isArray(fns)) {
        var cloned = fns.slice();
        for (var i = 0; i < cloned.length; i++) {
          invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
        }
      } else {
        // return handler return value for single handlers
        return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
      }
    }
    invoker.fns = fns;
    return invoker
  }

  function updateListeners (
    on,
    oldOn,
    add,
    remove$$1,
    createOnceHandler,
    vm
  ) {
    var name, def$$1, cur, old, event;
    for (name in on) {
      def$$1 = cur = on[name];
      old = oldOn[name];
      event = normalizeEvent(name);
      if (isUndef(cur)) {
        process.env.NODE_ENV !== 'production' && warn$1(
          "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
          vm
        );
      } else if (isUndef(old)) {
        if (isUndef(cur.fns)) {
          cur = on[name] = createFnInvoker(cur, vm);
        }
        if (isTrue(event.once)) {
          cur = on[name] = createOnceHandler(event.name, cur, event.capture);
        }
        add(event.name, cur, event.capture, event.passive, event.params);
      } else if (cur !== old) {
        old.fns = cur;
        on[name] = old;
      }
    }
    for (name in oldOn) {
      if (isUndef(on[name])) {
        event = normalizeEvent(name);
        remove$$1(event.name, oldOn[name], event.capture);
      }
    }
  }

  /*  */

  function mergeVNodeHook (def, hookKey, hook) {
    if (def instanceof VNode) {
      def = def.data.hook || (def.data.hook = {});
    }
    var invoker;
    var oldHook = def[hookKey];

    function wrappedHook () {
      hook.apply(this, arguments);
      // important: remove merged hook to ensure it's called only once
      // and prevent memory leak
      remove(invoker.fns, wrappedHook);
    }

    if (isUndef(oldHook)) {
      // no existing hook
      invoker = createFnInvoker([wrappedHook]);
    } else {
      /* istanbul ignore if */
      if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
        // already a merged invoker
        invoker = oldHook;
        invoker.fns.push(wrappedHook);
      } else {
        // existing plain hook
        invoker = createFnInvoker([oldHook, wrappedHook]);
      }
    }

    invoker.merged = true;
    def[hookKey] = invoker;
  }

  /*  */

  function extractPropsFromVNodeData (
    data,
    Ctor,
    tag
  ) {
    // we are only extracting raw values here.
    // validation and default values are handled in the child
    // component itself.
    var propOptions = Ctor.options.props;
    if (isUndef(propOptions)) {
      return
    }
    var res = {};
    var attrs = data.attrs;
    var props = data.props;
    if (isDef(attrs) || isDef(props)) {
      for (var key in propOptions) {
        var altKey = hyphenate(key);
        if (process.env.NODE_ENV !== 'production') {
          var keyInLowerCase = key.toLowerCase();
          if (
            key !== keyInLowerCase &&
            attrs && hasOwn$1(attrs, keyInLowerCase)
          ) {
            tip(
              "Prop \"" + keyInLowerCase + "\" is passed to component " +
              (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
              " \"" + key + "\". " +
              "Note that HTML attributes are case-insensitive and camelCased " +
              "props need to use their kebab-case equivalents when using in-DOM " +
              "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
            );
          }
        }
        checkProp(res, props, key, altKey, true) ||
        checkProp(res, attrs, key, altKey, false);
      }
    }
    return res
  }

  function checkProp (
    res,
    hash,
    key,
    altKey,
    preserve
  ) {
    if (isDef(hash)) {
      if (hasOwn$1(hash, key)) {
        res[key] = hash[key];
        if (!preserve) {
          delete hash[key];
        }
        return true
      } else if (hasOwn$1(hash, altKey)) {
        res[key] = hash[altKey];
        if (!preserve) {
          delete hash[altKey];
        }
        return true
      }
    }
    return false
  }

  /*  */

  // The template compiler attempts to minimize the need for normalization by
  // statically analyzing the template at compile time.
  //
  // For plain HTML markup, normalization can be completely skipped because the
  // generated render function is guaranteed to return Array<VNode>. There are
  // two cases where extra normalization is needed:

  // 1. When the children contains components - because a functional component
  // may return an Array instead of a single root. In this case, just a simple
  // normalization is needed - if any child is an Array, we flatten the whole
  // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
  // because functional components already normalize their own children.
  function simpleNormalizeChildren (children) {
    for (var i = 0; i < children.length; i++) {
      if (Array.isArray(children[i])) {
        return Array.prototype.concat.apply([], children)
      }
    }
    return children
  }

  // 2. When the children contains constructs that always generated nested Arrays,
  // e.g. <template>, <slot>, v-for, or when the children is provided by user
  // with hand-written render functions / JSX. In such cases a full normalization
  // is needed to cater to all possible types of children values.
  function normalizeChildren (children) {
    return isPrimitive(children)
      ? [createTextVNode(children)]
      : Array.isArray(children)
        ? normalizeArrayChildren(children)
        : undefined
  }

  function isTextNode (node) {
    return isDef(node) && isDef(node.text) && isFalse(node.isComment)
  }

  function normalizeArrayChildren (children, nestedIndex) {
    var res = [];
    var i, c, lastIndex, last;
    for (i = 0; i < children.length; i++) {
      c = children[i];
      if (isUndef(c) || typeof c === 'boolean') { continue }
      lastIndex = res.length - 1;
      last = res[lastIndex];
      //  nested
      if (Array.isArray(c)) {
        if (c.length > 0) {
          c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
          // merge adjacent text nodes
          if (isTextNode(c[0]) && isTextNode(last)) {
            res[lastIndex] = createTextVNode(last.text + (c[0]).text);
            c.shift();
          }
          res.push.apply(res, c);
        }
      } else if (isPrimitive(c)) {
        if (isTextNode(last)) {
          // merge adjacent text nodes
          // this is necessary for SSR hydration because text nodes are
          // essentially merged when rendered to HTML strings
          res[lastIndex] = createTextVNode(last.text + c);
        } else if (c !== '') {
          // convert primitive to vnode
          res.push(createTextVNode(c));
        }
      } else {
        if (isTextNode(c) && isTextNode(last)) {
          // merge adjacent text nodes
          res[lastIndex] = createTextVNode(last.text + c.text);
        } else {
          // default key for nested array children (likely generated by v-for)
          if (isTrue(children._isVList) &&
            isDef(c.tag) &&
            isUndef(c.key) &&
            isDef(nestedIndex)) {
            c.key = "__vlist" + nestedIndex + "_" + i + "__";
          }
          res.push(c);
        }
      }
    }
    return res
  }

  /*  */

  function initProvide (vm) {
    var provide = vm.$options.provide;
    if (provide) {
      vm._provided = typeof provide === 'function'
        ? provide.call(vm)
        : provide;
    }
  }

  function initInjections (vm) {
    var result = resolveInject(vm.$options.inject, vm);
    if (result) {
      toggleObserving(false);
      Object.keys(result).forEach(function (key) {
        /* istanbul ignore else */
        if (process.env.NODE_ENV !== 'production') {
          defineReactive$$1(vm, key, result[key], function () {
            warn$1(
              "Avoid mutating an injected value directly since the changes will be " +
              "overwritten whenever the provided component re-renders. " +
              "injection being mutated: \"" + key + "\"",
              vm
            );
          });
        } else {
          defineReactive$$1(vm, key, result[key]);
        }
      });
      toggleObserving(true);
    }
  }

  function resolveInject (inject, vm) {
    if (inject) {
      // inject is :any because flow is not smart enough to figure out cached
      var result = Object.create(null);
      var keys = hasSymbol
        ? Reflect.ownKeys(inject)
        : Object.keys(inject);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        // #6574 in case the inject object is observed...
        if (key === '__ob__') { continue }
        var provideKey = inject[key].from;
        var source = vm;
        while (source) {
          if (source._provided && hasOwn$1(source._provided, provideKey)) {
            result[key] = source._provided[provideKey];
            break
          }
          source = source.$parent;
        }
        if (!source) {
          if ('default' in inject[key]) {
            var provideDefault = inject[key].default;
            result[key] = typeof provideDefault === 'function'
              ? provideDefault.call(vm)
              : provideDefault;
          } else if (process.env.NODE_ENV !== 'production') {
            warn$1(("Injection \"" + key + "\" not found"), vm);
          }
        }
      }
      return result
    }
  }

  /*  */



  /**
   * Runtime helper for resolving raw children VNodes into a slot object.
   */
  function resolveSlots (
    children,
    context
  ) {
    if (!children || !children.length) {
      return {}
    }
    var slots = {};
    for (var i = 0, l = children.length; i < l; i++) {
      var child = children[i];
      var data = child.data;
      // remove slot attribute if the node is resolved as a Vue slot node
      if (data && data.attrs && data.attrs.slot) {
        delete data.attrs.slot;
      }
      // named slots should only be respected if the vnode was rendered in the
      // same context.
      if ((child.context === context || child.fnContext === context) &&
        data && data.slot != null
      ) {
        var name = data.slot;
        var slot = (slots[name] || (slots[name] = []));
        if (child.tag === 'template') {
          slot.push.apply(slot, child.children || []);
        } else {
          slot.push(child);
        }
      } else {
        (slots.default || (slots.default = [])).push(child);
      }
    }
    // ignore slots that contains only whitespace
    for (var name$1 in slots) {
      if (slots[name$1].every(isWhitespace)) {
        delete slots[name$1];
      }
    }
    return slots
  }

  function isWhitespace (node) {
    return (node.isComment && !node.asyncFactory) || node.text === ' '
  }

  /*  */

  function normalizeScopedSlots (
    slots,
    normalSlots,
    prevSlots
  ) {
    var res;
    var hasNormalSlots = Object.keys(normalSlots).length > 0;
    var isStable = slots ? !!slots.$stable : !hasNormalSlots;
    var key = slots && slots.$key;
    if (!slots) {
      res = {};
    } else if (slots._normalized) {
      // fast path 1: child component re-render only, parent did not change
      return slots._normalized
    } else if (
      isStable &&
      prevSlots &&
      prevSlots !== emptyObject &&
      key === prevSlots.$key &&
      !hasNormalSlots &&
      !prevSlots.$hasNormal
    ) {
      // fast path 2: stable scoped slots w/ no normal slots to proxy,
      // only need to normalize once
      return prevSlots
    } else {
      res = {};
      for (var key$1 in slots) {
        if (slots[key$1] && key$1[0] !== '$') {
          res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
        }
      }
    }
    // expose normal slots on scopedSlots
    for (var key$2 in normalSlots) {
      if (!(key$2 in res)) {
        res[key$2] = proxyNormalSlot(normalSlots, key$2);
      }
    }
    // avoriaz seems to mock a non-extensible $scopedSlots object
    // and when that is passed down this would cause an error
    if (slots && Object.isExtensible(slots)) {
      (slots)._normalized = res;
    }
    def$1(res, '$stable', isStable);
    def$1(res, '$key', key);
    def$1(res, '$hasNormal', hasNormalSlots);
    return res
  }

  function normalizeScopedSlot(normalSlots, key, fn) {
    var normalized = function () {
      var res = arguments.length ? fn.apply(null, arguments) : fn({});
      res = res && typeof res === 'object' && !Array.isArray(res)
        ? [res] // single vnode
        : normalizeChildren(res);
      return res && (
        res.length === 0 ||
        (res.length === 1 && res[0].isComment) // #9658
      ) ? undefined
        : res
    };
    // this is a slot using the new v-slot syntax without scope. although it is
    // compiled as a scoped slot, render fn users would expect it to be present
    // on this.$slots because the usage is semantically a normal slot.
    if (fn.proxy) {
      Object.defineProperty(normalSlots, key, {
        get: normalized,
        enumerable: true,
        configurable: true
      });
    }
    return normalized
  }

  function proxyNormalSlot(slots, key) {
    return function () { return slots[key]; }
  }

  /*  */

  /**
   * Runtime helper for rendering v-for lists.
   */
  function renderList (
    val,
    render
  ) {
    var ret, i, l, keys, key;
    if (Array.isArray(val) || typeof val === 'string') {
      ret = new Array(val.length);
      for (i = 0, l = val.length; i < l; i++) {
        ret[i] = render(val[i], i);
      }
    } else if (typeof val === 'number') {
      ret = new Array(val);
      for (i = 0; i < val; i++) {
        ret[i] = render(i + 1, i);
      }
    } else if (isObject(val)) {
      if (hasSymbol && val[Symbol.iterator]) {
        ret = [];
        var iterator = val[Symbol.iterator]();
        var result = iterator.next();
        while (!result.done) {
          ret.push(render(result.value, ret.length));
          result = iterator.next();
        }
      } else {
        keys = Object.keys(val);
        ret = new Array(keys.length);
        for (i = 0, l = keys.length; i < l; i++) {
          key = keys[i];
          ret[i] = render(val[key], key, i);
        }
      }
    }
    if (!isDef(ret)) {
      ret = [];
    }
    (ret)._isVList = true;
    return ret
  }

  /*  */

  /**
   * Runtime helper for rendering <slot>
   */
  function renderSlot (
    name,
    fallback,
    props,
    bindObject
  ) {
    var scopedSlotFn = this.$scopedSlots[name];
    var nodes;
    if (scopedSlotFn) { // scoped slot
      props = props || {};
      if (bindObject) {
        if (process.env.NODE_ENV !== 'production' && !isObject(bindObject)) {
          warn$1(
            'slot v-bind without argument expects an Object',
            this
          );
        }
        props = extend(extend({}, bindObject), props);
      }
      nodes = scopedSlotFn(props) || fallback;
    } else {
      nodes = this.$slots[name] || fallback;
    }

    var target = props && props.slot;
    if (target) {
      return this.$createElement('template', { slot: target }, nodes)
    } else {
      return nodes
    }
  }

  /*  */

  /**
   * Runtime helper for resolving filters
   */
  function resolveFilter (id) {
    return resolveAsset(this.$options, 'filters', id, true) || identity
  }

  /*  */

  function isKeyNotMatch (expect, actual) {
    if (Array.isArray(expect)) {
      return expect.indexOf(actual) === -1
    } else {
      return expect !== actual
    }
  }

  /**
   * Runtime helper for checking keyCodes from config.
   * exposed as Vue.prototype._k
   * passing in eventKeyName as last argument separately for backwards compat
   */
  function checkKeyCodes (
    eventKeyCode,
    key,
    builtInKeyCode,
    eventKeyName,
    builtInKeyName
  ) {
    var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
    if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
      return isKeyNotMatch(builtInKeyName, eventKeyName)
    } else if (mappedKeyCode) {
      return isKeyNotMatch(mappedKeyCode, eventKeyCode)
    } else if (eventKeyName) {
      return hyphenate(eventKeyName) !== key
    }
  }

  /*  */

  /**
   * Runtime helper for merging v-bind="object" into a VNode's data.
   */
  function bindObjectProps (
    data,
    tag,
    value,
    asProp,
    isSync
  ) {
    if (value) {
      if (!isObject(value)) {
        process.env.NODE_ENV !== 'production' && warn$1(
          'v-bind without argument expects an Object or Array value',
          this
        );
      } else {
        if (Array.isArray(value)) {
          value = toObject(value);
        }
        var hash;
        var loop = function ( key ) {
          if (
            key === 'class' ||
            key === 'style' ||
            isReservedAttribute(key)
          ) {
            hash = data;
          } else {
            var type = data.attrs && data.attrs.type;
            hash = asProp || config.mustUseProp(tag, type, key)
              ? data.domProps || (data.domProps = {})
              : data.attrs || (data.attrs = {});
          }
          var camelizedKey = camelize$1(key);
          var hyphenatedKey = hyphenate(key);
          if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
            hash[key] = value[key];

            if (isSync) {
              var on = data.on || (data.on = {});
              on[("update:" + key)] = function ($event) {
                value[key] = $event;
              };
            }
          }
        };

        for (var key in value) loop( key );
      }
    }
    return data
  }

  /*  */

  /**
   * Runtime helper for rendering static trees.
   */
  function renderStatic (
    index,
    isInFor
  ) {
    var cached = this._staticTrees || (this._staticTrees = []);
    var tree = cached[index];
    // if has already-rendered static tree and not inside v-for,
    // we can reuse the same tree.
    if (tree && !isInFor) {
      return tree
    }
    // otherwise, render a fresh tree.
    tree = cached[index] = this.$options.staticRenderFns[index].call(
      this._renderProxy,
      null,
      this // for render fns generated for functional component templates
    );
    markStatic(tree, ("__static__" + index), false);
    return tree
  }

  /**
   * Runtime helper for v-once.
   * Effectively it means marking the node as static with a unique key.
   */
  function markOnce (
    tree,
    index,
    key
  ) {
    markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
    return tree
  }

  function markStatic (
    tree,
    key,
    isOnce
  ) {
    if (Array.isArray(tree)) {
      for (var i = 0; i < tree.length; i++) {
        if (tree[i] && typeof tree[i] !== 'string') {
          markStaticNode(tree[i], (key + "_" + i), isOnce);
        }
      }
    } else {
      markStaticNode(tree, key, isOnce);
    }
  }

  function markStaticNode (node, key, isOnce) {
    node.isStatic = true;
    node.key = key;
    node.isOnce = isOnce;
  }

  /*  */

  function bindObjectListeners (data, value) {
    if (value) {
      if (!isPlainObject$1(value)) {
        process.env.NODE_ENV !== 'production' && warn$1(
          'v-on without argument expects an Object value',
          this
        );
      } else {
        var on = data.on = data.on ? extend({}, data.on) : {};
        for (var key in value) {
          var existing = on[key];
          var ours = value[key];
          on[key] = existing ? [].concat(existing, ours) : ours;
        }
      }
    }
    return data
  }

  /*  */

  function resolveScopedSlots (
    fns, // see flow/vnode
    res,
    // the following are added in 2.6
    hasDynamicKeys,
    contentHashKey
  ) {
    res = res || { $stable: !hasDynamicKeys };
    for (var i = 0; i < fns.length; i++) {
      var slot = fns[i];
      if (Array.isArray(slot)) {
        resolveScopedSlots(slot, res, hasDynamicKeys);
      } else if (slot) {
        // marker for reverse proxying v-slot without scope on this.$slots
        if (slot.proxy) {
          slot.fn.proxy = true;
        }
        res[slot.key] = slot.fn;
      }
    }
    if (contentHashKey) {
      (res).$key = contentHashKey;
    }
    return res
  }

  /*  */

  function bindDynamicKeys (baseObj, values) {
    for (var i = 0; i < values.length; i += 2) {
      var key = values[i];
      if (typeof key === 'string' && key) {
        baseObj[values[i]] = values[i + 1];
      } else if (process.env.NODE_ENV !== 'production' && key !== '' && key !== null) {
        // null is a special value for explicitly removing a binding
        warn$1(
          ("Invalid value for dynamic directive argument (expected string or null): " + key),
          this
        );
      }
    }
    return baseObj
  }

  // helper to dynamically append modifier runtime markers to event names.
  // ensure only append when value is already string, otherwise it will be cast
  // to string and cause the type check to miss.
  function prependModifier (value, symbol) {
    return typeof value === 'string' ? symbol + value : value
  }

  /*  */

  function installRenderHelpers (target) {
    target._o = markOnce;
    target._n = toNumber;
    target._s = toString$3;
    target._l = renderList;
    target._t = renderSlot;
    target._q = looseEqual;
    target._i = looseIndexOf;
    target._m = renderStatic;
    target._f = resolveFilter;
    target._k = checkKeyCodes;
    target._b = bindObjectProps;
    target._v = createTextVNode;
    target._e = createEmptyVNode;
    target._u = resolveScopedSlots;
    target._g = bindObjectListeners;
    target._d = bindDynamicKeys;
    target._p = prependModifier;
  }

  /*  */

  function FunctionalRenderContext (
    data,
    props,
    children,
    parent,
    Ctor
  ) {
    var this$1 = this;

    var options = Ctor.options;
    // ensure the createElement function in functional components
    // gets a unique context - this is necessary for correct named slot check
    var contextVm;
    if (hasOwn$1(parent, '_uid')) {
      contextVm = Object.create(parent);
      // $flow-disable-line
      contextVm._original = parent;
    } else {
      // the context vm passed in is a functional context as well.
      // in this case we want to make sure we are able to get a hold to the
      // real context instance.
      contextVm = parent;
      // $flow-disable-line
      parent = parent._original;
    }
    var isCompiled = isTrue(options._compiled);
    var needNormalization = !isCompiled;

    this.data = data;
    this.props = props;
    this.children = children;
    this.parent = parent;
    this.listeners = data.on || emptyObject;
    this.injections = resolveInject(options.inject, parent);
    this.slots = function () {
      if (!this$1.$slots) {
        normalizeScopedSlots(
          data.scopedSlots,
          this$1.$slots = resolveSlots(children, parent)
        );
      }
      return this$1.$slots
    };

    Object.defineProperty(this, 'scopedSlots', ({
      enumerable: true,
      get: function get () {
        return normalizeScopedSlots(data.scopedSlots, this.slots())
      }
    }));

    // support for compiled functional template
    if (isCompiled) {
      // exposing $options for renderStatic()
      this.$options = options;
      // pre-resolve slots for renderSlot()
      this.$slots = this.slots();
      this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
    }

    if (options._scopeId) {
      this._c = function (a, b, c, d) {
        var vnode = createElement(contextVm, a, b, c, d, needNormalization);
        if (vnode && !Array.isArray(vnode)) {
          vnode.fnScopeId = options._scopeId;
          vnode.fnContext = parent;
        }
        return vnode
      };
    } else {
      this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
    }
  }

  installRenderHelpers(FunctionalRenderContext.prototype);

  function createFunctionalComponent (
    Ctor,
    propsData,
    data,
    contextVm,
    children
  ) {
    var options = Ctor.options;
    var props = {};
    var propOptions = options.props;
    if (isDef(propOptions)) {
      for (var key in propOptions) {
        props[key] = validateProp(key, propOptions, propsData || emptyObject);
      }
    } else {
      if (isDef(data.attrs)) { mergeProps$1(props, data.attrs); }
      if (isDef(data.props)) { mergeProps$1(props, data.props); }
    }

    var renderContext = new FunctionalRenderContext(
      data,
      props,
      children,
      contextVm,
      Ctor
    );

    var vnode = options.render.call(null, renderContext._c, renderContext);

    if (vnode instanceof VNode) {
      return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
    } else if (Array.isArray(vnode)) {
      var vnodes = normalizeChildren(vnode) || [];
      var res = new Array(vnodes.length);
      for (var i = 0; i < vnodes.length; i++) {
        res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
      }
      return res
    }
  }

  function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
    // #7817 clone node before setting fnContext, otherwise if the node is reused
    // (e.g. it was from a cached normal slot) the fnContext causes named slots
    // that should not be matched to match.
    var clone = cloneVNode(vnode);
    clone.fnContext = contextVm;
    clone.fnOptions = options;
    if (process.env.NODE_ENV !== 'production') {
      (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
    }
    if (data.slot) {
      (clone.data || (clone.data = {})).slot = data.slot;
    }
    return clone
  }

  function mergeProps$1 (to, from) {
    for (var key in from) {
      to[camelize$1(key)] = from[key];
    }
  }

  /*  */

  /*  */

  /*  */

  /*  */

  // inline hooks to be invoked on component VNodes during patch
  var componentVNodeHooks = {
    init: function init (vnode, hydrating) {
      if (
        vnode.componentInstance &&
        !vnode.componentInstance._isDestroyed &&
        vnode.data.keepAlive
      ) {
        // kept-alive components, treat as a patch
        var mountedNode = vnode; // work around flow
        componentVNodeHooks.prepatch(mountedNode, mountedNode);
      } else {
        var child = vnode.componentInstance = createComponentInstanceForVnode(
          vnode,
          activeInstance
        );
        child.$mount(hydrating ? vnode.elm : undefined, hydrating);
      }
    },

    prepatch: function prepatch (oldVnode, vnode) {
      var options = vnode.componentOptions;
      var child = vnode.componentInstance = oldVnode.componentInstance;
      updateChildComponent(
        child,
        options.propsData, // updated props
        options.listeners, // updated listeners
        vnode, // new parent vnode
        options.children // new children
      );
    },

    insert: function insert (vnode) {
      var context = vnode.context;
      var componentInstance = vnode.componentInstance;
      if (!componentInstance._isMounted) {
        componentInstance._isMounted = true;
        callHook(componentInstance, 'mounted');
      }
      if (vnode.data.keepAlive) {
        if (context._isMounted) {
          // vue-router#1212
          // During updates, a kept-alive component's child components may
          // change, so directly walking the tree here may call activated hooks
          // on incorrect children. Instead we push them into a queue which will
          // be processed after the whole patch process ended.
          queueActivatedComponent(componentInstance);
        } else {
          activateChildComponent(componentInstance, true /* direct */);
        }
      }
    },

    destroy: function destroy (vnode) {
      var componentInstance = vnode.componentInstance;
      if (!componentInstance._isDestroyed) {
        if (!vnode.data.keepAlive) {
          componentInstance.$destroy();
        } else {
          deactivateChildComponent(componentInstance, true /* direct */);
        }
      }
    }
  };

  var hooksToMerge = Object.keys(componentVNodeHooks);

  function createComponent (
    Ctor,
    data,
    context,
    children,
    tag
  ) {
    if (isUndef(Ctor)) {
      return
    }

    var baseCtor = context.$options._base;

    // plain options object: turn it into a constructor
    if (isObject(Ctor)) {
      Ctor = baseCtor.extend(Ctor);
    }

    // if at this stage it's not a constructor or an async component factory,
    // reject.
    if (typeof Ctor !== 'function') {
      if (process.env.NODE_ENV !== 'production') {
        warn$1(("Invalid Component definition: " + (String(Ctor))), context);
      }
      return
    }

    // async component
    var asyncFactory;
    if (isUndef(Ctor.cid)) {
      asyncFactory = Ctor;
      Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
      if (Ctor === undefined) {
        // return a placeholder node for async component, which is rendered
        // as a comment node but preserves all the raw information for the node.
        // the information will be used for async server-rendering and hydration.
        return createAsyncPlaceholder(
          asyncFactory,
          data,
          context,
          children,
          tag
        )
      }
    }

    data = data || {};

    // resolve constructor options in case global mixins are applied after
    // component constructor creation
    resolveConstructorOptions(Ctor);

    // transform component v-model data into props & events
    if (isDef(data.model)) {
      transformModel(Ctor.options, data);
    }

    // extract props
    var propsData = extractPropsFromVNodeData(data, Ctor, tag);

    // functional component
    if (isTrue(Ctor.options.functional)) {
      return createFunctionalComponent(Ctor, propsData, data, context, children)
    }

    // extract listeners, since these needs to be treated as
    // child component listeners instead of DOM listeners
    var listeners = data.on;
    // replace with listeners with .native modifier
    // so it gets processed during parent component patch.
    data.on = data.nativeOn;

    if (isTrue(Ctor.options.abstract)) {
      // abstract components do not keep anything
      // other than props & listeners & slot

      // work around flow
      var slot = data.slot;
      data = {};
      if (slot) {
        data.slot = slot;
      }
    }

    // install component management hooks onto the placeholder node
    installComponentHooks(data);

    // return a placeholder vnode
    var name = Ctor.options.name || tag;
    var vnode = new VNode(
      ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
      data, undefined, undefined, undefined, context,
      { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
      asyncFactory
    );

    return vnode
  }

  function createComponentInstanceForVnode (
    vnode, // we know it's MountedComponentVNode but flow doesn't
    parent // activeInstance in lifecycle state
  ) {
    var options = {
      _isComponent: true,
      _parentVnode: vnode,
      parent: parent
    };
    // check inline-template render functions
    var inlineTemplate = vnode.data.inlineTemplate;
    if (isDef(inlineTemplate)) {
      options.render = inlineTemplate.render;
      options.staticRenderFns = inlineTemplate.staticRenderFns;
    }
    return new vnode.componentOptions.Ctor(options)
  }

  function installComponentHooks (data) {
    var hooks = data.hook || (data.hook = {});
    for (var i = 0; i < hooksToMerge.length; i++) {
      var key = hooksToMerge[i];
      var existing = hooks[key];
      var toMerge = componentVNodeHooks[key];
      if (existing !== toMerge && !(existing && existing._merged)) {
        hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
      }
    }
  }

  function mergeHook$1 (f1, f2) {
    var merged = function (a, b) {
      // flow complains about extra args which is why we use any
      f1(a, b);
      f2(a, b);
    };
    merged._merged = true;
    return merged
  }

  // transform component v-model info (value and callback) into
  // prop and event handler respectively.
  function transformModel (options, data) {
    var prop = (options.model && options.model.prop) || 'value';
    var event = (options.model && options.model.event) || 'input'
    ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
    var on = data.on || (data.on = {});
    var existing = on[event];
    var callback = data.model.callback;
    if (isDef(existing)) {
      if (
        Array.isArray(existing)
          ? existing.indexOf(callback) === -1
          : existing !== callback
      ) {
        on[event] = [callback].concat(existing);
      }
    } else {
      on[event] = callback;
    }
  }

  /*  */

  var SIMPLE_NORMALIZE = 1;
  var ALWAYS_NORMALIZE = 2;

  // wrapper function for providing a more flexible interface
  // without getting yelled at by flow
  function createElement (
    context,
    tag,
    data,
    children,
    normalizationType,
    alwaysNormalize
  ) {
    if (Array.isArray(data) || isPrimitive(data)) {
      normalizationType = children;
      children = data;
      data = undefined;
    }
    if (isTrue(alwaysNormalize)) {
      normalizationType = ALWAYS_NORMALIZE;
    }
    return _createElement(context, tag, data, children, normalizationType)
  }

  function _createElement (
    context,
    tag,
    data,
    children,
    normalizationType
  ) {
    if (isDef(data) && isDef((data).__ob__)) {
      process.env.NODE_ENV !== 'production' && warn$1(
        "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
        'Always create fresh vnode data objects in each render!',
        context
      );
      return createEmptyVNode()
    }
    // object syntax in v-bind
    if (isDef(data) && isDef(data.is)) {
      tag = data.is;
    }
    if (!tag) {
      // in case of component :is set to falsy value
      return createEmptyVNode()
    }
    // warn against non-primitive key
    if (process.env.NODE_ENV !== 'production' &&
      isDef(data) && isDef(data.key) && !isPrimitive(data.key)
    ) {
      {
        warn$1(
          'Avoid using non-primitive value as key, ' +
          'use string/number value instead.',
          context
        );
      }
    }
    // support single function children as default scoped slot
    if (Array.isArray(children) &&
      typeof children[0] === 'function'
    ) {
      data = data || {};
      data.scopedSlots = { default: children[0] };
      children.length = 0;
    }
    if (normalizationType === ALWAYS_NORMALIZE) {
      children = normalizeChildren(children);
    } else if (normalizationType === SIMPLE_NORMALIZE) {
      children = simpleNormalizeChildren(children);
    }
    var vnode, ns;
    if (typeof tag === 'string') {
      var Ctor;
      ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
      if (config.isReservedTag(tag)) {
        // platform built-in elements
        if (process.env.NODE_ENV !== 'production' && isDef(data) && isDef(data.nativeOn)) {
          warn$1(
            ("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">."),
            context
          );
        }
        vnode = new VNode(
          config.parsePlatformTagName(tag), data, children,
          undefined, undefined, context
        );
      } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
        // component
        vnode = createComponent(Ctor, data, context, children, tag);
      } else {
        // unknown or unlisted namespaced elements
        // check at runtime because it may get assigned a namespace when its
        // parent normalizes children
        vnode = new VNode(
          tag, data, children,
          undefined, undefined, context
        );
      }
    } else {
      // direct component options / constructor
      vnode = createComponent(tag, data, context, children);
    }
    if (Array.isArray(vnode)) {
      return vnode
    } else if (isDef(vnode)) {
      if (isDef(ns)) { applyNS(vnode, ns); }
      if (isDef(data)) { registerDeepBindings(data); }
      return vnode
    } else {
      return createEmptyVNode()
    }
  }

  function applyNS (vnode, ns, force) {
    vnode.ns = ns;
    if (vnode.tag === 'foreignObject') {
      // use default namespace inside foreignObject
      ns = undefined;
      force = true;
    }
    if (isDef(vnode.children)) {
      for (var i = 0, l = vnode.children.length; i < l; i++) {
        var child = vnode.children[i];
        if (isDef(child.tag) && (
          isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
          applyNS(child, ns, force);
        }
      }
    }
  }

  // ref #5318
  // necessary to ensure parent re-render when deep bindings like :style and
  // :class are used on slot nodes
  function registerDeepBindings (data) {
    if (isObject(data.style)) {
      traverse(data.style);
    }
    if (isObject(data.class)) {
      traverse(data.class);
    }
  }

  /*  */

  function initRender (vm) {
    vm._vnode = null; // the root of the child tree
    vm._staticTrees = null; // v-once cached trees
    var options = vm.$options;
    var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
    var renderContext = parentVnode && parentVnode.context;
    vm.$slots = resolveSlots(options._renderChildren, renderContext);
    vm.$scopedSlots = emptyObject;
    // bind the createElement fn to this instance
    // so that we get proper render context inside it.
    // args order: tag, data, children, normalizationType, alwaysNormalize
    // internal version is used by render functions compiled from templates
    vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
    // normalization is always applied for the public version, used in
    // user-written render functions.
    vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

    // $attrs & $listeners are exposed for easier HOC creation.
    // they need to be reactive so that HOCs using them are always updated
    var parentData = parentVnode && parentVnode.data;

    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
        !isUpdatingChildComponent && warn$1("$attrs is readonly.", vm);
      }, true);
      defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
        !isUpdatingChildComponent && warn$1("$listeners is readonly.", vm);
      }, true);
    } else {
      defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
      defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);
    }
  }

  var currentRenderingInstance = null;

  function renderMixin (Vue) {
    // install runtime convenience helpers
    installRenderHelpers(Vue.prototype);

    Vue.prototype.$nextTick = function (fn) {
      return nextTick(fn, this)
    };

    Vue.prototype._render = function () {
      var vm = this;
      var ref = vm.$options;
      var render = ref.render;
      var _parentVnode = ref._parentVnode;

      if (_parentVnode) {
        vm.$scopedSlots = normalizeScopedSlots(
          _parentVnode.data.scopedSlots,
          vm.$slots,
          vm.$scopedSlots
        );
      }

      // set parent vnode. this allows render functions to have access
      // to the data on the placeholder node.
      vm.$vnode = _parentVnode;
      // render self
      var vnode;
      try {
        // There's no need to maintain a stack because all render fns are called
        // separately from one another. Nested component's render fns are called
        // when parent component is patched.
        currentRenderingInstance = vm;
        vnode = render.call(vm._renderProxy, vm.$createElement);
      } catch (e) {
        handleError(e, vm, "render");
        // return error render result,
        // or previous vnode to prevent render error causing blank component
        /* istanbul ignore else */
        if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {
          try {
            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
          } catch (e) {
            handleError(e, vm, "renderError");
            vnode = vm._vnode;
          }
        } else {
          vnode = vm._vnode;
        }
      } finally {
        currentRenderingInstance = null;
      }
      // if the returned array contains only a single node, allow it
      if (Array.isArray(vnode) && vnode.length === 1) {
        vnode = vnode[0];
      }
      // return empty vnode in case the render function errored out
      if (!(vnode instanceof VNode)) {
        if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {
          warn$1(
            'Multiple root nodes returned from render function. Render function ' +
            'should return a single root node.',
            vm
          );
        }
        vnode = createEmptyVNode();
      }
      // set parent
      vnode.parent = _parentVnode;
      return vnode
    };
  }

  /*  */

  function ensureCtor (comp, base) {
    if (
      comp.__esModule ||
      (hasSymbol && comp[Symbol.toStringTag] === 'Module')
    ) {
      comp = comp.default;
    }
    return isObject(comp)
      ? base.extend(comp)
      : comp
  }

  function createAsyncPlaceholder (
    factory,
    data,
    context,
    children,
    tag
  ) {
    var node = createEmptyVNode();
    node.asyncFactory = factory;
    node.asyncMeta = { data: data, context: context, children: children, tag: tag };
    return node
  }

  function resolveAsyncComponent (
    factory,
    baseCtor
  ) {
    if (isTrue(factory.error) && isDef(factory.errorComp)) {
      return factory.errorComp
    }

    if (isDef(factory.resolved)) {
      return factory.resolved
    }

    var owner = currentRenderingInstance;
    if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
      // already pending
      factory.owners.push(owner);
    }

    if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
      return factory.loadingComp
    }

    if (owner && !isDef(factory.owners)) {
      var owners = factory.owners = [owner];
      var sync = true;
      var timerLoading = null;
      var timerTimeout = null

      ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

      var forceRender = function (renderCompleted) {
        for (var i = 0, l = owners.length; i < l; i++) {
          (owners[i]).$forceUpdate();
        }

        if (renderCompleted) {
          owners.length = 0;
          if (timerLoading !== null) {
            clearTimeout(timerLoading);
            timerLoading = null;
          }
          if (timerTimeout !== null) {
            clearTimeout(timerTimeout);
            timerTimeout = null;
          }
        }
      };

      var resolve = once(function (res) {
        // cache resolved
        factory.resolved = ensureCtor(res, baseCtor);
        // invoke callbacks only if this is not a synchronous resolve
        // (async resolves are shimmed as synchronous during SSR)
        if (!sync) {
          forceRender(true);
        } else {
          owners.length = 0;
        }
      });

      var reject = once(function (reason) {
        process.env.NODE_ENV !== 'production' && warn$1(
          "Failed to resolve async component: " + (String(factory)) +
          (reason ? ("\nReason: " + reason) : '')
        );
        if (isDef(factory.errorComp)) {
          factory.error = true;
          forceRender(true);
        }
      });

      var res = factory(resolve, reject);

      if (isObject(res)) {
        if (isPromise(res)) {
          // () => Promise
          if (isUndef(factory.resolved)) {
            res.then(resolve, reject);
          }
        } else if (isPromise(res.component)) {
          res.component.then(resolve, reject);

          if (isDef(res.error)) {
            factory.errorComp = ensureCtor(res.error, baseCtor);
          }

          if (isDef(res.loading)) {
            factory.loadingComp = ensureCtor(res.loading, baseCtor);
            if (res.delay === 0) {
              factory.loading = true;
            } else {
              timerLoading = setTimeout(function () {
                timerLoading = null;
                if (isUndef(factory.resolved) && isUndef(factory.error)) {
                  factory.loading = true;
                  forceRender(false);
                }
              }, res.delay || 200);
            }
          }

          if (isDef(res.timeout)) {
            timerTimeout = setTimeout(function () {
              timerTimeout = null;
              if (isUndef(factory.resolved)) {
                reject(
                  process.env.NODE_ENV !== 'production'
                    ? ("timeout (" + (res.timeout) + "ms)")
                    : null
                );
              }
            }, res.timeout);
          }
        }
      }

      sync = false;
      // return in case resolved synchronously
      return factory.loading
        ? factory.loadingComp
        : factory.resolved
    }
  }

  /*  */

  function isAsyncPlaceholder (node) {
    return node.isComment && node.asyncFactory
  }

  /*  */

  function getFirstComponentChild (children) {
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var c = children[i];
        if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
          return c
        }
      }
    }
  }

  /*  */

  /*  */

  function initEvents (vm) {
    vm._events = Object.create(null);
    vm._hasHookEvent = false;
    // init parent attached events
    var listeners = vm.$options._parentListeners;
    if (listeners) {
      updateComponentListeners(vm, listeners);
    }
  }

  var target;

  function add (event, fn) {
    target.$on(event, fn);
  }

  function remove$1 (event, fn) {
    target.$off(event, fn);
  }

  function createOnceHandler (event, fn) {
    var _target = target;
    return function onceHandler () {
      var res = fn.apply(null, arguments);
      if (res !== null) {
        _target.$off(event, onceHandler);
      }
    }
  }

  function updateComponentListeners (
    vm,
    listeners,
    oldListeners
  ) {
    target = vm;
    updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
    target = undefined;
  }

  function eventsMixin (Vue) {
    var hookRE = /^hook:/;
    Vue.prototype.$on = function (event, fn) {
      var vm = this;
      if (Array.isArray(event)) {
        for (var i = 0, l = event.length; i < l; i++) {
          vm.$on(event[i], fn);
        }
      } else {
        (vm._events[event] || (vm._events[event] = [])).push(fn);
        // optimize hook:event cost by using a boolean flag marked at registration
        // instead of a hash lookup
        if (hookRE.test(event)) {
          vm._hasHookEvent = true;
        }
      }
      return vm
    };

    Vue.prototype.$once = function (event, fn) {
      var vm = this;
      function on () {
        vm.$off(event, on);
        fn.apply(vm, arguments);
      }
      on.fn = fn;
      vm.$on(event, on);
      return vm
    };

    Vue.prototype.$off = function (event, fn) {
      var vm = this;
      // all
      if (!arguments.length) {
        vm._events = Object.create(null);
        return vm
      }
      // array of events
      if (Array.isArray(event)) {
        for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
          vm.$off(event[i$1], fn);
        }
        return vm
      }
      // specific event
      var cbs = vm._events[event];
      if (!cbs) {
        return vm
      }
      if (!fn) {
        vm._events[event] = null;
        return vm
      }
      // specific handler
      var cb;
      var i = cbs.length;
      while (i--) {
        cb = cbs[i];
        if (cb === fn || cb.fn === fn) {
          cbs.splice(i, 1);
          break
        }
      }
      return vm
    };

    Vue.prototype.$emit = function (event) {
      var vm = this;
      if (process.env.NODE_ENV !== 'production') {
        var lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
          tip(
            "Event \"" + lowerCaseEvent + "\" is emitted in component " +
            (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
            "Note that HTML attributes are case-insensitive and you cannot use " +
            "v-on to listen to camelCase events when using in-DOM templates. " +
            "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
          );
        }
      }
      var cbs = vm._events[event];
      if (cbs) {
        cbs = cbs.length > 1 ? toArray(cbs) : cbs;
        var args = toArray(arguments, 1);
        var info = "event handler for \"" + event + "\"";
        for (var i = 0, l = cbs.length; i < l; i++) {
          invokeWithErrorHandling(cbs[i], vm, args, vm, info);
        }
      }
      return vm
    };
  }

  /*  */

  var activeInstance = null;
  var isUpdatingChildComponent = false;

  function setActiveInstance(vm) {
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    return function () {
      activeInstance = prevActiveInstance;
    }
  }

  function initLifecycle (vm) {
    var options = vm.$options;

    // locate first non-abstract parent
    var parent = options.parent;
    if (parent && !options.abstract) {
      while (parent.$options.abstract && parent.$parent) {
        parent = parent.$parent;
      }
      parent.$children.push(vm);
    }

    vm.$parent = parent;
    vm.$root = parent ? parent.$root : vm;

    vm.$children = [];
    vm.$refs = {};

    vm._watcher = null;
    vm._inactive = null;
    vm._directInactive = false;
    vm._isMounted = false;
    vm._isDestroyed = false;
    vm._isBeingDestroyed = false;
  }

  function lifecycleMixin (Vue) {
    Vue.prototype._update = function (vnode, hydrating) {
      var vm = this;
      var prevEl = vm.$el;
      var prevVnode = vm._vnode;
      var restoreActiveInstance = setActiveInstance(vm);
      vm._vnode = vnode;
      // Vue.prototype.__patch__ is injected in entry points
      // based on the rendering backend used.
      if (!prevVnode) {
        // initial render
        vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
      } else {
        // updates
        vm.$el = vm.__patch__(prevVnode, vnode);
      }
      restoreActiveInstance();
      // update __vue__ reference
      if (prevEl) {
        prevEl.__vue__ = null;
      }
      if (vm.$el) {
        vm.$el.__vue__ = vm;
      }
      // if parent is an HOC, update its $el as well
      if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
        vm.$parent.$el = vm.$el;
      }
      // updated hook is called by the scheduler to ensure that children are
      // updated in a parent's updated hook.
    };

    Vue.prototype.$forceUpdate = function () {
      var vm = this;
      if (vm._watcher) {
        vm._watcher.update();
      }
    };

    Vue.prototype.$destroy = function () {
      var vm = this;
      if (vm._isBeingDestroyed) {
        return
      }
      callHook(vm, 'beforeDestroy');
      vm._isBeingDestroyed = true;
      // remove self from parent
      var parent = vm.$parent;
      if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
        remove(parent.$children, vm);
      }
      // teardown watchers
      if (vm._watcher) {
        vm._watcher.teardown();
      }
      var i = vm._watchers.length;
      while (i--) {
        vm._watchers[i].teardown();
      }
      // remove reference from data ob
      // frozen object may not have observer.
      if (vm._data.__ob__) {
        vm._data.__ob__.vmCount--;
      }
      // call the last hook...
      vm._isDestroyed = true;
      // invoke destroy hooks on current rendered tree
      vm.__patch__(vm._vnode, null);
      // fire destroyed hook
      callHook(vm, 'destroyed');
      // turn off all instance listeners.
      vm.$off();
      // remove __vue__ reference
      if (vm.$el) {
        vm.$el.__vue__ = null;
      }
      // release circular reference (#6759)
      if (vm.$vnode) {
        vm.$vnode.parent = null;
      }
    };
  }

  function mountComponent (
    vm,
    el,
    hydrating
  ) {
    vm.$el = el;
    if (!vm.$options.render) {
      vm.$options.render = createEmptyVNode;
      if (process.env.NODE_ENV !== 'production') {
        /* istanbul ignore if */
        if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
          vm.$options.el || el) {
          warn$1(
            'You are using the runtime-only build of Vue where the template ' +
            'compiler is not available. Either pre-compile the templates into ' +
            'render functions, or use the compiler-included build.',
            vm
          );
        } else {
          warn$1(
            'Failed to mount component: template or render function not defined.',
            vm
          );
        }
      }
    }
    callHook(vm, 'beforeMount');

    var updateComponent;
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      updateComponent = function () {
        var name = vm._name;
        var id = vm._uid;
        var startTag = "vue-perf-start:" + id;
        var endTag = "vue-perf-end:" + id;

        mark(startTag);
        var vnode = vm._render();
        mark(endTag);
        measure(("vue " + name + " render"), startTag, endTag);

        mark(startTag);
        vm._update(vnode, hydrating);
        mark(endTag);
        measure(("vue " + name + " patch"), startTag, endTag);
      };
    } else {
      updateComponent = function () {
        vm._update(vm._render(), hydrating);
      };
    }

    // we set this to vm._watcher inside the watcher's constructor
    // since the watcher's initial patch may call $forceUpdate (e.g. inside child
    // component's mounted hook), which relies on vm._watcher being already defined
    new Watcher(vm, updateComponent, noop$1, {
      before: function before () {
        if (vm._isMounted && !vm._isDestroyed) {
          callHook(vm, 'beforeUpdate');
        }
      }
    }, true /* isRenderWatcher */);
    hydrating = false;

    // manually mounted instance, call mounted on self
    // mounted is called for render-created child components in its inserted hook
    if (vm.$vnode == null) {
      vm._isMounted = true;
      callHook(vm, 'mounted');
    }
    return vm
  }

  function updateChildComponent (
    vm,
    propsData,
    listeners,
    parentVnode,
    renderChildren
  ) {
    if (process.env.NODE_ENV !== 'production') {
      isUpdatingChildComponent = true;
    }

    // determine whether component has slot children
    // we need to do this before overwriting $options._renderChildren.

    // check if there are dynamic scopedSlots (hand-written or compiled but with
    // dynamic slot names). Static scoped slots compiled from template has the
    // "$stable" marker.
    var newScopedSlots = parentVnode.data.scopedSlots;
    var oldScopedSlots = vm.$scopedSlots;
    var hasDynamicScopedSlot = !!(
      (newScopedSlots && !newScopedSlots.$stable) ||
      (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
      (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
    );

    // Any static slot children from the parent may have changed during parent's
    // update. Dynamic scoped slots may also have changed. In such cases, a forced
    // update is necessary to ensure correctness.
    var needsForceUpdate = !!(
      renderChildren ||               // has new static slots
      vm.$options._renderChildren ||  // has old static slots
      hasDynamicScopedSlot
    );

    vm.$options._parentVnode = parentVnode;
    vm.$vnode = parentVnode; // update vm's placeholder node without re-render

    if (vm._vnode) { // update child tree's parent
      vm._vnode.parent = parentVnode;
    }
    vm.$options._renderChildren = renderChildren;

    // update $attrs and $listeners hash
    // these are also reactive so they may trigger child update if the child
    // used them during render
    vm.$attrs = parentVnode.data.attrs || emptyObject;
    vm.$listeners = listeners || emptyObject;

    // update props
    if (propsData && vm.$options.props) {
      toggleObserving(false);
      var props = vm._props;
      var propKeys = vm.$options._propKeys || [];
      for (var i = 0; i < propKeys.length; i++) {
        var key = propKeys[i];
        var propOptions = vm.$options.props; // wtf flow?
        props[key] = validateProp(key, propOptions, propsData, vm);
      }
      toggleObserving(true);
      // keep a copy of raw propsData
      vm.$options.propsData = propsData;
    }

    // update listeners
    listeners = listeners || emptyObject;
    var oldListeners = vm.$options._parentListeners;
    vm.$options._parentListeners = listeners;
    updateComponentListeners(vm, listeners, oldListeners);

    // resolve slots + force update if has children
    if (needsForceUpdate) {
      vm.$slots = resolveSlots(renderChildren, parentVnode.context);
      vm.$forceUpdate();
    }

    if (process.env.NODE_ENV !== 'production') {
      isUpdatingChildComponent = false;
    }
  }

  function isInInactiveTree (vm) {
    while (vm && (vm = vm.$parent)) {
      if (vm._inactive) { return true }
    }
    return false
  }

  function activateChildComponent (vm, direct) {
    if (direct) {
      vm._directInactive = false;
      if (isInInactiveTree(vm)) {
        return
      }
    } else if (vm._directInactive) {
      return
    }
    if (vm._inactive || vm._inactive === null) {
      vm._inactive = false;
      for (var i = 0; i < vm.$children.length; i++) {
        activateChildComponent(vm.$children[i]);
      }
      callHook(vm, 'activated');
    }
  }

  function deactivateChildComponent (vm, direct) {
    if (direct) {
      vm._directInactive = true;
      if (isInInactiveTree(vm)) {
        return
      }
    }
    if (!vm._inactive) {
      vm._inactive = true;
      for (var i = 0; i < vm.$children.length; i++) {
        deactivateChildComponent(vm.$children[i]);
      }
      callHook(vm, 'deactivated');
    }
  }

  function callHook (vm, hook) {
    // #7573 disable dep collection when invoking lifecycle hooks
    pushTarget();
    var handlers = vm.$options[hook];
    var info = hook + " hook";
    if (handlers) {
      for (var i = 0, j = handlers.length; i < j; i++) {
        invokeWithErrorHandling(handlers[i], vm, null, vm, info);
      }
    }
    if (vm._hasHookEvent) {
      vm.$emit('hook:' + hook);
    }
    popTarget();
  }

  /*  */

  var MAX_UPDATE_COUNT = 100;

  var queue$1 = [];
  var activatedChildren = [];
  var has = {};
  var circular = {};
  var waiting = false;
  var flushing = false;
  var index$1 = 0;

  /**
   * Reset the scheduler's state.
   */
  function resetSchedulerState () {
    index$1 = queue$1.length = activatedChildren.length = 0;
    has = {};
    if (process.env.NODE_ENV !== 'production') {
      circular = {};
    }
    waiting = flushing = false;
  }

  // Async edge case #6566 requires saving the timestamp when event listeners are
  // attached. However, calling performance.now() has a perf overhead especially
  // if the page has thousands of event listeners. Instead, we take a timestamp
  // every time the scheduler flushes and use that for all event listeners
  // attached during that flush.
  var currentFlushTimestamp = 0;

  // Async edge case fix requires storing an event listener's attach timestamp.
  var getNow = Date.now;

  // Determine what event timestamp the browser is using. Annoyingly, the
  // timestamp can either be hi-res (relative to page load) or low-res
  // (relative to UNIX epoch), so in order to compare time we have to use the
  // same timestamp type when saving the flush timestamp.
  // All IE versions use low-res event timestamps, and have problematic clock
  // implementations (#9632)
  if (inBrowser && !isIE) {
    var performance$1 = window.performance;
    if (
      performance$1 &&
      typeof performance$1.now === 'function' &&
      getNow() > document.createEvent('Event').timeStamp
    ) {
      // if the event timestamp, although evaluated AFTER the Date.now(), is
      // smaller than it, it means the event is using a hi-res timestamp,
      // and we need to use the hi-res version for event listener timestamps as
      // well.
      getNow = function () { return performance$1.now(); };
    }
  }

  /**
   * Flush both queues and run the watchers.
   */
  function flushSchedulerQueue () {
    currentFlushTimestamp = getNow();
    flushing = true;
    var watcher, id;

    // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child)
    // 2. A component's user watchers are run before its render watcher (because
    //    user watchers are created before the render watcher)
    // 3. If a component is destroyed during a parent component's watcher run,
    //    its watchers can be skipped.
    queue$1.sort(function (a, b) { return a.id - b.id; });

    // do not cache length because more watchers might be pushed
    // as we run existing watchers
    for (index$1 = 0; index$1 < queue$1.length; index$1++) {
      watcher = queue$1[index$1];
      if (watcher.before) {
        watcher.before();
      }
      id = watcher.id;
      has[id] = null;
      watcher.run();
      // in dev build, check and stop circular updates.
      if (process.env.NODE_ENV !== 'production' && has[id] != null) {
        circular[id] = (circular[id] || 0) + 1;
        if (circular[id] > MAX_UPDATE_COUNT) {
          warn$1(
            'You may have an infinite update loop ' + (
              watcher.user
                ? ("in watcher with expression \"" + (watcher.expression) + "\"")
                : "in a component render function."
            ),
            watcher.vm
          );
          break
        }
      }
    }

    // keep copies of post queues before resetting state
    var activatedQueue = activatedChildren.slice();
    var updatedQueue = queue$1.slice();

    resetSchedulerState();

    // call component updated and activated hooks
    callActivatedHooks(activatedQueue);
    callUpdatedHooks(updatedQueue);

    // devtool hook
    /* istanbul ignore if */
    if (devtools && config.devtools) {
      devtools.emit('flush');
    }
  }

  function callUpdatedHooks (queue) {
    var i = queue.length;
    while (i--) {
      var watcher = queue[i];
      var vm = watcher.vm;
      if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'updated');
      }
    }
  }

  /**
   * Queue a kept-alive component that was activated during patch.
   * The queue will be processed after the entire tree has been patched.
   */
  function queueActivatedComponent (vm) {
    // setting _inactive to false here so that a render function can
    // rely on checking whether it's in an inactive tree (e.g. router-view)
    vm._inactive = false;
    activatedChildren.push(vm);
  }

  function callActivatedHooks (queue) {
    for (var i = 0; i < queue.length; i++) {
      queue[i]._inactive = true;
      activateChildComponent(queue[i], true /* true */);
    }
  }

  /**
   * Push a watcher into the watcher queue.
   * Jobs with duplicate IDs will be skipped unless it's
   * pushed when the queue is being flushed.
   */
  function queueWatcher (watcher) {
    var id = watcher.id;
    if (has[id] == null) {
      has[id] = true;
      if (!flushing) {
        queue$1.push(watcher);
      } else {
        // if already flushing, splice the watcher based on its id
        // if already past its id, it will be run next immediately.
        var i = queue$1.length - 1;
        while (i > index$1 && queue$1[i].id > watcher.id) {
          i--;
        }
        queue$1.splice(i + 1, 0, watcher);
      }
      // queue the flush
      if (!waiting) {
        waiting = true;

        if (process.env.NODE_ENV !== 'production' && !config.async) {
          flushSchedulerQueue();
          return
        }
        nextTick(flushSchedulerQueue);
      }
    }
  }

  /*  */



  var uid$2 = 0;

  /**
   * A watcher parses an expression, collects dependencies,
   * and fires callback when the expression value changes.
   * This is used for both the $watch() api and directives.
   */
  var Watcher = function Watcher (
    vm,
    expOrFn,
    cb,
    options,
    isRenderWatcher
  ) {
    this.vm = vm;
    if (isRenderWatcher) {
      vm._watcher = this;
    }
    vm._watchers.push(this);
    // options
    if (options) {
      this.deep = !!options.deep;
      this.user = !!options.user;
      this.lazy = !!options.lazy;
      this.sync = !!options.sync;
      this.before = options.before;
    } else {
      this.deep = this.user = this.lazy = this.sync = false;
    }
    this.cb = cb;
    this.id = ++uid$2; // uid for batching
    this.active = true;
    this.dirty = this.lazy; // for lazy watchers
    this.deps = [];
    this.newDeps = [];
    this.depIds = new _Set();
    this.newDepIds = new _Set();
    this.expression = process.env.NODE_ENV !== 'production'
      ? expOrFn.toString()
      : '';
    // parse expression for getter
    if (typeof expOrFn === 'function') {
      this.getter = expOrFn;
    } else {
      this.getter = parsePath(expOrFn);
      if (!this.getter) {
        this.getter = noop$1;
        process.env.NODE_ENV !== 'production' && warn$1(
          "Failed watching path: \"" + expOrFn + "\" " +
          'Watcher only accepts simple dot-delimited paths. ' +
          'For full control, use a function instead.',
          vm
        );
      }
    }
    this.value = this.lazy
      ? undefined
      : this.get();
  };

  /**
   * Evaluate the getter, and re-collect dependencies.
   */
  Watcher.prototype.get = function get () {
    pushTarget(this);
    var value;
    var vm = this.vm;
    try {
      value = this.getter.call(vm, vm);
    } catch (e) {
      if (this.user) {
        handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
      } else {
        throw e
      }
    } finally {
      // "touch" every property so they are all tracked as
      // dependencies for deep watching
      if (this.deep) {
        traverse(value);
      }
      popTarget();
      this.cleanupDeps();
    }
    return value
  };

  /**
   * Add a dependency to this directive.
   */
  Watcher.prototype.addDep = function addDep (dep) {
    var id = dep.id;
    if (!this.newDepIds.has(id)) {
      this.newDepIds.add(id);
      this.newDeps.push(dep);
      if (!this.depIds.has(id)) {
        dep.addSub(this);
      }
    }
  };

  /**
   * Clean up for dependency collection.
   */
  Watcher.prototype.cleanupDeps = function cleanupDeps () {
    var i = this.deps.length;
    while (i--) {
      var dep = this.deps[i];
      if (!this.newDepIds.has(dep.id)) {
        dep.removeSub(this);
      }
    }
    var tmp = this.depIds;
    this.depIds = this.newDepIds;
    this.newDepIds = tmp;
    this.newDepIds.clear();
    tmp = this.deps;
    this.deps = this.newDeps;
    this.newDeps = tmp;
    this.newDeps.length = 0;
  };

  /**
   * Subscriber interface.
   * Will be called when a dependency changes.
   */
  Watcher.prototype.update = function update () {
    /* istanbul ignore else */
    if (this.lazy) {
      this.dirty = true;
    } else if (this.sync) {
      this.run();
    } else {
      queueWatcher(this);
    }
  };

  /**
   * Scheduler job interface.
   * Will be called by the scheduler.
   */
  Watcher.prototype.run = function run () {
    if (this.active) {
      var value = this.get();
      if (
        value !== this.value ||
        // Deep watchers and watchers on Object/Arrays should fire even
        // when the value is the same, because the value may
        // have mutated.
        isObject(value) ||
        this.deep
      ) {
        // set new value
        var oldValue = this.value;
        this.value = value;
        if (this.user) {
          try {
            this.cb.call(this.vm, value, oldValue);
          } catch (e) {
            handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
          }
        } else {
          this.cb.call(this.vm, value, oldValue);
        }
      }
    }
  };

  /**
   * Evaluate the value of the watcher.
   * This only gets called for lazy watchers.
   */
  Watcher.prototype.evaluate = function evaluate () {
    this.value = this.get();
    this.dirty = false;
  };

  /**
   * Depend on all deps collected by this watcher.
   */
  Watcher.prototype.depend = function depend () {
    var i = this.deps.length;
    while (i--) {
      this.deps[i].depend();
    }
  };

  /**
   * Remove self from all dependencies' subscriber list.
   */
  Watcher.prototype.teardown = function teardown () {
    if (this.active) {
      // remove self from vm's watcher list
      // this is a somewhat expensive operation so we skip it
      // if the vm is being destroyed.
      if (!this.vm._isBeingDestroyed) {
        remove(this.vm._watchers, this);
      }
      var i = this.deps.length;
      while (i--) {
        this.deps[i].removeSub(this);
      }
      this.active = false;
    }
  };

  /*  */

  var sharedPropertyDefinition = {
    enumerable: true,
    configurable: true,
    get: noop$1,
    set: noop$1
  };

  function proxy (target, sourceKey, key) {
    sharedPropertyDefinition.get = function proxyGetter () {
      return this[sourceKey][key]
    };
    sharedPropertyDefinition.set = function proxySetter (val) {
      this[sourceKey][key] = val;
    };
    Object.defineProperty(target, key, sharedPropertyDefinition);
  }

  function initState (vm) {
    vm._watchers = [];
    var opts = vm.$options;
    if (opts.props) { initProps(vm, opts.props); }
    if (opts.methods) { initMethods(vm, opts.methods); }
    if (opts.data) {
      initData(vm);
    } else {
      observe(vm._data = {}, true /* asRootData */);
    }
    if (opts.computed) { initComputed(vm, opts.computed); }
    if (opts.watch && opts.watch !== nativeWatch) {
      initWatch(vm, opts.watch);
    }
  }

  function initProps (vm, propsOptions) {
    var propsData = vm.$options.propsData || {};
    var props = vm._props = {};
    // cache prop keys so that future props updates can iterate using Array
    // instead of dynamic object key enumeration.
    var keys = vm.$options._propKeys = [];
    var isRoot = !vm.$parent;
    // root instance props should be converted
    if (!isRoot) {
      toggleObserving(false);
    }
    var loop = function ( key ) {
      keys.push(key);
      var value = validateProp(key, propsOptions, propsData, vm);
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        var hyphenatedKey = hyphenate(key);
        if (isReservedAttribute(hyphenatedKey) ||
            config.isReservedAttr(hyphenatedKey)) {
          warn$1(
            ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
            vm
          );
        }
        defineReactive$$1(props, key, value, function () {
          if (!isRoot && !isUpdatingChildComponent) {
            warn$1(
              "Avoid mutating a prop directly since the value will be " +
              "overwritten whenever the parent component re-renders. " +
              "Instead, use a data or computed property based on the prop's " +
              "value. Prop being mutated: \"" + key + "\"",
              vm
            );
          }
        });
      } else {
        defineReactive$$1(props, key, value);
      }
      // static props are already proxied on the component's prototype
      // during Vue.extend(). We only need to proxy props defined at
      // instantiation here.
      if (!(key in vm)) {
        proxy(vm, "_props", key);
      }
    };

    for (var key in propsOptions) loop( key );
    toggleObserving(true);
  }

  function initData (vm) {
    var data = vm.$options.data;
    data = vm._data = typeof data === 'function'
      ? getData(data, vm)
      : data || {};
    if (!isPlainObject$1(data)) {
      data = {};
      process.env.NODE_ENV !== 'production' && warn$1(
        'data functions should return an object:\n' +
        'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
        vm
      );
    }
    // proxy data on instance
    var keys = Object.keys(data);
    var props = vm.$options.props;
    var methods = vm.$options.methods;
    var i = keys.length;
    while (i--) {
      var key = keys[i];
      if (process.env.NODE_ENV !== 'production') {
        if (methods && hasOwn$1(methods, key)) {
          warn$1(
            ("Method \"" + key + "\" has already been defined as a data property."),
            vm
          );
        }
      }
      if (props && hasOwn$1(props, key)) {
        process.env.NODE_ENV !== 'production' && warn$1(
          "The data property \"" + key + "\" is already declared as a prop. " +
          "Use prop default value instead.",
          vm
        );
      } else if (!isReserved(key)) {
        proxy(vm, "_data", key);
      }
    }
    // observe data
    observe(data, true /* asRootData */);
  }

  function getData (data, vm) {
    // #7573 disable dep collection when invoking data getters
    pushTarget();
    try {
      return data.call(vm, vm)
    } catch (e) {
      handleError(e, vm, "data()");
      return {}
    } finally {
      popTarget();
    }
  }

  var computedWatcherOptions = { lazy: true };

  function initComputed (vm, computed) {
    // $flow-disable-line
    var watchers = vm._computedWatchers = Object.create(null);
    // computed properties are just getters during SSR
    var isSSR = isServerRendering();

    for (var key in computed) {
      var userDef = computed[key];
      var getter = typeof userDef === 'function' ? userDef : userDef.get;
      if (process.env.NODE_ENV !== 'production' && getter == null) {
        warn$1(
          ("Getter is missing for computed property \"" + key + "\"."),
          vm
        );
      }

      if (!isSSR) {
        // create internal watcher for the computed property.
        watchers[key] = new Watcher(
          vm,
          getter || noop$1,
          noop$1,
          computedWatcherOptions
        );
      }

      // component-defined computed properties are already defined on the
      // component prototype. We only need to define computed properties defined
      // at instantiation here.
      if (!(key in vm)) {
        defineComputed(vm, key, userDef);
      } else if (process.env.NODE_ENV !== 'production') {
        if (key in vm.$data) {
          warn$1(("The computed property \"" + key + "\" is already defined in data."), vm);
        } else if (vm.$options.props && key in vm.$options.props) {
          warn$1(("The computed property \"" + key + "\" is already defined as a prop."), vm);
        }
      }
    }
  }

  function defineComputed (
    target,
    key,
    userDef
  ) {
    var shouldCache = !isServerRendering();
    if (typeof userDef === 'function') {
      sharedPropertyDefinition.get = shouldCache
        ? createComputedGetter(key)
        : createGetterInvoker(userDef);
      sharedPropertyDefinition.set = noop$1;
    } else {
      sharedPropertyDefinition.get = userDef.get
        ? shouldCache && userDef.cache !== false
          ? createComputedGetter(key)
          : createGetterInvoker(userDef.get)
        : noop$1;
      sharedPropertyDefinition.set = userDef.set || noop$1;
    }
    if (process.env.NODE_ENV !== 'production' &&
        sharedPropertyDefinition.set === noop$1) {
      sharedPropertyDefinition.set = function () {
        warn$1(
          ("Computed property \"" + key + "\" was assigned to but it has no setter."),
          this
        );
      };
    }
    Object.defineProperty(target, key, sharedPropertyDefinition);
  }

  function createComputedGetter (key) {
    return function computedGetter () {
      var watcher = this._computedWatchers && this._computedWatchers[key];
      if (watcher) {
        if (watcher.dirty) {
          watcher.evaluate();
        }
        if (Dep.target) {
          watcher.depend();
        }
        return watcher.value
      }
    }
  }

  function createGetterInvoker(fn) {
    return function computedGetter () {
      return fn.call(this, this)
    }
  }

  function initMethods (vm, methods) {
    var props = vm.$options.props;
    for (var key in methods) {
      if (process.env.NODE_ENV !== 'production') {
        if (typeof methods[key] !== 'function') {
          warn$1(
            "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
            "Did you reference the function correctly?",
            vm
          );
        }
        if (props && hasOwn$1(props, key)) {
          warn$1(
            ("Method \"" + key + "\" has already been defined as a prop."),
            vm
          );
        }
        if ((key in vm) && isReserved(key)) {
          warn$1(
            "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
            "Avoid defining component methods that start with _ or $."
          );
        }
      }
      vm[key] = typeof methods[key] !== 'function' ? noop$1 : bind(methods[key], vm);
    }
  }

  function initWatch (vm, watch) {
    for (var key in watch) {
      var handler = watch[key];
      if (Array.isArray(handler)) {
        for (var i = 0; i < handler.length; i++) {
          createWatcher(vm, key, handler[i]);
        }
      } else {
        createWatcher(vm, key, handler);
      }
    }
  }

  function createWatcher (
    vm,
    expOrFn,
    handler,
    options
  ) {
    if (isPlainObject$1(handler)) {
      options = handler;
      handler = handler.handler;
    }
    if (typeof handler === 'string') {
      handler = vm[handler];
    }
    return vm.$watch(expOrFn, handler, options)
  }

  function stateMixin (Vue) {
    // flow somehow has problems with directly declared definition object
    // when using Object.defineProperty, so we have to procedurally build up
    // the object here.
    var dataDef = {};
    dataDef.get = function () { return this._data };
    var propsDef = {};
    propsDef.get = function () { return this._props };
    if (process.env.NODE_ENV !== 'production') {
      dataDef.set = function () {
        warn$1(
          'Avoid replacing instance root $data. ' +
          'Use nested data properties instead.',
          this
        );
      };
      propsDef.set = function () {
        warn$1("$props is readonly.", this);
      };
    }
    Object.defineProperty(Vue.prototype, '$data', dataDef);
    Object.defineProperty(Vue.prototype, '$props', propsDef);

    Vue.prototype.$set = set;
    Vue.prototype.$delete = del;

    Vue.prototype.$watch = function (
      expOrFn,
      cb,
      options
    ) {
      var vm = this;
      if (isPlainObject$1(cb)) {
        return createWatcher(vm, expOrFn, cb, options)
      }
      options = options || {};
      options.user = true;
      var watcher = new Watcher(vm, expOrFn, cb, options);
      if (options.immediate) {
        try {
          cb.call(vm, watcher.value);
        } catch (error) {
          handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
        }
      }
      return function unwatchFn () {
        watcher.teardown();
      }
    };
  }

  /*  */

  var uid$3 = 0;

  function initMixin (Vue) {
    Vue.prototype._init = function (options) {
      var vm = this;
      // a uid
      vm._uid = uid$3++;

      var startTag, endTag;
      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
        startTag = "vue-perf-start:" + (vm._uid);
        endTag = "vue-perf-end:" + (vm._uid);
        mark(startTag);
      }

      // a flag to avoid this being observed
      vm._isVue = true;
      // merge options
      if (options && options._isComponent) {
        // optimize internal component instantiation
        // since dynamic options merging is pretty slow, and none of the
        // internal component options needs special treatment.
        initInternalComponent(vm, options);
      } else {
        vm.$options = mergeOptions(
          resolveConstructorOptions(vm.constructor),
          options || {},
          vm
        );
      }
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        initProxy(vm);
      } else {
        vm._renderProxy = vm;
      }
      // expose real self
      vm._self = vm;
      initLifecycle(vm);
      initEvents(vm);
      initRender(vm);
      callHook(vm, 'beforeCreate');
      initInjections(vm); // resolve injections before data/props
      initState(vm);
      initProvide(vm); // resolve provide after data/props
      callHook(vm, 'created');

      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
        vm._name = formatComponentName(vm, false);
        mark(endTag);
        measure(("vue " + (vm._name) + " init"), startTag, endTag);
      }

      if (vm.$options.el) {
        vm.$mount(vm.$options.el);
      }
    };
  }

  function initInternalComponent (vm, options) {
    var opts = vm.$options = Object.create(vm.constructor.options);
    // doing this because it's faster than dynamic enumeration.
    var parentVnode = options._parentVnode;
    opts.parent = options.parent;
    opts._parentVnode = parentVnode;

    var vnodeComponentOptions = parentVnode.componentOptions;
    opts.propsData = vnodeComponentOptions.propsData;
    opts._parentListeners = vnodeComponentOptions.listeners;
    opts._renderChildren = vnodeComponentOptions.children;
    opts._componentTag = vnodeComponentOptions.tag;

    if (options.render) {
      opts.render = options.render;
      opts.staticRenderFns = options.staticRenderFns;
    }
  }

  function resolveConstructorOptions (Ctor) {
    var options = Ctor.options;
    if (Ctor.super) {
      var superOptions = resolveConstructorOptions(Ctor.super);
      var cachedSuperOptions = Ctor.superOptions;
      if (superOptions !== cachedSuperOptions) {
        // super option changed,
        // need to resolve new options.
        Ctor.superOptions = superOptions;
        // check if there are any late-modified/attached options (#4976)
        var modifiedOptions = resolveModifiedOptions(Ctor);
        // update base extend options
        if (modifiedOptions) {
          extend(Ctor.extendOptions, modifiedOptions);
        }
        options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
        if (options.name) {
          options.components[options.name] = Ctor;
        }
      }
    }
    return options
  }

  function resolveModifiedOptions (Ctor) {
    var modified;
    var latest = Ctor.options;
    var sealed = Ctor.sealedOptions;
    for (var key in latest) {
      if (latest[key] !== sealed[key]) {
        if (!modified) { modified = {}; }
        modified[key] = latest[key];
      }
    }
    return modified
  }

  function Vue (options) {
    if (process.env.NODE_ENV !== 'production' &&
      !(this instanceof Vue)
    ) {
      warn$1('Vue is a constructor and should be called with the `new` keyword');
    }
    this._init(options);
  }

  initMixin(Vue);
  stateMixin(Vue);
  eventsMixin(Vue);
  lifecycleMixin(Vue);
  renderMixin(Vue);

  /*  */

  function initUse (Vue) {
    Vue.use = function (plugin) {
      var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
      if (installedPlugins.indexOf(plugin) > -1) {
        return this
      }

      // additional parameters
      var args = toArray(arguments, 1);
      args.unshift(this);
      if (typeof plugin.install === 'function') {
        plugin.install.apply(plugin, args);
      } else if (typeof plugin === 'function') {
        plugin.apply(null, args);
      }
      installedPlugins.push(plugin);
      return this
    };
  }

  /*  */

  function initMixin$1 (Vue) {
    Vue.mixin = function (mixin) {
      this.options = mergeOptions(this.options, mixin);
      return this
    };
  }

  /*  */

  function initExtend (Vue) {
    /**
     * Each instance constructor, including Vue, has a unique
     * cid. This enables us to create wrapped "child
     * constructors" for prototypal inheritance and cache them.
     */
    Vue.cid = 0;
    var cid = 1;

    /**
     * Class inheritance
     */
    Vue.extend = function (extendOptions) {
      extendOptions = extendOptions || {};
      var Super = this;
      var SuperId = Super.cid;
      var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
      if (cachedCtors[SuperId]) {
        return cachedCtors[SuperId]
      }

      var name = extendOptions.name || Super.options.name;
      if (process.env.NODE_ENV !== 'production' && name) {
        validateComponentName(name);
      }

      var Sub = function VueComponent (options) {
        this._init(options);
      };
      Sub.prototype = Object.create(Super.prototype);
      Sub.prototype.constructor = Sub;
      Sub.cid = cid++;
      Sub.options = mergeOptions(
        Super.options,
        extendOptions
      );
      Sub['super'] = Super;

      // For props and computed properties, we define the proxy getters on
      // the Vue instances at extension time, on the extended prototype. This
      // avoids Object.defineProperty calls for each instance created.
      if (Sub.options.props) {
        initProps$1(Sub);
      }
      if (Sub.options.computed) {
        initComputed$1(Sub);
      }

      // allow further extension/mixin/plugin usage
      Sub.extend = Super.extend;
      Sub.mixin = Super.mixin;
      Sub.use = Super.use;

      // create asset registers, so extended classes
      // can have their private assets too.
      ASSET_TYPES.forEach(function (type) {
        Sub[type] = Super[type];
      });
      // enable recursive self-lookup
      if (name) {
        Sub.options.components[name] = Sub;
      }

      // keep a reference to the super options at extension time.
      // later at instantiation we can check if Super's options have
      // been updated.
      Sub.superOptions = Super.options;
      Sub.extendOptions = extendOptions;
      Sub.sealedOptions = extend({}, Sub.options);

      // cache constructor
      cachedCtors[SuperId] = Sub;
      return Sub
    };
  }

  function initProps$1 (Comp) {
    var props = Comp.options.props;
    for (var key in props) {
      proxy(Comp.prototype, "_props", key);
    }
  }

  function initComputed$1 (Comp) {
    var computed = Comp.options.computed;
    for (var key in computed) {
      defineComputed(Comp.prototype, key, computed[key]);
    }
  }

  /*  */

  function initAssetRegisters (Vue) {
    /**
     * Create asset registration methods.
     */
    ASSET_TYPES.forEach(function (type) {
      Vue[type] = function (
        id,
        definition
      ) {
        if (!definition) {
          return this.options[type + 's'][id]
        } else {
          /* istanbul ignore if */
          if (process.env.NODE_ENV !== 'production' && type === 'component') {
            validateComponentName(id);
          }
          if (type === 'component' && isPlainObject$1(definition)) {
            definition.name = definition.name || id;
            definition = this.options._base.extend(definition);
          }
          if (type === 'directive' && typeof definition === 'function') {
            definition = { bind: definition, update: definition };
          }
          this.options[type + 's'][id] = definition;
          return definition
        }
      };
    });
  }

  /*  */



  function getComponentName$1 (opts) {
    return opts && (opts.Ctor.options.name || opts.tag)
  }

  function matches (pattern, name) {
    if (Array.isArray(pattern)) {
      return pattern.indexOf(name) > -1
    } else if (typeof pattern === 'string') {
      return pattern.split(',').indexOf(name) > -1
    } else if (isRegExp(pattern)) {
      return pattern.test(name)
    }
    /* istanbul ignore next */
    return false
  }

  function pruneCache (keepAliveInstance, filter) {
    var cache = keepAliveInstance.cache;
    var keys = keepAliveInstance.keys;
    var _vnode = keepAliveInstance._vnode;
    for (var key in cache) {
      var cachedNode = cache[key];
      if (cachedNode) {
        var name = getComponentName$1(cachedNode.componentOptions);
        if (name && !filter(name)) {
          pruneCacheEntry(cache, key, keys, _vnode);
        }
      }
    }
  }

  function pruneCacheEntry (
    cache,
    key,
    keys,
    current
  ) {
    var cached$$1 = cache[key];
    if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
      cached$$1.componentInstance.$destroy();
    }
    cache[key] = null;
    remove(keys, key);
  }

  var patternTypes = [String, RegExp, Array];

  var KeepAlive = {
    name: 'keep-alive',
    abstract: true,

    props: {
      include: patternTypes,
      exclude: patternTypes,
      max: [String, Number]
    },

    created: function created () {
      this.cache = Object.create(null);
      this.keys = [];
    },

    destroyed: function destroyed () {
      for (var key in this.cache) {
        pruneCacheEntry(this.cache, key, this.keys);
      }
    },

    mounted: function mounted () {
      var this$1 = this;

      this.$watch('include', function (val) {
        pruneCache(this$1, function (name) { return matches(val, name); });
      });
      this.$watch('exclude', function (val) {
        pruneCache(this$1, function (name) { return !matches(val, name); });
      });
    },

    render: function render () {
      var slot = this.$slots.default;
      var vnode = getFirstComponentChild(slot);
      var componentOptions = vnode && vnode.componentOptions;
      if (componentOptions) {
        // check pattern
        var name = getComponentName$1(componentOptions);
        var ref = this;
        var include = ref.include;
        var exclude = ref.exclude;
        if (
          // not included
          (include && (!name || !matches(include, name))) ||
          // excluded
          (exclude && name && matches(exclude, name))
        ) {
          return vnode
        }

        var ref$1 = this;
        var cache = ref$1.cache;
        var keys = ref$1.keys;
        var key = vnode.key == null
          // same constructor may get registered as different local components
          // so cid alone is not enough (#3269)
          ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
          : vnode.key;
        if (cache[key]) {
          vnode.componentInstance = cache[key].componentInstance;
          // make current key freshest
          remove(keys, key);
          keys.push(key);
        } else {
          cache[key] = vnode;
          keys.push(key);
          // prune oldest entry
          if (this.max && keys.length > parseInt(this.max)) {
            pruneCacheEntry(cache, keys[0], keys, this._vnode);
          }
        }

        vnode.data.keepAlive = true;
      }
      return vnode || (slot && slot[0])
    }
  };

  var builtInComponents = {
    KeepAlive: KeepAlive
  };

  /*  */

  function initGlobalAPI (Vue) {
    // config
    var configDef = {};
    configDef.get = function () { return config; };
    if (process.env.NODE_ENV !== 'production') {
      configDef.set = function () {
        warn$1(
          'Do not replace the Vue.config object, set individual fields instead.'
        );
      };
    }
    Object.defineProperty(Vue, 'config', configDef);

    // exposed util methods.
    // NOTE: these are not considered part of the public API - avoid relying on
    // them unless you are aware of the risk.
    Vue.util = {
      warn: warn$1,
      extend: extend,
      mergeOptions: mergeOptions,
      defineReactive: defineReactive$$1
    };

    Vue.set = set;
    Vue.delete = del;
    Vue.nextTick = nextTick;

    // 2.6 explicit observable API
    Vue.observable = function (obj) {
      observe(obj);
      return obj
    };

    Vue.options = Object.create(null);
    ASSET_TYPES.forEach(function (type) {
      Vue.options[type + 's'] = Object.create(null);
    });

    // this is used to identify the "base" constructor to extend all plain-object
    // components with in Weex's multi-instance scenarios.
    Vue.options._base = Vue;

    extend(Vue.options.components, builtInComponents);

    initUse(Vue);
    initMixin$1(Vue);
    initExtend(Vue);
    initAssetRegisters(Vue);
  }

  initGlobalAPI(Vue);

  Object.defineProperty(Vue.prototype, '$isServer', {
    get: isServerRendering
  });

  Object.defineProperty(Vue.prototype, '$ssrContext', {
    get: function get () {
      /* istanbul ignore next */
      return this.$vnode && this.$vnode.ssrContext
    }
  });

  // expose FunctionalRenderContext for ssr runtime helper installation
  Object.defineProperty(Vue, 'FunctionalRenderContext', {
    value: FunctionalRenderContext
  });

  Vue.version = '2.6.12';

  /*  */

  // these are reserved for web because they are directly compiled away
  // during template compilation
  var isReservedAttr = makeMap('style,class');

  // attributes that should be using props for binding
  var acceptValue = makeMap('input,textarea,option,select,progress');
  var mustUseProp = function (tag, type, attr) {
    return (
      (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
      (attr === 'selected' && tag === 'option') ||
      (attr === 'checked' && tag === 'input') ||
      (attr === 'muted' && tag === 'video')
    )
  };

  var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

  var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

  var convertEnumeratedValue = function (key, value) {
    return isFalsyAttrValue(value) || value === 'false'
      ? 'false'
      // allow arbitrary string value for contenteditable
      : key === 'contenteditable' && isValidContentEditableValue(value)
        ? value
        : 'true'
  };

  var isBooleanAttr = makeMap(
    'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
    'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
    'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
    'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
    'required,reversed,scoped,seamless,selected,sortable,translate,' +
    'truespeed,typemustmatch,visible'
  );

  var xlinkNS = 'http://www.w3.org/1999/xlink';

  var isXlink = function (name) {
    return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
  };

  var getXlinkProp = function (name) {
    return isXlink(name) ? name.slice(6, name.length) : ''
  };

  var isFalsyAttrValue = function (val) {
    return val == null || val === false
  };

  /*  */

  function genClassForVnode (vnode) {
    var data = vnode.data;
    var parentNode = vnode;
    var childNode = vnode;
    while (isDef(childNode.componentInstance)) {
      childNode = childNode.componentInstance._vnode;
      if (childNode && childNode.data) {
        data = mergeClassData(childNode.data, data);
      }
    }
    while (isDef(parentNode = parentNode.parent)) {
      if (parentNode && parentNode.data) {
        data = mergeClassData(data, parentNode.data);
      }
    }
    return renderClass(data.staticClass, data.class)
  }

  function mergeClassData (child, parent) {
    return {
      staticClass: concat(child.staticClass, parent.staticClass),
      class: isDef(child.class)
        ? [child.class, parent.class]
        : parent.class
    }
  }

  function renderClass (
    staticClass,
    dynamicClass
  ) {
    if (isDef(staticClass) || isDef(dynamicClass)) {
      return concat(staticClass, stringifyClass(dynamicClass))
    }
    /* istanbul ignore next */
    return ''
  }

  function concat (a, b) {
    return a ? b ? (a + ' ' + b) : a : (b || '')
  }

  function stringifyClass (value) {
    if (Array.isArray(value)) {
      return stringifyArray(value)
    }
    if (isObject(value)) {
      return stringifyObject(value)
    }
    if (typeof value === 'string') {
      return value
    }
    /* istanbul ignore next */
    return ''
  }

  function stringifyArray (value) {
    var res = '';
    var stringified;
    for (var i = 0, l = value.length; i < l; i++) {
      if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
        if (res) { res += ' '; }
        res += stringified;
      }
    }
    return res
  }

  function stringifyObject (value) {
    var res = '';
    for (var key in value) {
      if (value[key]) {
        if (res) { res += ' '; }
        res += key;
      }
    }
    return res
  }

  /*  */

  var namespaceMap = {
    svg: 'http://www.w3.org/2000/svg',
    math: 'http://www.w3.org/1998/Math/MathML'
  };

  var isHTMLTag = makeMap(
    'html,body,base,head,link,meta,style,title,' +
    'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
    'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
    'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
    's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
    'embed,object,param,source,canvas,script,noscript,del,ins,' +
    'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
    'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
    'output,progress,select,textarea,' +
    'details,dialog,menu,menuitem,summary,' +
    'content,element,shadow,template,blockquote,iframe,tfoot'
  );

  // this map is intentionally selective, only covering SVG elements that may
  // contain child elements.
  var isSVG = makeMap(
    'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
    'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
    'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
    true
  );

  var isReservedTag = function (tag) {
    return isHTMLTag(tag) || isSVG(tag)
  };

  function getTagNamespace (tag) {
    if (isSVG(tag)) {
      return 'svg'
    }
    // basic support for MathML
    // note it doesn't support other MathML elements being component roots
    if (tag === 'math') {
      return 'math'
    }
  }

  var unknownElementCache = Object.create(null);
  function isUnknownElement (tag) {
    /* istanbul ignore if */
    if (!inBrowser) {
      return true
    }
    if (isReservedTag(tag)) {
      return false
    }
    tag = tag.toLowerCase();
    /* istanbul ignore if */
    if (unknownElementCache[tag] != null) {
      return unknownElementCache[tag]
    }
    var el = document.createElement(tag);
    if (tag.indexOf('-') > -1) {
      // http://stackoverflow.com/a/28210364/1070244
      return (unknownElementCache[tag] = (
        el.constructor === window.HTMLUnknownElement ||
        el.constructor === window.HTMLElement
      ))
    } else {
      return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
    }
  }

  var isTextInputType = makeMap('text,number,password,search,email,tel,url');

  /*  */

  /**
   * Query an element selector if it's not an element already.
   */
  function query (el) {
    if (typeof el === 'string') {
      var selected = document.querySelector(el);
      if (!selected) {
        process.env.NODE_ENV !== 'production' && warn$1(
          'Cannot find element: ' + el
        );
        return document.createElement('div')
      }
      return selected
    } else {
      return el
    }
  }

  /*  */

  function createElement$1 (tagName, vnode) {
    var elm = document.createElement(tagName);
    if (tagName !== 'select') {
      return elm
    }
    // false or null will remove the attribute but undefined will not
    if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
      elm.setAttribute('multiple', 'multiple');
    }
    return elm
  }

  function createElementNS (namespace, tagName) {
    return document.createElementNS(namespaceMap[namespace], tagName)
  }

  function createTextNode (text) {
    return document.createTextNode(text)
  }

  function createComment (text) {
    return document.createComment(text)
  }

  function insertBefore (parentNode, newNode, referenceNode) {
    parentNode.insertBefore(newNode, referenceNode);
  }

  function removeChild (node, child) {
    node.removeChild(child);
  }

  function appendChild (node, child) {
    node.appendChild(child);
  }

  function parentNode (node) {
    return node.parentNode
  }

  function nextSibling (node) {
    return node.nextSibling
  }

  function tagName (node) {
    return node.tagName
  }

  function setTextContent (node, text) {
    node.textContent = text;
  }

  function setStyleScope (node, scopeId) {
    node.setAttribute(scopeId, '');
  }

  var nodeOps = /*#__PURE__*/Object.freeze({
    createElement: createElement$1,
    createElementNS: createElementNS,
    createTextNode: createTextNode,
    createComment: createComment,
    insertBefore: insertBefore,
    removeChild: removeChild,
    appendChild: appendChild,
    parentNode: parentNode,
    nextSibling: nextSibling,
    tagName: tagName,
    setTextContent: setTextContent,
    setStyleScope: setStyleScope
  });

  /*  */

  var ref = {
    create: function create (_, vnode) {
      registerRef(vnode);
    },
    update: function update (oldVnode, vnode) {
      if (oldVnode.data.ref !== vnode.data.ref) {
        registerRef(oldVnode, true);
        registerRef(vnode);
      }
    },
    destroy: function destroy (vnode) {
      registerRef(vnode, true);
    }
  };

  function registerRef (vnode, isRemoval) {
    var key = vnode.data.ref;
    if (!isDef(key)) { return }

    var vm = vnode.context;
    var ref = vnode.componentInstance || vnode.elm;
    var refs = vm.$refs;
    if (isRemoval) {
      if (Array.isArray(refs[key])) {
        remove(refs[key], ref);
      } else if (refs[key] === ref) {
        refs[key] = undefined;
      }
    } else {
      if (vnode.data.refInFor) {
        if (!Array.isArray(refs[key])) {
          refs[key] = [ref];
        } else if (refs[key].indexOf(ref) < 0) {
          // $flow-disable-line
          refs[key].push(ref);
        }
      } else {
        refs[key] = ref;
      }
    }
  }

  /**
   * Virtual DOM patching algorithm based on Snabbdom by
   * Simon Friis Vindum (@paldepind)
   * Licensed under the MIT License
   * https://github.com/paldepind/snabbdom/blob/master/LICENSE
   *
   * modified by Evan You (@yyx990803)
   *
   * Not type-checking this because this file is perf-critical and the cost
   * of making flow understand it is not worth it.
   */

  var emptyNode = new VNode('', {}, []);

  var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

  function sameVnode (a, b) {
    return (
      a.key === b.key && (
        (
          a.tag === b.tag &&
          a.isComment === b.isComment &&
          isDef(a.data) === isDef(b.data) &&
          sameInputType(a, b)
        ) || (
          isTrue(a.isAsyncPlaceholder) &&
          a.asyncFactory === b.asyncFactory &&
          isUndef(b.asyncFactory.error)
        )
      )
    )
  }

  function sameInputType (a, b) {
    if (a.tag !== 'input') { return true }
    var i;
    var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
    var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
    return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
  }

  function createKeyToOldIdx (children, beginIdx, endIdx) {
    var i, key;
    var map = {};
    for (i = beginIdx; i <= endIdx; ++i) {
      key = children[i].key;
      if (isDef(key)) { map[key] = i; }
    }
    return map
  }

  function createPatchFunction (backend) {
    var i, j;
    var cbs = {};

    var modules = backend.modules;
    var nodeOps = backend.nodeOps;

    for (i = 0; i < hooks.length; ++i) {
      cbs[hooks[i]] = [];
      for (j = 0; j < modules.length; ++j) {
        if (isDef(modules[j][hooks[i]])) {
          cbs[hooks[i]].push(modules[j][hooks[i]]);
        }
      }
    }

    function emptyNodeAt (elm) {
      return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
    }

    function createRmCb (childElm, listeners) {
      function remove$$1 () {
        if (--remove$$1.listeners === 0) {
          removeNode(childElm);
        }
      }
      remove$$1.listeners = listeners;
      return remove$$1
    }

    function removeNode (el) {
      var parent = nodeOps.parentNode(el);
      // element may have already been removed due to v-html / v-text
      if (isDef(parent)) {
        nodeOps.removeChild(parent, el);
      }
    }

    function isUnknownElement$$1 (vnode, inVPre) {
      return (
        !inVPre &&
        !vnode.ns &&
        !(
          config.ignoredElements.length &&
          config.ignoredElements.some(function (ignore) {
            return isRegExp(ignore)
              ? ignore.test(vnode.tag)
              : ignore === vnode.tag
          })
        ) &&
        config.isUnknownElement(vnode.tag)
      )
    }

    var creatingElmInVPre = 0;

    function createElm (
      vnode,
      insertedVnodeQueue,
      parentElm,
      refElm,
      nested,
      ownerArray,
      index
    ) {
      if (isDef(vnode.elm) && isDef(ownerArray)) {
        // This vnode was used in a previous render!
        // now it's used as a new node, overwriting its elm would cause
        // potential patch errors down the road when it's used as an insertion
        // reference node. Instead, we clone the node on-demand before creating
        // associated DOM element for it.
        vnode = ownerArray[index] = cloneVNode(vnode);
      }

      vnode.isRootInsert = !nested; // for transition enter check
      if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
        return
      }

      var data = vnode.data;
      var children = vnode.children;
      var tag = vnode.tag;
      if (isDef(tag)) {
        if (process.env.NODE_ENV !== 'production') {
          if (data && data.pre) {
            creatingElmInVPre++;
          }
          if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
            warn$1(
              'Unknown custom element: <' + tag + '> - did you ' +
              'register the component correctly? For recursive components, ' +
              'make sure to provide the "name" option.',
              vnode.context
            );
          }
        }

        vnode.elm = vnode.ns
          ? nodeOps.createElementNS(vnode.ns, tag)
          : nodeOps.createElement(tag, vnode);
        setScope(vnode);

        /* istanbul ignore if */
        {
          createChildren(vnode, children, insertedVnodeQueue);
          if (isDef(data)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
          }
          insert(parentElm, vnode.elm, refElm);
        }

        if (process.env.NODE_ENV !== 'production' && data && data.pre) {
          creatingElmInVPre--;
        }
      } else if (isTrue(vnode.isComment)) {
        vnode.elm = nodeOps.createComment(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      } else {
        vnode.elm = nodeOps.createTextNode(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      }
    }

    function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
      var i = vnode.data;
      if (isDef(i)) {
        var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
        if (isDef(i = i.hook) && isDef(i = i.init)) {
          i(vnode, false /* hydrating */);
        }
        // after calling the init hook, if the vnode is a child component
        // it should've created a child instance and mounted it. the child
        // component also has set the placeholder vnode's elm.
        // in that case we can just return the element and be done.
        if (isDef(vnode.componentInstance)) {
          initComponent(vnode, insertedVnodeQueue);
          insert(parentElm, vnode.elm, refElm);
          if (isTrue(isReactivated)) {
            reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
          }
          return true
        }
      }
    }

    function initComponent (vnode, insertedVnodeQueue) {
      if (isDef(vnode.data.pendingInsert)) {
        insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
        vnode.data.pendingInsert = null;
      }
      vnode.elm = vnode.componentInstance.$el;
      if (isPatchable(vnode)) {
        invokeCreateHooks(vnode, insertedVnodeQueue);
        setScope(vnode);
      } else {
        // empty component root.
        // skip all element-related modules except for ref (#3455)
        registerRef(vnode);
        // make sure to invoke the insert hook
        insertedVnodeQueue.push(vnode);
      }
    }

    function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
      var i;
      // hack for #4339: a reactivated component with inner transition
      // does not trigger because the inner node's created hooks are not called
      // again. It's not ideal to involve module-specific logic in here but
      // there doesn't seem to be a better way to do it.
      var innerNode = vnode;
      while (innerNode.componentInstance) {
        innerNode = innerNode.componentInstance._vnode;
        if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
          for (i = 0; i < cbs.activate.length; ++i) {
            cbs.activate[i](emptyNode, innerNode);
          }
          insertedVnodeQueue.push(innerNode);
          break
        }
      }
      // unlike a newly created component,
      // a reactivated keep-alive component doesn't insert itself
      insert(parentElm, vnode.elm, refElm);
    }

    function insert (parent, elm, ref$$1) {
      if (isDef(parent)) {
        if (isDef(ref$$1)) {
          if (nodeOps.parentNode(ref$$1) === parent) {
            nodeOps.insertBefore(parent, elm, ref$$1);
          }
        } else {
          nodeOps.appendChild(parent, elm);
        }
      }
    }

    function createChildren (vnode, children, insertedVnodeQueue) {
      if (Array.isArray(children)) {
        if (process.env.NODE_ENV !== 'production') {
          checkDuplicateKeys(children);
        }
        for (var i = 0; i < children.length; ++i) {
          createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
        }
      } else if (isPrimitive(vnode.text)) {
        nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
      }
    }

    function isPatchable (vnode) {
      while (vnode.componentInstance) {
        vnode = vnode.componentInstance._vnode;
      }
      return isDef(vnode.tag)
    }

    function invokeCreateHooks (vnode, insertedVnodeQueue) {
      for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
        cbs.create[i$1](emptyNode, vnode);
      }
      i = vnode.data.hook; // Reuse variable
      if (isDef(i)) {
        if (isDef(i.create)) { i.create(emptyNode, vnode); }
        if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
      }
    }

    // set scope id attribute for scoped CSS.
    // this is implemented as a special case to avoid the overhead
    // of going through the normal attribute patching process.
    function setScope (vnode) {
      var i;
      if (isDef(i = vnode.fnScopeId)) {
        nodeOps.setStyleScope(vnode.elm, i);
      } else {
        var ancestor = vnode;
        while (ancestor) {
          if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
            nodeOps.setStyleScope(vnode.elm, i);
          }
          ancestor = ancestor.parent;
        }
      }
      // for slot content they should also get the scopeId from the host instance.
      if (isDef(i = activeInstance) &&
        i !== vnode.context &&
        i !== vnode.fnContext &&
        isDef(i = i.$options._scopeId)
      ) {
        nodeOps.setStyleScope(vnode.elm, i);
      }
    }

    function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
      for (; startIdx <= endIdx; ++startIdx) {
        createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
      }
    }

    function invokeDestroyHook (vnode) {
      var i, j;
      var data = vnode.data;
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
        for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
      }
      if (isDef(i = vnode.children)) {
        for (j = 0; j < vnode.children.length; ++j) {
          invokeDestroyHook(vnode.children[j]);
        }
      }
    }

    function removeVnodes (vnodes, startIdx, endIdx) {
      for (; startIdx <= endIdx; ++startIdx) {
        var ch = vnodes[startIdx];
        if (isDef(ch)) {
          if (isDef(ch.tag)) {
            removeAndInvokeRemoveHook(ch);
            invokeDestroyHook(ch);
          } else { // Text node
            removeNode(ch.elm);
          }
        }
      }
    }

    function removeAndInvokeRemoveHook (vnode, rm) {
      if (isDef(rm) || isDef(vnode.data)) {
        var i;
        var listeners = cbs.remove.length + 1;
        if (isDef(rm)) {
          // we have a recursively passed down rm callback
          // increase the listeners count
          rm.listeners += listeners;
        } else {
          // directly removing
          rm = createRmCb(vnode.elm, listeners);
        }
        // recursively invoke hooks on child component root node
        if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
          removeAndInvokeRemoveHook(i, rm);
        }
        for (i = 0; i < cbs.remove.length; ++i) {
          cbs.remove[i](vnode, rm);
        }
        if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
          i(vnode, rm);
        } else {
          rm();
        }
      } else {
        removeNode(vnode.elm);
      }
    }

    function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
      var oldStartIdx = 0;
      var newStartIdx = 0;
      var oldEndIdx = oldCh.length - 1;
      var oldStartVnode = oldCh[0];
      var oldEndVnode = oldCh[oldEndIdx];
      var newEndIdx = newCh.length - 1;
      var newStartVnode = newCh[0];
      var newEndVnode = newCh[newEndIdx];
      var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

      // removeOnly is a special flag used only by <transition-group>
      // to ensure removed elements stay in correct relative positions
      // during leaving transitions
      var canMove = !removeOnly;

      if (process.env.NODE_ENV !== 'production') {
        checkDuplicateKeys(newCh);
      }

      while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
        if (isUndef(oldStartVnode)) {
          oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
        } else if (isUndef(oldEndVnode)) {
          oldEndVnode = oldCh[--oldEndIdx];
        } else if (sameVnode(oldStartVnode, newStartVnode)) {
          patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
          oldStartVnode = oldCh[++oldStartIdx];
          newStartVnode = newCh[++newStartIdx];
        } else if (sameVnode(oldEndVnode, newEndVnode)) {
          patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
          oldEndVnode = oldCh[--oldEndIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
          patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
          canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
          oldStartVnode = oldCh[++oldStartIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
          patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
          canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
          oldEndVnode = oldCh[--oldEndIdx];
          newStartVnode = newCh[++newStartIdx];
        } else {
          if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
          idxInOld = isDef(newStartVnode.key)
            ? oldKeyToIdx[newStartVnode.key]
            : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
          if (isUndef(idxInOld)) { // New element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          } else {
            vnodeToMove = oldCh[idxInOld];
            if (sameVnode(vnodeToMove, newStartVnode)) {
              patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
              oldCh[idxInOld] = undefined;
              canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
            } else {
              // same key but different element. treat as new element
              createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
            }
          }
          newStartVnode = newCh[++newStartIdx];
        }
      }
      if (oldStartIdx > oldEndIdx) {
        refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
      } else if (newStartIdx > newEndIdx) {
        removeVnodes(oldCh, oldStartIdx, oldEndIdx);
      }
    }

    function checkDuplicateKeys (children) {
      var seenKeys = {};
      for (var i = 0; i < children.length; i++) {
        var vnode = children[i];
        var key = vnode.key;
        if (isDef(key)) {
          if (seenKeys[key]) {
            warn$1(
              ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
              vnode.context
            );
          } else {
            seenKeys[key] = true;
          }
        }
      }
    }

    function findIdxInOld (node, oldCh, start, end) {
      for (var i = start; i < end; i++) {
        var c = oldCh[i];
        if (isDef(c) && sameVnode(node, c)) { return i }
      }
    }

    function patchVnode (
      oldVnode,
      vnode,
      insertedVnodeQueue,
      ownerArray,
      index,
      removeOnly
    ) {
      if (oldVnode === vnode) {
        return
      }

      if (isDef(vnode.elm) && isDef(ownerArray)) {
        // clone reused vnode
        vnode = ownerArray[index] = cloneVNode(vnode);
      }

      var elm = vnode.elm = oldVnode.elm;

      if (isTrue(oldVnode.isAsyncPlaceholder)) {
        if (isDef(vnode.asyncFactory.resolved)) {
          hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
        } else {
          vnode.isAsyncPlaceholder = true;
        }
        return
      }

      // reuse element for static trees.
      // note we only do this if the vnode is cloned -
      // if the new node is not cloned it means the render functions have been
      // reset by the hot-reload-api and we need to do a proper re-render.
      if (isTrue(vnode.isStatic) &&
        isTrue(oldVnode.isStatic) &&
        vnode.key === oldVnode.key &&
        (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
      ) {
        vnode.componentInstance = oldVnode.componentInstance;
        return
      }

      var i;
      var data = vnode.data;
      if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
        i(oldVnode, vnode);
      }

      var oldCh = oldVnode.children;
      var ch = vnode.children;
      if (isDef(data) && isPatchable(vnode)) {
        for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
        if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
      }
      if (isUndef(vnode.text)) {
        if (isDef(oldCh) && isDef(ch)) {
          if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
        } else if (isDef(ch)) {
          if (process.env.NODE_ENV !== 'production') {
            checkDuplicateKeys(ch);
          }
          if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
          addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
        } else if (isDef(oldCh)) {
          removeVnodes(oldCh, 0, oldCh.length - 1);
        } else if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }
      } else if (oldVnode.text !== vnode.text) {
        nodeOps.setTextContent(elm, vnode.text);
      }
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
      }
    }

    function invokeInsertHook (vnode, queue, initial) {
      // delay insert hooks for component root nodes, invoke them after the
      // element is really inserted
      if (isTrue(initial) && isDef(vnode.parent)) {
        vnode.parent.data.pendingInsert = queue;
      } else {
        for (var i = 0; i < queue.length; ++i) {
          queue[i].data.hook.insert(queue[i]);
        }
      }
    }

    var hydrationBailed = false;
    // list of modules that can skip create hook during hydration because they
    // are already rendered on the client or has no need for initialization
    // Note: style is excluded because it relies on initial clone for future
    // deep updates (#7063).
    var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

    // Note: this is a browser-only function so we can assume elms are DOM nodes.
    function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
      var i;
      var tag = vnode.tag;
      var data = vnode.data;
      var children = vnode.children;
      inVPre = inVPre || (data && data.pre);
      vnode.elm = elm;

      if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
        vnode.isAsyncPlaceholder = true;
        return true
      }
      // assert node match
      if (process.env.NODE_ENV !== 'production') {
        if (!assertNodeMatch(elm, vnode, inVPre)) {
          return false
        }
      }
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
        if (isDef(i = vnode.componentInstance)) {
          // child component. it should have hydrated its own tree.
          initComponent(vnode, insertedVnodeQueue);
          return true
        }
      }
      if (isDef(tag)) {
        if (isDef(children)) {
          // empty element, allow client to pick up and populate children
          if (!elm.hasChildNodes()) {
            createChildren(vnode, children, insertedVnodeQueue);
          } else {
            // v-html and domProps: innerHTML
            if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
              if (i !== elm.innerHTML) {
                /* istanbul ignore if */
                if (process.env.NODE_ENV !== 'production' &&
                  typeof console !== 'undefined' &&
                  !hydrationBailed
                ) {
                  hydrationBailed = true;
                  console.warn('Parent: ', elm);
                  console.warn('server innerHTML: ', i);
                  console.warn('client innerHTML: ', elm.innerHTML);
                }
                return false
              }
            } else {
              // iterate and compare children lists
              var childrenMatch = true;
              var childNode = elm.firstChild;
              for (var i$1 = 0; i$1 < children.length; i$1++) {
                if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                  childrenMatch = false;
                  break
                }
                childNode = childNode.nextSibling;
              }
              // if childNode is not null, it means the actual childNodes list is
              // longer than the virtual children list.
              if (!childrenMatch || childNode) {
                /* istanbul ignore if */
                if (process.env.NODE_ENV !== 'production' &&
                  typeof console !== 'undefined' &&
                  !hydrationBailed
                ) {
                  hydrationBailed = true;
                  console.warn('Parent: ', elm);
                  console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
                }
                return false
              }
            }
          }
        }
        if (isDef(data)) {
          var fullInvoke = false;
          for (var key in data) {
            if (!isRenderedModule(key)) {
              fullInvoke = true;
              invokeCreateHooks(vnode, insertedVnodeQueue);
              break
            }
          }
          if (!fullInvoke && data['class']) {
            // ensure collecting deps for deep class bindings for future updates
            traverse(data['class']);
          }
        }
      } else if (elm.data !== vnode.text) {
        elm.data = vnode.text;
      }
      return true
    }

    function assertNodeMatch (node, vnode, inVPre) {
      if (isDef(vnode.tag)) {
        return vnode.tag.indexOf('vue-component') === 0 || (
          !isUnknownElement$$1(vnode, inVPre) &&
          vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
        )
      } else {
        return node.nodeType === (vnode.isComment ? 8 : 3)
      }
    }

    return function patch (oldVnode, vnode, hydrating, removeOnly) {
      if (isUndef(vnode)) {
        if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
        return
      }

      var isInitialPatch = false;
      var insertedVnodeQueue = [];

      if (isUndef(oldVnode)) {
        // empty mount (likely as component), create new root element
        isInitialPatch = true;
        createElm(vnode, insertedVnodeQueue);
      } else {
        var isRealElement = isDef(oldVnode.nodeType);
        if (!isRealElement && sameVnode(oldVnode, vnode)) {
          // patch existing root node
          patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
        } else {
          if (isRealElement) {
            // mounting to a real element
            // check if this is server-rendered content and if we can perform
            // a successful hydration.
            if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
              oldVnode.removeAttribute(SSR_ATTR);
              hydrating = true;
            }
            if (isTrue(hydrating)) {
              if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                invokeInsertHook(vnode, insertedVnodeQueue, true);
                return oldVnode
              } else if (process.env.NODE_ENV !== 'production') {
                warn$1(
                  'The client-side rendered virtual DOM tree is not matching ' +
                  'server-rendered content. This is likely caused by incorrect ' +
                  'HTML markup, for example nesting block-level elements inside ' +
                  '<p>, or missing <tbody>. Bailing hydration and performing ' +
                  'full client-side render.'
                );
              }
            }
            // either not server-rendered, or hydration failed.
            // create an empty node and replace it
            oldVnode = emptyNodeAt(oldVnode);
          }

          // replacing existing element
          var oldElm = oldVnode.elm;
          var parentElm = nodeOps.parentNode(oldElm);

          // create new node
          createElm(
            vnode,
            insertedVnodeQueue,
            // extremely rare edge case: do not insert if old element is in a
            // leaving transition. Only happens when combining transition +
            // keep-alive + HOCs. (#4590)
            oldElm._leaveCb ? null : parentElm,
            nodeOps.nextSibling(oldElm)
          );

          // update parent placeholder node element, recursively
          if (isDef(vnode.parent)) {
            var ancestor = vnode.parent;
            var patchable = isPatchable(vnode);
            while (ancestor) {
              for (var i = 0; i < cbs.destroy.length; ++i) {
                cbs.destroy[i](ancestor);
              }
              ancestor.elm = vnode.elm;
              if (patchable) {
                for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                  cbs.create[i$1](emptyNode, ancestor);
                }
                // #6513
                // invoke insert hooks that may have been merged by create hooks.
                // e.g. for directives that uses the "inserted" hook.
                var insert = ancestor.data.hook.insert;
                if (insert.merged) {
                  // start at index 1 to avoid re-invoking component mounted hook
                  for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                    insert.fns[i$2]();
                  }
                }
              } else {
                registerRef(ancestor);
              }
              ancestor = ancestor.parent;
            }
          }

          // destroy old node
          if (isDef(parentElm)) {
            removeVnodes([oldVnode], 0, 0);
          } else if (isDef(oldVnode.tag)) {
            invokeDestroyHook(oldVnode);
          }
        }
      }

      invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
      return vnode.elm
    }
  }

  /*  */

  var directives = {
    create: updateDirectives,
    update: updateDirectives,
    destroy: function unbindDirectives (vnode) {
      updateDirectives(vnode, emptyNode);
    }
  };

  function updateDirectives (oldVnode, vnode) {
    if (oldVnode.data.directives || vnode.data.directives) {
      _update(oldVnode, vnode);
    }
  }

  function _update (oldVnode, vnode) {
    var isCreate = oldVnode === emptyNode;
    var isDestroy = vnode === emptyNode;
    var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
    var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

    var dirsWithInsert = [];
    var dirsWithPostpatch = [];

    var key, oldDir, dir;
    for (key in newDirs) {
      oldDir = oldDirs[key];
      dir = newDirs[key];
      if (!oldDir) {
        // new directive, bind
        callHook$1(dir, 'bind', vnode, oldVnode);
        if (dir.def && dir.def.inserted) {
          dirsWithInsert.push(dir);
        }
      } else {
        // existing directive, update
        dir.oldValue = oldDir.value;
        dir.oldArg = oldDir.arg;
        callHook$1(dir, 'update', vnode, oldVnode);
        if (dir.def && dir.def.componentUpdated) {
          dirsWithPostpatch.push(dir);
        }
      }
    }

    if (dirsWithInsert.length) {
      var callInsert = function () {
        for (var i = 0; i < dirsWithInsert.length; i++) {
          callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
        }
      };
      if (isCreate) {
        mergeVNodeHook(vnode, 'insert', callInsert);
      } else {
        callInsert();
      }
    }

    if (dirsWithPostpatch.length) {
      mergeVNodeHook(vnode, 'postpatch', function () {
        for (var i = 0; i < dirsWithPostpatch.length; i++) {
          callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
        }
      });
    }

    if (!isCreate) {
      for (key in oldDirs) {
        if (!newDirs[key]) {
          // no longer present, unbind
          callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
        }
      }
    }
  }

  var emptyModifiers = Object.create(null);

  function normalizeDirectives$1 (
    dirs,
    vm
  ) {
    var res = Object.create(null);
    if (!dirs) {
      // $flow-disable-line
      return res
    }
    var i, dir;
    for (i = 0; i < dirs.length; i++) {
      dir = dirs[i];
      if (!dir.modifiers) {
        // $flow-disable-line
        dir.modifiers = emptyModifiers;
      }
      res[getRawDirName(dir)] = dir;
      dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
    }
    // $flow-disable-line
    return res
  }

  function getRawDirName (dir) {
    return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
  }

  function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
    var fn = dir.def && dir.def[hook];
    if (fn) {
      try {
        fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
      } catch (e) {
        handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
      }
    }
  }

  var baseModules = [
    ref,
    directives
  ];

  /*  */

  function updateAttrs (oldVnode, vnode) {
    var opts = vnode.componentOptions;
    if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
      return
    }
    if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
      return
    }
    var key, cur, old;
    var elm = vnode.elm;
    var oldAttrs = oldVnode.data.attrs || {};
    var attrs = vnode.data.attrs || {};
    // clone observed objects, as the user probably wants to mutate it
    if (isDef(attrs.__ob__)) {
      attrs = vnode.data.attrs = extend({}, attrs);
    }

    for (key in attrs) {
      cur = attrs[key];
      old = oldAttrs[key];
      if (old !== cur) {
        setAttr(elm, key, cur);
      }
    }
    // #4391: in IE9, setting type can reset value for input[type=radio]
    // #6666: IE/Edge forces progress value down to 1 before setting a max
    /* istanbul ignore if */
    if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
      setAttr(elm, 'value', attrs.value);
    }
    for (key in oldAttrs) {
      if (isUndef(attrs[key])) {
        if (isXlink(key)) {
          elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
        } else if (!isEnumeratedAttr(key)) {
          elm.removeAttribute(key);
        }
      }
    }
  }

  function setAttr (el, key, value) {
    if (el.tagName.indexOf('-') > -1) {
      baseSetAttr(el, key, value);
    } else if (isBooleanAttr(key)) {
      // set attribute for blank value
      // e.g. <option disabled>Select one</option>
      if (isFalsyAttrValue(value)) {
        el.removeAttribute(key);
      } else {
        // technically allowfullscreen is a boolean attribute for <iframe>,
        // but Flash expects a value of "true" when used on <embed> tag
        value = key === 'allowfullscreen' && el.tagName === 'EMBED'
          ? 'true'
          : key;
        el.setAttribute(key, value);
      }
    } else if (isEnumeratedAttr(key)) {
      el.setAttribute(key, convertEnumeratedValue(key, value));
    } else if (isXlink(key)) {
      if (isFalsyAttrValue(value)) {
        el.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else {
        el.setAttributeNS(xlinkNS, key, value);
      }
    } else {
      baseSetAttr(el, key, value);
    }
  }

  function baseSetAttr (el, key, value) {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // #7138: IE10 & 11 fires input event when setting placeholder on
      // <textarea>... block the first input event and remove the blocker
      // immediately.
      /* istanbul ignore if */
      if (
        isIE && !isIE9 &&
        el.tagName === 'TEXTAREA' &&
        key === 'placeholder' && value !== '' && !el.__ieph
      ) {
        var blocker = function (e) {
          e.stopImmediatePropagation();
          el.removeEventListener('input', blocker);
        };
        el.addEventListener('input', blocker);
        // $flow-disable-line
        el.__ieph = true; /* IE placeholder patched */
      }
      el.setAttribute(key, value);
    }
  }

  var attrs = {
    create: updateAttrs,
    update: updateAttrs
  };

  /*  */

  function updateClass (oldVnode, vnode) {
    var el = vnode.elm;
    var data = vnode.data;
    var oldData = oldVnode.data;
    if (
      isUndef(data.staticClass) &&
      isUndef(data.class) && (
        isUndef(oldData) || (
          isUndef(oldData.staticClass) &&
          isUndef(oldData.class)
        )
      )
    ) {
      return
    }

    var cls = genClassForVnode(vnode);

    // handle transition classes
    var transitionClass = el._transitionClasses;
    if (isDef(transitionClass)) {
      cls = concat(cls, stringifyClass(transitionClass));
    }

    // set the class
    if (cls !== el._prevClass) {
      el.setAttribute('class', cls);
      el._prevClass = cls;
    }
  }

  var klass = {
    create: updateClass,
    update: updateClass
  };

  /*  */

  /*  */

  /*  */

  /*  */

  // in some cases, the event used has to be determined at runtime
  // so we used some reserved tokens during compile.
  var RANGE_TOKEN = '__r';
  var CHECKBOX_RADIO_TOKEN = '__c';

  /*  */

  // normalize v-model event tokens that can only be determined at runtime.
  // it's important to place the event as the first in the array because
  // the whole point is ensuring the v-model callback gets called before
  // user-attached handlers.
  function normalizeEvents (on) {
    /* istanbul ignore if */
    if (isDef(on[RANGE_TOKEN])) {
      // IE input[type=range] only supports `change` event
      var event = isIE ? 'change' : 'input';
      on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
      delete on[RANGE_TOKEN];
    }
    // This was originally intended to fix #4521 but no longer necessary
    // after 2.5. Keeping it for backwards compat with generated code from < 2.4
    /* istanbul ignore if */
    if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
      on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
      delete on[CHECKBOX_RADIO_TOKEN];
    }
  }

  var target$1;

  function createOnceHandler$1 (event, handler, capture) {
    var _target = target$1; // save current target element in closure
    return function onceHandler () {
      var res = handler.apply(null, arguments);
      if (res !== null) {
        remove$2(event, onceHandler, capture, _target);
      }
    }
  }

  // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
  // implementation and does not fire microtasks in between event propagation, so
  // safe to exclude.
  var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

  function add$1 (
    name,
    handler,
    capture,
    passive
  ) {
    // async edge case #6566: inner click event triggers patch, event handler
    // attached to outer element during patch, and triggered again. This
    // happens because browsers fire microtask ticks between event propagation.
    // the solution is simple: we save the timestamp when a handler is attached,
    // and the handler would only fire if the event passed to it was fired
    // AFTER it was attached.
    if (useMicrotaskFix) {
      var attachedTimestamp = currentFlushTimestamp;
      var original = handler;
      handler = original._wrapper = function (e) {
        if (
          // no bubbling, should always fire.
          // this is just a safety net in case event.timeStamp is unreliable in
          // certain weird environments...
          e.target === e.currentTarget ||
          // event is fired after handler attachment
          e.timeStamp >= attachedTimestamp ||
          // bail for environments that have buggy event.timeStamp implementations
          // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
          // #9681 QtWebEngine event.timeStamp is negative value
          e.timeStamp <= 0 ||
          // #9448 bail if event is fired in another document in a multi-page
          // electron/nw.js app, since event.timeStamp will be using a different
          // starting reference
          e.target.ownerDocument !== document
        ) {
          return original.apply(this, arguments)
        }
      };
    }
    target$1.addEventListener(
      name,
      handler,
      supportsPassive
        ? { capture: capture, passive: passive }
        : capture
    );
  }

  function remove$2 (
    name,
    handler,
    capture,
    _target
  ) {
    (_target || target$1).removeEventListener(
      name,
      handler._wrapper || handler,
      capture
    );
  }

  function updateDOMListeners (oldVnode, vnode) {
    if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
      return
    }
    var on = vnode.data.on || {};
    var oldOn = oldVnode.data.on || {};
    target$1 = vnode.elm;
    normalizeEvents(on);
    updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
    target$1 = undefined;
  }

  var events = {
    create: updateDOMListeners,
    update: updateDOMListeners
  };

  /*  */

  var svgContainer;

  function updateDOMProps (oldVnode, vnode) {
    if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
      return
    }
    var key, cur;
    var elm = vnode.elm;
    var oldProps = oldVnode.data.domProps || {};
    var props = vnode.data.domProps || {};
    // clone observed objects, as the user probably wants to mutate it
    if (isDef(props.__ob__)) {
      props = vnode.data.domProps = extend({}, props);
    }

    for (key in oldProps) {
      if (!(key in props)) {
        elm[key] = '';
      }
    }

    for (key in props) {
      cur = props[key];
      // ignore children if the node has textContent or innerHTML,
      // as these will throw away existing DOM nodes and cause removal errors
      // on subsequent patches (#3360)
      if (key === 'textContent' || key === 'innerHTML') {
        if (vnode.children) { vnode.children.length = 0; }
        if (cur === oldProps[key]) { continue }
        // #6601 work around Chrome version <= 55 bug where single textNode
        // replaced by innerHTML/textContent retains its parentNode property
        if (elm.childNodes.length === 1) {
          elm.removeChild(elm.childNodes[0]);
        }
      }

      if (key === 'value' && elm.tagName !== 'PROGRESS') {
        // store value as _value as well since
        // non-string values will be stringified
        elm._value = cur;
        // avoid resetting cursor position when value is the same
        var strCur = isUndef(cur) ? '' : String(cur);
        if (shouldUpdateValue(elm, strCur)) {
          elm.value = strCur;
        }
      } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
        // IE doesn't support innerHTML for SVG elements
        svgContainer = svgContainer || document.createElement('div');
        svgContainer.innerHTML = "<svg>" + cur + "</svg>";
        var svg = svgContainer.firstChild;
        while (elm.firstChild) {
          elm.removeChild(elm.firstChild);
        }
        while (svg.firstChild) {
          elm.appendChild(svg.firstChild);
        }
      } else if (
        // skip the update if old and new VDOM state is the same.
        // `value` is handled separately because the DOM value may be temporarily
        // out of sync with VDOM state due to focus, composition and modifiers.
        // This  #4521 by skipping the unnecessary `checked` update.
        cur !== oldProps[key]
      ) {
        // some property updates can throw
        // e.g. `value` on <progress> w/ non-finite value
        try {
          elm[key] = cur;
        } catch (e) {}
      }
    }
  }

  // check platforms/web/util/attrs.js acceptValue


  function shouldUpdateValue (elm, checkVal) {
    return (!elm.composing && (
      elm.tagName === 'OPTION' ||
      isNotInFocusAndDirty(elm, checkVal) ||
      isDirtyWithModifiers(elm, checkVal)
    ))
  }

  function isNotInFocusAndDirty (elm, checkVal) {
    // return true when textbox (.number and .trim) loses focus and its value is
    // not equal to the updated value
    var notInFocus = true;
    // #6157
    // work around IE bug when accessing document.activeElement in an iframe
    try { notInFocus = document.activeElement !== elm; } catch (e) {}
    return notInFocus && elm.value !== checkVal
  }

  function isDirtyWithModifiers (elm, newVal) {
    var value = elm.value;
    var modifiers = elm._vModifiers; // injected by v-model runtime
    if (isDef(modifiers)) {
      if (modifiers.number) {
        return toNumber(value) !== toNumber(newVal)
      }
      if (modifiers.trim) {
        return value.trim() !== newVal.trim()
      }
    }
    return value !== newVal
  }

  var domProps = {
    create: updateDOMProps,
    update: updateDOMProps
  };

  /*  */

  var parseStyleText$1 = cached(function (cssText) {
    var res = {};
    var listDelimiter = /;(?![^(]*\))/g;
    var propertyDelimiter = /:(.+)/;
    cssText.split(listDelimiter).forEach(function (item) {
      if (item) {
        var tmp = item.split(propertyDelimiter);
        tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
      }
    });
    return res
  });

  // merge static and dynamic style data on the same vnode
  function normalizeStyleData (data) {
    var style = normalizeStyleBinding(data.style);
    // static style is pre-processed into an object during compilation
    // and is always a fresh object, so it's safe to merge into it
    return data.staticStyle
      ? extend(data.staticStyle, style)
      : style
  }

  // normalize possible array / string values into Object
  function normalizeStyleBinding (bindingStyle) {
    if (Array.isArray(bindingStyle)) {
      return toObject(bindingStyle)
    }
    if (typeof bindingStyle === 'string') {
      return parseStyleText$1(bindingStyle)
    }
    return bindingStyle
  }

  /**
   * parent component style should be after child's
   * so that parent component's style could override it
   */
  function getStyle$1 (vnode, checkChild) {
    var res = {};
    var styleData;

    if (checkChild) {
      var childNode = vnode;
      while (childNode.componentInstance) {
        childNode = childNode.componentInstance._vnode;
        if (
          childNode && childNode.data &&
          (styleData = normalizeStyleData(childNode.data))
        ) {
          extend(res, styleData);
        }
      }
    }

    if ((styleData = normalizeStyleData(vnode.data))) {
      extend(res, styleData);
    }

    var parentNode = vnode;
    while ((parentNode = parentNode.parent)) {
      if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
        extend(res, styleData);
      }
    }
    return res
  }

  /*  */

  var cssVarRE = /^--/;
  var importantRE = /\s*!important$/;
  var setProp = function (el, name, val) {
    /* istanbul ignore if */
    if (cssVarRE.test(name)) {
      el.style.setProperty(name, val);
    } else if (importantRE.test(val)) {
      el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
    } else {
      var normalizedName = normalize(name);
      if (Array.isArray(val)) {
        // Support values array created by autoprefixer, e.g.
        // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
        // Set them one by one, and the browser will only set those it can recognize
        for (var i = 0, len = val.length; i < len; i++) {
          el.style[normalizedName] = val[i];
        }
      } else {
        el.style[normalizedName] = val;
      }
    }
  };

  var vendorNames = ['Webkit', 'Moz', 'ms'];

  var emptyStyle;
  var normalize = cached(function (prop) {
    emptyStyle = emptyStyle || document.createElement('div').style;
    prop = camelize$1(prop);
    if (prop !== 'filter' && (prop in emptyStyle)) {
      return prop
    }
    var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
    for (var i = 0; i < vendorNames.length; i++) {
      var name = vendorNames[i] + capName;
      if (name in emptyStyle) {
        return name
      }
    }
  });

  function updateStyle (oldVnode, vnode) {
    var data = vnode.data;
    var oldData = oldVnode.data;

    if (isUndef(data.staticStyle) && isUndef(data.style) &&
      isUndef(oldData.staticStyle) && isUndef(oldData.style)
    ) {
      return
    }

    var cur, name;
    var el = vnode.elm;
    var oldStaticStyle = oldData.staticStyle;
    var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

    // if static style exists, stylebinding already merged into it when doing normalizeStyleData
    var oldStyle = oldStaticStyle || oldStyleBinding;

    var style = normalizeStyleBinding(vnode.data.style) || {};

    // store normalized style under a different key for next diff
    // make sure to clone it if it's reactive, since the user likely wants
    // to mutate it.
    vnode.data.normalizedStyle = isDef(style.__ob__)
      ? extend({}, style)
      : style;

    var newStyle = getStyle$1(vnode, true);

    for (name in oldStyle) {
      if (isUndef(newStyle[name])) {
        setProp(el, name, '');
      }
    }
    for (name in newStyle) {
      cur = newStyle[name];
      if (cur !== oldStyle[name]) {
        // ie9 setting to null has no effect, must use empty string
        setProp(el, name, cur == null ? '' : cur);
      }
    }
  }

  var style = {
    create: updateStyle,
    update: updateStyle
  };

  /*  */

  var whitespaceRE = /\s+/;

  /**
   * Add class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */
  function addClass (el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
      return
    }

    /* istanbul ignore else */
    if (el.classList) {
      if (cls.indexOf(' ') > -1) {
        cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
      } else {
        el.classList.add(cls);
      }
    } else {
      var cur = " " + (el.getAttribute('class') || '') + " ";
      if (cur.indexOf(' ' + cls + ' ') < 0) {
        el.setAttribute('class', (cur + cls).trim());
      }
    }
  }

  /**
   * Remove class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */
  function removeClass (el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
      return
    }

    /* istanbul ignore else */
    if (el.classList) {
      if (cls.indexOf(' ') > -1) {
        cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
      } else {
        el.classList.remove(cls);
      }
      if (!el.classList.length) {
        el.removeAttribute('class');
      }
    } else {
      var cur = " " + (el.getAttribute('class') || '') + " ";
      var tar = ' ' + cls + ' ';
      while (cur.indexOf(tar) >= 0) {
        cur = cur.replace(tar, ' ');
      }
      cur = cur.trim();
      if (cur) {
        el.setAttribute('class', cur);
      } else {
        el.removeAttribute('class');
      }
    }
  }

  /*  */

  function resolveTransition (def$$1) {
    if (!def$$1) {
      return
    }
    /* istanbul ignore else */
    if (typeof def$$1 === 'object') {
      var res = {};
      if (def$$1.css !== false) {
        extend(res, autoCssTransition(def$$1.name || 'v'));
      }
      extend(res, def$$1);
      return res
    } else if (typeof def$$1 === 'string') {
      return autoCssTransition(def$$1)
    }
  }

  var autoCssTransition = cached(function (name) {
    return {
      enterClass: (name + "-enter"),
      enterToClass: (name + "-enter-to"),
      enterActiveClass: (name + "-enter-active"),
      leaveClass: (name + "-leave"),
      leaveToClass: (name + "-leave-to"),
      leaveActiveClass: (name + "-leave-active")
    }
  });

  var hasTransition = inBrowser && !isIE9;
  var TRANSITION = 'transition';
  var ANIMATION = 'animation';

  // Transition property/event sniffing
  var transitionProp = 'transition';
  var transitionEndEvent = 'transitionend';
  var animationProp = 'animation';
  var animationEndEvent = 'animationend';
  if (hasTransition) {
    /* istanbul ignore if */
    if (window.ontransitionend === undefined &&
      window.onwebkittransitionend !== undefined
    ) {
      transitionProp = 'WebkitTransition';
      transitionEndEvent = 'webkitTransitionEnd';
    }
    if (window.onanimationend === undefined &&
      window.onwebkitanimationend !== undefined
    ) {
      animationProp = 'WebkitAnimation';
      animationEndEvent = 'webkitAnimationEnd';
    }
  }

  // binding to window is necessary to make hot reload work in IE in strict mode
  var raf$1 = inBrowser
    ? window.requestAnimationFrame
      ? window.requestAnimationFrame.bind(window)
      : setTimeout
    : /* istanbul ignore next */ function (fn) { return fn(); };

  function nextFrame (fn) {
    raf$1(function () {
      raf$1(fn);
    });
  }

  function addTransitionClass (el, cls) {
    var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
    if (transitionClasses.indexOf(cls) < 0) {
      transitionClasses.push(cls);
      addClass(el, cls);
    }
  }

  function removeTransitionClass (el, cls) {
    if (el._transitionClasses) {
      remove(el._transitionClasses, cls);
    }
    removeClass(el, cls);
  }

  function whenTransitionEnds (
    el,
    expectedType,
    cb
  ) {
    var ref = getTransitionInfo(el, expectedType);
    var type = ref.type;
    var timeout = ref.timeout;
    var propCount = ref.propCount;
    if (!type) { return cb() }
    var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
    var ended = 0;
    var end = function () {
      el.removeEventListener(event, onEnd);
      cb();
    };
    var onEnd = function (e) {
      if (e.target === el) {
        if (++ended >= propCount) {
          end();
        }
      }
    };
    setTimeout(function () {
      if (ended < propCount) {
        end();
      }
    }, timeout + 1);
    el.addEventListener(event, onEnd);
  }

  var transformRE = /\b(transform|all)(,|$)/;

  function getTransitionInfo (el, expectedType) {
    var styles = window.getComputedStyle(el);
    // JSDOM may return undefined for transition properties
    var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
    var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
    var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
    var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
    var animationTimeout = getTimeout(animationDelays, animationDurations);

    var type;
    var timeout = 0;
    var propCount = 0;
    /* istanbul ignore if */
    if (expectedType === TRANSITION) {
      if (transitionTimeout > 0) {
        type = TRANSITION;
        timeout = transitionTimeout;
        propCount = transitionDurations.length;
      }
    } else if (expectedType === ANIMATION) {
      if (animationTimeout > 0) {
        type = ANIMATION;
        timeout = animationTimeout;
        propCount = animationDurations.length;
      }
    } else {
      timeout = Math.max(transitionTimeout, animationTimeout);
      type = timeout > 0
        ? transitionTimeout > animationTimeout
          ? TRANSITION
          : ANIMATION
        : null;
      propCount = type
        ? type === TRANSITION
          ? transitionDurations.length
          : animationDurations.length
        : 0;
    }
    var hasTransform =
      type === TRANSITION &&
      transformRE.test(styles[transitionProp + 'Property']);
    return {
      type: type,
      timeout: timeout,
      propCount: propCount,
      hasTransform: hasTransform
    }
  }

  function getTimeout (delays, durations) {
    /* istanbul ignore next */
    while (delays.length < durations.length) {
      delays = delays.concat(delays);
    }

    return Math.max.apply(null, durations.map(function (d, i) {
      return toMs(d) + toMs(delays[i])
    }))
  }

  // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
  // in a locale-dependent way, using a comma instead of a dot.
  // If comma is not replaced with a dot, the input will be rounded down (i.e. acting
  // as a floor function) causing unexpected behaviors
  function toMs (s) {
    return Number(s.slice(0, -1).replace(',', '.')) * 1000
  }

  /*  */

  function enter (vnode, toggleDisplay) {
    var el = vnode.elm;

    // call leave callback now
    if (isDef(el._leaveCb)) {
      el._leaveCb.cancelled = true;
      el._leaveCb();
    }

    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data)) {
      return
    }

    /* istanbul ignore if */
    if (isDef(el._enterCb) || el.nodeType !== 1) {
      return
    }

    var css = data.css;
    var type = data.type;
    var enterClass = data.enterClass;
    var enterToClass = data.enterToClass;
    var enterActiveClass = data.enterActiveClass;
    var appearClass = data.appearClass;
    var appearToClass = data.appearToClass;
    var appearActiveClass = data.appearActiveClass;
    var beforeEnter = data.beforeEnter;
    var enter = data.enter;
    var afterEnter = data.afterEnter;
    var enterCancelled = data.enterCancelled;
    var beforeAppear = data.beforeAppear;
    var appear = data.appear;
    var afterAppear = data.afterAppear;
    var appearCancelled = data.appearCancelled;
    var duration = data.duration;

    // activeInstance will always be the <transition> component managing this
    // transition. One edge case to check is when the <transition> is placed
    // as the root node of a child component. In that case we need to check
    // <transition>'s parent for appear check.
    var context = activeInstance;
    var transitionNode = activeInstance.$vnode;
    while (transitionNode && transitionNode.parent) {
      context = transitionNode.context;
      transitionNode = transitionNode.parent;
    }

    var isAppear = !context._isMounted || !vnode.isRootInsert;

    if (isAppear && !appear && appear !== '') {
      return
    }

    var startClass = isAppear && appearClass
      ? appearClass
      : enterClass;
    var activeClass = isAppear && appearActiveClass
      ? appearActiveClass
      : enterActiveClass;
    var toClass = isAppear && appearToClass
      ? appearToClass
      : enterToClass;

    var beforeEnterHook = isAppear
      ? (beforeAppear || beforeEnter)
      : beforeEnter;
    var enterHook = isAppear
      ? (typeof appear === 'function' ? appear : enter)
      : enter;
    var afterEnterHook = isAppear
      ? (afterAppear || afterEnter)
      : afterEnter;
    var enterCancelledHook = isAppear
      ? (appearCancelled || enterCancelled)
      : enterCancelled;

    var explicitEnterDuration = toNumber(
      isObject(duration)
        ? duration.enter
        : duration
    );

    if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {
      checkDuration(explicitEnterDuration, 'enter', vnode);
    }

    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(enterHook);

    var cb = el._enterCb = once(function () {
      if (expectsCSS) {
        removeTransitionClass(el, toClass);
        removeTransitionClass(el, activeClass);
      }
      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, startClass);
        }
        enterCancelledHook && enterCancelledHook(el);
      } else {
        afterEnterHook && afterEnterHook(el);
      }
      el._enterCb = null;
    });

    if (!vnode.data.show) {
      // remove pending leave element on enter by injecting an insert hook
      mergeVNodeHook(vnode, 'insert', function () {
        var parent = el.parentNode;
        var pendingNode = parent && parent._pending && parent._pending[vnode.key];
        if (pendingNode &&
          pendingNode.tag === vnode.tag &&
          pendingNode.elm._leaveCb
        ) {
          pendingNode.elm._leaveCb();
        }
        enterHook && enterHook(el, cb);
      });
    }

    // start enter transition
    beforeEnterHook && beforeEnterHook(el);
    if (expectsCSS) {
      addTransitionClass(el, startClass);
      addTransitionClass(el, activeClass);
      nextFrame(function () {
        removeTransitionClass(el, startClass);
        if (!cb.cancelled) {
          addTransitionClass(el, toClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitEnterDuration)) {
              setTimeout(cb, explicitEnterDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    if (vnode.data.show) {
      toggleDisplay && toggleDisplay();
      enterHook && enterHook(el, cb);
    }

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }

  function leave (vnode, rm) {
    var el = vnode.elm;

    // call enter callback now
    if (isDef(el._enterCb)) {
      el._enterCb.cancelled = true;
      el._enterCb();
    }

    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data) || el.nodeType !== 1) {
      return rm()
    }

    /* istanbul ignore if */
    if (isDef(el._leaveCb)) {
      return
    }

    var css = data.css;
    var type = data.type;
    var leaveClass = data.leaveClass;
    var leaveToClass = data.leaveToClass;
    var leaveActiveClass = data.leaveActiveClass;
    var beforeLeave = data.beforeLeave;
    var leave = data.leave;
    var afterLeave = data.afterLeave;
    var leaveCancelled = data.leaveCancelled;
    var delayLeave = data.delayLeave;
    var duration = data.duration;

    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(leave);

    var explicitLeaveDuration = toNumber(
      isObject(duration)
        ? duration.leave
        : duration
    );

    if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {
      checkDuration(explicitLeaveDuration, 'leave', vnode);
    }

    var cb = el._leaveCb = once(function () {
      if (el.parentNode && el.parentNode._pending) {
        el.parentNode._pending[vnode.key] = null;
      }
      if (expectsCSS) {
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
      }
      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, leaveClass);
        }
        leaveCancelled && leaveCancelled(el);
      } else {
        rm();
        afterLeave && afterLeave(el);
      }
      el._leaveCb = null;
    });

    if (delayLeave) {
      delayLeave(performLeave);
    } else {
      performLeave();
    }

    function performLeave () {
      // the delayed leave may have already been cancelled
      if (cb.cancelled) {
        return
      }
      // record leaving element
      if (!vnode.data.show && el.parentNode) {
        (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
      }
      beforeLeave && beforeLeave(el);
      if (expectsCSS) {
        addTransitionClass(el, leaveClass);
        addTransitionClass(el, leaveActiveClass);
        nextFrame(function () {
          removeTransitionClass(el, leaveClass);
          if (!cb.cancelled) {
            addTransitionClass(el, leaveToClass);
            if (!userWantsControl) {
              if (isValidDuration(explicitLeaveDuration)) {
                setTimeout(cb, explicitLeaveDuration);
              } else {
                whenTransitionEnds(el, type, cb);
              }
            }
          }
        });
      }
      leave && leave(el, cb);
      if (!expectsCSS && !userWantsControl) {
        cb();
      }
    }
  }

  // only used in dev mode
  function checkDuration (val, name, vnode) {
    if (typeof val !== 'number') {
      warn$1(
        "<transition> explicit " + name + " duration is not a valid number - " +
        "got " + (JSON.stringify(val)) + ".",
        vnode.context
      );
    } else if (isNaN(val)) {
      warn$1(
        "<transition> explicit " + name + " duration is NaN - " +
        'the duration expression might be incorrect.',
        vnode.context
      );
    }
  }

  function isValidDuration (val) {
    return typeof val === 'number' && !isNaN(val)
  }

  /**
   * Normalize a transition hook's argument length. The hook may be:
   * - a merged hook (invoker) with the original in .fns
   * - a wrapped component method (check ._length)
   * - a plain function (.length)
   */
  function getHookArgumentsLength (fn) {
    if (isUndef(fn)) {
      return false
    }
    var invokerFns = fn.fns;
    if (isDef(invokerFns)) {
      // invoker
      return getHookArgumentsLength(
        Array.isArray(invokerFns)
          ? invokerFns[0]
          : invokerFns
      )
    } else {
      return (fn._length || fn.length) > 1
    }
  }

  function _enter (_, vnode) {
    if (vnode.data.show !== true) {
      enter(vnode);
    }
  }

  var transition = inBrowser ? {
    create: _enter,
    activate: _enter,
    remove: function remove$$1 (vnode, rm) {
      /* istanbul ignore else */
      if (vnode.data.show !== true) {
        leave(vnode, rm);
      } else {
        rm();
      }
    }
  } : {};

  var platformModules = [
    attrs,
    klass,
    events,
    domProps,
    style,
    transition
  ];

  /*  */

  // the directive module should be applied last, after all
  // built-in modules have been applied.
  var modules = platformModules.concat(baseModules);

  var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

  /**
   * Not type checking this file because flow doesn't like attaching
   * properties to Elements.
   */

  /* istanbul ignore if */
  if (isIE9) {
    // http://www.matts411.com/post/internet-explorer-9-oninput/
    document.addEventListener('selectionchange', function () {
      var el = document.activeElement;
      if (el && el.vmodel) {
        trigger(el, 'input');
      }
    });
  }

  var directive = {
    inserted: function inserted (el, binding, vnode, oldVnode) {
      if (vnode.tag === 'select') {
        // #6903
        if (oldVnode.elm && !oldVnode.elm._vOptions) {
          mergeVNodeHook(vnode, 'postpatch', function () {
            directive.componentUpdated(el, binding, vnode);
          });
        } else {
          setSelected(el, binding, vnode.context);
        }
        el._vOptions = [].map.call(el.options, getValue);
      } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
        el._vModifiers = binding.modifiers;
        if (!binding.modifiers.lazy) {
          el.addEventListener('compositionstart', onCompositionStart);
          el.addEventListener('compositionend', onCompositionEnd);
          // Safari < 10.2 & UIWebView doesn't fire compositionend when
          // switching focus before confirming composition choice
          // this also fixes the issue where some browsers e.g. iOS Chrome
          // fires "change" instead of "input" on autocomplete.
          el.addEventListener('change', onCompositionEnd);
          /* istanbul ignore if */
          if (isIE9) {
            el.vmodel = true;
          }
        }
      }
    },

    componentUpdated: function componentUpdated (el, binding, vnode) {
      if (vnode.tag === 'select') {
        setSelected(el, binding, vnode.context);
        // in case the options rendered by v-for have changed,
        // it's possible that the value is out-of-sync with the rendered options.
        // detect such cases and filter out values that no longer has a matching
        // option in the DOM.
        var prevOptions = el._vOptions;
        var curOptions = el._vOptions = [].map.call(el.options, getValue);
        if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
          // trigger change event if
          // no matching option found for at least one value
          var needReset = el.multiple
            ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
            : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
          if (needReset) {
            trigger(el, 'change');
          }
        }
      }
    }
  };

  function setSelected (el, binding, vm) {
    actuallySetSelected(el, binding, vm);
    /* istanbul ignore if */
    if (isIE || isEdge) {
      setTimeout(function () {
        actuallySetSelected(el, binding, vm);
      }, 0);
    }
  }

  function actuallySetSelected (el, binding, vm) {
    var value = binding.value;
    var isMultiple = el.multiple;
    if (isMultiple && !Array.isArray(value)) {
      process.env.NODE_ENV !== 'production' && warn$1(
        "<select multiple v-model=\"" + (binding.expression) + "\"> " +
        "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
        vm
      );
      return
    }
    var selected, option;
    for (var i = 0, l = el.options.length; i < l; i++) {
      option = el.options[i];
      if (isMultiple) {
        selected = looseIndexOf(value, getValue(option)) > -1;
        if (option.selected !== selected) {
          option.selected = selected;
        }
      } else {
        if (looseEqual(getValue(option), value)) {
          if (el.selectedIndex !== i) {
            el.selectedIndex = i;
          }
          return
        }
      }
    }
    if (!isMultiple) {
      el.selectedIndex = -1;
    }
  }

  function hasNoMatchingOption (value, options) {
    return options.every(function (o) { return !looseEqual(o, value); })
  }

  function getValue (option) {
    return '_value' in option
      ? option._value
      : option.value
  }

  function onCompositionStart (e) {
    e.target.composing = true;
  }

  function onCompositionEnd (e) {
    // prevent triggering an input event for no reason
    if (!e.target.composing) { return }
    e.target.composing = false;
    trigger(e.target, 'input');
  }

  function trigger (el, type) {
    var e = document.createEvent('HTMLEvents');
    e.initEvent(type, true, true);
    el.dispatchEvent(e);
  }

  /*  */

  // recursively search for possible transition defined inside the component root
  function locateNode (vnode) {
    return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
      ? locateNode(vnode.componentInstance._vnode)
      : vnode
  }

  var show = {
    bind: function bind (el, ref, vnode) {
      var value = ref.value;

      vnode = locateNode(vnode);
      var transition$$1 = vnode.data && vnode.data.transition;
      var originalDisplay = el.__vOriginalDisplay =
        el.style.display === 'none' ? '' : el.style.display;
      if (value && transition$$1) {
        vnode.data.show = true;
        enter(vnode, function () {
          el.style.display = originalDisplay;
        });
      } else {
        el.style.display = value ? originalDisplay : 'none';
      }
    },

    update: function update (el, ref, vnode) {
      var value = ref.value;
      var oldValue = ref.oldValue;

      /* istanbul ignore if */
      if (!value === !oldValue) { return }
      vnode = locateNode(vnode);
      var transition$$1 = vnode.data && vnode.data.transition;
      if (transition$$1) {
        vnode.data.show = true;
        if (value) {
          enter(vnode, function () {
            el.style.display = el.__vOriginalDisplay;
          });
        } else {
          leave(vnode, function () {
            el.style.display = 'none';
          });
        }
      } else {
        el.style.display = value ? el.__vOriginalDisplay : 'none';
      }
    },

    unbind: function unbind (
      el,
      binding,
      vnode,
      oldVnode,
      isDestroy
    ) {
      if (!isDestroy) {
        el.style.display = el.__vOriginalDisplay;
      }
    }
  };

  var platformDirectives = {
    model: directive,
    show: show
  };

  /*  */

  var transitionProps = {
    name: String,
    appear: Boolean,
    css: Boolean,
    mode: String,
    type: String,
    enterClass: String,
    leaveClass: String,
    enterToClass: String,
    leaveToClass: String,
    enterActiveClass: String,
    leaveActiveClass: String,
    appearClass: String,
    appearActiveClass: String,
    appearToClass: String,
    duration: [Number, String, Object]
  };

  // in case the child is also an abstract component, e.g. <keep-alive>
  // we want to recursively retrieve the real component to be rendered
  function getRealChild (vnode) {
    var compOptions = vnode && vnode.componentOptions;
    if (compOptions && compOptions.Ctor.options.abstract) {
      return getRealChild(getFirstComponentChild(compOptions.children))
    } else {
      return vnode
    }
  }

  function extractTransitionData (comp) {
    var data = {};
    var options = comp.$options;
    // props
    for (var key in options.propsData) {
      data[key] = comp[key];
    }
    // events.
    // extract listeners and pass them directly to the transition methods
    var listeners = options._parentListeners;
    for (var key$1 in listeners) {
      data[camelize$1(key$1)] = listeners[key$1];
    }
    return data
  }

  function placeholder (h, rawChild) {
    if (/\d-keep-alive$/.test(rawChild.tag)) {
      return h('keep-alive', {
        props: rawChild.componentOptions.propsData
      })
    }
  }

  function hasParentTransition (vnode) {
    while ((vnode = vnode.parent)) {
      if (vnode.data.transition) {
        return true
      }
    }
  }

  function isSameChild (child, oldChild) {
    return oldChild.key === child.key && oldChild.tag === child.tag
  }

  var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

  var isVShowDirective = function (d) { return d.name === 'show'; };

  var Transition = {
    name: 'transition',
    props: transitionProps,
    abstract: true,

    render: function render (h) {
      var this$1 = this;

      var children = this.$slots.default;
      if (!children) {
        return
      }

      // filter out text nodes (possible whitespaces)
      children = children.filter(isNotTextNode);
      /* istanbul ignore if */
      if (!children.length) {
        return
      }

      // warn multiple elements
      if (process.env.NODE_ENV !== 'production' && children.length > 1) {
        warn$1(
          '<transition> can only be used on a single element. Use ' +
          '<transition-group> for lists.',
          this.$parent
        );
      }

      var mode = this.mode;

      // warn invalid mode
      if (process.env.NODE_ENV !== 'production' &&
        mode && mode !== 'in-out' && mode !== 'out-in'
      ) {
        warn$1(
          'invalid <transition> mode: ' + mode,
          this.$parent
        );
      }

      var rawChild = children[0];

      // if this is a component root node and the component's
      // parent container node also has transition, skip.
      if (hasParentTransition(this.$vnode)) {
        return rawChild
      }

      // apply transition data to child
      // use getRealChild() to ignore abstract components e.g. keep-alive
      var child = getRealChild(rawChild);
      /* istanbul ignore if */
      if (!child) {
        return rawChild
      }

      if (this._leaving) {
        return placeholder(h, rawChild)
      }

      // ensure a key that is unique to the vnode type and to this transition
      // component instance. This key will be used to remove pending leaving nodes
      // during entering.
      var id = "__transition-" + (this._uid) + "-";
      child.key = child.key == null
        ? child.isComment
          ? id + 'comment'
          : id + child.tag
        : isPrimitive(child.key)
          ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
          : child.key;

      var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
      var oldRawChild = this._vnode;
      var oldChild = getRealChild(oldRawChild);

      // mark v-show
      // so that the transition module can hand over the control to the directive
      if (child.data.directives && child.data.directives.some(isVShowDirective)) {
        child.data.show = true;
      }

      if (
        oldChild &&
        oldChild.data &&
        !isSameChild(child, oldChild) &&
        !isAsyncPlaceholder(oldChild) &&
        // #6687 component root is a comment node
        !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
      ) {
        // replace old child transition data with fresh one
        // important for dynamic transitions!
        var oldData = oldChild.data.transition = extend({}, data);
        // handle transition mode
        if (mode === 'out-in') {
          // return placeholder node and queue update when leave finishes
          this._leaving = true;
          mergeVNodeHook(oldData, 'afterLeave', function () {
            this$1._leaving = false;
            this$1.$forceUpdate();
          });
          return placeholder(h, rawChild)
        } else if (mode === 'in-out') {
          if (isAsyncPlaceholder(child)) {
            return oldRawChild
          }
          var delayedLeave;
          var performLeave = function () { delayedLeave(); };
          mergeVNodeHook(data, 'afterEnter', performLeave);
          mergeVNodeHook(data, 'enterCancelled', performLeave);
          mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
        }
      }

      return rawChild
    }
  };

  /*  */

  var props = extend({
    tag: String,
    moveClass: String
  }, transitionProps);

  delete props.mode;

  var TransitionGroup = {
    props: props,

    beforeMount: function beforeMount () {
      var this$1 = this;

      var update = this._update;
      this._update = function (vnode, hydrating) {
        var restoreActiveInstance = setActiveInstance(this$1);
        // force removing pass
        this$1.__patch__(
          this$1._vnode,
          this$1.kept,
          false, // hydrating
          true // removeOnly (!important, avoids unnecessary moves)
        );
        this$1._vnode = this$1.kept;
        restoreActiveInstance();
        update.call(this$1, vnode, hydrating);
      };
    },

    render: function render (h) {
      var tag = this.tag || this.$vnode.data.tag || 'span';
      var map = Object.create(null);
      var prevChildren = this.prevChildren = this.children;
      var rawChildren = this.$slots.default || [];
      var children = this.children = [];
      var transitionData = extractTransitionData(this);

      for (var i = 0; i < rawChildren.length; i++) {
        var c = rawChildren[i];
        if (c.tag) {
          if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
            children.push(c);
            map[c.key] = c
            ;(c.data || (c.data = {})).transition = transitionData;
          } else if (process.env.NODE_ENV !== 'production') {
            var opts = c.componentOptions;
            var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
            warn$1(("<transition-group> children must be keyed: <" + name + ">"));
          }
        }
      }

      if (prevChildren) {
        var kept = [];
        var removed = [];
        for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
          var c$1 = prevChildren[i$1];
          c$1.data.transition = transitionData;
          c$1.data.pos = c$1.elm.getBoundingClientRect();
          if (map[c$1.key]) {
            kept.push(c$1);
          } else {
            removed.push(c$1);
          }
        }
        this.kept = h(tag, null, kept);
        this.removed = removed;
      }

      return h(tag, null, children)
    },

    updated: function updated () {
      var children = this.prevChildren;
      var moveClass = this.moveClass || ((this.name || 'v') + '-move');
      if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
        return
      }

      // we divide the work into three loops to avoid mixing DOM reads and writes
      // in each iteration - which helps prevent layout thrashing.
      children.forEach(callPendingCbs);
      children.forEach(recordPosition);
      children.forEach(applyTranslation);

      // force reflow to put everything in position
      // assign to this to avoid being removed in tree-shaking
      // $flow-disable-line
      this._reflow = document.body.offsetHeight;

      children.forEach(function (c) {
        if (c.data.moved) {
          var el = c.elm;
          var s = el.style;
          addTransitionClass(el, moveClass);
          s.transform = s.WebkitTransform = s.transitionDuration = '';
          el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
            if (e && e.target !== el) {
              return
            }
            if (!e || /transform$/.test(e.propertyName)) {
              el.removeEventListener(transitionEndEvent, cb);
              el._moveCb = null;
              removeTransitionClass(el, moveClass);
            }
          });
        }
      });
    },

    methods: {
      hasMove: function hasMove (el, moveClass) {
        /* istanbul ignore if */
        if (!hasTransition) {
          return false
        }
        /* istanbul ignore if */
        if (this._hasMove) {
          return this._hasMove
        }
        // Detect whether an element with the move class applied has
        // CSS transitions. Since the element may be inside an entering
        // transition at this very moment, we make a clone of it and remove
        // all other transition classes applied to ensure only the move class
        // is applied.
        var clone = el.cloneNode();
        if (el._transitionClasses) {
          el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
        }
        addClass(clone, moveClass);
        clone.style.display = 'none';
        this.$el.appendChild(clone);
        var info = getTransitionInfo(clone);
        this.$el.removeChild(clone);
        return (this._hasMove = info.hasTransform)
      }
    }
  };

  function callPendingCbs (c) {
    /* istanbul ignore if */
    if (c.elm._moveCb) {
      c.elm._moveCb();
    }
    /* istanbul ignore if */
    if (c.elm._enterCb) {
      c.elm._enterCb();
    }
  }

  function recordPosition (c) {
    c.data.newPos = c.elm.getBoundingClientRect();
  }

  function applyTranslation (c) {
    var oldPos = c.data.pos;
    var newPos = c.data.newPos;
    var dx = oldPos.left - newPos.left;
    var dy = oldPos.top - newPos.top;
    if (dx || dy) {
      c.data.moved = true;
      var s = c.elm.style;
      s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
      s.transitionDuration = '0s';
    }
  }

  var platformComponents = {
    Transition: Transition,
    TransitionGroup: TransitionGroup
  };

  /*  */

  // install platform specific utils
  Vue.config.mustUseProp = mustUseProp;
  Vue.config.isReservedTag = isReservedTag;
  Vue.config.isReservedAttr = isReservedAttr;
  Vue.config.getTagNamespace = getTagNamespace;
  Vue.config.isUnknownElement = isUnknownElement;

  // install platform runtime directives & components
  extend(Vue.options.directives, platformDirectives);
  extend(Vue.options.components, platformComponents);

  // install platform patch function
  Vue.prototype.__patch__ = inBrowser ? patch : noop$1;

  // public mount method
  Vue.prototype.$mount = function (
    el,
    hydrating
  ) {
    el = el && inBrowser ? query(el) : undefined;
    return mountComponent(this, el, hydrating)
  };

  // devtools global hook
  /* istanbul ignore next */
  if (inBrowser) {
    setTimeout(function () {
      if (config.devtools) {
        if (devtools) {
          devtools.emit('init', Vue);
        } else if (
          process.env.NODE_ENV !== 'production' &&
          process.env.NODE_ENV !== 'test'
        ) {
          console[console.info ? 'info' : 'log'](
            'Download the Vue Devtools extension for a better development experience:\n' +
            'https://github.com/vuejs/vue-devtools'
          );
        }
      }
      if (process.env.NODE_ENV !== 'production' &&
        process.env.NODE_ENV !== 'test' &&
        config.productionTip !== false &&
        typeof console !== 'undefined'
      ) {
        console[console.info ? 'info' : 'log'](
          "You are running Vue in development mode.\n" +
          "Make sure to turn on production mode when deploying for production.\n" +
          "See more tips at https://vuejs.org/guide/deployment.html"
        );
      }
    }, 0);
  }

  var enUS = {
    // Options.jsx
    items_per_page: '/ page',
    jump_to: 'Go to',
    jump_to_confirm: 'confirm',
    page: '',

    // Pagination.jsx
    prev_page: 'Previous Page',
    next_page: 'Next Page',
    prev_5: 'Previous 5 Pages',
    next_5: 'Next 5 Pages',
    prev_3: 'Previous 3 Pages',
    next_3: 'Next 3 Pages'
  };

  var enUs = {
    today: 'Today',
    now: 'Now',
    backToToday: 'Back to today',
    ok: 'Ok',
    clear: 'Clear',
    month: 'Month',
    year: 'Year',
    timeSelect: 'select time',
    dateSelect: 'select date',
    weekSelect: 'Choose a week',
    monthSelect: 'Choose a month',
    yearSelect: 'Choose a year',
    decadeSelect: 'Choose a decade',
    yearFormat: 'YYYY',
    dateFormat: 'M/D/YYYY',
    dayFormat: 'D',
    dateTimeFormat: 'M/D/YYYY HH:mm:ss',
    monthBeforeYear: true,
    previousMonth: 'Previous month (PageUp)',
    nextMonth: 'Next month (PageDown)',
    previousYear: 'Last year (Control + left)',
    nextYear: 'Next year (Control + right)',
    previousDecade: 'Last decade',
    nextDecade: 'Next decade',
    previousCentury: 'Last century',
    nextCentury: 'Next century'
  };

  var locale = {
    placeholder: 'Select time'
  };

  // Merge into a locale object
  var locale$1 = {
    lang: _extends$1({
      placeholder: 'Select date',
      rangePlaceholder: ['Start date', 'End date']
    }, enUs),
    timePickerLocale: _extends$1({}, locale)
  };

  var ColorPicker = {
    'btn:save': 'Save',
    'btn:cancel': 'Cancel',
    'btn:clear': 'Clear'
  };

  var defaultLocale = {
    locale: 'en',
    Pagination: enUS,
    DatePicker: locale$1,
    TimePicker: locale,
    Calendar: locale$1,
    ColorPicker: ColorPicker,
    global: {
      placeholder: 'Please select'
    },
    Table: {
      filterTitle: 'Filter menu',
      filterConfirm: 'OK',
      filterReset: 'Reset',
      selectAll: 'Select current page',
      selectInvert: 'Invert current page',
      sortTitle: 'Sort',
      expand: 'Expand row',
      collapse: 'Collapse row'
    },
    Modal: {
      okText: 'OK',
      cancelText: 'Cancel',
      justOkText: 'OK'
    },
    Popconfirm: {
      okText: 'OK',
      cancelText: 'Cancel'
    },
    Transfer: {
      titles: ['', ''],
      searchPlaceholder: 'Search here',
      itemUnit: 'item',
      itemsUnit: 'items'
    },
    Upload: {
      uploading: 'Uploading...',
      removeFile: 'Remove file',
      uploadError: 'Upload error',
      previewFile: 'Preview file',
      downloadFile: 'Download file'
    },
    Empty: {
      description: 'No Data'
    },
    Icon: {
      icon: 'icon'
    },
    Text: {
      edit: 'Edit',
      copy: 'Copy',
      copied: 'Copied',
      expand: 'Expand'
    },
    PageHeader: {
      back: 'Back'
    }
  };

  var LocaleReceiver = {
    name: 'LocaleReceiver',
    props: {
      componentName: VuePropTypes.string.def('global'),
      defaultLocale: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.func]),
      children: VuePropTypes.func
    },
    inject: {
      localeData: { 'default': function _default() {
          return {};
        } }
    },
    methods: {
      getLocale: function getLocale() {
        var componentName = this.componentName,
            defaultLocale$1 = this.defaultLocale;

        var locale = defaultLocale$1 || defaultLocale[componentName || 'global'];
        var antLocale = this.localeData.antLocale;


        var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
        return _extends$1({}, typeof locale === 'function' ? locale() : locale, localeFromContext || {});
      },
      getLocaleCode: function getLocaleCode() {
        var antLocale = this.localeData.antLocale;

        var localeCode = antLocale && antLocale.locale;
        // Had use LocaleProvide but didn't set locale
        if (antLocale && antLocale.exist && !localeCode) {
          return defaultLocale.locale;
        }
        return localeCode;
      }
    },
    render: function render() {
      var $scopedSlots = this.$scopedSlots;

      var children = this.children || $scopedSlots['default'];
      var antLocale = this.localeData.antLocale;

      return children(this.getLocale(), this.getLocaleCode(), antLocale);
    }
  };

  var DefaultEmptyImg = {
    functional: true,
    PRESENTED_IMAGE_DEFAULT: true,
    render: function render() {
      var h = arguments[0];

      return h(
        "svg",
        {
          attrs: { width: "184", height: "152", viewBox: "0 0 184 152", xmlns: "http://www.w3.org/2000/svg" }
        },
        [h(
          "g",
          {
            attrs: { fill: "none", fillRule: "evenodd" }
          },
          [h(
            "g",
            {
              attrs: { transform: "translate(24 31.67)" }
            },
            [h("ellipse", {
              attrs: {
                fillOpacity: ".8",
                fill: "#F5F5F7",
                cx: "67.797",
                cy: "106.89",
                rx: "67.797",
                ry: "12.668"
              }
            }), h("path", {
              attrs: {
                d: "M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z",
                fill: "#AEB8C2"
              }
            }), h("path", {
              attrs: {
                d: "M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z",
                fill: "url(#linearGradient-1)",
                transform: "translate(13.56)"
              }
            }), h("path", {
              attrs: {
                d: "M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z",
                fill: "#F5F5F7"
              }
            }), h("path", {
              attrs: {
                d: "M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z",
                fill: "#DCE0E6"
              }
            })]
          ), h("path", {
            attrs: {
              d: "M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z",
              fill: "#DCE0E6"
            }
          }), h(
            "g",
            {
              attrs: { transform: "translate(149.65 15.383)", fill: "#FFF" }
            },
            [h("ellipse", {
              attrs: { cx: "20.654", cy: "3.167", rx: "2.849", ry: "2.815" }
            }), h("path", {
              attrs: { d: "M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z" }
            })]
          )]
        )]
      );
    }
  };

  var SimpleEmptyImg = {
    functional: true,
    PRESENTED_IMAGE_SIMPLE: true,
    render: function render() {
      var h = arguments[0];

      return h(
        "svg",
        {
          attrs: { width: "64", height: "41", viewBox: "0 0 64 41", xmlns: "http://www.w3.org/2000/svg" }
        },
        [h(
          "g",
          {
            attrs: { transform: "translate(0 1)", fill: "none", fillRule: "evenodd" }
          },
          [h("ellipse", {
            attrs: { fill: "#F5F5F5", cx: "32", cy: "33", rx: "32", ry: "7" }
          }), h(
            "g",
            {
              attrs: { fillRule: "nonzero", stroke: "#D9D9D9" }
            },
            [h("path", {
              attrs: { d: "M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z" }
            }), h("path", {
              attrs: {
                d: "M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",
                fill: "#FAFAFA"
              }
            })]
          )]
        )]
      );
    }
  };

  var vueRef = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    install: function install(Vue) {
      var options =
        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var directiveName = options.name || "ref";
      Vue.directive(directiveName, {
        bind: function bind(el, binding, vnode) {
          Vue.nextTick(function() {
            binding.value(vnode.componentInstance || el, vnode.key);
          });
          binding.value(vnode.componentInstance || el, vnode.key);
        },
        update: function update(el, binding, vnode, oldVnode) {
          if (oldVnode.data && oldVnode.data.directives) {
            var oldBinding = oldVnode.data.directives.find(function(directive) {
              var name = directive.name;
              return name === directiveName;
            });
            if (oldBinding && oldBinding.value !== binding.value) {
              oldBinding && oldBinding.value(null, oldVnode.key);
              binding.value(vnode.componentInstance || el, vnode.key);
              return;
            }
          }
          // Should not have this situation
          if (
            vnode.componentInstance !== oldVnode.componentInstance ||
            vnode.elm !== oldVnode.elm
          ) {
            binding.value(vnode.componentInstance || el, vnode.key);
          }
        },
        unbind: function unbind(el, binding, vnode) {
          binding.value(null, vnode.key);
        }
      });
    }
  };
  });

  var ref$1 = /*@__PURE__*/getDefaultExportFromCjs(vueRef);

  /**
   * Not type checking this file because flow doesn't like attaching
   * properties to Elements.
   */

  var inBrowser$1 = typeof window !== 'undefined';
  var UA$1 = inBrowser$1 && window.navigator.userAgent.toLowerCase();
  var isIE9$1 = UA$1 && UA$1.indexOf('msie 9.0') > 0;
  function makeMap$1(str, expectsLowerCase) {
    var map = Object.create(null);
    var list = str.split(',');
    for (var i = 0; i < list.length; i++) {
      map[list[i]] = true;
    }
    return expectsLowerCase ? function (val) {
      return map[val.toLowerCase()];
    } : function (val) {
      return map[val];
    };
  }
  var isTextInputType$1 = makeMap$1('text,number,password,search,email,tel,url');

  function onCompositionStart$1(e) {
    e.target.composing = true;
  }

  function onCompositionEnd$1(e) {
    // prevent triggering an input event for no reason
    if (!e.target.composing) return;
    e.target.composing = false;
    trigger$1(e.target, 'input');
  }

  function trigger$1(el, type) {
    var e = document.createEvent('HTMLEvents');
    e.initEvent(type, true, true);
    el.dispatchEvent(e);
  }

  /* istanbul ignore if */
  if (isIE9$1) {
    // http://www.matts411.com/post/internet-explorer-9-oninput/
    document.addEventListener('selectionchange', function () {
      var el = document.activeElement;
      if (el && el.vmodel) {
        trigger$1(el, 'input');
      }
    });
  }

  function antInput(Vue) {
    return Vue.directive('ant-input', {
      inserted: function inserted(el, binding, vnode) {
        if (vnode.tag === 'textarea' || isTextInputType$1(el.type)) {
          if (!binding.modifiers || !binding.modifiers.lazy) {
            el.addEventListener('compositionstart', onCompositionStart$1);
            el.addEventListener('compositionend', onCompositionEnd$1);
            // Safari < 10.2 & UIWebView doesn't fire compositionend when
            // switching focus before confirming composition choice
            // this also fixes the issue where some browsers e.g. iOS Chrome
            // fires "change" instead of "input" on autocomplete.
            el.addEventListener('change', onCompositionEnd$1);
            /* istanbul ignore if */
            if (isIE9$1) {
              el.vmodel = true;
            }
          }
        }
      }
    });
  }

  var antInputDirective = {
    install: function install(Vue) {
      antInput(Vue);
    }
  };

  function antDecorator(Vue) {
    return Vue.directive('decorator', {});
  }

  var FormDecoratorDirective = {
    // just for tag
    install: function install(Vue) {
      antDecorator(Vue);
    }
  };

  function antPortal(Vue) {
    return Vue.directive('ant-portal', {
      inserted: function inserted(el, binding) {
        var value = binding.value;

        var parentNode = typeof value === 'function' ? value(el) : value;
        if (parentNode !== el.parentNode) {
          parentNode.appendChild(el);
        }
      },
      componentUpdated: function componentUpdated(el, binding) {
        var value = binding.value;

        var parentNode = typeof value === 'function' ? value(el) : value;
        if (parentNode !== el.parentNode) {
          parentNode.appendChild(el);
        }
      }
    });
  }

  var antDirective = {
    install: function install(Vue) {
      Vue.use(ref$1, { name: 'ant-ref' });
      antInput(Vue);
      antDecorator(Vue);
      antPortal(Vue);
    }
  };

  var base = {};
  var install = function install(Vue) {
    base.Vue = Vue;
    Vue.use(antDirective);
  };
  base.install = install;

  var EmptyProps = function EmptyProps() {
    return {
      prefixCls: VuePropTypes.string,
      image: VuePropTypes.any,
      description: VuePropTypes.any,
      imageStyle: VuePropTypes.object
    };
  };

  var Empty$1 = {
    name: 'AEmpty',
    props: _extends$1({}, EmptyProps()),
    methods: {
      renderEmpty: function renderEmpty(contentLocale) {
        var h = this.$createElement;
        var _$props = this.$props,
            customizePrefixCls = _$props.prefixCls,
            imageStyle = _$props.imageStyle;

        var prefixCls = ConfigConsumerProps.getPrefixCls('empty', customizePrefixCls);
        var image = getComponentFromProp(this, 'image') || h(DefaultEmptyImg);
        var description = getComponentFromProp(this, 'description');

        var des = typeof description !== 'undefined' ? description : contentLocale.description;
        var alt = typeof des === 'string' ? des : 'empty';
        var cls = _defineProperty({}, prefixCls, true);
        var imageNode = null;
        if (typeof image === 'string') {
          imageNode = h('img', {
            attrs: { alt: alt, src: image }
          });
        } else if ((typeof image === 'undefined' ? 'undefined' : _typeof(image)) === 'object' && image.PRESENTED_IMAGE_SIMPLE) {
          var Image = image;
          imageNode = h(Image);
          cls[prefixCls + '-normal'] = true;
        } else {
          imageNode = image;
        }
        return h(
          'div',
          babelHelperVueJsxMergeProps([{ 'class': cls }, { on: getListeners(this) }]),
          [h(
            'div',
            { 'class': prefixCls + '-image', style: imageStyle },
            [imageNode]
          ), des && h(
            'p',
            { 'class': prefixCls + '-description' },
            [des]
          ), this.$slots['default'] && h(
            'div',
            { 'class': prefixCls + '-footer' },
            [this.$slots['default']]
          )]
        );
      }
    },
    render: function render() {
      var h = arguments[0];

      return h(LocaleReceiver, {
        attrs: { componentName: 'Empty' },
        scopedSlots: { 'default': this.renderEmpty } });
    }
  };

  Empty$1.PRESENTED_IMAGE_DEFAULT = DefaultEmptyImg;
  Empty$1.PRESENTED_IMAGE_SIMPLE = SimpleEmptyImg;

  /* istanbul ignore next */
  Empty$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Empty$1.name, Empty$1);
  };

  var RenderEmpty = {
    functional: true,
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    props: {
      componentName: VuePropTypes.string
    },
    render: function render(createElement, context) {
      var h = arguments[0];
      var props = context.props,
          injections = context.injections;

      function renderHtml(componentName) {
        var getPrefixCls = injections.configProvider.getPrefixCls;
        var prefix = getPrefixCls('empty');
        switch (componentName) {
          case 'Table':
          case 'List':
            return h(Empty$1, {
              attrs: { image: Empty$1.PRESENTED_IMAGE_SIMPLE }
            });

          case 'Select':
          case 'TreeSelect':
          case 'Cascader':
          case 'Transfer':
          case 'Mentions':
            return h(Empty$1, {
              attrs: { image: Empty$1.PRESENTED_IMAGE_SIMPLE },
              'class': prefix + '-small' });

          default:
            return h(Empty$1);
        }
      }
      return renderHtml(props.componentName);
    }
  };

  function renderEmpty(h, componentName) {
    return h(RenderEmpty, {
      attrs: { componentName: componentName }
    });
  }

  var moment = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
       module.exports = factory() ;
  }(commonjsGlobal, (function () {
      var hookCallback;

      function hooks() {
          return hookCallback.apply(null, arguments);
      }

      // This is done to register the method called with moment()
      // without creating circular dependencies.
      function setHookCallback(callback) {
          hookCallback = callback;
      }

      function isArray(input) {
          return (
              input instanceof Array ||
              Object.prototype.toString.call(input) === '[object Array]'
          );
      }

      function isObject(input) {
          // IE8 will treat undefined and null as object if it wasn't for
          // input != null
          return (
              input != null &&
              Object.prototype.toString.call(input) === '[object Object]'
          );
      }

      function hasOwnProp(a, b) {
          return Object.prototype.hasOwnProperty.call(a, b);
      }

      function isObjectEmpty(obj) {
          if (Object.getOwnPropertyNames) {
              return Object.getOwnPropertyNames(obj).length === 0;
          } else {
              var k;
              for (k in obj) {
                  if (hasOwnProp(obj, k)) {
                      return false;
                  }
              }
              return true;
          }
      }

      function isUndefined(input) {
          return input === void 0;
      }

      function isNumber(input) {
          return (
              typeof input === 'number' ||
              Object.prototype.toString.call(input) === '[object Number]'
          );
      }

      function isDate(input) {
          return (
              input instanceof Date ||
              Object.prototype.toString.call(input) === '[object Date]'
          );
      }

      function map(arr, fn) {
          var res = [],
              i;
          for (i = 0; i < arr.length; ++i) {
              res.push(fn(arr[i], i));
          }
          return res;
      }

      function extend(a, b) {
          for (var i in b) {
              if (hasOwnProp(b, i)) {
                  a[i] = b[i];
              }
          }

          if (hasOwnProp(b, 'toString')) {
              a.toString = b.toString;
          }

          if (hasOwnProp(b, 'valueOf')) {
              a.valueOf = b.valueOf;
          }

          return a;
      }

      function createUTC(input, format, locale, strict) {
          return createLocalOrUTC(input, format, locale, strict, true).utc();
      }

      function defaultParsingFlags() {
          // We need to deep clone this object.
          return {
              empty: false,
              unusedTokens: [],
              unusedInput: [],
              overflow: -2,
              charsLeftOver: 0,
              nullInput: false,
              invalidEra: null,
              invalidMonth: null,
              invalidFormat: false,
              userInvalidated: false,
              iso: false,
              parsedDateParts: [],
              era: null,
              meridiem: null,
              rfc2822: false,
              weekdayMismatch: false,
          };
      }

      function getParsingFlags(m) {
          if (m._pf == null) {
              m._pf = defaultParsingFlags();
          }
          return m._pf;
      }

      var some;
      if (Array.prototype.some) {
          some = Array.prototype.some;
      } else {
          some = function (fun) {
              var t = Object(this),
                  len = t.length >>> 0,
                  i;

              for (i = 0; i < len; i++) {
                  if (i in t && fun.call(this, t[i], i, t)) {
                      return true;
                  }
              }

              return false;
          };
      }

      function isValid(m) {
          if (m._isValid == null) {
              var flags = getParsingFlags(m),
                  parsedParts = some.call(flags.parsedDateParts, function (i) {
                      return i != null;
                  }),
                  isNowValid =
                      !isNaN(m._d.getTime()) &&
                      flags.overflow < 0 &&
                      !flags.empty &&
                      !flags.invalidEra &&
                      !flags.invalidMonth &&
                      !flags.invalidWeekday &&
                      !flags.weekdayMismatch &&
                      !flags.nullInput &&
                      !flags.invalidFormat &&
                      !flags.userInvalidated &&
                      (!flags.meridiem || (flags.meridiem && parsedParts));

              if (m._strict) {
                  isNowValid =
                      isNowValid &&
                      flags.charsLeftOver === 0 &&
                      flags.unusedTokens.length === 0 &&
                      flags.bigHour === undefined;
              }

              if (Object.isFrozen == null || !Object.isFrozen(m)) {
                  m._isValid = isNowValid;
              } else {
                  return isNowValid;
              }
          }
          return m._isValid;
      }

      function createInvalid(flags) {
          var m = createUTC(NaN);
          if (flags != null) {
              extend(getParsingFlags(m), flags);
          } else {
              getParsingFlags(m).userInvalidated = true;
          }

          return m;
      }

      // Plugins that add properties should also add the key here (null value),
      // so we can properly clone ourselves.
      var momentProperties = (hooks.momentProperties = []),
          updateInProgress = false;

      function copyConfig(to, from) {
          var i, prop, val;

          if (!isUndefined(from._isAMomentObject)) {
              to._isAMomentObject = from._isAMomentObject;
          }
          if (!isUndefined(from._i)) {
              to._i = from._i;
          }
          if (!isUndefined(from._f)) {
              to._f = from._f;
          }
          if (!isUndefined(from._l)) {
              to._l = from._l;
          }
          if (!isUndefined(from._strict)) {
              to._strict = from._strict;
          }
          if (!isUndefined(from._tzm)) {
              to._tzm = from._tzm;
          }
          if (!isUndefined(from._isUTC)) {
              to._isUTC = from._isUTC;
          }
          if (!isUndefined(from._offset)) {
              to._offset = from._offset;
          }
          if (!isUndefined(from._pf)) {
              to._pf = getParsingFlags(from);
          }
          if (!isUndefined(from._locale)) {
              to._locale = from._locale;
          }

          if (momentProperties.length > 0) {
              for (i = 0; i < momentProperties.length; i++) {
                  prop = momentProperties[i];
                  val = from[prop];
                  if (!isUndefined(val)) {
                      to[prop] = val;
                  }
              }
          }

          return to;
      }

      // Moment prototype object
      function Moment(config) {
          copyConfig(this, config);
          this._d = new Date(config._d != null ? config._d.getTime() : NaN);
          if (!this.isValid()) {
              this._d = new Date(NaN);
          }
          // Prevent infinite loop in case updateOffset creates new moment
          // objects.
          if (updateInProgress === false) {
              updateInProgress = true;
              hooks.updateOffset(this);
              updateInProgress = false;
          }
      }

      function isMoment(obj) {
          return (
              obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
          );
      }

      function warn(msg) {
          if (
              hooks.suppressDeprecationWarnings === false &&
              typeof console !== 'undefined' &&
              console.warn
          ) {
              console.warn('Deprecation warning: ' + msg);
          }
      }

      function deprecate(msg, fn) {
          var firstTime = true;

          return extend(function () {
              if (hooks.deprecationHandler != null) {
                  hooks.deprecationHandler(null, msg);
              }
              if (firstTime) {
                  var args = [],
                      arg,
                      i,
                      key;
                  for (i = 0; i < arguments.length; i++) {
                      arg = '';
                      if (typeof arguments[i] === 'object') {
                          arg += '\n[' + i + '] ';
                          for (key in arguments[0]) {
                              if (hasOwnProp(arguments[0], key)) {
                                  arg += key + ': ' + arguments[0][key] + ', ';
                              }
                          }
                          arg = arg.slice(0, -2); // Remove trailing comma and space
                      } else {
                          arg = arguments[i];
                      }
                      args.push(arg);
                  }
                  warn(
                      msg +
                          '\nArguments: ' +
                          Array.prototype.slice.call(args).join('') +
                          '\n' +
                          new Error().stack
                  );
                  firstTime = false;
              }
              return fn.apply(this, arguments);
          }, fn);
      }

      var deprecations = {};

      function deprecateSimple(name, msg) {
          if (hooks.deprecationHandler != null) {
              hooks.deprecationHandler(name, msg);
          }
          if (!deprecations[name]) {
              warn(msg);
              deprecations[name] = true;
          }
      }

      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;

      function isFunction(input) {
          return (
              (typeof Function !== 'undefined' && input instanceof Function) ||
              Object.prototype.toString.call(input) === '[object Function]'
          );
      }

      function set(config) {
          var prop, i;
          for (i in config) {
              if (hasOwnProp(config, i)) {
                  prop = config[i];
                  if (isFunction(prop)) {
                      this[i] = prop;
                  } else {
                      this['_' + i] = prop;
                  }
              }
          }
          this._config = config;
          // Lenient ordinal parsing accepts just a number in addition to
          // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
          // TODO: Remove "ordinalParse" fallback in next major release.
          this._dayOfMonthOrdinalParseLenient = new RegExp(
              (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                  '|' +
                  /\d{1,2}/.source
          );
      }

      function mergeConfigs(parentConfig, childConfig) {
          var res = extend({}, parentConfig),
              prop;
          for (prop in childConfig) {
              if (hasOwnProp(childConfig, prop)) {
                  if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                      res[prop] = {};
                      extend(res[prop], parentConfig[prop]);
                      extend(res[prop], childConfig[prop]);
                  } else if (childConfig[prop] != null) {
                      res[prop] = childConfig[prop];
                  } else {
                      delete res[prop];
                  }
              }
          }
          for (prop in parentConfig) {
              if (
                  hasOwnProp(parentConfig, prop) &&
                  !hasOwnProp(childConfig, prop) &&
                  isObject(parentConfig[prop])
              ) {
                  // make sure changes to properties don't modify parent config
                  res[prop] = extend({}, res[prop]);
              }
          }
          return res;
      }

      function Locale(config) {
          if (config != null) {
              this.set(config);
          }
      }

      var keys;

      if (Object.keys) {
          keys = Object.keys;
      } else {
          keys = function (obj) {
              var i,
                  res = [];
              for (i in obj) {
                  if (hasOwnProp(obj, i)) {
                      res.push(i);
                  }
              }
              return res;
          };
      }

      var defaultCalendar = {
          sameDay: '[Today at] LT',
          nextDay: '[Tomorrow at] LT',
          nextWeek: 'dddd [at] LT',
          lastDay: '[Yesterday at] LT',
          lastWeek: '[Last] dddd [at] LT',
          sameElse: 'L',
      };

      function calendar(key, mom, now) {
          var output = this._calendar[key] || this._calendar['sameElse'];
          return isFunction(output) ? output.call(mom, now) : output;
      }

      function zeroFill(number, targetLength, forceSign) {
          var absNumber = '' + Math.abs(number),
              zerosToFill = targetLength - absNumber.length,
              sign = number >= 0;
          return (
              (sign ? (forceSign ? '+' : '') : '-') +
              Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
              absNumber
          );
      }

      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
          localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
          formatFunctions = {},
          formatTokenFunctions = {};

      // token:    'M'
      // padded:   ['MM', 2]
      // ordinal:  'Mo'
      // callback: function () { this.month() + 1 }
      function addFormatToken(token, padded, ordinal, callback) {
          var func = callback;
          if (typeof callback === 'string') {
              func = function () {
                  return this[callback]();
              };
          }
          if (token) {
              formatTokenFunctions[token] = func;
          }
          if (padded) {
              formatTokenFunctions[padded[0]] = function () {
                  return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
              };
          }
          if (ordinal) {
              formatTokenFunctions[ordinal] = function () {
                  return this.localeData().ordinal(
                      func.apply(this, arguments),
                      token
                  );
              };
          }
      }

      function removeFormattingTokens(input) {
          if (input.match(/\[[\s\S]/)) {
              return input.replace(/^\[|\]$/g, '');
          }
          return input.replace(/\\/g, '');
      }

      function makeFormatFunction(format) {
          var array = format.match(formattingTokens),
              i,
              length;

          for (i = 0, length = array.length; i < length; i++) {
              if (formatTokenFunctions[array[i]]) {
                  array[i] = formatTokenFunctions[array[i]];
              } else {
                  array[i] = removeFormattingTokens(array[i]);
              }
          }

          return function (mom) {
              var output = '',
                  i;
              for (i = 0; i < length; i++) {
                  output += isFunction(array[i])
                      ? array[i].call(mom, format)
                      : array[i];
              }
              return output;
          };
      }

      // format date using native date object
      function formatMoment(m, format) {
          if (!m.isValid()) {
              return m.localeData().invalidDate();
          }

          format = expandFormat(format, m.localeData());
          formatFunctions[format] =
              formatFunctions[format] || makeFormatFunction(format);

          return formatFunctions[format](m);
      }

      function expandFormat(format, locale) {
          var i = 5;

          function replaceLongDateFormatTokens(input) {
              return locale.longDateFormat(input) || input;
          }

          localFormattingTokens.lastIndex = 0;
          while (i >= 0 && localFormattingTokens.test(format)) {
              format = format.replace(
                  localFormattingTokens,
                  replaceLongDateFormatTokens
              );
              localFormattingTokens.lastIndex = 0;
              i -= 1;
          }

          return format;
      }

      var defaultLongDateFormat = {
          LTS: 'h:mm:ss A',
          LT: 'h:mm A',
          L: 'MM/DD/YYYY',
          LL: 'MMMM D, YYYY',
          LLL: 'MMMM D, YYYY h:mm A',
          LLLL: 'dddd, MMMM D, YYYY h:mm A',
      };

      function longDateFormat(key) {
          var format = this._longDateFormat[key],
              formatUpper = this._longDateFormat[key.toUpperCase()];

          if (format || !formatUpper) {
              return format;
          }

          this._longDateFormat[key] = formatUpper
              .match(formattingTokens)
              .map(function (tok) {
                  if (
                      tok === 'MMMM' ||
                      tok === 'MM' ||
                      tok === 'DD' ||
                      tok === 'dddd'
                  ) {
                      return tok.slice(1);
                  }
                  return tok;
              })
              .join('');

          return this._longDateFormat[key];
      }

      var defaultInvalidDate = 'Invalid date';

      function invalidDate() {
          return this._invalidDate;
      }

      var defaultOrdinal = '%d',
          defaultDayOfMonthOrdinalParse = /\d{1,2}/;

      function ordinal(number) {
          return this._ordinal.replace('%d', number);
      }

      var defaultRelativeTime = {
          future: 'in %s',
          past: '%s ago',
          s: 'a few seconds',
          ss: '%d seconds',
          m: 'a minute',
          mm: '%d minutes',
          h: 'an hour',
          hh: '%d hours',
          d: 'a day',
          dd: '%d days',
          w: 'a week',
          ww: '%d weeks',
          M: 'a month',
          MM: '%d months',
          y: 'a year',
          yy: '%d years',
      };

      function relativeTime(number, withoutSuffix, string, isFuture) {
          var output = this._relativeTime[string];
          return isFunction(output)
              ? output(number, withoutSuffix, string, isFuture)
              : output.replace(/%d/i, number);
      }

      function pastFuture(diff, output) {
          var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
          return isFunction(format) ? format(output) : format.replace(/%s/i, output);
      }

      var aliases = {};

      function addUnitAlias(unit, shorthand) {
          var lowerCase = unit.toLowerCase();
          aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
      }

      function normalizeUnits(units) {
          return typeof units === 'string'
              ? aliases[units] || aliases[units.toLowerCase()]
              : undefined;
      }

      function normalizeObjectUnits(inputObject) {
          var normalizedInput = {},
              normalizedProp,
              prop;

          for (prop in inputObject) {
              if (hasOwnProp(inputObject, prop)) {
                  normalizedProp = normalizeUnits(prop);
                  if (normalizedProp) {
                      normalizedInput[normalizedProp] = inputObject[prop];
                  }
              }
          }

          return normalizedInput;
      }

      var priorities = {};

      function addUnitPriority(unit, priority) {
          priorities[unit] = priority;
      }

      function getPrioritizedUnits(unitsObj) {
          var units = [],
              u;
          for (u in unitsObj) {
              if (hasOwnProp(unitsObj, u)) {
                  units.push({ unit: u, priority: priorities[u] });
              }
          }
          units.sort(function (a, b) {
              return a.priority - b.priority;
          });
          return units;
      }

      function isLeapYear(year) {
          return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
      }

      function absFloor(number) {
          if (number < 0) {
              // -0 -> 0
              return Math.ceil(number) || 0;
          } else {
              return Math.floor(number);
          }
      }

      function toInt(argumentForCoercion) {
          var coercedNumber = +argumentForCoercion,
              value = 0;

          if (coercedNumber !== 0 && isFinite(coercedNumber)) {
              value = absFloor(coercedNumber);
          }

          return value;
      }

      function makeGetSet(unit, keepTime) {
          return function (value) {
              if (value != null) {
                  set$1(this, unit, value);
                  hooks.updateOffset(this, keepTime);
                  return this;
              } else {
                  return get(this, unit);
              }
          };
      }

      function get(mom, unit) {
          return mom.isValid()
              ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
              : NaN;
      }

      function set$1(mom, unit, value) {
          if (mom.isValid() && !isNaN(value)) {
              if (
                  unit === 'FullYear' &&
                  isLeapYear(mom.year()) &&
                  mom.month() === 1 &&
                  mom.date() === 29
              ) {
                  value = toInt(value);
                  mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                      value,
                      mom.month(),
                      daysInMonth(value, mom.month())
                  );
              } else {
                  mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
              }
          }
      }

      // MOMENTS

      function stringGet(units) {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
              return this[units]();
          }
          return this;
      }

      function stringSet(units, value) {
          if (typeof units === 'object') {
              units = normalizeObjectUnits(units);
              var prioritized = getPrioritizedUnits(units),
                  i;
              for (i = 0; i < prioritized.length; i++) {
                  this[prioritized[i].unit](units[prioritized[i].unit]);
              }
          } else {
              units = normalizeUnits(units);
              if (isFunction(this[units])) {
                  return this[units](value);
              }
          }
          return this;
      }

      var match1 = /\d/, //       0 - 9
          match2 = /\d\d/, //      00 - 99
          match3 = /\d{3}/, //     000 - 999
          match4 = /\d{4}/, //    0000 - 9999
          match6 = /[+-]?\d{6}/, // -999999 - 999999
          match1to2 = /\d\d?/, //       0 - 99
          match3to4 = /\d\d\d\d?/, //     999 - 9999
          match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
          match1to3 = /\d{1,3}/, //       0 - 999
          match1to4 = /\d{1,4}/, //       0 - 9999
          match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
          matchUnsigned = /\d+/, //       0 - inf
          matchSigned = /[+-]?\d+/, //    -inf - inf
          matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
          matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
          matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
          // any word (or two) characters or numbers including two/three word month in arabic.
          // includes scottish gaelic two word and hyphenated months
          matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
          regexes;

      regexes = {};

      function addRegexToken(token, regex, strictRegex) {
          regexes[token] = isFunction(regex)
              ? regex
              : function (isStrict, localeData) {
                    return isStrict && strictRegex ? strictRegex : regex;
                };
      }

      function getParseRegexForToken(token, config) {
          if (!hasOwnProp(regexes, token)) {
              return new RegExp(unescapeFormat(token));
          }

          return regexes[token](config._strict, config._locale);
      }

      // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
      function unescapeFormat(s) {
          return regexEscape(
              s
                  .replace('\\', '')
                  .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
                      matched,
                      p1,
                      p2,
                      p3,
                      p4
                  ) {
                      return p1 || p2 || p3 || p4;
                  })
          );
      }

      function regexEscape(s) {
          return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      }

      var tokens = {};

      function addParseToken(token, callback) {
          var i,
              func = callback;
          if (typeof token === 'string') {
              token = [token];
          }
          if (isNumber(callback)) {
              func = function (input, array) {
                  array[callback] = toInt(input);
              };
          }
          for (i = 0; i < token.length; i++) {
              tokens[token[i]] = func;
          }
      }

      function addWeekParseToken(token, callback) {
          addParseToken(token, function (input, array, config, token) {
              config._w = config._w || {};
              callback(input, config._w, config, token);
          });
      }

      function addTimeToArrayFromToken(token, input, config) {
          if (input != null && hasOwnProp(tokens, token)) {
              tokens[token](input, config._a, config, token);
          }
      }

      var YEAR = 0,
          MONTH = 1,
          DATE = 2,
          HOUR = 3,
          MINUTE = 4,
          SECOND = 5,
          MILLISECOND = 6,
          WEEK = 7,
          WEEKDAY = 8;

      function mod(n, x) {
          return ((n % x) + x) % x;
      }

      var indexOf;

      if (Array.prototype.indexOf) {
          indexOf = Array.prototype.indexOf;
      } else {
          indexOf = function (o) {
              // I know
              var i;
              for (i = 0; i < this.length; ++i) {
                  if (this[i] === o) {
                      return i;
                  }
              }
              return -1;
          };
      }

      function daysInMonth(year, month) {
          if (isNaN(year) || isNaN(month)) {
              return NaN;
          }
          var modMonth = mod(month, 12);
          year += (month - modMonth) / 12;
          return modMonth === 1
              ? isLeapYear(year)
                  ? 29
                  : 28
              : 31 - ((modMonth % 7) % 2);
      }

      // FORMATTING

      addFormatToken('M', ['MM', 2], 'Mo', function () {
          return this.month() + 1;
      });

      addFormatToken('MMM', 0, 0, function (format) {
          return this.localeData().monthsShort(this, format);
      });

      addFormatToken('MMMM', 0, 0, function (format) {
          return this.localeData().months(this, format);
      });

      // ALIASES

      addUnitAlias('month', 'M');

      // PRIORITY

      addUnitPriority('month', 8);

      // PARSING

      addRegexToken('M', match1to2);
      addRegexToken('MM', match1to2, match2);
      addRegexToken('MMM', function (isStrict, locale) {
          return locale.monthsShortRegex(isStrict);
      });
      addRegexToken('MMMM', function (isStrict, locale) {
          return locale.monthsRegex(isStrict);
      });

      addParseToken(['M', 'MM'], function (input, array) {
          array[MONTH] = toInt(input) - 1;
      });

      addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
          var month = config._locale.monthsParse(input, token, config._strict);
          // if we didn't find a month name, mark the date as invalid.
          if (month != null) {
              array[MONTH] = month;
          } else {
              getParsingFlags(config).invalidMonth = input;
          }
      });

      // LOCALES

      var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
              '_'
          ),
          defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
              '_'
          ),
          MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
          defaultMonthsShortRegex = matchWord,
          defaultMonthsRegex = matchWord;

      function localeMonths(m, format) {
          if (!m) {
              return isArray(this._months)
                  ? this._months
                  : this._months['standalone'];
          }
          return isArray(this._months)
              ? this._months[m.month()]
              : this._months[
                    (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                        ? 'format'
                        : 'standalone'
                ][m.month()];
      }

      function localeMonthsShort(m, format) {
          if (!m) {
              return isArray(this._monthsShort)
                  ? this._monthsShort
                  : this._monthsShort['standalone'];
          }
          return isArray(this._monthsShort)
              ? this._monthsShort[m.month()]
              : this._monthsShort[
                    MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
                ][m.month()];
      }

      function handleStrictParse(monthName, format, strict) {
          var i,
              ii,
              mom,
              llc = monthName.toLocaleLowerCase();
          if (!this._monthsParse) {
              // this is not used
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
              for (i = 0; i < 12; ++i) {
                  mom = createUTC([2000, i]);
                  this._shortMonthsParse[i] = this.monthsShort(
                      mom,
                      ''
                  ).toLocaleLowerCase();
                  this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
              }
          }

          if (strict) {
              if (format === 'MMM') {
                  ii = indexOf.call(this._shortMonthsParse, llc);
                  return ii !== -1 ? ii : null;
              } else {
                  ii = indexOf.call(this._longMonthsParse, llc);
                  return ii !== -1 ? ii : null;
              }
          } else {
              if (format === 'MMM') {
                  ii = indexOf.call(this._shortMonthsParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._longMonthsParse, llc);
                  return ii !== -1 ? ii : null;
              } else {
                  ii = indexOf.call(this._longMonthsParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._shortMonthsParse, llc);
                  return ii !== -1 ? ii : null;
              }
          }
      }

      function localeMonthsParse(monthName, format, strict) {
          var i, mom, regex;

          if (this._monthsParseExact) {
              return handleStrictParse.call(this, monthName, format, strict);
          }

          if (!this._monthsParse) {
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
          }

          // TODO: add sorting
          // Sorting makes sure if one month (or abbr) is a prefix of another
          // see sorting in computeMonthsParse
          for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, i]);
              if (strict && !this._longMonthsParse[i]) {
                  this._longMonthsParse[i] = new RegExp(
                      '^' + this.months(mom, '').replace('.', '') + '$',
                      'i'
                  );
                  this._shortMonthsParse[i] = new RegExp(
                      '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                      'i'
                  );
              }
              if (!strict && !this._monthsParse[i]) {
                  regex =
                      '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                  this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
              }
              // test the regex
              if (
                  strict &&
                  format === 'MMMM' &&
                  this._longMonthsParse[i].test(monthName)
              ) {
                  return i;
              } else if (
                  strict &&
                  format === 'MMM' &&
                  this._shortMonthsParse[i].test(monthName)
              ) {
                  return i;
              } else if (!strict && this._monthsParse[i].test(monthName)) {
                  return i;
              }
          }
      }

      // MOMENTS

      function setMonth(mom, value) {
          var dayOfMonth;

          if (!mom.isValid()) {
              // No op
              return mom;
          }

          if (typeof value === 'string') {
              if (/^\d+$/.test(value)) {
                  value = toInt(value);
              } else {
                  value = mom.localeData().monthsParse(value);
                  // TODO: Another silent failure?
                  if (!isNumber(value)) {
                      return mom;
                  }
              }
          }

          dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
          mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
          return mom;
      }

      function getSetMonth(value) {
          if (value != null) {
              setMonth(this, value);
              hooks.updateOffset(this, true);
              return this;
          } else {
              return get(this, 'Month');
          }
      }

      function getDaysInMonth() {
          return daysInMonth(this.year(), this.month());
      }

      function monthsShortRegex(isStrict) {
          if (this._monthsParseExact) {
              if (!hasOwnProp(this, '_monthsRegex')) {
                  computeMonthsParse.call(this);
              }
              if (isStrict) {
                  return this._monthsShortStrictRegex;
              } else {
                  return this._monthsShortRegex;
              }
          } else {
              if (!hasOwnProp(this, '_monthsShortRegex')) {
                  this._monthsShortRegex = defaultMonthsShortRegex;
              }
              return this._monthsShortStrictRegex && isStrict
                  ? this._monthsShortStrictRegex
                  : this._monthsShortRegex;
          }
      }

      function monthsRegex(isStrict) {
          if (this._monthsParseExact) {
              if (!hasOwnProp(this, '_monthsRegex')) {
                  computeMonthsParse.call(this);
              }
              if (isStrict) {
                  return this._monthsStrictRegex;
              } else {
                  return this._monthsRegex;
              }
          } else {
              if (!hasOwnProp(this, '_monthsRegex')) {
                  this._monthsRegex = defaultMonthsRegex;
              }
              return this._monthsStrictRegex && isStrict
                  ? this._monthsStrictRegex
                  : this._monthsRegex;
          }
      }

      function computeMonthsParse() {
          function cmpLenRev(a, b) {
              return b.length - a.length;
          }

          var shortPieces = [],
              longPieces = [],
              mixedPieces = [],
              i,
              mom;
          for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, i]);
              shortPieces.push(this.monthsShort(mom, ''));
              longPieces.push(this.months(mom, ''));
              mixedPieces.push(this.months(mom, ''));
              mixedPieces.push(this.monthsShort(mom, ''));
          }
          // Sorting makes sure if one month (or abbr) is a prefix of another it
          // will match the longer piece.
          shortPieces.sort(cmpLenRev);
          longPieces.sort(cmpLenRev);
          mixedPieces.sort(cmpLenRev);
          for (i = 0; i < 12; i++) {
              shortPieces[i] = regexEscape(shortPieces[i]);
              longPieces[i] = regexEscape(longPieces[i]);
          }
          for (i = 0; i < 24; i++) {
              mixedPieces[i] = regexEscape(mixedPieces[i]);
          }

          this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
          this._monthsShortRegex = this._monthsRegex;
          this._monthsStrictRegex = new RegExp(
              '^(' + longPieces.join('|') + ')',
              'i'
          );
          this._monthsShortStrictRegex = new RegExp(
              '^(' + shortPieces.join('|') + ')',
              'i'
          );
      }

      // FORMATTING

      addFormatToken('Y', 0, 0, function () {
          var y = this.year();
          return y <= 9999 ? zeroFill(y, 4) : '+' + y;
      });

      addFormatToken(0, ['YY', 2], 0, function () {
          return this.year() % 100;
      });

      addFormatToken(0, ['YYYY', 4], 0, 'year');
      addFormatToken(0, ['YYYYY', 5], 0, 'year');
      addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

      // ALIASES

      addUnitAlias('year', 'y');

      // PRIORITIES

      addUnitPriority('year', 1);

      // PARSING

      addRegexToken('Y', matchSigned);
      addRegexToken('YY', match1to2, match2);
      addRegexToken('YYYY', match1to4, match4);
      addRegexToken('YYYYY', match1to6, match6);
      addRegexToken('YYYYYY', match1to6, match6);

      addParseToken(['YYYYY', 'YYYYYY'], YEAR);
      addParseToken('YYYY', function (input, array) {
          array[YEAR] =
              input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken('YY', function (input, array) {
          array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken('Y', function (input, array) {
          array[YEAR] = parseInt(input, 10);
      });

      // HELPERS

      function daysInYear(year) {
          return isLeapYear(year) ? 366 : 365;
      }

      // HOOKS

      hooks.parseTwoDigitYear = function (input) {
          return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
      };

      // MOMENTS

      var getSetYear = makeGetSet('FullYear', true);

      function getIsLeapYear() {
          return isLeapYear(this.year());
      }

      function createDate(y, m, d, h, M, s, ms) {
          // can't just apply() to create a date:
          // https://stackoverflow.com/q/181348
          var date;
          // the date constructor remaps years 0-99 to 1900-1999
          if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              date = new Date(y + 400, m, d, h, M, s, ms);
              if (isFinite(date.getFullYear())) {
                  date.setFullYear(y);
              }
          } else {
              date = new Date(y, m, d, h, M, s, ms);
          }

          return date;
      }

      function createUTCDate(y) {
          var date, args;
          // the Date.UTC function remaps years 0-99 to 1900-1999
          if (y < 100 && y >= 0) {
              args = Array.prototype.slice.call(arguments);
              // preserve leap years using a full 400 year cycle, then reset
              args[0] = y + 400;
              date = new Date(Date.UTC.apply(null, args));
              if (isFinite(date.getUTCFullYear())) {
                  date.setUTCFullYear(y);
              }
          } else {
              date = new Date(Date.UTC.apply(null, arguments));
          }

          return date;
      }

      // start-of-first-week - start-of-year
      function firstWeekOffset(year, dow, doy) {
          var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
              fwd = 7 + dow - doy,
              // first-week day local weekday -- which local weekday is fwd
              fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

          return -fwdlw + fwd - 1;
      }

      // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
          var localWeekday = (7 + weekday - dow) % 7,
              weekOffset = firstWeekOffset(year, dow, doy),
              dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
              resYear,
              resDayOfYear;

          if (dayOfYear <= 0) {
              resYear = year - 1;
              resDayOfYear = daysInYear(resYear) + dayOfYear;
          } else if (dayOfYear > daysInYear(year)) {
              resYear = year + 1;
              resDayOfYear = dayOfYear - daysInYear(year);
          } else {
              resYear = year;
              resDayOfYear = dayOfYear;
          }

          return {
              year: resYear,
              dayOfYear: resDayOfYear,
          };
      }

      function weekOfYear(mom, dow, doy) {
          var weekOffset = firstWeekOffset(mom.year(), dow, doy),
              week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
              resWeek,
              resYear;

          if (week < 1) {
              resYear = mom.year() - 1;
              resWeek = week + weeksInYear(resYear, dow, doy);
          } else if (week > weeksInYear(mom.year(), dow, doy)) {
              resWeek = week - weeksInYear(mom.year(), dow, doy);
              resYear = mom.year() + 1;
          } else {
              resYear = mom.year();
              resWeek = week;
          }

          return {
              week: resWeek,
              year: resYear,
          };
      }

      function weeksInYear(year, dow, doy) {
          var weekOffset = firstWeekOffset(year, dow, doy),
              weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
          return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }

      // FORMATTING

      addFormatToken('w', ['ww', 2], 'wo', 'week');
      addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

      // ALIASES

      addUnitAlias('week', 'w');
      addUnitAlias('isoWeek', 'W');

      // PRIORITIES

      addUnitPriority('week', 5);
      addUnitPriority('isoWeek', 5);

      // PARSING

      addRegexToken('w', match1to2);
      addRegexToken('ww', match1to2, match2);
      addRegexToken('W', match1to2);
      addRegexToken('WW', match1to2, match2);

      addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
          input,
          week,
          config,
          token
      ) {
          week[token.substr(0, 1)] = toInt(input);
      });

      // HELPERS

      // LOCALES

      function localeWeek(mom) {
          return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }

      var defaultLocaleWeek = {
          dow: 0, // Sunday is the first day of the week.
          doy: 6, // The week that contains Jan 6th is the first week of the year.
      };

      function localeFirstDayOfWeek() {
          return this._week.dow;
      }

      function localeFirstDayOfYear() {
          return this._week.doy;
      }

      // MOMENTS

      function getSetWeek(input) {
          var week = this.localeData().week(this);
          return input == null ? week : this.add((input - week) * 7, 'd');
      }

      function getSetISOWeek(input) {
          var week = weekOfYear(this, 1, 4).week;
          return input == null ? week : this.add((input - week) * 7, 'd');
      }

      // FORMATTING

      addFormatToken('d', 0, 'do', 'day');

      addFormatToken('dd', 0, 0, function (format) {
          return this.localeData().weekdaysMin(this, format);
      });

      addFormatToken('ddd', 0, 0, function (format) {
          return this.localeData().weekdaysShort(this, format);
      });

      addFormatToken('dddd', 0, 0, function (format) {
          return this.localeData().weekdays(this, format);
      });

      addFormatToken('e', 0, 0, 'weekday');
      addFormatToken('E', 0, 0, 'isoWeekday');

      // ALIASES

      addUnitAlias('day', 'd');
      addUnitAlias('weekday', 'e');
      addUnitAlias('isoWeekday', 'E');

      // PRIORITY
      addUnitPriority('day', 11);
      addUnitPriority('weekday', 11);
      addUnitPriority('isoWeekday', 11);

      // PARSING

      addRegexToken('d', match1to2);
      addRegexToken('e', match1to2);
      addRegexToken('E', match1to2);
      addRegexToken('dd', function (isStrict, locale) {
          return locale.weekdaysMinRegex(isStrict);
      });
      addRegexToken('ddd', function (isStrict, locale) {
          return locale.weekdaysShortRegex(isStrict);
      });
      addRegexToken('dddd', function (isStrict, locale) {
          return locale.weekdaysRegex(isStrict);
      });

      addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
          var weekday = config._locale.weekdaysParse(input, token, config._strict);
          // if we didn't get a weekday name, mark the date as invalid
          if (weekday != null) {
              week.d = weekday;
          } else {
              getParsingFlags(config).invalidWeekday = input;
          }
      });

      addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
          week[token] = toInt(input);
      });

      // HELPERS

      function parseWeekday(input, locale) {
          if (typeof input !== 'string') {
              return input;
          }

          if (!isNaN(input)) {
              return parseInt(input, 10);
          }

          input = locale.weekdaysParse(input);
          if (typeof input === 'number') {
              return input;
          }

          return null;
      }

      function parseIsoWeekday(input, locale) {
          if (typeof input === 'string') {
              return locale.weekdaysParse(input) % 7 || 7;
          }
          return isNaN(input) ? null : input;
      }

      // LOCALES
      function shiftWeekdays(ws, n) {
          return ws.slice(n, 7).concat(ws.slice(0, n));
      }

      var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
              '_'
          ),
          defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
          defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
          defaultWeekdaysRegex = matchWord,
          defaultWeekdaysShortRegex = matchWord,
          defaultWeekdaysMinRegex = matchWord;

      function localeWeekdays(m, format) {
          var weekdays = isArray(this._weekdays)
              ? this._weekdays
              : this._weekdays[
                    m && m !== true && this._weekdays.isFormat.test(format)
                        ? 'format'
                        : 'standalone'
                ];
          return m === true
              ? shiftWeekdays(weekdays, this._week.dow)
              : m
              ? weekdays[m.day()]
              : weekdays;
      }

      function localeWeekdaysShort(m) {
          return m === true
              ? shiftWeekdays(this._weekdaysShort, this._week.dow)
              : m
              ? this._weekdaysShort[m.day()]
              : this._weekdaysShort;
      }

      function localeWeekdaysMin(m) {
          return m === true
              ? shiftWeekdays(this._weekdaysMin, this._week.dow)
              : m
              ? this._weekdaysMin[m.day()]
              : this._weekdaysMin;
      }

      function handleStrictParse$1(weekdayName, format, strict) {
          var i,
              ii,
              mom,
              llc = weekdayName.toLocaleLowerCase();
          if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._minWeekdaysParse = [];

              for (i = 0; i < 7; ++i) {
                  mom = createUTC([2000, 1]).day(i);
                  this._minWeekdaysParse[i] = this.weekdaysMin(
                      mom,
                      ''
                  ).toLocaleLowerCase();
                  this._shortWeekdaysParse[i] = this.weekdaysShort(
                      mom,
                      ''
                  ).toLocaleLowerCase();
                  this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
              }
          }

          if (strict) {
              if (format === 'dddd') {
                  ii = indexOf.call(this._weekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              } else if (format === 'ddd') {
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              } else {
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              }
          } else {
              if (format === 'dddd') {
                  ii = indexOf.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              } else if (format === 'ddd') {
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              } else {
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              }
          }
      }

      function localeWeekdaysParse(weekdayName, format, strict) {
          var i, mom, regex;

          if (this._weekdaysParseExact) {
              return handleStrictParse$1.call(this, weekdayName, format, strict);
          }

          if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._minWeekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._fullWeekdaysParse = [];
          }

          for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already

              mom = createUTC([2000, 1]).day(i);
              if (strict && !this._fullWeekdaysParse[i]) {
                  this._fullWeekdaysParse[i] = new RegExp(
                      '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                      'i'
                  );
                  this._shortWeekdaysParse[i] = new RegExp(
                      '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                      'i'
                  );
                  this._minWeekdaysParse[i] = new RegExp(
                      '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                      'i'
                  );
              }
              if (!this._weekdaysParse[i]) {
                  regex =
                      '^' +
                      this.weekdays(mom, '') +
                      '|^' +
                      this.weekdaysShort(mom, '') +
                      '|^' +
                      this.weekdaysMin(mom, '');
                  this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
              }
              // test the regex
              if (
                  strict &&
                  format === 'dddd' &&
                  this._fullWeekdaysParse[i].test(weekdayName)
              ) {
                  return i;
              } else if (
                  strict &&
                  format === 'ddd' &&
                  this._shortWeekdaysParse[i].test(weekdayName)
              ) {
                  return i;
              } else if (
                  strict &&
                  format === 'dd' &&
                  this._minWeekdaysParse[i].test(weekdayName)
              ) {
                  return i;
              } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                  return i;
              }
          }
      }

      // MOMENTS

      function getSetDayOfWeek(input) {
          if (!this.isValid()) {
              return input != null ? this : NaN;
          }
          var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
          if (input != null) {
              input = parseWeekday(input, this.localeData());
              return this.add(input - day, 'd');
          } else {
              return day;
          }
      }

      function getSetLocaleDayOfWeek(input) {
          if (!this.isValid()) {
              return input != null ? this : NaN;
          }
          var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
          return input == null ? weekday : this.add(input - weekday, 'd');
      }

      function getSetISODayOfWeek(input) {
          if (!this.isValid()) {
              return input != null ? this : NaN;
          }

          // behaves the same as moment#day except
          // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
          // as a setter, sunday should belong to the previous week.

          if (input != null) {
              var weekday = parseIsoWeekday(input, this.localeData());
              return this.day(this.day() % 7 ? weekday : weekday - 7);
          } else {
              return this.day() || 7;
          }
      }

      function weekdaysRegex(isStrict) {
          if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                  computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                  return this._weekdaysStrictRegex;
              } else {
                  return this._weekdaysRegex;
              }
          } else {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                  this._weekdaysRegex = defaultWeekdaysRegex;
              }
              return this._weekdaysStrictRegex && isStrict
                  ? this._weekdaysStrictRegex
                  : this._weekdaysRegex;
          }
      }

      function weekdaysShortRegex(isStrict) {
          if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                  computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                  return this._weekdaysShortStrictRegex;
              } else {
                  return this._weekdaysShortRegex;
              }
          } else {
              if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                  this._weekdaysShortRegex = defaultWeekdaysShortRegex;
              }
              return this._weekdaysShortStrictRegex && isStrict
                  ? this._weekdaysShortStrictRegex
                  : this._weekdaysShortRegex;
          }
      }

      function weekdaysMinRegex(isStrict) {
          if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                  computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                  return this._weekdaysMinStrictRegex;
              } else {
                  return this._weekdaysMinRegex;
              }
          } else {
              if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                  this._weekdaysMinRegex = defaultWeekdaysMinRegex;
              }
              return this._weekdaysMinStrictRegex && isStrict
                  ? this._weekdaysMinStrictRegex
                  : this._weekdaysMinRegex;
          }
      }

      function computeWeekdaysParse() {
          function cmpLenRev(a, b) {
              return b.length - a.length;
          }

          var minPieces = [],
              shortPieces = [],
              longPieces = [],
              mixedPieces = [],
              i,
              mom,
              minp,
              shortp,
              longp;
          for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, 1]).day(i);
              minp = regexEscape(this.weekdaysMin(mom, ''));
              shortp = regexEscape(this.weekdaysShort(mom, ''));
              longp = regexEscape(this.weekdays(mom, ''));
              minPieces.push(minp);
              shortPieces.push(shortp);
              longPieces.push(longp);
              mixedPieces.push(minp);
              mixedPieces.push(shortp);
              mixedPieces.push(longp);
          }
          // Sorting makes sure if one weekday (or abbr) is a prefix of another it
          // will match the longer piece.
          minPieces.sort(cmpLenRev);
          shortPieces.sort(cmpLenRev);
          longPieces.sort(cmpLenRev);
          mixedPieces.sort(cmpLenRev);

          this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
          this._weekdaysShortRegex = this._weekdaysRegex;
          this._weekdaysMinRegex = this._weekdaysRegex;

          this._weekdaysStrictRegex = new RegExp(
              '^(' + longPieces.join('|') + ')',
              'i'
          );
          this._weekdaysShortStrictRegex = new RegExp(
              '^(' + shortPieces.join('|') + ')',
              'i'
          );
          this._weekdaysMinStrictRegex = new RegExp(
              '^(' + minPieces.join('|') + ')',
              'i'
          );
      }

      // FORMATTING

      function hFormat() {
          return this.hours() % 12 || 12;
      }

      function kFormat() {
          return this.hours() || 24;
      }

      addFormatToken('H', ['HH', 2], 0, 'hour');
      addFormatToken('h', ['hh', 2], 0, hFormat);
      addFormatToken('k', ['kk', 2], 0, kFormat);

      addFormatToken('hmm', 0, 0, function () {
          return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });

      addFormatToken('hmmss', 0, 0, function () {
          return (
              '' +
              hFormat.apply(this) +
              zeroFill(this.minutes(), 2) +
              zeroFill(this.seconds(), 2)
          );
      });

      addFormatToken('Hmm', 0, 0, function () {
          return '' + this.hours() + zeroFill(this.minutes(), 2);
      });

      addFormatToken('Hmmss', 0, 0, function () {
          return (
              '' +
              this.hours() +
              zeroFill(this.minutes(), 2) +
              zeroFill(this.seconds(), 2)
          );
      });

      function meridiem(token, lowercase) {
          addFormatToken(token, 0, 0, function () {
              return this.localeData().meridiem(
                  this.hours(),
                  this.minutes(),
                  lowercase
              );
          });
      }

      meridiem('a', true);
      meridiem('A', false);

      // ALIASES

      addUnitAlias('hour', 'h');

      // PRIORITY
      addUnitPriority('hour', 13);

      // PARSING

      function matchMeridiem(isStrict, locale) {
          return locale._meridiemParse;
      }

      addRegexToken('a', matchMeridiem);
      addRegexToken('A', matchMeridiem);
      addRegexToken('H', match1to2);
      addRegexToken('h', match1to2);
      addRegexToken('k', match1to2);
      addRegexToken('HH', match1to2, match2);
      addRegexToken('hh', match1to2, match2);
      addRegexToken('kk', match1to2, match2);

      addRegexToken('hmm', match3to4);
      addRegexToken('hmmss', match5to6);
      addRegexToken('Hmm', match3to4);
      addRegexToken('Hmmss', match5to6);

      addParseToken(['H', 'HH'], HOUR);
      addParseToken(['k', 'kk'], function (input, array, config) {
          var kInput = toInt(input);
          array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(['a', 'A'], function (input, array, config) {
          config._isPm = config._locale.isPM(input);
          config._meridiem = input;
      });
      addParseToken(['h', 'hh'], function (input, array, config) {
          array[HOUR] = toInt(input);
          getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmm', function (input, array, config) {
          var pos = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos));
          array[MINUTE] = toInt(input.substr(pos));
          getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmmss', function (input, array, config) {
          var pos1 = input.length - 4,
              pos2 = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos1));
          array[MINUTE] = toInt(input.substr(pos1, 2));
          array[SECOND] = toInt(input.substr(pos2));
          getParsingFlags(config).bigHour = true;
      });
      addParseToken('Hmm', function (input, array, config) {
          var pos = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos));
          array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken('Hmmss', function (input, array, config) {
          var pos1 = input.length - 4,
              pos2 = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos1));
          array[MINUTE] = toInt(input.substr(pos1, 2));
          array[SECOND] = toInt(input.substr(pos2));
      });

      // LOCALES

      function localeIsPM(input) {
          // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
          // Using charAt should be more compatible.
          return (input + '').toLowerCase().charAt(0) === 'p';
      }

      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
          // Setting the hour should keep the time, because the user explicitly
          // specified which hour they want. So trying to maintain the same hour (in
          // a new timezone) makes sense. Adding/subtracting hours does not follow
          // this rule.
          getSetHour = makeGetSet('Hours', true);

      function localeMeridiem(hours, minutes, isLower) {
          if (hours > 11) {
              return isLower ? 'pm' : 'PM';
          } else {
              return isLower ? 'am' : 'AM';
          }
      }

      var baseConfig = {
          calendar: defaultCalendar,
          longDateFormat: defaultLongDateFormat,
          invalidDate: defaultInvalidDate,
          ordinal: defaultOrdinal,
          dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
          relativeTime: defaultRelativeTime,

          months: defaultLocaleMonths,
          monthsShort: defaultLocaleMonthsShort,

          week: defaultLocaleWeek,

          weekdays: defaultLocaleWeekdays,
          weekdaysMin: defaultLocaleWeekdaysMin,
          weekdaysShort: defaultLocaleWeekdaysShort,

          meridiemParse: defaultLocaleMeridiemParse,
      };

      // internal storage for locale config files
      var locales = {},
          localeFamilies = {},
          globalLocale;

      function commonPrefix(arr1, arr2) {
          var i,
              minl = Math.min(arr1.length, arr2.length);
          for (i = 0; i < minl; i += 1) {
              if (arr1[i] !== arr2[i]) {
                  return i;
              }
          }
          return minl;
      }

      function normalizeLocale(key) {
          return key ? key.toLowerCase().replace('_', '-') : key;
      }

      // pick the locale from the array
      // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
      // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
      function chooseLocale(names) {
          var i = 0,
              j,
              next,
              locale,
              split;

          while (i < names.length) {
              split = normalizeLocale(names[i]).split('-');
              j = split.length;
              next = normalizeLocale(names[i + 1]);
              next = next ? next.split('-') : null;
              while (j > 0) {
                  locale = loadLocale(split.slice(0, j).join('-'));
                  if (locale) {
                      return locale;
                  }
                  if (
                      next &&
                      next.length >= j &&
                      commonPrefix(split, next) >= j - 1
                  ) {
                      //the next array item is better than a shallower substring of this one
                      break;
                  }
                  j--;
              }
              i++;
          }
          return globalLocale;
      }

      function loadLocale(name) {
          var oldLocale = null,
              aliasedRequire;
          // TODO: Find a better way to register and load all the locales in Node
          if (
              locales[name] === undefined &&
              'object' !== 'undefined' &&
              module &&
              module.exports
          ) {
              try {
                  oldLocale = globalLocale._abbr;
                  aliasedRequire = commonjsRequire;
                  aliasedRequire('./locale/' + name);
                  getSetGlobalLocale(oldLocale);
              } catch (e) {
                  // mark as not found to avoid repeating expensive file require call causing high CPU
                  // when trying to find en-US, en_US, en-us for every format call
                  locales[name] = null; // null means not found
              }
          }
          return locales[name];
      }

      // This function will load locale and then set the global locale.  If
      // no arguments are passed in, it will simply return the current global
      // locale key.
      function getSetGlobalLocale(key, values) {
          var data;
          if (key) {
              if (isUndefined(values)) {
                  data = getLocale(key);
              } else {
                  data = defineLocale(key, values);
              }

              if (data) {
                  // moment.duration._locale = moment._locale = data;
                  globalLocale = data;
              } else {
                  if (typeof console !== 'undefined' && console.warn) {
                      //warn user if arguments are passed but the locale could not be set
                      console.warn(
                          'Locale ' + key + ' not found. Did you forget to load it?'
                      );
                  }
              }
          }

          return globalLocale._abbr;
      }

      function defineLocale(name, config) {
          if (config !== null) {
              var locale,
                  parentConfig = baseConfig;
              config.abbr = name;
              if (locales[name] != null) {
                  deprecateSimple(
                      'defineLocaleOverride',
                      'use moment.updateLocale(localeName, config) to change ' +
                          'an existing locale. moment.defineLocale(localeName, ' +
                          'config) should only be used for creating a new locale ' +
                          'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                  );
                  parentConfig = locales[name]._config;
              } else if (config.parentLocale != null) {
                  if (locales[config.parentLocale] != null) {
                      parentConfig = locales[config.parentLocale]._config;
                  } else {
                      locale = loadLocale(config.parentLocale);
                      if (locale != null) {
                          parentConfig = locale._config;
                      } else {
                          if (!localeFamilies[config.parentLocale]) {
                              localeFamilies[config.parentLocale] = [];
                          }
                          localeFamilies[config.parentLocale].push({
                              name: name,
                              config: config,
                          });
                          return null;
                      }
                  }
              }
              locales[name] = new Locale(mergeConfigs(parentConfig, config));

              if (localeFamilies[name]) {
                  localeFamilies[name].forEach(function (x) {
                      defineLocale(x.name, x.config);
                  });
              }

              // backwards compat for now: also set the locale
              // make sure we set the locale AFTER all child locales have been
              // created, so we won't end up with the child locale set.
              getSetGlobalLocale(name);

              return locales[name];
          } else {
              // useful for testing
              delete locales[name];
              return null;
          }
      }

      function updateLocale(name, config) {
          if (config != null) {
              var locale,
                  tmpLocale,
                  parentConfig = baseConfig;

              if (locales[name] != null && locales[name].parentLocale != null) {
                  // Update existing child locale in-place to avoid memory-leaks
                  locales[name].set(mergeConfigs(locales[name]._config, config));
              } else {
                  // MERGE
                  tmpLocale = loadLocale(name);
                  if (tmpLocale != null) {
                      parentConfig = tmpLocale._config;
                  }
                  config = mergeConfigs(parentConfig, config);
                  if (tmpLocale == null) {
                      // updateLocale is called for creating a new locale
                      // Set abbr so it will have a name (getters return
                      // undefined otherwise).
                      config.abbr = name;
                  }
                  locale = new Locale(config);
                  locale.parentLocale = locales[name];
                  locales[name] = locale;
              }

              // backwards compat for now: also set the locale
              getSetGlobalLocale(name);
          } else {
              // pass null for config to unupdate, useful for tests
              if (locales[name] != null) {
                  if (locales[name].parentLocale != null) {
                      locales[name] = locales[name].parentLocale;
                      if (name === getSetGlobalLocale()) {
                          getSetGlobalLocale(name);
                      }
                  } else if (locales[name] != null) {
                      delete locales[name];
                  }
              }
          }
          return locales[name];
      }

      // returns locale data
      function getLocale(key) {
          var locale;

          if (key && key._locale && key._locale._abbr) {
              key = key._locale._abbr;
          }

          if (!key) {
              return globalLocale;
          }

          if (!isArray(key)) {
              //short-circuit everything else
              locale = loadLocale(key);
              if (locale) {
                  return locale;
              }
              key = [key];
          }

          return chooseLocale(key);
      }

      function listLocales() {
          return keys(locales);
      }

      function checkOverflow(m) {
          var overflow,
              a = m._a;

          if (a && getParsingFlags(m).overflow === -2) {
              overflow =
                  a[MONTH] < 0 || a[MONTH] > 11
                      ? MONTH
                      : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                      ? DATE
                      : a[HOUR] < 0 ||
                        a[HOUR] > 24 ||
                        (a[HOUR] === 24 &&
                            (a[MINUTE] !== 0 ||
                                a[SECOND] !== 0 ||
                                a[MILLISECOND] !== 0))
                      ? HOUR
                      : a[MINUTE] < 0 || a[MINUTE] > 59
                      ? MINUTE
                      : a[SECOND] < 0 || a[SECOND] > 59
                      ? SECOND
                      : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                      ? MILLISECOND
                      : -1;

              if (
                  getParsingFlags(m)._overflowDayOfYear &&
                  (overflow < YEAR || overflow > DATE)
              ) {
                  overflow = DATE;
              }
              if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                  overflow = WEEK;
              }
              if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                  overflow = WEEKDAY;
              }

              getParsingFlags(m).overflow = overflow;
          }

          return m;
      }

      // iso 8601 regex
      // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
          basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
          tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
          isoDates = [
              ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
              ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
              ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
              ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
              ['YYYY-DDD', /\d{4}-\d{3}/],
              ['YYYY-MM', /\d{4}-\d\d/, false],
              ['YYYYYYMMDD', /[+-]\d{10}/],
              ['YYYYMMDD', /\d{8}/],
              ['GGGG[W]WWE', /\d{4}W\d{3}/],
              ['GGGG[W]WW', /\d{4}W\d{2}/, false],
              ['YYYYDDD', /\d{7}/],
              ['YYYYMM', /\d{6}/, false],
              ['YYYY', /\d{4}/, false],
          ],
          // iso time formats and regexes
          isoTimes = [
              ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
              ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
              ['HH:mm:ss', /\d\d:\d\d:\d\d/],
              ['HH:mm', /\d\d:\d\d/],
              ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
              ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
              ['HHmmss', /\d\d\d\d\d\d/],
              ['HHmm', /\d\d\d\d/],
              ['HH', /\d\d/],
          ],
          aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
          // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
          rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
          obsOffsets = {
              UT: 0,
              GMT: 0,
              EDT: -4 * 60,
              EST: -5 * 60,
              CDT: -5 * 60,
              CST: -6 * 60,
              MDT: -6 * 60,
              MST: -7 * 60,
              PDT: -7 * 60,
              PST: -8 * 60,
          };

      // date from iso format
      function configFromISO(config) {
          var i,
              l,
              string = config._i,
              match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
              allowTime,
              dateFormat,
              timeFormat,
              tzFormat;

          if (match) {
              getParsingFlags(config).iso = true;

              for (i = 0, l = isoDates.length; i < l; i++) {
                  if (isoDates[i][1].exec(match[1])) {
                      dateFormat = isoDates[i][0];
                      allowTime = isoDates[i][2] !== false;
                      break;
                  }
              }
              if (dateFormat == null) {
                  config._isValid = false;
                  return;
              }
              if (match[3]) {
                  for (i = 0, l = isoTimes.length; i < l; i++) {
                      if (isoTimes[i][1].exec(match[3])) {
                          // match[2] should be 'T' or space
                          timeFormat = (match[2] || ' ') + isoTimes[i][0];
                          break;
                      }
                  }
                  if (timeFormat == null) {
                      config._isValid = false;
                      return;
                  }
              }
              if (!allowTime && timeFormat != null) {
                  config._isValid = false;
                  return;
              }
              if (match[4]) {
                  if (tzRegex.exec(match[4])) {
                      tzFormat = 'Z';
                  } else {
                      config._isValid = false;
                      return;
                  }
              }
              config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
              configFromStringAndFormat(config);
          } else {
              config._isValid = false;
          }
      }

      function extractFromRFC2822Strings(
          yearStr,
          monthStr,
          dayStr,
          hourStr,
          minuteStr,
          secondStr
      ) {
          var result = [
              untruncateYear(yearStr),
              defaultLocaleMonthsShort.indexOf(monthStr),
              parseInt(dayStr, 10),
              parseInt(hourStr, 10),
              parseInt(minuteStr, 10),
          ];

          if (secondStr) {
              result.push(parseInt(secondStr, 10));
          }

          return result;
      }

      function untruncateYear(yearStr) {
          var year = parseInt(yearStr, 10);
          if (year <= 49) {
              return 2000 + year;
          } else if (year <= 999) {
              return 1900 + year;
          }
          return year;
      }

      function preprocessRFC2822(s) {
          // Remove comments and folding whitespace and replace multiple-spaces with a single space
          return s
              .replace(/\([^)]*\)|[\n\t]/g, ' ')
              .replace(/(\s\s+)/g, ' ')
              .replace(/^\s\s*/, '')
              .replace(/\s\s*$/, '');
      }

      function checkWeekday(weekdayStr, parsedInput, config) {
          if (weekdayStr) {
              // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
              var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                  weekdayActual = new Date(
                      parsedInput[0],
                      parsedInput[1],
                      parsedInput[2]
                  ).getDay();
              if (weekdayProvided !== weekdayActual) {
                  getParsingFlags(config).weekdayMismatch = true;
                  config._isValid = false;
                  return false;
              }
          }
          return true;
      }

      function calculateOffset(obsOffset, militaryOffset, numOffset) {
          if (obsOffset) {
              return obsOffsets[obsOffset];
          } else if (militaryOffset) {
              // the only allowed military tz is Z
              return 0;
          } else {
              var hm = parseInt(numOffset, 10),
                  m = hm % 100,
                  h = (hm - m) / 100;
              return h * 60 + m;
          }
      }

      // date and time from ref 2822 format
      function configFromRFC2822(config) {
          var match = rfc2822.exec(preprocessRFC2822(config._i)),
              parsedArray;
          if (match) {
              parsedArray = extractFromRFC2822Strings(
                  match[4],
                  match[3],
                  match[2],
                  match[5],
                  match[6],
                  match[7]
              );
              if (!checkWeekday(match[1], parsedArray, config)) {
                  return;
              }

              config._a = parsedArray;
              config._tzm = calculateOffset(match[8], match[9], match[10]);

              config._d = createUTCDate.apply(null, config._a);
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

              getParsingFlags(config).rfc2822 = true;
          } else {
              config._isValid = false;
          }
      }

      // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
      function configFromString(config) {
          var matched = aspNetJsonRegex.exec(config._i);
          if (matched !== null) {
              config._d = new Date(+matched[1]);
              return;
          }

          configFromISO(config);
          if (config._isValid === false) {
              delete config._isValid;
          } else {
              return;
          }

          configFromRFC2822(config);
          if (config._isValid === false) {
              delete config._isValid;
          } else {
              return;
          }

          if (config._strict) {
              config._isValid = false;
          } else {
              // Final attempt, use Input Fallback
              hooks.createFromInputFallback(config);
          }
      }

      hooks.createFromInputFallback = deprecate(
          'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
              'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
              'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
          function (config) {
              config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
          }
      );

      // Pick the first defined of two or three arguments.
      function defaults(a, b, c) {
          if (a != null) {
              return a;
          }
          if (b != null) {
              return b;
          }
          return c;
      }

      function currentDateArray(config) {
          // hooks is actually the exported moment object
          var nowValue = new Date(hooks.now());
          if (config._useUTC) {
              return [
                  nowValue.getUTCFullYear(),
                  nowValue.getUTCMonth(),
                  nowValue.getUTCDate(),
              ];
          }
          return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }

      // convert an array to a date.
      // the array should mirror the parameters below
      // note: all values past the year are optional and will default to the lowest possible value.
      // [year, month, day , hour, minute, second, millisecond]
      function configFromArray(config) {
          var i,
              date,
              input = [],
              currentDate,
              expectedWeekday,
              yearToUse;

          if (config._d) {
              return;
          }

          currentDate = currentDateArray(config);

          //compute day of the year from weeks and weekdays
          if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
              dayOfYearFromWeekInfo(config);
          }

          //if the day of the year is set, figure out what it is
          if (config._dayOfYear != null) {
              yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

              if (
                  config._dayOfYear > daysInYear(yearToUse) ||
                  config._dayOfYear === 0
              ) {
                  getParsingFlags(config)._overflowDayOfYear = true;
              }

              date = createUTCDate(yearToUse, 0, config._dayOfYear);
              config._a[MONTH] = date.getUTCMonth();
              config._a[DATE] = date.getUTCDate();
          }

          // Default to current date.
          // * if no year, month, day of month are given, default to today
          // * if day of month is given, default month and year
          // * if month is given, default only year
          // * if year is given, don't default anything
          for (i = 0; i < 3 && config._a[i] == null; ++i) {
              config._a[i] = input[i] = currentDate[i];
          }

          // Zero out whatever was not defaulted, including time
          for (; i < 7; i++) {
              config._a[i] = input[i] =
                  config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
          }

          // Check for 24:00:00.000
          if (
              config._a[HOUR] === 24 &&
              config._a[MINUTE] === 0 &&
              config._a[SECOND] === 0 &&
              config._a[MILLISECOND] === 0
          ) {
              config._nextDay = true;
              config._a[HOUR] = 0;
          }

          config._d = (config._useUTC ? createUTCDate : createDate).apply(
              null,
              input
          );
          expectedWeekday = config._useUTC
              ? config._d.getUTCDay()
              : config._d.getDay();

          // Apply timezone offset from input. The actual utcOffset can be changed
          // with parseZone.
          if (config._tzm != null) {
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          }

          if (config._nextDay) {
              config._a[HOUR] = 24;
          }

          // check for mismatching day of week
          if (
              config._w &&
              typeof config._w.d !== 'undefined' &&
              config._w.d !== expectedWeekday
          ) {
              getParsingFlags(config).weekdayMismatch = true;
          }
      }

      function dayOfYearFromWeekInfo(config) {
          var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

          w = config._w;
          if (w.GG != null || w.W != null || w.E != null) {
              dow = 1;
              doy = 4;

              // TODO: We need to take the current isoWeekYear, but that depends on
              // how we interpret now (local, utc, fixed offset). So create
              // a now version of current config (take local/utc/offset flags, and
              // create now).
              weekYear = defaults(
                  w.GG,
                  config._a[YEAR],
                  weekOfYear(createLocal(), 1, 4).year
              );
              week = defaults(w.W, 1);
              weekday = defaults(w.E, 1);
              if (weekday < 1 || weekday > 7) {
                  weekdayOverflow = true;
              }
          } else {
              dow = config._locale._week.dow;
              doy = config._locale._week.doy;

              curWeek = weekOfYear(createLocal(), dow, doy);

              weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

              // Default to current week.
              week = defaults(w.w, curWeek.week);

              if (w.d != null) {
                  // weekday -- low day numbers are considered next week
                  weekday = w.d;
                  if (weekday < 0 || weekday > 6) {
                      weekdayOverflow = true;
                  }
              } else if (w.e != null) {
                  // local weekday -- counting starts from beginning of week
                  weekday = w.e + dow;
                  if (w.e < 0 || w.e > 6) {
                      weekdayOverflow = true;
                  }
              } else {
                  // default to beginning of week
                  weekday = dow;
              }
          }
          if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
              getParsingFlags(config)._overflowWeeks = true;
          } else if (weekdayOverflow != null) {
              getParsingFlags(config)._overflowWeekday = true;
          } else {
              temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
              config._a[YEAR] = temp.year;
              config._dayOfYear = temp.dayOfYear;
          }
      }

      // constant that refers to the ISO standard
      hooks.ISO_8601 = function () {};

      // constant that refers to the RFC 2822 form
      hooks.RFC_2822 = function () {};

      // date from string and format string
      function configFromStringAndFormat(config) {
          // TODO: Move this to another part of the creation flow to prevent circular deps
          if (config._f === hooks.ISO_8601) {
              configFromISO(config);
              return;
          }
          if (config._f === hooks.RFC_2822) {
              configFromRFC2822(config);
              return;
          }
          config._a = [];
          getParsingFlags(config).empty = true;

          // This array is used to make a Date, either with `new Date` or `Date.UTC`
          var string = '' + config._i,
              i,
              parsedInput,
              tokens,
              token,
              skipped,
              stringLength = string.length,
              totalParsedInputLength = 0,
              era;

          tokens =
              expandFormat(config._f, config._locale).match(formattingTokens) || [];

          for (i = 0; i < tokens.length; i++) {
              token = tokens[i];
              parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                  [])[0];
              if (parsedInput) {
                  skipped = string.substr(0, string.indexOf(parsedInput));
                  if (skipped.length > 0) {
                      getParsingFlags(config).unusedInput.push(skipped);
                  }
                  string = string.slice(
                      string.indexOf(parsedInput) + parsedInput.length
                  );
                  totalParsedInputLength += parsedInput.length;
              }
              // don't parse if it's not a known token
              if (formatTokenFunctions[token]) {
                  if (parsedInput) {
                      getParsingFlags(config).empty = false;
                  } else {
                      getParsingFlags(config).unusedTokens.push(token);
                  }
                  addTimeToArrayFromToken(token, parsedInput, config);
              } else if (config._strict && !parsedInput) {
                  getParsingFlags(config).unusedTokens.push(token);
              }
          }

          // add remaining unparsed input length to the string
          getParsingFlags(config).charsLeftOver =
              stringLength - totalParsedInputLength;
          if (string.length > 0) {
              getParsingFlags(config).unusedInput.push(string);
          }

          // clear _12h flag if hour is <= 12
          if (
              config._a[HOUR] <= 12 &&
              getParsingFlags(config).bigHour === true &&
              config._a[HOUR] > 0
          ) {
              getParsingFlags(config).bigHour = undefined;
          }

          getParsingFlags(config).parsedDateParts = config._a.slice(0);
          getParsingFlags(config).meridiem = config._meridiem;
          // handle meridiem
          config._a[HOUR] = meridiemFixWrap(
              config._locale,
              config._a[HOUR],
              config._meridiem
          );

          // handle era
          era = getParsingFlags(config).era;
          if (era !== null) {
              config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
          }

          configFromArray(config);
          checkOverflow(config);
      }

      function meridiemFixWrap(locale, hour, meridiem) {
          var isPm;

          if (meridiem == null) {
              // nothing to do
              return hour;
          }
          if (locale.meridiemHour != null) {
              return locale.meridiemHour(hour, meridiem);
          } else if (locale.isPM != null) {
              // Fallback
              isPm = locale.isPM(meridiem);
              if (isPm && hour < 12) {
                  hour += 12;
              }
              if (!isPm && hour === 12) {
                  hour = 0;
              }
              return hour;
          } else {
              // this is not supposed to happen
              return hour;
          }
      }

      // date from string and array of format strings
      function configFromStringAndArray(config) {
          var tempConfig,
              bestMoment,
              scoreToBeat,
              i,
              currentScore,
              validFormatFound,
              bestFormatIsValid = false;

          if (config._f.length === 0) {
              getParsingFlags(config).invalidFormat = true;
              config._d = new Date(NaN);
              return;
          }

          for (i = 0; i < config._f.length; i++) {
              currentScore = 0;
              validFormatFound = false;
              tempConfig = copyConfig({}, config);
              if (config._useUTC != null) {
                  tempConfig._useUTC = config._useUTC;
              }
              tempConfig._f = config._f[i];
              configFromStringAndFormat(tempConfig);

              if (isValid(tempConfig)) {
                  validFormatFound = true;
              }

              // if there is any input that was not parsed add a penalty for that format
              currentScore += getParsingFlags(tempConfig).charsLeftOver;

              //or tokens
              currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

              getParsingFlags(tempConfig).score = currentScore;

              if (!bestFormatIsValid) {
                  if (
                      scoreToBeat == null ||
                      currentScore < scoreToBeat ||
                      validFormatFound
                  ) {
                      scoreToBeat = currentScore;
                      bestMoment = tempConfig;
                      if (validFormatFound) {
                          bestFormatIsValid = true;
                      }
                  }
              } else {
                  if (currentScore < scoreToBeat) {
                      scoreToBeat = currentScore;
                      bestMoment = tempConfig;
                  }
              }
          }

          extend(config, bestMoment || tempConfig);
      }

      function configFromObject(config) {
          if (config._d) {
              return;
          }

          var i = normalizeObjectUnits(config._i),
              dayOrDate = i.day === undefined ? i.date : i.day;
          config._a = map(
              [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
              function (obj) {
                  return obj && parseInt(obj, 10);
              }
          );

          configFromArray(config);
      }

      function createFromConfig(config) {
          var res = new Moment(checkOverflow(prepareConfig(config)));
          if (res._nextDay) {
              // Adding is smart enough around DST
              res.add(1, 'd');
              res._nextDay = undefined;
          }

          return res;
      }

      function prepareConfig(config) {
          var input = config._i,
              format = config._f;

          config._locale = config._locale || getLocale(config._l);

          if (input === null || (format === undefined && input === '')) {
              return createInvalid({ nullInput: true });
          }

          if (typeof input === 'string') {
              config._i = input = config._locale.preparse(input);
          }

          if (isMoment(input)) {
              return new Moment(checkOverflow(input));
          } else if (isDate(input)) {
              config._d = input;
          } else if (isArray(format)) {
              configFromStringAndArray(config);
          } else if (format) {
              configFromStringAndFormat(config);
          } else {
              configFromInput(config);
          }

          if (!isValid(config)) {
              config._d = null;
          }

          return config;
      }

      function configFromInput(config) {
          var input = config._i;
          if (isUndefined(input)) {
              config._d = new Date(hooks.now());
          } else if (isDate(input)) {
              config._d = new Date(input.valueOf());
          } else if (typeof input === 'string') {
              configFromString(config);
          } else if (isArray(input)) {
              config._a = map(input.slice(0), function (obj) {
                  return parseInt(obj, 10);
              });
              configFromArray(config);
          } else if (isObject(input)) {
              configFromObject(config);
          } else if (isNumber(input)) {
              // from milliseconds
              config._d = new Date(input);
          } else {
              hooks.createFromInputFallback(config);
          }
      }

      function createLocalOrUTC(input, format, locale, strict, isUTC) {
          var c = {};

          if (format === true || format === false) {
              strict = format;
              format = undefined;
          }

          if (locale === true || locale === false) {
              strict = locale;
              locale = undefined;
          }

          if (
              (isObject(input) && isObjectEmpty(input)) ||
              (isArray(input) && input.length === 0)
          ) {
              input = undefined;
          }
          // object construction must be done this way.
          // https://github.com/moment/moment/issues/1423
          c._isAMomentObject = true;
          c._useUTC = c._isUTC = isUTC;
          c._l = locale;
          c._i = input;
          c._f = format;
          c._strict = strict;

          return createFromConfig(c);
      }

      function createLocal(input, format, locale, strict) {
          return createLocalOrUTC(input, format, locale, strict, false);
      }

      var prototypeMin = deprecate(
              'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
              function () {
                  var other = createLocal.apply(null, arguments);
                  if (this.isValid() && other.isValid()) {
                      return other < this ? this : other;
                  } else {
                      return createInvalid();
                  }
              }
          ),
          prototypeMax = deprecate(
              'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
              function () {
                  var other = createLocal.apply(null, arguments);
                  if (this.isValid() && other.isValid()) {
                      return other > this ? this : other;
                  } else {
                      return createInvalid();
                  }
              }
          );

      // Pick a moment m from moments so that m[fn](other) is true for all
      // other. This relies on the function fn to be transitive.
      //
      // moments should either be an array of moment objects or an array, whose
      // first element is an array of moment objects.
      function pickBy(fn, moments) {
          var res, i;
          if (moments.length === 1 && isArray(moments[0])) {
              moments = moments[0];
          }
          if (!moments.length) {
              return createLocal();
          }
          res = moments[0];
          for (i = 1; i < moments.length; ++i) {
              if (!moments[i].isValid() || moments[i][fn](res)) {
                  res = moments[i];
              }
          }
          return res;
      }

      // TODO: Use [].sort instead?
      function min() {
          var args = [].slice.call(arguments, 0);

          return pickBy('isBefore', args);
      }

      function max() {
          var args = [].slice.call(arguments, 0);

          return pickBy('isAfter', args);
      }

      var now = function () {
          return Date.now ? Date.now() : +new Date();
      };

      var ordering = [
          'year',
          'quarter',
          'month',
          'week',
          'day',
          'hour',
          'minute',
          'second',
          'millisecond',
      ];

      function isDurationValid(m) {
          var key,
              unitHasDecimal = false,
              i;
          for (key in m) {
              if (
                  hasOwnProp(m, key) &&
                  !(
                      indexOf.call(ordering, key) !== -1 &&
                      (m[key] == null || !isNaN(m[key]))
                  )
              ) {
                  return false;
              }
          }

          for (i = 0; i < ordering.length; ++i) {
              if (m[ordering[i]]) {
                  if (unitHasDecimal) {
                      return false; // only allow non-integers for smallest unit
                  }
                  if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                      unitHasDecimal = true;
                  }
              }
          }

          return true;
      }

      function isValid$1() {
          return this._isValid;
      }

      function createInvalid$1() {
          return createDuration(NaN);
      }

      function Duration(duration) {
          var normalizedInput = normalizeObjectUnits(duration),
              years = normalizedInput.year || 0,
              quarters = normalizedInput.quarter || 0,
              months = normalizedInput.month || 0,
              weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
              days = normalizedInput.day || 0,
              hours = normalizedInput.hour || 0,
              minutes = normalizedInput.minute || 0,
              seconds = normalizedInput.second || 0,
              milliseconds = normalizedInput.millisecond || 0;

          this._isValid = isDurationValid(normalizedInput);

          // representation for dateAddRemove
          this._milliseconds =
              +milliseconds +
              seconds * 1e3 + // 1000
              minutes * 6e4 + // 1000 * 60
              hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
          // Because of dateAddRemove treats 24 hours as different from a
          // day when working around DST, we need to store them separately
          this._days = +days + weeks * 7;
          // It is impossible to translate months into days without knowing
          // which months you are are talking about, so we have to store
          // it separately.
          this._months = +months + quarters * 3 + years * 12;

          this._data = {};

          this._locale = getLocale();

          this._bubble();
      }

      function isDuration(obj) {
          return obj instanceof Duration;
      }

      function absRound(number) {
          if (number < 0) {
              return Math.round(-1 * number) * -1;
          } else {
              return Math.round(number);
          }
      }

      // compare two arrays, return the number of differences
      function compareArrays(array1, array2, dontConvert) {
          var len = Math.min(array1.length, array2.length),
              lengthDiff = Math.abs(array1.length - array2.length),
              diffs = 0,
              i;
          for (i = 0; i < len; i++) {
              if (
                  (dontConvert && array1[i] !== array2[i]) ||
                  (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
              ) {
                  diffs++;
              }
          }
          return diffs + lengthDiff;
      }

      // FORMATTING

      function offset(token, separator) {
          addFormatToken(token, 0, 0, function () {
              var offset = this.utcOffset(),
                  sign = '+';
              if (offset < 0) {
                  offset = -offset;
                  sign = '-';
              }
              return (
                  sign +
                  zeroFill(~~(offset / 60), 2) +
                  separator +
                  zeroFill(~~offset % 60, 2)
              );
          });
      }

      offset('Z', ':');
      offset('ZZ', '');

      // PARSING

      addRegexToken('Z', matchShortOffset);
      addRegexToken('ZZ', matchShortOffset);
      addParseToken(['Z', 'ZZ'], function (input, array, config) {
          config._useUTC = true;
          config._tzm = offsetFromString(matchShortOffset, input);
      });

      // HELPERS

      // timezone chunker
      // '+10:00' > ['10',  '00']
      // '-1530'  > ['-15', '30']
      var chunkOffset = /([\+\-]|\d\d)/gi;

      function offsetFromString(matcher, string) {
          var matches = (string || '').match(matcher),
              chunk,
              parts,
              minutes;

          if (matches === null) {
              return null;
          }

          chunk = matches[matches.length - 1] || [];
          parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
          minutes = +(parts[1] * 60) + toInt(parts[2]);

          return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
      }

      // Return a moment from input, that is local/utc/zone equivalent to model.
      function cloneWithOffset(input, model) {
          var res, diff;
          if (model._isUTC) {
              res = model.clone();
              diff =
                  (isMoment(input) || isDate(input)
                      ? input.valueOf()
                      : createLocal(input).valueOf()) - res.valueOf();
              // Use low-level api, because this fn is low-level api.
              res._d.setTime(res._d.valueOf() + diff);
              hooks.updateOffset(res, false);
              return res;
          } else {
              return createLocal(input).local();
          }
      }

      function getDateOffset(m) {
          // On Firefox.24 Date#getTimezoneOffset returns a floating point.
          // https://github.com/moment/moment/pull/1871
          return -Math.round(m._d.getTimezoneOffset());
      }

      // HOOKS

      // This function will be called whenever a moment is mutated.
      // It is intended to keep the offset in sync with the timezone.
      hooks.updateOffset = function () {};

      // MOMENTS

      // keepLocalTime = true means only change the timezone, without
      // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
      // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
      // +0200, so we adjust the time as needed, to be valid.
      //
      // Keeping the time actually adds/subtracts (one hour)
      // from the actual represented time. That is why we call updateOffset
      // a second time. In case it wants us to change the offset again
      // _changeInProgress == true case, then we have to adjust, because
      // there is no such time in the given timezone.
      function getSetOffset(input, keepLocalTime, keepMinutes) {
          var offset = this._offset || 0,
              localAdjust;
          if (!this.isValid()) {
              return input != null ? this : NaN;
          }
          if (input != null) {
              if (typeof input === 'string') {
                  input = offsetFromString(matchShortOffset, input);
                  if (input === null) {
                      return this;
                  }
              } else if (Math.abs(input) < 16 && !keepMinutes) {
                  input = input * 60;
              }
              if (!this._isUTC && keepLocalTime) {
                  localAdjust = getDateOffset(this);
              }
              this._offset = input;
              this._isUTC = true;
              if (localAdjust != null) {
                  this.add(localAdjust, 'm');
              }
              if (offset !== input) {
                  if (!keepLocalTime || this._changeInProgress) {
                      addSubtract(
                          this,
                          createDuration(input - offset, 'm'),
                          1,
                          false
                      );
                  } else if (!this._changeInProgress) {
                      this._changeInProgress = true;
                      hooks.updateOffset(this, true);
                      this._changeInProgress = null;
                  }
              }
              return this;
          } else {
              return this._isUTC ? offset : getDateOffset(this);
          }
      }

      function getSetZone(input, keepLocalTime) {
          if (input != null) {
              if (typeof input !== 'string') {
                  input = -input;
              }

              this.utcOffset(input, keepLocalTime);

              return this;
          } else {
              return -this.utcOffset();
          }
      }

      function setOffsetToUTC(keepLocalTime) {
          return this.utcOffset(0, keepLocalTime);
      }

      function setOffsetToLocal(keepLocalTime) {
          if (this._isUTC) {
              this.utcOffset(0, keepLocalTime);
              this._isUTC = false;

              if (keepLocalTime) {
                  this.subtract(getDateOffset(this), 'm');
              }
          }
          return this;
      }

      function setOffsetToParsedOffset() {
          if (this._tzm != null) {
              this.utcOffset(this._tzm, false, true);
          } else if (typeof this._i === 'string') {
              var tZone = offsetFromString(matchOffset, this._i);
              if (tZone != null) {
                  this.utcOffset(tZone);
              } else {
                  this.utcOffset(0, true);
              }
          }
          return this;
      }

      function hasAlignedHourOffset(input) {
          if (!this.isValid()) {
              return false;
          }
          input = input ? createLocal(input).utcOffset() : 0;

          return (this.utcOffset() - input) % 60 === 0;
      }

      function isDaylightSavingTime() {
          return (
              this.utcOffset() > this.clone().month(0).utcOffset() ||
              this.utcOffset() > this.clone().month(5).utcOffset()
          );
      }

      function isDaylightSavingTimeShifted() {
          if (!isUndefined(this._isDSTShifted)) {
              return this._isDSTShifted;
          }

          var c = {},
              other;

          copyConfig(c, this);
          c = prepareConfig(c);

          if (c._a) {
              other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
              this._isDSTShifted =
                  this.isValid() && compareArrays(c._a, other.toArray()) > 0;
          } else {
              this._isDSTShifted = false;
          }

          return this._isDSTShifted;
      }

      function isLocal() {
          return this.isValid() ? !this._isUTC : false;
      }

      function isUtcOffset() {
          return this.isValid() ? this._isUTC : false;
      }

      function isUtc() {
          return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }

      // ASP.NET json date format regex
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
          // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
          // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
          // and further modified to allow for strings containing both week and day
          isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

      function createDuration(input, key) {
          var duration = input,
              // matching against regexp is expensive, do it on demand
              match = null,
              sign,
              ret,
              diffRes;

          if (isDuration(input)) {
              duration = {
                  ms: input._milliseconds,
                  d: input._days,
                  M: input._months,
              };
          } else if (isNumber(input) || !isNaN(+input)) {
              duration = {};
              if (key) {
                  duration[key] = +input;
              } else {
                  duration.milliseconds = +input;
              }
          } else if ((match = aspNetRegex.exec(input))) {
              sign = match[1] === '-' ? -1 : 1;
              duration = {
                  y: 0,
                  d: toInt(match[DATE]) * sign,
                  h: toInt(match[HOUR]) * sign,
                  m: toInt(match[MINUTE]) * sign,
                  s: toInt(match[SECOND]) * sign,
                  ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
              };
          } else if ((match = isoRegex.exec(input))) {
              sign = match[1] === '-' ? -1 : 1;
              duration = {
                  y: parseIso(match[2], sign),
                  M: parseIso(match[3], sign),
                  w: parseIso(match[4], sign),
                  d: parseIso(match[5], sign),
                  h: parseIso(match[6], sign),
                  m: parseIso(match[7], sign),
                  s: parseIso(match[8], sign),
              };
          } else if (duration == null) {
              // checks for null or undefined
              duration = {};
          } else if (
              typeof duration === 'object' &&
              ('from' in duration || 'to' in duration)
          ) {
              diffRes = momentsDifference(
                  createLocal(duration.from),
                  createLocal(duration.to)
              );

              duration = {};
              duration.ms = diffRes.milliseconds;
              duration.M = diffRes.months;
          }

          ret = new Duration(duration);

          if (isDuration(input) && hasOwnProp(input, '_locale')) {
              ret._locale = input._locale;
          }

          if (isDuration(input) && hasOwnProp(input, '_isValid')) {
              ret._isValid = input._isValid;
          }

          return ret;
      }

      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;

      function parseIso(inp, sign) {
          // We'd normally use ~~inp for this, but unfortunately it also
          // converts floats to ints.
          // inp may be undefined, so careful calling replace on it.
          var res = inp && parseFloat(inp.replace(',', '.'));
          // apply sign while we're at it
          return (isNaN(res) ? 0 : res) * sign;
      }

      function positiveMomentsDifference(base, other) {
          var res = {};

          res.months =
              other.month() - base.month() + (other.year() - base.year()) * 12;
          if (base.clone().add(res.months, 'M').isAfter(other)) {
              --res.months;
          }

          res.milliseconds = +other - +base.clone().add(res.months, 'M');

          return res;
      }

      function momentsDifference(base, other) {
          var res;
          if (!(base.isValid() && other.isValid())) {
              return { milliseconds: 0, months: 0 };
          }

          other = cloneWithOffset(other, base);
          if (base.isBefore(other)) {
              res = positiveMomentsDifference(base, other);
          } else {
              res = positiveMomentsDifference(other, base);
              res.milliseconds = -res.milliseconds;
              res.months = -res.months;
          }

          return res;
      }

      // TODO: remove 'name' arg after deprecation is removed
      function createAdder(direction, name) {
          return function (val, period) {
              var dur, tmp;
              //invert the arguments, but complain about it
              if (period !== null && !isNaN(+period)) {
                  deprecateSimple(
                      name,
                      'moment().' +
                          name +
                          '(period, number) is deprecated. Please use moment().' +
                          name +
                          '(number, period). ' +
                          'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                  );
                  tmp = val;
                  val = period;
                  period = tmp;
              }

              dur = createDuration(val, period);
              addSubtract(this, dur, direction);
              return this;
          };
      }

      function addSubtract(mom, duration, isAdding, updateOffset) {
          var milliseconds = duration._milliseconds,
              days = absRound(duration._days),
              months = absRound(duration._months);

          if (!mom.isValid()) {
              // No op
              return;
          }

          updateOffset = updateOffset == null ? true : updateOffset;

          if (months) {
              setMonth(mom, get(mom, 'Month') + months * isAdding);
          }
          if (days) {
              set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
          }
          if (milliseconds) {
              mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
          }
          if (updateOffset) {
              hooks.updateOffset(mom, days || months);
          }
      }

      var add = createAdder(1, 'add'),
          subtract = createAdder(-1, 'subtract');

      function isString(input) {
          return typeof input === 'string' || input instanceof String;
      }

      // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
      function isMomentInput(input) {
          return (
              isMoment(input) ||
              isDate(input) ||
              isString(input) ||
              isNumber(input) ||
              isNumberOrStringArray(input) ||
              isMomentInputObject(input) ||
              input === null ||
              input === undefined
          );
      }

      function isMomentInputObject(input) {
          var objectTest = isObject(input) && !isObjectEmpty(input),
              propertyTest = false,
              properties = [
                  'years',
                  'year',
                  'y',
                  'months',
                  'month',
                  'M',
                  'days',
                  'day',
                  'd',
                  'dates',
                  'date',
                  'D',
                  'hours',
                  'hour',
                  'h',
                  'minutes',
                  'minute',
                  'm',
                  'seconds',
                  'second',
                  's',
                  'milliseconds',
                  'millisecond',
                  'ms',
              ],
              i,
              property;

          for (i = 0; i < properties.length; i += 1) {
              property = properties[i];
              propertyTest = propertyTest || hasOwnProp(input, property);
          }

          return objectTest && propertyTest;
      }

      function isNumberOrStringArray(input) {
          var arrayTest = isArray(input),
              dataTypeTest = false;
          if (arrayTest) {
              dataTypeTest =
                  input.filter(function (item) {
                      return !isNumber(item) && isString(input);
                  }).length === 0;
          }
          return arrayTest && dataTypeTest;
      }

      function isCalendarSpec(input) {
          var objectTest = isObject(input) && !isObjectEmpty(input),
              propertyTest = false,
              properties = [
                  'sameDay',
                  'nextDay',
                  'lastDay',
                  'nextWeek',
                  'lastWeek',
                  'sameElse',
              ],
              i,
              property;

          for (i = 0; i < properties.length; i += 1) {
              property = properties[i];
              propertyTest = propertyTest || hasOwnProp(input, property);
          }

          return objectTest && propertyTest;
      }

      function getCalendarFormat(myMoment, now) {
          var diff = myMoment.diff(now, 'days', true);
          return diff < -6
              ? 'sameElse'
              : diff < -1
              ? 'lastWeek'
              : diff < 0
              ? 'lastDay'
              : diff < 1
              ? 'sameDay'
              : diff < 2
              ? 'nextDay'
              : diff < 7
              ? 'nextWeek'
              : 'sameElse';
      }

      function calendar$1(time, formats) {
          // Support for single parameter, formats only overload to the calendar function
          if (arguments.length === 1) {
              if (!arguments[0]) {
                  time = undefined;
                  formats = undefined;
              } else if (isMomentInput(arguments[0])) {
                  time = arguments[0];
                  formats = undefined;
              } else if (isCalendarSpec(arguments[0])) {
                  formats = arguments[0];
                  time = undefined;
              }
          }
          // We want to compare the start of today, vs this.
          // Getting start-of-today depends on whether we're local/utc/offset or not.
          var now = time || createLocal(),
              sod = cloneWithOffset(now, this).startOf('day'),
              format = hooks.calendarFormat(this, sod) || 'sameElse',
              output =
                  formats &&
                  (isFunction(formats[format])
                      ? formats[format].call(this, now)
                      : formats[format]);

          return this.format(
              output || this.localeData().calendar(format, this, createLocal(now))
          );
      }

      function clone() {
          return new Moment(this);
      }

      function isAfter(input, units) {
          var localInput = isMoment(input) ? input : createLocal(input);
          if (!(this.isValid() && localInput.isValid())) {
              return false;
          }
          units = normalizeUnits(units) || 'millisecond';
          if (units === 'millisecond') {
              return this.valueOf() > localInput.valueOf();
          } else {
              return localInput.valueOf() < this.clone().startOf(units).valueOf();
          }
      }

      function isBefore(input, units) {
          var localInput = isMoment(input) ? input : createLocal(input);
          if (!(this.isValid() && localInput.isValid())) {
              return false;
          }
          units = normalizeUnits(units) || 'millisecond';
          if (units === 'millisecond') {
              return this.valueOf() < localInput.valueOf();
          } else {
              return this.clone().endOf(units).valueOf() < localInput.valueOf();
          }
      }

      function isBetween(from, to, units, inclusivity) {
          var localFrom = isMoment(from) ? from : createLocal(from),
              localTo = isMoment(to) ? to : createLocal(to);
          if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
              return false;
          }
          inclusivity = inclusivity || '()';
          return (
              (inclusivity[0] === '('
                  ? this.isAfter(localFrom, units)
                  : !this.isBefore(localFrom, units)) &&
              (inclusivity[1] === ')'
                  ? this.isBefore(localTo, units)
                  : !this.isAfter(localTo, units))
          );
      }

      function isSame(input, units) {
          var localInput = isMoment(input) ? input : createLocal(input),
              inputMs;
          if (!(this.isValid() && localInput.isValid())) {
              return false;
          }
          units = normalizeUnits(units) || 'millisecond';
          if (units === 'millisecond') {
              return this.valueOf() === localInput.valueOf();
          } else {
              inputMs = localInput.valueOf();
              return (
                  this.clone().startOf(units).valueOf() <= inputMs &&
                  inputMs <= this.clone().endOf(units).valueOf()
              );
          }
      }

      function isSameOrAfter(input, units) {
          return this.isSame(input, units) || this.isAfter(input, units);
      }

      function isSameOrBefore(input, units) {
          return this.isSame(input, units) || this.isBefore(input, units);
      }

      function diff(input, units, asFloat) {
          var that, zoneDelta, output;

          if (!this.isValid()) {
              return NaN;
          }

          that = cloneWithOffset(input, this);

          if (!that.isValid()) {
              return NaN;
          }

          zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

          units = normalizeUnits(units);

          switch (units) {
              case 'year':
                  output = monthDiff(this, that) / 12;
                  break;
              case 'month':
                  output = monthDiff(this, that);
                  break;
              case 'quarter':
                  output = monthDiff(this, that) / 3;
                  break;
              case 'second':
                  output = (this - that) / 1e3;
                  break; // 1000
              case 'minute':
                  output = (this - that) / 6e4;
                  break; // 1000 * 60
              case 'hour':
                  output = (this - that) / 36e5;
                  break; // 1000 * 60 * 60
              case 'day':
                  output = (this - that - zoneDelta) / 864e5;
                  break; // 1000 * 60 * 60 * 24, negate dst
              case 'week':
                  output = (this - that - zoneDelta) / 6048e5;
                  break; // 1000 * 60 * 60 * 24 * 7, negate dst
              default:
                  output = this - that;
          }

          return asFloat ? output : absFloor(output);
      }

      function monthDiff(a, b) {
          if (a.date() < b.date()) {
              // end-of-month calculations work correct when the start month has more
              // days than the end month.
              return -monthDiff(b, a);
          }
          // difference in months
          var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
              // b is in (anchor - 1 month, anchor + 1 month)
              anchor = a.clone().add(wholeMonthDiff, 'months'),
              anchor2,
              adjust;

          if (b - anchor < 0) {
              anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
              // linear across the month
              adjust = (b - anchor) / (anchor - anchor2);
          } else {
              anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
              // linear across the month
              adjust = (b - anchor) / (anchor2 - anchor);
          }

          //check for negative zero, return zero if negative zero
          return -(wholeMonthDiff + adjust) || 0;
      }

      hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
      hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

      function toString() {
          return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
      }

      function toISOString(keepOffset) {
          if (!this.isValid()) {
              return null;
          }
          var utc = keepOffset !== true,
              m = utc ? this.clone().utc() : this;
          if (m.year() < 0 || m.year() > 9999) {
              return formatMoment(
                  m,
                  utc
                      ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                      : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
              );
          }
          if (isFunction(Date.prototype.toISOString)) {
              // native implementation is ~50x faster, use it when we can
              if (utc) {
                  return this.toDate().toISOString();
              } else {
                  return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                      .toISOString()
                      .replace('Z', formatMoment(m, 'Z'));
              }
          }
          return formatMoment(
              m,
              utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
          );
      }

      /**
       * Return a human readable representation of a moment that can
       * also be evaluated to get a new moment which is the same
       *
       * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
       */
      function inspect() {
          if (!this.isValid()) {
              return 'moment.invalid(/* ' + this._i + ' */)';
          }
          var func = 'moment',
              zone = '',
              prefix,
              year,
              datetime,
              suffix;
          if (!this.isLocal()) {
              func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
              zone = 'Z';
          }
          prefix = '[' + func + '("]';
          year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
          datetime = '-MM-DD[T]HH:mm:ss.SSS';
          suffix = zone + '[")]';

          return this.format(prefix + year + datetime + suffix);
      }

      function format(inputString) {
          if (!inputString) {
              inputString = this.isUtc()
                  ? hooks.defaultFormatUtc
                  : hooks.defaultFormat;
          }
          var output = formatMoment(this, inputString);
          return this.localeData().postformat(output);
      }

      function from(time, withoutSuffix) {
          if (
              this.isValid() &&
              ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
          ) {
              return createDuration({ to: this, from: time })
                  .locale(this.locale())
                  .humanize(!withoutSuffix);
          } else {
              return this.localeData().invalidDate();
          }
      }

      function fromNow(withoutSuffix) {
          return this.from(createLocal(), withoutSuffix);
      }

      function to(time, withoutSuffix) {
          if (
              this.isValid() &&
              ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
          ) {
              return createDuration({ from: this, to: time })
                  .locale(this.locale())
                  .humanize(!withoutSuffix);
          } else {
              return this.localeData().invalidDate();
          }
      }

      function toNow(withoutSuffix) {
          return this.to(createLocal(), withoutSuffix);
      }

      // If passed a locale key, it will set the locale for this
      // instance.  Otherwise, it will return the locale configuration
      // variables for this instance.
      function locale(key) {
          var newLocaleData;

          if (key === undefined) {
              return this._locale._abbr;
          } else {
              newLocaleData = getLocale(key);
              if (newLocaleData != null) {
                  this._locale = newLocaleData;
              }
              return this;
          }
      }

      var lang = deprecate(
          'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
          function (key) {
              if (key === undefined) {
                  return this.localeData();
              } else {
                  return this.locale(key);
              }
          }
      );

      function localeData() {
          return this._locale;
      }

      var MS_PER_SECOND = 1000,
          MS_PER_MINUTE = 60 * MS_PER_SECOND,
          MS_PER_HOUR = 60 * MS_PER_MINUTE,
          MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

      // actual modulo - handles negative numbers (for dates before 1970):
      function mod$1(dividend, divisor) {
          return ((dividend % divisor) + divisor) % divisor;
      }

      function localStartOfDate(y, m, d) {
          // the date constructor remaps years 0-99 to 1900-1999
          if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              return new Date(y + 400, m, d) - MS_PER_400_YEARS;
          } else {
              return new Date(y, m, d).valueOf();
          }
      }

      function utcStartOfDate(y, m, d) {
          // Date.UTC remaps years 0-99 to 1900-1999
          if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
          } else {
              return Date.UTC(y, m, d);
          }
      }

      function startOf(units) {
          var time, startOfDate;
          units = normalizeUnits(units);
          if (units === undefined || units === 'millisecond' || !this.isValid()) {
              return this;
          }

          startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

          switch (units) {
              case 'year':
                  time = startOfDate(this.year(), 0, 1);
                  break;
              case 'quarter':
                  time = startOfDate(
                      this.year(),
                      this.month() - (this.month() % 3),
                      1
                  );
                  break;
              case 'month':
                  time = startOfDate(this.year(), this.month(), 1);
                  break;
              case 'week':
                  time = startOfDate(
                      this.year(),
                      this.month(),
                      this.date() - this.weekday()
                  );
                  break;
              case 'isoWeek':
                  time = startOfDate(
                      this.year(),
                      this.month(),
                      this.date() - (this.isoWeekday() - 1)
                  );
                  break;
              case 'day':
              case 'date':
                  time = startOfDate(this.year(), this.month(), this.date());
                  break;
              case 'hour':
                  time = this._d.valueOf();
                  time -= mod$1(
                      time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                      MS_PER_HOUR
                  );
                  break;
              case 'minute':
                  time = this._d.valueOf();
                  time -= mod$1(time, MS_PER_MINUTE);
                  break;
              case 'second':
                  time = this._d.valueOf();
                  time -= mod$1(time, MS_PER_SECOND);
                  break;
          }

          this._d.setTime(time);
          hooks.updateOffset(this, true);
          return this;
      }

      function endOf(units) {
          var time, startOfDate;
          units = normalizeUnits(units);
          if (units === undefined || units === 'millisecond' || !this.isValid()) {
              return this;
          }

          startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

          switch (units) {
              case 'year':
                  time = startOfDate(this.year() + 1, 0, 1) - 1;
                  break;
              case 'quarter':
                  time =
                      startOfDate(
                          this.year(),
                          this.month() - (this.month() % 3) + 3,
                          1
                      ) - 1;
                  break;
              case 'month':
                  time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                  break;
              case 'week':
                  time =
                      startOfDate(
                          this.year(),
                          this.month(),
                          this.date() - this.weekday() + 7
                      ) - 1;
                  break;
              case 'isoWeek':
                  time =
                      startOfDate(
                          this.year(),
                          this.month(),
                          this.date() - (this.isoWeekday() - 1) + 7
                      ) - 1;
                  break;
              case 'day':
              case 'date':
                  time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                  break;
              case 'hour':
                  time = this._d.valueOf();
                  time +=
                      MS_PER_HOUR -
                      mod$1(
                          time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                          MS_PER_HOUR
                      ) -
                      1;
                  break;
              case 'minute':
                  time = this._d.valueOf();
                  time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                  break;
              case 'second':
                  time = this._d.valueOf();
                  time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                  break;
          }

          this._d.setTime(time);
          hooks.updateOffset(this, true);
          return this;
      }

      function valueOf() {
          return this._d.valueOf() - (this._offset || 0) * 60000;
      }

      function unix() {
          return Math.floor(this.valueOf() / 1000);
      }

      function toDate() {
          return new Date(this.valueOf());
      }

      function toArray() {
          var m = this;
          return [
              m.year(),
              m.month(),
              m.date(),
              m.hour(),
              m.minute(),
              m.second(),
              m.millisecond(),
          ];
      }

      function toObject() {
          var m = this;
          return {
              years: m.year(),
              months: m.month(),
              date: m.date(),
              hours: m.hours(),
              minutes: m.minutes(),
              seconds: m.seconds(),
              milliseconds: m.milliseconds(),
          };
      }

      function toJSON() {
          // new Date(NaN).toJSON() === null
          return this.isValid() ? this.toISOString() : null;
      }

      function isValid$2() {
          return isValid(this);
      }

      function parsingFlags() {
          return extend({}, getParsingFlags(this));
      }

      function invalidAt() {
          return getParsingFlags(this).overflow;
      }

      function creationData() {
          return {
              input: this._i,
              format: this._f,
              locale: this._locale,
              isUTC: this._isUTC,
              strict: this._strict,
          };
      }

      addFormatToken('N', 0, 0, 'eraAbbr');
      addFormatToken('NN', 0, 0, 'eraAbbr');
      addFormatToken('NNN', 0, 0, 'eraAbbr');
      addFormatToken('NNNN', 0, 0, 'eraName');
      addFormatToken('NNNNN', 0, 0, 'eraNarrow');

      addFormatToken('y', ['y', 1], 'yo', 'eraYear');
      addFormatToken('y', ['yy', 2], 0, 'eraYear');
      addFormatToken('y', ['yyy', 3], 0, 'eraYear');
      addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

      addRegexToken('N', matchEraAbbr);
      addRegexToken('NN', matchEraAbbr);
      addRegexToken('NNN', matchEraAbbr);
      addRegexToken('NNNN', matchEraName);
      addRegexToken('NNNNN', matchEraNarrow);

      addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
          input,
          array,
          config,
          token
      ) {
          var era = config._locale.erasParse(input, token, config._strict);
          if (era) {
              getParsingFlags(config).era = era;
          } else {
              getParsingFlags(config).invalidEra = input;
          }
      });

      addRegexToken('y', matchUnsigned);
      addRegexToken('yy', matchUnsigned);
      addRegexToken('yyy', matchUnsigned);
      addRegexToken('yyyy', matchUnsigned);
      addRegexToken('yo', matchEraYearOrdinal);

      addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
      addParseToken(['yo'], function (input, array, config, token) {
          var match;
          if (config._locale._eraYearOrdinalRegex) {
              match = input.match(config._locale._eraYearOrdinalRegex);
          }

          if (config._locale.eraYearOrdinalParse) {
              array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
          } else {
              array[YEAR] = parseInt(input, 10);
          }
      });

      function localeEras(m, format) {
          var i,
              l,
              date,
              eras = this._eras || getLocale('en')._eras;
          for (i = 0, l = eras.length; i < l; ++i) {
              switch (typeof eras[i].since) {
                  case 'string':
                      // truncate time
                      date = hooks(eras[i].since).startOf('day');
                      eras[i].since = date.valueOf();
                      break;
              }

              switch (typeof eras[i].until) {
                  case 'undefined':
                      eras[i].until = +Infinity;
                      break;
                  case 'string':
                      // truncate time
                      date = hooks(eras[i].until).startOf('day').valueOf();
                      eras[i].until = date.valueOf();
                      break;
              }
          }
          return eras;
      }

      function localeErasParse(eraName, format, strict) {
          var i,
              l,
              eras = this.eras(),
              name,
              abbr,
              narrow;
          eraName = eraName.toUpperCase();

          for (i = 0, l = eras.length; i < l; ++i) {
              name = eras[i].name.toUpperCase();
              abbr = eras[i].abbr.toUpperCase();
              narrow = eras[i].narrow.toUpperCase();

              if (strict) {
                  switch (format) {
                      case 'N':
                      case 'NN':
                      case 'NNN':
                          if (abbr === eraName) {
                              return eras[i];
                          }
                          break;

                      case 'NNNN':
                          if (name === eraName) {
                              return eras[i];
                          }
                          break;

                      case 'NNNNN':
                          if (narrow === eraName) {
                              return eras[i];
                          }
                          break;
                  }
              } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                  return eras[i];
              }
          }
      }

      function localeErasConvertYear(era, year) {
          var dir = era.since <= era.until ? +1 : -1;
          if (year === undefined) {
              return hooks(era.since).year();
          } else {
              return hooks(era.since).year() + (year - era.offset) * dir;
          }
      }

      function getEraName() {
          var i,
              l,
              val,
              eras = this.localeData().eras();
          for (i = 0, l = eras.length; i < l; ++i) {
              // truncate time
              val = this.clone().startOf('day').valueOf();

              if (eras[i].since <= val && val <= eras[i].until) {
                  return eras[i].name;
              }
              if (eras[i].until <= val && val <= eras[i].since) {
                  return eras[i].name;
              }
          }

          return '';
      }

      function getEraNarrow() {
          var i,
              l,
              val,
              eras = this.localeData().eras();
          for (i = 0, l = eras.length; i < l; ++i) {
              // truncate time
              val = this.clone().startOf('day').valueOf();

              if (eras[i].since <= val && val <= eras[i].until) {
                  return eras[i].narrow;
              }
              if (eras[i].until <= val && val <= eras[i].since) {
                  return eras[i].narrow;
              }
          }

          return '';
      }

      function getEraAbbr() {
          var i,
              l,
              val,
              eras = this.localeData().eras();
          for (i = 0, l = eras.length; i < l; ++i) {
              // truncate time
              val = this.clone().startOf('day').valueOf();

              if (eras[i].since <= val && val <= eras[i].until) {
                  return eras[i].abbr;
              }
              if (eras[i].until <= val && val <= eras[i].since) {
                  return eras[i].abbr;
              }
          }

          return '';
      }

      function getEraYear() {
          var i,
              l,
              dir,
              val,
              eras = this.localeData().eras();
          for (i = 0, l = eras.length; i < l; ++i) {
              dir = eras[i].since <= eras[i].until ? +1 : -1;

              // truncate time
              val = this.clone().startOf('day').valueOf();

              if (
                  (eras[i].since <= val && val <= eras[i].until) ||
                  (eras[i].until <= val && val <= eras[i].since)
              ) {
                  return (
                      (this.year() - hooks(eras[i].since).year()) * dir +
                      eras[i].offset
                  );
              }
          }

          return this.year();
      }

      function erasNameRegex(isStrict) {
          if (!hasOwnProp(this, '_erasNameRegex')) {
              computeErasParse.call(this);
          }
          return isStrict ? this._erasNameRegex : this._erasRegex;
      }

      function erasAbbrRegex(isStrict) {
          if (!hasOwnProp(this, '_erasAbbrRegex')) {
              computeErasParse.call(this);
          }
          return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }

      function erasNarrowRegex(isStrict) {
          if (!hasOwnProp(this, '_erasNarrowRegex')) {
              computeErasParse.call(this);
          }
          return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }

      function matchEraAbbr(isStrict, locale) {
          return locale.erasAbbrRegex(isStrict);
      }

      function matchEraName(isStrict, locale) {
          return locale.erasNameRegex(isStrict);
      }

      function matchEraNarrow(isStrict, locale) {
          return locale.erasNarrowRegex(isStrict);
      }

      function matchEraYearOrdinal(isStrict, locale) {
          return locale._eraYearOrdinalRegex || matchUnsigned;
      }

      function computeErasParse() {
          var abbrPieces = [],
              namePieces = [],
              narrowPieces = [],
              mixedPieces = [],
              i,
              l,
              eras = this.eras();

          for (i = 0, l = eras.length; i < l; ++i) {
              namePieces.push(regexEscape(eras[i].name));
              abbrPieces.push(regexEscape(eras[i].abbr));
              narrowPieces.push(regexEscape(eras[i].narrow));

              mixedPieces.push(regexEscape(eras[i].name));
              mixedPieces.push(regexEscape(eras[i].abbr));
              mixedPieces.push(regexEscape(eras[i].narrow));
          }

          this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
          this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
          this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
          this._erasNarrowRegex = new RegExp(
              '^(' + narrowPieces.join('|') + ')',
              'i'
          );
      }

      // FORMATTING

      addFormatToken(0, ['gg', 2], 0, function () {
          return this.weekYear() % 100;
      });

      addFormatToken(0, ['GG', 2], 0, function () {
          return this.isoWeekYear() % 100;
      });

      function addWeekYearFormatToken(token, getter) {
          addFormatToken(0, [token, token.length], 0, getter);
      }

      addWeekYearFormatToken('gggg', 'weekYear');
      addWeekYearFormatToken('ggggg', 'weekYear');
      addWeekYearFormatToken('GGGG', 'isoWeekYear');
      addWeekYearFormatToken('GGGGG', 'isoWeekYear');

      // ALIASES

      addUnitAlias('weekYear', 'gg');
      addUnitAlias('isoWeekYear', 'GG');

      // PRIORITY

      addUnitPriority('weekYear', 1);
      addUnitPriority('isoWeekYear', 1);

      // PARSING

      addRegexToken('G', matchSigned);
      addRegexToken('g', matchSigned);
      addRegexToken('GG', match1to2, match2);
      addRegexToken('gg', match1to2, match2);
      addRegexToken('GGGG', match1to4, match4);
      addRegexToken('gggg', match1to4, match4);
      addRegexToken('GGGGG', match1to6, match6);
      addRegexToken('ggggg', match1to6, match6);

      addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
          input,
          week,
          config,
          token
      ) {
          week[token.substr(0, 2)] = toInt(input);
      });

      addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
          week[token] = hooks.parseTwoDigitYear(input);
      });

      // MOMENTS

      function getSetWeekYear(input) {
          return getSetWeekYearHelper.call(
              this,
              input,
              this.week(),
              this.weekday(),
              this.localeData()._week.dow,
              this.localeData()._week.doy
          );
      }

      function getSetISOWeekYear(input) {
          return getSetWeekYearHelper.call(
              this,
              input,
              this.isoWeek(),
              this.isoWeekday(),
              1,
              4
          );
      }

      function getISOWeeksInYear() {
          return weeksInYear(this.year(), 1, 4);
      }

      function getISOWeeksInISOWeekYear() {
          return weeksInYear(this.isoWeekYear(), 1, 4);
      }

      function getWeeksInYear() {
          var weekInfo = this.localeData()._week;
          return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }

      function getWeeksInWeekYear() {
          var weekInfo = this.localeData()._week;
          return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }

      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
          var weeksTarget;
          if (input == null) {
              return weekOfYear(this, dow, doy).year;
          } else {
              weeksTarget = weeksInYear(input, dow, doy);
              if (week > weeksTarget) {
                  week = weeksTarget;
              }
              return setWeekAll.call(this, input, week, weekday, dow, doy);
          }
      }

      function setWeekAll(weekYear, week, weekday, dow, doy) {
          var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
              date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

          this.year(date.getUTCFullYear());
          this.month(date.getUTCMonth());
          this.date(date.getUTCDate());
          return this;
      }

      // FORMATTING

      addFormatToken('Q', 0, 'Qo', 'quarter');

      // ALIASES

      addUnitAlias('quarter', 'Q');

      // PRIORITY

      addUnitPriority('quarter', 7);

      // PARSING

      addRegexToken('Q', match1);
      addParseToken('Q', function (input, array) {
          array[MONTH] = (toInt(input) - 1) * 3;
      });

      // MOMENTS

      function getSetQuarter(input) {
          return input == null
              ? Math.ceil((this.month() + 1) / 3)
              : this.month((input - 1) * 3 + (this.month() % 3));
      }

      // FORMATTING

      addFormatToken('D', ['DD', 2], 'Do', 'date');

      // ALIASES

      addUnitAlias('date', 'D');

      // PRIORITY
      addUnitPriority('date', 9);

      // PARSING

      addRegexToken('D', match1to2);
      addRegexToken('DD', match1to2, match2);
      addRegexToken('Do', function (isStrict, locale) {
          // TODO: Remove "ordinalParse" fallback in next major release.
          return isStrict
              ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
              : locale._dayOfMonthOrdinalParseLenient;
      });

      addParseToken(['D', 'DD'], DATE);
      addParseToken('Do', function (input, array) {
          array[DATE] = toInt(input.match(match1to2)[0]);
      });

      // MOMENTS

      var getSetDayOfMonth = makeGetSet('Date', true);

      // FORMATTING

      addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

      // ALIASES

      addUnitAlias('dayOfYear', 'DDD');

      // PRIORITY
      addUnitPriority('dayOfYear', 4);

      // PARSING

      addRegexToken('DDD', match1to3);
      addRegexToken('DDDD', match3);
      addParseToken(['DDD', 'DDDD'], function (input, array, config) {
          config._dayOfYear = toInt(input);
      });

      // HELPERS

      // MOMENTS

      function getSetDayOfYear(input) {
          var dayOfYear =
              Math.round(
                  (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
              ) + 1;
          return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
      }

      // FORMATTING

      addFormatToken('m', ['mm', 2], 0, 'minute');

      // ALIASES

      addUnitAlias('minute', 'm');

      // PRIORITY

      addUnitPriority('minute', 14);

      // PARSING

      addRegexToken('m', match1to2);
      addRegexToken('mm', match1to2, match2);
      addParseToken(['m', 'mm'], MINUTE);

      // MOMENTS

      var getSetMinute = makeGetSet('Minutes', false);

      // FORMATTING

      addFormatToken('s', ['ss', 2], 0, 'second');

      // ALIASES

      addUnitAlias('second', 's');

      // PRIORITY

      addUnitPriority('second', 15);

      // PARSING

      addRegexToken('s', match1to2);
      addRegexToken('ss', match1to2, match2);
      addParseToken(['s', 'ss'], SECOND);

      // MOMENTS

      var getSetSecond = makeGetSet('Seconds', false);

      // FORMATTING

      addFormatToken('S', 0, 0, function () {
          return ~~(this.millisecond() / 100);
      });

      addFormatToken(0, ['SS', 2], 0, function () {
          return ~~(this.millisecond() / 10);
      });

      addFormatToken(0, ['SSS', 3], 0, 'millisecond');
      addFormatToken(0, ['SSSS', 4], 0, function () {
          return this.millisecond() * 10;
      });
      addFormatToken(0, ['SSSSS', 5], 0, function () {
          return this.millisecond() * 100;
      });
      addFormatToken(0, ['SSSSSS', 6], 0, function () {
          return this.millisecond() * 1000;
      });
      addFormatToken(0, ['SSSSSSS', 7], 0, function () {
          return this.millisecond() * 10000;
      });
      addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
          return this.millisecond() * 100000;
      });
      addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
          return this.millisecond() * 1000000;
      });

      // ALIASES

      addUnitAlias('millisecond', 'ms');

      // PRIORITY

      addUnitPriority('millisecond', 16);

      // PARSING

      addRegexToken('S', match1to3, match1);
      addRegexToken('SS', match1to3, match2);
      addRegexToken('SSS', match1to3, match3);

      var token, getSetMillisecond;
      for (token = 'SSSS'; token.length <= 9; token += 'S') {
          addRegexToken(token, matchUnsigned);
      }

      function parseMs(input, array) {
          array[MILLISECOND] = toInt(('0.' + input) * 1000);
      }

      for (token = 'S'; token.length <= 9; token += 'S') {
          addParseToken(token, parseMs);
      }

      getSetMillisecond = makeGetSet('Milliseconds', false);

      // FORMATTING

      addFormatToken('z', 0, 0, 'zoneAbbr');
      addFormatToken('zz', 0, 0, 'zoneName');

      // MOMENTS

      function getZoneAbbr() {
          return this._isUTC ? 'UTC' : '';
      }

      function getZoneName() {
          return this._isUTC ? 'Coordinated Universal Time' : '';
      }

      var proto = Moment.prototype;

      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== 'undefined' && Symbol.for != null) {
          proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
              return 'Moment<' + this.format() + '>';
          };
      }
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate(
          'dates accessor is deprecated. Use date instead.',
          getSetDayOfMonth
      );
      proto.months = deprecate(
          'months accessor is deprecated. Use month instead',
          getSetMonth
      );
      proto.years = deprecate(
          'years accessor is deprecated. Use year instead',
          getSetYear
      );
      proto.zone = deprecate(
          'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
          getSetZone
      );
      proto.isDSTShifted = deprecate(
          'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
          isDaylightSavingTimeShifted
      );

      function createUnix(input) {
          return createLocal(input * 1000);
      }

      function createInZone() {
          return createLocal.apply(null, arguments).parseZone();
      }

      function preParsePostFormat(string) {
          return string;
      }

      var proto$1 = Locale.prototype;

      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;

      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;

      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;

      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;

      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;

      function get$1(format, index, field, setter) {
          var locale = getLocale(),
              utc = createUTC().set(setter, index);
          return locale[field](utc, format);
      }

      function listMonthsImpl(format, index, field) {
          if (isNumber(format)) {
              index = format;
              format = undefined;
          }

          format = format || '';

          if (index != null) {
              return get$1(format, index, field, 'month');
          }

          var i,
              out = [];
          for (i = 0; i < 12; i++) {
              out[i] = get$1(format, i, field, 'month');
          }
          return out;
      }

      // ()
      // (5)
      // (fmt, 5)
      // (fmt)
      // (true)
      // (true, 5)
      // (true, fmt, 5)
      // (true, fmt)
      function listWeekdaysImpl(localeSorted, format, index, field) {
          if (typeof localeSorted === 'boolean') {
              if (isNumber(format)) {
                  index = format;
                  format = undefined;
              }

              format = format || '';
          } else {
              format = localeSorted;
              index = format;
              localeSorted = false;

              if (isNumber(format)) {
                  index = format;
                  format = undefined;
              }

              format = format || '';
          }

          var locale = getLocale(),
              shift = localeSorted ? locale._week.dow : 0,
              i,
              out = [];

          if (index != null) {
              return get$1(format, (index + shift) % 7, field, 'day');
          }

          for (i = 0; i < 7; i++) {
              out[i] = get$1(format, (i + shift) % 7, field, 'day');
          }
          return out;
      }

      function listMonths(format, index) {
          return listMonthsImpl(format, index, 'months');
      }

      function listMonthsShort(format, index) {
          return listMonthsImpl(format, index, 'monthsShort');
      }

      function listWeekdays(localeSorted, format, index) {
          return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
      }

      function listWeekdaysShort(localeSorted, format, index) {
          return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
      }

      function listWeekdaysMin(localeSorted, format, index) {
          return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
      }

      getSetGlobalLocale('en', {
          eras: [
              {
                  since: '0001-01-01',
                  until: +Infinity,
                  offset: 1,
                  name: 'Anno Domini',
                  narrow: 'AD',
                  abbr: 'AD',
              },
              {
                  since: '0000-12-31',
                  until: -Infinity,
                  offset: 1,
                  name: 'Before Christ',
                  narrow: 'BC',
                  abbr: 'BC',
              },
          ],
          dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
          ordinal: function (number) {
              var b = number % 10,
                  output =
                      toInt((number % 100) / 10) === 1
                          ? 'th'
                          : b === 1
                          ? 'st'
                          : b === 2
                          ? 'nd'
                          : b === 3
                          ? 'rd'
                          : 'th';
              return number + output;
          },
      });

      // Side effect imports

      hooks.lang = deprecate(
          'moment.lang is deprecated. Use moment.locale instead.',
          getSetGlobalLocale
      );
      hooks.langData = deprecate(
          'moment.langData is deprecated. Use moment.localeData instead.',
          getLocale
      );

      var mathAbs = Math.abs;

      function abs() {
          var data = this._data;

          this._milliseconds = mathAbs(this._milliseconds);
          this._days = mathAbs(this._days);
          this._months = mathAbs(this._months);

          data.milliseconds = mathAbs(data.milliseconds);
          data.seconds = mathAbs(data.seconds);
          data.minutes = mathAbs(data.minutes);
          data.hours = mathAbs(data.hours);
          data.months = mathAbs(data.months);
          data.years = mathAbs(data.years);

          return this;
      }

      function addSubtract$1(duration, input, value, direction) {
          var other = createDuration(input, value);

          duration._milliseconds += direction * other._milliseconds;
          duration._days += direction * other._days;
          duration._months += direction * other._months;

          return duration._bubble();
      }

      // supports only 2.0-style add(1, 's') or add(duration)
      function add$1(input, value) {
          return addSubtract$1(this, input, value, 1);
      }

      // supports only 2.0-style subtract(1, 's') or subtract(duration)
      function subtract$1(input, value) {
          return addSubtract$1(this, input, value, -1);
      }

      function absCeil(number) {
          if (number < 0) {
              return Math.floor(number);
          } else {
              return Math.ceil(number);
          }
      }

      function bubble() {
          var milliseconds = this._milliseconds,
              days = this._days,
              months = this._months,
              data = this._data,
              seconds,
              minutes,
              hours,
              years,
              monthsFromDays;

          // if we have a mix of positive and negative values, bubble down first
          // check: https://github.com/moment/moment/issues/2166
          if (
              !(
                  (milliseconds >= 0 && days >= 0 && months >= 0) ||
                  (milliseconds <= 0 && days <= 0 && months <= 0)
              )
          ) {
              milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
              days = 0;
              months = 0;
          }

          // The following code bubbles up values, see the tests for
          // examples of what that means.
          data.milliseconds = milliseconds % 1000;

          seconds = absFloor(milliseconds / 1000);
          data.seconds = seconds % 60;

          minutes = absFloor(seconds / 60);
          data.minutes = minutes % 60;

          hours = absFloor(minutes / 60);
          data.hours = hours % 24;

          days += absFloor(hours / 24);

          // convert days to months
          monthsFromDays = absFloor(daysToMonths(days));
          months += monthsFromDays;
          days -= absCeil(monthsToDays(monthsFromDays));

          // 12 months -> 1 year
          years = absFloor(months / 12);
          months %= 12;

          data.days = days;
          data.months = months;
          data.years = years;

          return this;
      }

      function daysToMonths(days) {
          // 400 years have 146097 days (taking into account leap year rules)
          // 400 years have 12 months === 4800
          return (days * 4800) / 146097;
      }

      function monthsToDays(months) {
          // the reverse of daysToMonths
          return (months * 146097) / 4800;
      }

      function as(units) {
          if (!this.isValid()) {
              return NaN;
          }
          var days,
              months,
              milliseconds = this._milliseconds;

          units = normalizeUnits(units);

          if (units === 'month' || units === 'quarter' || units === 'year') {
              days = this._days + milliseconds / 864e5;
              months = this._months + daysToMonths(days);
              switch (units) {
                  case 'month':
                      return months;
                  case 'quarter':
                      return months / 3;
                  case 'year':
                      return months / 12;
              }
          } else {
              // handle milliseconds separately because of floating point math errors (issue #1867)
              days = this._days + Math.round(monthsToDays(this._months));
              switch (units) {
                  case 'week':
                      return days / 7 + milliseconds / 6048e5;
                  case 'day':
                      return days + milliseconds / 864e5;
                  case 'hour':
                      return days * 24 + milliseconds / 36e5;
                  case 'minute':
                      return days * 1440 + milliseconds / 6e4;
                  case 'second':
                      return days * 86400 + milliseconds / 1000;
                  // Math.floor prevents floating point math errors here
                  case 'millisecond':
                      return Math.floor(days * 864e5) + milliseconds;
                  default:
                      throw new Error('Unknown unit ' + units);
              }
          }
      }

      // TODO: Use this.as('ms')?
      function valueOf$1() {
          if (!this.isValid()) {
              return NaN;
          }
          return (
              this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6
          );
      }

      function makeAs(alias) {
          return function () {
              return this.as(alias);
          };
      }

      var asMilliseconds = makeAs('ms'),
          asSeconds = makeAs('s'),
          asMinutes = makeAs('m'),
          asHours = makeAs('h'),
          asDays = makeAs('d'),
          asWeeks = makeAs('w'),
          asMonths = makeAs('M'),
          asQuarters = makeAs('Q'),
          asYears = makeAs('y');

      function clone$1() {
          return createDuration(this);
      }

      function get$2(units) {
          units = normalizeUnits(units);
          return this.isValid() ? this[units + 's']() : NaN;
      }

      function makeGetter(name) {
          return function () {
              return this.isValid() ? this._data[name] : NaN;
          };
      }

      var milliseconds = makeGetter('milliseconds'),
          seconds = makeGetter('seconds'),
          minutes = makeGetter('minutes'),
          hours = makeGetter('hours'),
          days = makeGetter('days'),
          months = makeGetter('months'),
          years = makeGetter('years');

      function weeks() {
          return absFloor(this.days() / 7);
      }

      var round = Math.round,
          thresholds = {
              ss: 44, // a few seconds to seconds
              s: 45, // seconds to minute
              m: 45, // minutes to hour
              h: 22, // hours to day
              d: 26, // days to month/week
              w: null, // weeks to month
              M: 11, // months to year
          };

      // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
          return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }

      function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
          var duration = createDuration(posNegDuration).abs(),
              seconds = round(duration.as('s')),
              minutes = round(duration.as('m')),
              hours = round(duration.as('h')),
              days = round(duration.as('d')),
              months = round(duration.as('M')),
              weeks = round(duration.as('w')),
              years = round(duration.as('y')),
              a =
                  (seconds <= thresholds.ss && ['s', seconds]) ||
                  (seconds < thresholds.s && ['ss', seconds]) ||
                  (minutes <= 1 && ['m']) ||
                  (minutes < thresholds.m && ['mm', minutes]) ||
                  (hours <= 1 && ['h']) ||
                  (hours < thresholds.h && ['hh', hours]) ||
                  (days <= 1 && ['d']) ||
                  (days < thresholds.d && ['dd', days]);

          if (thresholds.w != null) {
              a =
                  a ||
                  (weeks <= 1 && ['w']) ||
                  (weeks < thresholds.w && ['ww', weeks]);
          }
          a = a ||
              (months <= 1 && ['M']) ||
              (months < thresholds.M && ['MM', months]) ||
              (years <= 1 && ['y']) || ['yy', years];

          a[2] = withoutSuffix;
          a[3] = +posNegDuration > 0;
          a[4] = locale;
          return substituteTimeAgo.apply(null, a);
      }

      // This function allows you to set the rounding function for relative time strings
      function getSetRelativeTimeRounding(roundingFunction) {
          if (roundingFunction === undefined) {
              return round;
          }
          if (typeof roundingFunction === 'function') {
              round = roundingFunction;
              return true;
          }
          return false;
      }

      // This function allows you to set a threshold for relative time strings
      function getSetRelativeTimeThreshold(threshold, limit) {
          if (thresholds[threshold] === undefined) {
              return false;
          }
          if (limit === undefined) {
              return thresholds[threshold];
          }
          thresholds[threshold] = limit;
          if (threshold === 's') {
              thresholds.ss = limit - 1;
          }
          return true;
      }

      function humanize(argWithSuffix, argThresholds) {
          if (!this.isValid()) {
              return this.localeData().invalidDate();
          }

          var withSuffix = false,
              th = thresholds,
              locale,
              output;

          if (typeof argWithSuffix === 'object') {
              argThresholds = argWithSuffix;
              argWithSuffix = false;
          }
          if (typeof argWithSuffix === 'boolean') {
              withSuffix = argWithSuffix;
          }
          if (typeof argThresholds === 'object') {
              th = Object.assign({}, thresholds, argThresholds);
              if (argThresholds.s != null && argThresholds.ss == null) {
                  th.ss = argThresholds.s - 1;
              }
          }

          locale = this.localeData();
          output = relativeTime$1(this, !withSuffix, th, locale);

          if (withSuffix) {
              output = locale.pastFuture(+this, output);
          }

          return locale.postformat(output);
      }

      var abs$1 = Math.abs;

      function sign(x) {
          return (x > 0) - (x < 0) || +x;
      }

      function toISOString$1() {
          // for ISO strings we do not use the normal bubbling rules:
          //  * milliseconds bubble up until they become hours
          //  * days do not bubble at all
          //  * months bubble up until they become years
          // This is because there is no context-free conversion between hours and days
          // (think of clock changes)
          // and also not between days and months (28-31 days per month)
          if (!this.isValid()) {
              return this.localeData().invalidDate();
          }

          var seconds = abs$1(this._milliseconds) / 1000,
              days = abs$1(this._days),
              months = abs$1(this._months),
              minutes,
              hours,
              years,
              s,
              total = this.asSeconds(),
              totalSign,
              ymSign,
              daysSign,
              hmsSign;

          if (!total) {
              // this is the same as C#'s (Noda) and python (isodate)...
              // but not other JS (goog.date)
              return 'P0D';
          }

          // 3600 seconds -> 60 minutes -> 1 hour
          minutes = absFloor(seconds / 60);
          hours = absFloor(minutes / 60);
          seconds %= 60;
          minutes %= 60;

          // 12 months -> 1 year
          years = absFloor(months / 12);
          months %= 12;

          // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
          s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

          totalSign = total < 0 ? '-' : '';
          ymSign = sign(this._months) !== sign(total) ? '-' : '';
          daysSign = sign(this._days) !== sign(total) ? '-' : '';
          hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

          return (
              totalSign +
              'P' +
              (years ? ymSign + years + 'Y' : '') +
              (months ? ymSign + months + 'M' : '') +
              (days ? daysSign + days + 'D' : '') +
              (hours || minutes || seconds ? 'T' : '') +
              (hours ? hmsSign + hours + 'H' : '') +
              (minutes ? hmsSign + minutes + 'M' : '') +
              (seconds ? hmsSign + s + 'S' : '')
          );
      }

      var proto$2 = Duration.prototype;

      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;

      proto$2.toIsoString = deprecate(
          'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
          toISOString$1
      );
      proto$2.lang = lang;

      // FORMATTING

      addFormatToken('X', 0, 0, 'unix');
      addFormatToken('x', 0, 0, 'valueOf');

      // PARSING

      addRegexToken('x', matchSigned);
      addRegexToken('X', matchTimestamp);
      addParseToken('X', function (input, array, config) {
          config._d = new Date(parseFloat(input) * 1000);
      });
      addParseToken('x', function (input, array, config) {
          config._d = new Date(toInt(input));
      });

      //! moment.js

      hooks.version = '2.29.1';

      setHookCallback(createLocal);

      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;

      // currently HTML5 input type only supports 24-hour formats
      hooks.HTML5_FMT = {
          DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
          DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
          DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
          DATE: 'YYYY-MM-DD', // <input type="date" />
          TIME: 'HH:mm', // <input type="time" />
          TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
          TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
          WEEK: 'GGGG-[W]WW', // <input type="week" />
          MONTH: 'YYYY-MM', // <input type="month" />
      };

      return hooks;

  })));
  });

  var moment$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), moment, {
    'default': moment
  }));

  // https://github.com/moment/moment/issues/3650
  function interopDefault(m) {
    return m["default"] || m;
  }

  // export interface ModalLocale {
  //   okText: string;
  //   cancelText: string;
  //   justOkText: string;
  // }

  var runtimeLocale = _extends$1({}, defaultLocale.Modal);

  function changeConfirmLocale(newLocale) {
    if (newLocale) {
      runtimeLocale = _extends$1({}, runtimeLocale, newLocale);
    } else {
      runtimeLocale = _extends$1({}, defaultLocale.Modal);
    }
  }

  function getConfirmLocale() {
    return runtimeLocale;
  }

  /* eslint-disable no-console */
  var warned = {};

  function warning(valid, message) {
    // Support uglify
    if (process.env.NODE_ENV !== 'production' && !valid && console !== undefined) {
      console.error('Warning: ' + message);
    }
  }

  function call(method, valid, message) {
    if (!valid && !warned[message]) {
      method(false, message);
      warned[message] = true;
    }
  }

  function warningOnce(valid, message) {
    call(warning, valid, message);
  }
  /* eslint-enable */

  var warning$1 = (function (valid, component) {
    var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

    warningOnce(valid, '[antdv: ' + component + '] ' + message);
  });

  // export interface Locale {
  //   locale: string;
  //   Pagination?: Object;
  //   DatePicker?: Object;
  //   TimePicker?: Object;
  //   Calendar?: Object;
  //   Table?: Object;
  //   Modal?: ModalLocale;
  //   Popconfirm?: Object;
  //   Transfer?: Object;
  //   Select?: Object;
  //   Upload?: Object;
  // }
  var ANT_MARK = 'internalMark';
  function setMomentLocale(locale) {
    if (locale && locale.locale) {
      interopDefault(moment$1).locale(locale.locale);
    } else {
      interopDefault(moment$1).locale('en');
    }
  }

  var LocaleProvider = {
    name: 'ALocaleProvider',
    props: {
      locale: VuePropTypes.object.def(function () {
        return {};
      }),
      _ANT_MARK__: VuePropTypes.string
    },
    data: function data() {
      warning$1(this._ANT_MARK__ === ANT_MARK, 'LocaleProvider', '`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead');
      return {
        antLocale: _extends$1({}, this.locale, {
          exist: true
        })
      };
    },
    provide: function provide() {
      return {
        localeData: this.$data
      };
    },

    watch: {
      locale: function locale(val) {
        this.antLocale = _extends$1({}, this.locale, {
          exist: true
        });
        setMomentLocale(val);
        changeConfirmLocale(val && val.Modal);
      }
    },
    created: function created() {
      var locale = this.locale;

      setMomentLocale(locale);
      changeConfirmLocale(locale && locale.Modal);
    },
    beforeDestroy: function beforeDestroy() {
      changeConfirmLocale();
    },
    render: function render() {
      return this.$slots['default'] ? this.$slots['default'][0] : null;
    }
  };

  /* istanbul ignore next */
  LocaleProvider.install = function (Vue) {
    Vue.use(base);
    Vue.component(LocaleProvider.name, LocaleProvider);
  };

  function getWatch() {
    var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var watch = {};
    keys.forEach(function (k) {
      watch[k] = function (value) {
        this._proxyVm._data[k] = value;
      };
    });
    return watch;
  }

  var ConfigProvider = {
    name: 'AConfigProvider',
    props: {
      getPopupContainer: VuePropTypes.func,
      prefixCls: VuePropTypes.string,
      renderEmpty: VuePropTypes.func,
      csp: VuePropTypes.object,
      autoInsertSpaceInButton: VuePropTypes.bool,
      locale: VuePropTypes.object,
      pageHeader: VuePropTypes.object,
      transformCellText: VuePropTypes.func
    },
    provide: function provide() {
      var _self = this;
      this._proxyVm = new Vue({
        data: function data() {
          return _extends$1({}, _self.$props, {
            getPrefixCls: _self.getPrefixCls,
            renderEmpty: _self.renderEmptyComponent
          });
        }
      });
      return {
        configProvider: this._proxyVm._data
      };
    },

    watch: _extends$1({}, getWatch(['prefixCls', 'csp', 'autoInsertSpaceInButton', 'locale', 'pageHeader', 'transformCellText'])),
    methods: {
      renderEmptyComponent: function renderEmptyComponent(h, name) {
        var renderEmpty$1 = getComponentFromProp(this, 'renderEmpty', {}, false) || renderEmpty;
        return renderEmpty$1(h, name);
      },
      getPrefixCls: function getPrefixCls(suffixCls, customizePrefixCls) {
        var _$props$prefixCls = this.$props.prefixCls,
            prefixCls = _$props$prefixCls === undefined ? 'ant' : _$props$prefixCls;

        if (customizePrefixCls) return customizePrefixCls;
        return suffixCls ? prefixCls + '-' + suffixCls : prefixCls;
      },
      renderProvider: function renderProvider(legacyLocale) {
        var h = this.$createElement;

        return h(
          LocaleProvider,
          {
            attrs: { locale: this.locale || legacyLocale, _ANT_MARK__: ANT_MARK }
          },
          [this.$slots['default'] ? filterEmpty(this.$slots['default'])[0] : null]
        );
      }
    },

    render: function render() {
      var _this = this;

      var h = arguments[0];

      return h(LocaleReceiver, {
        scopedSlots: { 'default': function _default(_, __, legacyLocale) {
            return _this.renderProvider(legacyLocale);
          } }
      });
    }
  };

  var ConfigConsumerProps = {
    getPrefixCls: function getPrefixCls(suffixCls, customizePrefixCls) {
      if (customizePrefixCls) return customizePrefixCls;
      return 'ant-' + suffixCls;
    },
    renderEmpty: renderEmpty
  };

  /* istanbul ignore next */
  ConfigProvider.install = function (Vue) {
    Vue.use(base);
    Vue.component(ConfigProvider.name, ConfigProvider);
  };

  var EventBaseObject_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  function returnFalse() {
    return false;
  }

  function returnTrue() {
    return true;
  }

  function EventBaseObject() {
    this.timeStamp = Date.now();
    this.target = undefined;
    this.currentTarget = undefined;
  }

  EventBaseObject.prototype = {
    isEventObject: 1,

    constructor: EventBaseObject,

    isDefaultPrevented: returnFalse,

    isPropagationStopped: returnFalse,

    isImmediatePropagationStopped: returnFalse,

    preventDefault: function preventDefault() {
      this.isDefaultPrevented = returnTrue;
    },

    stopPropagation: function stopPropagation() {
      this.isPropagationStopped = returnTrue;
    },

    stopImmediatePropagation: function stopImmediatePropagation() {
      this.isImmediatePropagationStopped = returnTrue;
      // fixed 1.2
      // call stopPropagation implicitly
      this.stopPropagation();
    },

    halt: function halt(immediate) {
      if (immediate) {
        this.stopImmediatePropagation();
      } else {
        this.stopPropagation();
      }
      this.preventDefault();
    }
  };

  exports["default"] = EventBaseObject;
  module.exports = exports["default"];
  });

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty$4 = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject$1(val) {
  	if (val === null || val === undefined) {
  		throw new TypeError('Object.assign cannot be called with null or undefined');
  	}

  	return Object(val);
  }

  function shouldUseNative() {
  	try {
  		if (!Object.assign) {
  			return false;
  		}

  		// Detect buggy property enumeration order in older V8 versions.

  		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
  		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
  		test1[5] = 'de';
  		if (Object.getOwnPropertyNames(test1)[0] === '5') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test2 = {};
  		for (var i = 0; i < 10; i++) {
  			test2['_' + String.fromCharCode(i)] = i;
  		}
  		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
  			return test2[n];
  		});
  		if (order2.join('') !== '0123456789') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test3 = {};
  		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
  			test3[letter] = letter;
  		});
  		if (Object.keys(Object.assign({}, test3)).join('') !==
  				'abcdefghijklmnopqrst') {
  			return false;
  		}

  		return true;
  	} catch (err) {
  		// We don't expect any of the above to throw, but better to be safe.
  		return false;
  	}
  }

  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
  	var from;
  	var to = toObject$1(target);
  	var symbols;

  	for (var s = 1; s < arguments.length; s++) {
  		from = Object(arguments[s]);

  		for (var key in from) {
  			if (hasOwnProperty$4.call(from, key)) {
  				to[key] = from[key];
  			}
  		}

  		if (getOwnPropertySymbols) {
  			symbols = getOwnPropertySymbols(from);
  			for (var i = 0; i < symbols.length; i++) {
  				if (propIsEnumerable.call(from, symbols[i])) {
  					to[symbols[i]] = from[symbols[i]];
  				}
  			}
  		}
  	}

  	return to;
  };

  var EventObject = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }



  var _EventBaseObject2 = _interopRequireDefault(EventBaseObject_1);



  var _objectAssign2 = _interopRequireDefault(objectAssign);

  var TRUE = true;
  var FALSE = false;
  var commonProps = ['altKey', 'bubbles', 'cancelable', 'ctrlKey', 'currentTarget', 'eventPhase', 'metaKey', 'shiftKey', 'target', 'timeStamp', 'view', 'type'];

  function isNullOrUndefined(w) {
    return w === null || w === undefined;
  }

  var eventNormalizers = [{
    reg: /^key/,
    props: ['char', 'charCode', 'key', 'keyCode', 'which'],
    fix: function fix(event, nativeEvent) {
      if (isNullOrUndefined(event.which)) {
        event.which = !isNullOrUndefined(nativeEvent.charCode) ? nativeEvent.charCode : nativeEvent.keyCode;
      }

      // add metaKey to non-Mac browsers (use ctrl for PC 's and Meta for Macs)
      if (event.metaKey === undefined) {
        event.metaKey = event.ctrlKey;
      }
    }
  }, {
    reg: /^touch/,
    props: ['touches', 'changedTouches', 'targetTouches']
  }, {
    reg: /^hashchange$/,
    props: ['newURL', 'oldURL']
  }, {
    reg: /^gesturechange$/i,
    props: ['rotation', 'scale']
  }, {
    reg: /^(mousewheel|DOMMouseScroll)$/,
    props: [],
    fix: function fix(event, nativeEvent) {
      var deltaX = undefined;
      var deltaY = undefined;
      var delta = undefined;
      var wheelDelta = nativeEvent.wheelDelta;
      var axis = nativeEvent.axis;
      var wheelDeltaY = nativeEvent.wheelDeltaY;
      var wheelDeltaX = nativeEvent.wheelDeltaX;
      var detail = nativeEvent.detail;

      // ie/webkit
      if (wheelDelta) {
        delta = wheelDelta / 120;
      }

      // gecko
      if (detail) {
        // press control e.detail == 1 else e.detail == 3
        delta = 0 - (detail % 3 === 0 ? detail / 3 : detail);
      }

      // Gecko
      if (axis !== undefined) {
        if (axis === event.HORIZONTAL_AXIS) {
          deltaY = 0;
          deltaX = 0 - delta;
        } else if (axis === event.VERTICAL_AXIS) {
          deltaX = 0;
          deltaY = delta;
        }
      }

      // Webkit
      if (wheelDeltaY !== undefined) {
        deltaY = wheelDeltaY / 120;
      }
      if (wheelDeltaX !== undefined) {
        deltaX = -1 * wheelDeltaX / 120;
      }

      // 默认 deltaY (ie)
      if (!deltaX && !deltaY) {
        deltaY = delta;
      }

      if (deltaX !== undefined) {
        /**
         * deltaX of mousewheel event
         * @property deltaX
         * @member Event.DomEvent.Object
         */
        event.deltaX = deltaX;
      }

      if (deltaY !== undefined) {
        /**
         * deltaY of mousewheel event
         * @property deltaY
         * @member Event.DomEvent.Object
         */
        event.deltaY = deltaY;
      }

      if (delta !== undefined) {
        /**
         * delta of mousewheel event
         * @property delta
         * @member Event.DomEvent.Object
         */
        event.delta = delta;
      }
    }
  }, {
    reg: /^mouse|contextmenu|click|mspointer|(^DOMMouseScroll$)/i,
    props: ['buttons', 'clientX', 'clientY', 'button', 'offsetX', 'relatedTarget', 'which', 'fromElement', 'toElement', 'offsetY', 'pageX', 'pageY', 'screenX', 'screenY'],
    fix: function fix(event, nativeEvent) {
      var eventDoc = undefined;
      var doc = undefined;
      var body = undefined;
      var target = event.target;
      var button = nativeEvent.button;

      // Calculate pageX/Y if missing and clientX/Y available
      if (target && isNullOrUndefined(event.pageX) && !isNullOrUndefined(nativeEvent.clientX)) {
        eventDoc = target.ownerDocument || document;
        doc = eventDoc.documentElement;
        body = eventDoc.body;
        event.pageX = nativeEvent.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
        event.pageY = nativeEvent.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
      }

      // which for click: 1 === left; 2 === middle; 3 === right
      // do not use button
      if (!event.which && button !== undefined) {
        if (button & 1) {
          event.which = 1;
        } else if (button & 2) {
          event.which = 3;
        } else if (button & 4) {
          event.which = 2;
        } else {
          event.which = 0;
        }
      }

      // add relatedTarget, if necessary
      if (!event.relatedTarget && event.fromElement) {
        event.relatedTarget = event.fromElement === target ? event.toElement : event.fromElement;
      }

      return event;
    }
  }];

  function retTrue() {
    return TRUE;
  }

  function retFalse() {
    return FALSE;
  }

  function DomEventObject(nativeEvent) {
    var type = nativeEvent.type;

    var isNative = typeof nativeEvent.stopPropagation === 'function' || typeof nativeEvent.cancelBubble === 'boolean';

    _EventBaseObject2['default'].call(this);

    this.nativeEvent = nativeEvent;

    // in case dom event has been mark as default prevented by lower dom node
    var isDefaultPrevented = retFalse;
    if ('defaultPrevented' in nativeEvent) {
      isDefaultPrevented = nativeEvent.defaultPrevented ? retTrue : retFalse;
    } else if ('getPreventDefault' in nativeEvent) {
      // https://bugzilla.mozilla.org/show_bug.cgi?id=691151
      isDefaultPrevented = nativeEvent.getPreventDefault() ? retTrue : retFalse;
    } else if ('returnValue' in nativeEvent) {
      isDefaultPrevented = nativeEvent.returnValue === FALSE ? retTrue : retFalse;
    }

    this.isDefaultPrevented = isDefaultPrevented;

    var fixFns = [];
    var fixFn = undefined;
    var l = undefined;
    var prop = undefined;
    var props = commonProps.concat();

    eventNormalizers.forEach(function (normalizer) {
      if (type.match(normalizer.reg)) {
        props = props.concat(normalizer.props);
        if (normalizer.fix) {
          fixFns.push(normalizer.fix);
        }
      }
    });

    l = props.length;

    // clone properties of the original event object
    while (l) {
      prop = props[--l];
      this[prop] = nativeEvent[prop];
    }

    // fix target property, if necessary
    if (!this.target && isNative) {
      this.target = nativeEvent.srcElement || document; // srcElement might not be defined either
    }

    // check if target is a text node (safari)
    if (this.target && this.target.nodeType === 3) {
      this.target = this.target.parentNode;
    }

    l = fixFns.length;

    while (l) {
      fixFn = fixFns[--l];
      fixFn(this, nativeEvent);
    }

    this.timeStamp = nativeEvent.timeStamp || Date.now();
  }

  var EventBaseObjectProto = _EventBaseObject2['default'].prototype;

  (0, _objectAssign2['default'])(DomEventObject.prototype, EventBaseObjectProto, {
    constructor: DomEventObject,

    preventDefault: function preventDefault() {
      var e = this.nativeEvent;

      // if preventDefault exists run it on the original event
      if (e.preventDefault) {
        e.preventDefault();
      } else {
        // otherwise set the returnValue property of the original event to FALSE (IE)
        e.returnValue = FALSE;
      }

      EventBaseObjectProto.preventDefault.call(this);
    },

    stopPropagation: function stopPropagation() {
      var e = this.nativeEvent;

      // if stopPropagation exists run it on the original event
      if (e.stopPropagation) {
        e.stopPropagation();
      } else {
        // otherwise set the cancelBubble property of the original event to TRUE (IE)
        e.cancelBubble = TRUE;
      }

      EventBaseObjectProto.stopPropagation.call(this);
    }
  });

  exports['default'] = DomEventObject;
  module.exports = exports['default'];
  });

  var lib = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  exports['default'] = addEventListener;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }



  var _EventObject2 = _interopRequireDefault(EventObject);

  function addEventListener(target, eventType, callback, option) {
    function wrapCallback(e) {
      var ne = new _EventObject2['default'](e);
      callback.call(target, ne);
    }

    if (target.addEventListener) {
      var _ret = (function () {
        var useCapture = false;
        if (typeof option === 'object') {
          useCapture = option.capture || false;
        } else if (typeof option === 'boolean') {
          useCapture = option;
        }

        target.addEventListener(eventType, wrapCallback, option || false);

        return {
          v: {
            remove: function remove() {
              target.removeEventListener(eventType, wrapCallback, useCapture);
            }
          }
        };
      })();

      if (typeof _ret === 'object') return _ret.v;
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, wrapCallback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, wrapCallback);
        }
      };
    }
  }

  module.exports = exports['default'];
  });

  var addDOMEventListener = /*@__PURE__*/getDefaultExportFromCjs(lib);

  function addEventListenerWrap(target, eventType, cb, option) {
    return addDOMEventListener(target, eventType, cb, option);
  }

  function getTargetRect(target) {
    return target !== window ? target.getBoundingClientRect() : { top: 0, bottom: window.innerHeight };
  }

  function getFixedTop(placeholderReact, targetRect, offsetTop) {
    if (offsetTop !== undefined && targetRect.top > placeholderReact.top - offsetTop) {
      return offsetTop + targetRect.top + 'px';
    }
    return undefined;
  }

  function getFixedBottom(placeholderReact, targetRect, offsetBottom) {
    if (offsetBottom !== undefined && targetRect.bottom < placeholderReact.bottom + offsetBottom) {
      var targetBottomOffset = window.innerHeight - targetRect.bottom;
      return offsetBottom + targetBottomOffset + 'px';
    }
    return undefined;
  }

  // ======================== Observer ========================
  var TRIGGER_EVENTS = ['resize', 'scroll', 'touchstart', 'touchmove', 'touchend', 'pageshow', 'load'];

  var observerEntities = [];

  function addObserveTarget(target, affix) {
    if (!target) return;

    var entity = observerEntities.find(function (item) {
      return item.target === target;
    });

    if (entity) {
      entity.affixList.push(affix);
    } else {
      entity = {
        target: target,
        affixList: [affix],
        eventHandlers: {}
      };
      observerEntities.push(entity);

      // Add listener
      TRIGGER_EVENTS.forEach(function (eventName) {
        entity.eventHandlers[eventName] = addEventListenerWrap(target, eventName, function () {
          entity.affixList.forEach(function (targetAffix) {
            targetAffix.lazyUpdatePosition();
          });
        });
      });
    }
  }

  function removeObserveTarget(affix) {
    var observerEntity = observerEntities.find(function (oriObserverEntity) {
      var hasAffix = oriObserverEntity.affixList.some(function (item) {
        return item === affix;
      });
      if (hasAffix) {
        oriObserverEntity.affixList = oriObserverEntity.affixList.filter(function (item) {
          return item !== affix;
        });
      }
      return hasAffix;
    });

    if (observerEntity && observerEntity.affixList.length === 0) {
      observerEntities = observerEntities.filter(function (item) {
        return item !== observerEntity;
      });

      // Remove listener
      TRIGGER_EVENTS.forEach(function (eventName) {
        var handler = observerEntity.eventHandlers[eventName];
        if (handler && handler.remove) {
          handler.remove();
        }
      });
    }
  }

  function getDefaultTarget() {
    return typeof window !== 'undefined' ? window : null;
  }

  // Affix
  var AffixProps = {
    /**
     * 距离窗口顶部达到指定偏移量后触发
     */
    offsetTop: VuePropTypes.number,
    offset: VuePropTypes.number,
    /** 距离窗口底部达到指定偏移量后触发 */
    offsetBottom: VuePropTypes.number,
    /** 固定状态改变时触发的回调函数 */
    // onChange?: (affixed?: boolean) => void;
    /** 设置 Affix 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数 */
    target: VuePropTypes.func.def(getDefaultTarget),
    prefixCls: VuePropTypes.string
  };
  var AffixStatus = {
    None: 'none',
    Prepare: 'Prepare'
  };
  var Affix = {
    name: 'AAffix',
    props: AffixProps,
    mixins: [BaseMixin],
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      return {
        affixStyle: undefined,
        placeholderStyle: undefined,
        status: AffixStatus.None,
        lastAffix: false,
        prevTarget: null
      };
    },
    beforeMount: function beforeMount() {
      this.updatePosition = throttleByAnimationFrame(this.updatePosition);
      this.lazyUpdatePosition = throttleByAnimationFrame(this.lazyUpdatePosition);
    },
    mounted: function mounted() {
      var _this = this;

      var target = this.target;

      if (target) {
        // [Legacy] Wait for parent component ref has its value.
        // We should use target as directly element instead of function which makes element check hard.
        this.timeout = setTimeout(function () {
          addObserveTarget(target(), _this);
          // Mock Event object.
          _this.updatePosition();
        });
      }
    },
    updated: function updated() {
      this.measure();
    },

    watch: {
      target: function target(val) {
        var newTarget = null;
        if (val) {
          newTarget = val() || null;
        }
        if (this.prevTarget !== newTarget) {
          removeObserveTarget(this);
          if (newTarget) {
            addObserveTarget(newTarget, this);
            // Mock Event object.
            this.updatePosition();
          }
          this.prevTarget = newTarget;
        }
      },
      offsetTop: function offsetTop() {
        this.updatePosition();
      },
      offsetBottom: function offsetBottom() {
        this.updatePosition();
      }
    },
    beforeDestroy: function beforeDestroy() {
      clearTimeout(this.timeout);
      removeObserveTarget(this);
      this.updatePosition.cancel();
      // https://github.com/ant-design/ant-design/issues/22683
      this.lazyUpdatePosition.cancel();
    },

    methods: {
      getOffsetTop: function getOffsetTop() {
        var offset = this.offset,
            offsetBottom = this.offsetBottom;
        var offsetTop = this.offsetTop;

        if (typeof offsetTop === 'undefined') {
          offsetTop = offset;
          warning$1(typeof offset === 'undefined', 'Affix', '`offset` is deprecated. Please use `offsetTop` instead.');
        }

        if (offsetBottom === undefined && offsetTop === undefined) {
          offsetTop = 0;
        }
        return offsetTop;
      },
      getOffsetBottom: function getOffsetBottom() {
        return this.offsetBottom;
      },

      // =================== Measure ===================
      measure: function measure() {
        var status = this.status,
            lastAffix = this.lastAffix;
        var target = this.target;

        if (status !== AffixStatus.Prepare || !this.$refs.fixedNode || !this.$refs.placeholderNode || !target) {
          return;
        }

        var offsetTop = this.getOffsetTop();
        var offsetBottom = this.getOffsetBottom();

        var targetNode = target();
        if (!targetNode) {
          return;
        }

        var newState = {
          status: AffixStatus.None
        };
        var targetRect = getTargetRect(targetNode);
        var placeholderReact = getTargetRect(this.$refs.placeholderNode);
        var fixedTop = getFixedTop(placeholderReact, targetRect, offsetTop);
        var fixedBottom = getFixedBottom(placeholderReact, targetRect, offsetBottom);
        if (fixedTop !== undefined) {
          newState.affixStyle = {
            position: 'fixed',
            top: fixedTop,
            width: placeholderReact.width + 'px',
            height: placeholderReact.height + 'px'
          };
          newState.placeholderStyle = {
            width: placeholderReact.width + 'px',
            height: placeholderReact.height + 'px'
          };
        } else if (fixedBottom !== undefined) {
          newState.affixStyle = {
            position: 'fixed',
            bottom: fixedBottom,
            width: placeholderReact.width + 'px',
            height: placeholderReact.height + 'px'
          };
          newState.placeholderStyle = {
            width: placeholderReact.width + 'px',
            height: placeholderReact.height + 'px'
          };
        }

        newState.lastAffix = !!newState.affixStyle;
        if (lastAffix !== newState.lastAffix) {
          this.$emit('change', newState.lastAffix);
        }

        this.setState(newState);
      },


      // @ts-ignore TS6133
      prepareMeasure: function prepareMeasure() {
        this.setState({
          status: AffixStatus.Prepare,
          affixStyle: undefined,
          placeholderStyle: undefined
        });
        this.$forceUpdate();

        // Test if `updatePosition` called
        if (process.env.NODE_ENV === 'test') {
          this.$emit('testUpdatePosition');
        }
      },
      updatePosition: function updatePosition() {
        this.prepareMeasure();
      },
      lazyUpdatePosition: function lazyUpdatePosition() {
        var target = this.target;
        var affixStyle = this.affixStyle;

        // Check position change before measure to make Safari smooth

        if (target && affixStyle) {
          var offsetTop = this.getOffsetTop();
          var offsetBottom = this.getOffsetBottom();

          var targetNode = target();
          if (targetNode && this.$refs.placeholderNode) {
            var targetRect = getTargetRect(targetNode);
            var placeholderReact = getTargetRect(this.$refs.placeholderNode);
            var fixedTop = getFixedTop(placeholderReact, targetRect, offsetTop);
            var fixedBottom = getFixedBottom(placeholderReact, targetRect, offsetBottom);

            if (fixedTop !== undefined && affixStyle.top === fixedTop || fixedBottom !== undefined && affixStyle.bottom === fixedBottom) {
              return;
            }
          }
        }
        // Directly call prepare measure since it's already throttled.
        this.prepareMeasure();
      }
    },

    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      var prefixCls = this.prefixCls,
          affixStyle = this.affixStyle,
          placeholderStyle = this.placeholderStyle,
          $slots = this.$slots,
          $props = this.$props;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var className = classnames(_defineProperty({}, getPrefixCls('affix', prefixCls), affixStyle));

      var props = {
        attrs: omit($props, ['prefixCls', 'offsetTop', 'offsetBottom', 'target'])
      };
      return h(
        VueResizeObserver,
        {
          on: {
            'resize': function resize() {
              _this2.updatePosition();
            }
          }
        },
        [h(
          'div',
          babelHelperVueJsxMergeProps([props, { style: placeholderStyle, ref: 'placeholderNode' }]),
          [h(
            'div',
            { 'class': className, ref: 'fixedNode', style: affixStyle },
            [$slots['default']]
          )]
        )]
      );
    }
  };

  /* istanbul ignore next */
  Affix.install = function (Vue) {
    Vue.use(base);
    Vue.component(Affix.name, Affix);
  };

  function getScroll(target, top) {
    if (typeof window === 'undefined') {
      return 0;
    }

    var prop = top ? 'pageYOffset' : 'pageXOffset';
    var method = top ? 'scrollTop' : 'scrollLeft';
    var isWindow = target === window;

    var ret = isWindow ? target[prop] : target[method];
    // ie6,7,8 standard mode
    if (isWindow && typeof ret !== 'number') {
      ret = window.document.documentElement[method];
    }

    return ret;
  }

  function easeInOutCubic(t, b, c, d) {
    var cc = c - b;
    t /= d / 2;
    if (t < 1) {
      return cc / 2 * t * t * t + b;
    }
    return cc / 2 * ((t -= 2) * t * t + 2) + b;
  }

  // interface ScrollToOptions {
  //   /** Scroll container, default as window */
  //   getContainer?: () => HTMLElement | Window;
  //   /** Scroll end callback */
  //   callback?: () => any;
  //   /** Animation duration, default as 450 */
  //   duration?: number;
  // }

  function scrollTo(y) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _options$getContainer = options.getContainer,
        getContainer = _options$getContainer === undefined ? function () {
      return window;
    } : _options$getContainer,
        callback = options.callback,
        _options$duration = options.duration,
        duration = _options$duration === undefined ? 450 : _options$duration;


    var container = getContainer();
    var scrollTop = getScroll(container, true);
    var startTime = Date.now();

    var frameFunc = function frameFunc() {
      var timestamp = Date.now();
      var time = timestamp - startTime;
      var nextScrollTop = easeInOutCubic(time > duration ? duration : time, scrollTop, y, duration);
      if (container === window) {
        window.scrollTo(window.pageXOffset, nextScrollTop);
      } else {
        container.scrollTop = nextScrollTop;
      }
      if (time < duration) {
        raf_1(frameFunc);
      } else if (typeof callback === 'function') {
        callback();
      }
    };
    raf_1(frameFunc);
  }

  function getDefaultContainer() {
    return window;
  }

  function getOffsetTop(element, container) {
    if (!element) {
      return 0;
    }

    if (!element.getClientRects().length) {
      return 0;
    }

    var rect = element.getBoundingClientRect();

    if (rect.width || rect.height) {
      if (container === window) {
        container = element.ownerDocument.documentElement;
        return rect.top - container.clientTop;
      }
      return rect.top - container.getBoundingClientRect().top;
    }

    return rect.top;
  }

  // function easeInOutCubic(t, b, c, d) {
  //   const cc = c - b;
  //   t /= d / 2;
  //   if (t < 1) {
  //     return (cc / 2) * t * t * t + b;
  //   }
  //   return (cc / 2) * ((t -= 2) * t * t + 2) + b;
  // }

  var sharpMatcherRegx = /#([^#]+)$/;
  // function scrollTo(href, offsetTop = 0, getContainer, callback = () => {}) {
  //   const container = getContainer();
  //   const scrollTop = getScroll(container, true);
  //   const sharpLinkMatch = sharpMatcherRegx.exec(href);
  //   if (!sharpLinkMatch) {
  //     return;
  //   }
  //   const targetElement = document.getElementById(sharpLinkMatch[1]);
  //   if (!targetElement) {
  //     return;
  //   }
  //   const eleOffsetTop = getOffsetTop(targetElement, container);
  //   const targetScrollTop = scrollTop + eleOffsetTop - offsetTop;
  //   const startTime = Date.now();
  //   const frameFunc = () => {
  //     const timestamp = Date.now();
  //     const time = timestamp - startTime;
  //     const nextScrollTop = easeInOutCubic(time, scrollTop, targetScrollTop, 450);
  //     if (container === window) {
  //       window.scrollTo(window.pageXOffset, nextScrollTop);
  //     } else {
  //       container.scrollTop = nextScrollTop;
  //     }
  //     if (time < 450) {
  //       raf(frameFunc);
  //     } else {
  //       callback();
  //     }
  //   };
  //   raf(frameFunc);
  // }

  var AnchorProps = {
    prefixCls: VuePropTypes.string,
    offsetTop: VuePropTypes.number,
    bounds: VuePropTypes.number,
    affix: VuePropTypes.bool,
    showInkInFixed: VuePropTypes.bool,
    getContainer: VuePropTypes.func,
    wrapperClass: VuePropTypes.string,
    wrapperStyle: VuePropTypes.object,
    getCurrentAnchor: VuePropTypes.func,
    targetOffset: VuePropTypes.number
  };

  var Anchor = {
    name: 'AAnchor',
    mixins: [BaseMixin],
    inheritAttrs: false,
    props: initDefaultProps(AnchorProps, {
      affix: true,
      showInkInFixed: false,
      getContainer: getDefaultContainer
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      this.links = [];
      this._sPrefixCls = '';
      return {
        activeLink: null
      };
    },
    provide: function provide() {
      var _this = this;

      return {
        antAnchor: {
          registerLink: function registerLink(link) {
            if (!_this.links.includes(link)) {
              _this.links.push(link);
            }
          },
          unregisterLink: function unregisterLink(link) {
            var index = _this.links.indexOf(link);
            if (index !== -1) {
              _this.links.splice(index, 1);
            }
          },
          $data: this.$data,
          scrollTo: this.handleScrollTo
        },
        antAnchorContext: this
      };
    },
    mounted: function mounted() {
      var _this2 = this;

      this.$nextTick(function () {
        var getContainer = _this2.getContainer;

        _this2.scrollContainer = getContainer();
        _this2.scrollEvent = addEventListenerWrap(_this2.scrollContainer, 'scroll', _this2.handleScroll);
        _this2.handleScroll();
      });
    },
    updated: function updated() {
      var _this3 = this;

      this.$nextTick(function () {
        if (_this3.scrollEvent) {
          var getContainer = _this3.getContainer;

          var currentContainer = getContainer();
          if (_this3.scrollContainer !== currentContainer) {
            _this3.scrollContainer = currentContainer;
            _this3.scrollEvent.remove();
            _this3.scrollEvent = addEventListenerWrap(_this3.scrollContainer, 'scroll', _this3.handleScroll);
            _this3.handleScroll();
          }
        }
        _this3.updateInk();
      });
    },
    beforeDestroy: function beforeDestroy() {
      if (this.scrollEvent) {
        this.scrollEvent.remove();
      }
    },

    methods: {
      getCurrentActiveLink: function getCurrentActiveLink() {
        var offsetTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var bounds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
        var getCurrentAnchor = this.getCurrentAnchor;


        if (typeof getCurrentAnchor === 'function') {
          return getCurrentAnchor();
        }
        var activeLink = '';
        if (typeof document === 'undefined') {
          return activeLink;
        }

        var linkSections = [];
        var getContainer = this.getContainer;

        var container = getContainer();
        this.links.forEach(function (link) {
          var sharpLinkMatch = sharpMatcherRegx.exec(link.toString());
          if (!sharpLinkMatch) {
            return;
          }
          var target = document.getElementById(sharpLinkMatch[1]);
          if (target) {
            var top = getOffsetTop(target, container);
            if (top < offsetTop + bounds) {
              linkSections.push({
                link: link,
                top: top
              });
            }
          }
        });

        if (linkSections.length) {
          var maxSection = linkSections.reduce(function (prev, curr) {
            return curr.top > prev.top ? curr : prev;
          });
          return maxSection.link;
        }
        return '';
      },
      handleScrollTo: function handleScrollTo(link) {
        var _this4 = this;

        var offsetTop = this.offsetTop,
            getContainer = this.getContainer,
            targetOffset = this.targetOffset;


        this.setCurrentActiveLink(link);
        var container = getContainer();
        var scrollTop = getScroll(container, true);
        var sharpLinkMatch = sharpMatcherRegx.exec(link);
        if (!sharpLinkMatch) {
          return;
        }
        var targetElement = document.getElementById(sharpLinkMatch[1]);
        if (!targetElement) {
          return;
        }

        var eleOffsetTop = getOffsetTop(targetElement, container);
        var y = scrollTop + eleOffsetTop;
        y -= targetOffset !== undefined ? targetOffset : offsetTop || 0;
        this.animating = true;

        scrollTo(y, {
          callback: function callback() {
            _this4.animating = false;
          },
          getContainer: getContainer
        });
      },
      setCurrentActiveLink: function setCurrentActiveLink(link) {
        var activeLink = this.activeLink;


        if (activeLink !== link) {
          this.setState({
            activeLink: link
          });
          this.$emit('change', link);
        }
      },
      handleScroll: function handleScroll() {
        if (this.animating) {
          return;
        }
        var offsetTop = this.offsetTop,
            bounds = this.bounds,
            targetOffset = this.targetOffset;

        var currentActiveLink = this.getCurrentActiveLink(targetOffset !== undefined ? targetOffset : offsetTop || 0, bounds);
        this.setCurrentActiveLink(currentActiveLink);
      },
      updateInk: function updateInk() {
        if (typeof document === 'undefined') {
          return;
        }
        var _sPrefixCls = this._sPrefixCls;

        var linkNode = this.$el.getElementsByClassName(_sPrefixCls + '-link-title-active')[0];
        if (linkNode) {
          this.$refs.inkNode.style.top = linkNode.offsetTop + linkNode.clientHeight / 2 - 4.5 + 'px';
        }
      }
    },

    render: function render() {
      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          offsetTop = this.offsetTop,
          affix = this.affix,
          showInkInFixed = this.showInkInFixed,
          activeLink = this.activeLink,
          $slots = this.$slots,
          getContainer = this.getContainer;


      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('anchor', customizePrefixCls);
      this._sPrefixCls = prefixCls;

      var inkClass = classnames(prefixCls + '-ink-ball', {
        visible: activeLink
      });

      var wrapperClass = classnames(this.wrapperClass, prefixCls + '-wrapper');

      var anchorClass = classnames(prefixCls, {
        fixed: !affix && !showInkInFixed
      });

      var wrapperStyle = _extends$1({
        maxHeight: offsetTop ? 'calc(100vh - ' + offsetTop + 'px)' : '100vh'
      }, this.wrapperStyle);

      var anchorContent = h(
        'div',
        { 'class': wrapperClass, style: wrapperStyle },
        [h(
          'div',
          { 'class': anchorClass },
          [h(
            'div',
            { 'class': prefixCls + '-ink' },
            [h('span', { 'class': inkClass, ref: 'inkNode' })]
          ), $slots['default']]
        )]
      );

      return !affix ? anchorContent : h(
        Affix,
        {
          attrs: { offsetTop: offsetTop, target: getContainer }
        },
        [anchorContent]
      );
    }
  };

  var AnchorLinkProps = {
    prefixCls: VuePropTypes.string,
    href: VuePropTypes.string,
    title: VuePropTypes.any,
    target: VuePropTypes.string
  };

  var AnchorLink = {
    name: 'AAnchorLink',
    props: initDefaultProps(AnchorLinkProps, {
      href: '#'
    }),
    inject: {
      antAnchor: { 'default': function _default() {
          return {};
        } },
      antAnchorContext: { 'default': function _default() {
          return {};
        } },
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    watch: {
      href: function href(val, oldVal) {
        var _this = this;

        this.$nextTick(function () {
          _this.antAnchor.unregisterLink(oldVal);
          _this.antAnchor.registerLink(val);
        });
      }
    },

    mounted: function mounted() {
      this.antAnchor.registerLink(this.href);
    },
    beforeDestroy: function beforeDestroy() {
      this.antAnchor.unregisterLink(this.href);
    },

    methods: {
      handleClick: function handleClick(e) {
        this.antAnchor.scrollTo(this.href);
        var scrollTo = this.antAnchor.scrollTo;
        var _$props = this.$props,
            href = _$props.href,
            title = _$props.title;

        if (this.antAnchorContext.$emit) {
          this.antAnchorContext.$emit('click', e, { title: title, href: href });
        }
        scrollTo(href);
      }
    },
    render: function render() {
      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          href = this.href,
          $slots = this.$slots,
          target = this.target;


      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('anchor', customizePrefixCls);

      var title = getComponentFromProp(this, 'title');
      var active = this.antAnchor.$data.activeLink === href;
      var wrapperClassName = classnames(prefixCls + '-link', _defineProperty({}, prefixCls + '-link-active', active));
      var titleClassName = classnames(prefixCls + '-link-title', _defineProperty({}, prefixCls + '-link-title-active', active));
      return h(
        'div',
        { 'class': wrapperClassName },
        [h(
          'a',
          {
            'class': titleClassName,
            attrs: { href: href,
              title: typeof title === 'string' ? title : '',
              target: target
            },
            on: {
              'click': this.handleClick
            }
          },
          [title]
        ), $slots['default']]
      );
    }
  };

  Anchor.Link = AnchorLink;

  /* istanbul ignore next */
  Anchor.install = function (Vue) {
    Vue.use(base);
    Vue.component(Anchor.name, Anchor);
    Vue.component(Anchor.Link.name, Anchor.Link);
  };

  /**
   * @ignore
   * some key-codes definition and utils from closure-library
   * @author yiminghe@gmail.com
   */

  var KeyCode = {
    /**
     * MAC_ENTER
     */
    MAC_ENTER: 3,
    /**
     * BACKSPACE
     */
    BACKSPACE: 8,
    /**
     * TAB
     */
    TAB: 9,
    /**
     * NUMLOCK on FF/Safari Mac
     */
    NUM_CENTER: 12, // NUMLOCK on FF/Safari Mac
    /**
     * ENTER
     */
    ENTER: 13,
    /**
     * SHIFT
     */
    SHIFT: 16,
    /**
     * CTRL
     */
    CTRL: 17,
    /**
     * ALT
     */
    ALT: 18,
    /**
     * PAUSE
     */
    PAUSE: 19,
    /**
     * CAPS_LOCK
     */
    CAPS_LOCK: 20,
    /**
     * ESC
     */
    ESC: 27,
    /**
     * SPACE
     */
    SPACE: 32,
    /**
     * PAGE_UP
     */
    PAGE_UP: 33, // also NUM_NORTH_EAST
    /**
     * PAGE_DOWN
     */
    PAGE_DOWN: 34, // also NUM_SOUTH_EAST
    /**
     * END
     */
    END: 35, // also NUM_SOUTH_WEST
    /**
     * HOME
     */
    HOME: 36, // also NUM_NORTH_WEST
    /**
     * LEFT
     */
    LEFT: 37, // also NUM_WEST
    /**
     * UP
     */
    UP: 38, // also NUM_NORTH
    /**
     * RIGHT
     */
    RIGHT: 39, // also NUM_EAST
    /**
     * DOWN
     */
    DOWN: 40, // also NUM_SOUTH
    /**
     * PRINT_SCREEN
     */
    PRINT_SCREEN: 44,
    /**
     * INSERT
     */
    INSERT: 45, // also NUM_INSERT
    /**
     * DELETE
     */
    DELETE: 46, // also NUM_DELETE
    /**
     * ZERO
     */
    ZERO: 48,
    /**
     * ONE
     */
    ONE: 49,
    /**
     * TWO
     */
    TWO: 50,
    /**
     * THREE
     */
    THREE: 51,
    /**
     * FOUR
     */
    FOUR: 52,
    /**
     * FIVE
     */
    FIVE: 53,
    /**
     * SIX
     */
    SIX: 54,
    /**
     * SEVEN
     */
    SEVEN: 55,
    /**
     * EIGHT
     */
    EIGHT: 56,
    /**
     * NINE
     */
    NINE: 57,
    /**
     * QUESTION_MARK
     */
    QUESTION_MARK: 63, // needs localization
    /**
     * A
     */
    A: 65,
    /**
     * B
     */
    B: 66,
    /**
     * C
     */
    C: 67,
    /**
     * D
     */
    D: 68,
    /**
     * E
     */
    E: 69,
    /**
     * F
     */
    F: 70,
    /**
     * G
     */
    G: 71,
    /**
     * H
     */
    H: 72,
    /**
     * I
     */
    I: 73,
    /**
     * J
     */
    J: 74,
    /**
     * K
     */
    K: 75,
    /**
     * L
     */
    L: 76,
    /**
     * M
     */
    M: 77,
    /**
     * N
     */
    N: 78,
    /**
     * O
     */
    O: 79,
    /**
     * P
     */
    P: 80,
    /**
     * Q
     */
    Q: 81,
    /**
     * R
     */
    R: 82,
    /**
     * S
     */
    S: 83,
    /**
     * T
     */
    T: 84,
    /**
     * U
     */
    U: 85,
    /**
     * V
     */
    V: 86,
    /**
     * W
     */
    W: 87,
    /**
     * X
     */
    X: 88,
    /**
     * Y
     */
    Y: 89,
    /**
     * Z
     */
    Z: 90,
    /**
     * META
     */
    META: 91, // WIN_KEY_LEFT
    /**
     * WIN_KEY_RIGHT
     */
    WIN_KEY_RIGHT: 92,
    /**
     * CONTEXT_MENU
     */
    CONTEXT_MENU: 93,
    /**
     * NUM_ZERO
     */
    NUM_ZERO: 96,
    /**
     * NUM_ONE
     */
    NUM_ONE: 97,
    /**
     * NUM_TWO
     */
    NUM_TWO: 98,
    /**
     * NUM_THREE
     */
    NUM_THREE: 99,
    /**
     * NUM_FOUR
     */
    NUM_FOUR: 100,
    /**
     * NUM_FIVE
     */
    NUM_FIVE: 101,
    /**
     * NUM_SIX
     */
    NUM_SIX: 102,
    /**
     * NUM_SEVEN
     */
    NUM_SEVEN: 103,
    /**
     * NUM_EIGHT
     */
    NUM_EIGHT: 104,
    /**
     * NUM_NINE
     */
    NUM_NINE: 105,
    /**
     * NUM_MULTIPLY
     */
    NUM_MULTIPLY: 106,
    /**
     * NUM_PLUS
     */
    NUM_PLUS: 107,
    /**
     * NUM_MINUS
     */
    NUM_MINUS: 109,
    /**
     * NUM_PERIOD
     */
    NUM_PERIOD: 110,
    /**
     * NUM_DIVISION
     */
    NUM_DIVISION: 111,
    /**
     * F1
     */
    F1: 112,
    /**
     * F2
     */
    F2: 113,
    /**
     * F3
     */
    F3: 114,
    /**
     * F4
     */
    F4: 115,
    /**
     * F5
     */
    F5: 116,
    /**
     * F6
     */
    F6: 117,
    /**
     * F7
     */
    F7: 118,
    /**
     * F8
     */
    F8: 119,
    /**
     * F9
     */
    F9: 120,
    /**
     * F10
     */
    F10: 121,
    /**
     * F11
     */
    F11: 122,
    /**
     * F12
     */
    F12: 123,
    /**
     * NUMLOCK
     */
    NUMLOCK: 144,
    /**
     * SEMICOLON
     */
    SEMICOLON: 186, // needs localization
    /**
     * DASH
     */
    DASH: 189, // needs localization
    /**
     * EQUALS
     */
    EQUALS: 187, // needs localization
    /**
     * COMMA
     */
    COMMA: 188, // needs localization
    /**
     * PERIOD
     */
    PERIOD: 190, // needs localization
    /**
     * SLASH
     */
    SLASH: 191, // needs localization
    /**
     * APOSTROPHE
     */
    APOSTROPHE: 192, // needs localization
    /**
     * SINGLE_QUOTE
     */
    SINGLE_QUOTE: 222, // needs localization
    /**
     * OPEN_SQUARE_BRACKET
     */
    OPEN_SQUARE_BRACKET: 219, // needs localization
    /**
     * BACKSLASH
     */
    BACKSLASH: 220, // needs localization
    /**
     * CLOSE_SQUARE_BRACKET
     */
    CLOSE_SQUARE_BRACKET: 221, // needs localization
    /**
     * WIN_KEY
     */
    WIN_KEY: 224,
    /**
     * MAC_FF_META
     */
    MAC_FF_META: 224, // Firefox (Gecko) fires this for the meta key instead of 91
    /**
     * WIN_IME
     */
    WIN_IME: 229
  };

  /*
   whether text and modified key is entered at the same time.
   */
  KeyCode.isTextModifyingKeyEvent = function isTextModifyingKeyEvent(e) {
    var keyCode = e.keyCode;
    if (e.altKey && !e.ctrlKey || e.metaKey ||
    // Function keys don't generate text
    keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
      return false;
    }

    // The following keys are quite harmless, even in combination with
    // CTRL, ALT or SHIFT.
    switch (keyCode) {
      case KeyCode.ALT:
      case KeyCode.CAPS_LOCK:
      case KeyCode.CONTEXT_MENU:
      case KeyCode.CTRL:
      case KeyCode.DOWN:
      case KeyCode.END:
      case KeyCode.ESC:
      case KeyCode.HOME:
      case KeyCode.INSERT:
      case KeyCode.LEFT:
      case KeyCode.MAC_FF_META:
      case KeyCode.META:
      case KeyCode.NUMLOCK:
      case KeyCode.NUM_CENTER:
      case KeyCode.PAGE_DOWN:
      case KeyCode.PAGE_UP:
      case KeyCode.PAUSE:
      case KeyCode.PRINT_SCREEN:
      case KeyCode.RIGHT:
      case KeyCode.SHIFT:
      case KeyCode.UP:
      case KeyCode.WIN_KEY:
      case KeyCode.WIN_KEY_RIGHT:
        return false;
      default:
        return true;
    }
  };

  /*
   whether character is entered.
   */
  KeyCode.isCharacterKey = function isCharacterKey(keyCode) {
    if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) {
      return true;
    }

    if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) {
      return true;
    }

    if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) {
      return true;
    }

    // Safari sends zero key code for non-latin characters.
    if (window.navigation.userAgent.indexOf('WebKit') !== -1 && keyCode === 0) {
      return true;
    }

    switch (keyCode) {
      case KeyCode.SPACE:
      case KeyCode.QUESTION_MARK:
      case KeyCode.NUM_PLUS:
      case KeyCode.NUM_MINUS:
      case KeyCode.NUM_PERIOD:
      case KeyCode.NUM_DIVISION:
      case KeyCode.SEMICOLON:
      case KeyCode.DASH:
      case KeyCode.EQUALS:
      case KeyCode.COMMA:
      case KeyCode.PERIOD:
      case KeyCode.SLASH:
      case KeyCode.APOSTROPHE:
      case KeyCode.SINGLE_QUOTE:
      case KeyCode.OPEN_SQUARE_BRACKET:
      case KeyCode.BACKSLASH:
      case KeyCode.CLOSE_SQUARE_BRACKET:
        return true;
      default:
        return false;
    }
  };

  var componentIndexof = function(arr, obj){
    if (arr.indexOf) return arr.indexOf(obj);
    for (var i = 0; i < arr.length; ++i) {
      if (arr[i] === obj) return i;
    }
    return -1;
  };

  /**
   * Module dependencies.
   */

  try {
    var index$2 = componentIndexof;
  } catch (err) {
    var index$2 = componentIndexof;
  }

  /**
   * Whitespace regexp.
   */

  var re = /\s+/;

  /**
   * toString reference.
   */

  var toString$4 = Object.prototype.toString;

  /**
   * Wrap `el` in a `ClassList`.
   *
   * @param {Element} el
   * @return {ClassList}
   * @api public
   */

  var componentClasses = function(el){
    return new ClassList(el);
  };

  /**
   * Initialize a new ClassList for `el`.
   *
   * @param {Element} el
   * @api private
   */

  function ClassList(el) {
    if (!el || !el.nodeType) {
      throw new Error('A DOM element reference is required');
    }
    this.el = el;
    this.list = el.classList;
  }

  /**
   * Add class `name` if not already present.
   *
   * @param {String} name
   * @return {ClassList}
   * @api public
   */

  ClassList.prototype.add = function(name){
    // classList
    if (this.list) {
      this.list.add(name);
      return this;
    }

    // fallback
    var arr = this.array();
    var i = index$2(arr, name);
    if (!~i) arr.push(name);
    this.el.className = arr.join(' ');
    return this;
  };

  /**
   * Remove class `name` when present, or
   * pass a regular expression to remove
   * any which match.
   *
   * @param {String|RegExp} name
   * @return {ClassList}
   * @api public
   */

  ClassList.prototype.remove = function(name){
    if ('[object RegExp]' == toString$4.call(name)) {
      return this.removeMatching(name);
    }

    // classList
    if (this.list) {
      this.list.remove(name);
      return this;
    }

    // fallback
    var arr = this.array();
    var i = index$2(arr, name);
    if (~i) arr.splice(i, 1);
    this.el.className = arr.join(' ');
    return this;
  };

  /**
   * Remove all classes matching `re`.
   *
   * @param {RegExp} re
   * @return {ClassList}
   * @api private
   */

  ClassList.prototype.removeMatching = function(re){
    var arr = this.array();
    for (var i = 0; i < arr.length; i++) {
      if (re.test(arr[i])) {
        this.remove(arr[i]);
      }
    }
    return this;
  };

  /**
   * Toggle class `name`, can force state via `force`.
   *
   * For browsers that support classList, but do not support `force` yet,
   * the mistake will be detected and corrected.
   *
   * @param {String} name
   * @param {Boolean} force
   * @return {ClassList}
   * @api public
   */

  ClassList.prototype.toggle = function(name, force){
    // classList
    if (this.list) {
      if ("undefined" !== typeof force) {
        if (force !== this.list.toggle(name, force)) {
          this.list.toggle(name); // toggle again to correct
        }
      } else {
        this.list.toggle(name);
      }
      return this;
    }

    // fallback
    if ("undefined" !== typeof force) {
      if (!force) {
        this.remove(name);
      } else {
        this.add(name);
      }
    } else {
      if (this.has(name)) {
        this.remove(name);
      } else {
        this.add(name);
      }
    }

    return this;
  };

  /**
   * Return an array of classes.
   *
   * @return {Array}
   * @api public
   */

  ClassList.prototype.array = function(){
    var className = this.el.getAttribute('class') || '';
    var str = className.replace(/^\s+|\s+$/g, '');
    var arr = str.split(re);
    if ('' === arr[0]) arr.shift();
    return arr;
  };

  /**
   * Check if class `name` is present.
   *
   * @param {String} name
   * @return {ClassList}
   * @api public
   */

  ClassList.prototype.has =
  ClassList.prototype.contains = function(name){
    return this.list
      ? this.list.contains(name)
      : !! ~index$2(this.array(), name);
  };

  var storeShape = VuePropTypes.shape({
    subscribe: VuePropTypes.func.isRequired,
    setState: VuePropTypes.func.isRequired,
    getState: VuePropTypes.func.isRequired
  });

  var Provider = {
    name: 'StoreProvider',
    props: {
      store: storeShape.isRequired
    },
    provide: function provide() {
      return {
        storeContext: this.$props
      };
    },
    render: function render() {
      return this.$slots['default'][0];
    }
  };

  //

  var shallowequal = function shallowEqual(objA, objB, compare, compareContext) {
    var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

    if (ret !== void 0) {
      return !!ret;
    }

    if (objA === objB) {
      return true;
    }

    if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

    // Test for A's keys different from B.
    for (var idx = 0; idx < keysA.length; idx++) {
      var key = keysA[idx];

      if (!bHasOwnProperty(key)) {
        return false;
      }

      var valueA = objA[key];
      var valueB = objB[key];

      ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

      if (ret === false || (ret === void 0 && valueA !== valueB)) {
        return false;
      }
    }

    return true;
  };

  function getDisplayName(WrappedComponent) {
    return WrappedComponent.name || 'Component';
  }
  function wrapWithConnect(WrappedComponent) {
    var tempProps = WrappedComponent.props || {};
    var methods = WrappedComponent.methods || {};
    var props = {};
    Object.keys(tempProps).forEach(function (k) {
      props[k] = _extends$1({}, tempProps[k], { required: false });
    });
    WrappedComponent.props.__propsSymbol__ = VuePropTypes.any;
    WrappedComponent.props.children = VuePropTypes.array.def([]);
    var ProxyWrappedComponent = {
      props: props,
      model: WrappedComponent.model,
      name: 'Proxy_' + getDisplayName(WrappedComponent),
      methods: {
        getProxyWrappedInstance: function getProxyWrappedInstance() {
          return this.$refs.wrappedInstance;
        }
      },
      render: function render() {
        var h = arguments[0];
        var _$slots = this.$slots,
            $slots = _$slots === undefined ? {} : _$slots,
            $scopedSlots = this.$scopedSlots;

        var props = getOptionProps(this);
        var wrapProps = {
          props: _extends$1({}, props, {
            __propsSymbol__: Symbol(),
            componentWillReceiveProps: _extends$1({}, props),
            children: $slots['default'] || props.children || []
          }),
          on: getListeners(this)
        };
        if (Object.keys($scopedSlots).length) {
          wrapProps.scopedSlots = $scopedSlots;
        }
        var slotsKey = Object.keys($slots);
        return h(
          WrappedComponent,
          babelHelperVueJsxMergeProps([wrapProps, { ref: 'wrappedInstance' }]),
          [slotsKey.length ? slotsKey.map(function (name) {
            return h(
              'template',
              { slot: name },
              [$slots[name]]
            );
          }) : null]
        );
      }
    };
    Object.keys(methods).map(function (m) {
      ProxyWrappedComponent.methods[m] = function () {
        var _getProxyWrappedInsta;

        return (_getProxyWrappedInsta = this.getProxyWrappedInstance())[m].apply(_getProxyWrappedInsta, arguments);
      };
    });
    return ProxyWrappedComponent;
  }

  function getDisplayName$1(WrappedComponent) {
    return WrappedComponent.name || 'Component';
  }

  var defaultMapStateToProps = function defaultMapStateToProps() {
    return {};
  };
  function connect(mapStateToProps, injectExtraPropsKey) {
    var shouldSubscribe = !!mapStateToProps;
    var finalMapStateToProps = mapStateToProps || defaultMapStateToProps;
    return function wrapWithConnect$1(WrappedComponent) {
      var tempProps = omit(WrappedComponent.props || {}, ['store']);
      var props = {
        __propsSymbol__: VuePropTypes.any
      };
      Object.keys(tempProps).forEach(function (k) {
        props[k] = _extends$1({}, tempProps[k], { required: false });
      });
      var Connect = {
        name: 'Connect_' + getDisplayName$1(WrappedComponent),
        props: props,
        inject: _extends$1({
          storeContext: { 'default': function _default() {
              return {};
            } }
        }, injectExtraPropsKey ? {
          injectExtraContext: {
            from: injectExtraPropsKey,
            'default': function _default() {
              return {};
            }
          }
        } : {}),
        computed: {
          injectExtraProps: function injectExtraProps() {
            return this.injectExtraContext ? this.injectExtraContext.$attrs : {};
          },
          injectExtraListeners: function injectExtraListeners() {
            return this.injectExtraContext ? this.injectExtraContext.$listeners : {};
          }
        },
        data: function data() {
          this.store = this.storeContext.store;
          this.preProps = _extends$1({}, omit(getOptionProps(this), ['__propsSymbol__']), this.injectExtraProps);
          return {
            subscribed: finalMapStateToProps(this.store.getState(), _extends$1({}, this.$props, this.injectExtraProps))
          };
        },

        watch: {
          __propsSymbol__: function __propsSymbol__() {
            if (mapStateToProps && mapStateToProps.length === 2) {
              this.subscribed = finalMapStateToProps(this.store.getState(), _extends$1({}, this.$props, this.injectExtraProps));
            }
          }
        },
        mounted: function mounted() {
          this.trySubscribe();
        },
        beforeDestroy: function beforeDestroy() {
          this.tryUnsubscribe();
        },

        methods: {
          handleChange: function handleChange() {
            if (!this.unsubscribe) {
              return;
            }
            var props = _extends$1({}, omit(getOptionProps(this), ['__propsSymbol__']), this.injectExtraProps);
            var nextSubscribed = finalMapStateToProps(this.store.getState(), props);
            if (!shallowequal(this.preProps, props) || !shallowequal(this.subscribed, nextSubscribed)) {
              this.subscribed = nextSubscribed;
            }
          },
          trySubscribe: function trySubscribe() {
            if (shouldSubscribe) {
              this.unsubscribe = this.store.subscribe(this.handleChange);
              this.handleChange();
            }
          },
          tryUnsubscribe: function tryUnsubscribe() {
            if (this.unsubscribe) {
              this.unsubscribe();
              this.unsubscribe = null;
            }
          },
          getWrappedInstance: function getWrappedInstance() {
            return this.$refs.wrappedInstance;
          }
        },
        render: function render() {
          var h = arguments[0];
          var _$slots = this.$slots,
              $slots = _$slots === undefined ? {} : _$slots,
              $scopedSlots = this.$scopedSlots,
              subscribed = this.subscribed,
              store = this.store;

          var props = _extends$1({}, getOptionProps(this), this.injectExtraProps);
          this.preProps = _extends$1({}, omit(props, ['__propsSymbol__']));
          var wrapProps = {
            props: _extends$1({}, props, subscribed, {
              store: store
            }),
            on: _extends$1({}, getListeners(this), this.injectExtraListeners),
            scopedSlots: $scopedSlots
          };
          return h(
            WrappedComponent,
            babelHelperVueJsxMergeProps([wrapProps, { ref: 'wrappedInstance' }]),
            [Object.keys($slots).map(function (name) {
              return h(
                'template',
                { slot: name },
                [$slots[name]]
              );
            })]
          );
        }
      };
      return wrapWithConnect(Connect);
    };
  }

  function create(initialState) {
    var state = initialState;
    var listeners = [];

    function setState(partial) {
      state = _extends$1({}, state, partial);
      for (var i = 0; i < listeners.length; i++) {
        listeners[i]();
      }
    }

    function getState() {
      return state;
    }

    function subscribe(listener) {
      listeners.push(listener);

      return function unsubscribe() {
        var index = listeners.indexOf(listener);
        listeners.splice(index, 1);
      };
    }

    return {
      setState: setState,
      getState: getState,
      subscribe: subscribe
    };
  }

  var objectWithoutProperties = createCommonjsModule(function (module, exports) {

  exports.__esModule = true;

  exports.default = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };
  });

  var _objectWithoutProperties = /*@__PURE__*/getDefaultExportFromCjs(objectWithoutProperties);

  // MIT License from https://github.com/kaimallea/isMobile

  var applePhone = /iPhone/i;
  var appleIpod = /iPod/i;
  var appleTablet = /iPad/i;
  var androidPhone = /\bAndroid(?:.+)Mobile\b/i; // Match 'Android' AND 'Mobile'
  var androidTablet = /Android/i;
  var amazonPhone = /\bAndroid(?:.+)SD4930UR\b/i;
  var amazonTablet = /\bAndroid(?:.+)(?:KF[A-Z]{2,4})\b/i;
  var windowsPhone = /Windows Phone/i;
  var windowsTablet = /\bWindows(?:.+)ARM\b/i; // Match 'Windows' AND 'ARM'
  var otherBlackberry = /BlackBerry/i;
  var otherBlackberry10 = /BB10/i;
  var otherOpera = /Opera Mini/i;
  var otherChrome = /\b(CriOS|Chrome)(?:.+)Mobile/i;
  var otherFirefox = /Mobile(?:.+)Firefox\b/i; // Match 'Mobile' AND 'Firefox'

  function match(regex, userAgent) {
    return regex.test(userAgent);
  }

  function isMobile(userAgent) {
    var ua = userAgent || (typeof navigator !== 'undefined' ? navigator.userAgent : '');

    // Facebook mobile app's integrated browser adds a bunch of strings that
    // match everything. Strip it out if it exists.
    var tmp = ua.split('[FBAN');
    if (typeof tmp[1] !== 'undefined') {
      var _tmp = tmp;

      var _tmp2 = _slicedToArray(_tmp, 1);

      ua = _tmp2[0];
    }

    // Twitter mobile app's integrated browser on iPad adds a "Twitter for
    // iPhone" string. Same probably happens on other tablet platforms.
    // This will confuse detection so strip it out if it exists.
    tmp = ua.split('Twitter');
    if (typeof tmp[1] !== 'undefined') {
      var _tmp3 = tmp;

      var _tmp4 = _slicedToArray(_tmp3, 1);

      ua = _tmp4[0];
    }

    var result = {
      apple: {
        phone: match(applePhone, ua) && !match(windowsPhone, ua),
        ipod: match(appleIpod, ua),
        tablet: !match(applePhone, ua) && match(appleTablet, ua) && !match(windowsPhone, ua),
        device: (match(applePhone, ua) || match(appleIpod, ua) || match(appleTablet, ua)) && !match(windowsPhone, ua)
      },
      amazon: {
        phone: match(amazonPhone, ua),
        tablet: !match(amazonPhone, ua) && match(amazonTablet, ua),
        device: match(amazonPhone, ua) || match(amazonTablet, ua)
      },
      android: {
        phone: !match(windowsPhone, ua) && match(amazonPhone, ua) || !match(windowsPhone, ua) && match(androidPhone, ua),
        tablet: !match(windowsPhone, ua) && !match(amazonPhone, ua) && !match(androidPhone, ua) && (match(amazonTablet, ua) || match(androidTablet, ua)),
        device: !match(windowsPhone, ua) && (match(amazonPhone, ua) || match(amazonTablet, ua) || match(androidPhone, ua) || match(androidTablet, ua)) || match(/\bokhttp\b/i, ua)
      },
      windows: {
        phone: match(windowsPhone, ua),
        tablet: match(windowsTablet, ua),
        device: match(windowsPhone, ua) || match(windowsTablet, ua)
      },
      other: {
        blackberry: match(otherBlackberry, ua),
        blackberry10: match(otherBlackberry10, ua),
        opera: match(otherOpera, ua),
        firefox: match(otherFirefox, ua),
        chrome: match(otherChrome, ua),
        device: match(otherBlackberry, ua) || match(otherBlackberry10, ua) || match(otherOpera, ua) || match(otherFirefox, ua) || match(otherChrome, ua)
      },

      // Additional
      any: null,
      phone: null,
      tablet: null
    };
    result.any = result.apple.device || result.android.device || result.windows.device || result.other.device;

    // excludes 'other' devices and ipods, targeting touchscreen phones
    result.phone = result.apple.phone || result.android.phone || result.windows.phone;
    result.tablet = result.apple.tablet || result.android.tablet || result.windows.tablet;

    return result;
  }

  var defaultResult = _extends$1({}, isMobile(), {
    isMobile: isMobile
  });

  function noop$2() {}

  function getKeyFromChildrenIndex(child, menuEventKey, index) {
    var prefix = menuEventKey || '';
    return child.key === undefined ? prefix + 'item_' + index : child.key;
  }

  function getMenuIdFromSubMenuEventKey(eventKey) {
    return eventKey + '-menu-';
  }

  function loopMenuItem(children, cb) {
    var index = -1;
    children.forEach(function (c) {
      index++;
      if (c && c.type && c.type.isMenuItemGroup) {
        c.$slots['default'].forEach(function (c2) {
          index++;
          c.componentOptions && cb(c2, index);
        });
      } else {
        c.componentOptions && cb(c, index);
      }
    });
  }

  function loopMenuItemRecursively(children, keys, ret) {
    if (!children || ret.find) {
      return;
    }
    children.forEach(function (c) {
      if (ret.find) {
        return;
      }
      if (c.data && c.data.slot && c.data.slot !== 'default') {
        return;
      }
      if (c && c.componentOptions) {
        var options = c.componentOptions.Ctor.options;
        if (!options || !(options.isSubMenu || options.isMenuItem || options.isMenuItemGroup)) {
          return;
        }
        if (keys.indexOf(c.key) !== -1) {
          ret.find = true;
        } else if (c.componentOptions.children) {
          loopMenuItemRecursively(c.componentOptions.children, keys, ret);
        }
      }
    });
  }

  var menuAllProps = {
    props: ['defaultSelectedKeys', 'selectedKeys', 'defaultOpenKeys', 'openKeys', 'mode', 'getPopupContainer', 'openTransitionName', 'openAnimation', 'subMenuOpenDelay', 'subMenuCloseDelay', 'forceSubMenuRender', 'triggerSubMenuAction', 'level', 'selectable', 'multiple', 'visible', 'focusable', 'defaultActiveFirst', 'prefixCls', 'inlineIndent', 'parentMenu', 'title', 'rootPrefixCls', 'eventKey', 'active', 'popupAlign', 'popupOffset', 'isOpen', 'renderMenuItem', 'manualRef', 'subMenuKey', 'disabled', 'index', 'isSelected', 'store', 'activeKey', 'builtinPlacements', 'overflowedIndicator',

    // the following keys found need to be removed from test regression
    'attribute', 'value', 'popupClassName', 'inlineCollapsed', 'menu', 'theme', 'itemIcon', 'expandIcon'],
    on: ['select', 'deselect', 'destroy', 'openChange', 'itemHover', 'titleMouseenter', 'titleMouseleave', 'titleClick']
  };

  // ref: https://github.com/ant-design/ant-design/issues/14007
  // ref: https://bugs.chromium.org/p/chromium/issues/detail?id=360889
  // getBoundingClientRect return the full precision value, which is
  // not the same behavior as on chrome. Set the precision to 6 to
  // unify their behavior
  var getWidth = function getWidth(elem) {
    var width = elem && typeof elem.getBoundingClientRect === 'function' && elem.getBoundingClientRect().width;
    if (width) {
      width = +width.toFixed(6);
    }
    return width || 0;
  };

  var setStyle = function setStyle(elem, styleProperty, value) {
    if (elem && _typeof(elem.style) === 'object') {
      elem.style[styleProperty] = value;
    }
  };

  var isMobileDevice = function isMobileDevice() {
    return defaultResult.any;
  };

  function contains(root, n) {
    var node = n;
    while (node) {
      if (node === root) {
        return true;
      }
      node = node.parentNode;
    }

    return false;
  }

  var availablePrefixs = ['moz', 'ms', 'webkit'];

  function requestAnimationFramePolyfill() {
    var lastTime = 0;
    return function (callback) {
      var currTime = new Date().getTime();
      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
      var id = window.setTimeout(function () {
        callback(currTime + timeToCall);
      }, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
  }

  function getRequestAnimationFrame() {
    if (typeof window === 'undefined') {
      return function () {};
    }
    if (window.requestAnimationFrame) {
      // https://github.com/vuejs/vue/issues/4465
      return window.requestAnimationFrame.bind(window);
    }

    var prefix = availablePrefixs.filter(function (key) {
      return key + 'RequestAnimationFrame' in window;
    })[0];

    return prefix ? window[prefix + 'RequestAnimationFrame'] : requestAnimationFramePolyfill();
  }

  function cancelRequestAnimationFrame(id) {
    if (typeof window === 'undefined') {
      return null;
    }
    if (window.cancelAnimationFrame) {
      return window.cancelAnimationFrame(id);
    }
    var prefix = availablePrefixs.filter(function (key) {
      return key + 'CancelAnimationFrame' in window || key + 'CancelRequestAnimationFrame' in window;
    })[0];

    return prefix ? (window[prefix + 'CancelAnimationFrame'] || window[prefix + 'CancelRequestAnimationFrame']).call(this, id) : clearTimeout(id);
  }

  var raf$2 = getRequestAnimationFrame();

  var cancelAnimationTimeout = function cancelAnimationTimeout(frame) {
    return cancelRequestAnimationFrame(frame.id);
  };

  var requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {
    var start = Date.now();
    function timeout() {
      if (Date.now() - start >= delay) {
        callback.call();
      } else {
        frame.id = raf$2(timeout);
      }
    }

    var frame = {
      id: raf$2(timeout)
    };

    return frame;
  };

  function _typeof$1(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof$1 = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof$1 = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof$1(obj);
  }

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(source, true).forEach(function (key) {
          _defineProperty$1(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(source).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  var vendorPrefix;
  var jsCssMap = {
    Webkit: '-webkit-',
    Moz: '-moz-',
    // IE did it wrong again ...
    ms: '-ms-',
    O: '-o-'
  };

  function getVendorPrefix() {
    if (vendorPrefix !== undefined) {
      return vendorPrefix;
    }

    vendorPrefix = '';
    var style = document.createElement('p').style;
    var testProp = 'Transform';

    for (var key in jsCssMap) {
      if (key + testProp in style) {
        vendorPrefix = key;
      }
    }

    return vendorPrefix;
  }

  function getTransitionName() {
    return getVendorPrefix() ? "".concat(getVendorPrefix(), "TransitionProperty") : 'transitionProperty';
  }

  function getTransformName() {
    return getVendorPrefix() ? "".concat(getVendorPrefix(), "Transform") : 'transform';
  }
  function setTransitionProperty(node, value) {
    var name = getTransitionName();

    if (name) {
      node.style[name] = value;

      if (name !== 'transitionProperty') {
        node.style.transitionProperty = value;
      }
    }
  }

  function setTransform(node, value) {
    var name = getTransformName();

    if (name) {
      node.style[name] = value;

      if (name !== 'transform') {
        node.style.transform = value;
      }
    }
  }

  function getTransitionProperty(node) {
    return node.style.transitionProperty || node.style[getTransitionName()];
  }
  function getTransformXY(node) {
    var style = window.getComputedStyle(node, null);
    var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());

    if (transform && transform !== 'none') {
      var matrix = transform.replace(/[^0-9\-.,]/g, '').split(',');
      return {
        x: parseFloat(matrix[12] || matrix[4], 0),
        y: parseFloat(matrix[13] || matrix[5], 0)
      };
    }

    return {
      x: 0,
      y: 0
    };
  }
  var matrix2d = /matrix\((.*)\)/;
  var matrix3d = /matrix3d\((.*)\)/;
  function setTransformXY(node, xy) {
    var style = window.getComputedStyle(node, null);
    var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());

    if (transform && transform !== 'none') {
      var arr;
      var match2d = transform.match(matrix2d);

      if (match2d) {
        match2d = match2d[1];
        arr = match2d.split(',').map(function (item) {
          return parseFloat(item, 10);
        });
        arr[4] = xy.x;
        arr[5] = xy.y;
        setTransform(node, "matrix(".concat(arr.join(','), ")"));
      } else {
        var match3d = transform.match(matrix3d)[1];
        arr = match3d.split(',').map(function (item) {
          return parseFloat(item, 10);
        });
        arr[12] = xy.x;
        arr[13] = xy.y;
        setTransform(node, "matrix3d(".concat(arr.join(','), ")"));
      }
    } else {
      setTransform(node, "translateX(".concat(xy.x, "px) translateY(").concat(xy.y, "px) translateZ(0)"));
    }
  }

  var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;
  var getComputedStyleX; // https://stackoverflow.com/a/3485654/3040605

  function forceRelayout(elem) {
    var originalStyle = elem.style.display;
    elem.style.display = 'none';
    elem.offsetHeight; // eslint-disable-line

    elem.style.display = originalStyle;
  }

  function css(el, name, v) {
    var value = v;

    if (_typeof$1(name) === 'object') {
      for (var i in name) {
        if (name.hasOwnProperty(i)) {
          css(el, i, name[i]);
        }
      }

      return undefined;
    }

    if (typeof value !== 'undefined') {
      if (typeof value === 'number') {
        value = "".concat(value, "px");
      }

      el.style[name] = value;
      return undefined;
    }

    return getComputedStyleX(el, name);
  }

  function getClientPosition(elem) {
    var box;
    var x;
    var y;
    var doc = elem.ownerDocument;
    var body = doc.body;
    var docElem = doc && doc.documentElement; // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式

    box = elem.getBoundingClientRect(); // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
    // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
    // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

    x = box.left;
    y = box.top; // In IE, most of the time, 2 extra pixels are added to the top and left
    // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
    // IE6 standards mode, this border can be overridden by setting the
    // document element's border to zero -- thus, we cannot rely on the
    // offset always being 2 pixels.
    // In quirks mode, the offset can be determined by querying the body's
    // clientLeft/clientTop, but in standards mode, it is found by querying
    // the document element's clientLeft/clientTop.  Since we already called
    // getClientBoundingRect we have already forced a reflow, so it is not
    // too expensive just to query them all.
    // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
    // 窗口边框标准是设 documentElement ,quirks 时设置 body
    // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
    // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
    // 标准 ie 下 docElem.clientTop 就是 border-top
    // ie7 html 即窗口边框改变不了。永远为 2
    // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

    x -= docElem.clientLeft || body.clientLeft || 0;
    y -= docElem.clientTop || body.clientTop || 0;
    return {
      left: x,
      top: y
    };
  }

  function getScroll$1(w, top) {
    var ret = w["page".concat(top ? 'Y' : 'X', "Offset")];
    var method = "scroll".concat(top ? 'Top' : 'Left');

    if (typeof ret !== 'number') {
      var d = w.document; // ie6,7,8 standard mode

      ret = d.documentElement[method];

      if (typeof ret !== 'number') {
        // quirks mode
        ret = d.body[method];
      }
    }

    return ret;
  }

  function getScrollLeft(w) {
    return getScroll$1(w);
  }

  function getScrollTop(w) {
    return getScroll$1(w, true);
  }

  function getOffset(el) {
    var pos = getClientPosition(el);
    var doc = el.ownerDocument;
    var w = doc.defaultView || doc.parentWindow;
    pos.left += getScrollLeft(w);
    pos.top += getScrollTop(w);
    return pos;
  }
  /**
   * A crude way of determining if an object is a window
   * @member util
   */


  function isWindow(obj) {
    // must use == for ie8

    /* eslint eqeqeq:0 */
    return obj !== null && obj !== undefined && obj == obj.window;
  }

  function getDocument(node) {
    if (isWindow(node)) {
      return node.document;
    }

    if (node.nodeType === 9) {
      return node;
    }

    return node.ownerDocument;
  }

  function _getComputedStyle(elem, name, cs) {
    var computedStyle = cs;
    var val = '';
    var d = getDocument(elem);
    computedStyle = computedStyle || d.defaultView.getComputedStyle(elem, null); // https://github.com/kissyteam/kissy/issues/61

    if (computedStyle) {
      val = computedStyle.getPropertyValue(name) || computedStyle[name];
    }

    return val;
  }

  var _RE_NUM_NO_PX = new RegExp("^(".concat(RE_NUM, ")(?!px)[a-z%]+$"), 'i');

  var RE_POS = /^(top|right|bottom|left)$/;
  var CURRENT_STYLE = 'currentStyle';
  var RUNTIME_STYLE = 'runtimeStyle';
  var LEFT = 'left';
  var PX = 'px';

  function _getComputedStyleIE(elem, name) {
    // currentStyle maybe null
    // http://msdn.microsoft.com/en-us/library/ms535231.aspx
    var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name]; // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
    // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
    // 在 ie 下不对，需要直接用 offset 方式
    // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了
    // From the awesome hack by Dean Edwards
    // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
    // If we're not dealing with a regular pixel number
    // but a number that has a weird ending, we need to convert it to pixels
    // exclude left right for relativity

    if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
      // Remember the original values
      var style = elem.style;
      var left = style[LEFT];
      var rsLeft = elem[RUNTIME_STYLE][LEFT]; // prevent flashing of content

      elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT]; // Put in the new values to get a computed value out

      style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
      ret = style.pixelLeft + PX; // Revert the changed values

      style[LEFT] = left;
      elem[RUNTIME_STYLE][LEFT] = rsLeft;
    }

    return ret === '' ? 'auto' : ret;
  }

  if (typeof window !== 'undefined') {
    getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
  }

  function getOffsetDirection(dir, option) {
    if (dir === 'left') {
      return option.useCssRight ? 'right' : dir;
    }

    return option.useCssBottom ? 'bottom' : dir;
  }

  function oppositeOffsetDirection(dir) {
    if (dir === 'left') {
      return 'right';
    } else if (dir === 'right') {
      return 'left';
    } else if (dir === 'top') {
      return 'bottom';
    } else if (dir === 'bottom') {
      return 'top';
    }
  } // 设置 elem 相对 elem.ownerDocument 的坐标


  function setLeftTop(elem, offset, option) {
    // set position first, in-case top/left are set even on static elem
    if (css(elem, 'position') === 'static') {
      elem.style.position = 'relative';
    }

    var presetH = -999;
    var presetV = -999;
    var horizontalProperty = getOffsetDirection('left', option);
    var verticalProperty = getOffsetDirection('top', option);
    var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
    var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);

    if (horizontalProperty !== 'left') {
      presetH = 999;
    }

    if (verticalProperty !== 'top') {
      presetV = 999;
    }

    var originalTransition = '';
    var originalOffset = getOffset(elem);

    if ('left' in offset || 'top' in offset) {
      originalTransition = getTransitionProperty(elem) || '';
      setTransitionProperty(elem, 'none');
    }

    if ('left' in offset) {
      elem.style[oppositeHorizontalProperty] = '';
      elem.style[horizontalProperty] = "".concat(presetH, "px");
    }

    if ('top' in offset) {
      elem.style[oppositeVerticalProperty] = '';
      elem.style[verticalProperty] = "".concat(presetV, "px");
    } // force relayout


    forceRelayout(elem);
    var old = getOffset(elem);
    var originalStyle = {};

    for (var key in offset) {
      if (offset.hasOwnProperty(key)) {
        var dir = getOffsetDirection(key, option);
        var preset = key === 'left' ? presetH : presetV;
        var off = originalOffset[key] - old[key];

        if (dir === key) {
          originalStyle[dir] = preset + off;
        } else {
          originalStyle[dir] = preset - off;
        }
      }
    }

    css(elem, originalStyle); // force relayout

    forceRelayout(elem);

    if ('left' in offset || 'top' in offset) {
      setTransitionProperty(elem, originalTransition);
    }

    var ret = {};

    for (var _key in offset) {
      if (offset.hasOwnProperty(_key)) {
        var _dir = getOffsetDirection(_key, option);

        var _off = offset[_key] - originalOffset[_key];

        if (_key === _dir) {
          ret[_dir] = originalStyle[_dir] + _off;
        } else {
          ret[_dir] = originalStyle[_dir] - _off;
        }
      }
    }

    css(elem, ret);
  }

  function setTransform$1(elem, offset) {
    var originalOffset = getOffset(elem);
    var originalXY = getTransformXY(elem);
    var resultXY = {
      x: originalXY.x,
      y: originalXY.y
    };

    if ('left' in offset) {
      resultXY.x = originalXY.x + offset.left - originalOffset.left;
    }

    if ('top' in offset) {
      resultXY.y = originalXY.y + offset.top - originalOffset.top;
    }

    setTransformXY(elem, resultXY);
  }

  function setOffset(elem, offset, option) {
    if (option.ignoreShake) {
      var oriOffset = getOffset(elem);
      var oLeft = oriOffset.left.toFixed(0);
      var oTop = oriOffset.top.toFixed(0);
      var tLeft = offset.left.toFixed(0);
      var tTop = offset.top.toFixed(0);

      if (oLeft === tLeft && oTop === tTop) {
        return;
      }
    }

    if (option.useCssRight || option.useCssBottom) {
      setLeftTop(elem, offset, option);
    } else if (option.useCssTransform && getTransformName() in document.body.style) {
      setTransform$1(elem, offset);
    } else {
      setLeftTop(elem, offset, option);
    }
  }

  function each(arr, fn) {
    for (var i = 0; i < arr.length; i++) {
      fn(arr[i]);
    }
  }

  function isBorderBoxFn(elem) {
    return getComputedStyleX(elem, 'boxSizing') === 'border-box';
  }

  var BOX_MODELS = ['margin', 'border', 'padding'];
  var CONTENT_INDEX = -1;
  var PADDING_INDEX = 2;
  var BORDER_INDEX = 1;
  var MARGIN_INDEX = 0;

  function swap(elem, options, callback) {
    var old = {};
    var style = elem.style;
    var name; // Remember the old values, and insert the new ones

    for (name in options) {
      if (options.hasOwnProperty(name)) {
        old[name] = style[name];
        style[name] = options[name];
      }
    }

    callback.call(elem); // Revert the old values

    for (name in options) {
      if (options.hasOwnProperty(name)) {
        style[name] = old[name];
      }
    }
  }

  function getPBMWidth(elem, props, which) {
    var value = 0;
    var prop;
    var j;
    var i;

    for (j = 0; j < props.length; j++) {
      prop = props[j];

      if (prop) {
        for (i = 0; i < which.length; i++) {
          var cssProp = void 0;

          if (prop === 'border') {
            cssProp = "".concat(prop).concat(which[i], "Width");
          } else {
            cssProp = prop + which[i];
          }

          value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
        }
      }
    }

    return value;
  }

  var domUtils = {
    getParent: function getParent(element) {
      var parent = element;

      do {
        if (parent.nodeType === 11 && parent.host) {
          parent = parent.host;
        } else {
          parent = parent.parentNode;
        }
      } while (parent && parent.nodeType !== 1 && parent.nodeType !== 9);

      return parent;
    }
  };
  each(['Width', 'Height'], function (name) {
    domUtils["doc".concat(name)] = function (refWin) {
      var d = refWin.document;
      return Math.max( // firefox chrome documentElement.scrollHeight< body.scrollHeight
      // ie standard mode : documentElement.scrollHeight> body.scrollHeight
      d.documentElement["scroll".concat(name)], // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
      d.body["scroll".concat(name)], domUtils["viewport".concat(name)](d));
    };

    domUtils["viewport".concat(name)] = function (win) {
      // pc browser includes scrollbar in window.innerWidth
      var prop = "client".concat(name);
      var doc = win.document;
      var body = doc.body;
      var documentElement = doc.documentElement;
      var documentElementProp = documentElement[prop]; // 标准模式取 documentElement
      // backcompat 取 body

      return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
    };
  });
  /*
   得到元素的大小信息
   @param elem
   @param name
   @param {String} [extra]  'padding' : (css width) + padding
   'border' : (css width) + padding + border
   'margin' : (css width) + padding + border + margin
   */

  function getWH(elem, name, ex) {
    var extra = ex;

    if (isWindow(elem)) {
      return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
    } else if (elem.nodeType === 9) {
      return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
    }

    var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
    var borderBoxValue = name === 'width' ? elem.getBoundingClientRect().width : elem.getBoundingClientRect().height;
    var computedStyle = getComputedStyleX(elem);
    var isBorderBox = isBorderBoxFn(elem);
    var cssBoxValue = 0;

    if (borderBoxValue === null || borderBoxValue === undefined || borderBoxValue <= 0) {
      borderBoxValue = undefined; // Fall back to computed then un computed css if necessary

      cssBoxValue = getComputedStyleX(elem, name);

      if (cssBoxValue === null || cssBoxValue === undefined || Number(cssBoxValue) < 0) {
        cssBoxValue = elem.style[name] || 0;
      } // Normalize '', auto, and prepare for extra


      cssBoxValue = parseFloat(cssBoxValue) || 0;
    }

    if (extra === undefined) {
      extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
    }

    var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
    var val = borderBoxValue || cssBoxValue;

    if (extra === CONTENT_INDEX) {
      if (borderBoxValueOrIsBorderBox) {
        return val - getPBMWidth(elem, ['border', 'padding'], which);
      }

      return cssBoxValue;
    } else if (borderBoxValueOrIsBorderBox) {
      if (extra === BORDER_INDEX) {
        return val;
      }

      return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which) : getPBMWidth(elem, ['margin'], which));
    }

    return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which);
  }

  var cssShow = {
    position: 'absolute',
    visibility: 'hidden',
    display: 'block'
  }; // fix #119 : https://github.com/kissyteam/kissy/issues/119

  function getWHIgnoreDisplay() {
    for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var val;
    var elem = args[0]; // in case elem is window
    // elem.offsetWidth === undefined

    if (elem.offsetWidth !== 0) {
      val = getWH.apply(undefined, args);
    } else {
      swap(elem, cssShow, function () {
        val = getWH.apply(undefined, args);
      });
    }

    return val;
  }

  each(['width', 'height'], function (name) {
    var first = name.charAt(0).toUpperCase() + name.slice(1);

    domUtils["outer".concat(first)] = function (el, includeMargin) {
      return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
    };

    var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

    domUtils[name] = function (elem, v) {
      var val = v;

      if (val !== undefined) {
        if (elem) {
          var computedStyle = getComputedStyleX(elem);
          var isBorderBox = isBorderBoxFn(elem);

          if (isBorderBox) {
            val += getPBMWidth(elem, ['padding', 'border'], which);
          }

          return css(elem, name, val);
        }

        return undefined;
      }

      return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
    };
  });

  function mix(to, from) {
    for (var i in from) {
      if (from.hasOwnProperty(i)) {
        to[i] = from[i];
      }
    }

    return to;
  }

  var utils = {
    getWindow: function getWindow(node) {
      if (node && node.document && node.setTimeout) {
        return node;
      }

      var doc = node.ownerDocument || node;
      return doc.defaultView || doc.parentWindow;
    },
    getDocument: getDocument,
    offset: function offset(el, value, option) {
      if (typeof value !== 'undefined') {
        setOffset(el, value, option || {});
      } else {
        return getOffset(el);
      }
    },
    isWindow: isWindow,
    each: each,
    css: css,
    clone: function clone(obj) {
      var i;
      var ret = {};

      for (i in obj) {
        if (obj.hasOwnProperty(i)) {
          ret[i] = obj[i];
        }
      }

      var overflow = obj.overflow;

      if (overflow) {
        for (i in obj) {
          if (obj.hasOwnProperty(i)) {
            ret.overflow[i] = obj.overflow[i];
          }
        }
      }

      return ret;
    },
    mix: mix,
    getWindowScrollLeft: function getWindowScrollLeft(w) {
      return getScrollLeft(w);
    },
    getWindowScrollTop: function getWindowScrollTop(w) {
      return getScrollTop(w);
    },
    merge: function merge() {
      var ret = {};

      for (var i = 0; i < arguments.length; i++) {
        utils.mix(ret, i < 0 || arguments.length <= i ? undefined : arguments[i]);
      }

      return ret;
    },
    viewportWidth: 0,
    viewportHeight: 0
  };
  mix(utils, domUtils);

  /**
   * 得到会导致元素显示不全的祖先元素
   */

  var getParent = utils.getParent;

  function getOffsetParent(element) {
    if (utils.isWindow(element) || element.nodeType === 9) {
      return null;
    } // ie 这个也不是完全可行

    /*
     <div style="width: 50px;height: 100px;overflow: hidden">
     <div style="width: 50px;height: 100px;position: relative;" id="d6">
     元素 6 高 100px 宽 50px<br/>
     </div>
     </div>
     */
    // element.offsetParent does the right thing in ie7 and below. Return parent with layout!
    //  In other browsers it only includes elements with position absolute, relative or
    // fixed, not elements with overflow set to auto or scroll.
    //        if (UA.ie && ieMode < 8) {
    //            return element.offsetParent;
    //        }
    // 统一的 offsetParent 方法


    var doc = utils.getDocument(element);
    var body = doc.body;
    var parent;
    var positionStyle = utils.css(element, 'position');
    var skipStatic = positionStyle === 'fixed' || positionStyle === 'absolute';

    if (!skipStatic) {
      return element.nodeName.toLowerCase() === 'html' ? null : getParent(element);
    }

    for (parent = getParent(element); parent && parent !== body && parent.nodeType !== 9; parent = getParent(parent)) {
      positionStyle = utils.css(parent, 'position');

      if (positionStyle !== 'static') {
        return parent;
      }
    }

    return null;
  }

  var getParent$1 = utils.getParent;
  function isAncestorFixed(element) {
    if (utils.isWindow(element) || element.nodeType === 9) {
      return false;
    }

    var doc = utils.getDocument(element);
    var body = doc.body;
    var parent = null;

    for (parent = getParent$1(element); parent && parent !== body; parent = getParent$1(parent)) {
      var positionStyle = utils.css(parent, 'position');

      if (positionStyle === 'fixed') {
        return true;
      }
    }

    return false;
  }

  /**
   * 获得元素的显示部分的区域
   */

  function getVisibleRectForElement(element, alwaysByViewport) {
    var visibleRect = {
      left: 0,
      right: Infinity,
      top: 0,
      bottom: Infinity
    };
    var el = getOffsetParent(element);
    var doc = utils.getDocument(element);
    var win = doc.defaultView || doc.parentWindow;
    var body = doc.body;
    var documentElement = doc.documentElement; // Determine the size of the visible rect by climbing the dom accounting for
    // all scrollable containers.

    while (el) {
      // clientWidth is zero for inline block elements in ie.
      if ((navigator.userAgent.indexOf('MSIE') === -1 || el.clientWidth !== 0) && // body may have overflow set on it, yet we still get the entire
      // viewport. In some browsers, el.offsetParent may be
      // document.documentElement, so check for that too.
      el !== body && el !== documentElement && utils.css(el, 'overflow') !== 'visible') {
        var pos = utils.offset(el); // add border

        pos.left += el.clientLeft;
        pos.top += el.clientTop;
        visibleRect.top = Math.max(visibleRect.top, pos.top);
        visibleRect.right = Math.min(visibleRect.right, // consider area without scrollBar
        pos.left + el.clientWidth);
        visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
        visibleRect.left = Math.max(visibleRect.left, pos.left);
      } else if (el === body || el === documentElement) {
        break;
      }

      el = getOffsetParent(el);
    } // Set element position to fixed
    // make sure absolute element itself don't affect it's visible area
    // https://github.com/ant-design/ant-design/issues/7601


    var originalPosition = null;

    if (!utils.isWindow(element) && element.nodeType !== 9) {
      originalPosition = element.style.position;
      var position = utils.css(element, 'position');

      if (position === 'absolute') {
        element.style.position = 'fixed';
      }
    }

    var scrollX = utils.getWindowScrollLeft(win);
    var scrollY = utils.getWindowScrollTop(win);
    var viewportWidth = utils.viewportWidth(win);
    var viewportHeight = utils.viewportHeight(win);
    var documentWidth = documentElement.scrollWidth;
    var documentHeight = documentElement.scrollHeight; // scrollXXX on html is sync with body which means overflow: hidden on body gets wrong scrollXXX.
    // We should cut this ourself.

    var bodyStyle = window.getComputedStyle(body);

    if (bodyStyle.overflowX === 'hidden') {
      documentWidth = win.innerWidth;
    }

    if (bodyStyle.overflowY === 'hidden') {
      documentHeight = win.innerHeight;
    } // Reset element position after calculate the visible area


    if (element.style) {
      element.style.position = originalPosition;
    }

    if (alwaysByViewport || isAncestorFixed(element)) {
      // Clip by viewport's size.
      visibleRect.left = Math.max(visibleRect.left, scrollX);
      visibleRect.top = Math.max(visibleRect.top, scrollY);
      visibleRect.right = Math.min(visibleRect.right, scrollX + viewportWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + viewportHeight);
    } else {
      // Clip by document's size.
      var maxVisibleWidth = Math.max(documentWidth, scrollX + viewportWidth);
      visibleRect.right = Math.min(visibleRect.right, maxVisibleWidth);
      var maxVisibleHeight = Math.max(documentHeight, scrollY + viewportHeight);
      visibleRect.bottom = Math.min(visibleRect.bottom, maxVisibleHeight);
    }

    return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
  }

  function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
    var pos = utils.clone(elFuturePos);
    var size = {
      width: elRegion.width,
      height: elRegion.height
    };

    if (overflow.adjustX && pos.left < visibleRect.left) {
      pos.left = visibleRect.left;
    } // Left edge inside and right edge outside viewport, try to resize it.


    if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) {
      size.width -= pos.left + size.width - visibleRect.right;
    } // Right edge outside viewport, try to move it.


    if (overflow.adjustX && pos.left + size.width > visibleRect.right) {
      // 保证左边界和可视区域左边界对齐
      pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
    } // Top edge outside viewport, try to move it.


    if (overflow.adjustY && pos.top < visibleRect.top) {
      pos.top = visibleRect.top;
    } // Top edge inside and bottom edge outside viewport, try to resize it.


    if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) {
      size.height -= pos.top + size.height - visibleRect.bottom;
    } // Bottom edge outside viewport, try to move it.


    if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {
      // 保证上边界和可视区域上边界对齐
      pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
    }

    return utils.mix(pos, size);
  }

  function getRegion(node) {
    var offset;
    var w;
    var h;

    if (!utils.isWindow(node) && node.nodeType !== 9) {
      offset = utils.offset(node);
      w = utils.outerWidth(node);
      h = utils.outerHeight(node);
    } else {
      var win = utils.getWindow(node);
      offset = {
        left: utils.getWindowScrollLeft(win),
        top: utils.getWindowScrollTop(win)
      };
      w = utils.viewportWidth(win);
      h = utils.viewportHeight(win);
    }

    offset.width = w;
    offset.height = h;
    return offset;
  }

  /**
   * 获取 node 上的 align 对齐点 相对于页面的坐标
   */
  function getAlignOffset(region, align) {
    var V = align.charAt(0);
    var H = align.charAt(1);
    var w = region.width;
    var h = region.height;
    var x = region.left;
    var y = region.top;

    if (V === 'c') {
      y += h / 2;
    } else if (V === 'b') {
      y += h;
    }

    if (H === 'c') {
      x += w / 2;
    } else if (H === 'r') {
      x += w;
    }

    return {
      left: x,
      top: y
    };
  }

  function getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset) {
    var p1 = getAlignOffset(refNodeRegion, points[1]);
    var p2 = getAlignOffset(elRegion, points[0]);
    var diff = [p2.left - p1.left, p2.top - p1.top];
    return {
      left: Math.round(elRegion.left - diff[0] + offset[0] - targetOffset[0]),
      top: Math.round(elRegion.top - diff[1] + offset[1] - targetOffset[1])
    };
  }

  /**
   * align dom node flexibly
   * @author yiminghe@gmail.com
   */

  function isFailX(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
  }

  function isFailY(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
  }

  function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
  }

  function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
  }

  function flip(points, reg, map) {
    var ret = [];
    utils.each(points, function (p) {
      ret.push(p.replace(reg, function (m) {
        return map[m];
      }));
    });
    return ret;
  }

  function flipOffset(offset, index) {
    offset[index] = -offset[index];
    return offset;
  }

  function convertOffset(str, offsetLen) {
    var n;

    if (/%$/.test(str)) {
      n = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
    } else {
      n = parseInt(str, 10);
    }

    return n || 0;
  }

  function normalizeOffset(offset, el) {
    offset[0] = convertOffset(offset[0], el.width);
    offset[1] = convertOffset(offset[1], el.height);
  }
  /**
   * @param el
   * @param tgtRegion 参照节点所占的区域: { left, top, width, height }
   * @param align
   */


  function doAlign(el, tgtRegion, align, isTgtRegionVisible) {
    var points = align.points;
    var offset = align.offset || [0, 0];
    var targetOffset = align.targetOffset || [0, 0];
    var overflow = align.overflow;
    var source = align.source || el;
    offset = [].concat(offset);
    targetOffset = [].concat(targetOffset);
    overflow = overflow || {};
    var newOverflowCfg = {};
    var fail = 0;
    var alwaysByViewport = !!(overflow && overflow.alwaysByViewport); // 当前节点可以被放置的显示区域

    var visibleRect = getVisibleRectForElement(source, alwaysByViewport); // 当前节点所占的区域, left/top/width/height

    var elRegion = getRegion(source); // 将 offset 转换成数值，支持百分比

    normalizeOffset(offset, elRegion);
    normalizeOffset(targetOffset, tgtRegion); // 当前节点将要被放置的位置

    var elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset, targetOffset); // 当前节点将要所处的区域

    var newElRegion = utils.merge(elRegion, elFuturePos); // 如果可视区域不能完全放置当前节点时允许调整

    if (visibleRect && (overflow.adjustX || overflow.adjustY) && isTgtRegionVisible) {
      if (overflow.adjustX) {
        // 如果横向不能放下
        if (isFailX(elFuturePos, elRegion, visibleRect)) {
          // 对齐位置反下
          var newPoints = flip(points, /[lr]/gi, {
            l: 'r',
            r: 'l'
          }); // 偏移量也反下

          var newOffset = flipOffset(offset, 0);
          var newTargetOffset = flipOffset(targetOffset, 0);
          var newElFuturePos = getElFuturePos(elRegion, tgtRegion, newPoints, newOffset, newTargetOffset);

          if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
            fail = 1;
            points = newPoints;
            offset = newOffset;
            targetOffset = newTargetOffset;
          }
        }
      }

      if (overflow.adjustY) {
        // 如果纵向不能放下
        if (isFailY(elFuturePos, elRegion, visibleRect)) {
          // 对齐位置反下
          var _newPoints = flip(points, /[tb]/gi, {
            t: 'b',
            b: 't'
          }); // 偏移量也反下


          var _newOffset = flipOffset(offset, 1);

          var _newTargetOffset = flipOffset(targetOffset, 1);

          var _newElFuturePos = getElFuturePos(elRegion, tgtRegion, _newPoints, _newOffset, _newTargetOffset);

          if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {
            fail = 1;
            points = _newPoints;
            offset = _newOffset;
            targetOffset = _newTargetOffset;
          }
        }
      } // 如果失败，重新计算当前节点将要被放置的位置


      if (fail) {
        elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset, targetOffset);
        utils.mix(newElRegion, elFuturePos);
      }

      var isStillFailX = isFailX(elFuturePos, elRegion, visibleRect);
      var isStillFailY = isFailY(elFuturePos, elRegion, visibleRect); // 检查反下后的位置是否可以放下了，如果仍然放不下：
      // 1. 复原修改过的定位参数

      if (isStillFailX || isStillFailY) {
        var _newPoints2 = points; // 重置对应部分的翻转逻辑

        if (isStillFailX) {
          _newPoints2 = flip(points, /[lr]/gi, {
            l: 'r',
            r: 'l'
          });
        }

        if (isStillFailY) {
          _newPoints2 = flip(points, /[tb]/gi, {
            t: 'b',
            b: 't'
          });
        }

        points = _newPoints2;
        offset = align.offset || [0, 0];
        targetOffset = align.targetOffset || [0, 0];
      } // 2. 只有指定了可以调整当前方向才调整


      newOverflowCfg.adjustX = overflow.adjustX && isStillFailX;
      newOverflowCfg.adjustY = overflow.adjustY && isStillFailY; // 确实要调整，甚至可能会调整高度宽度

      if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
        newElRegion = adjustForViewport(elFuturePos, elRegion, visibleRect, newOverflowCfg);
      }
    } // need judge to in case set fixed with in css on height auto element


    if (newElRegion.width !== elRegion.width) {
      utils.css(source, 'width', utils.width(source) + newElRegion.width - elRegion.width);
    }

    if (newElRegion.height !== elRegion.height) {
      utils.css(source, 'height', utils.height(source) + newElRegion.height - elRegion.height);
    } // https://github.com/kissyteam/kissy/issues/190
    // 相对于屏幕位置没变，而 left/top 变了
    // 例如 <div 'relative'><el absolute></div>


    utils.offset(source, {
      left: newElRegion.left,
      top: newElRegion.top
    }, {
      useCssRight: align.useCssRight,
      useCssBottom: align.useCssBottom,
      useCssTransform: align.useCssTransform,
      ignoreShake: align.ignoreShake
    });
    return {
      points: points,
      offset: offset,
      targetOffset: targetOffset,
      overflow: newOverflowCfg
    };
  }
  /**
   *  2012-04-26 yiminghe@gmail.com
   *   - 优化智能对齐算法
   *   - 慎用 resizeXX
   *
   *  2011-07-13 yiminghe@gmail.com note:
   *   - 增加智能对齐，以及大小调整选项
   **/

  function isOutOfVisibleRect(target, alwaysByViewport) {
    var visibleRect = getVisibleRectForElement(target, alwaysByViewport);
    var targetRegion = getRegion(target);
    return !visibleRect || targetRegion.left + targetRegion.width <= visibleRect.left || targetRegion.top + targetRegion.height <= visibleRect.top || targetRegion.left >= visibleRect.right || targetRegion.top >= visibleRect.bottom;
  }

  function alignElement(el, refNode, align) {
    var target = align.target || refNode;
    var refNodeRegion = getRegion(target);
    var isTargetNotOutOfVisible = !isOutOfVisibleRect(target, align.overflow && align.overflow.alwaysByViewport);
    return doAlign(el, refNodeRegion, align, isTargetNotOutOfVisible);
  }

  alignElement.__getOffsetParent = getOffsetParent;
  alignElement.__getVisibleRectForElement = getVisibleRectForElement;

  /**
   * `tgtPoint`: { pageX, pageY } or { clientX, clientY }.
   * If client position provided, will internal convert to page position.
   */

  function alignPoint(el, tgtPoint, align) {
    var pageX;
    var pageY;
    var doc = utils.getDocument(el);
    var win = doc.defaultView || doc.parentWindow;
    var scrollX = utils.getWindowScrollLeft(win);
    var scrollY = utils.getWindowScrollTop(win);
    var viewportWidth = utils.viewportWidth(win);
    var viewportHeight = utils.viewportHeight(win);

    if ('pageX' in tgtPoint) {
      pageX = tgtPoint.pageX;
    } else {
      pageX = scrollX + tgtPoint.clientX;
    }

    if ('pageY' in tgtPoint) {
      pageY = tgtPoint.pageY;
    } else {
      pageY = scrollY + tgtPoint.clientY;
    }

    var tgtRegion = {
      left: pageX,
      top: pageY,
      width: 0,
      height: 0
    };
    var pointInView = pageX >= 0 && pageX <= scrollX + viewportWidth && pageY >= 0 && pageY <= scrollY + viewportHeight; // Provide default target point

    var points = [align.points[0], 'cc'];
    return doAlign(el, tgtRegion, _objectSpread2({}, align, {
      points: points
    }), pointInView);
  }

  function buffer(fn, ms) {
    var timer = void 0;

    function clear() {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
    }

    function bufferFn() {
      clear();
      timer = setTimeout(fn, ms);
    }

    bufferFn.clear = clear;

    return bufferFn;
  }

  function isSamePoint(prev, next) {
    if (prev === next) return true;
    if (!prev || !next) return false;

    if ('pageX' in next && 'pageY' in next) {
      return prev.pageX === next.pageX && prev.pageY === next.pageY;
    }

    if ('clientX' in next && 'clientY' in next) {
      return prev.clientX === next.clientX && prev.clientY === next.clientY;
    }

    return false;
  }

  function isWindow$1(obj) {
    return obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj.window === obj;
  }

  function isSimilarValue(val1, val2) {
    var int1 = Math.floor(val1);
    var int2 = Math.floor(val2);
    return Math.abs(int1 - int2) <= 1;
  }

  function restoreFocus(activeElement, container) {
    // Focus back if is in the container
    if (activeElement !== document.activeElement && contains(container, activeElement)) {
      activeElement.focus();
    }
  }

  function cloneVNode$1(vnode, deep) {
    var componentOptions = vnode.componentOptions;
    var data = vnode.data;

    var listeners = {};
    if (componentOptions && componentOptions.listeners) {
      listeners = _extends$1({}, componentOptions.listeners);
    }

    var on = {};
    if (data && data.on) {
      on = _extends$1({}, data.on);
    }

    var cloned = new vnode.constructor(vnode.tag, data ? _extends$1({}, data, { on: on }) : data, vnode.children, vnode.text, vnode.elm, vnode.context, componentOptions ? _extends$1({}, componentOptions, { listeners: listeners }) : componentOptions, vnode.asyncFactory);
    cloned.ns = vnode.ns;
    cloned.isStatic = vnode.isStatic;
    cloned.key = vnode.key;
    cloned.isComment = vnode.isComment;
    cloned.fnContext = vnode.fnContext;
    cloned.fnOptions = vnode.fnOptions;
    cloned.fnScopeId = vnode.fnScopeId;
    cloned.isCloned = true;
    if (deep) {
      if (vnode.children) {
        cloned.children = cloneVNodes(vnode.children, true);
      }
      if (componentOptions && componentOptions.children) {
        componentOptions.children = cloneVNodes(componentOptions.children, true);
      }
    }
    return cloned;
  }

  function cloneVNodes(vnodes, deep) {
    var len = vnodes.length;
    var res = new Array(len);
    for (var i = 0; i < len; i++) {
      res[i] = cloneVNode$1(vnodes[i], deep);
    }
    return res;
  }

  function cloneElement(n) {
    var nodeProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var deep = arguments[2];

    var ele = n;
    if (Array.isArray(n)) {
      ele = filterEmpty(n)[0];
    }
    if (!ele) {
      return null;
    }
    var node = cloneVNode$1(ele, deep);
    // // 函数式组件不支持clone  https://github.com/vueComponent/ant-design-vue/pull/1947
    // warning(
    //   !(node.fnOptions && node.fnOptions.functional),
    //   `can not use cloneElement for functional component (${node.fnOptions && node.fnOptions.name})`,
    // );
    var _nodeProps$props = nodeProps.props,
        props = _nodeProps$props === undefined ? {} : _nodeProps$props,
        key = nodeProps.key,
        _nodeProps$on = nodeProps.on,
        on = _nodeProps$on === undefined ? {} : _nodeProps$on,
        _nodeProps$nativeOn = nodeProps.nativeOn,
        nativeOn = _nodeProps$nativeOn === undefined ? {} : _nodeProps$nativeOn,
        children = nodeProps.children,
        _nodeProps$directives = nodeProps.directives,
        directives = _nodeProps$directives === undefined ? [] : _nodeProps$directives;

    var data = node.data || {};
    var cls = {};
    var style = {};
    var _nodeProps$attrs = nodeProps.attrs,
        attrs = _nodeProps$attrs === undefined ? {} : _nodeProps$attrs,
        ref = nodeProps.ref,
        _nodeProps$domProps = nodeProps.domProps,
        domProps = _nodeProps$domProps === undefined ? {} : _nodeProps$domProps,
        _nodeProps$style = nodeProps.style,
        tempStyle = _nodeProps$style === undefined ? {} : _nodeProps$style,
        _nodeProps$class = nodeProps['class'],
        tempCls = _nodeProps$class === undefined ? {} : _nodeProps$class,
        _nodeProps$scopedSlot = nodeProps.scopedSlots,
        scopedSlots = _nodeProps$scopedSlot === undefined ? {} : _nodeProps$scopedSlot;


    if (typeof data.style === 'string') {
      style = parseStyleText(data.style);
    } else {
      style = _extends$1({}, data.style, style);
    }
    if (typeof tempStyle === 'string') {
      style = _extends$1({}, style, parseStyleText(style));
    } else {
      style = _extends$1({}, style, tempStyle);
    }

    if (typeof data['class'] === 'string' && data['class'].trim() !== '') {
      data['class'].split(' ').forEach(function (c) {
        cls[c.trim()] = true;
      });
    } else if (Array.isArray(data['class'])) {
      classnames(data['class']).split(' ').forEach(function (c) {
        cls[c.trim()] = true;
      });
    } else {
      cls = _extends$1({}, data['class'], cls);
    }
    if (typeof tempCls === 'string' && tempCls.trim() !== '') {
      tempCls.split(' ').forEach(function (c) {
        cls[c.trim()] = true;
      });
    } else {
      cls = _extends$1({}, cls, tempCls);
    }
    node.data = _extends$1({}, data, {
      style: style,
      attrs: _extends$1({}, data.attrs, attrs),
      'class': cls,
      domProps: _extends$1({}, data.domProps, domProps),
      scopedSlots: _extends$1({}, data.scopedSlots, scopedSlots),
      directives: [].concat(_toConsumableArray(data.directives || []), _toConsumableArray(directives))
    });

    if (node.componentOptions) {
      node.componentOptions.propsData = node.componentOptions.propsData || {};
      node.componentOptions.listeners = node.componentOptions.listeners || {};
      node.componentOptions.propsData = _extends$1({}, node.componentOptions.propsData, props);
      node.componentOptions.listeners = _extends$1({}, node.componentOptions.listeners, on);
      if (children) {
        node.componentOptions.children = children;
      }
    } else {
      if (children) {
        node.children = children;
      }
      node.data.on = _extends$1({}, node.data.on || {}, on);
    }
    node.data.on = _extends$1({}, node.data.on || {}, nativeOn);

    if (key !== undefined) {
      node.key = key;
      node.data.key = key;
    }
    if (typeof ref === 'string') {
      node.data.ref = ref;
    }
    return node;
  }

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  var _listCacheClear = listCacheClear;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  var eq_1 = eq;

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq_1(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  var _assocIndexOf = assocIndexOf;

  /** Used for built-in method references. */
  var arrayProto$1 = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto$1.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  var _listCacheDelete = listCacheDelete;

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  var _listCacheGet = listCacheGet;

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return _assocIndexOf(this.__data__, key) > -1;
  }

  var _listCacheHas = listCacheHas;

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  var _listCacheSet = listCacheSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = _listCacheClear;
  ListCache.prototype['delete'] = _listCacheDelete;
  ListCache.prototype.get = _listCacheGet;
  ListCache.prototype.has = _listCacheHas;
  ListCache.prototype.set = _listCacheSet;

  var _ListCache = ListCache;

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new _ListCache;
    this.size = 0;
  }

  var _stackClear = stackClear;

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
  }

  var _stackDelete = stackDelete;

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  var _stackGet = stackGet;

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  var _stackHas = stackHas;

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$1(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1 = isObject$1;

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction$1(value) {
    if (!isObject_1(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = _baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1 = isFunction$1;

  /** Used to detect overreaching core-js shims. */
  var coreJsData = _root['__core-js_shared__'];

  var _coreJsData = coreJsData;

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  var _isMasked = isMasked;

  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString$1.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  var _toSource = toSource;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype,
      objectProto$3 = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$2 = funcProto$2.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$3.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString$2.call(hasOwnProperty$5).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject_1(value) || _isMasked(value)) {
      return false;
    }
    var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
    return pattern.test(_toSource(value));
  }

  var _baseIsNative = baseIsNative;

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue$1(object, key) {
    return object == null ? undefined : object[key];
  }

  var _getValue = getValue$1;

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = _getValue(object, key);
    return _baseIsNative(value) ? value : undefined;
  }

  var _getNative = getNative;

  /* Built-in method references that are verified to be native. */
  var Map$1 = _getNative(_root, 'Map');

  var _Map = Map$1;

  /* Built-in method references that are verified to be native. */
  var nativeCreate = _getNative(Object, 'create');

  var _nativeCreate = nativeCreate;

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
    this.size = 0;
  }

  var _hashClear = hashClear;

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  var _hashDelete = hashDelete;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$4.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (_nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty$6.call(data, key) ? data[key] : undefined;
  }

  var _hashGet = hashGet;

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$5.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$7.call(data, key);
  }

  var _hashHas = hashHas;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
    return this;
  }

  var _hashSet = hashSet;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = _hashClear;
  Hash.prototype['delete'] = _hashDelete;
  Hash.prototype.get = _hashGet;
  Hash.prototype.has = _hashHas;
  Hash.prototype.set = _hashSet;

  var _Hash = Hash;

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new _Hash,
      'map': new (_Map || _ListCache),
      'string': new _Hash
    };
  }

  var _mapCacheClear = mapCacheClear;

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  var _isKeyable = isKeyable;

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return _isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  var _getMapData = getMapData;

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = _getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  var _mapCacheDelete = mapCacheDelete;

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return _getMapData(this, key).get(key);
  }

  var _mapCacheGet = mapCacheGet;

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return _getMapData(this, key).has(key);
  }

  var _mapCacheHas = mapCacheHas;

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = _getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  var _mapCacheSet = mapCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = _mapCacheClear;
  MapCache.prototype['delete'] = _mapCacheDelete;
  MapCache.prototype.get = _mapCacheGet;
  MapCache.prototype.has = _mapCacheHas;
  MapCache.prototype.set = _mapCacheSet;

  var _MapCache = MapCache;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof _ListCache) {
      var pairs = data.__data__;
      if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new _MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  var _stackSet = stackSet;

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    var data = this.__data__ = new _ListCache(entries);
    this.size = data.size;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = _stackClear;
  Stack.prototype['delete'] = _stackDelete;
  Stack.prototype.get = _stackGet;
  Stack.prototype.has = _stackHas;
  Stack.prototype.set = _stackSet;

  var _Stack = Stack;

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  var _arrayEach = arrayEach;

  var defineProperty$4 = (function() {
    try {
      var func = _getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }());

  var _defineProperty$2 = defineProperty$4;

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && _defineProperty$2) {
      _defineProperty$2(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  var _baseAssignValue = baseAssignValue;

  /** Used for built-in method references. */
  var objectProto$6 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$6.hasOwnProperty;

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$8.call(object, key) && eq_1(objValue, value)) ||
        (value === undefined && !(key in object))) {
      _baseAssignValue(object, key, value);
    }
  }

  var _assignValue = assignValue;

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        _baseAssignValue(object, key, newValue);
      } else {
        _assignValue(object, key, newValue);
      }
    }
    return object;
  }

  var _copyObject = copyObject;

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  var _baseTimes = baseTimes;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
  }

  var _baseIsArguments = baseIsArguments;

  /** Used for built-in method references. */
  var objectProto$7 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$7.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$7.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
    return isObjectLike_1(value) && hasOwnProperty$9.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };

  var isArguments_1 = isArguments;

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$1 = Array.isArray;

  var isArray_1 = isArray$1;

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  var stubFalse_1 = stubFalse;

  var isBuffer_1 = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? _root.Buffer : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse_1;

  module.exports = isBuffer;
  });

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;

    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }

  var _isIndex = isIndex;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
  }

  var isLength_1 = isLength;

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag$1 = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag$1] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike_1(value) &&
      isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
  }

  var _baseIsTypedArray = baseIsTypedArray;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  var _baseUnary = baseUnary;

  var _nodeUtil = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && _freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  module.exports = nodeUtil;
  });

  /* Node.js helper references. */
  var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

  var isTypedArray_1 = isTypedArray;

  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$a = objectProto$8.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray_1(value),
        isArg = !isArr && isArguments_1(value),
        isBuff = !isArr && !isArg && isBuffer_1(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? _baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$a.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             _isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }

  var _arrayLikeKeys = arrayLikeKeys;

  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$9;

    return value === proto;
  }

  var _isPrototype = isPrototype;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = _overArg(Object.keys, Object);

  var _nativeKeys = nativeKeys;

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$b = objectProto$a.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!_isPrototype(object)) {
      return _nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$b.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  var _baseKeys = baseKeys;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength_1(value.length) && !isFunction_1(value);
  }

  var isArrayLike_1 = isArrayLike;

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
  }

  var keys_1 = keys;

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign(object, source) {
    return object && _copyObject(source, keys_1(source), object);
  }

  var _baseAssign = baseAssign;

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  var _nativeKeysIn = nativeKeysIn;

  /** Used for built-in method references. */
  var objectProto$b = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$c = objectProto$b.hasOwnProperty;

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    if (!isObject_1(object)) {
      return _nativeKeysIn(object);
    }
    var isProto = _isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$c.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  var _baseKeysIn = baseKeysIn;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
  }

  var keysIn_1 = keysIn;

  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssignIn(object, source) {
    return object && _copyObject(source, keysIn_1(source), object);
  }

  var _baseAssignIn = baseAssignIn;

  var _cloneBuffer = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? _root.Buffer : undefined,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    buffer.copy(result);
    return result;
  }

  module.exports = cloneBuffer;
  });

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  var _copyArray = copyArray;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  var _arrayFilter = arrayFilter;

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  var stubArray_1 = stubArray;

  /** Used for built-in method references. */
  var objectProto$c = Object.prototype;

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$c.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = !nativeGetSymbols ? stubArray_1 : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return _arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable$1.call(object, symbol);
    });
  };

  var _getSymbols = getSymbols;

  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols(source, object) {
    return _copyObject(source, _getSymbols(source), object);
  }

  var _copySymbols = copySymbols;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  var _arrayPush = arrayPush;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbolsIn = !nativeGetSymbols$1 ? stubArray_1 : function(object) {
    var result = [];
    while (object) {
      _arrayPush(result, _getSymbols(object));
      object = _getPrototype(object);
    }
    return result;
  };

  var _getSymbolsIn = getSymbolsIn;

  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbolsIn(source, object) {
    return _copyObject(source, _getSymbolsIn(source), object);
  }

  var _copySymbolsIn = copySymbolsIn;

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
  }

  var _baseGetAllKeys = baseGetAllKeys;

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return _baseGetAllKeys(object, keys_1, _getSymbols);
  }

  var _getAllKeys = getAllKeys;

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeysIn(object) {
    return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
  }

  var _getAllKeysIn = getAllKeysIn;

  /* Built-in method references that are verified to be native. */
  var DataView = _getNative(_root, 'DataView');

  var _DataView = DataView;

  /* Built-in method references that are verified to be native. */
  var Promise$1 = _getNative(_root, 'Promise');

  var _Promise = Promise$1;

  /* Built-in method references that are verified to be native. */
  var Set$1 = _getNative(_root, 'Set');

  var _Set$1 = Set$1;

  /* Built-in method references that are verified to be native. */
  var WeakMap$1 = _getNative(_root, 'WeakMap');

  var _WeakMap = WeakMap$1;

  /** `Object#toString` result references. */
  var mapTag$1 = '[object Map]',
      objectTag$2 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$1 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';

  var dataViewTag$1 = '[object DataView]';

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = _toSource(_DataView),
      mapCtorString = _toSource(_Map),
      promiseCtorString = _toSource(_Promise),
      setCtorString = _toSource(_Set$1),
      weakMapCtorString = _toSource(_WeakMap);

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = _baseGetTag;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$1) ||
      (_Map && getTag(new _Map) != mapTag$1) ||
      (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
      (_Set$1 && getTag(new _Set$1) != setTag$1) ||
      (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
    getTag = function(value) {
      var result = _baseGetTag(value),
          Ctor = result == objectTag$2 ? value.constructor : undefined,
          ctorString = Ctor ? _toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag$1;
          case mapCtorString: return mapTag$1;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag$1;
          case weakMapCtorString: return weakMapTag$1;
        }
      }
      return result;
    };
  }

  var _getTag = getTag;

  /** Used for built-in method references. */
  var objectProto$d = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$d = objectProto$d.hasOwnProperty;

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);

    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty$d.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }

  var _initCloneArray = initCloneArray;

  /** Built-in value references. */
  var Uint8Array = _root.Uint8Array;

  var _Uint8Array = Uint8Array;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
    return result;
  }

  var _cloneArrayBuffer = cloneArrayBuffer;

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  var _cloneDataView = cloneDataView;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  var _cloneRegExp = cloneRegExp;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  var _cloneSymbol = cloneSymbol;

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  var _cloneTypedArray = cloneTypedArray;

  /** `Object#toString` result references. */
  var boolTag$1 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      mapTag$2 = '[object Map]',
      numberTag$1 = '[object Number]',
      regexpTag$1 = '[object RegExp]',
      setTag$2 = '[object Set]',
      stringTag$1 = '[object String]',
      symbolTag = '[object Symbol]';

  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$2 = '[object DataView]',
      float32Tag$1 = '[object Float32Array]',
      float64Tag$1 = '[object Float64Array]',
      int8Tag$1 = '[object Int8Array]',
      int16Tag$1 = '[object Int16Array]',
      int32Tag$1 = '[object Int32Array]',
      uint8Tag$1 = '[object Uint8Array]',
      uint8ClampedTag$1 = '[object Uint8ClampedArray]',
      uint16Tag$1 = '[object Uint16Array]',
      uint32Tag$1 = '[object Uint32Array]';

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag$1:
        return _cloneArrayBuffer(object);

      case boolTag$1:
      case dateTag$1:
        return new Ctor(+object);

      case dataViewTag$2:
        return _cloneDataView(object, isDeep);

      case float32Tag$1: case float64Tag$1:
      case int8Tag$1: case int16Tag$1: case int32Tag$1:
      case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
        return _cloneTypedArray(object, isDeep);

      case mapTag$2:
        return new Ctor;

      case numberTag$1:
      case stringTag$1:
        return new Ctor(object);

      case regexpTag$1:
        return _cloneRegExp(object);

      case setTag$2:
        return new Ctor;

      case symbolTag:
        return _cloneSymbol(object);
    }
  }

  var _initCloneByTag = initCloneByTag;

  /** Built-in value references. */
  var objectCreate = Object.create;

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = (function() {
    function object() {}
    return function(proto) {
      if (!isObject_1(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object;
      object.prototype = undefined;
      return result;
    };
  }());

  var _baseCreate = baseCreate;

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return (typeof object.constructor == 'function' && !_isPrototype(object))
      ? _baseCreate(_getPrototype(object))
      : {};
  }

  var _initCloneObject = initCloneObject;

  /** `Object#toString` result references. */
  var mapTag$3 = '[object Map]';

  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */
  function baseIsMap(value) {
    return isObjectLike_1(value) && _getTag(value) == mapTag$3;
  }

  var _baseIsMap = baseIsMap;

  /* Node.js helper references. */
  var nodeIsMap = _nodeUtil && _nodeUtil.isMap;

  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */
  var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;

  var isMap_1 = isMap;

  /** `Object#toString` result references. */
  var setTag$3 = '[object Set]';

  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */
  function baseIsSet(value) {
    return isObjectLike_1(value) && _getTag(value) == setTag$3;
  }

  var _baseIsSet = baseIsSet;

  /* Node.js helper references. */
  var nodeIsSet = _nodeUtil && _nodeUtil.isSet;

  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */
  var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;

  var isSet_1 = isSet;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      boolTag$2 = '[object Boolean]',
      dateTag$2 = '[object Date]',
      errorTag$1 = '[object Error]',
      funcTag$2 = '[object Function]',
      genTag$1 = '[object GeneratorFunction]',
      mapTag$4 = '[object Map]',
      numberTag$2 = '[object Number]',
      objectTag$3 = '[object Object]',
      regexpTag$2 = '[object RegExp]',
      setTag$4 = '[object Set]',
      stringTag$2 = '[object String]',
      symbolTag$1 = '[object Symbol]',
      weakMapTag$2 = '[object WeakMap]';

  var arrayBufferTag$2 = '[object ArrayBuffer]',
      dataViewTag$3 = '[object DataView]',
      float32Tag$2 = '[object Float32Array]',
      float64Tag$2 = '[object Float64Array]',
      int8Tag$2 = '[object Int8Array]',
      int16Tag$2 = '[object Int16Array]',
      int32Tag$2 = '[object Int32Array]',
      uint8Tag$2 = '[object Uint8Array]',
      uint8ClampedTag$2 = '[object Uint8ClampedArray]',
      uint16Tag$2 = '[object Uint16Array]',
      uint32Tag$2 = '[object Uint32Array]';

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag$2] = cloneableTags[arrayTag$1] =
  cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$3] =
  cloneableTags[boolTag$2] = cloneableTags[dateTag$2] =
  cloneableTags[float32Tag$2] = cloneableTags[float64Tag$2] =
  cloneableTags[int8Tag$2] = cloneableTags[int16Tag$2] =
  cloneableTags[int32Tag$2] = cloneableTags[mapTag$4] =
  cloneableTags[numberTag$2] = cloneableTags[objectTag$3] =
  cloneableTags[regexpTag$2] = cloneableTags[setTag$4] =
  cloneableTags[stringTag$2] = cloneableTags[symbolTag$1] =
  cloneableTags[uint8Tag$2] = cloneableTags[uint8ClampedTag$2] =
  cloneableTags[uint16Tag$2] = cloneableTags[uint32Tag$2] = true;
  cloneableTags[errorTag$1] = cloneableTags[funcTag$2] =
  cloneableTags[weakMapTag$2] = false;

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject_1(value)) {
      return value;
    }
    var isArr = isArray_1(value);
    if (isArr) {
      result = _initCloneArray(value);
      if (!isDeep) {
        return _copyArray(value, result);
      }
    } else {
      var tag = _getTag(value),
          isFunc = tag == funcTag$2 || tag == genTag$1;

      if (isBuffer_1(value)) {
        return _cloneBuffer(value, isDeep);
      }
      if (tag == objectTag$3 || tag == argsTag$2 || (isFunc && !object)) {
        result = (isFlat || isFunc) ? {} : _initCloneObject(value);
        if (!isDeep) {
          return isFlat
            ? _copySymbolsIn(value, _baseAssignIn(result, value))
            : _copySymbols(value, _baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = _initCloneByTag(value, tag, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new _Stack);
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);

    if (isSet_1(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap_1(value)) {
      value.forEach(function(subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
    }

    var keysFunc = isFull
      ? (isFlat ? _getAllKeysIn : _getAllKeys)
      : (isFlat ? keysIn_1 : keys_1);

    var props = isArr ? undefined : keysFunc(value);
    _arrayEach(props || value, function(subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      // Recursively populate clone (susceptible to call stack limits).
      _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  var _baseClone = baseClone;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$1 = 1,
      CLONE_SYMBOLS_FLAG$1 = 4;

  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep(value) {
    return _baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
  }

  var cloneDeep_1 = cloneDeep;

  function getElement(func) {
    if (typeof func !== 'function' || !func) return null;
    return func();
  }

  function getPoint(point) {
    if ((typeof point === 'undefined' ? 'undefined' : _typeof(point)) !== 'object' || !point) return null;
    return point;
  }

  var Align = {
    props: {
      childrenProps: VuePropTypes.object,
      align: VuePropTypes.object.isRequired,
      target: VuePropTypes.oneOfType([VuePropTypes.func, VuePropTypes.object]).def(function () {
        return window;
      }),
      monitorBufferTime: VuePropTypes.number.def(50),
      monitorWindowResize: VuePropTypes.bool.def(false),
      disabled: VuePropTypes.bool.def(false)
    },
    data: function data() {
      this.aligned = false;
      return {};
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        _this.prevProps = _extends$1({}, _this.$props);
        var props = _this.$props;
        // if parent ref not attached .... use document.getElementById
        !_this.aligned && _this.forceAlign();
        if (!props.disabled && props.monitorWindowResize) {
          _this.startMonitorWindowResize();
        }
      });
    },
    updated: function updated() {
      var _this2 = this;

      this.$nextTick(function () {
        var prevProps = _this2.prevProps;
        var props = _this2.$props;
        var reAlign = false;
        if (!props.disabled) {
          var source = _this2.$el;
          var sourceRect = source ? source.getBoundingClientRect() : null;

          if (prevProps.disabled) {
            reAlign = true;
          } else {
            var lastElement = getElement(prevProps.target);
            var currentElement = getElement(props.target);
            var lastPoint = getPoint(prevProps.target);
            var currentPoint = getPoint(props.target);
            if (isWindow$1(lastElement) && isWindow$1(currentElement)) {
              // Skip if is window
              reAlign = false;
            } else if (lastElement !== currentElement || // Element change
            lastElement && !currentElement && currentPoint || // Change from element to point
            lastPoint && currentPoint && currentElement || // Change from point to element
            currentPoint && !isSamePoint(lastPoint, currentPoint)) {
              reAlign = true;
            }

            // If source element size changed
            var preRect = _this2.sourceRect || {};
            if (!reAlign && source && (!isSimilarValue(preRect.width, sourceRect.width) || !isSimilarValue(preRect.height, sourceRect.height))) {
              reAlign = true;
            }
          }
          _this2.sourceRect = sourceRect;
        }

        if (reAlign) {
          _this2.forceAlign();
        }

        if (props.monitorWindowResize && !props.disabled) {
          _this2.startMonitorWindowResize();
        } else {
          _this2.stopMonitorWindowResize();
        }
        _this2.prevProps = _extends$1({}, _this2.$props, { align: cloneDeep_1(_this2.$props.align) });
      });
    },
    beforeDestroy: function beforeDestroy() {
      this.stopMonitorWindowResize();
    },

    methods: {
      startMonitorWindowResize: function startMonitorWindowResize() {
        if (!this.resizeHandler) {
          this.bufferMonitor = buffer(this.forceAlign, this.$props.monitorBufferTime);
          this.resizeHandler = addEventListenerWrap(window, 'resize', this.bufferMonitor);
        }
      },
      stopMonitorWindowResize: function stopMonitorWindowResize() {
        if (this.resizeHandler) {
          this.bufferMonitor.clear();
          this.resizeHandler.remove();
          this.resizeHandler = null;
        }
      },
      forceAlign: function forceAlign() {
        var _$props = this.$props,
            disabled = _$props.disabled,
            target = _$props.target,
            align = _$props.align;

        if (!disabled && target) {
          var source = this.$el;
          var listeners = getListeners(this);
          var result = void 0;
          var element = getElement(target);
          var point = getPoint(target);

          // IE lose focus after element realign
          // We should record activeElement and restore later
          var activeElement = document.activeElement;

          if (element) {
            result = alignElement(source, element, align);
          } else if (point) {
            result = alignPoint(source, point, align);
          }
          restoreFocus(activeElement, source);
          this.aligned = true;
          listeners.align && listeners.align(source, result);
        }
      }
    },

    render: function render() {
      var childrenProps = this.$props.childrenProps;

      var child = getSlot(this)[0];
      if (child && childrenProps) {
        return cloneElement(child, { props: childrenProps });
      }
      return child;
    }
  };

  var LazyRenderBox = {
    props: {
      visible: VuePropTypes.bool,
      hiddenClassName: VuePropTypes.string
    },
    render: function render() {
      var h = arguments[0];
      var _$props = this.$props,
          hiddenClassName = _$props.hiddenClassName,
          visible = _$props.visible;

      var children = null;
      if (hiddenClassName || !this.$slots['default'] || this.$slots['default'].length > 1) {
        var cls = '';
        children = h(
          'div',
          { 'class': cls },
          [this.$slots['default']]
        );
      } else {
        children = this.$slots['default'][0];
      }
      return children;
    }
  };

  var PopupInner = {
    props: {
      hiddenClassName: VuePropTypes.string.def(''),
      prefixCls: VuePropTypes.string,
      visible: VuePropTypes.bool
    },
    render: function render() {
      var h = arguments[0];
      var _$props = this.$props,
          prefixCls = _$props.prefixCls,
          visible = _$props.visible,
          hiddenClassName = _$props.hiddenClassName;

      var divProps = {
        on: getListeners(this)
      };

      return h(
        'div',
        babelHelperVueJsxMergeProps([divProps, { 'class': !visible ? hiddenClassName : '' }]),
        [h(
          LazyRenderBox,
          { 'class': prefixCls + '-content', attrs: { visible: visible }
          },
          [this.$slots['default']]
        )]
      );
    }
  };

  var START_EVENT_NAME_MAP = {
    transitionstart: {
      transition: 'transitionstart',
      WebkitTransition: 'webkitTransitionStart',
      MozTransition: 'mozTransitionStart',
      OTransition: 'oTransitionStart',
      msTransition: 'MSTransitionStart'
    },

    animationstart: {
      animation: 'animationstart',
      WebkitAnimation: 'webkitAnimationStart',
      MozAnimation: 'mozAnimationStart',
      OAnimation: 'oAnimationStart',
      msAnimation: 'MSAnimationStart'
    }
  };

  var END_EVENT_NAME_MAP = {
    transitionend: {
      transition: 'transitionend',
      WebkitTransition: 'webkitTransitionEnd',
      MozTransition: 'mozTransitionEnd',
      OTransition: 'oTransitionEnd',
      msTransition: 'MSTransitionEnd'
    },

    animationend: {
      animation: 'animationend',
      WebkitAnimation: 'webkitAnimationEnd',
      MozAnimation: 'mozAnimationEnd',
      OAnimation: 'oAnimationEnd',
      msAnimation: 'MSAnimationEnd'
    }
  };

  var startEvents = [];
  var endEvents = [];

  function detectEvents() {
    var testEl = document.createElement('div');
    var style = testEl.style;

    if (!('AnimationEvent' in window)) {
      delete START_EVENT_NAME_MAP.animationstart.animation;
      delete END_EVENT_NAME_MAP.animationend.animation;
    }

    if (!('TransitionEvent' in window)) {
      delete START_EVENT_NAME_MAP.transitionstart.transition;
      delete END_EVENT_NAME_MAP.transitionend.transition;
    }

    function process(EVENT_NAME_MAP, events) {
      for (var baseEventName in EVENT_NAME_MAP) {
        if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {
          var baseEvents = EVENT_NAME_MAP[baseEventName];
          for (var styleName in baseEvents) {
            if (styleName in style) {
              events.push(baseEvents[styleName]);
              break;
            }
          }
        }
      }
    }

    process(START_EVENT_NAME_MAP, startEvents);
    process(END_EVENT_NAME_MAP, endEvents);
  }

  if (typeof window !== 'undefined' && typeof document !== 'undefined') {
    detectEvents();
  }

  function addEventListener(node, eventName, eventListener) {
    node.addEventListener(eventName, eventListener, false);
  }

  function removeEventListener(node, eventName, eventListener) {
    node.removeEventListener(eventName, eventListener, false);
  }

  var TransitionEvents = {
    // Start events
    startEvents: startEvents,

    addStartEventListener: function addStartEventListener(node, eventListener) {
      if (startEvents.length === 0) {
        window.setTimeout(eventListener, 0);
        return;
      }
      startEvents.forEach(function (startEvent) {
        addEventListener(node, startEvent, eventListener);
      });
    },
    removeStartEventListener: function removeStartEventListener(node, eventListener) {
      if (startEvents.length === 0) {
        return;
      }
      startEvents.forEach(function (startEvent) {
        removeEventListener(node, startEvent, eventListener);
      });
    },


    // End events
    endEvents: endEvents,

    addEndEventListener: function addEndEventListener(node, eventListener) {
      if (endEvents.length === 0) {
        window.setTimeout(eventListener, 0);
        return;
      }
      endEvents.forEach(function (endEvent) {
        addEventListener(node, endEvent, eventListener);
      });
    },
    removeEndEventListener: function removeEndEventListener(node, eventListener) {
      if (endEvents.length === 0) {
        return;
      }
      endEvents.forEach(function (endEvent) {
        removeEventListener(node, endEvent, eventListener);
      });
    }
  };

  var isCssAnimationSupported = TransitionEvents.endEvents.length !== 0;
  var capitalPrefixes = ['Webkit', 'Moz', 'O',
  // ms is special .... !
  'ms'];
  var prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];

  function getStyleProperty(node, name) {
    // old ff need null, https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle
    var style = window.getComputedStyle(node, null);
    var ret = '';
    for (var i = 0; i < prefixes.length; i++) {
      ret = style.getPropertyValue(prefixes[i] + name);
      if (ret) {
        break;
      }
    }
    return ret;
  }

  function fixBrowserByTimeout(node) {
    if (isCssAnimationSupported) {
      var transitionDelay = parseFloat(getStyleProperty(node, 'transition-delay')) || 0;
      var transitionDuration = parseFloat(getStyleProperty(node, 'transition-duration')) || 0;
      var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;
      var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;
      var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);
      // sometimes, browser bug
      node.rcEndAnimTimeout = setTimeout(function () {
        node.rcEndAnimTimeout = null;
        if (node.rcEndListener) {
          node.rcEndListener();
        }
      }, time * 1000 + 200);
    }
  }

  function clearBrowserBugTimeout(node) {
    if (node.rcEndAnimTimeout) {
      clearTimeout(node.rcEndAnimTimeout);
      node.rcEndAnimTimeout = null;
    }
  }

  var cssAnimation = function cssAnimation(node, transitionName, endCallback) {
    var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';
    var className = nameIsObj ? transitionName.name : transitionName;
    var activeClassName = nameIsObj ? transitionName.active : transitionName + '-active';
    var end = endCallback;
    var start = void 0;
    var active = void 0;
    var nodeClasses = componentClasses(node);

    if (endCallback && Object.prototype.toString.call(endCallback) === '[object Object]') {
      end = endCallback.end;
      start = endCallback.start;
      active = endCallback.active;
    }

    if (node.rcEndListener) {
      node.rcEndListener();
    }

    node.rcEndListener = function (e) {
      if (e && e.target !== node) {
        return;
      }

      if (node.rcAnimTimeout) {
        cancelAnimationTimeout(node.rcAnimTimeout);
        node.rcAnimTimeout = null;
      }

      clearBrowserBugTimeout(node);

      nodeClasses.remove(className);
      nodeClasses.remove(activeClassName);

      TransitionEvents.removeEndEventListener(node, node.rcEndListener);
      node.rcEndListener = null;

      // Usually this optional end is used for informing an owner of
      // a leave animation and telling it to remove the child.
      if (end) {
        end();
      }
    };

    TransitionEvents.addEndEventListener(node, node.rcEndListener);

    if (start) {
      start();
    }
    nodeClasses.add(className);

    node.rcAnimTimeout = requestAnimationTimeout(function () {
      node.rcAnimTimeout = null;

      nodeClasses.add(className);
      nodeClasses.add(activeClassName);

      if (active) {
        requestAnimationTimeout(active, 0);
      }
      fixBrowserByTimeout(node);
      // 30ms for firefox
    }, 30);

    return {
      stop: function stop() {
        if (node.rcEndListener) {
          node.rcEndListener();
        }
      }
    };
  };

  cssAnimation.style = function (node, style, callback) {
    if (node.rcEndListener) {
      node.rcEndListener();
    }

    node.rcEndListener = function (e) {
      if (e && e.target !== node) {
        return;
      }

      if (node.rcAnimTimeout) {
        cancelAnimationTimeout(node.rcAnimTimeout);
        node.rcAnimTimeout = null;
      }

      clearBrowserBugTimeout(node);

      TransitionEvents.removeEndEventListener(node, node.rcEndListener);
      node.rcEndListener = null;

      // Usually this optional callback is used for informing an owner of
      // a leave animation and telling it to remove the child.
      if (callback) {
        callback();
      }
    };

    TransitionEvents.addEndEventListener(node, node.rcEndListener);

    node.rcAnimTimeout = requestAnimationTimeout(function () {
      for (var s in style) {
        if (style.hasOwnProperty(s)) {
          node.style[s] = style[s];
        }
      }
      node.rcAnimTimeout = null;
      fixBrowserByTimeout(node);
    }, 0);
  };

  cssAnimation.setTransition = function (node, p, value) {
    var property = p;
    var v = value;
    if (value === undefined) {
      v = property;
      property = '';
    }
    property = property || '';
    capitalPrefixes.forEach(function (prefix) {
      node.style[prefix + 'Transition' + property] = v;
    });
  };

  cssAnimation.isCssAnimationSupported = isCssAnimationSupported;

  var Popup = {
    name: 'VCTriggerPopup',
    mixins: [BaseMixin],
    props: {
      visible: VuePropTypes.bool,
      getClassNameFromAlign: VuePropTypes.func,
      getRootDomNode: VuePropTypes.func,
      align: VuePropTypes.any,
      destroyPopupOnHide: VuePropTypes.bool,
      prefixCls: VuePropTypes.string,
      getContainer: VuePropTypes.func,
      transitionName: VuePropTypes.string,
      animation: VuePropTypes.any,
      maskAnimation: VuePropTypes.string,
      maskTransitionName: VuePropTypes.string,
      mask: VuePropTypes.bool,
      zIndex: VuePropTypes.number,
      popupClassName: VuePropTypes.any,
      popupStyle: VuePropTypes.object.def(function () {
        return {};
      }),
      stretch: VuePropTypes.string,
      point: VuePropTypes.shape({
        pageX: VuePropTypes.number,
        pageY: VuePropTypes.number
      })
    },
    data: function data() {
      this.domEl = null;
      return {
        // Used for stretch
        stretchChecked: false,
        targetWidth: undefined,
        targetHeight: undefined
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        _this.rootNode = _this.getPopupDomNode();
        _this.setStretchSize();
      });
    },

    // 如添加会导致动画失效，如放开会导致快速输入时闪动 https://github.com/vueComponent/ant-design-vue/issues/1327，
    // 目前方案是保留动画，闪动问题(动画多次执行)进一步定位
    // beforeUpdate() {
    //   if (this.domEl && this.domEl.rcEndListener) {
    //     this.domEl.rcEndListener();
    //     this.domEl = null;
    //   }
    // },
    updated: function updated() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.setStretchSize();
      });
    },
    beforeDestroy: function beforeDestroy() {
      if (this.$el.parentNode) {
        this.$el.parentNode.removeChild(this.$el);
      } else if (this.$el.remove) {
        this.$el.remove();
      }
    },

    methods: {
      onAlign: function onAlign(popupDomNode, align) {
        var props = this.$props;
        var currentAlignClassName = props.getClassNameFromAlign(align);
        // FIX: https://github.com/react-component/trigger/issues/56
        // FIX: https://github.com/react-component/tooltip/issues/79
        if (this.currentAlignClassName !== currentAlignClassName) {
          this.currentAlignClassName = currentAlignClassName;
          popupDomNode.className = this.getClassName(currentAlignClassName);
        }
        var listeners = getListeners(this);
        listeners.align && listeners.align(popupDomNode, align);
      },


      // Record size if stretch needed
      setStretchSize: function setStretchSize() {
        var _$props = this.$props,
            stretch = _$props.stretch,
            getRootDomNode = _$props.getRootDomNode,
            visible = _$props.visible;
        var _$data = this.$data,
            stretchChecked = _$data.stretchChecked,
            targetHeight = _$data.targetHeight,
            targetWidth = _$data.targetWidth;


        if (!stretch || !visible) {
          if (stretchChecked) {
            this.setState({ stretchChecked: false });
          }
          return;
        }

        var $ele = getRootDomNode();
        if (!$ele) return;

        var height = $ele.offsetHeight;
        var width = $ele.offsetWidth;

        if (targetHeight !== height || targetWidth !== width || !stretchChecked) {
          this.setState({
            stretchChecked: true,
            targetHeight: height,
            targetWidth: width
          });
        }
      },
      getPopupDomNode: function getPopupDomNode() {
        return this.$refs.popupInstance ? this.$refs.popupInstance.$el : null;
      },
      getTargetElement: function getTargetElement() {
        return this.$props.getRootDomNode();
      },


      // `target` on `rc-align` can accept as a function to get the bind element or a point.
      // ref: https://www.npmjs.com/package/rc-align
      getAlignTarget: function getAlignTarget() {
        var point = this.$props.point;

        if (point) {
          return point;
        }
        return this.getTargetElement;
      },
      getMaskTransitionName: function getMaskTransitionName() {
        var props = this.$props;
        var transitionName = props.maskTransitionName;
        var animation = props.maskAnimation;
        if (!transitionName && animation) {
          transitionName = props.prefixCls + '-' + animation;
        }
        return transitionName;
      },
      getTransitionName: function getTransitionName() {
        var props = this.$props;
        var transitionName = props.transitionName;
        var animation = props.animation;
        if (!transitionName) {
          if (typeof animation === 'string') {
            transitionName = '' + animation;
          } else if (animation && animation.props && animation.props.name) {
            transitionName = animation.props.name;
          }
        }
        return transitionName;
      },
      getClassName: function getClassName(currentAlignClassName) {
        return this.$props.prefixCls + ' ' + this.$props.popupClassName + ' ' + currentAlignClassName;
      },
      getPopupElement: function getPopupElement() {
        var _this3 = this;

        var h = this.$createElement;
        var props = this.$props,
            $slots = this.$slots,
            getTransitionName = this.getTransitionName;
        var _$data2 = this.$data,
            stretchChecked = _$data2.stretchChecked,
            targetHeight = _$data2.targetHeight,
            targetWidth = _$data2.targetWidth;
        var align = props.align,
            visible = props.visible,
            prefixCls = props.prefixCls,
            animation = props.animation,
            popupStyle = props.popupStyle,
            getClassNameFromAlign = props.getClassNameFromAlign,
            destroyPopupOnHide = props.destroyPopupOnHide,
            stretch = props.stretch;

        var className = this.getClassName(this.currentAlignClassName || getClassNameFromAlign(align));
        // const hiddenClassName = `${prefixCls}-hidden`
        if (!visible) {
          this.currentAlignClassName = null;
        }
        var sizeStyle = {};
        if (stretch) {
          // Stretch with target
          if (stretch.indexOf('height') !== -1) {
            sizeStyle.height = typeof targetHeight === 'number' ? targetHeight + 'px' : targetHeight;
          } else if (stretch.indexOf('minHeight') !== -1) {
            sizeStyle.minHeight = typeof targetHeight === 'number' ? targetHeight + 'px' : targetHeight;
          }
          if (stretch.indexOf('width') !== -1) {
            sizeStyle.width = typeof targetWidth === 'number' ? targetWidth + 'px' : targetWidth;
          } else if (stretch.indexOf('minWidth') !== -1) {
            sizeStyle.minWidth = typeof targetWidth === 'number' ? targetWidth + 'px' : targetWidth;
          }
          // Delay force align to makes ui smooth
          if (!stretchChecked) {
            // sizeStyle.visibility = 'hidden'
            setTimeout(function () {
              if (_this3.$refs.alignInstance) {
                _this3.$refs.alignInstance.forceAlign();
              }
            }, 0);
          }
        }
        var popupInnerProps = {
          props: {
            prefixCls: prefixCls,
            visible: visible
            // hiddenClassName,
          },
          'class': className,
          on: getListeners(this),
          ref: 'popupInstance',
          style: _extends$1({}, sizeStyle, popupStyle, this.getZIndexStyle())
        };
        var transitionProps = {
          props: {
            appear: true,
            css: false
          }
        };
        var transitionName = getTransitionName();
        var useTransition = !!transitionName;
        var transitionEvent = {
          beforeEnter: function beforeEnter() {
            // el.style.display = el.__vOriginalDisplay
            // this.$refs.alignInstance.forceAlign();
          },
          enter: function enter(el, done) {
            // render 后 vue 会移除通过animate动态添加的 class导致动画闪动，延迟两帧添加动画class，可以进一步定位或者重写 transition 组件
            _this3.$nextTick(function () {
              if (_this3.$refs.alignInstance) {
                _this3.$refs.alignInstance.$nextTick(function () {
                  _this3.domEl = el;
                  cssAnimation(el, transitionName + '-enter', done);
                });
              } else {
                done();
              }
            });
          },
          beforeLeave: function beforeLeave() {
            _this3.domEl = null;
          },
          leave: function leave(el, done) {
            cssAnimation(el, transitionName + '-leave', done);
          }
        };

        if ((typeof animation === 'undefined' ? 'undefined' : _typeof(animation)) === 'object') {
          useTransition = true;

          var _animation$on = animation.on,
              on = _animation$on === undefined ? {} : _animation$on,
              _animation$props = animation.props,
              _props = _animation$props === undefined ? {} : _animation$props;

          transitionProps.props = _extends$1({}, transitionProps.props, _props);
          transitionProps.on = _extends$1({}, transitionEvent, on);
        } else {
          transitionProps.on = transitionEvent;
        }
        if (!useTransition) {
          transitionProps = {};
        }
        if (destroyPopupOnHide) {
          return h(
            'transition',
            transitionProps,
            [visible ? h(
              Align,
              {
                attrs: {
                  target: this.getAlignTarget(),

                  monitorWindowResize: true,
                  align: align
                },
                key: 'popup',
                ref: 'alignInstance', on: {
                  'align': this.onAlign
                }
              },
              [h(
                PopupInner,
                popupInnerProps,
                [$slots['default']]
              )]
            ) : null]
          );
        }
        return h(
          'transition',
          transitionProps,
          [h(
            Align,
            {
              directives: [{
                name: 'show',
                value: visible
              }],
              attrs: {
                target: this.getAlignTarget(),

                monitorWindowResize: true,
                disabled: !visible,
                align: align
              },
              key: 'popup',
              ref: 'alignInstance', on: {
                'align': this.onAlign
              }
            },
            [h(
              PopupInner,
              popupInnerProps,
              [$slots['default']]
            )]
          )]
        );
      },
      getZIndexStyle: function getZIndexStyle() {
        var style = {};
        var props = this.$props;
        if (props.zIndex !== undefined) {
          style.zIndex = props.zIndex;
        }
        return style;
      },
      getMaskElement: function getMaskElement() {
        var h = this.$createElement;

        var props = this.$props;
        var maskElement = null;
        if (props.mask) {
          var maskTransition = this.getMaskTransitionName();
          maskElement = h(LazyRenderBox, {
            directives: [{
              name: 'show',
              value: props.visible
            }],

            style: this.getZIndexStyle(),
            key: 'mask',
            'class': props.prefixCls + '-mask',
            attrs: { visible: props.visible
            }
          });
          if (maskTransition) {
            maskElement = h(
              'transition',
              {
                attrs: { appear: true, name: maskTransition }
              },
              [maskElement]
            );
          }
        }
        return maskElement;
      }
    },

    render: function render() {
      var h = arguments[0];
      var getMaskElement = this.getMaskElement,
          getPopupElement = this.getPopupElement;

      return h('div', [getMaskElement(), getPopupElement()]);
    }
  };

  function isPointsEq(a1, a2, isAlignPoint) {
    if (isAlignPoint) {
      return a1[0] === a2[0];
    }
    return a1[0] === a2[0] && a1[1] === a2[1];
  }

  function getAlignFromPlacement(builtinPlacements, placementStr, align) {
    var baseAlign = builtinPlacements[placementStr] || {};
    return _extends$1({}, baseAlign, align);
  }

  function getAlignPopupClassName(builtinPlacements, prefixCls, align, isAlignPoint) {
    var points = align.points;
    for (var placement in builtinPlacements) {
      if (builtinPlacements.hasOwnProperty(placement)) {
        if (isPointsEq(builtinPlacements[placement].points, points, isAlignPoint)) {
          return prefixCls + '-placement-' + placement;
        }
      }
    }
    return '';
  }
  function noop$3() {}

  var ContainerRender = {
    props: {
      autoMount: VuePropTypes.bool.def(true),
      autoDestroy: VuePropTypes.bool.def(true),
      visible: VuePropTypes.bool,
      forceRender: VuePropTypes.bool.def(false),
      parent: VuePropTypes.any,
      getComponent: VuePropTypes.func.isRequired,
      getContainer: VuePropTypes.func.isRequired,
      children: VuePropTypes.func.isRequired
    },

    mounted: function mounted() {
      if (this.autoMount) {
        this.renderComponent();
      }
    },
    updated: function updated() {
      if (this.autoMount) {
        this.renderComponent();
      }
    },
    beforeDestroy: function beforeDestroy() {
      if (this.autoDestroy) {
        this.removeContainer();
      }
    },

    methods: {
      removeContainer: function removeContainer() {
        if (this.container) {
          this._component && this._component.$destroy();
          this.container.parentNode.removeChild(this.container);
          this.container = null;
          this._component = null;
        }
      },
      renderComponent: function renderComponent() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var ready = arguments[1];
        var visible = this.visible,
            forceRender = this.forceRender,
            getContainer = this.getContainer,
            parent = this.parent;

        var self = this;
        if (visible || parent._component || parent.$refs._component || forceRender) {
          var el = this.componentEl;
          if (!this.container) {
            this.container = getContainer();
            el = document.createElement('div');
            this.componentEl = el;
            this.container.appendChild(el);
          }
          // self.getComponent 不要放在 render 中，会因为响应式数据问题导致，多次触发 render
          var com = { component: self.getComponent(props) };
          if (!this._component) {
            this._component = new this.$root.constructor({
              el: el,
              parent: self,
              data: {
                _com: com
              },
              mounted: function mounted() {
                this.$nextTick(function () {
                  if (ready) {
                    ready.call(self);
                  }
                });
              },
              updated: function updated() {
                this.$nextTick(function () {
                  if (ready) {
                    ready.call(self);
                  }
                });
              },

              methods: {
                setComponent: function setComponent(_com) {
                  this.$data._com = _com;
                }
              },
              render: function render() {
                return this.$data._com.component;
              }
            });
          } else {
            this._component.setComponent(com);
          }
        }
      }
    },

    render: function render() {
      return this.children({
        renderComponent: this.renderComponent,
        removeContainer: this.removeContainer
      });
    }
  };

  Vue.use(ref$1, { name: 'ant-ref' });

  function returnEmptyString() {
    return '';
  }

  function returnDocument() {
    return window.document;
  }
  var ALL_HANDLERS = ['click', 'mousedown', 'touchstart', 'mouseenter', 'mouseleave', 'focus', 'blur', 'contextmenu'];

  var Trigger = {
    name: 'Trigger',
    mixins: [BaseMixin],
    props: {
      action: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.arrayOf(VuePropTypes.string)]).def([]),
      showAction: VuePropTypes.any.def([]),
      hideAction: VuePropTypes.any.def([]),
      getPopupClassNameFromAlign: VuePropTypes.any.def(returnEmptyString),
      // onPopupVisibleChange: PropTypes.func.def(noop),
      afterPopupVisibleChange: VuePropTypes.func.def(noop$3),
      popup: VuePropTypes.any,
      popupStyle: VuePropTypes.object.def(function () {
        return {};
      }),
      prefixCls: VuePropTypes.string.def('rc-trigger-popup'),
      popupClassName: VuePropTypes.string.def(''),
      popupPlacement: VuePropTypes.string,
      builtinPlacements: VuePropTypes.object,
      popupTransitionName: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.object]),
      popupAnimation: VuePropTypes.any,
      mouseEnterDelay: VuePropTypes.number.def(0),
      mouseLeaveDelay: VuePropTypes.number.def(0.1),
      zIndex: VuePropTypes.number,
      focusDelay: VuePropTypes.number.def(0),
      blurDelay: VuePropTypes.number.def(0.15),
      getPopupContainer: VuePropTypes.func,
      getDocument: VuePropTypes.func.def(returnDocument),
      forceRender: VuePropTypes.bool,
      destroyPopupOnHide: VuePropTypes.bool.def(false),
      mask: VuePropTypes.bool.def(false),
      maskClosable: VuePropTypes.bool.def(true),
      // onPopupAlign: PropTypes.func.def(noop),
      popupAlign: VuePropTypes.object.def(function () {
        return {};
      }),
      popupVisible: VuePropTypes.bool,
      defaultPopupVisible: VuePropTypes.bool.def(false),
      maskTransitionName: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.object]),
      maskAnimation: VuePropTypes.string,
      stretch: VuePropTypes.string,
      alignPoint: VuePropTypes.bool // Maybe we can support user pass position in the future
    },
    provide: function provide() {
      return {
        vcTriggerContext: this
      };
    },

    inject: {
      vcTriggerContext: { 'default': function _default() {
          return {};
        } },
      savePopupRef: { 'default': function _default() {
          return noop$3;
        } },
      dialogContext: { 'default': function _default() {
          return null;
        } }
    },
    data: function data() {
      var _this = this;

      var props = this.$props;
      var popupVisible = void 0;
      if (hasProp(this, 'popupVisible')) {
        popupVisible = !!props.popupVisible;
      } else {
        popupVisible = !!props.defaultPopupVisible;
      }
      ALL_HANDLERS.forEach(function (h) {
        _this['fire' + h] = function (e) {
          _this.fireEvents(h, e);
        };
      });
      return {
        prevPopupVisible: popupVisible,
        sPopupVisible: popupVisible,
        point: null
      };
    },

    watch: {
      popupVisible: function popupVisible(val) {
        if (val !== undefined) {
          this.prevPopupVisible = this.sPopupVisible;
          this.sPopupVisible = val;
        }
      }
    },
    deactivated: function deactivated() {
      this.setPopupVisible(false);
    },
    mounted: function mounted() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.renderComponent(null);
        _this2.updatedCal();
      });
    },
    updated: function updated() {
      var _this3 = this;

      var triggerAfterPopupVisibleChange = function triggerAfterPopupVisibleChange() {
        if (_this3.sPopupVisible !== _this3.prevPopupVisible) {
          _this3.afterPopupVisibleChange(_this3.sPopupVisible);
        }
        _this3.prevPopupVisible = _this3.sPopupVisible;
      };
      this.renderComponent(null, triggerAfterPopupVisibleChange);
      this.$nextTick(function () {
        _this3.updatedCal();
      });
    },
    beforeDestroy: function beforeDestroy() {
      this.clearDelayTimer();
      this.clearOutsideHandler();
      clearTimeout(this.mouseDownTimeout);
    },

    methods: {
      updatedCal: function updatedCal() {
        var props = this.$props;
        var state = this.$data;

        // We must listen to `mousedown` or `touchstart`, edge case:
        // https://github.com/ant-design/ant-design/issues/5804
        // https://github.com/react-component/calendar/issues/250
        // https://github.com/react-component/trigger/issues/50
        if (state.sPopupVisible) {
          var currentDocument = void 0;
          if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextmenuToShow())) {
            currentDocument = props.getDocument();
            this.clickOutsideHandler = addEventListenerWrap(currentDocument, 'mousedown', this.onDocumentClick);
          }
          // always hide on mobile
          if (!this.touchOutsideHandler) {
            currentDocument = currentDocument || props.getDocument();
            this.touchOutsideHandler = addEventListenerWrap(currentDocument, 'touchstart', this.onDocumentClick);
          }
          // close popup when trigger type contains 'onContextmenu' and document is scrolling.
          if (!this.contextmenuOutsideHandler1 && this.isContextmenuToShow()) {
            currentDocument = currentDocument || props.getDocument();
            this.contextmenuOutsideHandler1 = addEventListenerWrap(currentDocument, 'scroll', this.onContextmenuClose);
          }
          // close popup when trigger type contains 'onContextmenu' and window is blur.
          if (!this.contextmenuOutsideHandler2 && this.isContextmenuToShow()) {
            this.contextmenuOutsideHandler2 = addEventListenerWrap(window, 'blur', this.onContextmenuClose);
          }
        } else {
          this.clearOutsideHandler();
        }
      },
      onMouseenter: function onMouseenter(e) {
        var mouseEnterDelay = this.$props.mouseEnterDelay;

        this.fireEvents('mouseenter', e);
        this.delaySetPopupVisible(true, mouseEnterDelay, mouseEnterDelay ? null : e);
      },
      onMouseMove: function onMouseMove(e) {
        this.fireEvents('mousemove', e);
        this.setPoint(e);
      },
      onMouseleave: function onMouseleave(e) {
        this.fireEvents('mouseleave', e);
        this.delaySetPopupVisible(false, this.$props.mouseLeaveDelay);
      },
      onPopupMouseenter: function onPopupMouseenter() {
        this.clearDelayTimer();
      },
      onPopupMouseleave: function onPopupMouseleave(e) {
        if (e && e.relatedTarget && !e.relatedTarget.setTimeout && this._component && this._component.getPopupDomNode && contains(this._component.getPopupDomNode(), e.relatedTarget)) {
          return;
        }
        this.delaySetPopupVisible(false, this.$props.mouseLeaveDelay);
      },
      onFocus: function onFocus(e) {
        this.fireEvents('focus', e);
        // incase focusin and focusout
        this.clearDelayTimer();
        if (this.isFocusToShow()) {
          this.focusTime = Date.now();
          this.delaySetPopupVisible(true, this.$props.focusDelay);
        }
      },
      onMousedown: function onMousedown(e) {
        this.fireEvents('mousedown', e);
        this.preClickTime = Date.now();
      },
      onTouchstart: function onTouchstart(e) {
        this.fireEvents('touchstart', e);
        this.preTouchTime = Date.now();
      },
      onBlur: function onBlur(e) {
        if (!contains(e.target, e.relatedTarget || document.activeElement)) {
          this.fireEvents('blur', e);
          this.clearDelayTimer();
          if (this.isBlurToHide()) {
            this.delaySetPopupVisible(false, this.$props.blurDelay);
          }
        }
      },
      onContextmenu: function onContextmenu(e) {
        e.preventDefault();
        this.fireEvents('contextmenu', e);
        this.setPopupVisible(true, e);
      },
      onContextmenuClose: function onContextmenuClose() {
        if (this.isContextmenuToShow()) {
          this.close();
        }
      },
      onClick: function onClick(event) {
        this.fireEvents('click', event);
        // focus will trigger click
        if (this.focusTime) {
          var preTime = void 0;
          if (this.preClickTime && this.preTouchTime) {
            preTime = Math.min(this.preClickTime, this.preTouchTime);
          } else if (this.preClickTime) {
            preTime = this.preClickTime;
          } else if (this.preTouchTime) {
            preTime = this.preTouchTime;
          }
          if (Math.abs(preTime - this.focusTime) < 20) {
            return;
          }
          this.focusTime = 0;
        }
        this.preClickTime = 0;
        this.preTouchTime = 0;
        // Only prevent default when all the action is click.
        // https://github.com/ant-design/ant-design/issues/17043
        // https://github.com/ant-design/ant-design/issues/17291
        if (this.isClickToShow() && (this.isClickToHide() || this.isBlurToHide()) && event && event.preventDefault) {
          event.preventDefault();
        }
        if (event && event.domEvent) {
          event.domEvent.preventDefault();
        }
        var nextVisible = !this.$data.sPopupVisible;
        if (this.isClickToHide() && !nextVisible || nextVisible && this.isClickToShow()) {
          this.setPopupVisible(!this.$data.sPopupVisible, event);
        }
      },
      onPopupMouseDown: function onPopupMouseDown() {
        var _this4 = this;

        var _vcTriggerContext = this.vcTriggerContext,
            vcTriggerContext = _vcTriggerContext === undefined ? {} : _vcTriggerContext;

        this.hasPopupMouseDown = true;

        clearTimeout(this.mouseDownTimeout);
        this.mouseDownTimeout = setTimeout(function () {
          _this4.hasPopupMouseDown = false;
        }, 0);

        if (vcTriggerContext.onPopupMouseDown) {
          vcTriggerContext.onPopupMouseDown.apply(vcTriggerContext, arguments);
        }
      },
      onDocumentClick: function onDocumentClick(event) {
        if (this.$props.mask && !this.$props.maskClosable) {
          return;
        }
        var target = event.target;
        var root = this.$el;
        if (!contains(root, target) && !this.hasPopupMouseDown) {
          this.close();
        }
      },
      getPopupDomNode: function getPopupDomNode() {
        if (this._component && this._component.getPopupDomNode) {
          return this._component.getPopupDomNode();
        }
        return null;
      },
      getRootDomNode: function getRootDomNode() {
        return this.$el;
        // return this.$el.children[0] || this.$el
      },
      handleGetPopupClassFromAlign: function handleGetPopupClassFromAlign(align) {
        var className = [];
        var props = this.$props;
        var popupPlacement = props.popupPlacement,
            builtinPlacements = props.builtinPlacements,
            prefixCls = props.prefixCls,
            alignPoint = props.alignPoint,
            getPopupClassNameFromAlign = props.getPopupClassNameFromAlign;

        if (popupPlacement && builtinPlacements) {
          className.push(getAlignPopupClassName(builtinPlacements, prefixCls, align, alignPoint));
        }
        if (getPopupClassNameFromAlign) {
          className.push(getPopupClassNameFromAlign(align));
        }
        return className.join(' ');
      },
      getPopupAlign: function getPopupAlign() {
        var props = this.$props;
        var popupPlacement = props.popupPlacement,
            popupAlign = props.popupAlign,
            builtinPlacements = props.builtinPlacements;

        if (popupPlacement && builtinPlacements) {
          return getAlignFromPlacement(builtinPlacements, popupPlacement, popupAlign);
        }
        return popupAlign;
      },
      savePopup: function savePopup(node) {
        this._component = node;
        this.savePopupRef(node);
      },
      getComponent: function getComponent() {
        var h = this.$createElement;

        var self = this;
        var mouseProps = {};
        if (this.isMouseEnterToShow()) {
          mouseProps.mouseenter = self.onPopupMouseenter;
        }
        if (this.isMouseLeaveToHide()) {
          mouseProps.mouseleave = self.onPopupMouseleave;
        }
        mouseProps.mousedown = this.onPopupMouseDown;
        mouseProps.touchstart = this.onPopupMouseDown;
        var handleGetPopupClassFromAlign = self.handleGetPopupClassFromAlign,
            getRootDomNode = self.getRootDomNode,
            getContainer = self.getContainer;
        var _self$$props = self.$props,
            prefixCls = _self$$props.prefixCls,
            destroyPopupOnHide = _self$$props.destroyPopupOnHide,
            popupClassName = _self$$props.popupClassName,
            action = _self$$props.action,
            popupAnimation = _self$$props.popupAnimation,
            popupTransitionName = _self$$props.popupTransitionName,
            popupStyle = _self$$props.popupStyle,
            mask = _self$$props.mask,
            maskAnimation = _self$$props.maskAnimation,
            maskTransitionName = _self$$props.maskTransitionName,
            zIndex = _self$$props.zIndex,
            stretch = _self$$props.stretch,
            alignPoint = _self$$props.alignPoint;
        var _$data = this.$data,
            sPopupVisible = _$data.sPopupVisible,
            point = _$data.point;

        var align = this.getPopupAlign();
        var popupProps = {
          props: {
            prefixCls: prefixCls,
            destroyPopupOnHide: destroyPopupOnHide,
            visible: sPopupVisible,
            point: alignPoint && point,
            action: action,
            align: align,
            animation: popupAnimation,
            getClassNameFromAlign: handleGetPopupClassFromAlign,
            stretch: stretch,
            getRootDomNode: getRootDomNode,
            mask: mask,
            zIndex: zIndex,
            transitionName: popupTransitionName,
            maskAnimation: maskAnimation,
            maskTransitionName: maskTransitionName,
            getContainer: getContainer,
            popupClassName: popupClassName,
            popupStyle: popupStyle
          },
          on: _extends$1({
            align: getListeners(this).popupAlign || noop$3
          }, mouseProps),
          directives: [{
            name: 'ant-ref',
            value: this.savePopup
          }]
        };
        return h(
          Popup,
          popupProps,
          [getComponentFromProp(self, 'popup')]
        );
      },
      getContainer: function getContainer() {
        var props = this.$props,
            dialogContext = this.dialogContext;

        var popupContainer = document.createElement('div');
        // Make sure default popup container will never cause scrollbar appearing
        // https://github.com/react-component/trigger/issues/41
        popupContainer.style.position = 'absolute';
        popupContainer.style.top = '0';
        popupContainer.style.left = '0';
        popupContainer.style.width = '100%';
        var mountNode = props.getPopupContainer ? props.getPopupContainer(this.$el, dialogContext) : props.getDocument().body;
        mountNode.appendChild(popupContainer);
        this.popupContainer = popupContainer;
        return popupContainer;
      },
      setPopupVisible: function setPopupVisible(sPopupVisible, event) {
        var alignPoint = this.alignPoint,
            prevPopupVisible = this.sPopupVisible;

        this.clearDelayTimer();
        if (prevPopupVisible !== sPopupVisible) {
          if (!hasProp(this, 'popupVisible')) {
            this.setState({
              sPopupVisible: sPopupVisible,
              prevPopupVisible: prevPopupVisible
            });
          }
          var listeners = getListeners(this);
          listeners.popupVisibleChange && listeners.popupVisibleChange(sPopupVisible);
        }
        // Always record the point position since mouseEnterDelay will delay the show
        if (alignPoint && event) {
          this.setPoint(event);
        }
      },
      setPoint: function setPoint(point) {
        var alignPoint = this.$props.alignPoint;

        if (!alignPoint || !point) return;

        this.setState({
          point: {
            pageX: point.pageX,
            pageY: point.pageY
          }
        });
      },
      delaySetPopupVisible: function delaySetPopupVisible(visible, delayS, event) {
        var _this5 = this;

        var delay = delayS * 1000;
        this.clearDelayTimer();
        if (delay) {
          var point = event ? { pageX: event.pageX, pageY: event.pageY } : null;
          this.delayTimer = requestAnimationTimeout(function () {
            _this5.setPopupVisible(visible, point);
            _this5.clearDelayTimer();
          }, delay);
        } else {
          this.setPopupVisible(visible, event);
        }
      },
      clearDelayTimer: function clearDelayTimer() {
        if (this.delayTimer) {
          cancelAnimationTimeout(this.delayTimer);
          this.delayTimer = null;
        }
      },
      clearOutsideHandler: function clearOutsideHandler() {
        if (this.clickOutsideHandler) {
          this.clickOutsideHandler.remove();
          this.clickOutsideHandler = null;
        }

        if (this.contextmenuOutsideHandler1) {
          this.contextmenuOutsideHandler1.remove();
          this.contextmenuOutsideHandler1 = null;
        }

        if (this.contextmenuOutsideHandler2) {
          this.contextmenuOutsideHandler2.remove();
          this.contextmenuOutsideHandler2 = null;
        }

        if (this.touchOutsideHandler) {
          this.touchOutsideHandler.remove();
          this.touchOutsideHandler = null;
        }
      },
      createTwoChains: function createTwoChains(event) {
        var fn = function fn() {};
        var events = getListeners(this);
        if (this.childOriginEvents[event] && events[event]) {
          return this['fire' + event];
        }
        fn = this.childOriginEvents[event] || events[event] || fn;
        return fn;
      },
      isClickToShow: function isClickToShow() {
        var _$props = this.$props,
            action = _$props.action,
            showAction = _$props.showAction;

        return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;
      },
      isContextmenuToShow: function isContextmenuToShow() {
        var _$props2 = this.$props,
            action = _$props2.action,
            showAction = _$props2.showAction;

        return action.indexOf('contextmenu') !== -1 || showAction.indexOf('contextmenu') !== -1;
      },
      isClickToHide: function isClickToHide() {
        var _$props3 = this.$props,
            action = _$props3.action,
            hideAction = _$props3.hideAction;

        return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;
      },
      isMouseEnterToShow: function isMouseEnterToShow() {
        var _$props4 = this.$props,
            action = _$props4.action,
            showAction = _$props4.showAction;

        return action.indexOf('hover') !== -1 || showAction.indexOf('mouseenter') !== -1;
      },
      isMouseLeaveToHide: function isMouseLeaveToHide() {
        var _$props5 = this.$props,
            action = _$props5.action,
            hideAction = _$props5.hideAction;

        return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseleave') !== -1;
      },
      isFocusToShow: function isFocusToShow() {
        var _$props6 = this.$props,
            action = _$props6.action,
            showAction = _$props6.showAction;

        return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;
      },
      isBlurToHide: function isBlurToHide() {
        var _$props7 = this.$props,
            action = _$props7.action,
            hideAction = _$props7.hideAction;

        return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;
      },
      forcePopupAlign: function forcePopupAlign() {
        if (this.$data.sPopupVisible && this._component && this._component.$refs.alignInstance) {
          this._component.$refs.alignInstance.forceAlign();
        }
      },
      fireEvents: function fireEvents(type, e) {
        if (this.childOriginEvents[type]) {
          this.childOriginEvents[type](e);
        }
        this.__emit(type, e);
      },
      close: function close() {
        this.setPopupVisible(false);
      }
    },
    render: function render() {
      var _this6 = this;

      var h = arguments[0];
      var sPopupVisible = this.sPopupVisible;

      var children = filterEmpty(this.$slots['default']);
      var _$props8 = this.$props,
          forceRender = _$props8.forceRender,
          alignPoint = _$props8.alignPoint;


      if (children.length > 1) {
        warning$1(false, 'Trigger $slots.default.length > 1, just support only one default', true);
      }
      var child = children[0];
      this.childOriginEvents = getDataEvents(child);
      var newChildProps = {
        props: {},
        nativeOn: {},
        key: 'trigger'
      };

      if (this.isContextmenuToShow()) {
        newChildProps.nativeOn.contextmenu = this.onContextmenu;
      } else {
        newChildProps.nativeOn.contextmenu = this.createTwoChains('contextmenu');
      }

      if (this.isClickToHide() || this.isClickToShow()) {
        newChildProps.nativeOn.click = this.onClick;
        newChildProps.nativeOn.mousedown = this.onMousedown;
        newChildProps.nativeOn.touchstart = this.onTouchstart;
      } else {
        newChildProps.nativeOn.click = this.createTwoChains('click');
        newChildProps.nativeOn.mousedown = this.createTwoChains('mousedown');
        newChildProps.nativeOn.touchstart = this.createTwoChains('onTouchstart');
      }
      if (this.isMouseEnterToShow()) {
        newChildProps.nativeOn.mouseenter = this.onMouseenter;
        if (alignPoint) {
          newChildProps.nativeOn.mousemove = this.onMouseMove;
        }
      } else {
        newChildProps.nativeOn.mouseenter = this.createTwoChains('mouseenter');
      }
      if (this.isMouseLeaveToHide()) {
        newChildProps.nativeOn.mouseleave = this.onMouseleave;
      } else {
        newChildProps.nativeOn.mouseleave = this.createTwoChains('mouseleave');
      }

      if (this.isFocusToShow() || this.isBlurToHide()) {
        newChildProps.nativeOn.focus = this.onFocus;
        newChildProps.nativeOn.blur = this.onBlur;
      } else {
        newChildProps.nativeOn.focus = this.createTwoChains('focus');
        newChildProps.nativeOn.blur = function (e) {
          if (e && (!e.relatedTarget || !contains(e.target, e.relatedTarget))) {
            _this6.createTwoChains('blur')(e);
          }
        };
      }

      this.trigger = cloneElement(child, newChildProps);

      return h(ContainerRender, {
        attrs: {
          parent: this,
          visible: sPopupVisible,
          autoMount: false,
          forceRender: forceRender,
          getComponent: this.getComponent,
          getContainer: this.getContainer,
          children: function children(_ref) {
            var renderComponent = _ref.renderComponent;

            _this6.renderComponent = renderComponent;
            return _this6.trigger;
          }
        }
      });
    }
  };

  var autoAdjustOverflow = {
    adjustX: 1,
    adjustY: 1
  };

  var placements = {
    topLeft: {
      points: ['bl', 'tl'],
      overflow: autoAdjustOverflow,
      offset: [0, -7]
    },
    bottomLeft: {
      points: ['tl', 'bl'],
      overflow: autoAdjustOverflow,
      offset: [0, 7]
    },
    leftTop: {
      points: ['tr', 'tl'],
      overflow: autoAdjustOverflow,
      offset: [-4, 0]
    },
    rightTop: {
      points: ['tl', 'tr'],
      overflow: autoAdjustOverflow,
      offset: [4, 0]
    }
  };

  var noop$4 = function noop() {};
  var getTransitionProps = function getTransitionProps(transitionName) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var beforeEnter = opt.beforeEnter,
        enter = opt.enter,
        afterEnter = opt.afterEnter,
        leave = opt.leave,
        afterLeave = opt.afterLeave,
        _opt$appear = opt.appear,
        appear = _opt$appear === undefined ? true : _opt$appear,
        tag = opt.tag,
        nativeOn = opt.nativeOn;

    var transitionProps = {
      props: {
        appear: appear,
        css: false
      },
      on: {
        beforeEnter: beforeEnter || noop$4,
        enter: enter || function (el, done) {
          cssAnimation(el, transitionName + '-enter', done);
        },
        afterEnter: afterEnter || noop$4,
        leave: leave || function (el, done) {
          cssAnimation(el, transitionName + '-leave', done);
        },
        afterLeave: afterLeave || noop$4
      },
      nativeOn: nativeOn
    };
    // transition-group
    if (tag) {
      transitionProps.tag = tag;
    }
    return transitionProps;
  };

  var injectExtraPropsKey = 'ANT_MENU_PROVIDER_PROPS_KEY';
  var FunctionProvider = {
    inheritAttrs: false,
    provide: function provide() {
      return _defineProperty({}, injectExtraPropsKey, this);
    },
    render: function render() {
      var slots = this.$slots;

      return slots['default'][0];
    }
  };

  var guid = 0;

  var popupPlacementMap = {
    horizontal: 'bottomLeft',
    vertical: 'rightTop',
    'vertical-left': 'rightTop',
    'vertical-right': 'leftTop'
  };

  var updateDefaultActiveFirst = function updateDefaultActiveFirst(store, eventKey, defaultActiveFirst) {
    var menuId = getMenuIdFromSubMenuEventKey(eventKey);
    var state = store.getState();
    store.setState({
      defaultActiveFirst: _extends$1({}, state.defaultActiveFirst, _defineProperty({}, menuId, defaultActiveFirst))
    });
  };

  var SubMenu = {
    name: 'SubMenu',
    props: {
      parentMenu: VuePropTypes.object,
      title: VuePropTypes.any,
      selectedKeys: VuePropTypes.array.def([]),
      openKeys: VuePropTypes.array.def([]),
      openChange: VuePropTypes.func.def(noop$2),
      rootPrefixCls: VuePropTypes.string,
      eventKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      multiple: VuePropTypes.bool,
      active: VuePropTypes.bool, // TODO: remove
      isRootMenu: VuePropTypes.bool.def(false),
      index: VuePropTypes.number,
      triggerSubMenuAction: VuePropTypes.string,
      popupClassName: VuePropTypes.string,
      getPopupContainer: VuePropTypes.func,
      forceSubMenuRender: VuePropTypes.bool,
      openAnimation: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.object]),
      disabled: VuePropTypes.bool,
      subMenuOpenDelay: VuePropTypes.number.def(0.1),
      subMenuCloseDelay: VuePropTypes.number.def(0.1),
      level: VuePropTypes.number.def(1),
      inlineIndent: VuePropTypes.number.def(24),
      openTransitionName: VuePropTypes.string,
      popupOffset: VuePropTypes.array,
      isOpen: VuePropTypes.bool,
      store: VuePropTypes.object,
      mode: VuePropTypes.oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']).def('vertical'),
      manualRef: VuePropTypes.func.def(noop$2),
      builtinPlacements: VuePropTypes.object.def(function () {
        return {};
      }),
      itemIcon: VuePropTypes.any,
      expandIcon: VuePropTypes.any,
      subMenuKey: VuePropTypes.string
    },
    mixins: [BaseMixin],
    isSubMenu: true,
    data: function data() {
      var props = this.$props;
      var store = props.store;
      var eventKey = props.eventKey;
      var defaultActiveFirst = store.getState().defaultActiveFirst;
      var value = false;

      if (defaultActiveFirst) {
        value = defaultActiveFirst[eventKey];
      }

      updateDefaultActiveFirst(store, eventKey, value);
      return {
        // defaultActiveFirst: false,
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        _this.handleUpdated();
      });
    },
    updated: function updated() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.handleUpdated();
      });
    },
    beforeDestroy: function beforeDestroy() {
      var eventKey = this.eventKey;

      this.__emit('destroy', eventKey);

      /* istanbul ignore if */
      if (this.minWidthTimeout) {
        cancelAnimationTimeout(this.minWidthTimeout);
        this.minWidthTimeout = null;
      }

      /* istanbul ignore if */
      if (this.mouseenterTimeout) {
        cancelAnimationTimeout(this.mouseenterTimeout);
        this.mouseenterTimeout = null;
      }
    },

    methods: {
      handleUpdated: function handleUpdated() {
        var _this3 = this;

        var _$props = this.$props,
            mode = _$props.mode,
            parentMenu = _$props.parentMenu,
            manualRef = _$props.manualRef;

        // invoke customized ref to expose component to mixin

        if (manualRef) {
          manualRef(this);
        }

        if (mode !== 'horizontal' || !parentMenu.isRootMenu || !this.isOpen) {
          return;
        }

        this.minWidthTimeout = requestAnimationTimeout(function () {
          return _this3.adjustWidth();
        }, 0);
      },
      onKeyDown: function onKeyDown(e) {
        var keyCode = e.keyCode;
        var menu = this.menuInstance;
        var _$props2 = this.$props,
            store = _$props2.store,
            isOpen = _$props2.isOpen;


        if (keyCode === KeyCode.ENTER) {
          this.onTitleClick(e);
          updateDefaultActiveFirst(store, this.eventKey, true);
          return true;
        }

        if (keyCode === KeyCode.RIGHT) {
          if (isOpen) {
            menu.onKeyDown(e);
          } else {
            this.triggerOpenChange(true);
            // need to update current menu's defaultActiveFirst value
            updateDefaultActiveFirst(store, this.eventKey, true);
          }
          return true;
        }
        if (keyCode === KeyCode.LEFT) {
          var handled = void 0;
          if (isOpen) {
            handled = menu.onKeyDown(e);
          } else {
            return undefined;
          }
          if (!handled) {
            this.triggerOpenChange(false);
            handled = true;
          }
          return handled;
        }

        if (isOpen && (keyCode === KeyCode.UP || keyCode === KeyCode.DOWN)) {
          return menu.onKeyDown(e);
        }
        return undefined;
      },
      onPopupVisibleChange: function onPopupVisibleChange(visible) {
        this.triggerOpenChange(visible, visible ? 'mouseenter' : 'mouseleave');
      },
      onMouseEnter: function onMouseEnter(e) {
        var _$props3 = this.$props,
            key = _$props3.eventKey,
            store = _$props3.store;

        updateDefaultActiveFirst(store, key, false);
        this.__emit('mouseenter', {
          key: key,
          domEvent: e
        });
      },
      onMouseLeave: function onMouseLeave(e) {
        var eventKey = this.eventKey,
            parentMenu = this.parentMenu;

        parentMenu.subMenuInstance = this;
        // parentMenu.subMenuLeaveFn = () => {
        // // trigger mouseleave
        //   this.__emit('mouseleave', {
        //     key: eventKey,
        //     domEvent: e,
        //   })
        // }
        this.__emit('mouseleave', {
          key: eventKey,
          domEvent: e
        });
        // prevent popup menu and submenu gap
        // parentMenu.subMenuLeaveTimer = setTimeout(parentMenu.subMenuLeaveFn, 100)
      },
      onTitleMouseEnter: function onTitleMouseEnter(domEvent) {
        var key = this.$props.eventKey;
        // this.clearSubMenuTitleLeaveTimer()

        this.__emit('itemHover', {
          key: key,
          hover: true
        });
        this.__emit('titleMouseenter', {
          key: key,
          domEvent: domEvent
        });
      },
      onTitleMouseLeave: function onTitleMouseLeave(e) {
        var eventKey = this.eventKey,
            parentMenu = this.parentMenu;

        parentMenu.subMenuInstance = this;
        this.__emit('itemHover', {
          key: eventKey,
          hover: false
        });
        this.__emit('titleMouseleave', {
          key: eventKey,
          domEvent: e
        });
      },
      onTitleClick: function onTitleClick(e) {
        var _$props4 = this.$props,
            triggerSubMenuAction = _$props4.triggerSubMenuAction,
            eventKey = _$props4.eventKey,
            isOpen = _$props4.isOpen,
            store = _$props4.store;

        this.__emit('titleClick', {
          key: eventKey,
          domEvent: e
        });
        if (triggerSubMenuAction === 'hover') {
          return;
        }
        this.triggerOpenChange(!isOpen, 'click');
        updateDefaultActiveFirst(store, eventKey, false);
      },
      onSubMenuClick: function onSubMenuClick(info) {
        this.__emit('click', this.addKeyPath(info));
      },
      getPrefixCls: function getPrefixCls() {
        return this.$props.rootPrefixCls + '-submenu';
      },
      getActiveClassName: function getActiveClassName() {
        return this.getPrefixCls() + '-active';
      },
      getDisabledClassName: function getDisabledClassName() {
        return this.getPrefixCls() + '-disabled';
      },
      getSelectedClassName: function getSelectedClassName() {
        return this.getPrefixCls() + '-selected';
      },
      getOpenClassName: function getOpenClassName() {
        return this.$props.rootPrefixCls + '-submenu-open';
      },
      saveMenuInstance: function saveMenuInstance(c) {
        // children menu instance
        this.menuInstance = c;
      },
      addKeyPath: function addKeyPath(info) {
        return _extends$1({}, info, {
          keyPath: (info.keyPath || []).concat(this.$props.eventKey)
        });
      },


      // triggerOpenChange (open, type) {
      //   const key = this.$props.eventKey
      //   this.__emit('openChange', {
      //     key,
      //     item: this,
      //     trigger: type,
      //     open,
      //   })
      // },
      triggerOpenChange: function triggerOpenChange(open, type) {
        var _this4 = this;

        var key = this.$props.eventKey;
        var openChange = function openChange() {
          _this4.__emit('openChange', {
            key: key,
            item: _this4,
            trigger: type,
            open: open
          });
        };
        if (type === 'mouseenter') {
          // make sure mouseenter happen after other menu item's mouseleave
          this.mouseenterTimeout = requestAnimationTimeout(function () {
            openChange();
          }, 0);
        } else {
          openChange();
        }
      },
      isChildrenSelected: function isChildrenSelected() {
        var ret = { find: false };
        loopMenuItemRecursively(this.$slots['default'], this.$props.selectedKeys, ret);
        return ret.find;
      },

      // isOpen () {
      //   return this.$props.openKeys.indexOf(this.$props.eventKey) !== -1
      // },

      adjustWidth: function adjustWidth() {
        /* istanbul ignore if */
        if (!this.$refs.subMenuTitle || !this.menuInstance) {
          return;
        }
        var popupMenu = this.menuInstance.$el;
        if (popupMenu.offsetWidth >= this.$refs.subMenuTitle.offsetWidth) {
          return;
        }

        /* istanbul ignore next */
        popupMenu.style.minWidth = this.$refs.subMenuTitle.offsetWidth + 'px';
      },
      renderChildren: function renderChildren(children) {
        var h = this.$createElement;

        var props = this.$props;

        var _getListeners = getListeners(this),
            select = _getListeners.select,
            deselect = _getListeners.deselect,
            openChange = _getListeners.openChange;

        var subPopupMenuProps = {
          props: {
            mode: props.mode === 'horizontal' ? 'vertical' : props.mode,
            visible: props.isOpen,
            level: props.level + 1,
            inlineIndent: props.inlineIndent,
            focusable: false,
            selectedKeys: props.selectedKeys,
            eventKey: props.eventKey + '-menu-',
            openKeys: props.openKeys,
            openTransitionName: props.openTransitionName,
            openAnimation: props.openAnimation,
            subMenuOpenDelay: props.subMenuOpenDelay,
            parentMenu: this,
            subMenuCloseDelay: props.subMenuCloseDelay,
            forceSubMenuRender: props.forceSubMenuRender,
            triggerSubMenuAction: props.triggerSubMenuAction,
            builtinPlacements: props.builtinPlacements,
            defaultActiveFirst: props.store.getState().defaultActiveFirst[getMenuIdFromSubMenuEventKey(props.eventKey)],
            multiple: props.multiple,
            prefixCls: props.rootPrefixCls,
            manualRef: this.saveMenuInstance,
            itemIcon: getComponentFromProp(this, 'itemIcon'),
            expandIcon: getComponentFromProp(this, 'expandIcon'),
            children: children
          },
          on: {
            click: this.onSubMenuClick,
            select: select,
            deselect: deselect,
            openChange: openChange
          },
          id: this.internalMenuId
        };
        var baseProps = subPopupMenuProps.props;
        var haveRendered = this.haveRendered;
        this.haveRendered = true;

        this.haveOpened = this.haveOpened || baseProps.visible || baseProps.forceSubMenuRender;
        // never rendered not planning to, don't render
        if (!this.haveOpened) {
          return h('div');
        }

        // don't show transition on first rendering (no animation for opened menu)
        // show appear transition if it's not visible (not sure why)
        // show appear transition if it's not inline mode
        var transitionAppear = haveRendered || !baseProps.visible || !baseProps.mode === 'inline';
        subPopupMenuProps['class'] = ' ' + baseProps.prefixCls + '-sub';
        var animProps = { appear: transitionAppear, css: false };
        var transitionProps = {
          props: animProps,
          on: {}
        };
        if (baseProps.openTransitionName) {
          transitionProps = getTransitionProps(baseProps.openTransitionName, {
            appear: transitionAppear
          });
        } else if (_typeof(baseProps.openAnimation) === 'object') {
          animProps = _extends$1({}, animProps, baseProps.openAnimation.props || {});
          if (!transitionAppear) {
            animProps.appear = false;
          }
        } else if (typeof baseProps.openAnimation === 'string') {
          transitionProps = getTransitionProps(baseProps.openAnimation, { appear: transitionAppear });
        }

        if (_typeof(baseProps.openAnimation) === 'object' && baseProps.openAnimation.on) {
          transitionProps.on = baseProps.openAnimation.on;
        }
        return h(
          'transition',
          transitionProps,
          [h(SubPopupMenu$1, babelHelperVueJsxMergeProps([{
            directives: [{
              name: 'show',
              value: props.isOpen
            }]
          }, subPopupMenuProps]))]
        );
      }
    },

    render: function render() {
      var _className, _attrs;

      var h = arguments[0];

      var props = this.$props;
      var rootPrefixCls = this.rootPrefixCls,
          parentMenu = this.parentMenu;

      var isOpen = props.isOpen;
      var prefixCls = this.getPrefixCls();
      var isInlineMode = props.mode === 'inline';
      var className = (_className = {}, _defineProperty(_className, prefixCls, true), _defineProperty(_className, prefixCls + '-' + props.mode, true), _defineProperty(_className, this.getOpenClassName(), isOpen), _defineProperty(_className, this.getActiveClassName(), props.active || isOpen && !isInlineMode), _defineProperty(_className, this.getDisabledClassName(), props.disabled), _defineProperty(_className, this.getSelectedClassName(), this.isChildrenSelected()), _className);

      if (!this.internalMenuId) {
        if (props.eventKey) {
          this.internalMenuId = props.eventKey + '$Menu';
        } else {
          this.internalMenuId = '$__$' + ++guid + '$Menu';
        }
      }

      var mouseEvents = {};
      var titleClickEvents = {};
      var titleMouseEvents = {};
      if (!props.disabled) {
        mouseEvents = {
          mouseleave: this.onMouseLeave,
          mouseenter: this.onMouseEnter
        };

        // only works in title, not outer li
        titleClickEvents = {
          click: this.onTitleClick
        };
        titleMouseEvents = {
          mouseenter: this.onTitleMouseEnter,
          mouseleave: this.onTitleMouseLeave
        };
      }

      var style = {};
      if (isInlineMode) {
        style.paddingLeft = props.inlineIndent * props.level + 'px';
      }
      var ariaOwns = {};
      // only set aria-owns when menu is open
      // otherwise it would be an invalid aria-owns value
      // since corresponding node cannot be found
      if (isOpen) {
        ariaOwns = {
          'aria-owns': this.internalMenuId
        };
      }
      var titleProps = {
        attrs: _extends$1({
          'aria-expanded': isOpen
        }, ariaOwns, {
          'aria-haspopup': 'true',
          title: typeof props.title === 'string' ? props.title : undefined
        }),
        on: _extends$1({}, titleMouseEvents, titleClickEvents),
        style: style,
        'class': prefixCls + '-title',
        ref: 'subMenuTitle'
      };
      // expand custom icon should NOT be displayed in menu with horizontal mode.
      var icon = null;
      if (props.mode !== 'horizontal') {
        icon = getComponentFromProp(this, 'expandIcon', props);
      }
      var title = h(
        'div',
        titleProps,
        [getComponentFromProp(this, 'title'), icon || h('i', { 'class': prefixCls + '-arrow' })]
      );
      var children = this.renderChildren(filterEmpty(this.$slots['default']));

      var getPopupContainer = this.parentMenu.isRootMenu ? this.parentMenu.getPopupContainer : function (triggerNode) {
        return triggerNode.parentNode;
      };
      var popupPlacement = popupPlacementMap[props.mode];
      var popupAlign = props.popupOffset ? { offset: props.popupOffset } : {};
      var popupClassName = props.mode === 'inline' ? '' : props.popupClassName;
      var liProps = {
        on: _extends$1({}, omit(getListeners(this), ['click']), mouseEvents),
        'class': className
      };

      return h(
        'li',
        babelHelperVueJsxMergeProps([liProps, {
          attrs: { role: 'menuitem' }
        }]),
        [isInlineMode && title, isInlineMode && children, !isInlineMode && h(
          Trigger,
          {
            attrs: (_attrs = {
              prefixCls: prefixCls,
              popupClassName: prefixCls + '-popup ' + rootPrefixCls + '-' + parentMenu.theme + ' ' + (popupClassName || ''),
              getPopupContainer: getPopupContainer,
              builtinPlacements: placements
            }, _defineProperty(_attrs, 'builtinPlacements', _extends$1({}, placements, props.builtinPlacements)), _defineProperty(_attrs, 'popupPlacement', popupPlacement), _defineProperty(_attrs, 'popupVisible', isOpen), _defineProperty(_attrs, 'popupAlign', popupAlign), _defineProperty(_attrs, 'action', props.disabled ? [] : [props.triggerSubMenuAction]), _defineProperty(_attrs, 'mouseEnterDelay', props.subMenuOpenDelay), _defineProperty(_attrs, 'mouseLeaveDelay', props.subMenuCloseDelay), _defineProperty(_attrs, 'forceRender', props.forceSubMenuRender), _attrs),
            on: {
              'popupVisibleChange': this.onPopupVisibleChange
            }
          },
          [h(
            'template',
            { slot: 'popup' },
            [children]
          ), title]
        )]
      );
    }
  };
  var connected = connect(function (_ref, _ref2) {
    var openKeys = _ref.openKeys,
        activeKey = _ref.activeKey,
        selectedKeys = _ref.selectedKeys;
    var eventKey = _ref2.eventKey,
        subMenuKey = _ref2.subMenuKey;
    return {
      isOpen: openKeys.indexOf(eventKey) > -1,
      active: activeKey[subMenuKey] === eventKey,
      selectedKeys: selectedKeys
    };
  }, injectExtraPropsKey)(SubMenu);

  connected.isSubMenu = true;

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

  var MENUITEM_OVERFLOWED_CLASSNAME = 'menuitem-overflowed';
  var FLOAT_PRECISION_ADJUST = 0.5;

  // Fix ssr
  if (canUseDOM) {
    require('mutationobserver-shim');
  }

  var getPropsData$1 = function getPropsData$1(vnode) {
    var _vnode$data = vnode.data;
    _vnode$data = _vnode$data === undefined ? {} : _vnode$data;
    var attrs = _vnode$data.attrs;

    return _extends$1({}, getPropsData(vnode), attrs);
  };

  var DOMWrap = {
    name: 'DOMWrap',
    mixins: [BaseMixin],
    data: function data() {
      this.resizeObserver = null;
      this.mutationObserver = null;

      // original scroll size of the list
      this.originalTotalWidth = 0;

      // copy of overflowed items
      this.overflowedItems = [];

      // cache item of the original items (so we can track the size and order)
      this.menuItemSizes = [];
      return {
        lastVisibleIndex: undefined
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        _this.setChildrenWidthAndResize();
        if (_this.level === 1 && _this.mode === 'horizontal') {
          var menuUl = _this.$el;
          if (!menuUl) {
            return;
          }
          _this.resizeObserver = new index(function (entries) {
            entries.forEach(_this.setChildrenWidthAndResize);
          });

          [].slice.call(menuUl.children).concat(menuUl).forEach(function (el) {
            _this.resizeObserver.observe(el);
          });

          if (typeof MutationObserver !== 'undefined') {
            _this.mutationObserver = new MutationObserver(function () {
              _this.resizeObserver.disconnect();
              [].slice.call(menuUl.children).concat(menuUl).forEach(function (el) {
                _this.resizeObserver.observe(el);
              });
              _this.setChildrenWidthAndResize();
            });
            _this.mutationObserver.observe(menuUl, {
              attributes: false,
              childList: true,
              subTree: false
            });
          }
        }
      });
    },
    beforeDestroy: function beforeDestroy() {
      if (this.resizeObserver) {
        this.resizeObserver.disconnect();
      }
      if (this.mutationObserver) {
        this.mutationObserver.disconnect();
      }
    },

    methods: {
      // get all valid menuItem nodes
      getMenuItemNodes: function getMenuItemNodes() {
        var prefixCls = this.$props.prefixCls;

        var ul = this.$el;
        if (!ul) {
          return [];
        }

        // filter out all overflowed indicator placeholder
        return [].slice.call(ul.children).filter(function (node) {
          return node.className.split(' ').indexOf(prefixCls + '-overflowed-submenu') < 0;
        });
      },
      getOverflowedSubMenuItem: function getOverflowedSubMenuItem(keyPrefix, overflowedItems, renderPlaceholder) {
        var h = this.$createElement;
        var _$props = this.$props,
            overflowedIndicator = _$props.overflowedIndicator,
            level = _$props.level,
            mode = _$props.mode,
            prefixCls = _$props.prefixCls,
            theme = _$props.theme;

        if (level !== 1 || mode !== 'horizontal') {
          return null;
        }
        // put all the overflowed item inside a submenu
        // with a title of overflow indicator ('...')
        var copy = this.$slots['default'][0];

        var _getPropsData = getPropsData$1(copy),
            title = _getPropsData.title,
            rest = _objectWithoutProperties(_getPropsData, ['title']); // eslint-disable-line no-unused-vars


        var events = getEvents(copy);
        var style = {};
        var key = keyPrefix + '-overflowed-indicator';
        var eventKey = keyPrefix + '-overflowed-indicator';

        if (overflowedItems.length === 0 && renderPlaceholder !== true) {
          style = {
            display: 'none'
          };
        } else if (renderPlaceholder) {
          style = {
            visibility: 'hidden',
            // prevent from taking normal dom space
            position: 'absolute'
          };
          key = key + '-placeholder';
          eventKey = eventKey + '-placeholder';
        }

        var popupClassName = theme ? prefixCls + '-' + theme : '';
        var props = {};
        var on = {};
        menuAllProps.props.forEach(function (k) {
          if (rest[k] !== undefined) {
            props[k] = rest[k];
          }
        });
        menuAllProps.on.forEach(function (k) {
          if (events[k] !== undefined) {
            on[k] = events[k];
          }
        });
        var subMenuProps = {
          props: _extends$1({
            title: overflowedIndicator,
            popupClassName: popupClassName
          }, props, {
            eventKey: eventKey,
            disabled: false
          }),
          'class': prefixCls + '-overflowed-submenu',
          key: key,
          style: style,
          on: on
        };

        return h(
          connected,
          subMenuProps,
          [overflowedItems]
        );
      },


      // memorize rendered menuSize
      setChildrenWidthAndResize: function setChildrenWidthAndResize() {
        if (this.mode !== 'horizontal') {
          return;
        }
        var ul = this.$el;

        if (!ul) {
          return;
        }

        var ulChildrenNodes = ul.children;

        if (!ulChildrenNodes || ulChildrenNodes.length === 0) {
          return;
        }

        var lastOverflowedIndicatorPlaceholder = ul.children[ulChildrenNodes.length - 1];

        // need last overflowed indicator for calculating length;
        setStyle(lastOverflowedIndicatorPlaceholder, 'display', 'inline-block');

        var menuItemNodes = this.getMenuItemNodes();

        // reset display attribute for all hidden elements caused by overflow to calculate updated width
        // and then reset to original state after width calculation

        var overflowedItems = menuItemNodes.filter(function (c) {
          return c.className.split(' ').indexOf(MENUITEM_OVERFLOWED_CLASSNAME) >= 0;
        });

        overflowedItems.forEach(function (c) {
          setStyle(c, 'display', 'inline-block');
        });

        this.menuItemSizes = menuItemNodes.map(function (c) {
          return getWidth(c);
        });

        overflowedItems.forEach(function (c) {
          setStyle(c, 'display', 'none');
        });
        this.overflowedIndicatorWidth = getWidth(ul.children[ul.children.length - 1]);
        this.originalTotalWidth = this.menuItemSizes.reduce(function (acc, cur) {
          return acc + cur;
        }, 0);
        this.handleResize();
        // prevent the overflowed indicator from taking space;
        setStyle(lastOverflowedIndicatorPlaceholder, 'display', 'none');
      },
      handleResize: function handleResize() {
        var _this2 = this;

        if (this.mode !== 'horizontal') {
          return;
        }

        var ul = this.$el;
        if (!ul) {
          return;
        }
        var width = getWidth(ul);

        this.overflowedItems = [];
        var currentSumWidth = 0;

        // index for last visible child in horizontal mode
        var lastVisibleIndex = void 0;

        // float number comparison could be problematic
        // e.g. 0.1 + 0.2 > 0.3 =====> true
        // thus using FLOAT_PRECISION_ADJUST as buffer to help the situation
        if (this.originalTotalWidth > width + FLOAT_PRECISION_ADJUST) {
          lastVisibleIndex = -1;

          this.menuItemSizes.forEach(function (liWidth) {
            currentSumWidth += liWidth;
            if (currentSumWidth + _this2.overflowedIndicatorWidth <= width) {
              lastVisibleIndex += 1;
            }
          });
        }

        this.setState({ lastVisibleIndex: lastVisibleIndex });
      },
      renderChildren: function renderChildren(children) {
        var _this3 = this;

        // need to take care of overflowed items in horizontal mode
        var lastVisibleIndex = this.$data.lastVisibleIndex;

        var className = getClass(this);
        return (children || []).reduce(function (acc, childNode, index) {
          var item = childNode;
          var eventKey = getPropsData$1(childNode).eventKey;
          if (_this3.mode === 'horizontal') {
            var overflowed = _this3.getOverflowedSubMenuItem(eventKey, []);
            if (lastVisibleIndex !== undefined && className[_this3.prefixCls + '-root'] !== -1) {
              if (index > lastVisibleIndex) {
                item = cloneElement(childNode,
                // 这里修改 eventKey 是为了防止隐藏状态下还会触发 openkeys 事件
                {
                  style: { display: 'none' },
                  props: { eventKey: eventKey + '-hidden' },
                  'class': MENUITEM_OVERFLOWED_CLASSNAME
                });
              }
              if (index === lastVisibleIndex + 1) {
                _this3.overflowedItems = children.slice(lastVisibleIndex + 1).map(function (c) {
                  return cloneElement(c,
                  // children[index].key will become '.$key' in clone by default,
                  // we have to overwrite with the correct key explicitly
                  {
                    key: getPropsData$1(c).eventKey,
                    props: { mode: 'vertical-left' }
                  });
                });

                overflowed = _this3.getOverflowedSubMenuItem(eventKey, _this3.overflowedItems);
              }
            }

            var ret = [].concat(_toConsumableArray(acc), [overflowed, item]);

            if (index === children.length - 1) {
              // need a placeholder for calculating overflowed indicator width
              ret.push(_this3.getOverflowedSubMenuItem(eventKey, [], true));
            }
            return ret;
          }
          return [].concat(_toConsumableArray(acc), [item]);
        }, []);
      }
    },

    render: function render() {
      var h = arguments[0];

      var Tag = this.$props.tag;
      var tagProps = {
        on: getListeners(this)
      };
      return h(
        Tag,
        tagProps,
        [this.renderChildren(this.$slots['default'])]
      );
    }
  };

  DOMWrap.props = {
    mode: VuePropTypes.oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']),
    prefixCls: VuePropTypes.string,
    level: VuePropTypes.number,
    theme: VuePropTypes.string,
    overflowedIndicator: VuePropTypes.node,
    visible: VuePropTypes.bool,
    hiddenClassName: VuePropTypes.string,
    tag: VuePropTypes.string.def('div')
  };

  function allDisabled(arr) {
    if (!arr.length) {
      return true;
    }
    return arr.every(function (c) {
      return !!c.disabled;
    });
  }

  function updateActiveKey(store, menuId, activeKey) {
    var state = store.getState();
    store.setState({
      activeKey: _extends$1({}, state.activeKey, _defineProperty({}, menuId, activeKey))
    });
  }

  function getEventKey(props) {
    // when eventKey not available ,it's menu and return menu id '0-menu-'
    return props.eventKey || '0-menu-';
  }

  function saveRef(key, c) {
    if (c) {
      var index = this.instanceArrayKeyIndexMap[key];
      this.instanceArray[index] = c;
    }
  }
  function getActiveKey(props, originalActiveKey) {
    var activeKey = originalActiveKey;
    var eventKey = props.eventKey,
        defaultActiveFirst = props.defaultActiveFirst,
        children = props.children;

    if (activeKey !== undefined && activeKey !== null) {
      var found = void 0;
      loopMenuItem(children, function (c, i) {
        var propsData = c.componentOptions.propsData || {};
        if (c && !propsData.disabled && activeKey === getKeyFromChildrenIndex(c, eventKey, i)) {
          found = true;
        }
      });
      if (found) {
        return activeKey;
      }
    }
    activeKey = null;
    if (defaultActiveFirst) {
      loopMenuItem(children, function (c, i) {
        var propsData = c.componentOptions.propsData || {};
        var noActiveKey = activeKey === null || activeKey === undefined;
        if (noActiveKey && c && !propsData.disabled) {
          activeKey = getKeyFromChildrenIndex(c, eventKey, i);
        }
      });
      return activeKey;
    }
    return activeKey;
  }

  var SubPopupMenu = {
    name: 'SubPopupMenu',
    props: initDefaultProps({
      // onSelect: PropTypes.func,
      // onClick: PropTypes.func,
      // onDeselect: PropTypes.func,
      // onOpenChange: PropTypes.func,
      // onDestroy: PropTypes.func,
      prefixCls: VuePropTypes.string,
      openTransitionName: VuePropTypes.string,
      openAnimation: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.object]),
      openKeys: VuePropTypes.arrayOf(VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number])),
      visible: VuePropTypes.bool,
      parentMenu: VuePropTypes.object,
      eventKey: VuePropTypes.string,
      store: VuePropTypes.object,

      // adding in refactor
      focusable: VuePropTypes.bool,
      multiple: VuePropTypes.bool,
      defaultActiveFirst: VuePropTypes.bool,
      activeKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      selectedKeys: VuePropTypes.arrayOf(VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number])),
      defaultSelectedKeys: VuePropTypes.arrayOf(VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number])),
      defaultOpenKeys: VuePropTypes.arrayOf(VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number])),
      level: VuePropTypes.number,
      mode: VuePropTypes.oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']),
      triggerSubMenuAction: VuePropTypes.oneOf(['click', 'hover']),
      inlineIndent: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string]),
      manualRef: VuePropTypes.func,
      itemIcon: VuePropTypes.any,
      expandIcon: VuePropTypes.any,
      overflowedIndicator: VuePropTypes.any,
      children: VuePropTypes.any.def([]),
      __propsSymbol__: VuePropTypes.any // mock componentWillReceiveProps
    }, {
      prefixCls: 'rc-menu',
      mode: 'vertical',
      level: 1,
      inlineIndent: 24,
      visible: true,
      focusable: true,
      manualRef: noop$2
    }),

    mixins: [BaseMixin],
    created: function created() {
      var props = getOptionProps(this);
      this.prevProps = _extends$1({}, props);
      props.store.setState({
        activeKey: _extends$1({}, props.store.getState().activeKey, _defineProperty({}, props.eventKey, getActiveKey(props, props.activeKey)))
      });
      this.instanceArray = [];
    },
    mounted: function mounted() {
      // invoke customized ref to expose component to mixin
      if (this.manualRef) {
        this.manualRef(this);
      }
    },
    updated: function updated() {
      var props = getOptionProps(this);
      var prevProps = this.prevProps;
      var originalActiveKey = 'activeKey' in props ? props.activeKey : props.store.getState().activeKey[getEventKey(props)];
      var activeKey = getActiveKey(props, originalActiveKey);
      if (activeKey !== originalActiveKey) {
        updateActiveKey(props.store, getEventKey(props), activeKey);
      } else if ('activeKey' in prevProps) {
        // If prev activeKey is not same as current activeKey,
        // we should set it.
        var prevActiveKey = getActiveKey(prevProps, prevProps.activeKey);
        if (activeKey !== prevActiveKey) {
          updateActiveKey(props.store, getEventKey(props), activeKey);
        }
      }
      this.prevProps = _extends$1({}, props);
    },

    methods: {
      // all keyboard events callbacks run from here at first
      onKeyDown: function onKeyDown(e, callback) {
        var keyCode = e.keyCode;
        var handled = void 0;
        this.getFlatInstanceArray().forEach(function (obj) {
          if (obj && obj.active && obj.onKeyDown) {
            handled = obj.onKeyDown(e);
          }
        });
        if (handled) {
          return 1;
        }
        var activeItem = null;
        if (keyCode === KeyCode.UP || keyCode === KeyCode.DOWN) {
          activeItem = this.step(keyCode === KeyCode.UP ? -1 : 1);
        }
        if (activeItem) {
          e.preventDefault();
          updateActiveKey(this.$props.store, getEventKey(this.$props), activeItem.eventKey);

          if (typeof callback === 'function') {
            callback(activeItem);
          }

          return 1;
        }
        return undefined;
      },
      onItemHover: function onItemHover(e) {
        var key = e.key,
            hover = e.hover;

        updateActiveKey(this.$props.store, getEventKey(this.$props), hover ? key : null);
      },
      onDeselect: function onDeselect(selectInfo) {
        this.__emit('deselect', selectInfo);
      },
      onSelect: function onSelect(selectInfo) {
        this.__emit('select', selectInfo);
      },
      onClick: function onClick(e) {
        this.__emit('click', e);
      },
      onOpenChange: function onOpenChange(e) {
        this.__emit('openChange', e);
      },
      onDestroy: function onDestroy(key) {
        this.__emit('destroy', key);
      },
      getFlatInstanceArray: function getFlatInstanceArray() {
        return this.instanceArray;
      },
      getOpenTransitionName: function getOpenTransitionName() {
        return this.$props.openTransitionName;
      },
      step: function step(direction) {
        var children = this.getFlatInstanceArray();
        var activeKey = this.$props.store.getState().activeKey[getEventKey(this.$props)];
        var len = children.length;
        if (!len) {
          return null;
        }
        if (direction < 0) {
          children = children.concat().reverse();
        }
        // find current activeIndex
        var activeIndex = -1;
        children.every(function (c, ci) {
          if (c && c.eventKey === activeKey) {
            activeIndex = ci;
            return false;
          }
          return true;
        });
        if (!this.defaultActiveFirst && activeIndex !== -1 && allDisabled(children.slice(activeIndex, len - 1))) {
          return undefined;
        }
        var start = (activeIndex + 1) % len;
        var i = start;

        do {
          var child = children[i];
          if (!child || child.disabled) {
            i = (i + 1) % len;
          } else {
            return child;
          }
        } while (i !== start);

        return null;
      },
      getIcon: function getIcon(instance, name) {
        if (instance.$createElement) {
          var temp = instance[name];
          if (temp !== undefined) {
            return temp;
          }
          return instance.$slots[name] || instance.$scopedSlots[name];
        } else {
          var _temp = getPropsData(instance)[name];
          if (_temp !== undefined) {
            return _temp;
          }
          var slotsProp = [];
          var componentOptions = instance.componentOptions || {};
          (componentOptions.children || []).forEach(function (child) {
            if (child.data && child.data.slot === name) {
              if (child.tag === 'template') {
                slotsProp.push(child.children);
              } else {
                slotsProp.push(child);
              }
            }
          });
          return slotsProp.length ? slotsProp : undefined;
        }
      },
      renderCommonMenuItem: function renderCommonMenuItem(child, i, extraProps) {
        var _this = this;

        var h = this.$createElement;

        if (child.tag === undefined) {
          return child;
        }
        var state = this.$props.store.getState();
        var props = this.$props;
        var key = getKeyFromChildrenIndex(child, props.eventKey, i);
        var childProps = child.componentOptions.propsData || {};

        var isActive = key === state.activeKey[getEventKey(this.$props)];
        if (!childProps.disabled) {
          // manualRef的执行顺序不能保证，使用key映射ref在this.instanceArray中的位置
          this.instanceArrayKeyIndexMap[key] = Object.keys(this.instanceArrayKeyIndexMap).length;
        }
        var childListeners = getEvents(child);
        var newChildProps = {
          attrs: _extends$1({
            mode: childProps.mode || props.mode,
            level: props.level,
            inlineIndent: props.inlineIndent,
            renderMenuItem: this.renderMenuItem,
            rootPrefixCls: props.prefixCls,
            index: i,
            parentMenu: props.parentMenu,
            // customized ref function, need to be invoked manually in child's componentDidMount
            manualRef: childProps.disabled ? noop$2 : saveRef.bind(this, key),
            eventKey: key,
            active: !childProps.disabled && isActive,
            multiple: props.multiple,
            openTransitionName: this.getOpenTransitionName(),
            openAnimation: props.openAnimation,
            subMenuOpenDelay: props.subMenuOpenDelay,
            subMenuCloseDelay: props.subMenuCloseDelay,
            forceSubMenuRender: props.forceSubMenuRender,
            builtinPlacements: props.builtinPlacements,
            itemIcon: this.getIcon(child, 'itemIcon') || this.getIcon(this, 'itemIcon'),
            expandIcon: this.getIcon(child, 'expandIcon') || this.getIcon(this, 'expandIcon')
          }, extraProps),
          on: {
            click: function click(e) {
              (childListeners.click || noop$2)(e);
              _this.onClick(e);
            },
            itemHover: this.onItemHover,
            openChange: this.onOpenChange,
            deselect: this.onDeselect,
            // destroy: this.onDestroy,
            select: this.onSelect
          }
        };
        // ref: https://github.com/ant-design/ant-design/issues/13943
        if (props.mode === 'inline' || isMobileDevice()) {
          newChildProps.attrs.triggerSubMenuAction = 'click';
        }
        return h(
          FunctionProvider,
          newChildProps,
          [child]
        );
      },
      renderMenuItem: function renderMenuItem(c, i, subMenuKey) {
        if (!c) {
          return null;
        }
        var state = this.$props.store.getState();
        var extraProps = {
          openKeys: state.openKeys,
          selectedKeys: state.selectedKeys,
          triggerSubMenuAction: this.triggerSubMenuAction,
          isRootMenu: false,
          subMenuKey: subMenuKey
        };
        return this.renderCommonMenuItem(c, i, extraProps);
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];

      var props = _objectWithoutProperties(this.$props, []);

      var eventKey = props.eventKey,
          prefixCls = props.prefixCls,
          visible = props.visible,
          level = props.level,
          mode = props.mode,
          theme = props.theme;

      this.instanceArray = [];
      this.instanceArrayKeyIndexMap = {};
      var className = classnames(props.prefixCls, props.prefixCls + '-' + props.mode);
      var domWrapProps = {
        props: {
          tag: 'ul',
          // hiddenClassName: `${prefixCls}-hidden`,
          visible: visible,
          prefixCls: prefixCls,
          level: level,
          mode: mode,
          theme: theme,
          overflowedIndicator: getComponentFromProp(this, 'overflowedIndicator')
        },
        attrs: {
          role: props.role || 'menu'
        },
        'class': className,
        // Otherwise, the propagated click event will trigger another onClick
        on: omit(getListeners(this), ['click'])
      };
      // if (props.id) {
      //   domProps.id = props.id
      // }
      if (props.focusable) {
        domWrapProps.attrs.tabIndex = '0';
        domWrapProps.on.keydown = this.onKeyDown;
      }
      return (
        // ESLint is not smart enough to know that the type of `children` was checked.
        /* eslint-disable */
        h(
          DOMWrap,
          domWrapProps,
          [props.children.map(function (c, i) {
            return _this2.renderMenuItem(c, i, eventKey || '0-menu-');
          })]
        )
        /*eslint -enable */

      );
    }
  };

  var SubPopupMenu$1 = connect()(SubPopupMenu);

  var commonPropsType = {
    prefixCls: VuePropTypes.string.def('rc-menu'),
    focusable: VuePropTypes.bool.def(true),
    multiple: VuePropTypes.bool,
    defaultActiveFirst: VuePropTypes.bool,
    visible: VuePropTypes.bool.def(true),
    activeKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
    selectedKeys: VuePropTypes.arrayOf(VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number])),
    defaultSelectedKeys: VuePropTypes.arrayOf(VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number])).def([]),
    defaultOpenKeys: VuePropTypes.arrayOf(VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number])).def([]),
    openKeys: VuePropTypes.arrayOf(VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number])),
    openAnimation: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.object]),
    mode: VuePropTypes.oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']).def('vertical'),
    triggerSubMenuAction: VuePropTypes.string.def('hover'),
    subMenuOpenDelay: VuePropTypes.number.def(0.1),
    subMenuCloseDelay: VuePropTypes.number.def(0.1),
    level: VuePropTypes.number.def(1),
    inlineIndent: VuePropTypes.number.def(24),
    theme: VuePropTypes.oneOf(['light', 'dark']).def('light'),
    getPopupContainer: VuePropTypes.func,
    openTransitionName: VuePropTypes.string,
    forceSubMenuRender: VuePropTypes.bool,
    selectable: VuePropTypes.bool,
    isRootMenu: VuePropTypes.bool.def(true),
    builtinPlacements: VuePropTypes.object.def(function () {
      return {};
    }),
    itemIcon: VuePropTypes.any,
    expandIcon: VuePropTypes.any,
    overflowedIndicator: VuePropTypes.any
  };

  var Menu = {
    name: 'Menu',
    props: _extends$1({}, commonPropsType, {
      selectable: VuePropTypes.bool.def(true)
    }),
    mixins: [BaseMixin],

    data: function data() {
      var props = getOptionProps(this);
      var selectedKeys = props.defaultSelectedKeys;
      var openKeys = props.defaultOpenKeys;
      if ('selectedKeys' in props) {
        selectedKeys = props.selectedKeys || [];
      }
      if ('openKeys' in props) {
        openKeys = props.openKeys || [];
      }

      this.store = create({
        selectedKeys: selectedKeys,
        openKeys: openKeys,
        activeKey: {
          '0-menu-': getActiveKey(_extends$1({}, props, { children: this.$slots['default'] || [] }), props.activeKey)
        }
      });

      // this.isRootMenu = true // 声明在props上
      return {};
    },
    mounted: function mounted() {
      this.updateMiniStore();
    },
    updated: function updated() {
      this.updateMiniStore();
    },

    methods: {
      onSelect: function onSelect(selectInfo) {
        var props = this.$props;
        if (props.selectable) {
          // root menu
          var selectedKeys = this.store.getState().selectedKeys;
          var selectedKey = selectInfo.key;
          if (props.multiple) {
            selectedKeys = selectedKeys.concat([selectedKey]);
          } else {
            selectedKeys = [selectedKey];
          }
          if (!hasProp(this, 'selectedKeys')) {
            this.store.setState({
              selectedKeys: selectedKeys
            });
          }
          this.__emit('select', _extends$1({}, selectInfo, {
            selectedKeys: selectedKeys
          }));
        }
      },
      onClick: function onClick(e) {
        this.__emit('click', e);
      },

      // onKeyDown needs to be exposed as a instance method
      // e.g., in rc-select, we need to navigate menu item while
      // current active item is rc-select input box rather than the menu itself
      onKeyDown: function onKeyDown(e, callback) {
        this.$refs.innerMenu.getWrappedInstance().onKeyDown(e, callback);
      },
      onOpenChange: function onOpenChange(event) {
        var openKeys = this.store.getState().openKeys.concat();
        var changed = false;
        var processSingle = function processSingle(e) {
          var oneChanged = false;
          if (e.open) {
            oneChanged = openKeys.indexOf(e.key) === -1;
            if (oneChanged) {
              openKeys.push(e.key);
            }
          } else {
            var index = openKeys.indexOf(e.key);
            oneChanged = index !== -1;
            if (oneChanged) {
              openKeys.splice(index, 1);
            }
          }
          changed = changed || oneChanged;
        };
        if (Array.isArray(event)) {
          // batch change call
          event.forEach(processSingle);
        } else {
          processSingle(event);
        }
        if (changed) {
          if (!hasProp(this, 'openKeys')) {
            this.store.setState({ openKeys: openKeys });
          }
          this.__emit('openChange', openKeys);
        }
      },
      onDeselect: function onDeselect(selectInfo) {
        var props = this.$props;
        if (props.selectable) {
          var selectedKeys = this.store.getState().selectedKeys.concat();
          var selectedKey = selectInfo.key;
          var index = selectedKeys.indexOf(selectedKey);
          if (index !== -1) {
            selectedKeys.splice(index, 1);
          }
          if (!hasProp(this, 'selectedKeys')) {
            this.store.setState({
              selectedKeys: selectedKeys
            });
          }
          this.__emit('deselect', _extends$1({}, selectInfo, {
            selectedKeys: selectedKeys
          }));
        }
      },
      getOpenTransitionName: function getOpenTransitionName() {
        var props = this.$props;
        var transitionName = props.openTransitionName;
        var animationName = props.openAnimation;
        if (!transitionName && typeof animationName === 'string') {
          transitionName = props.prefixCls + '-open-' + animationName;
        }
        return transitionName;
      },
      updateMiniStore: function updateMiniStore() {
        var props = getOptionProps(this);
        if ('selectedKeys' in props) {
          this.store.setState({
            selectedKeys: props.selectedKeys || []
          });
        }
        if ('openKeys' in props) {
          this.store.setState({
            openKeys: props.openKeys || []
          });
        }
      }
    },

    render: function render() {
      var h = arguments[0];

      var props = getOptionProps(this);
      var subPopupMenuProps = {
        props: _extends$1({}, props, {
          itemIcon: getComponentFromProp(this, 'itemIcon', props),
          expandIcon: getComponentFromProp(this, 'expandIcon', props),
          overflowedIndicator: getComponentFromProp(this, 'overflowedIndicator', props) || h('span', ['\xB7\xB7\xB7']),
          openTransitionName: this.getOpenTransitionName(),
          parentMenu: this,
          children: filterEmpty(this.$slots['default'] || [])
        }),
        'class': props.prefixCls + '-root',
        on: _extends$1({}, getListeners(this), {
          click: this.onClick,
          openChange: this.onOpenChange,
          deselect: this.onDeselect,
          select: this.onSelect
        }),
        ref: 'innerMenu'
      };
      return h(
        Provider,
        {
          attrs: { store: this.store }
        },
        [h(SubPopupMenu$1, subPopupMenuProps)]
      );
    }
  };

  function _typeof$2(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof$2 = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof$2 = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof$2(obj);
  }

  function _defineProperty$3(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys$1(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2$1(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys$1(source, true).forEach(function (key) {
          _defineProperty$3(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$1(source).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  var RE_NUM$1 = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;

  function getClientPosition$1(elem) {
    var box;
    var x;
    var y;
    var doc = elem.ownerDocument;
    var body = doc.body;
    var docElem = doc && doc.documentElement; // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式

    box = elem.getBoundingClientRect(); // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
    // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
    // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

    x = box.left;
    y = box.top; // In IE, most of the time, 2 extra pixels are added to the top and left
    // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
    // IE6 standards mode, this border can be overridden by setting the
    // document element's border to zero -- thus, we cannot rely on the
    // offset always being 2 pixels.
    // In quirks mode, the offset can be determined by querying the body's
    // clientLeft/clientTop, but in standards mode, it is found by querying
    // the document element's clientLeft/clientTop.  Since we already called
    // getClientBoundingRect we have already forced a reflow, so it is not
    // too expensive just to query them all.
    // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
    // 窗口边框标准是设 documentElement ,quirks 时设置 body
    // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
    // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
    // 标准 ie 下 docElem.clientTop 就是 border-top
    // ie7 html 即窗口边框改变不了。永远为 2
    // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

    x -= docElem.clientLeft || body.clientLeft || 0;
    y -= docElem.clientTop || body.clientTop || 0;
    return {
      left: x,
      top: y
    };
  }

  function getScroll$2(w, top) {
    var ret = w["page".concat(top ? 'Y' : 'X', "Offset")];
    var method = "scroll".concat(top ? 'Top' : 'Left');

    if (typeof ret !== 'number') {
      var d = w.document; // ie6,7,8 standard mode

      ret = d.documentElement[method];

      if (typeof ret !== 'number') {
        // quirks mode
        ret = d.body[method];
      }
    }

    return ret;
  }

  function getScrollLeft$1(w) {
    return getScroll$2(w);
  }

  function getScrollTop$1(w) {
    return getScroll$2(w, true);
  }

  function getOffset$1(el) {
    var pos = getClientPosition$1(el);
    var doc = el.ownerDocument;
    var w = doc.defaultView || doc.parentWindow;
    pos.left += getScrollLeft$1(w);
    pos.top += getScrollTop$1(w);
    return pos;
  }

  function _getComputedStyle$1(elem, name, computedStyle_) {
    var val = '';
    var d = elem.ownerDocument;
    var computedStyle = computedStyle_ || d.defaultView.getComputedStyle(elem, null); // https://github.com/kissyteam/kissy/issues/61

    if (computedStyle) {
      val = computedStyle.getPropertyValue(name) || computedStyle[name];
    }

    return val;
  }

  var _RE_NUM_NO_PX$1 = new RegExp("^(".concat(RE_NUM$1, ")(?!px)[a-z%]+$"), 'i');

  var RE_POS$1 = /^(top|right|bottom|left)$/;
  var CURRENT_STYLE$1 = 'currentStyle';
  var RUNTIME_STYLE$1 = 'runtimeStyle';
  var LEFT$1 = 'left';
  var PX$1 = 'px';

  function _getComputedStyleIE$1(elem, name) {
    // currentStyle maybe null
    // http://msdn.microsoft.com/en-us/library/ms535231.aspx
    var ret = elem[CURRENT_STYLE$1] && elem[CURRENT_STYLE$1][name]; // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
    // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
    // 在 ie 下不对，需要直接用 offset 方式
    // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了
    // From the awesome hack by Dean Edwards
    // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
    // If we're not dealing with a regular pixel number
    // but a number that has a weird ending, we need to convert it to pixels
    // exclude left right for relativity

    if (_RE_NUM_NO_PX$1.test(ret) && !RE_POS$1.test(name)) {
      // Remember the original values
      var style = elem.style;
      var left = style[LEFT$1];
      var rsLeft = elem[RUNTIME_STYLE$1][LEFT$1]; // prevent flashing of content

      elem[RUNTIME_STYLE$1][LEFT$1] = elem[CURRENT_STYLE$1][LEFT$1]; // Put in the new values to get a computed value out

      style[LEFT$1] = name === 'fontSize' ? '1em' : ret || 0;
      ret = style.pixelLeft + PX$1; // Revert the changed values

      style[LEFT$1] = left;
      elem[RUNTIME_STYLE$1][LEFT$1] = rsLeft;
    }

    return ret === '' ? 'auto' : ret;
  }

  var getComputedStyleX$1;

  if (typeof window !== 'undefined') {
    getComputedStyleX$1 = window.getComputedStyle ? _getComputedStyle$1 : _getComputedStyleIE$1;
  }

  function each$1(arr, fn) {
    for (var i = 0; i < arr.length; i++) {
      fn(arr[i]);
    }
  }

  function isBorderBoxFn$1(elem) {
    return getComputedStyleX$1(elem, 'boxSizing') === 'border-box';
  }

  var BOX_MODELS$1 = ['margin', 'border', 'padding'];
  var CONTENT_INDEX$1 = -1;
  var PADDING_INDEX$1 = 2;
  var BORDER_INDEX$1 = 1;
  var MARGIN_INDEX$1 = 0;

  function swap$1(elem, options, callback) {
    var old = {};
    var style = elem.style;
    var name; // Remember the old values, and insert the new ones

    for (name in options) {
      if (options.hasOwnProperty(name)) {
        old[name] = style[name];
        style[name] = options[name];
      }
    }

    callback.call(elem); // Revert the old values

    for (name in options) {
      if (options.hasOwnProperty(name)) {
        style[name] = old[name];
      }
    }
  }

  function getPBMWidth$1(elem, props, which) {
    var value = 0;
    var prop;
    var j;
    var i;

    for (j = 0; j < props.length; j++) {
      prop = props[j];

      if (prop) {
        for (i = 0; i < which.length; i++) {
          var cssProp = void 0;

          if (prop === 'border') {
            cssProp = "".concat(prop + which[i], "Width");
          } else {
            cssProp = prop + which[i];
          }

          value += parseFloat(getComputedStyleX$1(elem, cssProp)) || 0;
        }
      }
    }

    return value;
  }
  /**
   * A crude way of determining if an object is a window
   * @member util
   */


  function isWindow$2(obj) {
    // must use == for ie8

    /* eslint eqeqeq:0 */
    return obj != null && obj == obj.window;
  }

  var domUtils$1 = {};
  each$1(['Width', 'Height'], function (name) {
    domUtils$1["doc".concat(name)] = function (refWin) {
      var d = refWin.document;
      return Math.max( // firefox chrome documentElement.scrollHeight< body.scrollHeight
      // ie standard mode : documentElement.scrollHeight> body.scrollHeight
      d.documentElement["scroll".concat(name)], // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
      d.body["scroll".concat(name)], domUtils$1["viewport".concat(name)](d));
    };

    domUtils$1["viewport".concat(name)] = function (win) {
      // pc browser includes scrollbar in window.innerWidth
      var prop = "client".concat(name);
      var doc = win.document;
      var body = doc.body;
      var documentElement = doc.documentElement;
      var documentElementProp = documentElement[prop]; // 标准模式取 documentElement
      // backcompat 取 body

      return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
    };
  });
  /*
   得到元素的大小信息
   @param elem
   @param name
   @param {String} [extra]  'padding' : (css width) + padding
   'border' : (css width) + padding + border
   'margin' : (css width) + padding + border + margin
   */

  function getWH$1(elem, name, extra) {
    if (isWindow$2(elem)) {
      return name === 'width' ? domUtils$1.viewportWidth(elem) : domUtils$1.viewportHeight(elem);
    } else if (elem.nodeType === 9) {
      return name === 'width' ? domUtils$1.docWidth(elem) : domUtils$1.docHeight(elem);
    }

    var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
    var borderBoxValue = name === 'width' ? elem.offsetWidth : elem.offsetHeight;
    var computedStyle = getComputedStyleX$1(elem);
    var isBorderBox = isBorderBoxFn$1(elem);
    var cssBoxValue = 0;

    if (borderBoxValue == null || borderBoxValue <= 0) {
      borderBoxValue = undefined; // Fall back to computed then un computed css if necessary

      cssBoxValue = getComputedStyleX$1(elem, name);

      if (cssBoxValue == null || Number(cssBoxValue) < 0) {
        cssBoxValue = elem.style[name] || 0;
      } // Normalize '', auto, and prepare for extra


      cssBoxValue = parseFloat(cssBoxValue) || 0;
    }

    if (extra === undefined) {
      extra = isBorderBox ? BORDER_INDEX$1 : CONTENT_INDEX$1;
    }

    var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
    var val = borderBoxValue || cssBoxValue;

    if (extra === CONTENT_INDEX$1) {
      if (borderBoxValueOrIsBorderBox) {
        return val - getPBMWidth$1(elem, ['border', 'padding'], which);
      }

      return cssBoxValue;
    }

    if (borderBoxValueOrIsBorderBox) {
      var padding = extra === PADDING_INDEX$1 ? -getPBMWidth$1(elem, ['border'], which) : getPBMWidth$1(elem, ['margin'], which);
      return val + (extra === BORDER_INDEX$1 ? 0 : padding);
    }

    return cssBoxValue + getPBMWidth$1(elem, BOX_MODELS$1.slice(extra), which);
  }

  var cssShow$1 = {
    position: 'absolute',
    visibility: 'hidden',
    display: 'block'
  }; // fix #119 : https://github.com/kissyteam/kissy/issues/119

  function getWHIgnoreDisplay$1(elem) {
    var val;
    var args = arguments; // in case elem is window
    // elem.offsetWidth === undefined

    if (elem.offsetWidth !== 0) {
      val = getWH$1.apply(undefined, args);
    } else {
      swap$1(elem, cssShow$1, function () {
        val = getWH$1.apply(undefined, args);
      });
    }

    return val;
  }

  function css$1(el, name, v) {
    var value = v;

    if (_typeof$2(name) === 'object') {
      for (var i in name) {
        if (name.hasOwnProperty(i)) {
          css$1(el, i, name[i]);
        }
      }

      return undefined;
    }

    if (typeof value !== 'undefined') {
      if (typeof value === 'number') {
        value += 'px';
      }

      el.style[name] = value;
      return undefined;
    }

    return getComputedStyleX$1(el, name);
  }

  each$1(['width', 'height'], function (name) {
    var first = name.charAt(0).toUpperCase() + name.slice(1);

    domUtils$1["outer".concat(first)] = function (el, includeMargin) {
      return el && getWHIgnoreDisplay$1(el, name, includeMargin ? MARGIN_INDEX$1 : BORDER_INDEX$1);
    };

    var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

    domUtils$1[name] = function (elem, val) {
      if (val !== undefined) {
        if (elem) {
          var computedStyle = getComputedStyleX$1(elem);
          var isBorderBox = isBorderBoxFn$1(elem);

          if (isBorderBox) {
            val += getPBMWidth$1(elem, ['padding', 'border'], which);
          }

          return css$1(elem, name, val);
        }

        return undefined;
      }

      return elem && getWHIgnoreDisplay$1(elem, name, CONTENT_INDEX$1);
    };
  }); // 设置 elem 相对 elem.ownerDocument 的坐标

  function setOffset$1(elem, offset) {
    // set position first, in-case top/left are set even on static elem
    if (css$1(elem, 'position') === 'static') {
      elem.style.position = 'relative';
    }

    var old = getOffset$1(elem);
    var ret = {};
    var current;
    var key;

    for (key in offset) {
      if (offset.hasOwnProperty(key)) {
        current = parseFloat(css$1(elem, key)) || 0;
        ret[key] = current + offset[key] - old[key];
      }
    }

    css$1(elem, ret);
  }

  var util = _objectSpread2$1({
    getWindow: function getWindow(node) {
      var doc = node.ownerDocument || node;
      return doc.defaultView || doc.parentWindow;
    },
    offset: function offset(el, value) {
      if (typeof value !== 'undefined') {
        setOffset$1(el, value);
      } else {
        return getOffset$1(el);
      }
    },
    isWindow: isWindow$2,
    each: each$1,
    css: css$1,
    clone: function clone(obj) {
      var ret = {};

      for (var i in obj) {
        if (obj.hasOwnProperty(i)) {
          ret[i] = obj[i];
        }
      }

      var overflow = obj.overflow;

      if (overflow) {
        for (var _i in obj) {
          if (obj.hasOwnProperty(_i)) {
            ret.overflow[_i] = obj.overflow[_i];
          }
        }
      }

      return ret;
    },
    scrollLeft: function scrollLeft(w, v) {
      if (isWindow$2(w)) {
        if (v === undefined) {
          return getScrollLeft$1(w);
        }

        window.scrollTo(v, getScrollTop$1(w));
      } else {
        if (v === undefined) {
          return w.scrollLeft;
        }

        w.scrollLeft = v;
      }
    },
    scrollTop: function scrollTop(w, v) {
      if (isWindow$2(w)) {
        if (v === undefined) {
          return getScrollTop$1(w);
        }

        window.scrollTo(getScrollLeft$1(w), v);
      } else {
        if (v === undefined) {
          return w.scrollTop;
        }

        w.scrollTop = v;
      }
    },
    viewportWidth: 0,
    viewportHeight: 0
  }, domUtils$1);

  function scrollIntoView(elem, container, config) {
    config = config || {}; // document 归一化到 window

    if (container.nodeType === 9) {
      container = util.getWindow(container);
    }

    var allowHorizontalScroll = config.allowHorizontalScroll;
    var onlyScrollIfNeeded = config.onlyScrollIfNeeded;
    var alignWithTop = config.alignWithTop;
    var alignWithLeft = config.alignWithLeft;
    var offsetTop = config.offsetTop || 0;
    var offsetLeft = config.offsetLeft || 0;
    var offsetBottom = config.offsetBottom || 0;
    var offsetRight = config.offsetRight || 0;
    allowHorizontalScroll = allowHorizontalScroll === undefined ? true : allowHorizontalScroll;
    var isWin = util.isWindow(container);
    var elemOffset = util.offset(elem);
    var eh = util.outerHeight(elem);
    var ew = util.outerWidth(elem);
    var containerOffset;
    var ch;
    var cw;
    var containerScroll;
    var diffTop;
    var diffBottom;
    var win;
    var winScroll;
    var ww;
    var wh;

    if (isWin) {
      win = container;
      wh = util.height(win);
      ww = util.width(win);
      winScroll = {
        left: util.scrollLeft(win),
        top: util.scrollTop(win)
      }; // elem 相对 container 可视视窗的距离

      diffTop = {
        left: elemOffset.left - winScroll.left - offsetLeft,
        top: elemOffset.top - winScroll.top - offsetTop
      };
      diffBottom = {
        left: elemOffset.left + ew - (winScroll.left + ww) + offsetRight,
        top: elemOffset.top + eh - (winScroll.top + wh) + offsetBottom
      };
      containerScroll = winScroll;
    } else {
      containerOffset = util.offset(container);
      ch = container.clientHeight;
      cw = container.clientWidth;
      containerScroll = {
        left: container.scrollLeft,
        top: container.scrollTop
      }; // elem 相对 container 可视视窗的距离
      // 注意边框, offset 是边框到根节点

      diffTop = {
        left: elemOffset.left - (containerOffset.left + (parseFloat(util.css(container, 'borderLeftWidth')) || 0)) - offsetLeft,
        top: elemOffset.top - (containerOffset.top + (parseFloat(util.css(container, 'borderTopWidth')) || 0)) - offsetTop
      };
      diffBottom = {
        left: elemOffset.left + ew - (containerOffset.left + cw + (parseFloat(util.css(container, 'borderRightWidth')) || 0)) + offsetRight,
        top: elemOffset.top + eh - (containerOffset.top + ch + (parseFloat(util.css(container, 'borderBottomWidth')) || 0)) + offsetBottom
      };
    }

    if (diffTop.top < 0 || diffBottom.top > 0) {
      // 强制向上
      if (alignWithTop === true) {
        util.scrollTop(container, containerScroll.top + diffTop.top);
      } else if (alignWithTop === false) {
        util.scrollTop(container, containerScroll.top + diffBottom.top);
      } else {
        // 自动调整
        if (diffTop.top < 0) {
          util.scrollTop(container, containerScroll.top + diffTop.top);
        } else {
          util.scrollTop(container, containerScroll.top + diffBottom.top);
        }
      }
    } else {
      if (!onlyScrollIfNeeded) {
        alignWithTop = alignWithTop === undefined ? true : !!alignWithTop;

        if (alignWithTop) {
          util.scrollTop(container, containerScroll.top + diffTop.top);
        } else {
          util.scrollTop(container, containerScroll.top + diffBottom.top);
        }
      }
    }

    if (allowHorizontalScroll) {
      if (diffTop.left < 0 || diffBottom.left > 0) {
        // 强制向上
        if (alignWithLeft === true) {
          util.scrollLeft(container, containerScroll.left + diffTop.left);
        } else if (alignWithLeft === false) {
          util.scrollLeft(container, containerScroll.left + diffBottom.left);
        } else {
          // 自动调整
          if (diffTop.left < 0) {
            util.scrollLeft(container, containerScroll.left + diffTop.left);
          } else {
            util.scrollLeft(container, containerScroll.left + diffBottom.left);
          }
        }
      } else {
        if (!onlyScrollIfNeeded) {
          alignWithLeft = alignWithLeft === undefined ? true : !!alignWithLeft;

          if (alignWithLeft) {
            util.scrollLeft(container, containerScroll.left + diffTop.left);
          } else {
            util.scrollLeft(container, containerScroll.left + diffBottom.left);
          }
        }
      }
    }
  }

  var props$1 = {
    attribute: VuePropTypes.object,
    rootPrefixCls: VuePropTypes.string,
    eventKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
    active: VuePropTypes.bool,
    selectedKeys: VuePropTypes.array,
    disabled: VuePropTypes.bool,
    title: VuePropTypes.any,
    index: VuePropTypes.number,
    inlineIndent: VuePropTypes.number.def(24),
    level: VuePropTypes.number.def(1),
    mode: VuePropTypes.oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']).def('vertical'),
    parentMenu: VuePropTypes.object,
    multiple: VuePropTypes.bool,
    value: VuePropTypes.any,
    isSelected: VuePropTypes.bool,
    manualRef: VuePropTypes.func.def(noop$2),
    role: VuePropTypes.any,
    subMenuKey: VuePropTypes.string,
    itemIcon: VuePropTypes.any
    // clearSubMenuTimers: PropTypes.func.def(noop),
  };
  var MenuItem = {
    name: 'MenuItem',
    props: props$1,
    mixins: [BaseMixin],
    isMenuItem: true,
    created: function created() {
      this.prevActive = this.active;
      // invoke customized ref to expose component to mixin
      this.callRef();
    },
    updated: function updated() {
      var _this = this;

      this.$nextTick(function () {
        var _$props = _this.$props,
            active = _$props.active,
            parentMenu = _$props.parentMenu,
            eventKey = _$props.eventKey;

        if (!_this.prevActive && active && (!parentMenu || !parentMenu['scrolled-' + eventKey])) {
          scrollIntoView(_this.$el, _this.parentMenu.$el, {
            onlyScrollIfNeeded: true
          });
          parentMenu['scrolled-' + eventKey] = true;
        } else if (parentMenu && parentMenu['scrolled-' + eventKey]) {
          delete parentMenu['scrolled-' + eventKey];
        }
        _this.prevActive = active;
      });
      this.callRef();
    },
    beforeDestroy: function beforeDestroy() {
      var props = this.$props;
      this.__emit('destroy', props.eventKey);
    },

    methods: {
      onKeyDown: function onKeyDown(e) {
        var keyCode = e.keyCode;
        if (keyCode === KeyCode.ENTER) {
          this.onClick(e);
          return true;
        }
      },
      onMouseLeave: function onMouseLeave(e) {
        var eventKey = this.$props.eventKey;

        this.__emit('itemHover', {
          key: eventKey,
          hover: false
        });
        this.__emit('mouseleave', {
          key: eventKey,
          domEvent: e
        });
      },
      onMouseEnter: function onMouseEnter(e) {
        var eventKey = this.eventKey;

        this.__emit('itemHover', {
          key: eventKey,
          hover: true
        });
        this.__emit('mouseenter', {
          key: eventKey,
          domEvent: e
        });
      },
      onClick: function onClick(e) {
        var _$props2 = this.$props,
            eventKey = _$props2.eventKey,
            multiple = _$props2.multiple,
            isSelected = _$props2.isSelected;

        var info = {
          key: eventKey,
          keyPath: [eventKey],
          item: this,
          domEvent: e
        };

        this.__emit('click', info);
        if (multiple) {
          if (isSelected) {
            this.__emit('deselect', info);
          } else {
            this.__emit('select', info);
          }
        } else if (!isSelected) {
          this.__emit('select', info);
        }
      },
      getPrefixCls: function getPrefixCls() {
        return this.$props.rootPrefixCls + '-item';
      },
      getActiveClassName: function getActiveClassName() {
        return this.getPrefixCls() + '-active';
      },
      getSelectedClassName: function getSelectedClassName() {
        return this.getPrefixCls() + '-selected';
      },
      getDisabledClassName: function getDisabledClassName() {
        return this.getPrefixCls() + '-disabled';
      },
      callRef: function callRef() {
        if (this.manualRef) {
          this.manualRef(this);
        }
      }
    },

    render: function render() {
      var _className;

      var h = arguments[0];

      var props = _extends$1({}, this.$props);
      var className = (_className = {}, _defineProperty(_className, this.getPrefixCls(), true), _defineProperty(_className, this.getActiveClassName(), !props.disabled && props.active), _defineProperty(_className, this.getSelectedClassName(), props.isSelected), _defineProperty(_className, this.getDisabledClassName(), props.disabled), _className);
      var attrs = _extends$1({}, props.attribute, {
        title: props.title,
        role: props.role || 'menuitem',
        'aria-disabled': props.disabled
      });
      if (props.role === 'option') {
        // overwrite to option
        attrs = _extends$1({}, attrs, {
          role: 'option',
          'aria-selected': props.isSelected
        });
      } else if (props.role === null || props.role === 'none') {
        // sometimes we want to specify role inside <li/> element
        // <li><a role='menuitem'>Link</a></li> would be a good example
        // in this case the role on <li/> should be "none" to
        // remove the implied listitem role.
        // https://www.w3.org/TR/wai-aria-practices-1.1/examples/menubar/menubar-1/menubar-1.html
        attrs.role = 'none';
      }
      // In case that onClick/onMouseLeave/onMouseEnter is passed down from owner
      var mouseEvent = {
        click: props.disabled ? noop$2 : this.onClick,
        mouseleave: props.disabled ? noop$2 : this.onMouseLeave,
        mouseenter: props.disabled ? noop$2 : this.onMouseEnter
      };

      var style = {};
      if (props.mode === 'inline') {
        style.paddingLeft = props.inlineIndent * props.level + 'px';
      }
      var listeners = _extends$1({}, getListeners(this));
      menuAllProps.props.forEach(function (key) {
        return delete props[key];
      });
      menuAllProps.on.forEach(function (key) {
        return delete listeners[key];
      });
      var liProps = {
        attrs: _extends$1({}, props, attrs),
        on: _extends$1({}, listeners, mouseEvent)
      };
      return h(
        'li',
        babelHelperVueJsxMergeProps([liProps, { style: style, 'class': className }]),
        [this.$slots['default'], getComponentFromProp(this, 'itemIcon', props)]
      );
    }
  };

  var connected$1 = connect(function (_ref, _ref2) {
    var activeKey = _ref.activeKey,
        selectedKeys = _ref.selectedKeys;
    var eventKey = _ref2.eventKey,
        subMenuKey = _ref2.subMenuKey;
    return {
      active: activeKey[subMenuKey] === eventKey,
      isSelected: selectedKeys.indexOf(eventKey) !== -1
    };
  }, injectExtraPropsKey)(MenuItem);

  var MenuItemGroup = {
    name: 'MenuItemGroup',

    props: {
      renderMenuItem: VuePropTypes.func,
      index: VuePropTypes.number,
      className: VuePropTypes.string,
      subMenuKey: VuePropTypes.string,
      rootPrefixCls: VuePropTypes.string,
      disabled: VuePropTypes.bool.def(true),
      title: VuePropTypes.any
    },
    isMenuItemGroup: true,
    inject: {
      injectExtraProps: {
        from: injectExtraPropsKey,
        'default': function _default() {
          return {};
        }
      }
    },
    methods: {
      renderInnerMenuItem: function renderInnerMenuItem(item) {
        var _$props$injectExtraPr = _extends$1({}, this.$props, this.injectExtraProps.$attrs),
            renderMenuItem = _$props$injectExtraPr.renderMenuItem,
            index = _$props$injectExtraPr.index,
            subMenuKey = _$props$injectExtraPr.subMenuKey;

        return renderMenuItem(item, index, subMenuKey);
      }
    },
    render: function render() {
      var h = arguments[0];

      var props = _extends$1({}, this.$props, this.injectExtraProps.$attrs, this.$attrs);
      var rootPrefixCls = props.rootPrefixCls,
          title = props.title;

      var titleClassName = rootPrefixCls + '-item-group-title';
      var listClassName = rootPrefixCls + '-item-group-list';
      // menuAllProps.props.forEach(key => delete props[key])
      var listeners = _extends$1({}, getListeners(this), this.injectExtraProps.$listeners);
      delete listeners.click;

      return h(
        'li',
        { on: listeners, 'class': rootPrefixCls + '-item-group' },
        [h(
          'div',
          { 'class': titleClassName, attrs: { title: typeof title === 'string' ? title : undefined }
          },
          [getComponentFromProp(this, 'title')]
        ), h(
          'ul',
          { 'class': listClassName },
          [this.$slots['default'] && this.$slots['default'].map(this.renderInnerMenuItem)]
        )]
      );
    }
  };

  var Divider = {
    name: 'MenuDivider',
    props: {
      disabled: {
        type: Boolean,
        'default': true
      },
      rootPrefixCls: String
    },
    render: function render() {
      var h = arguments[0];
      var rootPrefixCls = this.$props.rootPrefixCls;

      return h('li', { 'class': rootPrefixCls + '-item-divider' });
    }
  };

  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  /**
   * Similar to invariant but only logs a warning if the condition is not met.
   * This can be used to log issues in development environments in critical
   * paths. Removing the logging code for production environments will keep the
   * same logic and follow the same code paths.
   */

  var __DEV__ = process.env.NODE_ENV !== 'production';

  var warning$2 = function() {};

  if (__DEV__) {
    var printWarning = function printWarning(format, args) {
      var len = arguments.length;
      args = new Array(len > 1 ? len - 1 : 0);
      for (var key = 1; key < len; key++) {
        args[key - 1] = arguments[key];
      }
      var argIndex = 0;
      var message = 'Warning: ' +
        format.replace(/%s/g, function() {
          return args[argIndex++];
        });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning$2 = function(condition, format, args) {
      var len = arguments.length;
      args = new Array(len > 2 ? len - 2 : 0);
      for (var key = 2; key < len; key++) {
        args[key - 2] = arguments[key];
      }
      if (format === undefined) {
        throw new Error(
            '`warning(condition, format, ...args)` requires a warning ' +
            'message argument'
        );
      }
      if (!condition) {
        printWarning.apply(null, [format].concat(args));
      }
    };
  }

  var warning_1 = warning$2;

  var Option = {
    props: {
      value: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      label: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      disabled: VuePropTypes.bool,
      title: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number])
    },
    isSelectOption: true
  };

  var OptGroup = {
    props: {
      value: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      label: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number])
    },
    isSelectOptGroup: true
  };

  function toTitle(title) {
    if (typeof title === 'string') {
      return title.trim();
    }
    return '';
  }
  function getValuePropValue(child) {
    if (!child) {
      return null;
    }
    var props = getPropsData(child);
    if ('value' in props) {
      return props.value;
    }
    if (getKey(child) !== undefined) {
      return getKey(child);
    }
    if (getSlotOptions(child).isSelectOptGroup) {
      var label = getComponentFromProp(child, 'label');
      if (label) {
        return label;
      }
    }
    throw new Error('Need at least a key or a value or a label (only for OptGroup) for ' + child);
  }

  function getPropValue(child, prop) {
    if (prop === 'value') {
      return getValuePropValue(child);
    }
    if (prop === 'children') {
      var newChild = child.$slots ? cloneVNodes(child.$slots['default'], true) : cloneVNodes(child.componentOptions.children, true);
      if (newChild.length === 1 && !newChild[0].tag) {
        return newChild[0].text;
      }
      return newChild;
    }
    var data = getPropsData(child);
    if (prop in data) {
      return data[prop];
    } else {
      return getAttrs(child)[prop];
    }
  }

  function isMultiple(props) {
    return props.multiple;
  }

  function isCombobox(props) {
    return props.combobox;
  }

  function isMultipleOrTags(props) {
    return props.multiple || props.tags;
  }

  function isMultipleOrTagsOrCombobox(props) {
    return isMultipleOrTags(props) || isCombobox(props);
  }

  function isSingleMode(props) {
    return !isMultipleOrTagsOrCombobox(props);
  }

  function toArray$1(value) {
    var ret = value;
    if (value === undefined) {
      ret = [];
    } else if (!Array.isArray(value)) {
      ret = [value];
    }
    return ret;
  }

  function getMapKey(value) {
    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + '-' + value;
  }

  function preventDefaultEvent(e) {
    e.preventDefault();
  }

  function findIndexInValueBySingleValue(value, singleValue) {
    var index = -1;
    if (value) {
      for (var i = 0; i < value.length; i++) {
        if (value[i] === singleValue) {
          index = i;
          break;
        }
      }
    }
    return index;
  }

  function getLabelFromPropsValue(value, key) {
    var label = void 0;
    value = toArray$1(value);
    if (value) {
      for (var i = 0; i < value.length; i++) {
        if (value[i].key === key) {
          label = value[i].label;
          break;
        }
      }
    }
    return label;
  }

  function getSelectKeys(menuItems, value) {
    if (value === null || value === undefined) {
      return [];
    }
    var selectedKeys = [];
    menuItems.forEach(function (item) {
      if (getSlotOptions(item).isMenuItemGroup) {
        selectedKeys = selectedKeys.concat(getSelectKeys(item.componentOptions.children, value));
      } else {
        var itemValue = getValuePropValue(item);
        var itemKey = item.key;
        if (findIndexInValueBySingleValue(value, itemValue) !== -1 && itemKey !== undefined) {
          selectedKeys.push(itemKey);
        }
      }
    });
    return selectedKeys;
  }

  var UNSELECTABLE_STYLE = {
    userSelect: 'none',
    WebkitUserSelect: 'none'
  };

  var UNSELECTABLE_ATTRIBUTE = {
    unselectable: 'on'
  };

  function findFirstMenuItem(children) {
    for (var i = 0; i < children.length; i++) {
      var child = children[i];
      var props = getPropsData(child);
      if (getSlotOptions(child).isMenuItemGroup) {
        var found = findFirstMenuItem(child.componentOptions.children);
        if (found) {
          return found;
        }
      } else if (!props.disabled) {
        return child;
      }
    }
    return null;
  }

  function includesSeparators(str, separators) {
    for (var i = 0; i < separators.length; ++i) {
      if (str.lastIndexOf(separators[i]) > 0) {
        return true;
      }
    }
    return false;
  }

  function splitBySeparators(str, separators) {
    var reg = new RegExp('[' + separators.join() + ']');
    return str.split(reg).filter(function (token) {
      return token;
    });
  }

  function defaultFilterFn(input, child) {
    var props = getPropsData(child);
    if (props.disabled) {
      return false;
    }
    var value = getPropValue(child, this.optionFilterProp);
    if (value.length && value[0].text) {
      value = value[0].text;
    } else {
      value = String(value);
    }
    return value.toLowerCase().indexOf(input.toLowerCase()) > -1;
  }

  function validateOptionValue(value, props) {
    if (isSingleMode(props) || isMultiple(props)) {
      return;
    }
    if (typeof value !== 'string') {
      throw new Error('Invalid `value` of type `' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + '` supplied to Option, ' + 'expected `string` when `tags/combobox` is `true`.');
    }
  }

  function saveRef$1(instance, name) {
    return function (node) {
      instance[name] = node;
    };
  }

  function generateUUID() {
    if (process.env.NODE_ENV === 'test') {
      return 'test-uuid';
    }
    var d = new Date().getTime();
    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = (d + Math.random() * 16) % 16 | 0;
      d = Math.floor(d / 16);
      return (c === 'x' ? r : r & 0x7 | 0x8).toString(16);
    });
    return uuid;
  }

  var DropdownMenu = {
    name: 'DropdownMenu',
    mixins: [BaseMixin],
    props: {
      ariaId: VuePropTypes.string,
      defaultActiveFirstOption: VuePropTypes.bool,
      value: VuePropTypes.any,
      dropdownMenuStyle: VuePropTypes.object,
      multiple: VuePropTypes.bool,
      // onPopupFocus: PropTypes.func,
      // onPopupScroll: PropTypes.func,
      // onMenuDeSelect: PropTypes.func,
      // onMenuSelect: PropTypes.func,
      prefixCls: VuePropTypes.string,
      menuItems: VuePropTypes.any,
      inputValue: VuePropTypes.string,
      visible: VuePropTypes.bool,
      backfillValue: VuePropTypes.any,
      firstActiveValue: VuePropTypes.string,
      menuItemSelectedIcon: VuePropTypes.any
    },
    watch: {
      visible: function visible(val) {
        var _this = this;

        if (!val) {
          this.lastVisible = val;
        } else {
          this.$nextTick(function () {
            _this.scrollActiveItemToView();
          });
        }
      }
    },

    created: function created() {
      this.rafInstance = null;
      this.lastInputValue = this.$props.inputValue;
      this.lastVisible = false;
    },
    mounted: function mounted() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.scrollActiveItemToView();
      });
      this.lastVisible = this.$props.visible;
    },
    updated: function updated() {
      var props = this.$props;
      // if (!this.prevVisible && props.visible) {
      //   this.$nextTick(() => {
      //     this.scrollActiveItemToView();
      //   });
      // }
      this.lastVisible = props.visible;
      this.lastInputValue = props.inputValue;
      this.prevVisible = this.visible;
    },
    beforeDestroy: function beforeDestroy() {
      if (this.rafInstance) {
        raf_1.cancel(this.rafInstance);
      }
    },

    methods: {
      scrollActiveItemToView: function scrollActiveItemToView() {
        var _this3 = this;

        // scroll into view
        var itemComponent = this.firstActiveItem && this.firstActiveItem.$el;
        var props = this.$props;
        var value = props.value,
            visible = props.visible,
            firstActiveValue = props.firstActiveValue;

        if (!itemComponent || !visible) {
          return;
        }
        var scrollIntoViewOpts = {
          onlyScrollIfNeeded: true
        };
        if ((!value || value.length === 0) && firstActiveValue) {
          scrollIntoViewOpts.alignWithTop = true;
        }
        // Delay to scroll since current frame item position is not ready when pre view is by filter
        // https://github.com/ant-design/ant-design/issues/11268#issuecomment-406634462
        this.rafInstance = raf_1(function () {
          scrollIntoView(itemComponent, _this3.$refs.menuRef.$el, scrollIntoViewOpts);
        });
      },
      renderMenu: function renderMenu() {
        var _this4 = this;

        var h = this.$createElement;

        var props = this.$props;
        var menuItems = props.menuItems,
            defaultActiveFirstOption = props.defaultActiveFirstOption,
            value = props.value,
            prefixCls = props.prefixCls,
            multiple = props.multiple,
            inputValue = props.inputValue,
            firstActiveValue = props.firstActiveValue,
            dropdownMenuStyle = props.dropdownMenuStyle,
            backfillValue = props.backfillValue,
            visible = props.visible;

        var menuItemSelectedIcon = getComponentFromProp(this, 'menuItemSelectedIcon');

        var _getListeners = getListeners(this),
            menuDeselect = _getListeners.menuDeselect,
            menuSelect = _getListeners.menuSelect,
            popupScroll = _getListeners.popupScroll;

        if (menuItems && menuItems.length) {
          var selectedKeys = getSelectKeys(menuItems, value);
          var menuProps = {
            props: {
              multiple: multiple,
              itemIcon: multiple ? menuItemSelectedIcon : null,
              selectedKeys: selectedKeys,
              prefixCls: prefixCls + '-menu'
            },
            on: {},
            style: dropdownMenuStyle,
            ref: 'menuRef',
            attrs: {
              role: 'listbox'
            }
          };
          if (popupScroll) {
            menuProps.on.scroll = popupScroll;
          }
          if (multiple) {
            menuProps.on.deselect = menuDeselect;
            menuProps.on.select = menuSelect;
          } else {
            menuProps.on.click = menuSelect;
          }
          var activeKeyProps = {};

          var defaultActiveFirst = defaultActiveFirstOption;
          var clonedMenuItems = menuItems;
          if (selectedKeys.length || firstActiveValue) {
            if (props.visible && !this.lastVisible) {
              activeKeyProps.activeKey = selectedKeys[0] || firstActiveValue;
            } else if (!visible) {
              // Do not trigger auto active since we already have selectedKeys
              if (selectedKeys[0]) {
                defaultActiveFirst = false;
              }
              activeKeyProps.activeKey = undefined;
            }
            var foundFirst = false;
            // set firstActiveItem via cloning menus
            // for scroll into view
            var clone = function clone(item) {
              if (!foundFirst && selectedKeys.indexOf(item.key) !== -1 || !foundFirst && !selectedKeys.length && firstActiveValue.indexOf(item.key) !== -1) {
                foundFirst = true;
                return cloneElement(item, {
                  directives: [{
                    name: 'ant-ref',
                    value: function value(ref) {
                      _this4.firstActiveItem = ref;
                    }
                  }]
                });
              }
              return item;
            };

            clonedMenuItems = menuItems.map(function (item) {
              if (getSlotOptions(item).isMenuItemGroup) {
                var children = item.componentOptions.children.map(clone);
                return cloneElement(item, { children: children });
              }
              return clone(item);
            });
          } else {
            // Clear firstActiveItem when dropdown menu items was empty
            // Avoid `Unable to find node on an unmounted component`
            // https://github.com/ant-design/ant-design/issues/10774
            this.firstActiveItem = null;
          }

          // clear activeKey when inputValue change
          var lastValue = value && value[value.length - 1];
          if (inputValue !== this.lastInputValue && (!lastValue || lastValue !== backfillValue)) {
            activeKeyProps.activeKey = '';
          }
          menuProps.props = _extends$1({}, activeKeyProps, menuProps.props, { defaultActiveFirst: defaultActiveFirst });
          return h(
            Menu,
            menuProps,
            [clonedMenuItems]
          );
        }
        return null;
      }
    },
    render: function render() {
      var h = arguments[0];

      var renderMenu = this.renderMenu();

      var _getListeners2 = getListeners(this),
          popupFocus = _getListeners2.popupFocus,
          popupScroll = _getListeners2.popupScroll;

      return renderMenu ? h(
        'div',
        {
          style: {
            overflow: 'auto',
            transform: 'translateZ(0)'
          },
          attrs: { id: this.$props.ariaId,
            tabIndex: '-1'
          },
          on: {
            'focus': popupFocus,
            'mousedown': preventDefaultEvent,
            'scroll': popupScroll
          },

          ref: 'menuContainer'
        },
        [renderMenu]
      ) : null;
    }
  };

  var BUILT_IN_PLACEMENTS = {
    bottomLeft: {
      points: ['tl', 'bl'],
      offset: [0, 4],
      overflow: {
        adjustX: 0,
        adjustY: 1
      }
    },
    topLeft: {
      points: ['bl', 'tl'],
      offset: [0, -4],
      overflow: {
        adjustX: 0,
        adjustY: 1
      }
    }
  };

  var SelectTrigger = {
    name: 'SelectTrigger',
    mixins: [BaseMixin],
    props: {
      // onPopupFocus: PropTypes.func,
      // onPopupScroll: PropTypes.func,
      dropdownMatchSelectWidth: VuePropTypes.bool,
      defaultActiveFirstOption: VuePropTypes.bool,
      dropdownAlign: VuePropTypes.object,
      visible: VuePropTypes.bool,
      disabled: VuePropTypes.bool,
      showSearch: VuePropTypes.bool,
      dropdownClassName: VuePropTypes.string,
      dropdownStyle: VuePropTypes.object,
      dropdownMenuStyle: VuePropTypes.object,
      multiple: VuePropTypes.bool,
      inputValue: VuePropTypes.string,
      filterOption: VuePropTypes.any,
      empty: VuePropTypes.bool,
      options: VuePropTypes.any,
      prefixCls: VuePropTypes.string,
      popupClassName: VuePropTypes.string,
      value: VuePropTypes.array,
      // children: PropTypes.any,
      showAction: VuePropTypes.arrayOf(VuePropTypes.string),
      combobox: VuePropTypes.bool,
      animation: VuePropTypes.string,
      transitionName: VuePropTypes.string,
      getPopupContainer: VuePropTypes.func,
      backfillValue: VuePropTypes.any,
      menuItemSelectedIcon: VuePropTypes.any,
      dropdownRender: VuePropTypes.func,
      ariaId: VuePropTypes.string
    },
    data: function data() {
      return {
        dropdownWidth: 0
      };
    },
    created: function created() {
      this.rafInstance = null;
      this.saveDropdownMenuRef = saveRef$1(this, 'dropdownMenuRef');
      this.saveTriggerRef = saveRef$1(this, 'triggerRef');
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        _this.setDropdownWidth();
      });
    },
    updated: function updated() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.setDropdownWidth();
      });
    },
    beforeDestroy: function beforeDestroy() {
      this.cancelRafInstance();
    },

    methods: {
      setDropdownWidth: function setDropdownWidth() {
        var _this3 = this;

        this.cancelRafInstance();
        this.rafInstance = raf_1(function () {
          var width = _this3.$el.offsetWidth;
          if (width !== _this3.dropdownWidth) {
            _this3.setState({ dropdownWidth: width });
          }
        });
      },
      cancelRafInstance: function cancelRafInstance() {
        if (this.rafInstance) {
          raf_1.cancel(this.rafInstance);
        }
      },
      getInnerMenu: function getInnerMenu() {
        return this.dropdownMenuRef && this.dropdownMenuRef.$refs.menuRef;
      },
      getPopupDOMNode: function getPopupDOMNode() {
        return this.triggerRef.getPopupDomNode();
      },
      getDropdownElement: function getDropdownElement(newProps) {
        var h = this.$createElement;
        var value = this.value,
            firstActiveValue = this.firstActiveValue,
            defaultActiveFirstOption = this.defaultActiveFirstOption,
            dropdownMenuStyle = this.dropdownMenuStyle,
            getDropdownPrefixCls = this.getDropdownPrefixCls,
            backfillValue = this.backfillValue,
            menuItemSelectedIcon = this.menuItemSelectedIcon;

        var _getListeners = getListeners(this),
            menuSelect = _getListeners.menuSelect,
            menuDeselect = _getListeners.menuDeselect,
            popupScroll = _getListeners.popupScroll;

        var props = this.$props;

        var dropdownRender = props.dropdownRender,
            ariaId = props.ariaId;

        var dropdownMenuProps = {
          props: _extends$1({}, newProps.props, {
            ariaId: ariaId,
            prefixCls: getDropdownPrefixCls(),
            value: value,
            firstActiveValue: firstActiveValue,
            defaultActiveFirstOption: defaultActiveFirstOption,
            dropdownMenuStyle: dropdownMenuStyle,
            backfillValue: backfillValue,
            menuItemSelectedIcon: menuItemSelectedIcon
          }),
          on: _extends$1({}, newProps.on, {
            menuSelect: menuSelect,
            menuDeselect: menuDeselect,
            popupScroll: popupScroll
          }),
          directives: [{
            name: 'ant-ref',
            value: this.saveDropdownMenuRef
          }]
        };
        var menuNode = h(DropdownMenu, dropdownMenuProps);

        if (dropdownRender) {
          return dropdownRender(menuNode, props);
        }
        return null;
      },
      getDropdownTransitionName: function getDropdownTransitionName() {
        var props = this.$props;
        var transitionName = props.transitionName;
        if (!transitionName && props.animation) {
          transitionName = this.getDropdownPrefixCls() + '-' + props.animation;
        }
        return transitionName;
      },
      getDropdownPrefixCls: function getDropdownPrefixCls() {
        return this.prefixCls + '-dropdown';
      }
    },

    render: function render() {
      var _popupClassName;

      var h = arguments[0];
      var $props = this.$props,
          $slots = this.$slots;
      var multiple = $props.multiple,
          visible = $props.visible,
          inputValue = $props.inputValue,
          dropdownAlign = $props.dropdownAlign,
          disabled = $props.disabled,
          showSearch = $props.showSearch,
          dropdownClassName = $props.dropdownClassName,
          dropdownStyle = $props.dropdownStyle,
          dropdownMatchSelectWidth = $props.dropdownMatchSelectWidth,
          options = $props.options,
          getPopupContainer = $props.getPopupContainer,
          showAction = $props.showAction,
          empty = $props.empty;

      var _getListeners2 = getListeners(this),
          mouseenter = _getListeners2.mouseenter,
          mouseleave = _getListeners2.mouseleave,
          popupFocus = _getListeners2.popupFocus,
          dropdownVisibleChange = _getListeners2.dropdownVisibleChange;

      var dropdownPrefixCls = this.getDropdownPrefixCls();
      var popupClassName = (_popupClassName = {}, _defineProperty(_popupClassName, dropdownClassName, !!dropdownClassName), _defineProperty(_popupClassName, dropdownPrefixCls + '--' + (multiple ? 'multiple' : 'single'), 1), _defineProperty(_popupClassName, dropdownPrefixCls + '--empty', empty), _popupClassName);
      var popupElement = this.getDropdownElement({
        props: {
          menuItems: options,
          multiple: multiple,
          inputValue: inputValue,
          visible: visible
        },
        on: {
          popupFocus: popupFocus
        }
      });
      var hideAction = void 0;
      if (disabled) {
        hideAction = [];
      } else if (isSingleMode($props) && !showSearch) {
        hideAction = ['click'];
      } else {
        hideAction = ['blur'];
      }
      var popupStyle = _extends$1({}, dropdownStyle);
      var widthProp = dropdownMatchSelectWidth ? 'width' : 'minWidth';
      if (this.dropdownWidth) {
        popupStyle[widthProp] = this.dropdownWidth + 'px';
      }
      var triggerProps = {
        props: _extends$1({}, $props, {
          showAction: disabled ? [] : showAction,
          hideAction: hideAction,
          ref: 'triggerRef',
          popupPlacement: 'bottomLeft',
          builtinPlacements: BUILT_IN_PLACEMENTS,
          prefixCls: dropdownPrefixCls,
          popupTransitionName: this.getDropdownTransitionName(),
          popupAlign: dropdownAlign,
          popupVisible: visible,
          getPopupContainer: getPopupContainer,
          popupClassName: classnames(popupClassName),
          popupStyle: popupStyle
        }),
        on: {
          popupVisibleChange: dropdownVisibleChange
        },
        directives: [{
          name: 'ant-ref',
          value: this.saveTriggerRef
        }]
      };
      if (mouseenter) {
        triggerProps.on.mouseenter = mouseenter;
      }
      if (mouseleave) {
        triggerProps.on.mouseleave = mouseleave;
      }
      return h(
        Trigger,
        triggerProps,
        [$slots['default'], h(
          'template',
          { slot: 'popup' },
          [popupElement]
        )]
      );
    }
  };

  var SelectPropTypes = {
    defaultActiveFirstOption: VuePropTypes.bool,
    multiple: VuePropTypes.bool,
    filterOption: VuePropTypes.any,
    // children: PropTypes.any,
    showSearch: VuePropTypes.bool,
    disabled: VuePropTypes.bool,
    allowClear: VuePropTypes.bool,
    showArrow: VuePropTypes.bool,
    tags: VuePropTypes.bool,
    prefixCls: VuePropTypes.string,
    // className: PropTypes.string,
    transitionName: VuePropTypes.string,
    optionLabelProp: VuePropTypes.string,
    optionFilterProp: VuePropTypes.string,
    animation: VuePropTypes.string,
    choiceTransitionName: VuePropTypes.string,
    open: VuePropTypes.bool,
    defaultOpen: VuePropTypes.bool,
    // onChange: PropTypes.func,
    // onBlur: PropTypes.func,
    // onFocus: PropTypes.func,
    // onSelect: PropTypes.func,
    // onSearch: PropTypes.func,
    // onPopupScroll: PropTypes.func,
    // onMouseEnter: PropTypes.func,
    // onMouseLeave: PropTypes.func,
    // onInputKeyDown: PropTypes.func,
    placeholder: VuePropTypes.any,
    // onDeselect: PropTypes.func,
    labelInValue: VuePropTypes.bool,
    loading: VuePropTypes.bool,
    value: VuePropTypes.any,
    defaultValue: VuePropTypes.any,
    dropdownStyle: VuePropTypes.object,
    dropdownClassName: VuePropTypes.string,
    maxTagTextLength: VuePropTypes.number,
    maxTagCount: VuePropTypes.number,
    maxTagPlaceholder: VuePropTypes.any,
    tokenSeparators: VuePropTypes.arrayOf(VuePropTypes.string),
    getInputElement: VuePropTypes.func,
    showAction: VuePropTypes.arrayOf(VuePropTypes.string),
    autoFocus: VuePropTypes.bool,
    getPopupContainer: VuePropTypes.func,
    clearIcon: VuePropTypes.any,
    inputIcon: VuePropTypes.any,
    removeIcon: VuePropTypes.any,
    menuItemSelectedIcon: VuePropTypes.any,
    dropdownRender: VuePropTypes.func,
    mode: VuePropTypes.oneOf(['multiple', 'tags']),
    backfill: VuePropTypes.bool,
    dropdownAlign: VuePropTypes.any,
    dropdownMatchSelectWidth: VuePropTypes.bool,
    dropdownMenuStyle: VuePropTypes.object,
    notFoundContent: VuePropTypes.oneOfType([String, Number]),
    tabIndex: VuePropTypes.oneOfType([String, Number])
  };

  /* eslint-disable no-undef */
  // Browser environment sniffing
  var inBrowser$2 = typeof window !== 'undefined';
  var inWeex$1 = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
  var weexPlatform$1 = inWeex$1 && WXEnvironment.platform.toLowerCase();
  var UA$2 = inBrowser$2 && window.navigator.userAgent.toLowerCase();
  var isIE$1 = UA$2 && /msie|trident/.test(UA$2);
  var isIE9$2 = UA$2 && UA$2.indexOf('msie 9.0') > 0;
  var isEdge$1 = UA$2 && UA$2.indexOf('edge/') > 0;
  var isAndroid$1 = UA$2 && UA$2.indexOf('android') > 0 || weexPlatform$1 === 'android';
  var isIOS$1 = UA$2 && /iphone|ipad|ipod|ios/.test(UA$2) || weexPlatform$1 === 'ios';
  var isChrome$1 = UA$2 && /chrome\/\d+/.test(UA$2) && !isEdge$1;
  var isPhantomJS$1 = UA$2 && /phantomjs/.test(UA$2);
  var isFF$1 = UA$2 && UA$2.match(/firefox\/(\d+)/);

  Vue.use(ref$1, { name: 'ant-ref' });
  var SELECT_EMPTY_VALUE_KEY = 'RC_SELECT_EMPTY_VALUE_KEY';

  var noop$5 = function noop() {
    return null;
  };

  // Where el is the DOM element you'd like to test for visibility
  function isHidden(node) {
    return !node || node.offsetParent === null;
  }

  function chaining() {
    for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
      fns[_key] = arguments[_key];
    }

    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      // eslint-disable-line
      // eslint-disable-line
      for (var i = 0; i < fns.length; i++) {
        if (fns[i] && typeof fns[i] === 'function') {
          fns[i].apply(chaining, args);
        }
      }
    };
  }
  var Select = {
    inheritAttrs: false,
    Option: Option,
    OptGroup: OptGroup,
    name: 'Select',
    mixins: [BaseMixin],
    props: _extends$1({}, SelectPropTypes, {
      prefixCls: SelectPropTypes.prefixCls.def('rc-select'),
      defaultOpen: VuePropTypes.bool.def(false),
      labelInValue: SelectPropTypes.labelInValue.def(false),
      defaultActiveFirstOption: SelectPropTypes.defaultActiveFirstOption.def(true),
      showSearch: SelectPropTypes.showSearch.def(true),
      allowClear: SelectPropTypes.allowClear.def(false),
      placeholder: SelectPropTypes.placeholder.def(''),
      // showArrow: SelectPropTypes.showArrow.def(true),
      dropdownMatchSelectWidth: VuePropTypes.bool.def(true),
      dropdownStyle: SelectPropTypes.dropdownStyle.def(function () {
        return {};
      }),
      dropdownMenuStyle: VuePropTypes.object.def(function () {
        return {};
      }),
      optionFilterProp: SelectPropTypes.optionFilterProp.def('value'),
      optionLabelProp: SelectPropTypes.optionLabelProp.def('value'),
      notFoundContent: VuePropTypes.any.def('Not Found'),
      backfill: VuePropTypes.bool.def(false),
      showAction: SelectPropTypes.showAction.def(['click']),
      combobox: VuePropTypes.bool.def(false),
      tokenSeparators: VuePropTypes.arrayOf(VuePropTypes.string).def([]),
      autoClearSearchValue: VuePropTypes.bool.def(true),
      tabIndex: VuePropTypes.any.def(0),
      dropdownRender: VuePropTypes.func.def(function (menu) {
        return menu;
      })
      // onChange: noop,
      // onFocus: noop,
      // onBlur: noop,
      // onSelect: noop,
      // onSearch: noop,
      // onDeselect: noop,
      // onInputKeydown: noop,
    }),
    model: {
      prop: 'value',
      event: 'change'
    },
    created: function created() {
      this.saveInputRef = saveRef$1(this, 'inputRef');
      this.saveInputMirrorRef = saveRef$1(this, 'inputMirrorRef');
      this.saveTopCtrlRef = saveRef$1(this, 'topCtrlRef');
      this.saveSelectTriggerRef = saveRef$1(this, 'selectTriggerRef');
      this.saveRootRef = saveRef$1(this, 'rootRef');
      this.saveSelectionRef = saveRef$1(this, 'selectionRef');
      this._focused = false;
      this._mouseDown = false;
      this._options = [];
      this._empty = false;
    },
    data: function data() {
      var props = getOptionProps(this);
      var optionsInfo = this.getOptionsInfoFromProps(props);
      warning_1(this.__propsSymbol__, 'Replace slots.default with props.children and pass props.__propsSymbol__');
      if (props.tags && typeof props.filterOption !== 'function') {
        var isDisabledExist = Object.keys(optionsInfo).some(function (key) {
          return optionsInfo[key].disabled;
        });
        warning_1(!isDisabledExist, 'Please avoid setting option to disabled in tags mode since user can always type text as tag.');
      }
      var state = {
        _value: this.getValueFromProps(props, true), // true: use default value
        _inputValue: props.combobox ? this.getInputValueForCombobox(props, optionsInfo, true // use default value
        ) : '',
        _open: props.defaultOpen,
        _optionsInfo: optionsInfo,
        _backfillValue: '',
        // a flag for aviod redundant getOptionsInfoFromProps call
        _skipBuildOptionsInfo: true,
        _ariaId: generateUUID()
      };
      return _extends$1({}, state, {
        _mirrorInputValue: state._inputValue }, this.getDerivedState(props, state));
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        // when defaultOpen is true, we should auto focus search input
        // https://github.com/ant-design/ant-design/issues/14254
        if (_this.autoFocus || _this._open) {
          _this.focus();
        }
        // this.setState({
        //   _ariaId: generateUUID(),
        // });
      });
    },

    watch: {
      __propsSymbol__: function __propsSymbol__() {
        _extends$1(this.$data, this.getDerivedState(getOptionProps(this), this.$data));
      },
      '$data._inputValue': function $data_inputValue(val) {
        this.$data._mirrorInputValue = val;
      }
    },
    updated: function updated() {
      var _this2 = this;

      this.$nextTick(function () {
        if (isMultipleOrTags(_this2.$props)) {
          var inputNode = _this2.getInputDOMNode();
          var mirrorNode = _this2.getInputMirrorDOMNode();
          if (inputNode && inputNode.value && mirrorNode) {
            inputNode.style.width = '';
            inputNode.style.width = mirrorNode.clientWidth + 10 + 'px';
          } else if (inputNode) {
            inputNode.style.width = '';
          }
        }
        _this2.forcePopupAlign();
      });
    },
    beforeDestroy: function beforeDestroy() {
      this.clearFocusTime();
      this.clearBlurTime();
      this.clearComboboxTime();
      if (this.dropdownContainer) {
        document.body.removeChild(this.dropdownContainer);
        this.dropdownContainer = null;
      }
    },

    methods: {
      getDerivedState: function getDerivedState(nextProps, prevState) {
        var optionsInfo = prevState._skipBuildOptionsInfo ? prevState._optionsInfo : this.getOptionsInfoFromProps(nextProps, prevState);

        var newState = {
          _optionsInfo: optionsInfo,
          _skipBuildOptionsInfo: false
        };

        if ('open' in nextProps) {
          newState._open = nextProps.open;
        }

        if ('value' in nextProps) {
          var value = this.getValueFromProps(nextProps);
          newState._value = value;
          if (nextProps.combobox) {
            newState._inputValue = this.getInputValueForCombobox(nextProps, optionsInfo);
          }
        }
        return newState;
      },
      getOptionsFromChildren: function getOptionsFromChildren() {
        var _this3 = this;

        var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        children.forEach(function (child) {
          if (!child.data || child.data.slot !== undefined) {
            return;
          }
          if (getSlotOptions(child).isSelectOptGroup) {
            _this3.getOptionsFromChildren(child.componentOptions.children, options);
          } else {
            options.push(child);
          }
        });
        return options;
      },
      getInputValueForCombobox: function getInputValueForCombobox(props, optionsInfo, useDefaultValue) {
        var value = [];
        if ('value' in props && !useDefaultValue) {
          value = toArray$1(props.value);
        }
        if ('defaultValue' in props && useDefaultValue) {
          value = toArray$1(props.defaultValue);
        }
        if (value.length) {
          value = value[0];
        } else {
          return '';
        }
        var label = value;
        if (props.labelInValue) {
          label = value.label;
        } else if (optionsInfo[getMapKey(value)]) {
          label = optionsInfo[getMapKey(value)].label;
        }
        if (label === undefined) {
          label = '';
        }
        return label;
      },
      getLabelFromOption: function getLabelFromOption(props, option) {
        return getPropValue(option, props.optionLabelProp);
      },
      getOptionsInfoFromProps: function getOptionsInfoFromProps(props, preState) {
        var _this4 = this;

        var options = this.getOptionsFromChildren(this.$props.children);
        var optionsInfo = {};
        options.forEach(function (option) {
          var singleValue = getValuePropValue(option);
          optionsInfo[getMapKey(singleValue)] = {
            option: option,
            value: singleValue,
            label: _this4.getLabelFromOption(props, option),
            title: getValueByProp(option, 'title'),
            disabled: getValueByProp(option, 'disabled')
          };
        });
        if (preState) {
          // keep option info in pre state value.
          var oldOptionsInfo = preState._optionsInfo;
          var value = preState._value;
          if (value) {
            value.forEach(function (v) {
              var key = getMapKey(v);
              if (!optionsInfo[key] && oldOptionsInfo[key] !== undefined) {
                optionsInfo[key] = oldOptionsInfo[key];
              }
            });
          }
        }
        return optionsInfo;
      },
      getValueFromProps: function getValueFromProps(props, useDefaultValue) {
        var value = [];
        if ('value' in props && !useDefaultValue) {
          value = toArray$1(props.value);
        }
        if ('defaultValue' in props && useDefaultValue) {
          value = toArray$1(props.defaultValue);
        }
        if (props.labelInValue) {
          value = value.map(function (v) {
            return v.key;
          });
        }
        return value;
      },
      onInputChange: function onInputChange(e) {
        var _e$target = e.target,
            val = _e$target.value,
            composing = _e$target.composing;

        var _$data$_inputValue = this.$data._inputValue,
            _inputValue = _$data$_inputValue === undefined ? '' : _$data$_inputValue;

        if (e.isComposing || composing || _inputValue === val) {
          this.setState({
            _mirrorInputValue: val
          });
          return;
        }
        var tokenSeparators = this.$props.tokenSeparators;

        if (isMultipleOrTags(this.$props) && tokenSeparators.length && includesSeparators(val, tokenSeparators)) {
          var nextValue = this.getValueByInput(val);
          if (nextValue !== undefined) {
            this.fireChange(nextValue);
          }
          this.setOpenState(false, { needFocus: true });
          this.setInputValue('', false);
          return;
        }
        this.setInputValue(val);
        this.setState({
          _open: true
        });
        if (isCombobox(this.$props)) {
          this.fireChange([val]);
        }
      },
      onDropdownVisibleChange: function onDropdownVisibleChange(open) {
        if (open && !this._focused) {
          this.clearBlurTime();
          this.timeoutFocus();
          this._focused = true;
          this.updateFocusClassName();
        }
        this.setOpenState(open);
      },


      // combobox ignore
      onKeyDown: function onKeyDown(event) {
        var open = this.$data._open;
        var disabled = this.$props.disabled;

        if (disabled) {
          return;
        }
        var keyCode = event.keyCode;
        if (open && !this.getInputDOMNode()) {
          this.onInputKeydown(event);
        } else if (keyCode === KeyCode.ENTER || keyCode === KeyCode.DOWN) {
          // vue state是同步更新，onKeyDown在onMenuSelect后会再次调用，单选时不在调用setOpenState
          // https://github.com/vueComponent/ant-design-vue/issues/1142
          if (keyCode === KeyCode.ENTER && !isMultipleOrTags(this.$props)) {
            this.maybeFocus(true);
          } else if (!open) {
            this.setOpenState(true);
          }
          event.preventDefault();
        } else if (keyCode === KeyCode.SPACE) {
          // Not block space if popup is shown
          if (!open) {
            this.setOpenState(true);
            event.preventDefault();
          }
        }
      },
      onInputKeydown: function onInputKeydown(event) {
        var _this5 = this;

        var _$props = this.$props,
            disabled = _$props.disabled,
            combobox = _$props.combobox,
            defaultActiveFirstOption = _$props.defaultActiveFirstOption;

        if (disabled) {
          return;
        }
        var state = this.$data;
        var isRealOpen = this.getRealOpenState(state);
        var keyCode = event.keyCode;
        if (isMultipleOrTags(this.$props) && !event.target.value && keyCode === KeyCode.BACKSPACE) {
          event.preventDefault();
          var value = state._value;

          if (value.length) {
            this.removeSelected(value[value.length - 1]);
          }
          return;
        }
        if (keyCode === KeyCode.DOWN) {
          if (!state._open) {
            this.openIfHasChildren();
            event.preventDefault();
            event.stopPropagation();
            return;
          }
        } else if (keyCode === KeyCode.ENTER && state._open) {
          // Aviod trigger form submit when select item
          // https://github.com/ant-design/ant-design/issues/10861
          // https://github.com/ant-design/ant-design/issues/14544
          if (isRealOpen || !combobox) {
            event.preventDefault();
          }
          // Hard close popup to avoid lock of non option in combobox mode
          if (isRealOpen && combobox && defaultActiveFirstOption === false) {
            this.comboboxTimer = setTimeout(function () {
              _this5.setOpenState(false);
            });
          }
        } else if (keyCode === KeyCode.ESC) {
          if (state._open) {
            this.setOpenState(false);
            event.preventDefault();
            event.stopPropagation();
          }
          return;
        }

        if (isRealOpen && this.selectTriggerRef) {
          var menu = this.selectTriggerRef.getInnerMenu();
          if (menu && menu.onKeyDown(event, this.handleBackfill)) {
            event.preventDefault();
            event.stopPropagation();
          }
        }
      },
      onMenuSelect: function onMenuSelect(_ref) {
        var item = _ref.item;

        if (!item) {
          return;
        }
        var value = this.$data._value;
        var props = this.$props;
        var selectedValue = getValuePropValue(item);
        var lastValue = value[value.length - 1];
        var skipTrigger = false;

        if (isMultipleOrTags(props)) {
          if (findIndexInValueBySingleValue(value, selectedValue) !== -1) {
            skipTrigger = true;
          } else {
            value = value.concat([selectedValue]);
          }
        } else {
          if (!isCombobox(props) && lastValue !== undefined && lastValue === selectedValue && selectedValue !== this.$data._backfillValue) {
            this.setOpenState(false, { needFocus: true, fireSearch: false });
            skipTrigger = true;
          } else {
            value = [selectedValue];
            this.setOpenState(false, { needFocus: true, fireSearch: false });
          }
        }
        if (!skipTrigger) {
          this.fireChange(value);
        }
        if (!skipTrigger) {
          this.fireSelect(selectedValue);
          var inputValue = isCombobox(props) ? getPropValue(item, props.optionLabelProp) : '';

          if (props.autoClearSearchValue) {
            this.setInputValue(inputValue, false);
          }
        }
      },
      onMenuDeselect: function onMenuDeselect(_ref2) {
        var item = _ref2.item,
            domEvent = _ref2.domEvent;

        if (domEvent.type === 'keydown' && domEvent.keyCode === KeyCode.ENTER) {
          var menuItemDomNode = item.$el;
          // https://github.com/ant-design/ant-design/issues/20465#issuecomment-569033796
          if (!isHidden(menuItemDomNode)) {
            this.removeSelected(getValuePropValue(item));
          }
          return;
        }
        if (domEvent.type === 'click') {
          this.removeSelected(getValuePropValue(item));
        }
        if (this.autoClearSearchValue) {
          this.setInputValue('');
        }
      },
      onArrowClick: function onArrowClick(e) {
        e.stopPropagation();
        e.preventDefault();
        this.clearBlurTime();
        if (!this.disabled) {
          this.setOpenState(!this.$data._open, { needFocus: !this.$data._open });
        }
      },
      onPlaceholderClick: function onPlaceholderClick() {
        if (this.getInputDOMNode() && this.getInputDOMNode()) {
          this.getInputDOMNode().focus();
        }
      },
      onPopupFocus: function onPopupFocus() {
        // fix ie scrollbar, focus element again
        this.maybeFocus(true, true);
      },
      onClearSelection: function onClearSelection(event) {
        var props = this.$props;
        var state = this.$data;
        if (props.disabled) {
          return;
        }
        var inputValue = state._inputValue,
            value = state._value;

        event.stopPropagation();
        if (inputValue || value.length) {
          if (value.length) {
            this.fireChange([]);
          }
          this.setOpenState(false, { needFocus: true });
          if (inputValue) {
            this.setInputValue('');
          }
        }
      },
      onChoiceAnimationLeave: function onChoiceAnimationLeave() {
        this.forcePopupAlign();
      },
      getOptionInfoBySingleValue: function getOptionInfoBySingleValue(value, optionsInfo) {
        var h = this.$createElement;

        var info = void 0;
        optionsInfo = optionsInfo || this.$data._optionsInfo;
        if (optionsInfo[getMapKey(value)]) {
          info = optionsInfo[getMapKey(value)];
        }
        if (info) {
          return info;
        }
        var defaultLabel = value;
        if (this.$props.labelInValue) {
          var valueLabel = getLabelFromPropsValue(this.$props.value, value);
          var defaultValueLabel = getLabelFromPropsValue(this.$props.defaultValue, value);
          if (valueLabel !== undefined) {
            defaultLabel = valueLabel;
          } else if (defaultValueLabel !== undefined) {
            defaultLabel = defaultValueLabel;
          }
        }
        var defaultInfo = {
          option: h(
            Option,
            {
              attrs: { value: value },
              key: value },
            [value]
          ),
          value: value,
          label: defaultLabel
        };
        return defaultInfo;
      },
      getOptionBySingleValue: function getOptionBySingleValue(value) {
        var _getOptionInfoBySingl = this.getOptionInfoBySingleValue(value),
            option = _getOptionInfoBySingl.option;

        return option;
      },
      getOptionsBySingleValue: function getOptionsBySingleValue(values) {
        var _this6 = this;

        return values.map(function (value) {
          return _this6.getOptionBySingleValue(value);
        });
      },
      getValueByLabel: function getValueByLabel(label) {
        var _this7 = this;

        if (label === undefined) {
          return null;
        }
        var value = null;
        Object.keys(this.$data._optionsInfo).forEach(function (key) {
          var info = _this7.$data._optionsInfo[key];
          var disabled = info.disabled;

          if (disabled) {
            return;
          }
          var oldLable = toArray$1(info.label);
          if (oldLable && oldLable.join('') === label) {
            value = info.value;
          }
        });
        return value;
      },
      getVLBySingleValue: function getVLBySingleValue(value) {
        if (this.$props.labelInValue) {
          return {
            key: value,
            label: this.getLabelBySingleValue(value)
          };
        }
        return value;
      },
      getVLForOnChange: function getVLForOnChange(vlsS) {
        var _this8 = this;

        var vls = vlsS;
        if (vls !== undefined) {
          if (!this.labelInValue) {
            vls = vls.map(function (v) {
              return v;
            });
          } else {
            vls = vls.map(function (vl) {
              return {
                key: vl,
                label: _this8.getLabelBySingleValue(vl)
              };
            });
          }
          return isMultipleOrTags(this.$props) ? vls : vls[0];
        }
        return vls;
      },
      getLabelBySingleValue: function getLabelBySingleValue(value, optionsInfo) {
        var _getOptionInfoBySingl2 = this.getOptionInfoBySingleValue(value, optionsInfo),
            label = _getOptionInfoBySingl2.label;

        return label;
      },
      getDropdownContainer: function getDropdownContainer() {
        if (!this.dropdownContainer) {
          this.dropdownContainer = document.createElement('div');
          document.body.appendChild(this.dropdownContainer);
        }
        return this.dropdownContainer;
      },
      getPlaceholderElement: function getPlaceholderElement() {
        var h = this.$createElement;
        var props = this.$props,
            state = this.$data;

        var hidden = false;
        if (state._mirrorInputValue) {
          hidden = true;
        }
        var value = state._value;
        if (value.length) {
          hidden = true;
        }
        if (!state._mirrorInputValue && isCombobox(props) && value.length === 1 && state._value && !state._value[0]) {
          hidden = false;
        }
        var placeholder = props.placeholder;
        if (placeholder) {
          var p = {
            on: {
              mousedown: preventDefaultEvent,
              click: this.onPlaceholderClick
            },
            attrs: UNSELECTABLE_ATTRIBUTE,
            style: _extends$1({
              display: hidden ? 'none' : 'block'
            }, UNSELECTABLE_STYLE),
            'class': props.prefixCls + '-selection__placeholder'
          };
          return h(
            'div',
            p,
            [placeholder]
          );
        }
        return null;
      },
      inputClick: function inputClick(e) {
        if (this.$data._open) {
          this.clearBlurTime();
          e.stopPropagation();
        } else {
          this._focused = false;
        }
      },
      inputBlur: function inputBlur(e) {
        var _this9 = this;

        var target = e.relatedTarget || document.activeElement;

        // https://github.com/vueComponent/ant-design-vue/issues/999
        // https://github.com/vueComponent/ant-design-vue/issues/1223
        if ((isIE$1 || isEdge$1) && (e.relatedTarget === this.$refs.arrow || target && this.selectTriggerRef && this.selectTriggerRef.getInnerMenu() && this.selectTriggerRef.getInnerMenu().$el === target || contains(e.target, target))) {
          e.target.focus();
          e.preventDefault();
          return;
        }
        this.clearBlurTime();
        if (this.disabled) {
          e.preventDefault();
          return;
        }
        this.blurTimer = setTimeout(function () {
          _this9._focused = false;
          _this9.updateFocusClassName();
          var props = _this9.$props;
          var value = _this9.$data._value;
          var inputValue = _this9.$data._inputValue;

          if (isSingleMode(props) && props.showSearch && inputValue && props.defaultActiveFirstOption) {
            var options = _this9._options || [];
            if (options.length) {
              var firstOption = findFirstMenuItem(options);
              if (firstOption) {
                value = [getValuePropValue(firstOption)];
                _this9.fireChange(value);
              }
            }
          } else if (isMultipleOrTags(props) && inputValue) {
            if (_this9._mouseDown) {
              // need update dropmenu when not blur
              _this9.setInputValue('');
            } else {
              // why not use setState?
              _this9.$data._inputValue = '';
              if (_this9.getInputDOMNode && _this9.getInputDOMNode()) {
                _this9.getInputDOMNode().value = '';
              }
            }
            var tmpValue = _this9.getValueByInput(inputValue);
            if (tmpValue !== undefined) {
              value = tmpValue;
              _this9.fireChange(value);
            }
          }
          // if click the rest space of Select in multiple mode
          if (isMultipleOrTags(props) && _this9._mouseDown) {
            _this9.maybeFocus(true, true);
            _this9._mouseDown = false;
            return;
          }
          _this9.setOpenState(false);
          _this9.$emit('blur', _this9.getVLForOnChange(value));
        }, 200);
      },
      inputFocus: function inputFocus(e) {
        if (this.$props.disabled) {
          e.preventDefault();
          return;
        }
        this.clearBlurTime();

        // In IE11, onOuterFocus will be trigger twice when focus input
        // First one: e.target is div
        // Second one: e.target is input
        // other browser only trigger second one
        // https://github.com/ant-design/ant-design/issues/15942
        // Here we ignore the first one when e.target is div
        var inputNode = this.getInputDOMNode();
        if (inputNode && e.target === this.rootRef) {
          return;
        }
        if (!isMultipleOrTagsOrCombobox(this.$props) && e.target === inputNode) {
          return;
        }
        if (this._focused) {
          return;
        }
        this._focused = true;
        this.updateFocusClassName();
        // only effect multiple or tag mode
        if (!isMultipleOrTags(this.$props) || !this._mouseDown) {
          this.timeoutFocus();
        }
      },
      _getInputElement: function _getInputElement() {
        var h = this.$createElement;

        var props = this.$props;
        var _$data = this.$data,
            inputValue = _$data._inputValue,
            _mirrorInputValue = _$data._mirrorInputValue;

        var attrs = getAttrs(this);
        var defaultInput = h('input', {
          attrs: { id: attrs.id, autoComplete: 'off' }
        });

        var inputElement = props.getInputElement ? props.getInputElement() : defaultInput;
        var inputCls = classnames(getClass(inputElement), _defineProperty({}, props.prefixCls + '-search__field', true));
        var inputEvents = getEvents(inputElement);
        // https://github.com/ant-design/ant-design/issues/4992#issuecomment-281542159
        // Add space to the end of the inputValue as the width measurement tolerance
        inputElement.data = inputElement.data || {};
        return h(
          'div',
          { 'class': props.prefixCls + '-search__field__wrap', on: {
              'click': this.inputClick
            }
          },
          [cloneElement(inputElement, {
            props: {
              disabled: props.disabled,
              value: inputValue
            },
            attrs: _extends$1({}, inputElement.data.attrs || {}, {
              disabled: props.disabled,
              value: inputValue
            }),
            domProps: {
              value: inputValue
            },
            'class': inputCls,
            directives: [{
              name: 'ant-ref',
              value: this.saveInputRef
            }, {
              name: 'ant-input'
            }],
            on: {
              input: this.onInputChange,
              keydown: chaining(this.onInputKeydown, inputEvents.keydown, getListeners(this).inputKeydown),
              focus: chaining(this.inputFocus, inputEvents.focus),
              blur: chaining(this.inputBlur, inputEvents.blur)
            }
          }), h(
            'span',
            babelHelperVueJsxMergeProps([{
              directives: [{
                name: 'ant-ref',
                value: this.saveInputMirrorRef
              }]
            }, {
              // ref='inputMirrorRef'
              'class': props.prefixCls + '-search__field__mirror'
            }]),
            [_mirrorInputValue, '\xA0']
          )]
        );
      },
      getInputDOMNode: function getInputDOMNode() {
        return this.topCtrlRef ? this.topCtrlRef.querySelector('input,textarea,div[contentEditable]') : this.inputRef;
      },
      getInputMirrorDOMNode: function getInputMirrorDOMNode() {
        return this.inputMirrorRef;
      },
      getPopupDOMNode: function getPopupDOMNode() {
        if (this.selectTriggerRef) {
          return this.selectTriggerRef.getPopupDOMNode();
        }
      },
      getPopupMenuComponent: function getPopupMenuComponent() {
        if (this.selectTriggerRef) {
          return this.selectTriggerRef.getInnerMenu();
        }
      },
      setOpenState: function setOpenState(open) {
        var _this10 = this;

        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var props = this.$props,
            state = this.$data;
        var needFocus = config.needFocus,
            fireSearch = config.fireSearch;

        if (state._open === open) {
          this.maybeFocus(open, !!needFocus);
          return;
        }
        this.__emit('dropdownVisibleChange', open);
        var nextState = {
          _open: open,
          _backfillValue: ''
        };
        // clear search input value when open is false in singleMode.
        if (!open && isSingleMode(props) && props.showSearch) {
          this.setInputValue('', fireSearch);
        }
        if (!open) {
          this.maybeFocus(open, !!needFocus);
        }
        this.setState(nextState, function () {
          if (open) {
            _this10.maybeFocus(open, !!needFocus);
          }
        });
      },
      setInputValue: function setInputValue(inputValue) {
        var fireSearch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (inputValue !== this.$data._inputValue) {
          this.setState({
            _inputValue: inputValue
          }, this.forcePopupAlign);
          if (fireSearch) {
            this.$emit('search', inputValue);
          }
        }
      },
      getValueByInput: function getValueByInput(str) {
        var _this11 = this;

        var _$props2 = this.$props,
            multiple = _$props2.multiple,
            tokenSeparators = _$props2.tokenSeparators;

        var nextValue = this.$data._value;
        var hasNewValue = false;
        splitBySeparators(str, tokenSeparators).forEach(function (label) {
          var selectedValue = [label];
          if (multiple) {
            var value = _this11.getValueByLabel(label);
            if (value && findIndexInValueBySingleValue(nextValue, value) === -1) {
              nextValue = nextValue.concat(value);
              hasNewValue = true;
              _this11.fireSelect(value);
            }
          } else if (findIndexInValueBySingleValue(nextValue, label) === -1) {
            nextValue = nextValue.concat(selectedValue);
            hasNewValue = true;
            _this11.fireSelect(label);
          }
        });
        return hasNewValue ? nextValue : undefined;
      },
      getRealOpenState: function getRealOpenState(state) {
        var _open = this.$props.open;

        if (typeof _open === 'boolean') {
          return _open;
        }

        var open = (state || this.$data)._open;
        var options = this._options || [];
        if (isMultipleOrTagsOrCombobox(this.$props) || !this.$props.showSearch) {
          if (open && !options.length) {
            open = false;
          }
        }
        return open;
      },
      focus: function focus() {
        if (isSingleMode(this.$props) && this.selectionRef) {
          this.selectionRef.focus();
        } else if (this.getInputDOMNode()) {
          this.getInputDOMNode().focus();
        }
      },
      blur: function blur() {
        if (isSingleMode(this.$props) && this.selectionRef) {
          this.selectionRef.blur();
        } else if (this.getInputDOMNode()) {
          this.getInputDOMNode().blur();
        }
      },
      markMouseDown: function markMouseDown() {
        this._mouseDown = true;
      },
      markMouseLeave: function markMouseLeave() {
        this._mouseDown = false;
      },
      handleBackfill: function handleBackfill(item) {
        if (!this.backfill || !(isSingleMode(this.$props) || isCombobox(this.$props))) {
          return;
        }

        var key = getValuePropValue(item);

        if (isCombobox(this.$props)) {
          this.setInputValue(key, false);
        }

        this.setState({
          _value: [key],
          _backfillValue: key
        });
      },
      _filterOption: function _filterOption(input, child) {
        var defaultFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultFilterFn;
        var _$data2 = this.$data,
            value = _$data2._value,
            backfillValue = _$data2._backfillValue;

        var lastValue = value[value.length - 1];
        if (!input || lastValue && lastValue === backfillValue) {
          return true;
        }
        var filterFn = this.$props.filterOption;
        if (hasProp(this, 'filterOption')) {
          if (filterFn === true) {
            filterFn = defaultFilter.bind(this);
          }
        } else {
          filterFn = defaultFilter.bind(this);
        }
        if (!filterFn) {
          return true;
        } else if (typeof filterFn === 'function') {
          return filterFn.call(this, input, child);
        } else if (getValueByProp(child, 'disabled')) {
          return false;
        }
        return true;
      },
      timeoutFocus: function timeoutFocus() {
        var _this12 = this;

        if (this.focusTimer) {
          this.clearFocusTime();
        }
        this.focusTimer = window.setTimeout(function () {
          // this._focused = true
          // this.updateFocusClassName()
          _this12.$emit('focus');
        }, 10);
      },
      clearFocusTime: function clearFocusTime() {
        if (this.focusTimer) {
          clearTimeout(this.focusTimer);
          this.focusTimer = null;
        }
      },
      clearBlurTime: function clearBlurTime() {
        if (this.blurTimer) {
          clearTimeout(this.blurTimer);
          this.blurTimer = null;
        }
      },
      clearComboboxTime: function clearComboboxTime() {
        if (this.comboboxTimer) {
          clearTimeout(this.comboboxTimer);
          this.comboboxTimer = null;
        }
      },
      updateFocusClassName: function updateFocusClassName() {
        var rootRef = this.rootRef,
            prefixCls = this.prefixCls;
        // avoid setState and its side effect

        if (this._focused) {
          componentClasses(rootRef).add(prefixCls + '-focused');
        } else {
          componentClasses(rootRef).remove(prefixCls + '-focused');
        }
      },
      maybeFocus: function maybeFocus(open, needFocus) {
        if (needFocus || open) {
          var input = this.getInputDOMNode();
          var _document = document,
              activeElement = _document.activeElement;

          if (input && (open || isMultipleOrTagsOrCombobox(this.$props))) {
            if (activeElement !== input) {
              input.focus();
              this._focused = true;
            }
          } else if (activeElement !== this.selectionRef && this.selectionRef) {
            this.selectionRef.focus();
            this._focused = true;
          }
        }
      },
      removeSelected: function removeSelected(selectedKey, e) {
        var props = this.$props;
        if (props.disabled || this.isChildDisabled(selectedKey)) {
          return;
        }
        // Do not trigger Trigger popup
        if (e && e.stopPropagation) {
          e.stopPropagation();
        }
        var oldValue = this.$data._value;
        var value = oldValue.filter(function (singleValue) {
          return singleValue !== selectedKey;
        });
        var canMultiple = isMultipleOrTags(props);

        if (canMultiple) {
          var event = selectedKey;
          if (props.labelInValue) {
            event = {
              key: selectedKey,
              label: this.getLabelBySingleValue(selectedKey)
            };
          }
          this.$emit('deselect', event, this.getOptionBySingleValue(selectedKey));
        }
        this.fireChange(value);
      },
      openIfHasChildren: function openIfHasChildren() {
        var $props = this.$props;

        if ($props.children && $props.children.length || isSingleMode($props)) {
          this.setOpenState(true);
        }
      },
      fireSelect: function fireSelect(value) {
        this.$emit('select', this.getVLBySingleValue(value), this.getOptionBySingleValue(value));
      },
      fireChange: function fireChange(value) {
        if (!hasProp(this, 'value')) {
          this.setState({
            _value: value
          }, this.forcePopupAlign);
        }
        var vls = this.getVLForOnChange(value);
        var options = this.getOptionsBySingleValue(value);
        this._valueOptions = options;
        this.$emit('change', vls, isMultipleOrTags(this.$props) ? options : options[0]);
      },
      isChildDisabled: function isChildDisabled(key) {
        return (this.$props.children || []).some(function (child) {
          var childValue = getValuePropValue(child);
          return childValue === key && getValueByProp(child, 'disabled');
        });
      },
      forcePopupAlign: function forcePopupAlign() {
        if (!this.$data._open) {
          return;
        }
        if (this.selectTriggerRef && this.selectTriggerRef.triggerRef) {
          this.selectTriggerRef.triggerRef.forcePopupAlign();
        }
      },
      renderFilterOptions: function renderFilterOptions() {
        var h = this.$createElement;
        var inputValue = this.$data._inputValue;
        var _$props3 = this.$props,
            children = _$props3.children,
            tags = _$props3.tags,
            notFoundContent = _$props3.notFoundContent;

        var menuItems = [];
        var childrenKeys = [];
        var empty = false;
        var options = this.renderFilterOptionsFromChildren(children, childrenKeys, menuItems);
        if (tags) {
          // tags value must be string
          var value = this.$data._value;
          value = value.filter(function (singleValue) {
            return childrenKeys.indexOf(singleValue) === -1 && (!inputValue || String(singleValue).indexOf(String(inputValue)) > -1);
          });

          // sort by length
          value.sort(function (val1, val2) {
            return val1.length - val2.length;
          });

          value.forEach(function (singleValue) {
            var key = singleValue;
            var attrs = _extends$1({}, UNSELECTABLE_ATTRIBUTE, {
              role: 'option'
            });
            var menuItem = h(
              connected$1,
              babelHelperVueJsxMergeProps([{ style: UNSELECTABLE_STYLE }, { attrs: attrs }, {
                attrs: { value: key },
                key: key }]),
              [key]
            );
            options.push(menuItem);
            menuItems.push(menuItem);
          });
          // ref: https://github.com/ant-design/ant-design/issues/14090
          if (inputValue && menuItems.every(function (option) {
            return getValuePropValue(option) !== inputValue;
          })) {
            var p = {
              attrs: UNSELECTABLE_ATTRIBUTE,
              key: inputValue,
              props: {
                value: inputValue,
                role: 'option'
              },
              style: UNSELECTABLE_STYLE
            };
            options.unshift(h(
              connected$1,
              p,
              [inputValue]
            ));
          }
        }

        if (!options.length && notFoundContent) {
          empty = true;
          var _p = {
            attrs: UNSELECTABLE_ATTRIBUTE,
            key: 'NOT_FOUND',
            props: {
              value: 'NOT_FOUND',
              disabled: true,
              role: 'option'
            },
            style: UNSELECTABLE_STYLE
          };
          options = [h(
            connected$1,
            _p,
            [notFoundContent]
          )];
        }
        return { empty: empty, options: options };
      },
      renderFilterOptionsFromChildren: function renderFilterOptionsFromChildren() {
        var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        var _this13 = this;

        var childrenKeys = arguments[1];
        var menuItems = arguments[2];
        var h = this.$createElement;

        var sel = [];
        var props = this.$props;
        var inputValue = this.$data._inputValue;

        var tags = props.tags;
        children.forEach(function (child) {
          if (!child.data || child.data.slot !== undefined) {
            return;
          }
          if (getSlotOptions(child).isSelectOptGroup) {
            var label = getComponentFromProp(child, 'label');
            var key = child.key;
            if (!key && typeof label === 'string') {
              key = label;
            } else if (!label && key) {
              label = key;
            }
            var childChildren = getSlots(child)['default'];
            childChildren = typeof childChildren === 'function' ? childChildren() : childChildren;
            // Match option group label
            if (inputValue && _this13._filterOption(inputValue, child)) {
              var innerItems = childChildren.map(function (subChild) {
                var childValueSub = getValuePropValue(subChild) || subChild.key;
                return h(
                  connected$1,
                  babelHelperVueJsxMergeProps([{ key: childValueSub, attrs: { value: childValueSub }
                  }, subChild.data]),
                  [subChild.componentOptions.children]
                );
              });

              sel.push(h(
                MenuItemGroup,
                { key: key, attrs: { title: label },
                  'class': getClass(child) },
                [innerItems]
              ));

              // Not match
            } else {
              var _innerItems = _this13.renderFilterOptionsFromChildren(childChildren, childrenKeys, menuItems);
              if (_innerItems.length) {
                sel.push(h(
                  MenuItemGroup,
                  babelHelperVueJsxMergeProps([{ key: key, attrs: { title: label }
                  }, child.data]),
                  [_innerItems]
                ));
              }
            }

            return;
          }
          warning_1(getSlotOptions(child).isSelectOption, 'the children of `Select` should be `Select.Option` or `Select.OptGroup`, ' + ('instead of `' + (getSlotOptions(child).name || getSlotOptions(child)) + '`.'));

          var childValue = getValuePropValue(child);

          validateOptionValue(childValue, _this13.$props);
          if (_this13._filterOption(inputValue, child)) {
            var p = {
              attrs: _extends$1({}, UNSELECTABLE_ATTRIBUTE, getAttrs(child)),
              key: childValue,
              props: _extends$1({
                value: childValue
              }, getPropsData(child), {
                role: 'option'
              }),
              style: UNSELECTABLE_STYLE,
              on: getEvents(child),
              'class': getClass(child)
            };
            var menuItem = h(
              connected$1,
              p,
              [child.componentOptions.children]
            );
            sel.push(menuItem);
            menuItems.push(menuItem);
          }
          if (tags) {
            childrenKeys.push(childValue);
          }
        });

        return sel;
      },
      renderTopControlNode: function renderTopControlNode() {
        var _this14 = this;

        var h = this.$createElement;
        var props = this.$props;
        var _$data3 = this.$data,
            value = _$data3._value,
            inputValue = _$data3._inputValue,
            open = _$data3._open;
        var choiceTransitionName = props.choiceTransitionName,
            prefixCls = props.prefixCls,
            maxTagTextLength = props.maxTagTextLength,
            maxTagCount = props.maxTagCount,
            maxTagPlaceholder = props.maxTagPlaceholder,
            showSearch = props.showSearch;

        var removeIcon = getComponentFromProp(this, 'removeIcon');
        var className = prefixCls + '-selection__rendered';
        // search input is inside topControlNode in single, multiple & combobox. 2016/04/13
        var innerNode = null;
        if (isSingleMode(props)) {
          var selectedValue = null;
          if (value.length) {
            var showSelectedValue = false;
            var opacity = 1;
            if (!showSearch) {
              showSelectedValue = true;
            } else if (open) {
              showSelectedValue = !inputValue;
              if (showSelectedValue) {
                opacity = 0.4;
              }
            } else {
              showSelectedValue = true;
            }
            var singleValue = value[0];

            var _getOptionInfoBySingl3 = this.getOptionInfoBySingleValue(singleValue),
                label = _getOptionInfoBySingl3.label,
                title = _getOptionInfoBySingl3.title;

            selectedValue = h(
              'div',
              {
                key: 'value',
                'class': prefixCls + '-selection-selected-value',
                attrs: { title: toTitle(title || label)
                },
                style: {
                  display: showSelectedValue ? 'block' : 'none',
                  opacity: opacity
                }
              },
              [label]
            );
          }
          if (!showSearch) {
            innerNode = [selectedValue];
          } else {
            innerNode = [selectedValue, h(
              'div',
              {
                'class': prefixCls + '-search ' + prefixCls + '-search--inline',
                key: 'input',
                style: {
                  display: open ? 'block' : 'none'
                }
              },
              [this._getInputElement()]
            )];
          }
        } else {
          var selectedValueNodes = [];
          var limitedCountValue = value;
          var maxTagPlaceholderEl = void 0;
          if (maxTagCount !== undefined && value.length > maxTagCount) {
            limitedCountValue = limitedCountValue.slice(0, maxTagCount);
            var omittedValues = this.getVLForOnChange(value.slice(maxTagCount, value.length));
            var content = '+ ' + (value.length - maxTagCount) + ' ...';
            if (maxTagPlaceholder) {
              content = typeof maxTagPlaceholder === 'function' ? maxTagPlaceholder(omittedValues) : maxTagPlaceholder;
            }
            var attrs = _extends$1({}, UNSELECTABLE_ATTRIBUTE, {
              role: 'presentation',
              title: toTitle(content)
            });
            maxTagPlaceholderEl = h(
              'li',
              babelHelperVueJsxMergeProps([{
                style: UNSELECTABLE_STYLE
              }, { attrs: attrs }, {
                on: {
                  'mousedown': preventDefaultEvent
                },

                'class': prefixCls + '-selection__choice ' + prefixCls + '-selection__choice__disabled',
                key: 'maxTagPlaceholder'
              }]),
              [h(
                'div',
                { 'class': prefixCls + '-selection__choice__content' },
                [content]
              )]
            );
          }
          if (isMultipleOrTags(props)) {
            selectedValueNodes = limitedCountValue.map(function (singleValue) {
              var info = _this14.getOptionInfoBySingleValue(singleValue);
              var content = info.label;
              var title = info.title || content;
              if (maxTagTextLength && typeof content === 'string' && content.length > maxTagTextLength) {
                content = content.slice(0, maxTagTextLength) + '...';
              }
              var disabled = _this14.isChildDisabled(singleValue);
              var choiceClassName = disabled ? prefixCls + '-selection__choice ' + prefixCls + '-selection__choice__disabled' : prefixCls + '-selection__choice';
              // attrs 放在一起，避免动态title混乱问题，很奇怪的问题 https://github.com/vueComponent/ant-design-vue/issues/588
              var attrs = _extends$1({}, UNSELECTABLE_ATTRIBUTE, {
                role: 'presentation',
                title: toTitle(title)
              });
              return h(
                'li',
                babelHelperVueJsxMergeProps([{
                  style: UNSELECTABLE_STYLE
                }, { attrs: attrs }, {
                  on: {
                    'mousedown': preventDefaultEvent
                  },

                  'class': choiceClassName,
                  key: singleValue || SELECT_EMPTY_VALUE_KEY
                }]),
                [h(
                  'div',
                  { 'class': prefixCls + '-selection__choice__content' },
                  [content]
                ), disabled ? null : h(
                  'span',
                  {
                    on: {
                      'click': function click(event) {
                        _this14.removeSelected(singleValue, event);
                      }
                    },

                    'class': prefixCls + '-selection__choice__remove'
                  },
                  [removeIcon || h(
                    'i',
                    { 'class': prefixCls + '-selection__choice__remove-icon' },
                    ['\xD7']
                  )]
                )]
              );
            });
          }
          if (maxTagPlaceholderEl) {
            selectedValueNodes.push(maxTagPlaceholderEl);
          }
          selectedValueNodes.push(h(
            'li',
            { 'class': prefixCls + '-search ' + prefixCls + '-search--inline', key: '__input' },
            [this._getInputElement()]
          ));

          if (isMultipleOrTags(props) && choiceTransitionName) {
            var transitionProps = getTransitionProps(choiceTransitionName, {
              tag: 'ul',
              afterLeave: this.onChoiceAnimationLeave
            });
            innerNode = h(
              'transition-group',
              transitionProps,
              [selectedValueNodes]
            );
          } else {
            innerNode = h('ul', [selectedValueNodes]);
          }
        }
        return h(
          'div',
          babelHelperVueJsxMergeProps([{
            'class': className
          }, {
            directives: [{
              name: 'ant-ref',
              value: this.saveTopCtrlRef
            }]
          }, {
            on: {
              'click': this.topCtrlContainerClick
            }
          }]),
          [this.getPlaceholderElement(), innerNode]
        );
      },
      renderArrow: function renderArrow(multiple) {
        var h = this.$createElement;

        // showArrow : Set to true if not multiple by default but keep set value.
        var _$props4 = this.$props,
            _$props4$showArrow = _$props4.showArrow,
            showArrow = _$props4$showArrow === undefined ? !multiple : _$props4$showArrow,
            loading = _$props4.loading,
            prefixCls = _$props4.prefixCls;

        var inputIcon = getComponentFromProp(this, 'inputIcon');
        if (!showArrow && !loading) {
          return null;
        }
        // if loading  have loading icon
        var defaultIcon = loading ? h('i', { 'class': prefixCls + '-arrow-loading' }) : h('i', { 'class': prefixCls + '-arrow-icon' });
        return h(
          'span',
          babelHelperVueJsxMergeProps([{
            key: 'arrow',
            'class': prefixCls + '-arrow',
            style: UNSELECTABLE_STYLE
          }, { attrs: UNSELECTABLE_ATTRIBUTE }, {
            on: {
              'click': this.onArrowClick
            },

            ref: 'arrow'
          }]),
          [inputIcon || defaultIcon]
        );
      },
      topCtrlContainerClick: function topCtrlContainerClick(e) {
        if (this.$data._open && !isSingleMode(this.$props)) {
          e.stopPropagation();
        }
      },
      renderClear: function renderClear() {
        var h = this.$createElement;
        var _$props5 = this.$props,
            prefixCls = _$props5.prefixCls,
            allowClear = _$props5.allowClear;
        var _$data4 = this.$data,
            value = _$data4._value,
            inputValue = _$data4._inputValue;

        var clearIcon = getComponentFromProp(this, 'clearIcon');
        var clear = h(
          'span',
          babelHelperVueJsxMergeProps([{
            key: 'clear',
            'class': prefixCls + '-selection__clear',
            on: {
              'mousedown': preventDefaultEvent
            },

            style: UNSELECTABLE_STYLE
          }, { attrs: UNSELECTABLE_ATTRIBUTE }, {
            on: {
              'click': this.onClearSelection
            }
          }]),
          [clearIcon || h(
            'i',
            { 'class': prefixCls + '-selection__clear-icon' },
            ['\xD7']
          )]
        );
        if (!allowClear) {
          return null;
        }
        if (isCombobox(this.$props)) {
          if (inputValue) {
            return clear;
          }
          return null;
        }
        if (inputValue || value.length) {
          return clear;
        }
        return null;
      },
      selectionRefClick: function selectionRefClick() {
        //e.stopPropagation();
        if (!this.disabled) {
          var input = this.getInputDOMNode();
          if (this._focused && this.$data._open) {
            // this._focused = false;
            this.setOpenState(false, false);
            input && input.blur();
          } else {
            this.clearBlurTime();
            //this._focused = true;
            this.setOpenState(true, true);
            input && input.focus();
          }
        }
      },
      selectionRefFocus: function selectionRefFocus(e) {
        if (this._focused || this.disabled || isMultipleOrTagsOrCombobox(this.$props)) {
          e.preventDefault();
          return;
        }
        this._focused = true;
        this.updateFocusClassName();
        this.$emit('focus');
      },
      selectionRefBlur: function selectionRefBlur(e) {
        if (isMultipleOrTagsOrCombobox(this.$props)) {
          e.preventDefault();
          return;
        }
        this.inputBlur(e);
      }
    },

    render: function render() {
      var _rootCls;

      var h = arguments[0];

      var props = this.$props;
      var multiple = isMultipleOrTags(props);
      // Default set showArrow to true if not set (not set directly in defaultProps to handle multiple case)
      var _props$showArrow = props.showArrow,
          showArrow = _props$showArrow === undefined ? true : _props$showArrow;

      var state = this.$data;
      var disabled = props.disabled,
          prefixCls = props.prefixCls,
          loading = props.loading;

      var ctrlNode = this.renderTopControlNode();
      var _$data5 = this.$data,
          open = _$data5._open,
          inputValue = _$data5._inputValue,
          value = _$data5._value;

      if (open) {
        var filterOptions = this.renderFilterOptions();
        this._empty = filterOptions.empty;
        this._options = filterOptions.options;
      }
      var realOpen = this.getRealOpenState();
      var empty = this._empty;
      var options = this._options || [];

      var _getListeners = getListeners(this),
          _getListeners$mouseen = _getListeners.mouseenter,
          mouseenter = _getListeners$mouseen === undefined ? noop$5 : _getListeners$mouseen,
          _getListeners$mousele = _getListeners.mouseleave,
          mouseleave = _getListeners$mousele === undefined ? noop$5 : _getListeners$mousele,
          _getListeners$popupSc = _getListeners.popupScroll,
          popupScroll = _getListeners$popupSc === undefined ? noop$5 : _getListeners$popupSc;

      var selectionProps = {
        props: {},
        attrs: {
          role: 'combobox',
          'aria-autocomplete': 'list',
          'aria-haspopup': 'true',
          'aria-expanded': realOpen,
          'aria-controls': this.$data._ariaId
        },
        on: {
          // click: this.selectionRefClick,
        },
        'class': prefixCls + '-selection ' + prefixCls + '-selection--' + (multiple ? 'multiple' : 'single'),
        // directives: [
        //   {
        //     name: 'ant-ref',
        //     value: this.saveSelectionRef,
        //   },
        // ],
        key: 'selection'
      };
      //if (!isMultipleOrTagsOrCombobox(props)) {
      // selectionProps.on.keydown = this.onKeyDown;
      // selectionProps.on.focus = this.selectionRefFocus;
      // selectionProps.on.blur = this.selectionRefBlur;
      // selectionProps.attrs.tabIndex = props.disabled ? -1 : props.tabIndex;
      //}
      var extraSelectionProps = { attrs: { tabIndex: -1 } };
      if (!isMultipleOrTagsOrCombobox(props)) {
        extraSelectionProps.attrs.tabIndex = props.disabled ? -1 : props.tabIndex;
      }
      var rootCls = (_rootCls = {}, _defineProperty(_rootCls, prefixCls, true), _defineProperty(_rootCls, prefixCls + '-open', open), _defineProperty(_rootCls, prefixCls + '-focused', open || !!this._focused), _defineProperty(_rootCls, prefixCls + '-combobox', isCombobox(props)), _defineProperty(_rootCls, prefixCls + '-disabled', disabled), _defineProperty(_rootCls, prefixCls + '-enabled', !disabled), _defineProperty(_rootCls, prefixCls + '-allow-clear', !!props.allowClear), _defineProperty(_rootCls, prefixCls + '-no-arrow', !showArrow), _defineProperty(_rootCls, prefixCls + '-loading', !!loading), _rootCls);
      return h(
        SelectTrigger,
        babelHelperVueJsxMergeProps([{
          attrs: {
            dropdownAlign: props.dropdownAlign,
            dropdownClassName: props.dropdownClassName,
            dropdownMatchSelectWidth: props.dropdownMatchSelectWidth,
            defaultActiveFirstOption: props.defaultActiveFirstOption,
            dropdownMenuStyle: props.dropdownMenuStyle,
            transitionName: props.transitionName,
            animation: props.animation,
            prefixCls: props.prefixCls,
            dropdownStyle: props.dropdownStyle,
            combobox: props.combobox,
            showSearch: props.showSearch,
            options: options,
            empty: empty,
            multiple: multiple,
            disabled: disabled,
            visible: realOpen,
            inputValue: inputValue,
            value: value,
            backfillValue: state._backfillValue,
            firstActiveValue: props.firstActiveValue,

            getPopupContainer: props.getPopupContainer,

            showAction: props.showAction,
            menuItemSelectedIcon: getComponentFromProp(this, 'menuItemSelectedIcon')
          },
          on: {
            'dropdownVisibleChange': this.onDropdownVisibleChange,
            'menuSelect': this.onMenuSelect,
            'menuDeselect': this.onMenuDeselect,
            'popupScroll': popupScroll,
            'popupFocus': this.onPopupFocus,
            'mouseenter': mouseenter,
            'mouseleave': mouseleave
          }
        }, {
          directives: [{
            name: 'ant-ref',
            value: this.saveSelectTriggerRef
          }]
        }, {
          attrs: {
            dropdownRender: props.dropdownRender,
            ariaId: this.$data._ariaId
          }
        }]),
        [h(
          'div',
          babelHelperVueJsxMergeProps([{
            directives: [{
              name: 'ant-ref',
              value: chaining(this.saveRootRef, this.saveSelectionRef)
            }]
          }, {
            style: getStyle(this),
            'class': classnames(rootCls),
            on: {
              'mousedown': this.markMouseDown,
              'mouseup': this.markMouseLeave,
              'mouseout': this.markMouseLeave
            }
          }, extraSelectionProps, {
            on: {
              'blur': this.selectionRefBlur,
              'focus': this.selectionRefFocus,
              'click': this.selectionRefClick,
              'keydown': isMultipleOrTagsOrCombobox(props) ? noop$5 : this.onKeyDown
            }
          }]),
          [h(
            'div',
            selectionProps,
            [ctrlNode, this.renderClear(), this.renderArrow(!!multiple)]
          )]
        )]
      );
    }
  };
  var ProxySelect = wrapWithConnect(Select);

  // based on vc-select 9.2.2
  Select.Option = Option;
  Select.OptGroup = OptGroup;
  ProxySelect.Option = Option;
  ProxySelect.OptGroup = OptGroup;

  var dist = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  var normalViewBox = '0 0 1024 1024';
  var newViewBox = '64 64 896 896';
  var fill = 'fill';
  var outline = 'outline';
  var twotone = 'twotone';
  function getNode(viewBox) {
      var paths = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          paths[_i - 1] = arguments[_i];
      }
      return {
          tag: 'svg',
          attrs: { viewBox: viewBox, focusable: false },
          children: paths.map(function (path) {
              if (Array.isArray(path)) {
                  return {
                      tag: 'path',
                      attrs: {
                          fill: path[0],
                          d: path[1]
                      }
                  };
              }
              return {
                  tag: 'path',
                  attrs: {
                      d: path
                  }
              };
          })
      };
  }
  function getIcon(name, theme, icon) {
      return {
          name: name,
          theme: theme,
          icon: icon
      };
  }
  exports.AccountBookFill = getIcon('account-book', fill, getNode(newViewBox, 'M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zM648.3 426.8l-87.7 161.1h45.7c5.5 0 10 4.5 10 10v21.3c0 5.5-4.5 10-10 10h-63.4v29.7h63.4c5.5 0 10 4.5 10 10v21.3c0 5.5-4.5 10-10 10h-63.4V752c0 5.5-4.5 10-10 10h-41.3c-5.5 0-10-4.5-10-10v-51.8h-63.1c-5.5 0-10-4.5-10-10v-21.3c0-5.5 4.5-10 10-10h63.1v-29.7h-63.1c-5.5 0-10-4.5-10-10v-21.3c0-5.5 4.5-10 10-10h45.2l-88-161.1c-2.6-4.8-.9-10.9 4-13.6 1.5-.8 3.1-1.2 4.8-1.2h46c3.8 0 7.2 2.1 8.9 5.5l72.9 144.3 73.2-144.3a10 10 0 0 1 8.9-5.5h45c5.5 0 10 4.5 10 10 .1 1.7-.3 3.3-1.1 4.8z'));
  exports.AlertFill = getIcon('alert', fill, getNode(newViewBox, 'M512 244c176.18 0 319 142.82 319 319v233a32 32 0 0 1-32 32H225a32 32 0 0 1-32-32V563c0-176.18 142.82-319 319-319zM484 68h56a8 8 0 0 1 8 8v96a8 8 0 0 1-8 8h-56a8 8 0 0 1-8-8V76a8 8 0 0 1 8-8zM177.25 191.66a8 8 0 0 1 11.32 0l67.88 67.88a8 8 0 0 1 0 11.31l-39.6 39.6a8 8 0 0 1-11.31 0l-67.88-67.88a8 8 0 0 1 0-11.31l39.6-39.6zm669.6 0l39.6 39.6a8 8 0 0 1 0 11.3l-67.88 67.9a8 8 0 0 1-11.32 0l-39.6-39.6a8 8 0 0 1 0-11.32l67.89-67.88a8 8 0 0 1 11.31 0zM192 892h640a32 32 0 0 1 32 32v24a8 8 0 0 1-8 8H168a8 8 0 0 1-8-8v-24a32 32 0 0 1 32-32zm148-317v253h64V575h-64z'));
  exports.AlipaySquareFill = getIcon('alipay-square', fill, getNode(newViewBox, 'M308.6 545.7c-19.8 2-57.1 10.7-77.4 28.6-61 53-24.5 150 99 150 71.8 0 143.5-45.7 199.8-119-80.2-38.9-148.1-66.8-221.4-59.6zM880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm29.4 663.2S703 689.4 598.7 639.5C528.8 725.2 438.6 777.3 345 777.3c-158.4 0-212.1-138.1-137.2-229 16.3-19.8 44.2-38.7 87.3-49.4 67.5-16.5 175 10.3 275.7 43.4 18.1-33.3 33.4-69.9 44.7-108.9H305.1V402h160v-56.2H271.3v-31.3h193.8v-80.1s0-13.5 13.7-13.5H557v93.6h191.7v31.3H557.1V402h156.4c-15 61.1-37.7 117.4-66.2 166.8 47.5 17.1 90.1 33.3 121.8 43.9 114.3 38.2 140.2 40.2 140.2 40.2v122.3z'));
  exports.AliwangwangFill = getIcon('aliwangwang', fill, getNode(newViewBox, 'M868.2 377.4c-18.9-45.1-46.3-85.6-81.2-120.6a377.26 377.26 0 0 0-120.5-81.2A375.65 375.65 0 0 0 519 145.8c-41.9 0-82.9 6.7-121.9 20C306 123.3 200.8 120 170.6 120c-2.2 0-7.4 0-9.4.2-11.9.4-22.8 6.5-29.2 16.4-6.5 9.9-7.7 22.4-3.4 33.5l64.3 161.6a378.59 378.59 0 0 0-52.8 193.2c0 51.4 10 101 29.8 147.6 18.9 45 46.2 85.6 81.2 120.5 34.7 34.8 75.4 62.1 120.5 81.2C418.3 894 467.9 904 519 904c51.3 0 100.9-10 147.7-29.8 44.9-18.9 85.5-46.3 120.4-81.2 34.7-34.8 62.1-75.4 81.2-120.6a376.5 376.5 0 0 0 29.8-147.6c-.2-51.2-10.1-100.8-29.9-147.4zm-325.2 79c0 20.4-16.6 37.1-37.1 37.1-20.4 0-37.1-16.7-37.1-37.1v-55.1c0-20.4 16.6-37.1 37.1-37.1 20.4 0 37.1 16.6 37.1 37.1v55.1zm175.2 0c0 20.4-16.6 37.1-37.1 37.1S644 476.8 644 456.4v-55.1c0-20.4 16.7-37.1 37.1-37.1 20.4 0 37.1 16.6 37.1 37.1v55.1z'));
  exports.AlipayCircleFill = getIcon('alipay-circle', fill, getNode(newViewBox, 'M308.6 545.7c-19.8 2-57.1 10.7-77.4 28.6-61 53-24.5 150 99 150 71.8 0 143.5-45.7 199.8-119-80.2-38.9-148.1-66.8-221.4-59.6zm460.5 67c100.1 33.4 154.7 43 166.7 44.8A445.9 445.9 0 0 0 960 512c0-247.4-200.6-448-448-448S64 264.6 64 512s200.6 448 448 448c155.9 0 293.2-79.7 373.5-200.5-75.6-29.8-213.6-85-286.8-120.1-69.9 85.7-160.1 137.8-253.7 137.8-158.4 0-212.1-138.1-137.2-229 16.3-19.8 44.2-38.7 87.3-49.4 67.5-16.5 175 10.3 275.7 43.4 18.1-33.3 33.4-69.9 44.7-108.9H305.1V402h160v-56.2H271.3v-31.3h193.8v-80.1s0-13.5 13.7-13.5H557v93.6h191.7v31.3H557.1V402h156.4c-15 61.1-37.7 117.4-66.2 166.8 47.5 17.1 90.1 33.3 121.8 43.9z'));
  exports.AmazonCircleFill = getIcon('amazon-circle', fill, getNode(newViewBox, 'M485 467.5c-11.6 4.9-20.9 12.2-27.8 22-6.9 9.8-10.4 21.6-10.4 35.5 0 17.8 7.5 31.5 22.4 41.2 14.1 9.1 28.9 11.4 44.4 6.8 17.9-5.2 30-17.9 36.4-38.1 3-9.3 4.5-19.7 4.5-31.3v-50.2c-12.6.4-24.4 1.6-35.5 3.7-11.1 2.1-22.4 5.6-34 10.4zM512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm35.8 262.7c-7.2-10.9-20.1-16.4-38.7-16.4-1.3 0-3 .1-5.3.3-2.2.2-6.6 1.5-12.9 3.7a79.4 79.4 0 0 0-17.9 9.1c-5.5 3.8-11.5 10-18 18.4-6.4 8.5-11.5 18.4-15.3 29.8l-94-8.4c0-12.4 2.4-24.7 7-36.9 4.7-12.2 11.8-23.9 21.4-35 9.6-11.2 21.1-21 34.5-29.4 13.4-8.5 29.6-15.2 48.4-20.3 18.9-5.1 39.1-7.6 60.9-7.6 21.3 0 40.6 2.6 57.8 7.7 17.2 5.2 31.1 11.5 41.4 19.1a117 117 0 0 1 25.9 25.7c6.9 9.6 11.7 18.5 14.4 26.7 2.7 8.2 4 15.7 4 22.8v182.5c0 6.4 1.4 13 4.3 19.8 2.9 6.8 6.3 12.8 10.2 18 3.9 5.2 7.9 9.9 12 14.3 4.1 4.3 7.6 7.7 10.6 9.9l4.1 3.4-72.5 69.4c-8.5-7.7-16.9-15.4-25.2-23.4-8.3-8-14.5-14-18.5-18.1l-6.1-6.2c-2.4-2.3-5-5.7-8-10.2-8.1 12.2-18.5 22.8-31.1 31.8-12.7 9-26.3 15.6-40.7 19.7-14.5 4.1-29.4 6.5-44.7 7.1-15.3.6-30-1.5-43.9-6.5-13.9-5-26.5-11.7-37.6-20.3-11.1-8.6-19.9-20.2-26.5-35-6.6-14.8-9.9-31.5-9.9-50.4 0-17.4 3-33.3 8.9-47.7 6-14.5 13.6-26.5 23-36.1 9.4-9.6 20.7-18.2 34-25.7s26.4-13.4 39.2-17.7c12.8-4.2 26.6-7.8 41.5-10.7 14.9-2.9 27.6-4.8 38.2-5.7 10.6-.9 21.2-1.6 31.8-2v-39.4c0-13.5-2.3-23.5-6.7-30.1zm180.5 379.6c-2.8 3.3-7.5 7.8-14.1 13.5s-16.8 12.7-30.5 21.1c-13.7 8.4-28.8 16-45 22.9-16.3 6.9-36.3 12.9-60.1 18-23.7 5.1-48.2 7.6-73.3 7.6-25.4 0-50.7-3.2-76.1-9.6-25.4-6.4-47.6-14.3-66.8-23.7-19.1-9.4-37.6-20.2-55.1-32.2-17.6-12.1-31.7-22.9-42.4-32.5-10.6-9.6-19.6-18.7-26.8-27.1-1.7-1.9-2.8-3.6-3.2-5.1-.4-1.5-.3-2.8.3-3.7.6-.9 1.5-1.6 2.6-2.2a7.42 7.42 0 0 1 7.4.8c40.9 24.2 72.9 41.3 95.9 51.4 82.9 36.4 168 45.7 255.3 27.9 40.5-8.3 82.1-22.2 124.9-41.8 3.2-1.2 6-1.5 8.3-.9 2.3.6 3.5 2.4 3.5 5.4 0 2.8-1.6 6.3-4.8 10.2zm59.9-29c-1.8 11.1-4.9 21.6-9.1 31.8-7.2 17.1-16.3 30-27.1 38.4-3.6 2.9-6.4 3.8-8.3 2.8-1.9-1-1.9-3.5 0-7.4 4.5-9.3 9.2-21.8 14.2-37.7 5-15.8 5.7-26 2.1-30.5-1.1-1.5-2.7-2.6-5-3.6-2.2-.9-5.1-1.5-8.6-1.9s-6.7-.6-9.4-.8c-2.8-.2-6.5-.2-11.2 0-4.7.2-8 .4-10.1.6a874.4 874.4 0 0 1-17.1 1.5c-1.3.2-2.7.4-4.1.5-1.5.1-2.7.2-3.5.3l-2.7.3c-1 .1-1.7.2-2.2.2h-3.2l-1-.2-.6-.5-.5-.9c-1.3-3.3 3.7-7.4 15-12.4s22.3-8.1 32.9-9.3c9.8-1.5 21.3-1.5 34.5-.3s21.3 3.7 24.3 7.4c2.3 3.5 2.5 10.7.7 21.7z'));
  exports.AndroidFill = getIcon('android', fill, getNode(newViewBox, 'M270.1 741.7c0 23.4 19.1 42.5 42.6 42.5h48.7v120.4c0 30.5 24.5 55.4 54.6 55.4 30.2 0 54.6-24.8 54.6-55.4V784.1h85v120.4c0 30.5 24.5 55.4 54.6 55.4 30.2 0 54.6-24.8 54.6-55.4V784.1h48.7c23.5 0 42.6-19.1 42.6-42.5V346.4h-486v395.3zm357.1-600.1l44.9-65c2.6-3.8 2-8.9-1.5-11.4-3.5-2.4-8.5-1.2-11.1 2.6l-46.6 67.6c-30.7-12.1-64.9-18.8-100.8-18.8-35.9 0-70.1 6.7-100.8 18.8l-46.6-67.5c-2.6-3.8-7.6-5.1-11.1-2.6-3.5 2.4-4.1 7.4-1.5 11.4l44.9 65c-71.4 33.2-121.4 96.1-127.8 169.6h486c-6.6-73.6-56.7-136.5-128-169.7zM409.5 244.1a26.9 26.9 0 1 1 26.9-26.9 26.97 26.97 0 0 1-26.9 26.9zm208.4 0a26.9 26.9 0 1 1 26.9-26.9 26.97 26.97 0 0 1-26.9 26.9zm223.4 100.7c-30.2 0-54.6 24.8-54.6 55.4v216.4c0 30.5 24.5 55.4 54.6 55.4 30.2 0 54.6-24.8 54.6-55.4V400.1c.1-30.6-24.3-55.3-54.6-55.3zm-658.6 0c-30.2 0-54.6 24.8-54.6 55.4v216.4c0 30.5 24.5 55.4 54.6 55.4 30.2 0 54.6-24.8 54.6-55.4V400.1c0-30.6-24.5-55.3-54.6-55.3z'));
  exports.AmazonSquareFill = getIcon('amazon-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM547.8 326.7c-7.2-10.9-20.1-16.4-38.7-16.4-1.3 0-3 .1-5.3.3-2.2.2-6.6 1.5-12.9 3.7a79.4 79.4 0 0 0-17.9 9.1c-5.5 3.8-11.5 10-18 18.4-6.4 8.5-11.5 18.4-15.3 29.8l-94-8.4c0-12.4 2.4-24.7 7-36.9s11.8-23.9 21.4-35c9.6-11.2 21.1-21 34.5-29.4 13.4-8.5 29.6-15.2 48.4-20.3 18.9-5.1 39.1-7.6 60.9-7.6 21.3 0 40.6 2.6 57.8 7.7 17.2 5.2 31.1 11.5 41.4 19.1a117 117 0 0 1 25.9 25.7c6.9 9.6 11.7 18.5 14.4 26.7 2.7 8.2 4 15.7 4 22.8v182.5c0 6.4 1.4 13 4.3 19.8 2.9 6.8 6.3 12.8 10.2 18 3.9 5.2 7.9 9.9 12 14.3 4.1 4.3 7.6 7.7 10.6 9.9l4.1 3.4-72.5 69.4c-8.5-7.7-16.9-15.4-25.2-23.4-8.3-8-14.5-14-18.5-18.1l-6.1-6.2c-2.4-2.3-5-5.7-8-10.2-8.1 12.2-18.5 22.8-31.1 31.8-12.7 9-26.3 15.6-40.7 19.7-14.5 4.1-29.4 6.5-44.7 7.1-15.3.6-30-1.5-43.9-6.5-13.9-5-26.5-11.7-37.6-20.3-11.1-8.6-19.9-20.2-26.5-35-6.6-14.8-9.9-31.5-9.9-50.4 0-17.4 3-33.3 8.9-47.7 6-14.5 13.6-26.5 23-36.1 9.4-9.6 20.7-18.2 34-25.7s26.4-13.4 39.2-17.7c12.8-4.2 26.6-7.8 41.5-10.7 14.9-2.9 27.6-4.8 38.2-5.7 10.6-.9 21.2-1.6 31.8-2v-39.4c0-13.5-2.3-23.5-6.7-30.1zm180.5 379.6c-2.8 3.3-7.5 7.8-14.1 13.5s-16.8 12.7-30.5 21.1c-13.7 8.4-28.8 16-45 22.9-16.3 6.9-36.3 12.9-60.1 18-23.7 5.1-48.2 7.6-73.3 7.6-25.4 0-50.7-3.2-76.1-9.6-25.4-6.4-47.6-14.3-66.8-23.7-19.1-9.4-37.6-20.2-55.1-32.2-17.6-12.1-31.7-22.9-42.4-32.5-10.6-9.6-19.6-18.7-26.8-27.1-1.7-1.9-2.8-3.6-3.2-5.1-.4-1.5-.3-2.8.3-3.7.6-.9 1.5-1.6 2.6-2.2a7.42 7.42 0 0 1 7.4.8c40.9 24.2 72.9 41.3 95.9 51.4 82.9 36.4 168 45.7 255.3 27.9 40.5-8.3 82.1-22.2 124.9-41.8 3.2-1.2 6-1.5 8.3-.9 2.3.6 3.5 2.4 3.5 5.4 0 2.8-1.6 6.3-4.8 10.2zm59.9-29c-1.8 11.1-4.9 21.6-9.1 31.8-7.2 17.1-16.3 30-27.1 38.4-3.6 2.9-6.4 3.8-8.3 2.8-1.9-1-1.9-3.5 0-7.4 4.5-9.3 9.2-21.8 14.2-37.7 5-15.8 5.7-26 2.1-30.5-1.1-1.5-2.7-2.6-5-3.6-2.2-.9-5.1-1.5-8.6-1.9s-6.7-.6-9.4-.8c-2.8-.2-6.5-.2-11.2 0-4.7.2-8 .4-10.1.6a874.4 874.4 0 0 1-17.1 1.5c-1.3.2-2.7.4-4.1.5-1.5.1-2.7.2-3.5.3l-2.7.3c-1 .1-1.7.2-2.2.2h-3.2l-1-.2-.6-.5-.5-.9c-1.3-3.3 3.7-7.4 15-12.4s22.3-8.1 32.9-9.3c9.8-1.5 21.3-1.5 34.5-.3s21.3 3.7 24.3 7.4c2.3 3.5 2.5 10.7.7 21.7zM485 467.5c-11.6 4.9-20.9 12.2-27.8 22-6.9 9.8-10.4 21.6-10.4 35.5 0 17.8 7.5 31.5 22.4 41.2 14.1 9.1 28.9 11.4 44.4 6.8 17.9-5.2 30-17.9 36.4-38.1 3-9.3 4.5-19.7 4.5-31.3v-50.2c-12.6.4-24.4 1.6-35.5 3.7-11.1 2.1-22.4 5.6-34 10.4z'));
  exports.ApiFill = getIcon('api', fill, getNode(newViewBox, 'M917.7 148.8l-42.4-42.4c-1.6-1.6-3.6-2.3-5.7-2.3s-4.1.8-5.7 2.3l-76.1 76.1a199.27 199.27 0 0 0-112.1-34.3c-51.2 0-102.4 19.5-141.5 58.6L432.3 308.7a8.03 8.03 0 0 0 0 11.3L704 591.7c1.6 1.6 3.6 2.3 5.7 2.3 2 0 4.1-.8 5.7-2.3l101.9-101.9c68.9-69 77-175.7 24.3-253.5l76.1-76.1c3.1-3.2 3.1-8.3 0-11.4zM578.9 546.7a8.03 8.03 0 0 0-11.3 0L501 613.3 410.7 523l66.7-66.7c3.1-3.1 3.1-8.2 0-11.3L441 408.6a8.03 8.03 0 0 0-11.3 0L363 475.3l-43-43a7.85 7.85 0 0 0-5.7-2.3c-2 0-4.1.8-5.7 2.3L206.8 534.2c-68.9 68.9-77 175.7-24.3 253.5l-76.1 76.1a8.03 8.03 0 0 0 0 11.3l42.4 42.4c1.6 1.6 3.6 2.3 5.7 2.3s4.1-.8 5.7-2.3l76.1-76.1c33.7 22.9 72.9 34.3 112.1 34.3 51.2 0 102.4-19.5 141.5-58.6l101.9-101.9c3.1-3.1 3.1-8.2 0-11.3l-43-43 66.7-66.7c3.1-3.1 3.1-8.2 0-11.3l-36.6-36.2z'));
  exports.AppstoreFill = getIcon('appstore', fill, getNode(newViewBox, 'M864 144H560c-8.8 0-16 7.2-16 16v304c0 8.8 7.2 16 16 16h304c8.8 0 16-7.2 16-16V160c0-8.8-7.2-16-16-16zm0 400H560c-8.8 0-16 7.2-16 16v304c0 8.8 7.2 16 16 16h304c8.8 0 16-7.2 16-16V560c0-8.8-7.2-16-16-16zM464 144H160c-8.8 0-16 7.2-16 16v304c0 8.8 7.2 16 16 16h304c8.8 0 16-7.2 16-16V160c0-8.8-7.2-16-16-16zm0 400H160c-8.8 0-16 7.2-16 16v304c0 8.8 7.2 16 16 16h304c8.8 0 16-7.2 16-16V560c0-8.8-7.2-16-16-16z'));
  exports.AudioFill = getIcon('audio', fill, getNode(newViewBox, 'M512 624c93.9 0 170-75.2 170-168V232c0-92.8-76.1-168-170-168s-170 75.2-170 168v224c0 92.8 76.1 168 170 168zm330-170c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8 0 140.3-113.7 254-254 254S258 594.3 258 454c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8 0 168.7 126.6 307.9 290 327.6V884H326.7c-13.7 0-24.7 14.3-24.7 32v36c0 4.4 2.8 8 6.2 8h407.6c3.4 0 6.2-3.6 6.2-8v-36c0-17.7-11-32-24.7-32H548V782.1c165.3-18 294-158 294-328.1z'));
  exports.AppleFill = getIcon('apple', fill, getNode(newViewBox, 'M747.4 535.7c-.4-68.2 30.5-119.6 92.9-157.5-34.9-50-87.7-77.5-157.3-82.8-65.9-5.2-138 38.4-164.4 38.4-27.9 0-91.7-36.6-141.9-36.6C273.1 298.8 163 379.8 163 544.6c0 48.7 8.9 99 26.7 150.8 23.8 68.2 109.6 235.3 199.1 232.6 46.8-1.1 79.9-33.2 140.8-33.2 59.1 0 89.7 33.2 141.9 33.2 90.3-1.3 167.9-153.2 190.5-221.6-121.1-57.1-114.6-167.2-114.6-170.7zm-105.1-305c50.7-60.2 46.1-115 44.6-134.7-44.8 2.6-96.6 30.5-126.1 64.8-32.5 36.8-51.6 82.3-47.5 133.6 48.4 3.7 92.6-21.2 129-63.7z'));
  exports.BackwardFill = getIcon('backward', fill, getNode(normalViewBox, 'M485.6 249.9L198.2 498c-8.3 7.1-8.3 20.8 0 27.9l287.4 248.2c10.7 9.2 26.4.9 26.4-14V263.8c0-14.8-15.7-23.2-26.4-13.9zm320 0L518.2 498a18.6 18.6 0 0 0-6.2 14c0 5.2 2.1 10.4 6.2 14l287.4 248.2c10.7 9.2 26.4.9 26.4-14V263.8c0-14.8-15.7-23.2-26.4-13.9z'));
  exports.BankFill = getIcon('bank', fill, getNode(newViewBox, 'M894 462c30.9 0 43.8-39.7 18.7-58L530.8 126.2a31.81 31.81 0 0 0-37.6 0L111.3 404c-25.1 18.2-12.2 58 18.8 58H192v374h-72c-4.4 0-8 3.6-8 8v52c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-52c0-4.4-3.6-8-8-8h-72V462h62zM381 836H264V462h117v374zm189 0H453V462h117v374zm190 0H642V462h118v374z'));
  exports.BehanceCircleFill = getIcon('behance-circle', fill, getNode(newViewBox, 'M420.3 470.3c8.7-6.3 12.9-16.7 12.9-31 .3-6.8-1.1-13.5-4.1-19.6-2.7-4.9-6.7-9-11.6-11.9a44.8 44.8 0 0 0-16.6-6c-6.4-1.2-12.9-1.8-19.3-1.7h-70.3v79.7h76.1c13.1.1 24.2-3.1 32.9-9.5zm11.8 72c-9.8-7.5-22.9-11.2-39.2-11.2h-81.8v94h80.2c7.5 0 14.4-.7 21.1-2.1a50.5 50.5 0 0 0 17.8-7.2c5.1-3.3 9.2-7.8 12.3-13.6 3-5.8 4.5-13.2 4.5-22.1 0-17.7-5-30.2-14.9-37.8zM512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm86.5 286.9h138.4v33.7H598.5v-33.7zM512 628.8a89.52 89.52 0 0 1-27 31c-11.8 8.2-24.9 14.2-38.8 17.7a167.4 167.4 0 0 1-44.6 5.7H236V342.1h161c16.3 0 31.1 1.5 44.6 4.3 13.4 2.8 24.8 7.6 34.4 14.1 9.5 6.5 17 15.2 22.3 26 5.2 10.7 7.9 24.1 7.9 40 0 17.2-3.9 31.4-11.7 42.9-7.9 11.5-19.3 20.8-34.8 28.1 21.1 6 36.6 16.7 46.8 31.7 10.4 15.2 15.5 33.4 15.5 54.8 0 17.4-3.3 32.3-10 44.8zM790.8 576H612.4c0 19.4 6.7 38 16.8 48 10.2 9.9 24.8 14.9 43.9 14.9 13.8 0 25.5-3.5 35.5-10.4 9.9-6.9 15.9-14.2 18.1-21.8h59.8c-9.6 29.7-24.2 50.9-44 63.7-19.6 12.8-43.6 19.2-71.5 19.2-19.5 0-37-3.2-52.7-9.3-15.1-5.9-28.7-14.9-39.9-26.5a121.2 121.2 0 0 1-25.1-41.2c-6.1-16.9-9.1-34.7-8.9-52.6 0-18.5 3.1-35.7 9.1-51.7 11.5-31.1 35.4-56 65.9-68.9 16.3-6.8 33.8-10.2 51.5-10 21 0 39.2 4 55 12.2a111.6 111.6 0 0 1 38.6 32.8c10.1 13.7 17.2 29.3 21.7 46.9 4.3 17.3 5.8 35.5 4.6 54.7zm-122-95.6c-10.8 0-19.9 1.9-26.9 5.6-7 3.7-12.8 8.3-17.2 13.6a48.4 48.4 0 0 0-9.1 17.4c-1.6 5.3-2.7 10.7-3.1 16.2H723c-1.6-17.3-7.6-30.1-15.6-39.1-8.4-8.9-21.9-13.7-38.6-13.7z'));
  exports.BellFill = getIcon('bell', fill, getNode(newViewBox, 'M816 768h-24V428c0-141.1-104.3-257.8-240-277.2V112c0-22.1-17.9-40-40-40s-40 17.9-40 40v38.8C336.3 170.2 232 286.9 232 428v340h-24c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h216c0 61.8 50.2 112 112 112s112-50.2 112-112h216c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM512 888c-26.5 0-48-21.5-48-48h96c0 26.5-21.5 48-48 48z'));
  exports.BehanceSquareFill = getIcon('behance-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM598.5 350.9h138.4v33.7H598.5v-33.7zM512 628.8a89.52 89.52 0 0 1-27 31c-11.8 8.2-24.9 14.2-38.8 17.7a167.4 167.4 0 0 1-44.6 5.7H236V342.1h161c16.3 0 31.1 1.5 44.6 4.3 13.4 2.8 24.8 7.6 34.4 14.1 9.5 6.5 17 15.2 22.3 26 5.2 10.7 7.9 24.1 7.9 40 0 17.2-3.9 31.4-11.7 42.9-7.9 11.5-19.3 20.8-34.8 28.1 21.1 6 36.6 16.7 46.8 31.7 10.4 15.2 15.5 33.4 15.5 54.8 0 17.4-3.3 32.3-10 44.8zM790.8 576H612.4c0 19.4 6.7 38 16.8 48 10.2 9.9 24.8 14.9 43.9 14.9 13.8 0 25.5-3.5 35.5-10.4 9.9-6.9 15.9-14.2 18.1-21.8h59.8c-9.6 29.7-24.2 50.9-44 63.7-19.6 12.8-43.6 19.2-71.5 19.2-19.5 0-37-3.2-52.7-9.3-15.1-5.9-28.7-14.9-39.9-26.5a121.2 121.2 0 0 1-25.1-41.2c-6.1-16.9-9.1-34.7-8.9-52.6 0-18.5 3.1-35.7 9.1-51.7 11.5-31.1 35.4-56 65.9-68.9 16.3-6.8 33.8-10.2 51.5-10 21 0 39.2 4 55 12.2a111.6 111.6 0 0 1 38.6 32.8c10.1 13.7 17.2 29.3 21.7 46.9 4.3 17.3 5.8 35.5 4.6 54.7zm-122-95.6c-10.8 0-19.9 1.9-26.9 5.6-7 3.7-12.8 8.3-17.2 13.6a48.4 48.4 0 0 0-9.1 17.4c-1.6 5.3-2.7 10.7-3.1 16.2H723c-1.6-17.3-7.6-30.1-15.6-39.1-8.4-8.9-21.9-13.7-38.6-13.7zm-248.5-10.1c8.7-6.3 12.9-16.7 12.9-31 .3-6.8-1.1-13.5-4.1-19.6-2.7-4.9-6.7-9-11.6-11.9a44.8 44.8 0 0 0-16.6-6c-6.4-1.2-12.9-1.8-19.3-1.7h-70.3v79.7h76.1c13.1.1 24.2-3.1 32.9-9.5zm11.8 72c-9.8-7.5-22.9-11.2-39.2-11.2h-81.8v94h80.2c7.5 0 14.4-.7 21.1-2.1s12.7-3.8 17.8-7.2c5.1-3.3 9.2-7.8 12.3-13.6 3-5.8 4.5-13.2 4.5-22.1 0-17.7-5-30.2-14.9-37.8z'));
  exports.BookFill = getIcon('book', fill, getNode(newViewBox, 'M832 64H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zM668 345.9L621.5 312 572 347.4V124h96v221.9z'));
  exports.BoxPlotFill = getIcon('box-plot', fill, getNode(newViewBox, 'M952 224h-52c-4.4 0-8 3.6-8 8v248h-92V304c0-4.4-3.6-8-8-8H448v432h344c4.4 0 8-3.6 8-8V548h92v244c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8V232c0-4.4-3.6-8-8-8zm-728 80v176h-92V232c0-4.4-3.6-8-8-8H72c-4.4 0-8 3.6-8 8v560c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8V548h92v172c0 4.4 3.6 8 8 8h152V296H232c-4.4 0-8 3.6-8 8z'));
  exports.BugFill = getIcon('bug', fill, getNode(newViewBox, 'M304 280h416c4.4 0 8-3.6 8-8 0-40-8.8-76.7-25.9-108.1a184.31 184.31 0 0 0-74-74C596.7 72.8 560 64 520 64h-16c-40 0-76.7 8.8-108.1 25.9a184.31 184.31 0 0 0-74 74C304.8 195.3 296 232 296 272c0 4.4 3.6 8 8 8z', 'M940 512H792V412c76.8 0 139-62.2 139-139 0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8a63 63 0 0 1-63 63H232a63 63 0 0 1-63-63c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8 0 76.8 62.2 139 139 139v100H84c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h148v96c0 6.5.2 13 .7 19.3C164.1 728.6 116 796.7 116 876c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8 0-44.2 23.9-82.9 59.6-103.7a273 273 0 0 0 22.7 49c24.3 41.5 59 76.2 100.5 100.5 28.9 16.9 61 28.8 95.3 34.5 4.4 0 8-3.6 8-8V484c0-4.4 3.6-8 8-8h60c4.4 0 8 3.6 8 8v464.2c0 4.4 3.6 8 8 8 34.3-5.7 66.4-17.6 95.3-34.5a281.38 281.38 0 0 0 123.2-149.5A120.4 120.4 0 0 1 836 876c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8 0-79.3-48.1-147.4-116.7-176.7.4-6.4.7-12.8.7-19.3v-96h148c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.CalculatorFill = getIcon('calculator', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM440.2 765h-50.8c-2.2 0-4.5-1.1-5.9-2.9L348 718.6l-35.5 43.5a7.38 7.38 0 0 1-5.9 2.9h-50.8c-6.6 0-10.2-7.9-5.8-13.1l62.7-76.8-61.2-74.9c-4.3-5.2-.7-13.1 5.9-13.1h50.9c2.2 0 4.5 1.1 5.9 2.9l34 41.6 34-41.6c1.5-1.9 3.6-2.9 5.9-2.9h50.8c6.6 0 10.2 7.9 5.9 13.1L383.5 675l62.7 76.8c4.2 5.3.6 13.2-6 13.2zm7.8-382c0 2.2-1.4 4-3.2 4H376v68.7c0 1.9-1.8 3.3-4 3.3h-48c-2.2 0-4-1.4-4-3.2V387h-68.8c-1.8 0-3.2-1.8-3.2-4v-48c0-2.2 1.4-4 3.2-4H320v-68.8c0-1.8 1.8-3.2 4-3.2h48c2.2 0 4 1.4 4 3.2V331h68.7c1.9 0 3.3 1.8 3.3 4v48zm328 369c0 2.2-1.4 4-3.2 4H579.2c-1.8 0-3.2-1.8-3.2-4v-48c0-2.2 1.4-4 3.2-4h193.5c1.9 0 3.3 1.8 3.3 4v48zm0-104c0 2.2-1.4 4-3.2 4H579.2c-1.8 0-3.2-1.8-3.2-4v-48c0-2.2 1.4-4 3.2-4h193.5c1.9 0 3.3 1.8 3.3 4v48zm0-265c0 2.2-1.4 4-3.2 4H579.2c-1.8 0-3.2-1.8-3.2-4v-48c0-2.2 1.4-4 3.2-4h193.5c1.9 0 3.3 1.8 3.3 4v48z'));
  exports.BulbFill = getIcon('bulb', fill, getNode(newViewBox, 'M348 676.1C250 619.4 184 513.4 184 392c0-181.1 146.9-328 328-328s328 146.9 328 328c0 121.4-66 227.4-164 284.1V792c0 17.7-14.3 32-32 32H380c-17.7 0-32-14.3-32-32V676.1zM392 888h240c4.4 0 8 3.6 8 8v32c0 17.7-14.3 32-32 32H416c-17.7 0-32-14.3-32-32v-32c0-4.4 3.6-8 8-8z'));
  exports.BuildFill = getIcon('build', fill, getNode(newViewBox, 'M916 210H376c-17.7 0-32 14.3-32 32v236H108c-17.7 0-32 14.3-32 32v272c0 17.7 14.3 32 32 32h540c17.7 0 32-14.3 32-32V546h236c17.7 0 32-14.3 32-32V242c0-17.7-14.3-32-32-32zM612 746H412V546h200v200zm268-268H680V278h200v200z'));
  exports.CalendarFill = getIcon('calendar', fill, getNode(newViewBox, 'M112 880c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V460H112v420zm768-696H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v176h800V216c0-17.7-14.3-32-32-32z'));
  exports.CameraFill = getIcon('camera', fill, getNode(newViewBox, 'M864 260H728l-32.4-90.8a32.07 32.07 0 0 0-30.2-21.2H358.6c-13.5 0-25.6 8.5-30.1 21.2L296 260H160c-44.2 0-80 35.8-80 80v456c0 44.2 35.8 80 80 80h704c44.2 0 80-35.8 80-80V340c0-44.2-35.8-80-80-80zM512 716c-88.4 0-160-71.6-160-160s71.6-160 160-160 160 71.6 160 160-71.6 160-160 160zm-96-160a96 96 0 1 0 192 0 96 96 0 1 0-192 0z'));
  exports.CarFill = getIcon('car', fill, getNode(newViewBox, 'M959 413.4L935.3 372a8 8 0 0 0-10.9-2.9l-50.7 29.6-78.3-216.2a63.9 63.9 0 0 0-60.9-44.4H301.2c-34.7 0-65.5 22.4-76.2 55.5l-74.6 205.2-50.8-29.6a8 8 0 0 0-10.9 2.9L65 413.4c-2.2 3.8-.9 8.6 2.9 10.8l60.4 35.2-14.5 40c-1.2 3.2-1.8 6.6-1.8 10v348.2c0 15.7 11.8 28.4 26.3 28.4h67.6c12.3 0 23-9.3 25.6-22.3l7.7-37.7h545.6l7.7 37.7c2.7 13 13.3 22.3 25.6 22.3h67.6c14.5 0 26.3-12.7 26.3-28.4V509.4c0-3.4-.6-6.8-1.8-10l-14.5-40 60.3-35.2a8 8 0 0 0 3-10.8zM264 621c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40zm388 75c0 4.4-3.6 8-8 8H380c-4.4 0-8-3.6-8-8v-84c0-4.4 3.6-8 8-8h40c4.4 0 8 3.6 8 8v36h168v-36c0-4.4 3.6-8 8-8h40c4.4 0 8 3.6 8 8v84zm108-75c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40zM220 418l72.7-199.9.5-1.3.4-1.3c1.1-3.3 4.1-5.5 7.6-5.5h427.6l75.4 208H220z'));
  exports.CaretDownFill = getIcon('caret-down', fill, getNode(normalViewBox, 'M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z'));
  exports.CaretLeftFill = getIcon('caret-left', fill, getNode(normalViewBox, 'M689 165.1L308.2 493.5c-10.9 9.4-10.9 27.5 0 37L689 858.9c14.2 12.2 35 1.2 35-18.5V183.6c0-19.7-20.8-30.7-35-18.5z'));
  exports.CaretRightFill = getIcon('caret-right', fill, getNode(normalViewBox, 'M715.8 493.5L335 165.1c-14.2-12.2-35-1.2-35 18.5v656.8c0 19.7 20.8 30.7 35 18.5l380.8-328.4c10.9-9.4 10.9-27.6 0-37z'));
  exports.CarryOutFill = getIcon('carry-out', fill, getNode(newViewBox, 'M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zM694.5 432.7L481.9 725.4a16.1 16.1 0 0 1-26 0l-126.4-174c-3.8-5.3 0-12.7 6.5-12.7h55.2c5.1 0 10 2.5 13 6.6l64.7 89 150.9-207.8c3-4.1 7.8-6.6 13-6.6H688c6.5.1 10.3 7.5 6.5 12.8z'));
  exports.CaretUpFill = getIcon('caret-up', fill, getNode(normalViewBox, 'M858.9 689L530.5 308.2c-9.4-10.9-27.5-10.9-37 0L165.1 689c-12.2 14.2-1.2 35 18.5 35h656.8c19.7 0 30.7-20.8 18.5-35z'));
  exports.CheckCircleFill = getIcon('check-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 0 1-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z'));
  exports.CheckSquareFill = getIcon('check-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM695.5 365.7l-210.6 292a31.8 31.8 0 0 1-51.7 0L308.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H689c6.5 0 10.3 7.4 6.5 12.7z'));
  exports.ChromeFill = getIcon('chrome', fill, getNode(newViewBox, 'M371.8 512c0 77.5 62.7 140.2 140.2 140.2S652.2 589.5 652.2 512 589.5 371.8 512 371.8 371.8 434.4 371.8 512zM900 362.4l-234.3 12.1c63.6 74.3 64.6 181.5 11.1 263.7l-188 289.2c78 4.2 158.4-12.9 231.2-55.2 180-104 253-322.1 180-509.8zM320.3 591.9L163.8 284.1A415.35 415.35 0 0 0 96 512c0 208 152.3 380.3 351.4 410.8l106.9-209.4c-96.6 18.2-189.9-34.8-234-121.5zm218.5-285.5l344.4 18.1C848 254.7 792.6 194 719.8 151.7 653.9 113.6 581.5 95.5 510.5 96c-122.5.5-242.2 55.2-322.1 154.5l128.2 196.9c32-91.9 124.8-146.7 222.2-141z'));
  exports.CiCircleFill = getIcon('ci-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-63.6 656c-103 0-162.4-68.6-162.4-182.6v-49C286 373.5 345.4 304 448.3 304c88.3 0 152.3 56.9 152.3 138.1 0 2.4-2 4.4-4.4 4.4h-52.6c-4.2 0-7.6-3.2-8-7.4-4-46.1-37.6-77.6-87-77.6-61.1 0-95.6 45.4-95.6 126.9v49.3c0 80.3 34.5 125.1 95.6 125.1 49.3 0 82.8-29.5 87-72.4.4-4.1 3.8-7.3 8-7.3h52.7c2.4 0 4.4 2 4.4 4.4 0 77.4-64.3 132.5-152.3 132.5zM738 704.1c0 4.4-3.6 8-8 8h-50.4c-4.4 0-8-3.6-8-8V319.9c0-4.4 3.6-8 8-8H730c4.4 0 8 3.6 8 8v384.2z'));
  exports.ClockCircleFill = getIcon('clock-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm176.5 585.7l-28.6 39a7.99 7.99 0 0 1-11.2 1.7L483.3 569.8a7.92 7.92 0 0 1-3.3-6.5V288c0-4.4 3.6-8 8-8h48.1c4.4 0 8 3.6 8 8v247.5l142.6 103.1c3.6 2.5 4.4 7.5 1.8 11.1z'));
  exports.CloseCircleFill = getIcon('close-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 0 1-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z'));
  exports.CloudFill = getIcon('cloud', fill, getNode(newViewBox, 'M811.4 418.7C765.6 297.9 648.9 212 512.2 212S258.8 297.8 213 418.6C127.3 441.1 64 519.1 64 612c0 110.5 89.5 200 199.9 200h496.2C870.5 812 960 722.5 960 612c0-92.7-63.1-170.7-148.6-193.3z'));
  exports.CloseSquareFill = getIcon('close-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM676.1 657.9c4.4 5.2.7 13.1-6.1 13.1h-58.9c-4.7 0-9.2-2.1-12.3-5.7L512 561.8l-86.8 103.5c-3 3.6-7.5 5.7-12.3 5.7H354c-6.8 0-10.5-7.9-6.1-13.1L470.2 512 347.9 366.1A7.95 7.95 0 0 1 354 353h58.9c4.7 0 9.2 2.1 12.3 5.7L512 462.2l86.8-103.5c3-3.6 7.5-5.7 12.3-5.7H670c6.8 0 10.5 7.9 6.1 13.1L553.8 512l122.3 145.9z'));
  exports.CodeSandboxSquareFill = getIcon('code-sandbox-square', fill, getNode(newViewBox, 'M307.9 536.7l87.6 49.9V681l96.7 55.9V524.8L307.9 418.4zM880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM755.7 653.2L512 794 268.3 653.2V371.8l110-63.6-.4-.2h.2L512 231l134 77h-.2l-.3.2 110.1 63.6v281.4zm-223.9 83.7l97.3-56.2v-94.1l87-49.5V418.5L531.8 525zm-20-352L418 331l-91.1 52.6 185.2 107 185.2-106.9-91.4-52.8z'));
  exports.CodeSandboxCircleFill = getIcon('code-sandbox-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm243.7 589.2L512 794 268.3 653.2V371.8l110-63.6-.4-.2h.2L512 231l134 77h-.2l-.3.2 110.1 63.6v281.4zM307.9 536.7l87.6 49.9V681l96.7 55.9V524.8L307.9 418.4zm203.9-151.8L418 331l-91.1 52.6 185.2 107 185.2-106.9-91.4-52.8zm20 352l97.3-56.2v-94.1l87-49.5V418.5L531.8 525z'));
  exports.CodeFill = getIcon('code', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM513.1 518.1l-192 161c-5.2 4.4-13.1.7-13.1-6.1v-62.7c0-2.3 1.1-4.6 2.9-6.1L420.7 512l-109.8-92.2a7.63 7.63 0 0 1-2.9-6.1V351c0-6.8 7.9-10.5 13.1-6.1l192 160.9c3.9 3.2 3.9 9.1 0 12.3zM716 673c0 4.4-3.4 8-7.5 8h-185c-4.1 0-7.5-3.6-7.5-8v-48c0-4.4 3.4-8 7.5-8h185c4.1 0 7.5 3.6 7.5 8v48z'));
  exports.CompassFill = getIcon('compass', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zM327.3 702.4c-2 .9-4.4 0-5.3-2.1-.4-1-.4-2.2 0-3.2l98.7-225.5 132.1 132.1-225.5 98.7zm375.1-375.1l-98.7 225.5-132.1-132.1L697.1 322c2-.9 4.4 0 5.3 2.1.4 1 .4 2.1 0 3.2z'));
  exports.CodepenCircleFill = getIcon('codepen-circle', fill, getNode(newViewBox, 'M488.1 414.7V303.4L300.9 428l83.6 55.8zm254.1 137.7v-79.8l-59.8 39.9zM512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm278 533c0 1.1-.1 2.1-.2 3.1 0 .4-.1.7-.2 1a14.16 14.16 0 0 1-.8 3.2c-.2.6-.4 1.2-.6 1.7-.2.4-.4.8-.5 1.2-.3.5-.5 1.1-.8 1.6-.2.4-.4.7-.7 1.1-.3.5-.7 1-1 1.5-.3.4-.5.7-.8 1-.4.4-.8.9-1.2 1.3-.3.3-.6.6-1 .9-.4.4-.9.8-1.4 1.1-.4.3-.7.6-1.1.8-.1.1-.3.2-.4.3L525.2 786c-4 2.7-8.6 4-13.2 4-4.7 0-9.3-1.4-13.3-4L244.6 616.9c-.1-.1-.3-.2-.4-.3l-1.1-.8c-.5-.4-.9-.7-1.3-1.1-.3-.3-.6-.6-1-.9-.4-.4-.8-.8-1.2-1.3a7 7 0 0 1-.8-1c-.4-.5-.7-1-1-1.5-.2-.4-.5-.7-.7-1.1-.3-.5-.6-1.1-.8-1.6-.2-.4-.4-.8-.5-1.2-.2-.6-.4-1.2-.6-1.7-.1-.4-.3-.8-.4-1.2-.2-.7-.3-1.3-.4-2-.1-.3-.1-.7-.2-1-.1-1-.2-2.1-.2-3.1V427.9c0-1 .1-2.1.2-3.1.1-.3.1-.7.2-1a14.16 14.16 0 0 1 .8-3.2c.2-.6.4-1.2.6-1.7.2-.4.4-.8.5-1.2.2-.5.5-1.1.8-1.6.2-.4.4-.7.7-1.1.6-.9 1.2-1.7 1.8-2.5.4-.4.8-.9 1.2-1.3.3-.3.6-.6 1-.9.4-.4.9-.8 1.3-1.1.4-.3.7-.6 1.1-.8.1-.1.3-.2.4-.3L498.7 239c8-5.3 18.5-5.3 26.5 0l254.1 169.1c.1.1.3.2.4.3l1.1.8 1.4 1.1c.3.3.6.6 1 .9.4.4.8.8 1.2 1.3.7.8 1.3 1.6 1.8 2.5.2.4.5.7.7 1.1.3.5.6 1 .8 1.6.2.4.4.8.5 1.2.2.6.4 1.2.6 1.7.1.4.3.8.4 1.2.2.7.3 1.3.4 2 .1.3.1.7.2 1 .1 1 .2 2.1.2 3.1V597zm-254.1 13.3v111.3L723.1 597l-83.6-55.8zM281.8 472.6v79.8l59.8-39.9zM512 456.1l-84.5 56.4 84.5 56.4 84.5-56.4zM723.1 428L535.9 303.4v111.3l103.6 69.1zM384.5 541.2L300.9 597l187.2 124.6V610.3l-103.6-69.1z'));
  exports.CodepenSquareFill = getIcon('codepen-square', fill, getNode(newViewBox, 'M723.1 428L535.9 303.4v111.3l103.6 69.1zM512 456.1l-84.5 56.4 84.5 56.4 84.5-56.4zm23.9 154.2v111.3L723.1 597l-83.6-55.8zm-151.4-69.1L300.9 597l187.2 124.6V610.3l-103.6-69.1zM880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-90 485c0 1.1-.1 2.1-.2 3.1 0 .4-.1.7-.2 1a14.16 14.16 0 0 1-.8 3.2c-.2.6-.4 1.2-.6 1.7-.2.4-.4.8-.5 1.2-.3.5-.5 1.1-.8 1.6-.2.4-.4.7-.7 1.1-.3.5-.7 1-1 1.5-.3.4-.5.7-.8 1-.4.4-.8.9-1.2 1.3-.3.3-.6.6-1 .9-.4.4-.9.8-1.4 1.1-.4.3-.7.6-1.1.8-.1.1-.3.2-.4.3L525.2 786c-4 2.7-8.6 4-13.2 4-4.7 0-9.3-1.4-13.3-4L244.6 616.9c-.1-.1-.3-.2-.4-.3l-1.1-.8c-.5-.4-.9-.7-1.3-1.1-.3-.3-.6-.6-1-.9-.4-.4-.8-.8-1.2-1.3a7 7 0 0 1-.8-1c-.4-.5-.7-1-1-1.5-.2-.4-.5-.7-.7-1.1-.3-.5-.6-1.1-.8-1.6-.2-.4-.4-.8-.5-1.2-.2-.6-.4-1.2-.6-1.7-.1-.4-.3-.8-.4-1.2-.2-.7-.3-1.3-.4-2-.1-.3-.1-.7-.2-1-.1-1-.2-2.1-.2-3.1V427.9c0-1 .1-2.1.2-3.1.1-.3.1-.7.2-1a14.16 14.16 0 0 1 .8-3.2c.2-.6.4-1.2.6-1.7.2-.4.4-.8.5-1.2.2-.5.5-1.1.8-1.6.2-.4.4-.7.7-1.1.6-.9 1.2-1.7 1.8-2.5.4-.4.8-.9 1.2-1.3.3-.3.6-.6 1-.9.4-.4.9-.8 1.3-1.1.4-.3.7-.6 1.1-.8.1-.1.3-.2.4-.3L498.7 239c8-5.3 18.5-5.3 26.5 0l254.1 169.1c.1.1.3.2.4.3l1.1.8 1.4 1.1c.3.3.6.6 1 .9.4.4.8.8 1.2 1.3.7.8 1.3 1.6 1.8 2.5.2.4.5.7.7 1.1.3.5.6 1 .8 1.6.2.4.4.8.5 1.2.2.6.4 1.2.6 1.7.1.4.3.8.4 1.2.2.7.3 1.3.4 2 .1.3.1.7.2 1 .1 1 .2 2.1.2 3.1V597zm-47.8-44.6v-79.8l-59.8 39.9zm-460.4-79.8v79.8l59.8-39.9zm206.3-57.9V303.4L300.9 428l83.6 55.8z'));
  exports.ContactsFill = getIcon('contacts', fill, getNode(newViewBox, 'M928 224H768v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H548v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H328v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H96c-17.7 0-32 14.3-32 32v576c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V256c0-17.7-14.3-32-32-32zM661 736h-43.9c-4.2 0-7.6-3.3-7.9-7.5-3.8-50.6-46-90.5-97.2-90.5s-93.4 40-97.2 90.5c-.3 4.2-3.7 7.5-7.9 7.5H363a8 8 0 0 1-8-8.4c2.8-53.3 32-99.7 74.6-126.1a111.8 111.8 0 0 1-29.1-75.5c0-61.9 49.9-112 111.4-112 61.5 0 111.4 50.1 111.4 112 0 29.1-11 55.5-29.1 75.5 42.7 26.5 71.8 72.8 74.6 126.1.4 4.6-3.2 8.4-7.8 8.4zM512 474c-28.5 0-51.7 23.3-51.7 52s23.2 52 51.7 52c28.5 0 51.7-23.3 51.7-52s-23.2-52-51.7-52z'));
  exports.ControlFill = getIcon('control', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM404 683v77c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-77c-41.7-13.6-72-52.8-72-99s30.3-85.5 72-99V264c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v221c41.7 13.6 72 52.8 72 99s-30.3 85.5-72 99zm279.6-143.9c.2 0 .3-.1.4-.1v221c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V539c.2 0 .3.1.4.1-42-13.4-72.4-52.7-72.4-99.1 0-46.4 30.4-85.7 72.4-99.1-.2 0-.3.1-.4.1v-77c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v77c-.2 0-.3-.1-.4-.1 42 13.4 72.4 52.7 72.4 99.1 0 46.4-30.4 85.7-72.4 99.1zM616 440a36 36 0 1 0 72 0 36 36 0 1 0-72 0zM403.4 566.5l-1.5-2.4c0-.1-.1-.1-.1-.2l-.9-1.2c-.1-.1-.2-.2-.2-.3-1-1.3-2-2.5-3.2-3.6l-.2-.2c-.4-.4-.8-.8-1.2-1.1-.8-.8-1.7-1.5-2.6-2.1h-.1l-1.2-.9c-.1-.1-.3-.2-.4-.3-1.2-.8-2.5-1.6-3.9-2.2-.2-.1-.5-.2-.7-.4-.4-.2-.7-.3-1.1-.5-.3-.1-.7-.3-1-.4-.5-.2-1-.4-1.5-.5-.4-.1-.9-.3-1.3-.4l-.9-.3-1.4-.3c-.2-.1-.5-.1-.7-.2-.7-.1-1.4-.3-2.1-.4-.2 0-.4 0-.6-.1-.6-.1-1.1-.1-1.7-.2-.2 0-.4 0-.7-.1-.8 0-1.5-.1-2.3-.1s-1.5 0-2.3.1c-.2 0-.4 0-.7.1-.6 0-1.2.1-1.7.2-.2 0-.4 0-.6.1-.7.1-1.4.2-2.1.4-.2.1-.5.1-.7.2l-1.4.3-.9.3c-.4.1-.9.3-1.3.4-.5.2-1 .4-1.5.5-.3.1-.7.3-1 .4-.4.2-.7.3-1.1.5-.2.1-.5.2-.7.4-1.3.7-2.6 1.4-3.9 2.2-.1.1-.3.2-.4.3l-1.2.9h-.1c-.9.7-1.8 1.4-2.6 2.1-.4.4-.8.7-1.2 1.1l-.2.2a54.8 54.8 0 0 0-3.2 3.6c-.1.1-.2.2-.2.3l-.9 1.2c0 .1-.1.1-.1.2l-1.5 2.4c-.1.2-.2.3-.3.5-2.7 5.1-4.3 10.9-4.3 17s1.6 12 4.3 17c.1.2.2.3.3.5l1.5 2.4c0 .1.1.1.1.2l.9 1.2c.1.1.2.2.2.3 1 1.3 2 2.5 3.2 3.6l.2.2c.4.4.8.8 1.2 1.1.8.8 1.7 1.5 2.6 2.1h.1l1.2.9c.1.1.3.2.4.3 1.2.8 2.5 1.6 3.9 2.2.2.1.5.2.7.4.4.2.7.3 1.1.5.3.1.7.3 1 .4.5.2 1 .4 1.5.5.4.1.9.3 1.3.4l.9.3 1.4.3c.2.1.5.1.7.2.7.1 1.4.3 2.1.4.2 0 .4 0 .6.1.6.1 1.1.1 1.7.2.2 0 .4 0 .7.1.8 0 1.5.1 2.3.1s1.5 0 2.3-.1c.2 0 .4 0 .7-.1.6 0 1.2-.1 1.7-.2.2 0 .4 0 .6-.1.7-.1 1.4-.2 2.1-.4.2-.1.5-.1.7-.2l1.4-.3.9-.3c.4-.1.9-.3 1.3-.4.5-.2 1-.4 1.5-.5.3-.1.7-.3 1-.4.4-.2.7-.3 1.1-.5.2-.1.5-.2.7-.4 1.3-.7 2.6-1.4 3.9-2.2.1-.1.3-.2.4-.3l1.2-.9h.1c.9-.7 1.8-1.4 2.6-2.1.4-.4.8-.7 1.2-1.1l.2-.2c1.1-1.1 2.2-2.4 3.2-3.6.1-.1.2-.2.2-.3l.9-1.2c0-.1.1-.1.1-.2l1.5-2.4c.1-.2.2-.3.3-.5 2.7-5.1 4.3-10.9 4.3-17s-1.6-12-4.3-17c-.1-.2-.2-.4-.3-.5z'));
  exports.ContainerFill = getIcon('container', fill, getNode(newViewBox, 'M832 64H192c-17.7 0-32 14.3-32 32v529c0-.6.4-1 1-1h219.3l5.2 24.7C397.6 708.5 450.8 752 512 752s114.4-43.5 126.4-103.3l5.2-24.7H863c.6 0 1 .4 1 1V96c0-17.7-14.3-32-32-32zM712 493c0 4.4-3.6 8-8 8H320c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h384c4.4 0 8 3.6 8 8v48zm0-160c0 4.4-3.6 8-8 8H320c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h384c4.4 0 8 3.6 8 8v48zm151 354H694.1c-11.6 32.8-32 62.3-59.1 84.7-34.5 28.6-78.2 44.3-123 44.3s-88.5-15.8-123-44.3a194.02 194.02 0 0 1-59.1-84.7H161c-.6 0-1-.4-1-1v242c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V686c0 .6-.4 1-1 1z'));
  exports.CopyFill = getIcon('copy', fill, getNode(newViewBox, 'M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM382 896h-.2L232 746.2v-.2h150v150z'));
  exports.CopyrightCircleFill = getIcon('copyright-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm5.4 670c-110 0-173.4-73.2-173.4-194.9v-52.3C344 364.2 407.4 290 517.3 290c94.3 0 162.7 60.7 162.7 147.4 0 2.6-2.1 4.7-4.7 4.7h-56.7c-4.2 0-7.6-3.2-8-7.4-4-49.5-40-83.4-93-83.4-65.3 0-102.1 48.5-102.1 135.5v52.6c0 85.7 36.9 133.6 102.1 133.6 52.8 0 88.7-31.7 93-77.8.4-4.1 3.8-7.3 8-7.3h56.8c2.6 0 4.7 2.1 4.7 4.7 0 82.6-68.7 141.4-162.7 141.4z'));
  exports.CreditCardFill = getIcon('credit-card', fill, getNode(newViewBox, 'M928 160H96c-17.7 0-32 14.3-32 32v160h896V192c0-17.7-14.3-32-32-32zM64 832c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V440H64v392zm579-184c0-4.4 3.6-8 8-8h165c4.4 0 8 3.6 8 8v72c0 4.4-3.6 8-8 8H651c-4.4 0-8-3.6-8-8v-72z'));
  exports.CrownFill = getIcon('crown', fill, getNode(newViewBox, 'M899.6 276.5L705 396.4 518.4 147.5a8.06 8.06 0 0 0-12.9 0L319 396.4 124.3 276.5c-5.7-3.5-13.1 1.2-12.2 7.9L188.5 865c1.1 7.9 7.9 14 16 14h615.1c8 0 14.9-6 15.9-14l76.4-580.6c.8-6.7-6.5-11.4-12.3-7.9zM512 734.2c-62.1 0-112.6-50.5-112.6-112.6S449.9 509 512 509s112.6 50.5 112.6 112.6S574.1 734.2 512 734.2zm0-160.9c-26.6 0-48.2 21.6-48.2 48.3 0 26.6 21.6 48.3 48.2 48.3s48.2-21.6 48.2-48.3c0-26.6-21.6-48.3-48.2-48.3z'));
  exports.CustomerServiceFill = getIcon('customer-service', fill, getNode(newViewBox, 'M512 128c-212.1 0-384 171.9-384 384v360c0 13.3 10.7 24 24 24h184c35.3 0 64-28.7 64-64V624c0-35.3-28.7-64-64-64H200v-48c0-172.3 139.7-312 312-312s312 139.7 312 312v48H688c-35.3 0-64 28.7-64 64v208c0 35.3 28.7 64 64 64h184c13.3 0 24-10.7 24-24V512c0-212.1-171.9-384-384-384z'));
  exports.DashboardFill = getIcon('dashboard', fill, getNode(newViewBox, 'M924.8 385.6a446.7 446.7 0 0 0-96-142.4 446.7 446.7 0 0 0-142.4-96C631.1 123.8 572.5 112 512 112s-119.1 11.8-174.4 35.2a446.7 446.7 0 0 0-142.4 96 446.7 446.7 0 0 0-96 142.4C75.8 440.9 64 499.5 64 560c0 132.7 58.3 257.7 159.9 343.1l1.7 1.4c5.8 4.8 13.1 7.5 20.6 7.5h531.7c7.5 0 14.8-2.7 20.6-7.5l1.7-1.4C901.7 817.7 960 692.7 960 560c0-60.5-11.9-119.1-35.2-174.4zM482 232c0-4.4 3.6-8 8-8h44c4.4 0 8 3.6 8 8v80c0 4.4-3.6 8-8 8h-44c-4.4 0-8-3.6-8-8v-80zM270 582c0 4.4-3.6 8-8 8h-80c-4.4 0-8-3.6-8-8v-44c0-4.4 3.6-8 8-8h80c4.4 0 8 3.6 8 8v44zm90.7-204.5l-31.1 31.1a8.03 8.03 0 0 1-11.3 0L261.7 352a8.03 8.03 0 0 1 0-11.3l31.1-31.1c3.1-3.1 8.2-3.1 11.3 0l56.6 56.6c3.1 3.1 3.1 8.2 0 11.3zm291.1 83.6l-84.5 84.5c5 18.7.2 39.4-14.5 54.1a55.95 55.95 0 0 1-79.2 0 55.95 55.95 0 0 1 0-79.2 55.87 55.87 0 0 1 54.1-14.5l84.5-84.5c3.1-3.1 8.2-3.1 11.3 0l28.3 28.3c3.1 3.1 3.1 8.1 0 11.3zm43-52.4l-31.1-31.1a8.03 8.03 0 0 1 0-11.3l56.6-56.6c3.1-3.1 8.2-3.1 11.3 0l31.1 31.1c3.1 3.1 3.1 8.2 0 11.3l-56.6 56.6a8.03 8.03 0 0 1-11.3 0zM846 582c0 4.4-3.6 8-8 8h-80c-4.4 0-8-3.6-8-8v-44c0-4.4 3.6-8 8-8h80c4.4 0 8 3.6 8 8v44z'));
  exports.DeleteFill = getIcon('delete', fill, getNode(newViewBox, 'M864 256H736v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zm-200 0H360v-72h304v72z'));
  exports.DiffFill = getIcon('diff', fill, getNode(newViewBox, 'M854.2 306.6L611.3 72.9c-6-5.7-13.9-8.9-22.2-8.9H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h277l219 210.6V824c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V329.6c0-8.7-3.5-17-9.8-23zM553.4 201.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v704c0 17.7 14.3 32 32 32h512c17.7 0 32-14.3 32-32V397.3c0-8.5-3.4-16.6-9.4-22.6L553.4 201.4zM568 753c0 3.8-3.4 7-7.5 7h-225c-4.1 0-7.5-3.2-7.5-7v-42c0-3.8 3.4-7 7.5-7h225c4.1 0 7.5 3.2 7.5 7v42zm0-220c0 3.8-3.4 7-7.5 7H476v84.9c0 3.9-3.1 7.1-7 7.1h-42c-3.8 0-7-3.2-7-7.1V540h-84.5c-4.1 0-7.5-3.2-7.5-7v-42c0-3.9 3.4-7 7.5-7H420v-84.9c0-3.9 3.2-7.1 7-7.1h42c3.9 0 7 3.2 7 7.1V484h84.5c4.1 0 7.5 3.1 7.5 7v42z'));
  exports.DingtalkCircleFill = getIcon('dingtalk-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm227 385.3c-1 4.2-3.5 10.4-7 17.8h.1l-.4.7c-20.3 43.1-73.1 127.7-73.1 127.7s-.1-.2-.3-.5l-15.5 26.8h74.5L575.1 810l32.3-128h-58.6l20.4-84.7c-16.5 3.9-35.9 9.4-59 16.8 0 0-31.2 18.2-89.9-35 0 0-39.6-34.7-16.6-43.4 9.8-3.7 47.4-8.4 77-12.3 40-5.4 64.6-8.2 64.6-8.2S422 517 392.7 512.5c-29.3-4.6-66.4-53.1-74.3-95.8 0 0-12.2-23.4 26.3-12.3 38.5 11.1 197.9 43.2 197.9 43.2s-207.4-63.3-221.2-78.7c-13.8-15.4-40.6-84.2-37.1-126.5 0 0 1.5-10.5 12.4-7.7 0 0 153.3 69.7 258.1 107.9 104.8 37.9 195.9 57.3 184.2 106.7z'));
  exports.DatabaseFill = getIcon('database', fill, getNode(newViewBox, 'M832 64H192c-17.7 0-32 14.3-32 32v224h704V96c0-17.7-14.3-32-32-32zM288 232c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40zM160 928c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V704H160v224zm128-136c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40zM160 640h704V384H160v256zm128-168c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40z'));
  exports.DingtalkSquareFill = getIcon('dingtalk-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM739 449.3c-1 4.2-3.5 10.4-7 17.8h.1l-.4.7c-20.3 43.1-73.1 127.7-73.1 127.7s-.1-.2-.3-.5l-15.5 26.8h74.5L575.1 810l32.3-128h-58.6l20.4-84.7c-16.5 3.9-35.9 9.4-59 16.8 0 0-31.2 18.2-89.9-35 0 0-39.6-34.7-16.6-43.4 9.8-3.7 47.4-8.4 77-12.3 40-5.4 64.6-8.2 64.6-8.2S422 517 392.7 512.5c-29.3-4.6-66.4-53.1-74.3-95.8 0 0-12.2-23.4 26.3-12.3 38.5 11.1 197.9 43.2 197.9 43.2s-207.4-63.3-221.2-78.7c-13.8-15.4-40.6-84.2-37.1-126.5 0 0 1.5-10.5 12.4-7.7 0 0 153.3 69.7 258.1 107.9 104.8 37.9 195.9 57.3 184.2 106.7z'));
  exports.DislikeFill = getIcon('dislike', fill, getNode(newViewBox, 'M885.9 490.3c3.6-12 5.4-24.4 5.4-37 0-28.3-9.3-55.5-26.1-77.7 3.6-12 5.4-24.4 5.4-37 0-28.3-9.3-55.5-26.1-77.7 3.6-12 5.4-24.4 5.4-37 0-51.6-30.7-98.1-78.3-118.4a66.1 66.1 0 0 0-26.5-5.4H273v428h.3l85.8 310.8C372.9 889 418.9 924 470.9 924c29.7 0 57.4-11.8 77.9-33.4 20.5-21.5 31-49.7 29.5-79.4l-6-122.9h239.9c12.1 0 23.9-3.2 34.3-9.3 40.4-23.5 65.5-66.1 65.5-111 0-28.3-9.3-55.5-26.1-77.7zM112 132v364c0 17.7 14.3 32 32 32h65V100h-65c-17.7 0-32 14.3-32 32z'));
  exports.DollarCircleFill = getIcon('dollar-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm22.3 665.2l.2 31.7c0 4.4-3.6 8.1-8 8.1h-28.4c-4.4 0-8-3.6-8-8v-31.4C401.3 723 359.5 672.4 355 617.4c-.4-4.7 3.3-8.7 8-8.7h46.2c3.9 0 7.3 2.8 7.9 6.6 5.1 31.7 29.8 55.4 74.1 61.3V533.9l-24.7-6.3c-52.3-12.5-102.1-45.1-102.1-112.7 0-72.9 55.4-112.1 126.2-119v-33c0-4.4 3.6-8 8-8h28.1c4.4 0 8 3.6 8 8v32.7c68.5 6.9 119.9 46.9 125.9 109.2.5 4.7-3.2 8.8-8 8.8h-44.9c-4 0-7.4-3-7.9-6.9-4-29.2-27.4-53-65.5-58.2v134.3l25.4 5.9c64.8 16 108.9 47 108.9 116.4 0 75.3-56 117.3-134.3 124.1zM426.6 410.3c0 25.4 15.7 45.1 49.5 57.3 4.7 1.9 9.4 3.4 15 5v-124c-36.9 4.7-64.5 25.4-64.5 61.7zm116.5 135.2c-2.8-.6-5.6-1.3-8.8-2.2V677c42.6-3.8 72-27.2 72-66.4 0-30.7-15.9-50.7-63.2-65.1z'));
  exports.DownCircleFill = getIcon('down-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm184.5 353.7l-178 246a7.95 7.95 0 0 1-12.9 0l-178-246c-3.8-5.3 0-12.7 6.5-12.7H381c10.2 0 19.9 4.9 25.9 13.2L512 563.6l105.2-145.4c6-8.3 15.6-13.2 25.9-13.2H690c6.5 0 10.3 7.4 6.5 12.7z'));
  exports.DownSquareFill = getIcon('down-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM696.5 412.7l-178 246a7.95 7.95 0 0 1-12.9 0l-178-246c-3.8-5.3 0-12.7 6.5-12.7H381c10.2 0 19.9 4.9 25.9 13.2L512 558.6l105.2-145.4c6-8.3 15.6-13.2 25.9-13.2H690c6.5 0 10.3 7.4 6.5 12.7z'));
  exports.DribbbleCircleFill = getIcon('dribbble-circle', fill, getNode(newViewBox, 'M675.1 328.3a245.2 245.2 0 0 0-220.8-55.1c6.8 9.1 51.5 69.9 91.8 144 87.5-32.8 124.5-82.6 129-88.9zM554 552.8c-138.7 48.3-188.6 144.6-193 153.6 41.7 32.5 94.1 51.9 151 51.9 34.1 0 66.6-6.9 96.1-19.5-3.7-21.6-17.9-96.8-52.5-186.6l-1.6.6zm47.7-11.9c32.2 88.4 45.3 160.4 47.8 175.4 55.2-37.3 94.5-96.4 105.4-164.9-8.4-2.6-76.1-22.8-153.2-10.5zM512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 736c-158.8 0-288-129.2-288-288s129.2-288 288-288 288 129.2 288 288-129.2 288-288 288zm53.1-346.2c5.7 11.7 11.2 23.6 16.3 35.6 1.8 4.2 3.6 8.4 5.3 12.7 81.8-10.3 163.2 6.2 171.3 7.9-.5-58.1-21.3-111.4-55.5-153.3-5.3 7.1-46.5 60-137.4 97.1zM498.6 432c-40.8-72.5-84.7-133.4-91.2-142.3-68.8 32.5-120.3 95.9-136.2 172.2 11 .2 112.4.7 227.4-29.9zm30.6 82.5c3.2-1 6.4-2 9.7-2.9-6.2-14-12.9-28-19.9-41.7-122.8 36.8-242.1 35.2-252.8 35-.1 2.5-.1 5-.1 7.5 0 63.2 23.9 120.9 63.2 164.5 5.5-9.6 73-121.4 199.9-162.4z'));
  exports.DribbbleSquareFill = getIcon('dribbble-square', fill, getNode(newViewBox, 'M498.6 432c-40.8-72.5-84.7-133.4-91.2-142.3-68.8 32.5-120.3 95.9-136.2 172.2 11 .2 112.4.7 227.4-29.9zm66.5 21.8c5.7 11.7 11.2 23.6 16.3 35.6 1.8 4.2 3.6 8.4 5.3 12.7 81.8-10.3 163.2 6.2 171.3 7.9-.5-58.1-21.3-111.4-55.5-153.3-5.3 7.1-46.5 60-137.4 97.1zM880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM512 800c-158.8 0-288-129.2-288-288s129.2-288 288-288 288 129.2 288 288-129.2 288-288 288zm89.7-259.1c32.2 88.4 45.3 160.4 47.8 175.4 55.2-37.3 94.5-96.4 105.4-164.9-8.4-2.6-76.1-22.8-153.2-10.5zm-72.5-26.4c3.2-1 6.4-2 9.7-2.9-6.2-14-12.9-28-19.9-41.7-122.8 36.8-242.1 35.2-252.8 35-.1 2.5-.1 5-.1 7.5 0 63.2 23.9 120.9 63.2 164.5 5.5-9.6 73-121.4 199.9-162.4zm145.9-186.2a245.2 245.2 0 0 0-220.8-55.1c6.8 9.1 51.5 69.9 91.8 144 87.5-32.8 124.5-82.6 129-88.9zM554 552.8c-138.7 48.3-188.6 144.6-193 153.6 41.7 32.5 94.1 51.9 151 51.9 34.1 0 66.6-6.9 96.1-19.5-3.7-21.6-17.9-96.8-52.5-186.6l-1.6.6z'));
  exports.DropboxCircleFill = getIcon('dropbox-circle', fill, getNode(newViewBox, 'M663.8 455.5zm-151.5-93.8l-151.8 93.8 151.8 93.9 151.5-93.9zM512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm151.2 595.5L512.6 750l-151-90.5v-33.1l45.4 29.4 105.6-87.7 105.6 87.7 45.1-29.4v33.1zm-45.6-22.4l-105.3-87.7L407 637.1l-151-99.2 104.5-82.4L256 371.2 407 274l105.3 87.7L617.6 274 768 372.1l-104.2 83.5L768 539l-150.4 98.1z'));
  exports.DropboxSquareFill = getIcon('dropbox-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM663.2 659.5L512.6 750l-151-90.5v-33.1l45.4 29.4 105.6-87.7 105.6 87.7 45.1-29.4v33.1zm-45.6-22.4l-105.3-87.7L407 637.1l-151-99.2 104.5-82.4L256 371.2 407 274l105.3 87.7L617.6 274 768 372.1l-104.2 83.5L768 539l-150.4 98.1zM512.3 361.7l-151.8 93.8 151.8 93.9 151.5-93.9zm151.5 93.8z'));
  exports.EnvironmentFill = getIcon('environment', fill, getNode(newViewBox, 'M512 327c-29.9 0-58 11.6-79.2 32.8A111.6 111.6 0 0 0 400 439c0 29.9 11.7 58 32.8 79.2A111.6 111.6 0 0 0 512 551c29.9 0 58-11.7 79.2-32.8C612.4 497 624 468.9 624 439c0-29.9-11.6-58-32.8-79.2S541.9 327 512 327zm342.6-37.9a362.49 362.49 0 0 0-79.9-115.7 370.83 370.83 0 0 0-118.2-77.8C610.7 76.6 562.1 67 512 67c-50.1 0-98.7 9.6-144.5 28.5-44.3 18.3-84 44.5-118.2 77.8A363.6 363.6 0 0 0 169.4 289c-19.5 45-29.4 92.8-29.4 142 0 70.6 16.9 140.9 50.1 208.7 26.7 54.5 64 107.6 111 158.1 80.3 86.2 164.5 138.9 188.4 153a43.9 43.9 0 0 0 22.4 6.1c7.8 0 15.5-2 22.4-6.1 23.9-14.1 108.1-66.8 188.4-153 47-50.4 84.3-103.6 111-158.1C867.1 572 884 501.8 884 431.1c0-49.2-9.9-97-29.4-142zM512 615c-97.2 0-176-78.8-176-176s78.8-176 176-176 176 78.8 176 176-78.8 176-176 176z'));
  exports.EditFill = getIcon('edit', fill, getNode(newViewBox, 'M880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32zm-622.3-84c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 0 0 0-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 0 0 9.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9z'));
  exports.ExclamationCircleFill = getIcon('exclamation-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'));
  exports.EuroCircleFill = getIcon('euro-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm63.5 375.8c4.4 0 8 3.6 8 8V475c0 4.4-3.6 8-8 8h-136c-.3 4.4-.3 9.1-.3 13.8v36h136.2c4.4 0 8 3.6 8 8V568c0 4.4-3.6 8-8 8H444.9c15.3 62 61.3 98.6 129.8 98.6 19.9 0 37.1-1.2 51.8-4.1 4.9-1 9.5 2.8 9.5 7.8v42.8c0 3.8-2.7 7-6.4 7.8-15.9 3.4-34.3 5.1-55.3 5.1-109.8 0-183-58.8-200.2-158H344c-4.4 0-8-3.6-8-8v-27.2c0-4.4 3.6-8 8-8h26.1v-36.9c0-4.4 0-8.8.3-12.8H344c-4.4 0-8-3.6-8-8v-27.2c0-4.4 3.6-8 8-8h31.7c19.7-94.2 92-149.9 198.6-149.9 20.9 0 39.4 1.9 55.3 5.4 3.7.8 6.3 4 6.3 7.8V346h.1c0 5.1-4.6 8.8-9.6 7.8-14.7-2.9-31.8-4.4-51.7-4.4-65.4 0-110.4 33.5-127.6 90.4h128.4z'));
  exports.ExperimentFill = getIcon('experiment', fill, getNode(newViewBox, 'M218.9 636.3l42.6 26.6c.1.1.3.2.4.3l12.7 8 .3.3a186.9 186.9 0 0 0 94.1 25.1c44.9 0 87.2-15.7 121-43.8a256.27 256.27 0 0 1 164.9-59.9c52.3 0 102.2 15.7 144.6 44.5l7.9 5-111.6-289V179.8h63.5c4.4 0 8-3.6 8-8V120c0-4.4-3.6-8-8-8H264.7c-4.4 0-8 3.6-8 8v51.9c0 4.4 3.6 8 8 8h63.5v173.6L218.9 636.3zm333-203.1c22 0 39.9 17.9 39.9 39.9S573.9 513 551.9 513 512 495.1 512 473.1s17.9-39.9 39.9-39.9zM878 825.1l-29.9-77.4-85.7-53.5-.1.1c-.7-.5-1.5-1-2.2-1.5l-8.1-5-.3-.3c-29-17.5-62.3-26.8-97-26.8-44.9 0-87.2 15.7-121 43.8a256.27 256.27 0 0 1-164.9 59.9c-53 0-103.5-16.1-146.2-45.6l-28.9-18.1L146 825.1c-2.8 7.4-4.3 15.2-4.3 23 0 35.2 28.6 63.8 63.8 63.8h612.9c7.9 0 15.7-1.5 23-4.3a63.6 63.6 0 0 0 36.6-82.5z'));
  exports.EyeInvisibleFill = getIcon('eye-invisible', fill, getNode(newViewBox, 'M508 624a112 112 0 0 0 112-112c0-3.28-.15-6.53-.43-9.74L498.26 623.57c3.21.28 6.45.43 9.74.43zm370.72-458.44L836 122.88a8 8 0 0 0-11.31 0L715.37 232.23Q624.91 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 0 0 0 51.5q56.7 119.43 136.55 191.45L112.56 835a8 8 0 0 0 0 11.31L155.25 889a8 8 0 0 0 11.31 0l712.16-712.12a8 8 0 0 0 0-11.32zM332 512a176 176 0 0 1 258.88-155.28l-48.62 48.62a112.08 112.08 0 0 0-140.92 140.92l-48.62 48.62A175.09 175.09 0 0 1 332 512z', 'M942.2 486.2Q889.4 375 816.51 304.85L672.37 449A176.08 176.08 0 0 1 445 676.37L322.74 798.63Q407.82 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 0 0 0-51.5z'));
  exports.EyeFill = getIcon('eye', fill, getNode(newViewBox, 'M396 512a112 112 0 1 0 224 0 112 112 0 1 0-224 0zm546.2-25.8C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 0 0 0 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM508 688c-97.2 0-176-78.8-176-176s78.8-176 176-176 176 78.8 176 176-78.8 176-176 176z'));
  exports.FacebookFill = getIcon('facebook', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-92.4 233.5h-63.9c-50.1 0-59.8 23.8-59.8 58.8v77.1h119.6l-15.6 120.7h-104V912H539.2V602.2H434.9V481.4h104.3v-89c0-103.3 63.1-159.6 155.3-159.6 44.2 0 82.1 3.3 93.2 4.8v107.9z'));
  exports.FastBackwardFill = getIcon('fast-backward', fill, getNode(normalViewBox, 'M517.6 273.5L230.2 499.3a16.14 16.14 0 0 0 0 25.4l287.4 225.8c10.7 8.4 26.4.8 26.4-12.7V286.2c0-13.5-15.7-21.1-26.4-12.7zm320 0L550.2 499.3a16.14 16.14 0 0 0 0 25.4l287.4 225.8c10.7 8.4 26.4.8 26.4-12.7V286.2c0-13.5-15.7-21.1-26.4-12.7zm-620-25.5h-51.2c-3.5 0-6.4 2.7-6.4 6v516c0 3.3 2.9 6 6.4 6h51.2c3.5 0 6.4-2.7 6.4-6V254c0-3.3-2.9-6-6.4-6z'));
  exports.FastForwardFill = getIcon('fast-forward', fill, getNode(normalViewBox, 'M793.8 499.3L506.4 273.5c-10.7-8.4-26.4-.8-26.4 12.7v451.6c0 13.5 15.7 21.1 26.4 12.7l287.4-225.8a16.14 16.14 0 0 0 0-25.4zm-320 0L186.4 273.5c-10.7-8.4-26.4-.8-26.4 12.7v451.5c0 13.5 15.7 21.1 26.4 12.7l287.4-225.8c4.1-3.2 6.2-8 6.2-12.7 0-4.6-2.1-9.4-6.2-12.6zM857.6 248h-51.2c-3.5 0-6.4 2.7-6.4 6v516c0 3.3 2.9 6 6.4 6h51.2c3.5 0 6.4-2.7 6.4-6V254c0-3.3-2.9-6-6.4-6z'));
  exports.FileAddFill = getIcon('file-add', fill, getNode(newViewBox, 'M480 580H372a8 8 0 0 0-8 8v48a8 8 0 0 0 8 8h108v108a8 8 0 0 0 8 8h48a8 8 0 0 0 8-8V644h108a8 8 0 0 0 8-8v-48a8 8 0 0 0-8-8H544V472a8 8 0 0 0-8-8h-48a8 8 0 0 0-8 8v108zm374.6-291.3c6 6 9.4 14.1 9.4 22.6V928c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h424.7c8.5 0 16.7 3.4 22.7 9.4l215.2 215.3zM790.2 326L602 137.8V326h188.2z'));
  exports.FileExcelFill = getIcon('file-excel', fill, getNode(newViewBox, 'M854.6 288.7c6 6 9.4 14.1 9.4 22.6V928c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h424.7c8.5 0 16.7 3.4 22.7 9.4l215.2 215.3zM790.2 326L602 137.8V326h188.2zM575.34 477.84l-61.22 102.3L452.3 477.8a12 12 0 0 0-10.27-5.79h-38.44a12 12 0 0 0-6.4 1.85 12 12 0 0 0-3.75 16.56l82.34 130.42-83.45 132.78a12 12 0 0 0-1.84 6.39 12 12 0 0 0 12 12h34.46a12 12 0 0 0 10.21-5.7l62.7-101.47 62.3 101.45a12 12 0 0 0 10.23 5.72h37.48a12 12 0 0 0 6.48-1.9 12 12 0 0 0 3.62-16.58l-83.83-130.55 85.3-132.47a12 12 0 0 0 1.9-6.5 12 12 0 0 0-12-12h-35.7a12 12 0 0 0-10.29 5.84z'));
  exports.FileExclamationFill = getIcon('file-exclamation', fill, getNode(newViewBox, 'M854.6 288.7c6 6 9.4 14.1 9.4 22.6V928c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h424.7c8.5 0 16.7 3.4 22.7 9.4l215.2 215.3zM790.2 326L602 137.8V326h188.2zM512 784a40 40 0 1 0 0-80 40 40 0 0 0 0 80zm32-152V448a8 8 0 0 0-8-8h-48a8 8 0 0 0-8 8v184a8 8 0 0 0 8 8h48a8 8 0 0 0 8-8z'));
  exports.FileImageFill = getIcon('file-image', fill, getNode(newViewBox, 'M854.6 288.7L639.4 73.4c-6-6-14.2-9.4-22.7-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.6-9.4-22.6zM400 402c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40zm296 294H328c-6.7 0-10.4-7.7-6.3-12.9l99.8-127.2a8 8 0 0 1 12.6 0l41.1 52.4 77.8-99.2a8 8 0 0 1 12.6 0l136.5 174c4.3 5.2.5 12.9-6.1 12.9zm-94-370V137.8L790.2 326H602z'));
  exports.FileMarkdownFill = getIcon('file-markdown', fill, getNode(newViewBox, 'M854.6 288.7c6 6 9.4 14.1 9.4 22.6V928c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h424.7c8.5 0 16.7 3.4 22.7 9.4l215.2 215.3zM790.2 326L602 137.8V326h188.2zM426.13 600.93l59.11 132.97a16 16 0 0 0 14.62 9.5h24.06a16 16 0 0 0 14.63-9.51l59.1-133.35V758a16 16 0 0 0 16.01 16H641a16 16 0 0 0 16-16V486a16 16 0 0 0-16-16h-34.75a16 16 0 0 0-14.67 9.62L512.1 662.2l-79.48-182.59a16 16 0 0 0-14.67-9.61H383a16 16 0 0 0-16 16v272a16 16 0 0 0 16 16h27.13a16 16 0 0 0 16-16V600.93z'));
  exports.FilePdfFill = getIcon('file-pdf', fill, getNode(newViewBox, 'M854.6 288.7c6 6 9.4 14.1 9.4 22.6V928c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h424.7c8.5 0 16.7 3.4 22.7 9.4l215.2 215.3zM790.2 326L602 137.8V326h188.2zM633.22 637.26c-15.18-.5-31.32.67-49.65 2.96-24.3-14.99-40.66-35.58-52.28-65.83l1.07-4.38 1.24-5.18c4.3-18.13 6.61-31.36 7.3-44.7.52-10.07-.04-19.36-1.83-27.97-3.3-18.59-16.45-29.46-33.02-30.13-15.45-.63-29.65 8-33.28 21.37-5.91 21.62-2.45 50.07 10.08 98.59-15.96 38.05-37.05 82.66-51.2 107.54-18.89 9.74-33.6 18.6-45.96 28.42-16.3 12.97-26.48 26.3-29.28 40.3-1.36 6.49.69 14.97 5.36 21.92 5.3 7.88 13.28 13 22.85 13.74 24.15 1.87 53.83-23.03 86.6-79.26 3.29-1.1 6.77-2.26 11.02-3.7l11.9-4.02c7.53-2.54 12.99-4.36 18.39-6.11 23.4-7.62 41.1-12.43 57.2-15.17 27.98 14.98 60.32 24.8 82.1 24.8 17.98 0 30.13-9.32 34.52-23.99 3.85-12.88.8-27.82-7.48-36.08-8.56-8.41-24.3-12.43-45.65-13.12zM385.23 765.68v-.36l.13-.34a54.86 54.86 0 0 1 5.6-10.76c4.28-6.58 10.17-13.5 17.47-20.87 3.92-3.95 8-7.8 12.79-12.12 1.07-.96 7.91-7.05 9.19-8.25l11.17-10.4-8.12 12.93c-12.32 19.64-23.46 33.78-33 43-3.51 3.4-6.6 5.9-9.1 7.51a16.43 16.43 0 0 1-2.61 1.42c-.41.17-.77.27-1.13.3a2.2 2.2 0 0 1-1.12-.15 2.07 2.07 0 0 1-1.27-1.91zM511.17 547.4l-2.26 4-1.4-4.38c-3.1-9.83-5.38-24.64-6.01-38-.72-15.2.49-24.32 5.29-24.32 6.74 0 9.83 10.8 10.07 27.05.22 14.28-2.03 29.14-5.7 35.65zm-5.81 58.46l1.53-4.05 2.09 3.8c11.69 21.24 26.86 38.96 43.54 51.31l3.6 2.66-4.39.9c-16.33 3.38-31.54 8.46-52.34 16.85 2.17-.88-21.62 8.86-27.64 11.17l-5.25 2.01 2.8-4.88c12.35-21.5 23.76-47.32 36.05-79.77zm157.62 76.26c-7.86 3.1-24.78.33-54.57-12.39l-7.56-3.22 8.2-.6c23.3-1.73 39.8-.45 49.42 3.07 4.1 1.5 6.83 3.39 8.04 5.55a4.64 4.64 0 0 1-1.36 6.31 6.7 6.7 0 0 1-2.17 1.28z'));
  exports.FilePptFill = getIcon('file-ppt', fill, getNode(newViewBox, 'M854.6 288.7c6 6 9.4 14.1 9.4 22.6V928c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h424.7c8.5 0 16.7 3.4 22.7 9.4l215.2 215.3zM790.2 326L602 137.8V326h188.2zM468.53 760v-91.54h59.27c60.57 0 100.2-39.65 100.2-98.12 0-58.22-39.58-98.34-99.98-98.34H424a12 12 0 0 0-12 12v276a12 12 0 0 0 12 12h32.53a12 12 0 0 0 12-12zm0-139.33h34.9c47.82 0 67.19-12.93 67.19-50.33 0-32.05-18.12-50.12-49.87-50.12h-52.22v100.45z'));
  exports.FileTextFill = getIcon('file-text', fill, getNode(newViewBox, 'M854.6 288.7c6 6 9.4 14.1 9.4 22.6V928c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h424.7c8.5 0 16.7 3.4 22.7 9.4l215.2 215.3zM790.2 326L602 137.8V326h188.2zM320 482a8 8 0 0 0-8 8v48a8 8 0 0 0 8 8h384a8 8 0 0 0 8-8v-48a8 8 0 0 0-8-8H320zm0 136a8 8 0 0 0-8 8v48a8 8 0 0 0 8 8h184a8 8 0 0 0 8-8v-48a8 8 0 0 0-8-8H320z'));
  exports.FileWordFill = getIcon('file-word', fill, getNode(newViewBox, 'M854.6 288.7c6 6 9.4 14.1 9.4 22.6V928c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h424.7c8.5 0 16.7 3.4 22.7 9.4l215.2 215.3zM790.2 326L602 137.8V326h188.2zM512 566.1l52.81 197a12 12 0 0 0 11.6 8.9h31.77a12 12 0 0 0 11.6-8.88l74.37-276a12 12 0 0 0 .4-3.12 12 12 0 0 0-12-12h-35.57a12 12 0 0 0-11.7 9.31l-45.78 199.1-49.76-199.32A12 12 0 0 0 528.1 472h-32.2a12 12 0 0 0-11.64 9.1L434.6 680.01 388.5 481.3a12 12 0 0 0-11.68-9.29h-35.39a12 12 0 0 0-3.11.41 12 12 0 0 0-8.47 14.7l74.17 276A12 12 0 0 0 415.6 772h31.99a12 12 0 0 0 11.59-8.9l52.81-197z'));
  exports.FileUnknownFill = getIcon('file-unknown', fill, getNode(newViewBox, 'M854.6 288.7c6 6 9.4 14.1 9.4 22.6V928c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h424.7c8.5 0 16.7 3.4 22.7 9.4l215.2 215.3zM790.2 326L602 137.8V326h188.2zM402 549c0 5.4 4.4 9.5 9.8 9.5h32.4c5.4 0 9.8-4.2 9.8-9.4 0-28.2 25.8-51.6 58-51.6s58 23.4 58 51.5c0 25.3-21 47.2-49.3 50.9-19.3 2.8-34.5 20.3-34.7 40.1v32c0 5.5 4.5 10 10 10h32c5.5 0 10-4.5 10-10v-12.2c0-6 4-11.5 9.7-13.3 44.6-14.4 75-54 74.3-98.9-.8-55.5-49.2-100.8-108.5-101.6-61.4-.7-111.5 45.6-111.5 103zm110 227a32 32 0 1 0 0-64 32 32 0 0 0 0 64z'));
  exports.FileZipFill = getIcon('file-zip', fill, getNode(newViewBox, 'M854.6 288.7c6 6 9.4 14.1 9.4 22.6V928c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h424.7c8.5 0 16.7 3.4 22.7 9.4l215.2 215.3zM790.2 326L602 137.8V326h188.2zM296 136v64h64v-64h-64zm64 64v64h64v-64h-64zm-64 64v64h64v-64h-64zm64 64v64h64v-64h-64zm-64 64v64h64v-64h-64zm64 64v64h64v-64h-64zm-64 64v64h64v-64h-64zm0 64v160h128V584H296zm48 48h32v64h-32v-64z'));
  exports.FileFill = getIcon('file', fill, getNode(newViewBox, 'M854.6 288.7c6 6 9.4 14.1 9.4 22.6V928c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h424.7c8.5 0 16.7 3.4 22.7 9.4l215.2 215.3zM790.2 326L602 137.8V326h188.2z'));
  exports.FilterFill = getIcon('filter', fill, getNode(newViewBox, 'M349 838c0 17.7 14.2 32 31.8 32h262.4c17.6 0 31.8-14.3 31.8-32V642H349v196zm531.1-684H143.9c-24.5 0-39.8 26.7-27.5 48l221.3 376h348.8l221.3-376c12.1-21.3-3.2-48-27.7-48z'));
  exports.FireFill = getIcon('fire', fill, getNode(newViewBox, 'M834.1 469.2A347.49 347.49 0 0 0 751.2 354l-29.1-26.7a8.09 8.09 0 0 0-13 3.3l-13 37.3c-8.1 23.4-23 47.3-44.1 70.8-1.4 1.5-3 1.9-4.1 2-1.1.1-2.8-.1-4.3-1.5-1.4-1.2-2.1-3-2-4.8 3.7-60.2-14.3-128.1-53.7-202C555.3 171 510 123.1 453.4 89.7l-41.3-24.3c-5.4-3.2-12.3 1-12 7.3l2.2 48c1.5 32.8-2.3 61.8-11.3 85.9-11 29.5-26.8 56.9-47 81.5a295.64 295.64 0 0 1-47.5 46.1 352.6 352.6 0 0 0-100.3 121.5A347.75 347.75 0 0 0 160 610c0 47.2 9.3 92.9 27.7 136a349.4 349.4 0 0 0 75.5 110.9c32.4 32 70 57.2 111.9 74.7C418.5 949.8 464.5 959 512 959s93.5-9.2 136.9-27.3A348.6 348.6 0 0 0 760.8 857c32.4-32 57.8-69.4 75.5-110.9a344.2 344.2 0 0 0 27.7-136c0-48.8-10-96.2-29.9-140.9z'));
  exports.FlagFill = getIcon('flag', fill, getNode(newViewBox, 'M880 305H624V192c0-17.7-14.3-32-32-32H184v-40c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v784c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V640h248v113c0 17.7 14.3 32 32 32h416c17.7 0 32-14.3 32-32V337c0-17.7-14.3-32-32-32z'));
  exports.FolderAddFill = getIcon('folder-add', fill, getNode(newViewBox, 'M880 298.4H521L403.7 186.2a8.15 8.15 0 0 0-5.5-2.2H144c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V330.4c0-17.7-14.3-32-32-32zM632 577c0 3.8-3.4 7-7.5 7H540v84.9c0 3.9-3.2 7.1-7 7.1h-42c-3.8 0-7-3.2-7-7.1V584h-84.5c-4.1 0-7.5-3.2-7.5-7v-42c0-3.8 3.4-7 7.5-7H484v-84.9c0-3.9 3.2-7.1 7-7.1h42c3.8 0 7 3.2 7 7.1V528h84.5c4.1 0 7.5 3.2 7.5 7v42z'));
  exports.FolderFill = getIcon('folder', fill, getNode(newViewBox, 'M880 298.4H521L403.7 186.2a8.15 8.15 0 0 0-5.5-2.2H144c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V330.4c0-17.7-14.3-32-32-32z'));
  exports.FolderOpenFill = getIcon('folder-open', fill, getNode(newViewBox, 'M928 444H820V330.4c0-17.7-14.3-32-32-32H473L355.7 186.2a8.15 8.15 0 0 0-5.5-2.2H96c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h698c13 0 24.8-7.9 29.7-20l134-332c1.5-3.8 2.3-7.9 2.3-12 0-17.7-14.3-32-32-32zm-180 0H238c-13 0-24.8 7.9-29.7 20L136 643.2V256h188.5l119.6 114.4H748V444z'));
  exports.ForwardFill = getIcon('forward', fill, getNode(normalViewBox, 'M825.8 498L538.4 249.9c-10.7-9.2-26.4-.9-26.4 14v496.3c0 14.9 15.7 23.2 26.4 14L825.8 526c8.3-7.2 8.3-20.8 0-28zm-320 0L218.4 249.9c-10.7-9.2-26.4-.9-26.4 14v496.3c0 14.9 15.7 23.2 26.4 14L505.8 526c4.1-3.6 6.2-8.8 6.2-14 0-5.2-2.1-10.4-6.2-14z'));
  exports.FrownFill = getIcon('frown', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zM288 421a48.01 48.01 0 0 1 96 0 48.01 48.01 0 0 1-96 0zm376 272h-48.1c-4.2 0-7.8-3.2-8.1-7.4C604 636.1 562.5 597 512 597s-92.1 39.1-95.8 88.6c-.3 4.2-3.9 7.4-8.1 7.4H360a8 8 0 0 1-8-8.4c4.4-84.3 74.5-151.6 160-151.6s155.6 67.3 160 151.6a8 8 0 0 1-8 8.4zm24-224a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'));
  exports.FundFill = getIcon('fund', fill, getNode(newViewBox, 'M926 164H94c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V196c0-17.7-14.3-32-32-32zm-92.3 194.4l-297 297.2a8.03 8.03 0 0 1-11.3 0L410.9 541.1 238.4 713.7a8.03 8.03 0 0 1-11.3 0l-36.8-36.8a8.03 8.03 0 0 1 0-11.3l214.9-215c3.1-3.1 8.2-3.1 11.3 0L531 565l254.5-254.6c3.1-3.1 8.2-3.1 11.3 0l36.8 36.8c3.2 3 3.2 8.1.1 11.2z'));
  exports.FunnelPlotFill = getIcon('funnel-plot', fill, getNode(newViewBox, 'M336.7 586h350.6l84.9-148H251.8zm543.4-432H143.9c-24.5 0-39.8 26.7-27.5 48L215 374h594l98.7-172c12.2-21.3-3.1-48-27.6-48zM349 838c0 17.7 14.2 32 31.8 32h262.4c17.6 0 31.8-14.3 31.8-32V650H349v188z'));
  exports.GiftFill = getIcon('gift', fill, getNode(newViewBox, 'M160 894c0 17.7 14.3 32 32 32h286V550H160v344zm386 32h286c17.7 0 32-14.3 32-32V550H546v376zm334-616H732.4c13.6-21.4 21.6-46.8 21.6-74 0-76.1-61.9-138-138-138-41.4 0-78.7 18.4-104 47.4-25.3-29-62.6-47.4-104-47.4-76.1 0-138 61.9-138 138 0 27.2 7.9 52.6 21.6 74H144c-17.7 0-32 14.3-32 32v140h366V310h68v172h366V342c0-17.7-14.3-32-32-32zm-402-4h-70c-38.6 0-70-31.4-70-70s31.4-70 70-70 70 31.4 70 70v70zm138 0h-70v-70c0-38.6 31.4-70 70-70s70 31.4 70 70-31.4 70-70 70z'));
  exports.GithubFill = getIcon('github', fill, getNode(newViewBox, 'M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9a127.5 127.5 0 0 1 38.1 91v112.5c.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z'));
  exports.GitlabFill = getIcon('gitlab', fill, getNode(newViewBox, 'M910.5 553.2l-109-370.8c-6.8-20.4-23.1-34.1-44.9-34.1s-39.5 12.3-46.3 32.7l-72.2 215.4H386.2L314 181.1c-6.8-20.4-24.5-32.7-46.3-32.7s-39.5 13.6-44.9 34.1L113.9 553.2c-4.1 13.6 1.4 28.6 12.3 36.8l385.4 289 386.7-289c10.8-8.1 16.3-23.1 12.2-36.8z'));
  exports.GoldenFill = getIcon('golden', fill, getNode(newViewBox, 'M905.9 806.7l-40.2-248c-.6-3.9-4-6.7-7.9-6.7H596.2c-3.9 0-7.3 2.8-7.9 6.7l-40.2 248c-.1.4-.1.9-.1 1.3 0 4.4 3.6 8 8 8h342c.4 0 .9 0 1.3-.1 4.3-.7 7.3-4.8 6.6-9.2zm-470.2-248c-.6-3.9-4-6.7-7.9-6.7H166.2c-3.9 0-7.3 2.8-7.9 6.7l-40.2 248c-.1.4-.1.9-.1 1.3 0 4.4 3.6 8 8 8h342c.4 0 .9 0 1.3-.1 4.4-.7 7.3-4.8 6.6-9.2l-40.2-248zM342 472h342c.4 0 .9 0 1.3-.1 4.4-.7 7.3-4.8 6.6-9.2l-40.2-248c-.6-3.9-4-6.7-7.9-6.7H382.2c-3.9 0-7.3 2.8-7.9 6.7l-40.2 248c-.1.4-.1.9-.1 1.3 0 4.4 3.6 8 8 8z'));
  exports.GoogleCircleFill = getIcon('google-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm167 633.6C638.4 735 583 757 516.9 757c-95.7 0-178.5-54.9-218.8-134.9C281.5 589 272 551.6 272 512s9.5-77 26.1-110.1c40.3-80.1 123.1-135 218.8-135 66 0 121.4 24.3 163.9 63.8L610.6 401c-25.4-24.3-57.7-36.6-93.6-36.6-63.8 0-117.8 43.1-137.1 101-4.9 14.7-7.7 30.4-7.7 46.6s2.8 31.9 7.7 46.6c19.3 57.9 73.3 101 137 101 33 0 61-8.7 82.9-23.4 26-17.4 43.2-43.3 48.9-74H516.9v-94.8h230.7c2.9 16.1 4.4 32.8 4.4 50.1 0 74.7-26.7 137.4-73 180.1z'));
  exports.GooglePlusCircleFill = getIcon('google-plus-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm36.5 558.8c-43.9 61.8-132.1 79.8-200.9 53.3-69-26.3-118-99.2-112.1-173.5 1.5-90.9 85.2-170.6 176.1-167.5 43.6-2 84.6 16.9 118 43.6-14.3 16.2-29 31.8-44.8 46.3-40.1-27.7-97.2-35.6-137.3-3.6-57.4 39.7-60 133.4-4.8 176.1 53.7 48.7 155.2 24.5 170.1-50.1-33.6-.5-67.4 0-101-1.1-.1-20.1-.2-40.1-.1-60.2 56.2-.2 112.5-.3 168.8.2 3.3 47.3-3 97.5-32 136.5zM791 536.5c-16.8.2-33.6.3-50.4.4-.2 16.8-.3 33.6-.3 50.4H690c-.2-16.8-.2-33.5-.3-50.3-16.8-.2-33.6-.3-50.4-.5v-50.1c16.8-.2 33.6-.3 50.4-.3.1-16.8.3-33.6.4-50.4h50.2l.3 50.4c16.8.2 33.6.2 50.4.3v50.1z'));
  exports.GooglePlusSquareFill = getIcon('google-plus-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM548.5 622.8c-43.9 61.8-132.1 79.8-200.9 53.3-69-26.3-118-99.2-112.1-173.5 1.5-90.9 85.2-170.6 176.1-167.5 43.6-2 84.6 16.9 118 43.6-14.3 16.2-29 31.8-44.8 46.3-40.1-27.7-97.2-35.6-137.3-3.6-57.4 39.7-60 133.4-4.8 176.1 53.7 48.7 155.2 24.5 170.1-50.1-33.6-.5-67.4 0-101-1.1-.1-20.1-.2-40.1-.1-60.2 56.2-.2 112.5-.3 168.8.2 3.3 47.3-3 97.5-32 136.5zM791 536.5c-16.8.2-33.6.3-50.4.4-.2 16.8-.3 33.6-.3 50.4H690c-.2-16.8-.2-33.5-.3-50.3-16.8-.2-33.6-.3-50.4-.5v-50.1c16.8-.2 33.6-.3 50.4-.3.1-16.8.3-33.6.4-50.4h50.2l.3 50.4c16.8.2 33.6.2 50.4.3v50.1z'));
  exports.GoogleSquareFill = getIcon('google-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM679 697.6C638.4 735 583 757 516.9 757c-95.7 0-178.5-54.9-218.8-134.9A245.02 245.02 0 0 1 272 512c0-39.6 9.5-77 26.1-110.1 40.3-80.1 123.1-135 218.8-135 66 0 121.4 24.3 163.9 63.8L610.6 401c-25.4-24.3-57.7-36.6-93.6-36.6-63.8 0-117.8 43.1-137.1 101-4.9 14.7-7.7 30.4-7.7 46.6s2.8 31.9 7.7 46.6c19.3 57.9 73.3 101 137 101 33 0 61-8.7 82.9-23.4 26-17.4 43.2-43.3 48.9-74H516.9v-94.8h230.7c2.9 16.1 4.4 32.8 4.4 50.1 0 74.7-26.7 137.4-73 180.1z'));
  exports.HddFill = getIcon('hdd', fill, getNode(newViewBox, 'M832 64H192c-17.7 0-32 14.3-32 32v224h704V96c0-17.7-14.3-32-32-32zM456 216c0 4.4-3.6 8-8 8H264c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48zM160 928c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V704H160v224zm576-136c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40zM160 640h704V384H160v256zm96-152c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48c0 4.4-3.6 8-8 8H264c-4.4 0-8-3.6-8-8v-48z'));
  exports.HeartFill = getIcon('heart', fill, getNode(newViewBox, 'M923 283.6a260.04 260.04 0 0 0-56.9-82.8 264.4 264.4 0 0 0-84-55.5A265.34 265.34 0 0 0 679.7 125c-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5a258.44 258.44 0 0 0-56.9 82.8c-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3.1-35.3-7-69.6-20.9-101.9z'));
  exports.HighlightFill = getIcon('highlight', fill, getNode(newViewBox, 'M957.6 507.4L603.2 158.2a7.9 7.9 0 0 0-11.2 0L353.3 393.4a8.03 8.03 0 0 0-.1 11.3l.1.1 40 39.4-117.2 115.3a8.03 8.03 0 0 0-.1 11.3l.1.1 39.5 38.9-189.1 187H72.1c-4.4 0-8.1 3.6-8.1 8V860c0 4.4 3.6 8 8 8h344.9c2.1 0 4.1-.8 5.6-2.3l76.1-75.6 40.4 39.8a7.9 7.9 0 0 0 11.2 0l117.1-115.6 40.1 39.5a7.9 7.9 0 0 0 11.2 0l238.7-235.2c3.4-3 3.4-8 .3-11.2z'));
  exports.HomeFill = getIcon('home', fill, getNode(newViewBox, 'M946.5 505L534.6 93.4a31.93 31.93 0 0 0-45.2 0L77.5 505c-12 12-18.8 28.3-18.8 45.3 0 35.3 28.7 64 64 64h43.4V908c0 17.7 14.3 32 32 32H448V716h112v224h265.9c17.7 0 32-14.3 32-32V614.3h43.4c17 0 33.3-6.7 45.3-18.8 24.9-25 24.9-65.5-.1-90.5z'));
  exports.HourglassFill = getIcon('hourglass', fill, getNode(newViewBox, 'M742 318V184h86c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H196c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h86v134c0 81.5 42.4 153.2 106.4 194-64 40.8-106.4 112.5-106.4 194v134h-86c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h632c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-86V706c0-81.5-42.4-153.2-106.4-194 64-40.8 106.4-112.5 106.4-194z'));
  exports.Html5Fill = getIcon('html5', fill, getNode(newViewBox, 'M145.2 96l66 746.6L512 928l299.6-85.4L878.9 96H145.2zm595 177.1l-4.8 47.2-1.7 19.5H382.3l8.2 94.2h335.1l-3.3 24.3-21.2 242.2-1.7 16.2-187 51.6v.3h-1.2l-.3.1v-.1h-.1l-188.6-52L310.8 572h91.1l6.5 73.2 102.4 27.7h.4l102-27.6 11.4-118.6H510.9v-.1H306l-22.8-253.5-1.7-24.3h460.3l-1.6 24.3z'));
  exports.IdcardFill = getIcon('idcard', fill, getNode(newViewBox, 'M373 411c-28.5 0-51.7 23.3-51.7 52s23.2 52 51.7 52 51.7-23.3 51.7-52-23.2-52-51.7-52zm555-251H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zM608 420c0-4.4 1-8 2.3-8h123.4c1.3 0 2.3 3.6 2.3 8v48c0 4.4-1 8-2.3 8H610.3c-1.3 0-2.3-3.6-2.3-8v-48zm-86 253h-43.9c-4.2 0-7.6-3.3-7.9-7.5-3.8-50.5-46-90.5-97.2-90.5s-93.4 40-97.2 90.5c-.3 4.2-3.7 7.5-7.9 7.5H224a8 8 0 0 1-8-8.4c2.8-53.3 32-99.7 74.6-126.1a111.8 111.8 0 0 1-29.1-75.5c0-61.9 49.9-112 111.4-112s111.4 50.1 111.4 112c0 29.1-11 55.5-29.1 75.5 42.7 26.5 71.8 72.8 74.6 126.1.4 4.6-3.2 8.4-7.8 8.4zm278.9-53H615.1c-3.9 0-7.1-3.6-7.1-8v-48c0-4.4 3.2-8 7.1-8h185.7c3.9 0 7.1 3.6 7.1 8v48h.1c0 4.4-3.2 8-7.1 8z'));
  exports.IeCircleFill = getIcon('ie-circle', fill, getNode(newViewBox, 'M693.6 284.4c-24 0-51.1 11.7-72.6 22 46.3 18 86 57.3 112.3 99.6 7.1-18.9 14.6-47.9 14.6-67.9 0-32-22.8-53.7-54.3-53.7zM512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm253.9 492.9H437.1c0 100.4 144.3 136 196.8 47.4h120.8c-32.6 91.7-119.7 146-216.8 146-35.1 0-70.3-.1-101.7-15.6-87.4 44.5-180.3 56.6-180.3-42 0-45.8 23.2-107.1 44-145C335 484 381.3 422.8 435.6 374.5c-43.7 18.9-91.1 66.3-122 101.2 25.9-112.8 129.5-193.6 237.1-186.5 130-59.8 209.7-34.1 209.7 38.6 0 27.4-10.6 63.3-21.4 87.9 25.2 45.5 33.3 97.6 26.9 141.2zM540.5 399.1c-53.7 0-102 39.7-104 94.9h208c-2-55.1-50.6-94.9-104-94.9zM320.6 602.9c-73 152.4 11.5 172.2 100.3 123.3-46.6-27.5-82.6-72.2-100.3-123.3z'));
  exports.IeSquareFill = getIcon('ie-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM765.9 556.9H437.1c0 100.4 144.3 136 196.8 47.4h120.8c-32.6 91.7-119.7 146-216.8 146-35.1 0-70.3-.1-101.7-15.6-87.4 44.5-180.3 56.6-180.3-42 0-45.8 23.2-107.1 44-145C335 484 381.3 422.8 435.6 374.5c-43.7 18.9-91.1 66.3-122 101.2 25.9-112.8 129.5-193.6 237.1-186.5 130-59.8 209.7-34.1 209.7 38.6 0 27.4-10.6 63.3-21.4 87.9 25.2 45.5 33.3 97.6 26.9 141.2zm-72.3-272.5c-24 0-51.1 11.7-72.6 22 46.3 18 86 57.3 112.3 99.6 7.1-18.9 14.6-47.9 14.6-67.9 0-32-22.8-53.7-54.3-53.7zM540.5 399.1c-53.7 0-102 39.7-104 94.9h208c-2-55.1-50.6-94.9-104-94.9zM320.6 602.9c-73 152.4 11.5 172.2 100.3 123.3-46.6-27.5-82.6-72.2-100.3-123.3z'));
  exports.InfoCircleFill = getIcon('info-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'));
  exports.InstagramFill = getIcon('instagram', fill, getNode(newViewBox, 'M512 378.7c-73.4 0-133.3 59.9-133.3 133.3S438.6 645.3 512 645.3 645.3 585.4 645.3 512 585.4 378.7 512 378.7zM911.8 512c0-55.2.5-109.9-2.6-165-3.1-64-17.7-120.8-64.5-167.6-46.9-46.9-103.6-61.4-167.6-64.5-55.2-3.1-109.9-2.6-165-2.6-55.2 0-109.9-.5-165 2.6-64 3.1-120.8 17.7-167.6 64.5C132.6 226.3 118.1 283 115 347c-3.1 55.2-2.6 109.9-2.6 165s-.5 109.9 2.6 165c3.1 64 17.7 120.8 64.5 167.6 46.9 46.9 103.6 61.4 167.6 64.5 55.2 3.1 109.9 2.6 165 2.6 55.2 0 109.9.5 165-2.6 64-3.1 120.8-17.7 167.6-64.5 46.9-46.9 61.4-103.6 64.5-167.6 3.2-55.1 2.6-109.8 2.6-165zM512 717.1c-113.5 0-205.1-91.6-205.1-205.1S398.5 306.9 512 306.9 717.1 398.5 717.1 512 625.5 717.1 512 717.1zm213.5-370.7c-26.5 0-47.9-21.4-47.9-47.9s21.4-47.9 47.9-47.9 47.9 21.4 47.9 47.9a47.84 47.84 0 0 1-47.9 47.9z'));
  exports.InsuranceFill = getIcon('insurance', fill, getNode(newViewBox, 'M519.9 358.8h97.9v41.6h-97.9zm347-188.9L527.1 54.1C523 52.7 517.5 52 512 52s-11 .7-15.1 2.1L157.1 169.9c-8.3 2.8-15.1 12.4-15.1 21.2v482.4c0 8.8 5.7 20.4 12.6 25.9L499.3 968c3.5 2.7 8 4.1 12.6 4.1s9.2-1.4 12.6-4.1l344.7-268.6c6.9-5.4 12.6-17 12.6-25.9V191.1c.2-8.8-6.6-18.3-14.9-21.2zM411.3 656h-.2c0 4.4-3.6 8-8 8h-37.3c-4.4 0-8-3.6-8-8V471.4c-7.7 9.2-15.4 17.9-23.1 26a6.04 6.04 0 0 1-10.2-2.4l-13.2-43.5c-.6-2-.2-4.1 1.2-5.6 37-43.4 64.7-95.1 82.2-153.6 1.1-3.5 5-5.3 8.4-3.7l38.6 18.3c2.7 1.3 4.1 4.4 3.2 7.2a429.2 429.2 0 0 1-33.6 79V656zm296.5-49.2l-26.3 35.3a5.92 5.92 0 0 1-8.9.7c-30.6-29.3-56.8-65.2-78.1-106.9V656c0 4.4-3.6 8-8 8h-36.2c-4.4 0-8-3.6-8-8V536c-22 44.7-49 80.8-80.6 107.6a5.9 5.9 0 0 1-8.9-1.4L430 605.7a6 6 0 0 1 1.6-8.1c28.6-20.3 51.9-45.2 71-76h-55.1c-4.4 0-8-3.6-8-8V478c0-4.4 3.6-8 8-8h94.9v-18.6h-65.9c-4.4 0-8-3.6-8-8V316c0-4.4 3.6-8 8-8h184.7c4.4 0 8 3.6 8 8v127.2c0 4.4-3.6 8-8 8h-66.7v18.6h98.8c4.4 0 8 3.6 8 8v35.6c0 4.4-3.6 8-8 8h-59c18.1 29.1 41.8 54.3 72.3 76.9 2.6 2.1 3.2 5.9 1.2 8.5z'));
  exports.InteractionFill = getIcon('interaction', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM726 585.7c0 55.3-44.7 100.1-99.7 100.1H420.6v53.4c0 5.7-6.5 8.8-10.9 5.3l-109.1-85.7c-3.5-2.7-3.5-8 0-10.7l109.1-85.7c4.4-3.5 10.9-.3 10.9 5.3v53.4h205.7c19.6 0 35.5-16 35.5-35.6v-78.9c0-3.7 3-6.8 6.8-6.8h50.7c3.7 0 6.8 3 6.8 6.8v79.1zm-2.6-209.9l-109.1 85.7c-4.4 3.5-10.9.3-10.9-5.3v-53.4H397.7c-19.6 0-35.5 16-35.5 35.6v78.9c0 3.7-3 6.8-6.8 6.8h-50.7c-3.7 0-6.8-3-6.8-6.8v-78.9c0-55.3 44.7-100.1 99.7-100.1h205.7v-53.4c0-5.7 6.5-8.8 10.9-5.3l109.1 85.7c3.6 2.5 3.6 7.8.1 10.5z'));
  exports.InterationFill = getIcon('interation', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM726 585.7c0 55.3-44.7 100.1-99.7 100.1H420.6v53.4c0 5.7-6.5 8.8-10.9 5.3l-109.1-85.7c-3.5-2.7-3.5-8 0-10.7l109.1-85.7c4.4-3.5 10.9-.3 10.9 5.3v53.4h205.7c19.6 0 35.5-16 35.5-35.6v-78.9c0-3.7 3-6.8 6.8-6.8h50.7c3.7 0 6.8 3 6.8 6.8v79.1zm-2.6-209.9l-109.1 85.7c-4.4 3.5-10.9.3-10.9-5.3v-53.4H397.7c-19.6 0-35.5 16-35.5 35.6v78.9c0 3.7-3 6.8-6.8 6.8h-50.7c-3.7 0-6.8-3-6.8-6.8v-78.9c0-55.3 44.7-100.1 99.7-100.1h205.7v-53.4c0-5.7 6.5-8.8 10.9-5.3l109.1 85.7c3.6 2.5 3.6 7.8.1 10.5z'));
  exports.LayoutFill = getIcon('layout', fill, getNode(newViewBox, 'M384 912h496c17.7 0 32-14.3 32-32V340H384v572zm496-800H384v164h528V144c0-17.7-14.3-32-32-32zm-768 32v736c0 17.7 14.3 32 32 32h176V112H144c-17.7 0-32 14.3-32 32z'));
  exports.LeftCircleFill = getIcon('left-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm104 316.9c0 10.2-4.9 19.9-13.2 25.9L457.4 512l145.4 105.2c8.3 6 13.2 15.6 13.2 25.9V690c0 6.5-7.4 10.3-12.7 6.5l-246-178a7.95 7.95 0 0 1 0-12.9l246-178a8 8 0 0 1 12.7 6.5v46.8z'));
  exports.LeftSquareFill = getIcon('left-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM624 380.9c0 10.2-4.9 19.9-13.2 25.9L465.4 512l145.4 105.2c8.3 6 13.2 15.6 13.2 25.9V690c0 6.5-7.4 10.3-12.7 6.5l-246-178a7.95 7.95 0 0 1 0-12.9l246-178c5.3-3.8 12.7 0 12.7 6.5v46.8z'));
  exports.LikeFill = getIcon('like', fill, getNode(newViewBox, 'M885.9 533.7c16.8-22.2 26.1-49.4 26.1-77.7 0-44.9-25.1-87.4-65.5-111.1a67.67 67.67 0 0 0-34.3-9.3H572.4l6-122.9c1.4-29.7-9.1-57.9-29.5-79.4A106.62 106.62 0 0 0 471 99.9c-52 0-98 35-111.8 85.1l-85.9 311h-.3v428h472.3c9.2 0 18.2-1.8 26.5-5.4 47.6-20.3 78.3-66.8 78.3-118.4 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7-.2-12.6-2-25.1-5.6-37.1zM112 528v364c0 17.7 14.3 32 32 32h65V496h-65c-17.7 0-32 14.3-32 32z'));
  exports.LockFill = getIcon('lock', fill, getNode(newViewBox, 'M832 464h-68V240c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zM540 701v53c0 4.4-3.6 8-8 8h-40c-4.4 0-8-3.6-8-8v-53a48.01 48.01 0 1 1 56 0zm152-237H332V240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v224z'));
  exports.LinkedinFill = getIcon('linkedin', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM349.3 793.7H230.6V411.9h118.7v381.8zm-59.3-434a68.8 68.8 0 1 1 68.8-68.8c-.1 38-30.9 68.8-68.8 68.8zm503.7 434H675.1V608c0-44.3-.8-101.2-61.7-101.2-61.7 0-71.2 48.2-71.2 98v188.9H423.7V411.9h113.8v52.2h1.6c15.8-30 54.5-61.7 112.3-61.7 120.2 0 142.3 79.1 142.3 181.9v209.4z'));
  exports.MailFill = getIcon('mail', fill, getNode(newViewBox, 'M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-80.8 108.9L531.7 514.4c-7.8 6.1-18.7 6.1-26.5 0L189.6 268.9A7.2 7.2 0 0 1 194 256h648.8a7.2 7.2 0 0 1 4.4 12.9z'));
  exports.MedicineBoxFill = getIcon('medicine-box', fill, getNode(newViewBox, 'M839.2 278.1a32 32 0 0 0-30.4-22.1H736V144c0-17.7-14.3-32-32-32H320c-17.7 0-32 14.3-32 32v112h-72.8a31.9 31.9 0 0 0-30.4 22.1L112 502v378c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V502l-72.8-223.9zM660 628c0 4.4-3.6 8-8 8H544v108c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V636H372c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h108V464c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v108h108c4.4 0 8 3.6 8 8v48zm4-372H360v-72h304v72z'));
  exports.MediumCircleFill = getIcon('medium-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm256 253.7l-40.8 39.1c-3.6 2.7-5.3 7.1-4.6 11.4v287.7c-.7 4.4 1 8.8 4.6 11.4l40 39.1v8.7H566.4v-8.3l41.3-40.1c4.1-4.1 4.1-5.3 4.1-11.4V422.5l-115 291.6h-15.5L347.5 422.5V618c-1.2 8.2 1.7 16.5 7.5 22.4l53.8 65.1v8.7H256v-8.7l53.8-65.1a26.1 26.1 0 0 0 7-22.4V392c.7-6.3-1.7-12.4-6.5-16.7l-47.8-57.6V309H411l114.6 251.5 100.9-251.3H768v8.5z'));
  exports.MediumSquareFill = getIcon('medium-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM768 317.7l-40.8 39.1c-3.6 2.7-5.3 7.1-4.6 11.4v287.7c-.7 4.4 1 8.8 4.6 11.4l40 39.1v8.7H566.4v-8.3l41.3-40.1c4.1-4.1 4.1-5.3 4.1-11.4V422.5l-115 291.6h-15.5L347.5 422.5V618c-1.2 8.2 1.7 16.5 7.5 22.4l53.8 65.1v8.7H256v-8.7l53.8-65.1a26.1 26.1 0 0 0 7-22.4V392c.7-6.3-1.7-12.4-6.5-16.7l-47.8-57.6V309H411l114.6 251.5 100.9-251.3H768v8.5z'));
  exports.MehFill = getIcon('meh', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zM288 421a48.01 48.01 0 0 1 96 0 48.01 48.01 0 0 1-96 0zm384 200c0 4.4-3.6 8-8 8H360c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h304c4.4 0 8 3.6 8 8v48zm16-152a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'));
  exports.MessageFill = getIcon('message', fill, getNode(newViewBox, 'M924.3 338.4a447.57 447.57 0 0 0-96.1-143.3 443.09 443.09 0 0 0-143-96.3A443.91 443.91 0 0 0 512 64h-2c-60.5.3-119 12.3-174.1 35.9a444.08 444.08 0 0 0-141.7 96.5 445 445 0 0 0-95 142.8A449.89 449.89 0 0 0 65 514.1c.3 69.4 16.9 138.3 47.9 199.9v152c0 25.4 20.6 46 45.9 46h151.8a447.72 447.72 0 0 0 199.5 48h2.1c59.8 0 117.7-11.6 172.3-34.3A443.2 443.2 0 0 0 827 830.5c41.2-40.9 73.6-88.7 96.3-142 23.5-55.2 35.5-113.9 35.8-174.5.2-60.9-11.6-120-34.8-175.6zM312.4 560c-26.4 0-47.9-21.5-47.9-48s21.5-48 47.9-48 47.9 21.5 47.9 48-21.4 48-47.9 48zm199.6 0c-26.4 0-47.9-21.5-47.9-48s21.5-48 47.9-48 47.9 21.5 47.9 48-21.5 48-47.9 48zm199.6 0c-26.4 0-47.9-21.5-47.9-48s21.5-48 47.9-48 47.9 21.5 47.9 48-21.5 48-47.9 48z'));
  exports.MinusCircleFill = getIcon('minus-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm192 472c0 4.4-3.6 8-8 8H328c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h368c4.4 0 8 3.6 8 8v48z'));
  exports.MinusSquareFill = getIcon('minus-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM704 536c0 4.4-3.6 8-8 8H328c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h368c4.4 0 8 3.6 8 8v48z'));
  exports.MobileFill = getIcon('mobile', fill, getNode(newViewBox, 'M744 62H280c-35.3 0-64 28.7-64 64v768c0 35.3 28.7 64 64 64h464c35.3 0 64-28.7 64-64V126c0-35.3-28.7-64-64-64zM512 824c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40z'));
  exports.MoneyCollectFill = getIcon('money-collect', fill, getNode(newViewBox, 'M911.5 699.7a8 8 0 0 0-10.3-4.8L840 717.2V179c0-37.6-30.4-68-68-68H252c-37.6 0-68 30.4-68 68v538.2l-61.3-22.3c-.9-.3-1.8-.5-2.7-.5-4.4 0-8 3.6-8 8V762c0 3.3 2.1 6.3 5.3 7.5L501 909.1c7.1 2.6 14.8 2.6 21.9 0l383.8-139.5c3.2-1.2 5.3-4.2 5.3-7.5v-59.6c0-1-.2-1.9-.5-2.8zm-243.8-377L564 514.3h57.6c4.4 0 8 3.6 8 8v27.1c0 4.4-3.6 8-8 8h-76.3v39h76.3c4.4 0 8 3.6 8 8v27.1c0 4.4-3.6 8-8 8h-76.3V703c0 4.4-3.6 8-8 8h-49.9c-4.4 0-8-3.6-8-8v-63.4h-76c-4.4 0-8-3.6-8-8v-27.1c0-4.4 3.6-8 8-8h76v-39h-76c-4.4 0-8-3.6-8-8v-27.1c0-4.4 3.6-8 8-8h57L356.5 322.8c-2.1-3.8-.7-8.7 3.2-10.8 1.2-.7 2.5-1 3.8-1h55.7a8 8 0 0 1 7.1 4.4L511 484.2h3.3L599 315.4c1.3-2.7 4.1-4.4 7.1-4.4h54.5c4.4 0 8 3.6 8.1 7.9 0 1.3-.4 2.6-1 3.8z'));
  exports.PauseCircleFill = getIcon('pause-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-80 600c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V360c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v304zm224 0c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V360c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v304z'));
  exports.PayCircleFill = getIcon('pay-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm166.6 246.8L567.5 515.6h62c4.4 0 8 3.6 8 8v29.9c0 4.4-3.6 8-8 8h-82V603h82c4.4 0 8 3.6 8 8v29.9c0 4.4-3.6 8-8 8h-82V717c0 4.4-3.6 8-8 8h-54.3c-4.4 0-8-3.6-8-8v-68.1h-81.7c-4.4 0-8-3.6-8-8V611c0-4.4 3.6-8 8-8h81.7v-41.5h-81.7c-4.4 0-8-3.6-8-8v-29.9c0-4.4 3.6-8 8-8h61.4L345.4 310.8a8.07 8.07 0 0 1 7-11.9h60.7c3 0 5.8 1.7 7.1 4.4l90.6 180h3.4l90.6-180a8 8 0 0 1 7.1-4.4h59.5c4.4 0 8 3.6 8 8 .2 1.4-.2 2.7-.8 3.9z'));
  exports.NotificationFill = getIcon('notification', fill, getNode(newViewBox, 'M880 112c-3.8 0-7.7.7-11.6 2.3L292 345.9H128c-8.8 0-16 7.4-16 16.6v299c0 9.2 7.2 16.6 16 16.6h101.6c-3.7 11.6-5.6 23.9-5.6 36.4 0 65.9 53.8 119.5 120 119.5 55.4 0 102.1-37.6 115.9-88.4l408.6 164.2c3.9 1.5 7.8 2.3 11.6 2.3 16.9 0 32-14.2 32-33.2V145.2C912 126.2 897 112 880 112zM344 762.3c-26.5 0-48-21.4-48-47.8 0-11.2 3.9-21.9 11-30.4l84.9 34.1c-2 24.6-22.7 44.1-47.9 44.1z'));
  exports.PhoneFill = getIcon('phone', fill, getNode(newViewBox, 'M885.6 230.2L779.1 123.8a80.83 80.83 0 0 0-57.3-23.8c-21.7 0-42.1 8.5-57.4 23.8L549.8 238.4a80.83 80.83 0 0 0-23.8 57.3c0 21.7 8.5 42.1 23.8 57.4l83.8 83.8A393.82 393.82 0 0 1 553.1 553 395.34 395.34 0 0 1 437 633.8L353.2 550a80.83 80.83 0 0 0-57.3-23.8c-21.7 0-42.1 8.5-57.4 23.8L123.8 664.5a80.89 80.89 0 0 0-23.8 57.4c0 21.7 8.5 42.1 23.8 57.4l106.3 106.3c24.4 24.5 58.1 38.4 92.7 38.4 7.3 0 14.3-.6 21.2-1.8 134.8-22.2 268.5-93.9 376.4-201.7C828.2 612.8 899.8 479.2 922.3 344c6.8-41.3-6.9-83.8-36.7-113.8z'));
  exports.PictureFill = getIcon('picture', fill, getNode(newViewBox, 'M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zM338 304c35.3 0 64 28.7 64 64s-28.7 64-64 64-64-28.7-64-64 28.7-64 64-64zm513.9 437.1a8.11 8.11 0 0 1-5.2 1.9H177.2c-4.4 0-8-3.6-8-8 0-1.9.7-3.7 1.9-5.2l170.3-202c2.8-3.4 7.9-3.8 11.3-1 .3.3.7.6 1 1l99.4 118 158.1-187.5c2.8-3.4 7.9-3.8 11.3-1 .3.3.7.6 1 1l229.6 271.6c2.6 3.3 2.2 8.4-1.2 11.2z'));
  exports.PieChartFill = getIcon('pie-chart', fill, getNode(newViewBox, 'M863.1 518.5H505.5V160.9c0-4.4-3.6-8-8-8h-26a398.57 398.57 0 0 0-282.5 117 397.47 397.47 0 0 0-85.6 127C82.6 446.2 72 498.5 72 552.5S82.6 658.7 103.4 708c20.1 47.5 48.9 90.3 85.6 127 36.7 36.7 79.4 65.5 127 85.6a396.64 396.64 0 0 0 155.6 31.5 398.57 398.57 0 0 0 282.5-117c36.7-36.7 65.5-79.4 85.6-127a396.64 396.64 0 0 0 31.5-155.6v-26c-.1-4.4-3.7-8-8.1-8zM951 463l-2.6-28.2c-8.5-92-49.3-178.8-115.1-244.3A398.5 398.5 0 0 0 588.4 75.6L560.1 73c-4.7-.4-8.7 3.2-8.7 7.9v383.7c0 4.4 3.6 8 8 8l383.6-1c4.7-.1 8.4-4 8-8.6z'));
  exports.PlayCircleFill = getIcon('play-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm144.1 454.9L437.7 677.8a8.02 8.02 0 0 1-12.7-6.5V353.7a8 8 0 0 1 12.7-6.5L656.1 506a7.9 7.9 0 0 1 0 12.9z'));
  exports.PlaySquareFill = getIcon('play-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM641.7 520.8L442.3 677.6c-7.4 5.8-18.3.6-18.3-8.8V355.3c0-9.4 10.9-14.7 18.3-8.8l199.4 156.7a11.2 11.2 0 0 1 0 17.6z'));
  exports.PlusCircleFill = getIcon('plus-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm192 472c0 4.4-3.6 8-8 8H544v152c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V544H328c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h152V328c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v152h152c4.4 0 8 3.6 8 8v48z'));
  exports.PlusSquareFill = getIcon('plus-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM704 536c0 4.4-3.6 8-8 8H544v152c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V544H328c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h152V328c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v152h152c4.4 0 8 3.6 8 8v48z'));
  exports.PoundCircleFill = getIcon('pound-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm146 658c0 4.4-3.6 8-8 8H376.2c-4.4 0-8-3.6-8-8v-38.5c0-3.7 2.5-6.9 6.1-7.8 44-10.9 72.8-49 72.8-94.2 0-14.7-2.5-29.4-5.9-44.2H374c-4.4 0-8-3.6-8-8v-30c0-4.4 3.6-8 8-8h53.7c-7.8-25.1-14.6-50.7-14.6-77.1 0-75.8 58.6-120.3 151.5-120.3 26.5 0 51.4 5.5 70.3 12.7 3.1 1.2 5.2 4.2 5.2 7.5v39.5a8 8 0 0 1-10.6 7.6c-17.9-6.4-39-10.5-60.4-10.5-53.3 0-87.3 26.6-87.3 70.2 0 24.7 6.2 47.9 13.4 70.5h112c4.4 0 8 3.6 8 8v30c0 4.4-3.6 8-8 8h-98.6c3.1 13.2 5.3 26.9 5.3 41 0 40.7-16.5 73.9-43.9 91.1v4.7h180c4.4 0 8 3.6 8 8V722z'));
  exports.PrinterFill = getIcon('printer', fill, getNode(newViewBox, 'M732 120c0-4.4-3.6-8-8-8H300c-4.4 0-8 3.6-8 8v148h440V120zm120 212H172c-44.2 0-80 35.8-80 80v328c0 17.7 14.3 32 32 32h168v132c0 4.4 3.6 8 8 8h424c4.4 0 8-3.6 8-8V772h168c17.7 0 32-14.3 32-32V412c0-44.2-35.8-80-80-80zM664 844H360V568h304v276zm164-360c0 4.4-3.6 8-8 8h-40c-4.4 0-8-3.6-8-8v-40c0-4.4 3.6-8 8-8h40c4.4 0 8 3.6 8 8v40z'));
  exports.ProfileFill = getIcon('profile', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM380 696c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40zm0-144c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40zm0-144c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40zm304 272c0 4.4-3.6 8-8 8H492c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48zm0-144c0 4.4-3.6 8-8 8H492c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48zm0-144c0 4.4-3.6 8-8 8H492c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48z'));
  exports.ProjectFill = getIcon('project', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM368 744c0 4.4-3.6 8-8 8h-80c-4.4 0-8-3.6-8-8V280c0-4.4 3.6-8 8-8h80c4.4 0 8 3.6 8 8v464zm192-280c0 4.4-3.6 8-8 8h-80c-4.4 0-8-3.6-8-8V280c0-4.4 3.6-8 8-8h80c4.4 0 8 3.6 8 8v184zm192 72c0 4.4-3.6 8-8 8h-80c-4.4 0-8-3.6-8-8V280c0-4.4 3.6-8 8-8h80c4.4 0 8 3.6 8 8v256z'));
  exports.PushpinFill = getIcon('pushpin', fill, getNode(newViewBox, 'M878.3 392.1L631.9 145.7c-6.5-6.5-15-9.7-23.5-9.7s-17 3.2-23.5 9.7L423.8 306.9c-12.2-1.4-24.5-2-36.8-2-73.2 0-146.4 24.1-206.5 72.3-15.4 12.3-16.6 35.4-2.7 49.4l181.7 181.7-215.4 215.2a15.8 15.8 0 0 0-4.6 9.8l-3.4 37.2c-.9 9.4 6.6 17.4 15.9 17.4.5 0 1 0 1.5-.1l37.2-3.4c3.7-.3 7.2-2 9.8-4.6l215.4-215.4 181.7 181.7c6.5 6.5 15 9.7 23.5 9.7 9.7 0 19.3-4.2 25.9-12.4 56.3-70.3 79.7-158.3 70.2-243.4l161.1-161.1c12.9-12.8 12.9-33.8 0-46.8z'));
  exports.PropertySafetyFill = getIcon('property-safety', fill, getNode(newViewBox, 'M866.9 169.9L527.1 54.1C523 52.7 517.5 52 512 52s-11 .7-15.1 2.1L157.1 169.9c-8.3 2.8-15.1 12.4-15.1 21.2v482.4c0 8.8 5.7 20.4 12.6 25.9L499.3 968c3.5 2.7 8 4.1 12.6 4.1s9.2-1.4 12.6-4.1l344.7-268.6c6.9-5.4 12.6-17 12.6-25.9V191.1c.2-8.8-6.6-18.3-14.9-21.2zM648.3 332.8l-87.7 161.1h45.7c5.5 0 10 4.5 10 10v21.3c0 5.5-4.5 10-10 10h-63.4v29.7h63.4c5.5 0 10 4.5 10 10v21.3c0 5.5-4.5 10-10 10h-63.4V658c0 5.5-4.5 10-10 10h-41.3c-5.5 0-10-4.5-10-10v-51.8h-63.1c-5.5 0-10-4.5-10-10v-21.3c0-5.5 4.5-10 10-10h63.1v-29.7h-63.1c-5.5 0-10-4.5-10-10v-21.3c0-5.5 4.5-10 10-10h45.2l-88-161.1c-2.6-4.8-.9-10.9 4-13.6 1.5-.8 3.1-1.2 4.8-1.2h46c3.8 0 7.2 2.1 8.9 5.5l72.9 144.3 73.2-144.3a10 10 0 0 1 8.9-5.5h45c5.5 0 10 4.5 10 10 .1 1.7-.3 3.3-1.1 4.8z'));
  exports.QqCircleFill = getIcon('qq-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm210.5 612.4c-11.5 1.4-44.9-52.7-44.9-52.7 0 31.3-16.2 72.2-51.1 101.8 16.9 5.2 54.9 19.2 45.9 34.4-7.3 12.3-125.6 7.9-159.8 4-34.2 3.8-152.5 8.3-159.8-4-9.1-15.2 28.9-29.2 45.8-34.4-35-29.5-51.1-70.4-51.1-101.8 0 0-33.4 54.1-44.9 52.7-5.4-.7-12.4-29.6 9.4-99.7 10.3-33 22-60.5 40.2-105.8-3.1-116.9 45.3-215 160.4-215 113.9 0 163.3 96.1 160.4 215 18.1 45.2 29.9 72.8 40.2 105.8 21.7 70.1 14.6 99.1 9.3 99.7z'));
  exports.QqSquareFill = getIcon('qq-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM722.5 676.4c-11.5 1.4-44.9-52.7-44.9-52.7 0 31.3-16.2 72.2-51.1 101.8 16.9 5.2 54.9 19.2 45.9 34.4-7.3 12.3-125.6 7.9-159.8 4-34.2 3.8-152.5 8.3-159.8-4-9.1-15.2 28.9-29.2 45.8-34.4-35-29.5-51.1-70.4-51.1-101.8 0 0-33.4 54.1-44.9 52.7-5.4-.7-12.4-29.6 9.4-99.7 10.3-33 22-60.5 40.2-105.8-3.1-116.9 45.3-215 160.4-215 113.9 0 163.3 96.1 160.4 215 18.1 45.2 29.9 72.8 40.2 105.8 21.7 70.1 14.6 99.1 9.3 99.7z'));
  exports.QuestionCircleFill = getIcon('question-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 708c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40zm62.9-219.5a48.3 48.3 0 0 0-30.9 44.8V620c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-21.5c0-23.1 6.7-45.9 19.9-64.9 12.9-18.6 30.9-32.8 52.1-40.9 34-13.1 56-41.6 56-72.7 0-44.1-43.1-80-96-80s-96 35.9-96 80v7.6c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V420c0-39.3 17.2-76 48.4-103.3C430.4 290.4 470 276 512 276s81.6 14.5 111.6 40.7C654.8 344 672 380.7 672 420c0 57.8-38.1 109.8-97.1 132.5z'));
  exports.ReadFill = getIcon('read', fill, getNode(newViewBox, 'M928 161H699.2c-49.1 0-97.1 14.1-138.4 40.7L512 233l-48.8-31.3A255.2 255.2 0 0 0 324.8 161H96c-17.7 0-32 14.3-32 32v568c0 17.7 14.3 32 32 32h228.8c49.1 0 97.1 14.1 138.4 40.7l44.4 28.6c1.3.8 2.8 1.3 4.3 1.3s3-.4 4.3-1.3l44.4-28.6C602 807.1 650.1 793 699.2 793H928c17.7 0 32-14.3 32-32V193c0-17.7-14.3-32-32-32zM404 553.5c0 4.1-3.2 7.5-7.1 7.5H211.1c-3.9 0-7.1-3.4-7.1-7.5v-45c0-4.1 3.2-7.5 7.1-7.5h185.7c3.9 0 7.1 3.4 7.1 7.5v45zm0-140c0 4.1-3.2 7.5-7.1 7.5H211.1c-3.9 0-7.1-3.4-7.1-7.5v-45c0-4.1 3.2-7.5 7.1-7.5h185.7c3.9 0 7.1 3.4 7.1 7.5v45zm416 140c0 4.1-3.2 7.5-7.1 7.5H627.1c-3.9 0-7.1-3.4-7.1-7.5v-45c0-4.1 3.2-7.5 7.1-7.5h185.7c3.9 0 7.1 3.4 7.1 7.5v45zm0-140c0 4.1-3.2 7.5-7.1 7.5H627.1c-3.9 0-7.1-3.4-7.1-7.5v-45c0-4.1 3.2-7.5 7.1-7.5h185.7c3.9 0 7.1 3.4 7.1 7.5v45z'));
  exports.ReconciliationFill = getIcon('reconciliation', fill, getNode(newViewBox, 'M676 623c-18.8 0-34 15.2-34 34s15.2 34 34 34 34-15.2 34-34-15.2-34-34-34zm204-455H668c0-30.9-25.1-56-56-56h-80c-30.9 0-56 25.1-56 56H264c-17.7 0-32 14.3-32 32v200h-88c-17.7 0-32 14.3-32 32v448c0 17.7 14.3 32 32 32h336c17.7 0 32-14.3 32-32v-16h368c17.7 0 32-14.3 32-32V200c0-17.7-14.3-32-32-32zM448 848H176V616h272v232zm0-296H176v-88h272v88zm20-272v-48h72v-56h64v56h72v48H468zm180 168v56c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-56c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8zm28 301c-50.8 0-92-41.2-92-92s41.2-92 92-92 92 41.2 92 92-41.2 92-92 92zm92-245c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-96c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v96zm-92 61c-50.8 0-92 41.2-92 92s41.2 92 92 92 92-41.2 92-92-41.2-92-92-92zm0 126c-18.8 0-34-15.2-34-34s15.2-34 34-34 34 15.2 34 34-15.2 34-34 34z'));
  exports.RedEnvelopeFill = getIcon('red-envelope', fill, getNode(newViewBox, 'M832 64H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zM647 470.4l-87.2 161h45.9c4.6 0 8.4 3.8 8.4 8.4v25.1c0 4.6-3.8 8.4-8.4 8.4h-63.3v28.6h63.3c4.6 0 8.4 3.8 8.4 8.4v25c.2 4.6-3.6 8.5-8.2 8.5h-63.3v49.9c0 4.6-3.8 8.4-8.4 8.4h-43.7c-4.6 0-8.4-3.8-8.4-8.4v-49.9h-63c-4.6 0-8.4-3.8-8.4-8.4v-25.1c0-4.6 3.8-8.4 8.4-8.4h63v-28.6h-63c-4.6 0-8.4-3.8-8.4-8.4v-25.1c0-4.6 3.8-8.4 8.4-8.4h45.4l-87.5-161c-2.2-4.1-.7-9.1 3.4-11.4 1.3-.6 2.6-1 3.9-1h48.8c3.2 0 6.1 1.8 7.5 4.6l71.9 141.8 71.9-141.9a8.5 8.5 0 0 1 7.5-4.6h47.8c4.6 0 8.4 3.8 8.4 8.4-.1 1.5-.5 2.9-1.1 4.1zM512.6 323L289 148h446L512.6 323z'));
  exports.RedditCircleFill = getIcon('reddit-circle', fill, getNode(newViewBox, 'M584 548a36 36 0 1 0 72 0 36 36 0 1 0-72 0zm144-108a35.9 35.9 0 0 0-32.5 20.6c18.8 14.3 34.4 30.7 45.9 48.8A35.98 35.98 0 0 0 728 440zM512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm245 477.9c4.6 13.5 7 27.6 7 42.1 0 99.4-112.8 180-252 180s-252-80.6-252-180c0-14.5 2.4-28.6 7-42.1A72.01 72.01 0 0 1 296 404c27.1 0 50.6 14.9 62.9 37 36.2-19.8 80.2-32.8 128.1-36.1l58.4-131.1c4.3-9.8 15.2-14.8 25.5-11.8l91.6 26.5a54.03 54.03 0 0 1 101.6 25.6c0 29.8-24.2 54-54 54-23.5 0-43.5-15.1-50.9-36.1L577 308.3l-43 96.5c49.1 3 94.2 16.1 131.2 36.3 12.3-22.1 35.8-37 62.9-37 39.8 0 72 32.2 72 72-.1 29.3-17.8 54.6-43.1 65.8zm-171.3 83c-14.9 11.7-44.3 24.3-73.7 24.3s-58.9-12.6-73.7-24.3c-9.3-7.3-22.7-5.7-30 3.6-7.3 9.3-5.7 22.7 3.6 30 25.7 20.4 65 33.5 100.1 33.5 35.1 0 74.4-13.1 100.2-33.5 9.3-7.3 10.9-20.8 3.6-30a21.46 21.46 0 0 0-30.1-3.6zM296 440a35.98 35.98 0 0 0-13.4 69.4c11.5-18.1 27.1-34.5 45.9-48.8A35.9 35.9 0 0 0 296 440zm72 108a36 36 0 1 0 72 0 36 36 0 1 0-72 0z'));
  exports.RedditSquareFill = getIcon('reddit-square', fill, getNode(newViewBox, 'M296 440a35.98 35.98 0 0 0-13.4 69.4c11.5-18.1 27.1-34.5 45.9-48.8A35.9 35.9 0 0 0 296 440zm289.7 184.9c-14.9 11.7-44.3 24.3-73.7 24.3s-58.9-12.6-73.7-24.3c-9.3-7.3-22.7-5.7-30 3.6-7.3 9.3-5.7 22.7 3.6 30 25.7 20.4 65 33.5 100.1 33.5 35.1 0 74.4-13.1 100.2-33.5 9.3-7.3 10.9-20.8 3.6-30a21.46 21.46 0 0 0-30.1-3.6zM880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM757 541.9c4.6 13.5 7 27.6 7 42.1 0 99.4-112.8 180-252 180s-252-80.6-252-180c0-14.5 2.4-28.6 7-42.1A72.01 72.01 0 0 1 296 404c27.1 0 50.6 14.9 62.9 37 36.2-19.8 80.2-32.8 128.1-36.1l58.4-131.1c4.3-9.8 15.2-14.8 25.5-11.8l91.6 26.5a54.03 54.03 0 0 1 101.6 25.6c0 29.8-24.2 54-54 54-23.5 0-43.5-15.1-50.9-36.1L577 308.3l-43 96.5c49.1 3 94.2 16.1 131.2 36.3 12.3-22.1 35.8-37 62.9-37 39.8 0 72 32.2 72 72-.1 29.3-17.8 54.6-43.1 65.8zM584 548a36 36 0 1 0 72 0 36 36 0 1 0-72 0zm144-108a35.9 35.9 0 0 0-32.5 20.6c18.8 14.3 34.4 30.7 45.9 48.8A35.98 35.98 0 0 0 728 440zM368 548a36 36 0 1 0 72 0 36 36 0 1 0-72 0z'));
  exports.RestFill = getIcon('rest', fill, getNode(newViewBox, 'M832 256h-28.1l-35.7-120.9c-4-13.7-16.5-23.1-30.7-23.1h-451c-14.3 0-26.8 9.4-30.7 23.1L220.1 256H192c-17.7 0-32 14.3-32 32v28c0 4.4 3.6 8 8 8h45.8l47.7 558.7a32 32 0 0 0 31.9 29.3h429.2a32 32 0 0 0 31.9-29.3L802.2 324H856c4.4 0 8-3.6 8-8v-28c0-17.7-14.3-32-32-32zM508 704c-79.5 0-144-64.5-144-144s64.5-144 144-144 144 64.5 144 144-64.5 144-144 144zM291 256l22.4-76h397.2l22.4 76H291zm137 304a80 80 0 1 0 160 0 80 80 0 1 0-160 0z'));
  exports.RightCircleFill = getIcon('right-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm154.7 454.5l-246 178c-5.3 3.8-12.7 0-12.7-6.5v-46.9c0-10.2 4.9-19.9 13.2-25.9L566.6 512 421.2 406.8c-8.3-6-13.2-15.6-13.2-25.9V334c0-6.5 7.4-10.3 12.7-6.5l246 178c4.4 3.2 4.4 9.8 0 13z'));
  exports.RocketFill = getIcon('rocket', fill, getNode(newViewBox, 'M864 736c0-111.6-65.4-208-160-252.9V317.3c0-15.1-5.3-29.7-15.1-41.2L536.5 95.4C530.1 87.8 521 84 512 84s-18.1 3.8-24.5 11.4L335.1 276.1a63.97 63.97 0 0 0-15.1 41.2v165.8C225.4 528 160 624.4 160 736h156.5c-2.3 7.2-3.5 15-3.5 23.8 0 22.1 7.6 43.7 21.4 60.8a97.2 97.2 0 0 0 43.1 30.6c23.1 54 75.6 88.8 134.5 88.8 29.1 0 57.3-8.6 81.4-24.8 23.6-15.8 41.9-37.9 53-64a97 97 0 0 0 43.1-30.5 97.52 97.52 0 0 0 21.4-60.8c0-8.4-1.1-16.4-3.1-23.8L864 736zM512 352a48.01 48.01 0 0 1 0 96 48.01 48.01 0 0 1 0-96zm116.1 432.2c-5.2 3-11.2 4.2-17.1 3.4l-19.5-2.4-2.8 19.4c-5.4 37.9-38.4 66.5-76.7 66.5s-71.3-28.6-76.7-66.5l-2.8-19.5-19.5 2.5a27.7 27.7 0 0 1-17.1-3.5c-8.7-5-14.1-14.3-14.1-24.4 0-10.6 5.9-19.4 14.6-23.8h231.3c8.8 4.5 14.6 13.3 14.6 23.8-.1 10.2-5.5 19.6-14.2 24.5z'));
  exports.RightSquareFill = getIcon('right-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM658.7 518.5l-246 178c-5.3 3.8-12.7 0-12.7-6.5v-46.9c0-10.2 4.9-19.9 13.2-25.9L558.6 512 413.2 406.8c-8.3-6-13.2-15.6-13.2-25.9V334c0-6.5 7.4-10.3 12.7-6.5l246 178c4.4 3.2 4.4 9.8 0 13z'));
  exports.SafetyCertificateFill = getIcon('safety-certificate', fill, getNode(newViewBox, 'M866.9 169.9L527.1 54.1C523 52.7 517.5 52 512 52s-11 .7-15.1 2.1L157.1 169.9c-8.3 2.8-15.1 12.4-15.1 21.2v482.4c0 8.8 5.7 20.4 12.6 25.9L499.3 968c3.5 2.7 8 4.1 12.6 4.1s9.2-1.4 12.6-4.1l344.7-268.6c6.9-5.4 12.6-17 12.6-25.9V191.1c.2-8.8-6.6-18.3-14.9-21.2zM694.5 340.7L481.9 633.4a16.1 16.1 0 0 1-26 0l-126.4-174c-3.8-5.3 0-12.7 6.5-12.7h55.2c5.1 0 10 2.5 13 6.6l64.7 89 150.9-207.8c3-4.1 7.8-6.6 13-6.6H688c6.5.1 10.3 7.5 6.5 12.8z'));
  exports.SaveFill = getIcon('save', fill, getNode(newViewBox, 'M893.3 293.3L730.7 130.7c-12-12-28.3-18.7-45.3-18.7H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V338.5c0-17-6.7-33.2-18.7-45.2zM384 176h256v112H384V176zm128 554c-79.5 0-144-64.5-144-144s64.5-144 144-144 144 64.5 144 144-64.5 144-144 144zm0-224c-44.2 0-80 35.8-80 80s35.8 80 80 80 80-35.8 80-80-35.8-80-80-80z'));
  exports.ScheduleFill = getIcon('schedule', fill, getNode(newViewBox, 'M928 224H768v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H548v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H328v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H96c-17.7 0-32 14.3-32 32v576c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V256c0-17.7-14.3-32-32-32zM424 688c0 4.4-3.6 8-8 8H232c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48zm0-136c0 4.4-3.6 8-8 8H232c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48zm374.5-91.3l-165 228.7a15.9 15.9 0 0 1-25.8 0L493.5 531.2c-3.8-5.3 0-12.7 6.5-12.7h54.9c5.1 0 9.9 2.5 12.9 6.6l52.8 73.1 103.7-143.7c3-4.2 7.8-6.6 12.9-6.6H792c6.5.1 10.3 7.5 6.5 12.8z'));
  exports.SecurityScanFill = getIcon('security-scan', fill, getNode(newViewBox, 'M866.9 169.9L527.1 54.1C523 52.7 517.5 52 512 52s-11 .7-15.1 2.1L157.1 169.9c-8.3 2.8-15.1 12.4-15.1 21.2v482.4c0 8.8 5.7 20.4 12.6 25.9L499.3 968c3.5 2.7 8 4.1 12.6 4.1s9.2-1.4 12.6-4.1l344.7-268.6c6.9-5.4 12.6-17 12.6-25.9V191.1c.2-8.8-6.6-18.3-14.9-21.2zM626.8 554c-48.5 48.5-123 55.2-178.6 20.1l-77.5 77.5a8.03 8.03 0 0 1-11.3 0l-34-34a8.03 8.03 0 0 1 0-11.3l77.5-77.5c-35.1-55.7-28.4-130.1 20.1-178.6 56.3-56.3 147.5-56.3 203.8 0 56.3 56.3 56.3 147.5 0 203.8zm-158.54-45.27a80.1 80.1 0 1 0 113.27-113.28 80.1 80.1 0 1 0-113.27 113.28z'));
  exports.SettingFill = getIcon('setting', fill, getNode(newViewBox, 'M512.5 390.6c-29.9 0-57.9 11.6-79.1 32.8-21.1 21.2-32.8 49.2-32.8 79.1 0 29.9 11.7 57.9 32.8 79.1 21.2 21.1 49.2 32.8 79.1 32.8 29.9 0 57.9-11.7 79.1-32.8 21.1-21.2 32.8-49.2 32.8-79.1 0-29.9-11.7-57.9-32.8-79.1a110.96 110.96 0 0 0-79.1-32.8zm412.3 235.5l-65.4-55.9c3.1-19 4.7-38.4 4.7-57.7s-1.6-38.8-4.7-57.7l65.4-55.9a32.03 32.03 0 0 0 9.3-35.2l-.9-2.6a442.5 442.5 0 0 0-79.6-137.7l-1.8-2.1a32.12 32.12 0 0 0-35.1-9.5l-81.2 28.9c-30-24.6-63.4-44-99.6-57.5l-15.7-84.9a32.05 32.05 0 0 0-25.8-25.7l-2.7-.5c-52-9.4-106.8-9.4-158.8 0l-2.7.5a32.05 32.05 0 0 0-25.8 25.7l-15.8 85.3a353.44 353.44 0 0 0-98.9 57.3l-81.8-29.1a32 32 0 0 0-35.1 9.5l-1.8 2.1a445.93 445.93 0 0 0-79.6 137.7l-.9 2.6c-4.5 12.5-.8 26.5 9.3 35.2l66.2 56.5c-3.1 18.8-4.6 38-4.6 57 0 19.2 1.5 38.4 4.6 57l-66 56.5a32.03 32.03 0 0 0-9.3 35.2l.9 2.6c18.1 50.3 44.8 96.8 79.6 137.7l1.8 2.1a32.12 32.12 0 0 0 35.1 9.5l81.8-29.1c29.8 24.5 63 43.9 98.9 57.3l15.8 85.3a32.05 32.05 0 0 0 25.8 25.7l2.7.5a448.27 448.27 0 0 0 158.8 0l2.7-.5a32.05 32.05 0 0 0 25.8-25.7l15.7-84.9c36.2-13.6 69.6-32.9 99.6-57.5l81.2 28.9a32 32 0 0 0 35.1-9.5l1.8-2.1c34.8-41.1 61.5-87.4 79.6-137.7l.9-2.6c4.3-12.4.6-26.3-9.5-35zm-412.3 52.2c-97.1 0-175.8-78.7-175.8-175.8s78.7-175.8 175.8-175.8 175.8 78.7 175.8 175.8-78.7 175.8-175.8 175.8z'));
  exports.ShopFill = getIcon('shop', fill, getNode(newViewBox, 'M882 272.1V144c0-17.7-14.3-32-32-32H174c-17.7 0-32 14.3-32 32v128.1c-16.7 1-30 14.9-30 31.9v131.7a177 177 0 0 0 14.4 70.4c4.3 10.2 9.6 19.8 15.6 28.9v345c0 17.6 14.3 32 32 32h274V736h128v176h274c17.7 0 32-14.3 32-32V535a175 175 0 0 0 15.6-28.9c9.5-22.3 14.4-46 14.4-70.4V304c0-17-13.3-30.9-30-31.9zm-72 568H640V704c0-17.7-14.3-32-32-32H416c-17.7 0-32 14.3-32 32v136.1H214V597.9c2.9 1.4 5.9 2.8 9 4 22.3 9.4 46 14.1 70.4 14.1s48-4.7 70.4-14.1c13.8-5.8 26.8-13.2 38.7-22.1.2-.1.4-.1.6 0a180.4 180.4 0 0 0 38.7 22.1c22.3 9.4 46 14.1 70.4 14.1 24.4 0 48-4.7 70.4-14.1 13.8-5.8 26.8-13.2 38.7-22.1.2-.1.4-.1.6 0a180.4 180.4 0 0 0 38.7 22.1c22.3 9.4 46 14.1 70.4 14.1 24.4 0 48-4.7 70.4-14.1 3-1.3 6-2.6 9-4v242.2zm0-568.1H214v-88h596v88z'));
  exports.ShoppingFill = getIcon('shopping', fill, getNode(newViewBox, 'M832 312H696v-16c0-101.6-82.4-184-184-184s-184 82.4-184 184v16H192c-17.7 0-32 14.3-32 32v536c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V344c0-17.7-14.3-32-32-32zm-208 0H400v-16c0-61.9 50.1-112 112-112s112 50.1 112 112v16z'));
  exports.SketchCircleFill = getIcon('sketch-circle', fill, getNode(newViewBox, 'M582.3 625.6l147.9-166.3h-63.4zm90-202.3h62.5l-92.1-115.1zm-274.7 36L512 684.5l114.4-225.2zM512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm286.7 380.2L515.8 762.3c-1 1.1-2.4 1.7-3.8 1.7s-2.8-.6-3.8-1.7L225.3 444.2a5.14 5.14 0 0 1-.2-6.6L365.6 262c1-1.2 2.4-1.9 4-1.9h284.6c1.6 0 3 .7 4 1.9l140.5 175.6a4.9 4.9 0 0 1 0 6.6zm-190.5-20.9L512 326.1l-96.2 97.2zM420.3 301.1l-23.1 89.8 88.8-89.8zm183.4 0H538l88.8 89.8zm-222.4 7.1l-92.1 115.1h62.5zm-87.5 151.1l147.9 166.3-84.5-166.3z'));
  exports.SketchSquareFill = getIcon('sketch-square', fill, getNode(newViewBox, 'M608.2 423.3L512 326.1l-96.2 97.2zm-25.9 202.3l147.9-166.3h-63.4zm90-202.3h62.5l-92.1-115.1zM880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-81.3 332.2L515.8 762.3c-1 1.1-2.4 1.7-3.8 1.7s-2.8-.6-3.8-1.7L225.3 444.2a5.14 5.14 0 0 1-.2-6.6L365.6 262c1-1.2 2.4-1.9 4-1.9h284.6c1.6 0 3 .7 4 1.9l140.5 175.6a4.9 4.9 0 0 1 0 6.6zm-401.1 15.1L512 684.5l114.4-225.2zm-16.3-151.1l-92.1 115.1h62.5zm-87.5 151.1l147.9 166.3-84.5-166.3zm126.5-158.2l-23.1 89.8 88.8-89.8zm183.4 0H538l88.8 89.8z'));
  exports.SkinFill = getIcon('skin', fill, getNode(newViewBox, 'M870 126H663.8c-17.4 0-32.9 11.9-37 29.3C614.3 208.1 567 246 512 246s-102.3-37.9-114.8-90.7a37.93 37.93 0 0 0-37-29.3H154a44 44 0 0 0-44 44v252a44 44 0 0 0 44 44h75v388a44 44 0 0 0 44 44h478a44 44 0 0 0 44-44V466h75a44 44 0 0 0 44-44V170a44 44 0 0 0-44-44z'));
  exports.SlackCircleFill = getIcon('slack-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zM361.5 580.2c0 27.8-22.5 50.4-50.3 50.4a50.35 50.35 0 0 1-50.3-50.4c0-27.8 22.5-50.4 50.3-50.4h50.3v50.4zm134 134.4c0 27.8-22.5 50.4-50.3 50.4-27.8 0-50.3-22.6-50.3-50.4V580.2c0-27.8 22.5-50.4 50.3-50.4a50.35 50.35 0 0 1 50.3 50.4v134.4zm-50.2-218.4h-134c-27.8 0-50.3-22.6-50.3-50.4 0-27.8 22.5-50.4 50.3-50.4h134c27.8 0 50.3 22.6 50.3 50.4-.1 27.9-22.6 50.4-50.3 50.4zm0-134.4c-13.3 0-26.1-5.3-35.6-14.8S395 324.8 395 311.4c0-27.8 22.5-50.4 50.3-50.4 27.8 0 50.3 22.6 50.3 50.4v50.4h-50.3zm83.7-50.4c0-27.8 22.5-50.4 50.3-50.4 27.8 0 50.3 22.6 50.3 50.4v134.4c0 27.8-22.5 50.4-50.3 50.4-27.8 0-50.3-22.6-50.3-50.4V311.4zM579.3 765c-27.8 0-50.3-22.6-50.3-50.4v-50.4h50.3c27.8 0 50.3 22.6 50.3 50.4 0 27.8-22.5 50.4-50.3 50.4zm134-134.4h-134c-13.3 0-26.1-5.3-35.6-14.8S529 593.6 529 580.2c0-27.8 22.5-50.4 50.3-50.4h134c27.8 0 50.3 22.6 50.3 50.4 0 27.8-22.5 50.4-50.3 50.4zm0-134.4H663v-50.4c0-27.8 22.5-50.4 50.3-50.4s50.3 22.6 50.3 50.4c0 27.8-22.5 50.4-50.3 50.4z'));
  exports.SlackSquareFill = getIcon('slack-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM529 311.4c0-27.8 22.5-50.4 50.3-50.4 27.8 0 50.3 22.6 50.3 50.4v134.4c0 27.8-22.5 50.4-50.3 50.4-27.8 0-50.3-22.6-50.3-50.4V311.4zM361.5 580.2c0 27.8-22.5 50.4-50.3 50.4a50.35 50.35 0 0 1-50.3-50.4c0-27.8 22.5-50.4 50.3-50.4h50.3v50.4zm134 134.4c0 27.8-22.5 50.4-50.3 50.4-27.8 0-50.3-22.6-50.3-50.4V580.2c0-27.8 22.5-50.4 50.3-50.4a50.35 50.35 0 0 1 50.3 50.4v134.4zm-50.2-218.4h-134c-27.8 0-50.3-22.6-50.3-50.4 0-27.8 22.5-50.4 50.3-50.4h134c27.8 0 50.3 22.6 50.3 50.4-.1 27.9-22.6 50.4-50.3 50.4zm0-134.4c-13.3 0-26.1-5.3-35.6-14.8S395 324.8 395 311.4c0-27.8 22.5-50.4 50.3-50.4 27.8 0 50.3 22.6 50.3 50.4v50.4h-50.3zm134 403.2c-27.8 0-50.3-22.6-50.3-50.4v-50.4h50.3c27.8 0 50.3 22.6 50.3 50.4 0 27.8-22.5 50.4-50.3 50.4zm134-134.4h-134a50.35 50.35 0 0 1-50.3-50.4c0-27.8 22.5-50.4 50.3-50.4h134c27.8 0 50.3 22.6 50.3 50.4 0 27.8-22.5 50.4-50.3 50.4zm0-134.4H663v-50.4c0-27.8 22.5-50.4 50.3-50.4s50.3 22.6 50.3 50.4c0 27.8-22.5 50.4-50.3 50.4z'));
  exports.SkypeFill = getIcon('skype', fill, getNode(newViewBox, 'M883.7 578.6c4.1-22.5 6.3-45.5 6.3-68.5 0-51-10-100.5-29.7-147-19-45-46.3-85.4-81-120.1a375.79 375.79 0 0 0-120.1-80.9c-46.6-19.7-96-29.7-147-29.7-24 0-48.1 2.3-71.5 6.8A225.1 225.1 0 0 0 335.6 113c-59.7 0-115.9 23.3-158.1 65.5A222.25 222.25 0 0 0 112 336.6c0 38 9.8 75.4 28.1 108.4-3.7 21.4-5.7 43.3-5.7 65.1 0 51 10 100.5 29.7 147 19 45 46.2 85.4 80.9 120.1 34.7 34.7 75.1 61.9 120.1 80.9 46.6 19.7 96 29.7 147 29.7 22.2 0 44.4-2 66.2-5.9 33.5 18.9 71.3 29 110 29 59.7 0 115.9-23.2 158.1-65.5 42.3-42.2 65.5-98.4 65.5-158.1.1-38-9.7-75.5-28.2-108.7zm-370 162.9c-134.2 0-194.2-66-194.2-115.4 0-25.4 18.7-43.1 44.5-43.1 57.4 0 42.6 82.5 149.7 82.5 54.9 0 85.2-29.8 85.2-60.3 0-18.3-9-38.7-45.2-47.6l-119.4-29.8c-96.1-24.1-113.6-76.1-113.6-124.9 0-101.4 95.5-139.5 185.2-139.5 82.6 0 180 45.7 180 106.5 0 26.1-22.6 41.2-48.4 41.2-49 0-40-67.8-138.7-67.8-49 0-76.1 22.2-76.1 53.9s38.7 41.8 72.3 49.5l88.4 19.6c96.8 21.6 121.3 78.1 121.3 131.3 0 82.3-63.3 143.9-191 143.9z'));
  exports.SlidersFill = getIcon('sliders', fill, getNode(newViewBox, 'M904 296h-66v-96c0-4.4-3.6-8-8-8h-52c-4.4 0-8 3.6-8 8v96h-66c-4.4 0-8 3.6-8 8v416c0 4.4 3.6 8 8 8h66v96c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8v-96h66c4.4 0 8-3.6 8-8V304c0-4.4-3.6-8-8-8zm-584-72h-66v-56c0-4.4-3.6-8-8-8h-52c-4.4 0-8 3.6-8 8v56h-66c-4.4 0-8 3.6-8 8v560c0 4.4 3.6 8 8 8h66v56c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8v-56h66c4.4 0 8-3.6 8-8V232c0-4.4-3.6-8-8-8zm292 180h-66V232c0-4.4-3.6-8-8-8h-52c-4.4 0-8 3.6-8 8v172h-66c-4.4 0-8 3.6-8 8v200c0 4.4 3.6 8 8 8h66v172c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8V620h66c4.4 0 8-3.6 8-8V412c0-4.4-3.6-8-8-8z'));
  exports.SmileFill = getIcon('smile', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zM288 421a48.01 48.01 0 0 1 96 0 48.01 48.01 0 0 1-96 0zm224 272c-85.5 0-155.6-67.3-160-151.6a8 8 0 0 1 8-8.4h48.1c4.2 0 7.8 3.2 8.1 7.4C420 589.9 461.5 629 512 629s92.1-39.1 95.8-88.6c.3-4.2 3.9-7.4 8.1-7.4H664a8 8 0 0 1 8 8.4C667.6 625.7 597.5 693 512 693zm176-224a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'));
  exports.SnippetsFill = getIcon('snippets', fill, getNode(newViewBox, 'M832 112H724V72c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v40H500V72c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v40H320c-17.7 0-32 14.3-32 32v120h-96c-17.7 0-32 14.3-32 32v632c0 17.7 14.3 32 32 32h512c17.7 0 32-14.3 32-32v-96h96c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM664 486H514V336h.2L664 485.8v.2zm128 274h-56V456L544 264H360v-80h68v32c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-32h152v32c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-32h68v576z'));
  exports.SoundFill = getIcon('sound', fill, getNode(newViewBox, 'M892.1 737.8l-110.3-63.7a15.9 15.9 0 0 0-21.7 5.9l-19.9 34.5c-4.4 7.6-1.8 17.4 5.8 21.8L856.3 800a15.9 15.9 0 0 0 21.7-5.9l19.9-34.5c4.4-7.6 1.7-17.4-5.8-21.8zM760 344a15.9 15.9 0 0 0 21.7 5.9L892 286.2c7.6-4.4 10.2-14.2 5.8-21.8L878 230a15.9 15.9 0 0 0-21.7-5.9L746 287.8a15.99 15.99 0 0 0-5.8 21.8L760 344zm174 132H806c-8.8 0-16 7.2-16 16v40c0 8.8 7.2 16 16 16h128c8.8 0 16-7.2 16-16v-40c0-8.8-7.2-16-16-16zM625.9 115c-5.9 0-11.9 1.6-17.4 5.3L254 352H90c-8.8 0-16 7.2-16 16v288c0 8.8 7.2 16 16 16h164l354.5 231.7c5.5 3.6 11.6 5.3 17.4 5.3 16.7 0 32.1-13.3 32.1-32.1V147.1c0-18.8-15.4-32.1-32.1-32.1z'));
  exports.StarFill = getIcon('star', fill, getNode(newViewBox, 'M908.1 353.1l-253.9-36.9L540.7 86.1c-3.1-6.3-8.2-11.4-14.5-14.5-15.8-7.8-35-1.3-42.9 14.5L369.8 316.2l-253.9 36.9c-7 1-13.4 4.3-18.3 9.3a32.05 32.05 0 0 0 .6 45.3l183.7 179.1-43.4 252.9a31.95 31.95 0 0 0 46.4 33.7L512 754l227.1 119.4c6.2 3.3 13.4 4.4 20.3 3.2 17.4-3 29.1-19.5 26.1-36.9l-43.4-252.9 183.7-179.1c5-4.9 8.3-11.3 9.3-18.3 2.7-17.5-9.5-33.7-27-36.3z'));
  exports.StepBackwardFill = getIcon('step-backward', fill, getNode(normalViewBox, 'M347.6 528.95l383.2 301.02c14.25 11.2 35.2 1.1 35.2-16.95V210.97c0-18.05-20.95-28.14-35.2-16.94L347.6 495.05a21.53 21.53 0 0 0 0 33.9M330 864h-64a8 8 0 0 1-8-8V168a8 8 0 0 1 8-8h64a8 8 0 0 1 8 8v688a8 8 0 0 1-8 8'));
  exports.StepForwardFill = getIcon('step-forward', fill, getNode(normalViewBox, 'M676.4 528.95L293.2 829.97c-14.25 11.2-35.2 1.1-35.2-16.95V210.97c0-18.05 20.95-28.14 35.2-16.94l383.2 301.02a21.53 21.53 0 0 1 0 33.9M694 864h64a8 8 0 0 0 8-8V168a8 8 0 0 0-8-8h-64a8 8 0 0 0-8 8v688a8 8 0 0 0 8 8'));
  exports.StopFill = getIcon('stop', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm234.8 736.5L223.5 277.2c16-19.7 34-37.7 53.7-53.7l523.3 523.3c-16 19.6-34 37.7-53.7 53.7z'));
  exports.SwitcherFill = getIcon('switcher', fill, getNode(newViewBox, 'M752 240H144c-17.7 0-32 14.3-32 32v608c0 17.7 14.3 32 32 32h608c17.7 0 32-14.3 32-32V272c0-17.7-14.3-32-32-32zM596 606c0 4.4-3.6 8-8 8H308c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h280c4.4 0 8 3.6 8 8v48zm284-494H264c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h576v576c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V144c0-17.7-14.3-32-32-32z'));
  exports.TabletFill = getIcon('tablet', fill, getNode(newViewBox, 'M800 64H224c-35.3 0-64 28.7-64 64v768c0 35.3 28.7 64 64 64h576c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64zM512 824c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40z'));
  exports.TagFill = getIcon('tag', fill, getNode(newViewBox, 'M938 458.8l-29.6-312.6c-1.5-16.2-14.4-29-30.6-30.6L565.2 86h-.4c-3.2 0-5.7 1-7.6 2.9L88.9 557.2a9.96 9.96 0 0 0 0 14.1l363.8 363.8c1.9 1.9 4.4 2.9 7.1 2.9s5.2-1 7.1-2.9l468.3-468.3c2-2.1 3-5 2.8-8zM699 387c-35.3 0-64-28.7-64-64s28.7-64 64-64 64 28.7 64 64-28.7 64-64 64z'));
  exports.TagsFill = getIcon('tags', fill, getNode(newViewBox, 'M483.2 790.3L861.4 412c1.7-1.7 2.5-4 2.3-6.3l-25.5-301.4c-.7-7.8-6.8-13.9-14.6-14.6L522.2 64.3c-2.3-.2-4.7.6-6.3 2.3L137.7 444.8a8.03 8.03 0 0 0 0 11.3l334.2 334.2c3.1 3.2 8.2 3.2 11.3 0zm122.7-533.4c18.7-18.7 49.1-18.7 67.9 0 18.7 18.7 18.7 49.1 0 67.9-18.7 18.7-49.1 18.7-67.9 0-18.7-18.7-18.7-49.1 0-67.9zm283.8 282.9l-39.6-39.5a8.03 8.03 0 0 0-11.3 0l-362 361.3-237.6-237a8.03 8.03 0 0 0-11.3 0l-39.6 39.5a8.03 8.03 0 0 0 0 11.3l243.2 242.8 39.6 39.5c3.1 3.1 8.2 3.1 11.3 0l407.3-406.6c3.1-3.1 3.1-8.2 0-11.3z'));
  exports.TaobaoCircleFill = getIcon('taobao-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zM315.7 291.5c27.3 0 49.5 22.1 49.5 49.4s-22.1 49.4-49.5 49.4a49.4 49.4 0 1 1 0-98.8zM366.9 578c-13.6 42.3-10.2 26.7-64.4 144.5l-78.5-49s87.7-79.8 105.6-116.2c19.2-38.4-21.1-58.9-21.1-58.9l-60.2-37.5 32.7-50.2c45.4 33.7 48.7 36.6 79.2 67.2 23.8 23.9 20.7 56.8 6.7 100.1zm427.2 55c-15.3 143.8-202.4 90.3-202.4 90.3l10.2-41.1 43.3 9.3c80 5 72.3-64.9 72.3-64.9V423c.6-77.3-72.6-85.4-204.2-38.3l30.6 8.3c-2.5 9-12.5 23.2-25.2 38.6h176v35.6h-99.1v44.5h98.7v35.7h-98.7V622c14.9-4.8 28.6-11.5 40.5-20.5l-8.7-32.5 46.5-14.4 38.8 94.9-57.3 23.9-10.2-37.8c-25.6 19.5-78.8 48-171.8 45.4-99.2 2.6-73.7-112-73.7-112l2.5-1.3H472c-.5 14.7-6.6 38.7 1.7 51.8 6.8 10.8 24.2 12.6 35.3 13.1 1.3.1 2.6.1 3.9.1v-85.3h-101v-35.7h101v-44.5H487c-22.7 24.1-43.5 44.1-43.5 44.1l-30.6-26.7c21.7-22.9 43.3-59.1 56.8-83.2-10.9 4.4-22 9.2-33.6 14.2-11.2 14.3-24.2 29-38.7 43.5.5.8-50-28.4-50-28.4 52.2-44.4 81.4-139.9 81.4-139.9l72.5 20.4s-5.9 14-18.4 35.6c290.3-82.3 307.4 50.5 307.4 50.5s19.1 91.8 3.8 235.7z'));
  exports.TaobaoSquareFill = getIcon('taobao-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM315.7 291.5c27.3 0 49.5 22.1 49.5 49.4s-22.1 49.4-49.5 49.4a49.4 49.4 0 1 1 0-98.8zM366.9 578c-13.6 42.3-10.2 26.7-64.4 144.5l-78.5-49s87.7-79.8 105.6-116.2c19.2-38.4-21.1-58.9-21.1-58.9l-60.2-37.5 32.7-50.2c45.4 33.7 48.7 36.6 79.2 67.2 23.8 23.9 20.7 56.8 6.7 100.1zm427.2 55c-15.3 143.8-202.4 90.3-202.4 90.3l10.2-41.1 43.3 9.3c80 5 72.3-64.9 72.3-64.9V423c.6-77.3-72.6-85.4-204.2-38.3l30.6 8.3c-2.5 9-12.5 23.2-25.2 38.6h176v35.6h-99.1v44.5h98.7v35.7h-98.7V622c14.9-4.8 28.6-11.5 40.5-20.5l-8.7-32.5 46.5-14.4 38.8 94.9-57.3 23.9-10.2-37.8c-25.6 19.5-78.8 48-171.8 45.4-99.2 2.6-73.7-112-73.7-112l2.5-1.3H472c-.5 14.7-6.6 38.7 1.7 51.8 6.8 10.8 24.2 12.6 35.3 13.1 1.3.1 2.6.1 3.9.1v-85.3h-101v-35.7h101v-44.5H487c-22.7 24.1-43.5 44.1-43.5 44.1l-30.6-26.7c21.7-22.9 43.3-59.1 56.8-83.2-10.9 4.4-22 9.2-33.6 14.2-11.2 14.3-24.2 29-38.7 43.5.5.8-50-28.4-50-28.4 52.2-44.4 81.4-139.9 81.4-139.9l72.5 20.4s-5.9 14-18.4 35.6c290.3-82.3 307.4 50.5 307.4 50.5s19.1 91.8 3.8 235.7z'));
  exports.ToolFill = getIcon('tool', fill, getNode(newViewBox, 'M865.3 244.7c-.3-.3-61.1 59.8-182.1 180.6l-84.9-84.9 180.9-180.9c-95.2-57.3-217.5-42.6-296.8 36.7A244.42 244.42 0 0 0 419 432l1.8 6.7-283.5 283.4c-6.2 6.2-6.2 16.4 0 22.6l141.4 141.4c6.2 6.2 16.4 6.2 22.6 0l283.3-283.3 6.7 1.8c83.7 22.3 173.6-.9 236-63.3 79.4-79.3 94.1-201.6 38-296.6z'));
  exports.ThunderboltFill = getIcon('thunderbolt', fill, getNode(newViewBox, 'M848 359.3H627.7L825.8 109c4.1-5.3.4-13-6.3-13H436c-2.8 0-5.5 1.5-6.9 4L170 547.5c-3.1 5.3.7 12 6.9 12h174.4l-89.4 357.6c-1.9 7.8 7.5 13.3 13.3 7.7L853.5 373c5.2-4.9 1.7-13.7-5.5-13.7z'));
  exports.TrademarkCircleFill = getIcon('trademark-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm164.7 660.2c-1.1.5-2.3.8-3.5.8h-62c-3.1 0-5.9-1.8-7.2-4.6l-74.6-159.2h-88.7V717c0 4.4-3.6 8-8 8H378c-4.4 0-8-3.6-8-8V307c0-4.4 3.6-8 8-8h155.6c98.8 0 144.2 59.9 144.2 131.1 0 70.2-43.6 106.4-78.4 119.2l80.8 164.2c2.1 3.9.4 8.7-3.5 10.7zM523.9 357h-83.4v148H522c53 0 82.8-25.6 82.8-72.4 0-50.3-32.9-75.6-80.9-75.6z'));
  exports.TwitterCircleFill = getIcon('twitter-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm215.3 337.7c.3 4.7.3 9.6.3 14.4 0 146.8-111.8 315.9-316.1 315.9-63 0-121.4-18.3-170.6-49.8 9 1 17.6 1.4 26.8 1.4 52 0 99.8-17.6 137.9-47.4-48.8-1-89.8-33-103.8-77 17.1 2.5 32.5 2.5 50.1-2a111 111 0 0 1-88.9-109v-1.4c14.7 8.3 32 13.4 50.1 14.1a111.13 111.13 0 0 1-49.5-92.4c0-20.7 5.4-39.6 15.1-56a315.28 315.28 0 0 0 229 116.1C492 353.1 548.4 292 616.2 292c32 0 60.8 13.4 81.1 35 25.1-4.7 49.1-14.1 70.5-26.7-8.3 25.7-25.7 47.4-48.8 61.1 22.4-2.4 44-8.6 64-17.3-15.1 22.2-34 41.9-55.7 57.6z'));
  exports.TrophyFill = getIcon('trophy', fill, getNode(newViewBox, 'M868 160h-92v-40c0-4.4-3.6-8-8-8H256c-4.4 0-8 3.6-8 8v40h-92a44 44 0 0 0-44 44v148c0 81.7 60 149.6 138.2 162C265.6 630.2 359 721.8 476 734.5v105.2H280c-17.7 0-32 14.3-32 32V904c0 4.4 3.6 8 8 8h512c4.4 0 8-3.6 8-8v-32.3c0-17.7-14.3-32-32-32H548V734.5C665 721.8 758.4 630.2 773.8 514 852 501.6 912 433.7 912 352V204a44 44 0 0 0-44-44zM248 439.6c-37.1-11.9-64-46.7-64-87.6V232h64v207.6zM840 352c0 41-26.9 75.8-64 87.6V232h64v120z'));
  exports.TwitterSquareFill = getIcon('twitter-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM727.3 401.7c.3 4.7.3 9.6.3 14.4 0 146.8-111.8 315.9-316.1 315.9-63 0-121.4-18.3-170.6-49.8 9 1 17.6 1.4 26.8 1.4 52 0 99.8-17.6 137.9-47.4-48.8-1-89.8-33-103.8-77 17.1 2.5 32.5 2.5 50.1-2a111 111 0 0 1-88.9-109v-1.4c14.7 8.3 32 13.4 50.1 14.1a111.13 111.13 0 0 1-49.5-92.4c0-20.7 5.4-39.6 15.1-56a315.28 315.28 0 0 0 229 116.1C492 353.1 548.4 292 616.2 292c32 0 60.8 13.4 81.1 35 25.1-4.7 49.1-14.1 70.5-26.7-8.3 25.7-25.7 47.4-48.8 61.1 22.4-2.4 44-8.6 64-17.3-15.1 22.2-34 41.9-55.7 57.6z'));
  exports.UnlockFill = getIcon('unlock', fill, getNode(newViewBox, 'M832 464H332V240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v68c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-68c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zM540 701v53c0 4.4-3.6 8-8 8h-40c-4.4 0-8-3.6-8-8v-53a48.01 48.01 0 1 1 56 0z'));
  exports.UpCircleFill = getIcon('up-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm178 555h-46.9c-10.2 0-19.9-4.9-25.9-13.2L512 460.4 406.8 605.8c-6 8.3-15.6 13.2-25.9 13.2H334c-6.5 0-10.3-7.4-6.5-12.7l178-246c3.2-4.4 9.7-4.4 12.9 0l178 246c3.9 5.3.1 12.7-6.4 12.7z'));
  exports.UpSquareFill = getIcon('up-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM690 624h-46.9c-10.2 0-19.9-4.9-25.9-13.2L512 465.4 406.8 610.8c-6 8.3-15.6 13.2-25.9 13.2H334c-6.5 0-10.3-7.4-6.5-12.7l178-246c3.2-4.4 9.7-4.4 12.9 0l178 246c3.9 5.3.1 12.7-6.4 12.7z'));
  exports.UsbFill = getIcon('usb', fill, getNode(newViewBox, 'M408 312h48c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8zm352 120V144c0-17.7-14.3-32-32-32H296c-17.7 0-32 14.3-32 32v288c-66.2 0-120 52.1-120 116v356c0 4.4 3.6 8 8 8h720c4.4 0 8-3.6 8-8V548c0-63.9-53.8-116-120-116zm-72 0H336V184h352v248zM568 312h48c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z'));
  exports.WalletFill = getIcon('wallet', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-32 464H528V448h320v128zm-268-64a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'));
  exports.VideoCameraFill = getIcon('video-camera', fill, getNode(newViewBox, 'M912 302.3L784 376V224c0-35.3-28.7-64-64-64H128c-35.3 0-64 28.7-64 64v576c0 35.3 28.7 64 64 64h592c35.3 0 64-28.7 64-64V648l128 73.7c21.3 12.3 48-3.1 48-27.6V330c0-24.6-26.7-40-48-27.7zM328 352c0 4.4-3.6 8-8 8H208c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h112c4.4 0 8 3.6 8 8v48zm560 273l-104-59.8V458.9L888 399v226z'));
  exports.WarningFill = getIcon('warning', fill, getNode(newViewBox, 'M955.7 856l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zM480 416c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v184c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V416zm32 352a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'));
  exports.WeiboCircleFill = getIcon('weibo-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-44.4 672C353.1 736 236 680.4 236 588.9c0-47.8 30.2-103.1 82.3-155.3 69.5-69.6 150.6-101.4 181.1-70.8 13.5 13.5 14.8 36.8 6.1 64.6-4.5 14 13.1 6.3 13.1 6.3 56.2-23.6 105.2-25 123.1.7 9.6 13.7 8.6 32.8-.2 55.1-4.1 10.2 1.3 11.8 9 14.1 31.7 9.8 66.9 33.6 66.9 75.5.2 69.5-99.7 156.9-249.8 156.9zm207.3-290.8a34.9 34.9 0 0 0-7.2-34.1 34.68 34.68 0 0 0-33.1-10.7 18.24 18.24 0 0 1-7.6-35.7c24.1-5.1 50.1 2.3 67.7 21.9 17.7 19.6 22.4 46.3 14.9 69.8a18.13 18.13 0 0 1-22.9 11.7 18.18 18.18 0 0 1-11.8-22.9zm106 34.3s0 .1 0 0a21.1 21.1 0 0 1-26.6 13.7 21.19 21.19 0 0 1-13.6-26.7c11-34.2 4-73.2-21.7-101.8a104.04 104.04 0 0 0-98.9-32.1 21.14 21.14 0 0 1-25.1-16.3 21.07 21.07 0 0 1 16.2-25.1c49.4-10.5 102.8 4.8 139.1 45.1 36.3 40.2 46.1 95.1 30.6 143.2zm-334.5 6.1c-91.4 9-160.7 65.1-154.7 125.2 5.9 60.1 84.8 101.5 176.2 92.5 91.4-9.1 160.7-65.1 154.7-125.3-5.9-60.1-84.8-101.5-176.2-92.4zm80.2 141.7c-18.7 42.3-72.3 64.8-117.8 50.1-43.9-14.2-62.5-57.7-43.3-96.8 18.9-38.4 68-60.1 111.5-48.8 45 11.7 68 54.2 49.6 95.5zm-93-32.2c-14.2-5.9-32.4.2-41.2 13.9-8.8 13.8-4.7 30.2 9.3 36.6 14.3 6.5 33.2.3 42-13.8 8.8-14.3 4.2-30.6-10.1-36.7zm34.9-14.5c-5.4-2.2-12.2.5-15.4 5.8-3.1 5.4-1.4 11.5 4.1 13.8 5.5 2.3 12.6-.3 15.8-5.8 3-5.6 1-11.8-4.5-13.8z'));
  exports.WechatFill = getIcon('wechat', fill, getNode(newViewBox, 'M690.1 377.4c5.9 0 11.8.2 17.6.5-24.4-128.7-158.3-227.1-319.9-227.1C209 150.8 64 271.4 64 420.2c0 81.1 43.6 154.2 111.9 203.6a21.5 21.5 0 0 1 9.1 17.6c0 2.4-.5 4.6-1.1 6.9-5.5 20.3-14.2 52.8-14.6 54.3-.7 2.6-1.7 5.2-1.7 7.9 0 5.9 4.8 10.8 10.8 10.8 2.3 0 4.2-.9 6.2-2l70.9-40.9c5.3-3.1 11-5 17.2-5 3.2 0 6.4.5 9.5 1.4 33.1 9.5 68.8 14.8 105.7 14.8 6 0 11.9-.1 17.8-.4-7.1-21-10.9-43.1-10.9-66 0-135.8 132.2-245.8 295.3-245.8zm-194.3-86.5c23.8 0 43.2 19.3 43.2 43.1s-19.3 43.1-43.2 43.1c-23.8 0-43.2-19.3-43.2-43.1s19.4-43.1 43.2-43.1zm-215.9 86.2c-23.8 0-43.2-19.3-43.2-43.1s19.3-43.1 43.2-43.1 43.2 19.3 43.2 43.1-19.4 43.1-43.2 43.1zm586.8 415.6c56.9-41.2 93.2-102 93.2-169.7 0-124-120.8-224.5-269.9-224.5-149 0-269.9 100.5-269.9 224.5S540.9 847.5 690 847.5c30.8 0 60.6-4.4 88.1-12.3 2.6-.8 5.2-1.2 7.9-1.2 5.2 0 9.9 1.6 14.3 4.1l59.1 34c1.7 1 3.3 1.7 5.2 1.7a9 9 0 0 0 6.4-2.6 9 9 0 0 0 2.6-6.4c0-2.2-.9-4.4-1.4-6.6-.3-1.2-7.6-28.3-12.2-45.3-.5-1.9-.9-3.8-.9-5.7.1-5.9 3.1-11.2 7.6-14.5zM600.2 587.2c-19.9 0-36-16.1-36-35.9 0-19.8 16.1-35.9 36-35.9s36 16.1 36 35.9c0 19.8-16.2 35.9-36 35.9zm179.9 0c-19.9 0-36-16.1-36-35.9 0-19.8 16.1-35.9 36-35.9s36 16.1 36 35.9a36.08 36.08 0 0 1-36 35.9z'));
  exports.WindowsFill = getIcon('windows', fill, getNode(newViewBox, 'M523.8 191.4v288.9h382V128.1zm0 642.2l382 62.2v-352h-382zM120.1 480.2H443V201.9l-322.9 53.5zm0 290.4L443 823.2V543.8H120.1z'));
  exports.YahooFill = getIcon('yahoo', fill, getNode(newViewBox, 'M937.3 231H824.7c-15.5 0-27.7 12.6-27.1 28.1l13.1 366h84.4l65.4-366.4c2.7-15.2-7.8-27.7-23.2-27.7zm-77.4 450.4h-14.1c-27.1 0-49.2 22.2-49.2 49.3v14.1c0 27.1 22.2 49.3 49.2 49.3h14.1c27.1 0 49.2-22.2 49.2-49.3v-14.1c0-27.1-22.2-49.3-49.2-49.3zM402.6 231C216.2 231 65 357 65 512.5S216.2 794 402.6 794s337.6-126 337.6-281.5S589.1 231 402.6 231zm225.2 225.2h-65.3L458.9 559.8v65.3h84.4v56.3H318.2v-56.3h84.4v-65.3L242.9 399.9h-37v-56.3h168.5v56.3h-37l93.4 93.5 28.1-28.1V400h168.8v56.2z'));
  exports.WeiboSquareFill = getIcon('weibo-square', fill, getNode(newViewBox, 'M433.6 595.1c-14.2-5.9-32.4.2-41.2 13.9-8.8 13.8-4.7 30.2 9.3 36.6 14.3 6.5 33.2.3 42-13.8 8.8-14.3 4.2-30.6-10.1-36.7zM880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM467.6 736C353.1 736 236 680.4 236 588.9c0-47.8 30.2-103.1 82.3-155.3 69.5-69.6 150.6-101.4 181.1-70.8 13.5 13.5 14.8 36.8 6.1 64.6-4.5 14 13.1 6.3 13.1 6.3 56.2-23.6 105.2-25 123.1.7 9.6 13.7 8.6 32.8-.2 55.1-4.1 10.2 1.3 11.8 9 14.1 31.7 9.8 66.9 33.6 66.9 75.5.2 69.5-99.7 156.9-249.8 156.9zm207.3-290.8a34.9 34.9 0 0 0-7.2-34.1 34.68 34.68 0 0 0-33.1-10.7 18.24 18.24 0 0 1-7.6-35.7c24.1-5.1 50.1 2.3 67.7 21.9 17.7 19.6 22.4 46.3 14.9 69.8a18.13 18.13 0 0 1-22.9 11.7 18.18 18.18 0 0 1-11.8-22.9zm106 34.3s0 .1 0 0a21.1 21.1 0 0 1-26.6 13.7 21.19 21.19 0 0 1-13.6-26.7c11-34.2 4-73.2-21.7-101.8a104.04 104.04 0 0 0-98.9-32.1 21.14 21.14 0 0 1-25.1-16.3 21.07 21.07 0 0 1 16.2-25.1c49.4-10.5 102.8 4.8 139.1 45.1 36.3 40.2 46.1 95.1 30.6 143.2zm-334.5 6.1c-91.4 9-160.7 65.1-154.7 125.2 5.9 60.1 84.8 101.5 176.2 92.5 91.4-9.1 160.7-65.1 154.7-125.3-5.9-60.1-84.8-101.5-176.2-92.4zm80.2 141.7c-18.7 42.3-72.3 64.8-117.8 50.1-43.9-14.2-62.5-57.7-43.3-96.8 18.9-38.4 68-60.1 111.5-48.8 45 11.7 68 54.2 49.6 95.5zm-58.1-46.7c-5.4-2.2-12.2.5-15.4 5.8-3.1 5.4-1.4 11.5 4.1 13.8 5.5 2.3 12.6-.3 15.8-5.8 3-5.6 1-11.8-4.5-13.8z'));
  exports.YuqueFill = getIcon('yuque', fill, getNode(newViewBox, 'M854.6 370.6c-9.9-39.4 9.9-102.2 73.4-124.4l-67.9-3.6s-25.7-90-143.6-98c-117.9-8.1-195-3-195-3s87.4 55.6 52.4 154.7c-25.6 52.5-65.8 95.6-108.8 144.7-1.3 1.3-2.5 2.6-3.5 3.7C319.4 605 96 860 96 860c245.9 64.4 410.7-6.3 508.2-91.1 20.5-.2 35.9-.3 46.3-.3 135.8 0 250.6-117.6 245.9-248.4-3.2-89.9-31.9-110.2-41.8-149.6z'));
  exports.YoutubeFill = getIcon('youtube', fill, getNode(newViewBox, 'M941.3 296.1a112.3 112.3 0 0 0-79.2-79.3C792.2 198 512 198 512 198s-280.2 0-350.1 18.7A112.12 112.12 0 0 0 82.7 296C64 366 64 512 64 512s0 146 18.7 215.9c10.3 38.6 40.7 69 79.2 79.3C231.8 826 512 826 512 826s280.2 0 350.1-18.8c38.6-10.3 68.9-40.7 79.2-79.3C960 658 960 512 960 512s0-146-18.7-215.9zM423 646V378l232 133-232 135z'));
  exports.ZhihuSquareFill = getIcon('zhihu-square', fill, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM432.3 592.8l71 80.7c9.2 33-3.3 63.1-3.3 63.1l-95.7-111.9v-.1c-8.9 29-20.1 57.3-33.3 84.7-22.6 45.7-55.2 54.7-89.5 57.7-34.4 3-23.3-5.3-23.3-5.3 68-55.5 78-87.8 96.8-123.1 11.9-22.3 20.4-64.3 25.3-96.8H264.1s4.8-31.2 19.2-41.7h101.6c.6-15.3-1.3-102.8-2-131.4h-49.4c-9.2 45-41 56.7-48.1 60.1-7 3.4-23.6 7.1-21.1 0 2.6-7.1 27-46.2 43.2-110.7 16.3-64.6 63.9-62 63.9-62-12.8 22.5-22.4 73.6-22.4 73.6h159.7c10.1 0 10.6 39 10.6 39h-90.8c-.7 22.7-2.8 83.8-5 131.4H519s12.2 15.4 12.2 41.7h-110l-.1 1.5c-1.5 20.4-6.3 43.9-12.9 67.6l24.1-18.1zm335.5 116h-87.6l-69.5 46.6-16.4-46.6h-40.1V321.5h213.6v387.3zM408.2 611s0-.1 0 0zm216 94.3l56.8-38.1h45.6-.1V364.7H596.7v302.5h14.1z'));
  exports.ZhihuCircleFill = getIcon('zhihu-circle', fill, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-90.7 477.8l-.1 1.5c-1.5 20.4-6.3 43.9-12.9 67.6l24-18.1 71 80.7c9.2 33-3.3 63.1-3.3 63.1l-95.7-111.9v-.1c-8.9 29-20.1 57.3-33.3 84.7-22.6 45.7-55.2 54.7-89.5 57.7-34.4 3-23.3-5.3-23.3-5.3 68-55.5 78-87.8 96.8-123.1 11.9-22.3 20.4-64.3 25.3-96.8H264.1s4.8-31.2 19.2-41.7h101.6c.6-15.3-1.3-102.8-2-131.4h-49.4c-9.2 45-41 56.7-48.1 60.1-7 3.4-23.6 7.1-21.1 0 2.6-7.1 27-46.2 43.2-110.7 16.3-64.6 63.9-62 63.9-62-12.8 22.5-22.4 73.6-22.4 73.6h159.7c10.1 0 10.6 39 10.6 39h-90.8c-.7 22.7-2.8 83.8-5 131.4H519s12.2 15.4 12.2 41.7H421.3zm346.5 167h-87.6l-69.5 46.6-16.4-46.6h-40.1V321.5h213.6v387.3zM408.2 611s0-.1 0 0zm216 94.3l56.8-38.1h45.6-.1V364.7H596.7v302.5h14.1z'));
  exports.AccountBookOutline = getIcon('account-book', outline, getNode(newViewBox, 'M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v584zM639.5 414h-45c-3 0-5.8 1.7-7.1 4.4L514 563.8h-2.8l-73.4-145.4a8 8 0 0 0-7.1-4.4h-46c-1.3 0-2.7.3-3.8 1-3.9 2.1-5.3 7-3.2 10.9l89.3 164h-48.6c-4.4 0-8 3.6-8 8v21.3c0 4.4 3.6 8 8 8h65.1v33.7h-65.1c-4.4 0-8 3.6-8 8v21.3c0 4.4 3.6 8 8 8h65.1V752c0 4.4 3.6 8 8 8h41.3c4.4 0 8-3.6 8-8v-53.8h65.4c4.4 0 8-3.6 8-8v-21.3c0-4.4-3.6-8-8-8h-65.4v-33.7h65.4c4.4 0 8-3.6 8-8v-21.3c0-4.4-3.6-8-8-8h-49.1l89.3-164.1c.6-1.2 1-2.5 1-3.8.1-4.4-3.4-8-7.9-8z'));
  exports.AlertOutline = getIcon('alert', outline, getNode(newViewBox, 'M193 796c0 17.7 14.3 32 32 32h574c17.7 0 32-14.3 32-32V563c0-176.2-142.8-319-319-319S193 386.8 193 563v233zm72-233c0-136.4 110.6-247 247-247s247 110.6 247 247v193H404V585c0-5.5-4.5-10-10-10h-44c-5.5 0-10 4.5-10 10v171h-75V563zm-48.1-252.5l39.6-39.6c3.1-3.1 3.1-8.2 0-11.3l-67.9-67.9a8.03 8.03 0 0 0-11.3 0l-39.6 39.6a8.03 8.03 0 0 0 0 11.3l67.9 67.9c3.1 3.1 8.1 3.1 11.3 0zm669.6-79.2l-39.6-39.6a8.03 8.03 0 0 0-11.3 0l-67.9 67.9a8.03 8.03 0 0 0 0 11.3l39.6 39.6c3.1 3.1 8.2 3.1 11.3 0l67.9-67.9c3.1-3.2 3.1-8.2 0-11.3zM832 892H192c-17.7 0-32 14.3-32 32v24c0 4.4 3.6 8 8 8h688c4.4 0 8-3.6 8-8v-24c0-17.7-14.3-32-32-32zM484 180h56c4.4 0 8-3.6 8-8V76c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v96c0 4.4 3.6 8 8 8z'));
  exports.AlipayCircleOutline = getIcon('alipay-circle', outline, getNode(newViewBox, 'M308.6 545.7c-19.8 2-57.1 10.7-77.4 28.6-61 53-24.5 150 99 150 71.8 0 143.5-45.7 199.8-119-80.2-38.9-148.1-66.8-221.4-59.6zm460.5 67c100.1 33.4 154.7 43 166.7 44.8A445.9 445.9 0 0 0 960 512c0-247.4-200.6-448-448-448S64 264.6 64 512s200.6 448 448 448c155.9 0 293.2-79.7 373.5-200.5-75.6-29.8-213.6-85-286.8-120.1-69.9 85.7-160.1 137.8-253.7 137.8-158.4 0-212.1-138.1-137.2-229 16.3-19.8 44.2-38.7 87.3-49.4 67.5-16.5 175 10.3 275.7 43.4 18.1-33.3 33.4-69.9 44.7-108.9H305.1V402h160v-56.2H271.3v-31.3h193.8v-80.1s0-13.5 13.7-13.5H557v93.6h191.7v31.3H557.1V402h156.4c-15 61.1-37.7 117.4-66.2 166.8 47.5 17.1 90.1 33.3 121.8 43.9z'));
  exports.AliwangwangOutline = getIcon('aliwangwang', outline, getNode(newViewBox, 'M868.2 377.4c-18.9-45.1-46.3-85.6-81.2-120.6a377.26 377.26 0 0 0-120.5-81.2A375.65 375.65 0 0 0 519 145.8c-41.9 0-82.9 6.7-121.9 20C306 123.3 200.8 120 170.6 120c-2.2 0-7.4 0-9.4.2-11.9.4-22.8 6.5-29.2 16.4-6.5 9.9-7.7 22.4-3.4 33.5l64.3 161.6a378.59 378.59 0 0 0-52.8 193.2c0 51.4 10 101 29.8 147.6 18.9 45 46.2 85.6 81.2 120.5 34.7 34.8 75.4 62.1 120.5 81.2C418.3 894 467.9 904 519 904c51.3 0 100.9-10.1 147.7-29.8 44.9-18.9 85.5-46.3 120.4-81.2 34.7-34.8 62.1-75.4 81.2-120.6a376.5 376.5 0 0 0 29.8-147.6c-.2-51.2-10.1-100.8-29.9-147.4zm-66.4 266.5a307.08 307.08 0 0 1-65.9 98c-28.4 28.5-61.3 50.7-97.7 65.9h-.1c-38 16-78.3 24.2-119.9 24.2a306.51 306.51 0 0 1-217.5-90.2c-28.4-28.5-50.6-61.4-65.8-97.8v-.1c-16-37.8-24.1-78.2-24.1-119.9 0-55.4 14.8-109.7 42.8-157l13.2-22.1-9.5-23.9L206 192c14.9.6 35.9 2.1 59.7 5.6 43.8 6.5 82.5 17.5 114.9 32.6l19 8.9 19.9-6.8c31.5-10.8 64.8-16.2 98.9-16.2a306.51 306.51 0 0 1 217.5 90.2c28.4 28.5 50.6 61.4 65.8 97.8l.1.1.1.1c16 37.6 24.1 78 24.2 119.8-.1 41.7-8.3 82-24.3 119.8zM681.1 364.2c-20.4 0-37.1 16.7-37.1 37.1v55.1c0 20.4 16.6 37.1 37.1 37.1s37.1-16.7 37.1-37.1v-55.1c0-20.5-16.7-37.1-37.1-37.1zm-175.2 0c-20.5 0-37.1 16.7-37.1 37.1v55.1c0 20.4 16.7 37.1 37.1 37.1 20.5 0 37.1-16.7 37.1-37.1v-55.1c0-20.5-16.7-37.1-37.1-37.1z'));
  exports.AndroidOutline = getIcon('android', outline, getNode(newViewBox, 'M448.3 225.2c-18.6 0-32 13.4-32 31.9s13.5 31.9 32 31.9c18.6 0 32-13.4 32-31.9.1-18.4-13.4-31.9-32-31.9zm393.9 96.4c-13.8-13.8-32.7-21.5-53.2-21.5-3.9 0-7.4.4-10.7 1v-1h-3.6c-5.5-30.6-18.6-60.5-38.1-87.4-18.7-25.7-43-47.9-70.8-64.9l25.1-35.8v-3.3c0-.8.4-2.3.7-3.8.6-2.4 1.4-5.5 1.4-8.9 0-18.5-13.5-31.9-32-31.9-9.8 0-19.5 5.7-25.9 15.4l-29.3 42.1c-30-9.8-62.4-15-93.8-15-31.3 0-63.7 5.2-93.8 15L389 79.4c-6.6-9.6-16.1-15.4-26-15.4-18.6 0-32 13.4-32 31.9 0 6.2 2.5 12.8 6.7 17.4l22.6 32.3c-28.7 17-53.5 39.4-72.2 65.1-19.4 26.9-32 56.8-36.7 87.4h-5.5v1c-3.2-.6-6.7-1-10.7-1-20.3 0-39.2 7.5-53.1 21.3-13.8 13.8-21.5 32.6-21.5 53v235c0 20.3 7.5 39.1 21.4 52.9 13.8 13.8 32.8 21.5 53.2 21.5 3.9 0 7.4-.4 10.7-1v93.5c0 29.2 23.9 53.1 53.2 53.1H331v58.3c0 20.3 7.5 39.1 21.4 52.9 13.8 13.8 32.8 21.5 53.2 21.5 20.3 0 39.2-7.5 53.1-21.3 13.8-13.8 21.5-32.6 21.5-53v-58.2H544v58.1c0 20.3 7.5 39.1 21.4 52.9 13.8 13.8 32.8 21.5 53.2 21.5 20.4 0 39.2-7.5 53.1-21.6 13.8-13.8 21.5-32.6 21.5-53v-58.2h31.9c29.3 0 53.2-23.8 53.2-53.1v-91.4c3.2.6 6.7 1 10.7 1 20.3 0 39.2-7.5 53.1-21.3 13.8-13.8 21.5-32.6 21.5-53v-235c-.1-20.3-7.6-39-21.4-52.9zM246 609.6c0 6.8-3.9 10.6-10.7 10.6-6.8 0-10.7-3.8-10.7-10.6V374.5c0-6.8 3.9-10.6 10.7-10.6 6.8 0 10.7 3.8 10.7 10.6v235.1zm131.1-396.8c37.5-27.3 85.3-42.3 135-42.3s97.5 15.1 135 42.5c32.4 23.7 54.2 54.2 62.7 87.5H314.4c8.5-33.4 30.5-64 62.7-87.7zm39.3 674.7c-.6 5.6-4.4 8.7-10.5 8.7-6.8 0-10.7-3.8-10.7-10.6v-58.2h21.2v60.1zm202.3 8.7c-6.8 0-10.7-3.8-10.7-10.6v-58.2h21.2v60.1c-.6 5.6-4.3 8.7-10.5 8.7zm95.8-132.6H309.9V364h404.6v399.6zm85.2-154c0 6.8-3.9 10.6-10.7 10.6-6.8 0-10.7-3.8-10.7-10.6V374.5c0-6.8 3.9-10.6 10.7-10.6 6.8 0 10.7 3.8 10.7 10.6v235.1zM576.1 225.2c-18.6 0-32 13.4-32 31.9s13.5 31.9 32 31.9c18.6 0 32.1-13.4 32.1-32-.1-18.6-13.4-31.8-32.1-31.8z'));
  exports.ApiOutline = getIcon('api', outline, getNode(newViewBox, 'M917.7 148.8l-42.4-42.4c-1.6-1.6-3.6-2.3-5.7-2.3s-4.1.8-5.7 2.3l-76.1 76.1a199.27 199.27 0 0 0-112.1-34.3c-51.2 0-102.4 19.5-141.5 58.6L432.3 308.7a8.03 8.03 0 0 0 0 11.3L704 591.7c1.6 1.6 3.6 2.3 5.7 2.3 2 0 4.1-.8 5.7-2.3l101.9-101.9c68.9-69 77-175.7 24.3-253.5l76.1-76.1c3.1-3.2 3.1-8.3 0-11.4zM769.1 441.7l-59.4 59.4-186.8-186.8 59.4-59.4c24.9-24.9 58.1-38.7 93.4-38.7 35.3 0 68.4 13.7 93.4 38.7 24.9 24.9 38.7 58.1 38.7 93.4 0 35.3-13.8 68.4-38.7 93.4zm-190.2 105a8.03 8.03 0 0 0-11.3 0L501 613.3 410.7 523l66.7-66.7c3.1-3.1 3.1-8.2 0-11.3L441 408.6a8.03 8.03 0 0 0-11.3 0L363 475.3l-43-43a7.85 7.85 0 0 0-5.7-2.3c-2 0-4.1.8-5.7 2.3L206.8 534.2c-68.9 69-77 175.7-24.3 253.5l-76.1 76.1a8.03 8.03 0 0 0 0 11.3l42.4 42.4c1.6 1.6 3.6 2.3 5.7 2.3s4.1-.8 5.7-2.3l76.1-76.1c33.7 22.9 72.9 34.3 112.1 34.3 51.2 0 102.4-19.5 141.5-58.6l101.9-101.9c3.1-3.1 3.1-8.2 0-11.3l-43-43 66.7-66.7c3.1-3.1 3.1-8.2 0-11.3l-36.6-36.2zM441.7 769.1a131.32 131.32 0 0 1-93.4 38.7c-35.3 0-68.4-13.7-93.4-38.7a131.32 131.32 0 0 1-38.7-93.4c0-35.3 13.7-68.4 38.7-93.4l59.4-59.4 186.8 186.8-59.4 59.4z'));
  exports.AppstoreOutline = getIcon('appstore', outline, getNode(newViewBox, 'M464 144H160c-8.8 0-16 7.2-16 16v304c0 8.8 7.2 16 16 16h304c8.8 0 16-7.2 16-16V160c0-8.8-7.2-16-16-16zm-52 268H212V212h200v200zm452-268H560c-8.8 0-16 7.2-16 16v304c0 8.8 7.2 16 16 16h304c8.8 0 16-7.2 16-16V160c0-8.8-7.2-16-16-16zm-52 268H612V212h200v200zM464 544H160c-8.8 0-16 7.2-16 16v304c0 8.8 7.2 16 16 16h304c8.8 0 16-7.2 16-16V560c0-8.8-7.2-16-16-16zm-52 268H212V612h200v200zm452-268H560c-8.8 0-16 7.2-16 16v304c0 8.8 7.2 16 16 16h304c8.8 0 16-7.2 16-16V560c0-8.8-7.2-16-16-16zm-52 268H612V612h200v200z'));
  exports.AudioOutline = getIcon('audio', outline, getNode(newViewBox, 'M842 454c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8 0 140.3-113.7 254-254 254S258 594.3 258 454c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8 0 168.7 126.6 307.9 290 327.6V884H326.7c-13.7 0-24.7 14.3-24.7 32v36c0 4.4 2.8 8 6.2 8h407.6c3.4 0 6.2-3.6 6.2-8v-36c0-17.7-11-32-24.7-32H548V782.1c165.3-18 294-158 294-328.1zM512 624c93.9 0 170-75.2 170-168V232c0-92.8-76.1-168-170-168s-170 75.2-170 168v224c0 92.8 76.1 168 170 168zm-94-392c0-50.6 41.9-92 94-92s94 41.4 94 92v224c0 50.6-41.9 92-94 92s-94-41.4-94-92V232z'));
  exports.AppleOutline = getIcon('apple', outline, getNode(newViewBox, 'M747.4 535.7c-.4-68.2 30.5-119.6 92.9-157.5-34.9-50-87.7-77.5-157.3-82.8-65.9-5.2-138 38.4-164.4 38.4-27.9 0-91.7-36.6-141.9-36.6C273.1 298.8 163 379.8 163 544.6c0 48.7 8.9 99 26.7 150.8 23.8 68.2 109.6 235.3 199.1 232.6 46.8-1.1 79.9-33.2 140.8-33.2 59.1 0 89.7 33.2 141.9 33.2 90.3-1.3 167.9-153.2 190.5-221.6-121.1-57.1-114.6-167.2-114.6-170.7zm-10.6 267c-14.3 19.9-28.7 35.6-41.9 45.7-10.5 8-18.6 11.4-24 11.6-9-.1-17.7-2.3-34.7-8.8-1.2-.5-2.5-1-4.2-1.6l-4.4-1.7c-17.4-6.7-27.8-10.3-41.1-13.8-18.6-4.8-37.1-7.4-56.9-7.4-20.2 0-39.2 2.5-58.1 7.2-13.9 3.5-25.6 7.4-42.7 13.8-.7.3-8.1 3.1-10.2 3.9-3.5 1.3-6.2 2.3-8.7 3.2-10.4 3.6-17 5.1-22.9 5.2-.7 0-1.3-.1-1.8-.2-1.1-.2-2.5-.6-4.1-1.3-4.5-1.8-9.9-5.1-16-9.8-14-10.9-29.4-28-45.1-49.9-27.5-38.6-53.5-89.8-66-125.7-15.4-44.8-23-87.7-23-128.6 0-60.2 17.8-106 48.4-137.1 26.3-26.6 61.7-41.5 97.8-42.3 5.9.1 14.5 1.5 25.4 4.5 8.6 2.3 18 5.4 30.7 9.9 3.8 1.4 16.9 6.1 18.5 6.7 7.7 2.8 13.5 4.8 19.2 6.6 18.2 5.8 32.3 9 47.6 9 15.5 0 28.8-3.3 47.7-9.8 7.1-2.4 32.9-12 37.5-13.6 25.6-9.1 44.5-14 60.8-15.2 4.8-.4 9.1-.4 13.2-.1 22.7 1.8 42.1 6.3 58.6 13.8-37.6 43.4-57 96.5-56.9 158.4-.3 14.7.9 31.7 5.1 51.8 6.4 30.5 18.6 60.7 37.9 89 14.7 21.5 32.9 40.9 54.7 57.8-11.5 23.7-25.6 48.2-40.4 68.8zm-94.5-572c50.7-60.2 46.1-115 44.6-134.7-44.8 2.6-96.6 30.5-126.1 64.8-32.5 36.8-51.6 82.3-47.5 133.6 48.4 3.7 92.6-21.2 129-63.7z'));
  exports.BackwardOutline = getIcon('backward', outline, getNode(normalViewBox, 'M485.6 249.9L198.2 498c-8.3 7.1-8.3 20.8 0 27.9l287.4 248.2c10.7 9.2 26.4.9 26.4-14V263.8c0-14.8-15.7-23.2-26.4-13.9zm320 0L518.2 498a18.6 18.6 0 0 0-6.2 14c0 5.2 2.1 10.4 6.2 14l287.4 248.2c10.7 9.2 26.4.9 26.4-14V263.8c0-14.8-15.7-23.2-26.4-13.9z'));
  exports.BankOutline = getIcon('bank', outline, getNode(newViewBox, 'M894 462c30.9 0 43.8-39.7 18.7-58L530.8 126.2a31.81 31.81 0 0 0-37.6 0L111.3 404c-25.1 18.2-12.2 58 18.8 58H192v374h-72c-4.4 0-8 3.6-8 8v52c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-52c0-4.4-3.6-8-8-8h-72V462h62zM512 196.7l271.1 197.2H240.9L512 196.7zM264 462h117v374H264V462zm189 0h117v374H453V462zm307 374H642V462h118v374z'));
  exports.BellOutline = getIcon('bell', outline, getNode(newViewBox, 'M816 768h-24V428c0-141.1-104.3-257.7-240-277.1V112c0-22.1-17.9-40-40-40s-40 17.9-40 40v38.9c-135.7 19.4-240 136-240 277.1v340h-24c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h216c0 61.8 50.2 112 112 112s112-50.2 112-112h216c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM512 888c-26.5 0-48-21.5-48-48h96c0 26.5-21.5 48-48 48zM304 768V428c0-55.6 21.6-107.8 60.9-147.1S456.4 220 512 220c55.6 0 107.8 21.6 147.1 60.9S720 372.4 720 428v340H304z'));
  exports.BehanceSquareOutline = getIcon('behance-square', outline, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM598.5 350.9h138.4v33.7H598.5v-33.7zM512 628.8a89.52 89.52 0 0 1-27 31c-11.8 8.2-24.9 14.2-38.8 17.7a167.4 167.4 0 0 1-44.6 5.7H236V342.1h161c16.3 0 31.1 1.5 44.6 4.3 13.4 2.8 24.8 7.6 34.4 14.1 9.5 6.5 17 15.2 22.3 26 5.2 10.7 7.9 24.1 7.9 40 0 17.2-3.9 31.4-11.7 42.9-7.9 11.5-19.3 20.8-34.8 28.1 21.1 6 36.6 16.7 46.8 31.7 10.4 15.2 15.5 33.4 15.5 54.8 0 17.4-3.3 32.3-10 44.8zM790.8 576H612.4c0 19.4 6.7 38 16.8 48 10.2 9.9 24.8 14.9 43.9 14.9 13.8 0 25.5-3.5 35.5-10.4 9.9-6.9 15.9-14.2 18.1-21.8h59.8c-9.6 29.7-24.2 50.9-44 63.7-19.6 12.8-43.6 19.2-71.5 19.2-19.5 0-37-3.2-52.7-9.3-15.1-5.9-28.7-14.9-39.9-26.5a121.2 121.2 0 0 1-25.1-41.2c-6.1-16.9-9.1-34.7-8.9-52.6 0-18.5 3.1-35.7 9.1-51.7 11.5-31.1 35.4-56 65.9-68.9 16.3-6.8 33.8-10.2 51.5-10 21 0 39.2 4 55 12.2a111.6 111.6 0 0 1 38.6 32.8c10.1 13.7 17.2 29.3 21.7 46.9 4.3 17.3 5.8 35.5 4.6 54.7zm-122-95.6c-10.8 0-19.9 1.9-26.9 5.6-7 3.7-12.8 8.3-17.2 13.6a48.4 48.4 0 0 0-9.1 17.4c-1.6 5.3-2.7 10.7-3.1 16.2H723c-1.6-17.3-7.6-30.1-15.6-39.1-8.4-8.9-21.9-13.7-38.6-13.7zm-248.5-10.1c8.7-6.3 12.9-16.7 12.9-31 .3-6.8-1.1-13.5-4.1-19.6-2.7-4.9-6.7-9-11.6-11.9a44.8 44.8 0 0 0-16.6-6c-6.4-1.2-12.9-1.8-19.3-1.7h-70.3v79.7h76.1c13.1.1 24.2-3.1 32.9-9.5zm11.8 72c-9.8-7.5-22.9-11.2-39.2-11.2h-81.8v94h80.2c7.5 0 14.4-.7 21.1-2.1s12.7-3.8 17.8-7.2c5.1-3.3 9.2-7.8 12.3-13.6 3-5.8 4.5-13.2 4.5-22.1 0-17.7-5-30.2-14.9-37.8z'));
  exports.BookOutline = getIcon('book', outline, getNode(newViewBox, 'M832 64H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-260 72h96v209.9L621.5 312 572 347.4V136zm220 752H232V136h280v296.9c0 3.3 1 6.6 3 9.3a15.9 15.9 0 0 0 22.3 3.7l83.8-59.9 81.4 59.4c2.7 2 6 3.1 9.4 3.1 8.8 0 16-7.2 16-16V136h64v752z'));
  exports.BoxPlotOutline = getIcon('box-plot', outline, getNode(newViewBox, 'M952 224h-52c-4.4 0-8 3.6-8 8v248h-92V304c0-4.4-3.6-8-8-8H232c-4.4 0-8 3.6-8 8v176h-92V232c0-4.4-3.6-8-8-8H72c-4.4 0-8 3.6-8 8v560c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8V548h92v172c0 4.4 3.6 8 8 8h560c4.4 0 8-3.6 8-8V548h92v244c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8V232c0-4.4-3.6-8-8-8zM296 368h88v288h-88V368zm432 288H448V368h280v288z'));
  exports.BulbOutline = getIcon('bulb', outline, getNode(newViewBox, 'M632 888H392c-4.4 0-8 3.6-8 8v32c0 17.7 14.3 32 32 32h192c17.7 0 32-14.3 32-32v-32c0-4.4-3.6-8-8-8zM512 64c-181.1 0-328 146.9-328 328 0 121.4 66 227.4 164 284.1V792c0 17.7 14.3 32 32 32h264c17.7 0 32-14.3 32-32V676.1c98-56.7 164-162.7 164-284.1 0-181.1-146.9-328-328-328zm127.9 549.8L604 634.6V752H420V634.6l-35.9-20.8C305.4 568.3 256 484.5 256 392c0-141.4 114.6-256 256-256s256 114.6 256 256c0 92.5-49.4 176.3-128.1 221.8z'));
  exports.BugOutline = getIcon('bug', outline, getNode(newViewBox, 'M304 280h56c4.4 0 8-3.6 8-8 0-28.3 5.9-53.2 17.1-73.5 10.6-19.4 26-34.8 45.4-45.4C450.9 142 475.7 136 504 136h16c28.3 0 53.2 5.9 73.5 17.1 19.4 10.6 34.8 26 45.4 45.4C650 218.9 656 243.7 656 272c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8 0-40-8.8-76.7-25.9-108.1a184.31 184.31 0 0 0-74-74C596.7 72.8 560 64 520 64h-16c-40 0-76.7 8.8-108.1 25.9a184.31 184.31 0 0 0-74 74C304.8 195.3 296 232 296 272c0 4.4 3.6 8 8 8z', 'M940 512H792V412c76.8 0 139-62.2 139-139 0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8a63 63 0 0 1-63 63H232a63 63 0 0 1-63-63c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8 0 76.8 62.2 139 139 139v100H84c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h148v96c0 6.5.2 13 .7 19.3C164.1 728.6 116 796.7 116 876c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8 0-44.2 23.9-82.9 59.6-103.7a273 273 0 0 0 22.7 49c24.3 41.5 59 76.2 100.5 100.5S460.5 960 512 960s99.8-13.9 141.3-38.2a281.38 281.38 0 0 0 123.2-149.5A120 120 0 0 1 836 876c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8 0-79.3-48.1-147.4-116.7-176.7.4-6.4.7-12.8.7-19.3v-96h148c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM716 680c0 36.8-9.7 72-27.8 102.9-17.7 30.3-43 55.6-73.3 73.3C584 874.3 548.8 884 512 884s-72-9.7-102.9-27.8c-30.3-17.7-55.6-43-73.3-73.3A202.75 202.75 0 0 1 308 680V412h408v268z'));
  exports.CalculatorOutline = getIcon('calculator', outline, getNode(newViewBox, 'M251.2 387H320v68.8c0 1.8 1.8 3.2 4 3.2h48c2.2 0 4-1.4 4-3.3V387h68.8c1.8 0 3.2-1.8 3.2-4v-48c0-2.2-1.4-4-3.3-4H376v-68.8c0-1.8-1.8-3.2-4-3.2h-48c-2.2 0-4 1.4-4 3.2V331h-68.8c-1.8 0-3.2 1.8-3.2 4v48c0 2.2 1.4 4 3.2 4zm328 0h193.6c1.8 0 3.2-1.8 3.2-4v-48c0-2.2-1.4-4-3.3-4H579.2c-1.8 0-3.2 1.8-3.2 4v48c0 2.2 1.4 4 3.2 4zm0 265h193.6c1.8 0 3.2-1.8 3.2-4v-48c0-2.2-1.4-4-3.3-4H579.2c-1.8 0-3.2 1.8-3.2 4v48c0 2.2 1.4 4 3.2 4zm0 104h193.6c1.8 0 3.2-1.8 3.2-4v-48c0-2.2-1.4-4-3.3-4H579.2c-1.8 0-3.2 1.8-3.2 4v48c0 2.2 1.4 4 3.2 4zm-195.7-81l61.2-74.9c4.3-5.2.7-13.1-5.9-13.1H388c-2.3 0-4.5 1-5.9 2.9l-34 41.6-34-41.6a7.85 7.85 0 0 0-5.9-2.9h-50.9c-6.6 0-10.2 7.9-5.9 13.1l61.2 74.9-62.7 76.8c-4.4 5.2-.8 13.1 5.8 13.1h50.8c2.3 0 4.5-1 5.9-2.9l35.5-43.5 35.5 43.5c1.5 1.8 3.7 2.9 5.9 2.9h50.8c6.6 0 10.2-7.9 5.9-13.1L383.5 675zM880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-36 732H180V180h664v664z'));
  exports.BuildOutline = getIcon('build', outline, getNode(newViewBox, 'M916 210H376c-17.7 0-32 14.3-32 32v236H108c-17.7 0-32 14.3-32 32v272c0 17.7 14.3 32 32 32h540c17.7 0 32-14.3 32-32V546h236c17.7 0 32-14.3 32-32V242c0-17.7-14.3-32-32-32zm-504 68h200v200H412V278zm-68 468H144V546h200v200zm268 0H412V546h200v200zm268-268H680V278h200v200z'));
  exports.CalendarOutline = getIcon('calendar', outline, getNode(newViewBox, 'M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z'));
  exports.CameraOutline = getIcon('camera', outline, getNode(newViewBox, 'M864 248H728l-32.4-90.8a32.07 32.07 0 0 0-30.2-21.2H358.6c-13.5 0-25.6 8.5-30.1 21.2L296 248H160c-44.2 0-80 35.8-80 80v456c0 44.2 35.8 80 80 80h704c44.2 0 80-35.8 80-80V328c0-44.2-35.8-80-80-80zm8 536c0 4.4-3.6 8-8 8H160c-4.4 0-8-3.6-8-8V328c0-4.4 3.6-8 8-8h186.7l17.1-47.8 22.9-64.2h250.5l22.9 64.2 17.1 47.8H864c4.4 0 8 3.6 8 8v456zM512 384c-88.4 0-160 71.6-160 160s71.6 160 160 160 160-71.6 160-160-71.6-160-160-160zm0 256c-53 0-96-43-96-96s43-96 96-96 96 43 96 96-43 96-96 96z'));
  exports.CarOutline = getIcon('car', outline, getNode(newViewBox, 'M380 704h264c4.4 0 8-3.6 8-8v-84c0-4.4-3.6-8-8-8h-40c-4.4 0-8 3.6-8 8v36H428v-36c0-4.4-3.6-8-8-8h-40c-4.4 0-8 3.6-8 8v84c0 4.4 3.6 8 8 8zm340-123a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm239-167.6L935.3 372a8 8 0 0 0-10.9-2.9l-50.7 29.6-78.3-216.2a63.9 63.9 0 0 0-60.9-44.4H301.2c-34.7 0-65.5 22.4-76.2 55.5l-74.6 205.2-50.8-29.6a8 8 0 0 0-10.9 2.9L65 413.4c-2.2 3.8-.9 8.6 2.9 10.8l60.4 35.2-14.5 40c-1.2 3.2-1.8 6.6-1.8 10v348.2c0 15.7 11.8 28.4 26.3 28.4h67.6c12.3 0 23-9.3 25.6-22.3l7.7-37.7h545.6l7.7 37.7c2.7 13 13.3 22.3 25.6 22.3h67.6c14.5 0 26.3-12.7 26.3-28.4V509.4c0-3.4-.6-6.8-1.8-10l-14.5-40 60.3-35.2a8 8 0 0 0 3-10.8zM840 517v237H184V517l15.6-43h624.8l15.6 43zM292.7 218.1l.5-1.3.4-1.3c1.1-3.3 4.1-5.5 7.6-5.5h427.6l75.4 208H220l72.7-199.9zM224 581a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'));
  exports.CaretDownOutline = getIcon('caret-down', outline, getNode(normalViewBox, 'M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z'));
  exports.CaretLeftOutline = getIcon('caret-left', outline, getNode(normalViewBox, 'M689 165.1L308.2 493.5c-10.9 9.4-10.9 27.5 0 37L689 858.9c14.2 12.2 35 1.2 35-18.5V183.6c0-19.7-20.8-30.7-35-18.5z'));
  exports.CaretRightOutline = getIcon('caret-right', outline, getNode(normalViewBox, 'M715.8 493.5L335 165.1c-14.2-12.2-35-1.2-35 18.5v656.8c0 19.7 20.8 30.7 35 18.5l380.8-328.4c10.9-9.4 10.9-27.6 0-37z'));
  exports.CarryOutOutline = getIcon('carry-out', outline, getNode(newViewBox, 'M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v584zM688 420h-55.2c-5.1 0-10 2.5-13 6.6L468.9 634.4l-64.7-89c-3-4.1-7.8-6.6-13-6.6H336c-6.5 0-10.3 7.4-6.5 12.7l126.4 174a16.1 16.1 0 0 0 26 0l212.6-292.7c3.8-5.4 0-12.8-6.5-12.8z'));
  exports.CheckCircleOutline = getIcon('check-circle', outline, getNode(newViewBox, 'M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0 0 51.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z', 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'));
  exports.CaretUpOutline = getIcon('caret-up', outline, getNode(normalViewBox, 'M858.9 689L530.5 308.2c-9.4-10.9-27.5-10.9-37 0L165.1 689c-12.2 14.2-1.2 35 18.5 35h656.8c19.7 0 30.7-20.8 18.5-35z'));
  exports.CheckSquareOutline = getIcon('check-square', outline, getNode(newViewBox, 'M433.1 657.7a31.8 31.8 0 0 0 51.7 0l210.6-292c3.8-5.3 0-12.7-6.5-12.7H642c-10.2 0-19.9 4.9-25.9 13.3L459 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H315c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8z', 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'));
  exports.ChromeOutline = getIcon('chrome', outline, getNode(newViewBox, 'M928 512.3v-.3c0-229.8-186.2-416-416-416S96 282.2 96 512v.4c0 229.8 186.2 416 416 416s416-186.2 416-416v-.3.2zm-6.7-74.6l.6 3.3-.6-3.3zM676.7 638.2c53.5-82.2 52.5-189.4-11.1-263.7l162.4-8.4c20.5 44.4 32 93.8 32 145.9 0 185.2-144.6 336.6-327.1 347.4l143.8-221.2zM512 652.3c-77.5 0-140.2-62.7-140.2-140.2 0-77.7 62.7-140.2 140.2-140.2S652.2 434.5 652.2 512 589.5 652.3 512 652.3zm369.2-331.7l-3-5.7 3 5.7zM512 164c121.3 0 228.2 62.1 290.4 156.2l-263.6-13.9c-97.5-5.7-190.2 49.2-222.3 141.1L227.8 311c63.1-88.9 166.9-147 284.2-147zM102.5 585.8c26 145 127.1 264 261.6 315.1C229.6 850 128.5 731 102.5 585.8zM164 512c0-55.9 13.2-108.7 36.6-155.5l119.7 235.4c44.1 86.7 137.4 139.7 234 121.6l-74 145.1C302.9 842.5 164 693.5 164 512zm324.7 415.4c4 .2 8 .4 12 .5-4-.2-8-.3-12-.5z'));
  exports.ClockCircleOutline = getIcon('clock-circle', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z', 'M686.7 638.6L544.1 535.5V288c0-4.4-3.6-8-8-8H488c-4.4 0-8 3.6-8 8v275.4c0 2.6 1.2 5 3.3 6.5l165.4 120.6c3.6 2.6 8.6 1.8 11.2-1.7l28.6-39c2.6-3.7 1.8-8.7-1.8-11.2z'));
  exports.CloseCircleOutline = getIcon('close-circle', outline, getNode(newViewBox, 'M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 0 0-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z', 'M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'));
  exports.CloudOutline = getIcon('cloud', outline, getNode(newViewBox, 'M811.4 418.7C765.6 297.9 648.9 212 512.2 212S258.8 297.8 213 418.6C127.3 441.1 64 519.1 64 612c0 110.5 89.5 200 199.9 200h496.2C870.5 812 960 722.5 960 612c0-92.7-63.1-170.7-148.6-193.3zm36.3 281a123.07 123.07 0 0 1-87.6 36.3H263.9c-33.1 0-64.2-12.9-87.6-36.3A123.3 123.3 0 0 1 140 612c0-28 9.1-54.3 26.2-76.3a125.7 125.7 0 0 1 66.1-43.7l37.9-9.9 13.9-36.6c8.6-22.8 20.6-44.1 35.7-63.4a245.6 245.6 0 0 1 52.4-49.9c41.1-28.9 89.5-44.2 140-44.2s98.9 15.3 140 44.2c19.9 14 37.5 30.8 52.4 49.9 15.1 19.3 27.1 40.7 35.7 63.4l13.8 36.5 37.8 10c54.3 14.5 92.1 63.8 92.1 120 0 33.1-12.9 64.3-36.3 87.7z'));
  exports.CloseSquareOutline = getIcon('close-square', outline, getNode(newViewBox, 'M354 671h58.9c4.7 0 9.2-2.1 12.3-5.7L512 561.8l86.8 103.5c3 3.6 7.5 5.7 12.3 5.7H670c6.8 0 10.5-7.9 6.1-13.1L553.8 512l122.4-145.9c4.4-5.2.7-13.1-6.1-13.1h-58.9c-4.7 0-9.2 2.1-12.3 5.7L512 462.2l-86.8-103.5c-3-3.6-7.5-5.7-12.3-5.7H354c-6.8 0-10.5 7.9-6.1 13.1L470.2 512 347.9 657.9A7.95 7.95 0 0 0 354 671z', 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'));
  exports.CodeOutline = getIcon('code', outline, getNode(newViewBox, 'M516 673c0 4.4 3.4 8 7.5 8h185c4.1 0 7.5-3.6 7.5-8v-48c0-4.4-3.4-8-7.5-8h-185c-4.1 0-7.5 3.6-7.5 8v48zm-194.9 6.1l192-161c3.8-3.2 3.8-9.1 0-12.3l-192-160.9A7.95 7.95 0 0 0 308 351v62.7c0 2.4 1 4.6 2.9 6.1L420.7 512l-109.8 92.2a8.1 8.1 0 0 0-2.9 6.1V673c0 6.8 7.9 10.5 13.1 6.1zM880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'));
  exports.CodepenCircleOutline = getIcon('codepen-circle', outline, getNode(newViewBox, 'M488.1 414.7V303.4L300.9 428l83.6 55.8zm254.1 137.7v-79.8l-59.8 39.9zM512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm278 533c0 1.1-.1 2.1-.2 3.1 0 .4-.1.7-.2 1a14.16 14.16 0 0 1-.8 3.2c-.2.6-.4 1.2-.6 1.7-.2.4-.4.8-.5 1.2-.3.5-.5 1.1-.8 1.6-.2.4-.4.7-.7 1.1-.3.5-.7 1-1 1.5-.3.4-.5.7-.8 1-.4.4-.8.9-1.2 1.3-.3.3-.6.6-1 .9-.4.4-.9.8-1.4 1.1-.4.3-.7.6-1.1.8-.1.1-.3.2-.4.3L525.2 786c-4 2.7-8.6 4-13.2 4-4.7 0-9.3-1.4-13.3-4L244.6 616.9c-.1-.1-.3-.2-.4-.3l-1.1-.8c-.5-.4-.9-.7-1.3-1.1-.3-.3-.6-.6-1-.9-.4-.4-.8-.8-1.2-1.3a7 7 0 0 1-.8-1c-.4-.5-.7-1-1-1.5-.2-.4-.5-.7-.7-1.1-.3-.5-.6-1.1-.8-1.6-.2-.4-.4-.8-.5-1.2-.2-.6-.4-1.2-.6-1.7-.1-.4-.3-.8-.4-1.2-.2-.7-.3-1.3-.4-2-.1-.3-.1-.7-.2-1-.1-1-.2-2.1-.2-3.1V427.9c0-1 .1-2.1.2-3.1.1-.3.1-.7.2-1a14.16 14.16 0 0 1 .8-3.2c.2-.6.4-1.2.6-1.7.2-.4.4-.8.5-1.2.2-.5.5-1.1.8-1.6.2-.4.4-.7.7-1.1.6-.9 1.2-1.7 1.8-2.5.4-.4.8-.9 1.2-1.3.3-.3.6-.6 1-.9.4-.4.9-.8 1.3-1.1.4-.3.7-.6 1.1-.8.1-.1.3-.2.4-.3L498.7 239c8-5.3 18.5-5.3 26.5 0l254.1 169.1c.1.1.3.2.4.3l1.1.8 1.4 1.1c.3.3.6.6 1 .9.4.4.8.8 1.2 1.3.7.8 1.3 1.6 1.8 2.5.2.4.5.7.7 1.1.3.5.6 1 .8 1.6.2.4.4.8.5 1.2.2.6.4 1.2.6 1.7.1.4.3.8.4 1.2.2.7.3 1.3.4 2 .1.3.1.7.2 1 .1 1 .2 2.1.2 3.1V597zm-254.1 13.3v111.3L723.1 597l-83.6-55.8zM281.8 472.6v79.8l59.8-39.9zM512 456.1l-84.5 56.4 84.5 56.4 84.5-56.4zM723.1 428L535.9 303.4v111.3l103.6 69.1zM384.5 541.2L300.9 597l187.2 124.6V610.3l-103.6-69.1z'));
  exports.CompassOutline = getIcon('compass', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm198.4-588.1a32 32 0 0 0-24.5.5L414.9 415 296.4 686c-3.6 8.2-3.6 17.5 0 25.7 3.4 7.8 9.7 13.9 17.7 17 3.8 1.5 7.7 2.2 11.7 2.2 4.4 0 8.7-.9 12.8-2.7l271-118.6 118.5-271a32.06 32.06 0 0 0-17.7-42.7zM576.8 534.4l26.2 26.2-42.4 42.4-26.2-26.2L380 644.4 447.5 490 422 464.4l42.4-42.4 25.5 25.5L644.4 380l-67.6 154.4zM464.4 422L422 464.4l25.5 25.6 86.9 86.8 26.2 26.2 42.4-42.4-26.2-26.2-86.8-86.9z'));
  exports.ContactsOutline = getIcon('contacts', outline, getNode(newViewBox, 'M594.3 601.5a111.8 111.8 0 0 0 29.1-75.5c0-61.9-49.9-112-111.4-112s-111.4 50.1-111.4 112c0 29.1 11 55.5 29.1 75.5a158.09 158.09 0 0 0-74.6 126.1 8 8 0 0 0 8 8.4H407c4.2 0 7.6-3.3 7.9-7.5 3.8-50.6 46-90.5 97.2-90.5s93.4 40 97.2 90.5c.3 4.2 3.7 7.5 7.9 7.5H661a8 8 0 0 0 8-8.4c-2.8-53.3-32-99.7-74.7-126.1zM512 578c-28.5 0-51.7-23.3-51.7-52s23.2-52 51.7-52 51.7 23.3 51.7 52-23.2 52-51.7 52zm416-354H768v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H548v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H328v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H96c-17.7 0-32 14.3-32 32v576c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V256c0-17.7-14.3-32-32-32zm-40 568H136V296h120v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56h148v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56h148v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56h120v496z'));
  exports.ContainerOutline = getIcon('container', outline, getNode(newViewBox, 'M832 64H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-40 824H232V687h97.9c11.6 32.8 32 62.3 59.1 84.7 34.5 28.5 78.2 44.3 123 44.3s88.5-15.7 123-44.3c27.1-22.4 47.5-51.9 59.1-84.7H792v-63H643.6l-5.2 24.7C626.4 708.5 573.2 752 512 752s-114.4-43.5-126.5-103.3l-5.2-24.7H232V136h560v752zM320 341h384c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H320c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8zm0 160h384c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H320c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z'));
  exports.ControlOutline = getIcon('control', outline, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656zM340 683v77c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-77c-10.1 3.3-20.8 5-32 5s-21.9-1.8-32-5zm64-198V264c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v221c10.1-3.3 20.8-5 32-5s21.9 1.8 32 5zm-64 198c10.1 3.3 20.8 5 32 5s21.9-1.8 32-5c41.8-13.5 72-52.7 72-99s-30.2-85.5-72-99c-10.1-3.3-20.8-5-32-5s-21.9 1.8-32 5c-41.8 13.5-72 52.7-72 99s30.2 85.5 72 99zm.1-115.7c.3-.6.7-1.2 1-1.8v-.1l1.2-1.8c.1-.2.2-.3.3-.5.3-.5.7-.9 1-1.4.1-.1.2-.3.3-.4.5-.6.9-1.1 1.4-1.6l.3-.3 1.2-1.2.4-.4c.5-.5 1-.9 1.6-1.4.6-.5 1.1-.9 1.7-1.3.2-.1.3-.2.5-.3.5-.3.9-.7 1.4-1 .1-.1.3-.2.4-.3.6-.4 1.2-.7 1.9-1.1.1-.1.3-.1.4-.2.5-.3 1-.5 1.6-.8l.6-.3c.7-.3 1.3-.6 2-.8.7-.3 1.4-.5 2.1-.7.2-.1.4-.1.6-.2.6-.2 1.1-.3 1.7-.4.2 0 .3-.1.5-.1.7-.2 1.5-.3 2.2-.4.2 0 .3 0 .5-.1.6-.1 1.2-.1 1.8-.2h.6c.8 0 1.5-.1 2.3-.1s1.5 0 2.3.1h.6c.6 0 1.2.1 1.8.2.2 0 .3 0 .5.1.7.1 1.5.2 2.2.4.2 0 .3.1.5.1.6.1 1.2.3 1.7.4.2.1.4.1.6.2.7.2 1.4.4 2.1.7.7.2 1.3.5 2 .8l.6.3c.5.2 1.1.5 1.6.8.1.1.3.1.4.2.6.3 1.3.7 1.9 1.1.1.1.3.2.4.3.5.3 1 .6 1.4 1 .2.1.3.2.5.3.6.4 1.2.9 1.7 1.3s1.1.9 1.6 1.4l.4.4 1.2 1.2.3.3c.5.5 1 1.1 1.4 1.6.1.1.2.3.3.4.4.4.7.9 1 1.4.1.2.2.3.3.5l1.2 1.8s0 .1.1.1a36.18 36.18 0 0 1 5.1 18.5c0 6-1.5 11.7-4.1 16.7-.3.6-.7 1.2-1 1.8 0 0 0 .1-.1.1l-1.2 1.8c-.1.2-.2.3-.3.5-.3.5-.7.9-1 1.4-.1.1-.2.3-.3.4-.5.6-.9 1.1-1.4 1.6l-.3.3-1.2 1.2-.4.4c-.5.5-1 .9-1.6 1.4-.6.5-1.1.9-1.7 1.3-.2.1-.3.2-.5.3-.5.3-.9.7-1.4 1-.1.1-.3.2-.4.3-.6.4-1.2.7-1.9 1.1-.1.1-.3.1-.4.2-.5.3-1 .5-1.6.8l-.6.3c-.7.3-1.3.6-2 .8-.7.3-1.4.5-2.1.7-.2.1-.4.1-.6.2-.6.2-1.1.3-1.7.4-.2 0-.3.1-.5.1-.7.2-1.5.3-2.2.4-.2 0-.3 0-.5.1-.6.1-1.2.1-1.8.2h-.6c-.8 0-1.5.1-2.3.1s-1.5 0-2.3-.1h-.6c-.6 0-1.2-.1-1.8-.2-.2 0-.3 0-.5-.1-.7-.1-1.5-.2-2.2-.4-.2 0-.3-.1-.5-.1-.6-.1-1.2-.3-1.7-.4-.2-.1-.4-.1-.6-.2-.7-.2-1.4-.4-2.1-.7-.7-.2-1.3-.5-2-.8l-.6-.3c-.5-.2-1.1-.5-1.6-.8-.1-.1-.3-.1-.4-.2-.6-.3-1.3-.7-1.9-1.1-.1-.1-.3-.2-.4-.3-.5-.3-1-.6-1.4-1-.2-.1-.3-.2-.5-.3-.6-.4-1.2-.9-1.7-1.3s-1.1-.9-1.6-1.4l-.4-.4-1.2-1.2-.3-.3c-.5-.5-1-1.1-1.4-1.6-.1-.1-.2-.3-.3-.4-.4-.4-.7-.9-1-1.4-.1-.2-.2-.3-.3-.5l-1.2-1.8v-.1c-.4-.6-.7-1.2-1-1.8-2.6-5-4.1-10.7-4.1-16.7s1.5-11.7 4.1-16.7zM620 539v221c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V539c-10.1 3.3-20.8 5-32 5s-21.9-1.8-32-5zm64-198v-77c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v77c10.1-3.3 20.8-5 32-5s21.9 1.8 32 5zm-64 198c10.1 3.3 20.8 5 32 5s21.9-1.8 32-5c41.8-13.5 72-52.7 72-99s-30.2-85.5-72-99c-10.1-3.3-20.8-5-32-5s-21.9 1.8-32 5c-41.8 13.5-72 52.7-72 99s30.2 85.5 72 99zm.1-115.7c.3-.6.7-1.2 1-1.8v-.1l1.2-1.8c.1-.2.2-.3.3-.5.3-.5.7-.9 1-1.4.1-.1.2-.3.3-.4.5-.6.9-1.1 1.4-1.6l.3-.3 1.2-1.2.4-.4c.5-.5 1-.9 1.6-1.4.6-.5 1.1-.9 1.7-1.3.2-.1.3-.2.5-.3.5-.3.9-.7 1.4-1 .1-.1.3-.2.4-.3.6-.4 1.2-.7 1.9-1.1.1-.1.3-.1.4-.2.5-.3 1-.5 1.6-.8l.6-.3c.7-.3 1.3-.6 2-.8.7-.3 1.4-.5 2.1-.7.2-.1.4-.1.6-.2.6-.2 1.1-.3 1.7-.4.2 0 .3-.1.5-.1.7-.2 1.5-.3 2.2-.4.2 0 .3 0 .5-.1.6-.1 1.2-.1 1.8-.2h.6c.8 0 1.5-.1 2.3-.1s1.5 0 2.3.1h.6c.6 0 1.2.1 1.8.2.2 0 .3 0 .5.1.7.1 1.5.2 2.2.4.2 0 .3.1.5.1.6.1 1.2.3 1.7.4.2.1.4.1.6.2.7.2 1.4.4 2.1.7.7.2 1.3.5 2 .8l.6.3c.5.2 1.1.5 1.6.8.1.1.3.1.4.2.6.3 1.3.7 1.9 1.1.1.1.3.2.4.3.5.3 1 .6 1.4 1 .2.1.3.2.5.3.6.4 1.2.9 1.7 1.3s1.1.9 1.6 1.4l.4.4 1.2 1.2.3.3c.5.5 1 1.1 1.4 1.6.1.1.2.3.3.4.4.4.7.9 1 1.4.1.2.2.3.3.5l1.2 1.8v.1a36.18 36.18 0 0 1 5.1 18.5c0 6-1.5 11.7-4.1 16.7-.3.6-.7 1.2-1 1.8v.1l-1.2 1.8c-.1.2-.2.3-.3.5-.3.5-.7.9-1 1.4-.1.1-.2.3-.3.4-.5.6-.9 1.1-1.4 1.6l-.3.3-1.2 1.2-.4.4c-.5.5-1 .9-1.6 1.4-.6.5-1.1.9-1.7 1.3-.2.1-.3.2-.5.3-.5.3-.9.7-1.4 1-.1.1-.3.2-.4.3-.6.4-1.2.7-1.9 1.1-.1.1-.3.1-.4.2-.5.3-1 .5-1.6.8l-.6.3c-.7.3-1.3.6-2 .8-.7.3-1.4.5-2.1.7-.2.1-.4.1-.6.2-.6.2-1.1.3-1.7.4-.2 0-.3.1-.5.1-.7.2-1.5.3-2.2.4-.2 0-.3 0-.5.1-.6.1-1.2.1-1.8.2h-.6c-.8 0-1.5.1-2.3.1s-1.5 0-2.3-.1h-.6c-.6 0-1.2-.1-1.8-.2-.2 0-.3 0-.5-.1-.7-.1-1.5-.2-2.2-.4-.2 0-.3-.1-.5-.1-.6-.1-1.2-.3-1.7-.4-.2-.1-.4-.1-.6-.2-.7-.2-1.4-.4-2.1-.7-.7-.2-1.3-.5-2-.8l-.6-.3c-.5-.2-1.1-.5-1.6-.8-.1-.1-.3-.1-.4-.2-.6-.3-1.3-.7-1.9-1.1-.1-.1-.3-.2-.4-.3-.5-.3-1-.6-1.4-1-.2-.1-.3-.2-.5-.3-.6-.4-1.2-.9-1.7-1.3s-1.1-.9-1.6-1.4l-.4-.4-1.2-1.2-.3-.3c-.5-.5-1-1.1-1.4-1.6-.1-.1-.2-.3-.3-.4-.4-.4-.7-.9-1-1.4-.1-.2-.2-.3-.3-.5l-1.2-1.8v-.1c-.4-.6-.7-1.2-1-1.8-2.6-5-4.1-10.7-4.1-16.7s1.5-11.7 4.1-16.7z'));
  exports.CopyOutline = getIcon('copy', outline, getNode(newViewBox, 'M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z'));
  exports.CreditCardOutline = getIcon('credit-card', outline, getNode(newViewBox, 'M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-792 72h752v120H136V232zm752 560H136V440h752v352zm-237-64h165c4.4 0 8-3.6 8-8v-72c0-4.4-3.6-8-8-8H651c-4.4 0-8 3.6-8 8v72c0 4.4 3.6 8 8 8z'));
  exports.CrownOutline = getIcon('crown', outline, getNode(newViewBox, 'M899.6 276.5L705 396.4 518.4 147.5a8.06 8.06 0 0 0-12.9 0L319 396.4 124.3 276.5c-5.7-3.5-13.1 1.2-12.2 7.9L188.5 865c1.1 7.9 7.9 14 16 14h615.1c8 0 14.9-6 15.9-14l76.4-580.6c.8-6.7-6.5-11.4-12.3-7.9zm-126 534.1H250.3l-53.8-409.4 139.8 86.1L512 252.9l175.7 234.4 139.8-86.1-53.9 409.4zM512 509c-62.1 0-112.6 50.5-112.6 112.6S449.9 734.2 512 734.2s112.6-50.5 112.6-112.6S574.1 509 512 509zm0 160.9c-26.6 0-48.2-21.6-48.2-48.3 0-26.6 21.6-48.3 48.2-48.3s48.2 21.6 48.2 48.3c0 26.6-21.6 48.3-48.2 48.3z'));
  exports.CustomerServiceOutline = getIcon('customer-service', outline, getNode(newViewBox, 'M512 128c-212.1 0-384 171.9-384 384v360c0 13.3 10.7 24 24 24h184c35.3 0 64-28.7 64-64V624c0-35.3-28.7-64-64-64H200v-48c0-172.3 139.7-312 312-312s312 139.7 312 312v48H688c-35.3 0-64 28.7-64 64v208c0 35.3 28.7 64 64 64h184c13.3 0 24-10.7 24-24V512c0-212.1-171.9-384-384-384zM328 632v192H200V632h128zm496 192H696V632h128v192z'));
  exports.DashboardOutline = getIcon('dashboard', outline, getNode(newViewBox, 'M924.8 385.6a446.7 446.7 0 0 0-96-142.4 446.7 446.7 0 0 0-142.4-96C631.1 123.8 572.5 112 512 112s-119.1 11.8-174.4 35.2a446.7 446.7 0 0 0-142.4 96 446.7 446.7 0 0 0-96 142.4C75.8 440.9 64 499.5 64 560c0 132.7 58.3 257.7 159.9 343.1l1.7 1.4c5.8 4.8 13.1 7.5 20.6 7.5h531.7c7.5 0 14.8-2.7 20.6-7.5l1.7-1.4C901.7 817.7 960 692.7 960 560c0-60.5-11.9-119.1-35.2-174.4zM761.4 836H262.6A371.12 371.12 0 0 1 140 560c0-99.4 38.7-192.8 109-263 70.3-70.3 163.7-109 263-109 99.4 0 192.8 38.7 263 109 70.3 70.3 109 163.7 109 263 0 105.6-44.5 205.5-122.6 276zM623.5 421.5a8.03 8.03 0 0 0-11.3 0L527.7 506c-18.7-5-39.4-.2-54.1 14.5a55.95 55.95 0 0 0 0 79.2 55.95 55.95 0 0 0 79.2 0 55.87 55.87 0 0 0 14.5-54.1l84.5-84.5c3.1-3.1 3.1-8.2 0-11.3l-28.3-28.3zM490 320h44c4.4 0 8-3.6 8-8v-80c0-4.4-3.6-8-8-8h-44c-4.4 0-8 3.6-8 8v80c0 4.4 3.6 8 8 8zm260 218v44c0 4.4 3.6 8 8 8h80c4.4 0 8-3.6 8-8v-44c0-4.4-3.6-8-8-8h-80c-4.4 0-8 3.6-8 8zm12.7-197.2l-31.1-31.1a8.03 8.03 0 0 0-11.3 0l-56.6 56.6a8.03 8.03 0 0 0 0 11.3l31.1 31.1c3.1 3.1 8.2 3.1 11.3 0l56.6-56.6c3.1-3.1 3.1-8.2 0-11.3zm-458.6-31.1a8.03 8.03 0 0 0-11.3 0l-31.1 31.1a8.03 8.03 0 0 0 0 11.3l56.6 56.6c3.1 3.1 8.2 3.1 11.3 0l31.1-31.1c3.1-3.1 3.1-8.2 0-11.3l-56.6-56.6zM262 530h-80c-4.4 0-8 3.6-8 8v44c0 4.4 3.6 8 8 8h80c4.4 0 8-3.6 8-8v-44c0-4.4-3.6-8-8-8z'));
  exports.DeleteOutline = getIcon('delete', outline, getNode(newViewBox, 'M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z'));
  exports.DiffOutline = getIcon('diff', outline, getNode(newViewBox, 'M476 399.1c0-3.9-3.1-7.1-7-7.1h-42c-3.8 0-7 3.2-7 7.1V484h-84.5c-4.1 0-7.5 3.1-7.5 7v42c0 3.8 3.4 7 7.5 7H420v84.9c0 3.9 3.2 7.1 7 7.1h42c3.9 0 7-3.2 7-7.1V540h84.5c4.1 0 7.5-3.2 7.5-7v-42c0-3.9-3.4-7-7.5-7H476v-84.9zM560.5 704h-225c-4.1 0-7.5 3.2-7.5 7v42c0 3.8 3.4 7 7.5 7h225c4.1 0 7.5-3.2 7.5-7v-42c0-3.8-3.4-7-7.5-7zm-7.1-502.6c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v704c0 17.7 14.3 32 32 32h512c17.7 0 32-14.3 32-32V397.3c0-8.5-3.4-16.6-9.4-22.6L553.4 201.4zM664 888H232V264h282.2L664 413.8V888zm190.2-581.4L611.3 72.9c-6-5.7-13.9-8.9-22.2-8.9H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h277l219 210.6V824c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V329.6c0-8.7-3.5-17-9.8-23z'));
  exports.DatabaseOutline = getIcon('database', outline, getNode(newViewBox, 'M832 64H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-600 72h560v208H232V136zm560 480H232V408h560v208zm0 272H232V680h560v208zM304 240a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm0 272a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm0 272a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'));
  exports.DislikeOutline = getIcon('dislike', outline, getNode(newViewBox, 'M885.9 490.3c3.6-12 5.4-24.4 5.4-37 0-28.3-9.3-55.5-26.1-77.7 3.6-12 5.4-24.4 5.4-37 0-28.3-9.3-55.5-26.1-77.7 3.6-12 5.4-24.4 5.4-37 0-51.6-30.7-98.1-78.3-118.4a66.1 66.1 0 0 0-26.5-5.4H144c-17.7 0-32 14.3-32 32v364c0 17.7 14.3 32 32 32h129.3l85.8 310.8C372.9 889 418.9 924 470.9 924c29.7 0 57.4-11.8 77.9-33.4 20.5-21.5 31-49.7 29.5-79.4l-6-122.9h239.9c12.1 0 23.9-3.2 34.3-9.3 40.4-23.5 65.5-66.1 65.5-111 0-28.3-9.3-55.5-26.1-77.7zM184 456V172h81v284h-81zm627.2 160.4H496.8l9.6 198.4c.6 11.9-4.7 23.1-14.6 30.5-6.1 4.5-13.6 6.8-21.1 6.7a44.28 44.28 0 0 1-42.2-32.3L329 459.2V172h415.4a56.85 56.85 0 0 1 33.6 51.8c0 9.7-2.3 18.9-6.9 27.3l-13.9 25.4 21.9 19a56.76 56.76 0 0 1 19.6 43c0 9.7-2.3 18.9-6.9 27.3l-13.9 25.4 21.9 19a56.76 56.76 0 0 1 19.6 43c0 9.7-2.3 18.9-6.9 27.3l-14 25.5 21.9 19a56.76 56.76 0 0 1 19.6 43c0 19.1-11 37.5-28.8 48.4z'));
  exports.DownCircleOutline = getIcon('down-circle', outline, getNode(newViewBox, 'M690 405h-46.9c-10.2 0-19.9 4.9-25.9 13.2L512 563.6 406.8 418.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246c3.2 4.4 9.7 4.4 12.9 0l178-246c3.9-5.3.1-12.7-6.4-12.7z', 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'));
  exports.DownSquareOutline = getIcon('down-square', outline, getNode(newViewBox, 'M505.5 658.7c3.2 4.4 9.7 4.4 12.9 0l178-246c3.8-5.3 0-12.7-6.5-12.7H643c-10.2 0-19.9 4.9-25.9 13.2L512 558.6 406.8 413.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246z', 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'));
  exports.DribbbleSquareOutline = getIcon('dribbble-square', outline, getNode(newViewBox, 'M498.6 432c-40.8-72.5-84.7-133.4-91.2-142.3-68.8 32.5-120.3 95.9-136.2 172.2 11 .2 112.4.7 227.4-29.9zm66.5 21.8c5.7 11.7 11.2 23.6 16.3 35.6 1.8 4.2 3.6 8.4 5.3 12.7 81.8-10.3 163.2 6.2 171.3 7.9-.5-58.1-21.3-111.4-55.5-153.3-5.3 7.1-46.5 60-137.4 97.1zM880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM512 800c-158.8 0-288-129.2-288-288s129.2-288 288-288 288 129.2 288 288-129.2 288-288 288zm89.7-259.1c32.2 88.4 45.3 160.4 47.8 175.4 55.2-37.3 94.5-96.4 105.4-164.9-8.4-2.6-76.1-22.8-153.2-10.5zm-72.5-26.4c3.2-1 6.4-2 9.7-2.9-6.2-14-12.9-28-19.9-41.7-122.8 36.8-242.1 35.2-252.8 35-.1 2.5-.1 5-.1 7.5 0 63.2 23.9 120.9 63.2 164.5 5.5-9.6 73-121.4 199.9-162.4zm145.9-186.2a245.2 245.2 0 0 0-220.8-55.1c6.8 9.1 51.5 69.9 91.8 144 87.5-32.8 124.5-82.6 129-88.9zM554 552.8c-138.7 48.3-188.6 144.6-193 153.6 41.7 32.5 94.1 51.9 151 51.9 34.1 0 66.6-6.9 96.1-19.5-3.7-21.6-17.9-96.8-52.5-186.6l-1.6.6z'));
  exports.EnvironmentOutline = getIcon('environment', outline, getNode(newViewBox, 'M854.6 289.1a362.49 362.49 0 0 0-79.9-115.7 370.83 370.83 0 0 0-118.2-77.8C610.7 76.6 562.1 67 512 67c-50.1 0-98.7 9.6-144.5 28.5-44.3 18.3-84 44.5-118.2 77.8A363.6 363.6 0 0 0 169.4 289c-19.5 45-29.4 92.8-29.4 142 0 70.6 16.9 140.9 50.1 208.7 26.7 54.5 64 107.6 111 158.1 80.3 86.2 164.5 138.9 188.4 153a43.9 43.9 0 0 0 22.4 6.1c7.8 0 15.5-2 22.4-6.1 23.9-14.1 108.1-66.8 188.4-153 47-50.4 84.3-103.6 111-158.1C867.1 572 884 501.8 884 431.1c0-49.2-9.9-97-29.4-142zM512 880.2c-65.9-41.9-300-207.8-300-449.1 0-77.9 31.1-151.1 87.6-206.3C356.3 169.5 431.7 139 512 139s155.7 30.5 212.4 85.9C780.9 280 812 353.2 812 431.1c0 241.3-234.1 407.2-300 449.1zm0-617.2c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm79.2 255.2A111.6 111.6 0 0 1 512 551c-29.9 0-58-11.7-79.2-32.8A111.6 111.6 0 0 1 400 439c0-29.9 11.7-58 32.8-79.2C454 338.6 482.1 327 512 327c29.9 0 58 11.6 79.2 32.8C612.4 381 624 409.1 624 439c0 29.9-11.6 58-32.8 79.2z'));
  exports.EditOutline = getIcon('edit', outline, getNode(newViewBox, 'M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 0 0 0-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 0 0 9.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z'));
  exports.ExclamationCircleOutline = getIcon('exclamation-circle', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z', 'M464 688a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z'));
  exports.ExperimentOutline = getIcon('experiment', outline, getNode(newViewBox, 'M512 472a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm367 352.9L696.3 352V178H768v-68H256v68h71.7v174L145 824.9c-2.8 7.4-4.3 15.2-4.3 23.1 0 35.3 28.7 64 64 64h614.6c7.9 0 15.7-1.5 23.1-4.3 33-12.7 49.4-49.8 36.6-82.8zM395.7 364.7V180h232.6v184.7L719.2 600c-20.7-5.3-42.1-8-63.9-8-61.2 0-119.2 21.5-165.3 60a188.78 188.78 0 0 1-121.3 43.9c-32.7 0-64.1-8.3-91.8-23.7l118.8-307.5zM210.5 844l41.7-107.8c35.7 18.1 75.4 27.8 116.6 27.8 61.2 0 119.2-21.5 165.3-60 33.9-28.2 76.3-43.9 121.3-43.9 35 0 68.4 9.5 97.6 27.1L813.5 844h-603z'));
  exports.EyeInvisibleOutline = getIcon('eye-invisible', outline, getNode(newViewBox, 'M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 0 0 0-51.5zm-63.57-320.64L836 122.88a8 8 0 0 0-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 0 0 0 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 0 0 0 11.31L155.17 889a8 8 0 0 0 11.31 0l712.15-712.12a8 8 0 0 0 0-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 0 0-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 0 1 146.2-106.69L401.31 546.2A112 112 0 0 1 396 512z', 'M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 0 0 227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 0 1-112 112z'));
  exports.EyeOutline = getIcon('eye', outline, getNode(newViewBox, 'M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 0 0 0 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z'));
  exports.FacebookOutline = getIcon('facebook', outline, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-32 736H663.9V602.2h104l15.6-120.7H663.9v-77.1c0-35 9.7-58.8 59.8-58.8h63.9v-108c-11.1-1.5-49-4.8-93.2-4.8-92.2 0-155.3 56.3-155.3 159.6v89H434.9v120.7h104.3V848H176V176h672v672z'));
  exports.FastBackwardOutline = getIcon('fast-backward', outline, getNode(normalViewBox, 'M517.6 273.5L230.2 499.3a16.14 16.14 0 0 0 0 25.4l287.4 225.8c10.7 8.4 26.4.8 26.4-12.7V286.2c0-13.5-15.7-21.1-26.4-12.7zm320 0L550.2 499.3a16.14 16.14 0 0 0 0 25.4l287.4 225.8c10.7 8.4 26.4.8 26.4-12.7V286.2c0-13.5-15.7-21.1-26.4-12.7zm-620-25.5h-51.2c-3.5 0-6.4 2.7-6.4 6v516c0 3.3 2.9 6 6.4 6h51.2c3.5 0 6.4-2.7 6.4-6V254c0-3.3-2.9-6-6.4-6z'));
  exports.FastForwardOutline = getIcon('fast-forward', outline, getNode(normalViewBox, 'M793.8 499.3L506.4 273.5c-10.7-8.4-26.4-.8-26.4 12.7v451.6c0 13.5 15.7 21.1 26.4 12.7l287.4-225.8a16.14 16.14 0 0 0 0-25.4zm-320 0L186.4 273.5c-10.7-8.4-26.4-.8-26.4 12.7v451.5c0 13.5 15.7 21.1 26.4 12.7l287.4-225.8c4.1-3.2 6.2-8 6.2-12.7 0-4.6-2.1-9.4-6.2-12.6zM857.6 248h-51.2c-3.5 0-6.4 2.7-6.4 6v516c0 3.3 2.9 6 6.4 6h51.2c3.5 0 6.4-2.7 6.4-6V254c0-3.3-2.9-6-6.4-6z'));
  exports.FileAddOutline = getIcon('file-add', outline, getNode(newViewBox, 'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0 0 42 42h216v494zM544 472c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v108H372c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h108v108c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V644h108c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H544V472z'));
  exports.FileExcelOutline = getIcon('file-excel', outline, getNode(newViewBox, 'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0 0 42 42h216v494zM514.1 580.1l-61.8-102.4c-2.2-3.6-6.1-5.8-10.3-5.8h-38.4c-2.3 0-4.5.6-6.4 1.9-5.6 3.5-7.3 10.9-3.7 16.6l82.3 130.4-83.4 132.8a12.04 12.04 0 0 0 10.2 18.4h34.5c4.2 0 8-2.2 10.2-5.7L510 664.8l62.3 101.4c2.2 3.6 6.1 5.7 10.2 5.7H620c2.3 0 4.5-.7 6.5-1.9 5.6-3.6 7.2-11 3.6-16.6l-84-130.4 85.3-132.5a12.04 12.04 0 0 0-10.1-18.5h-35.7c-4.2 0-8.1 2.2-10.3 5.8l-61.2 102.3z'));
  exports.FileExclamationOutline = getIcon('file-exclamation', outline, getNode(newViewBox, 'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0 0 42 42h216v494zM472 744a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm16-104h48c4.4 0 8-3.6 8-8V448c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v184c0 4.4 3.6 8 8 8z'));
  exports.FileImageOutline = getIcon('file-image', outline, getNode(newViewBox, 'M553.1 509.1l-77.8 99.2-41.1-52.4a8 8 0 0 0-12.6 0l-99.8 127.2a7.98 7.98 0 0 0 6.3 12.9H696c6.7 0 10.4-7.7 6.3-12.9l-136.5-174a8.1 8.1 0 0 0-12.7 0zM360 442a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm494.6-153.4L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0 0 42 42h216v494z'));
  exports.FileMarkdownOutline = getIcon('file-markdown', outline, getNode(newViewBox, 'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0 0 42 42h216v494zM429 481.2c-1.9-4.4-6.2-7.2-11-7.2h-35c-6.6 0-12 5.4-12 12v272c0 6.6 5.4 12 12 12h27.1c6.6 0 12-5.4 12-12V582.1l66.8 150.2a12 12 0 0 0 11 7.1H524c4.7 0 9-2.8 11-7.1l66.8-150.6V758c0 6.6 5.4 12 12 12H641c6.6 0 12-5.4 12-12V486c0-6.6-5.4-12-12-12h-34.7c-4.8 0-9.1 2.8-11 7.2l-83.1 191-83.2-191z'));
  exports.FilePptOutline = getIcon('file-ppt', outline, getNode(newViewBox, 'M424 476c-4.4 0-8 3.6-8 8v276c0 4.4 3.6 8 8 8h32.5c4.4 0 8-3.6 8-8v-95.5h63.3c59.4 0 96.2-38.9 96.2-94.1 0-54.5-36.3-94.3-96-94.3H424zm150.6 94.3c0 43.4-26.5 54.3-71.2 54.3h-38.9V516.2h56.2c33.8 0 53.9 19.7 53.9 54.1zm280-281.7L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0 0 42 42h216v494z'));
  exports.FileTextOutline = getIcon('file-text', outline, getNode(newViewBox, 'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0 0 42 42h216v494zM504 618H320c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM312 490v48c0 4.4 3.6 8 8 8h384c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H320c-4.4 0-8 3.6-8 8z'));
  exports.FilePdfOutline = getIcon('file-pdf', outline, getNode(newViewBox, 'M531.3 574.4l.3-1.4c5.8-23.9 13.1-53.7 7.4-80.7-3.8-21.3-19.5-29.6-32.9-30.2-15.8-.7-29.9 8.3-33.4 21.4-6.6 24-.7 56.8 10.1 98.6-13.6 32.4-35.3 79.5-51.2 107.5-29.6 15.3-69.3 38.9-75.2 68.7-1.2 5.5.2 12.5 3.5 18.8 3.7 7 9.6 12.4 16.5 15 3 1.1 6.6 2 10.8 2 17.6 0 46.1-14.2 84.1-79.4 5.8-1.9 11.8-3.9 17.6-5.9 27.2-9.2 55.4-18.8 80.9-23.1 28.2 15.1 60.3 24.8 82.1 24.8 21.6 0 30.1-12.8 33.3-20.5 5.6-13.5 2.9-30.5-6.2-39.6-13.2-13-45.3-16.4-95.3-10.2-24.6-15-40.7-35.4-52.4-65.8zM421.6 726.3c-13.9 20.2-24.4 30.3-30.1 34.7 6.7-12.3 19.8-25.3 30.1-34.7zm87.6-235.5c5.2 8.9 4.5 35.8.5 49.4-4.9-19.9-5.6-48.1-2.7-51.4.8.1 1.5.7 2.2 2zm-1.6 120.5c10.7 18.5 24.2 34.4 39.1 46.2-21.6 4.9-41.3 13-58.9 20.2-4.2 1.7-8.3 3.4-12.3 5 13.3-24.1 24.4-51.4 32.1-71.4zm155.6 65.5c.1.2.2.5-.4.9h-.2l-.2.3c-.8.5-9 5.3-44.3-8.6 40.6-1.9 45 7.3 45.1 7.4zm191.4-388.2L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0 0 42 42h216v494z'));
  exports.FileZipOutline = getIcon('file-zip', outline, getNode(newViewBox, 'M296 392h64v64h-64zm0 190v160h128V582h-64v-62h-64v62zm80 48v64h-32v-64h32zm-16-302h64v64h-64zm-64-64h64v64h-64zm64 192h64v64h-64zm0-256h64v64h-64zm494.6 88.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h64v64h64v-64h174v216a42 42 0 0 0 42 42h216v494z'));
  exports.FileOutline = getIcon('file', outline, getNode(newViewBox, 'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0 0 42 42h216v494z'));
  exports.FilterOutline = getIcon('filter', outline, getNode(newViewBox, 'M880.1 154H143.9c-24.5 0-39.8 26.7-27.5 48L349 597.4V838c0 17.7 14.2 32 31.8 32h262.4c17.6 0 31.8-14.3 31.8-32V597.4L907.7 202c12.2-21.3-3.1-48-27.6-48zM603.4 798H420.6V642h182.9v156zm9.6-236.6l-9.5 16.6h-183l-9.5-16.6L212.7 226h598.6L613 561.4z'));
  exports.FileWordOutline = getIcon('file-word', outline, getNode(newViewBox, 'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0 0 42 42h216v494zM528.1 472h-32.2c-5.5 0-10.3 3.7-11.6 9.1L434.6 680l-46.1-198.7c-1.3-5.4-6.1-9.3-11.7-9.3h-35.4a12.02 12.02 0 0 0-11.6 15.1l74.2 276c1.4 5.2 6.2 8.9 11.6 8.9h32c5.4 0 10.2-3.6 11.6-8.9l52.8-197 52.8 197c1.4 5.2 6.2 8.9 11.6 8.9h31.8c5.4 0 10.2-3.6 11.6-8.9l74.4-276a12.04 12.04 0 0 0-11.6-15.1H647c-5.6 0-10.4 3.9-11.7 9.3l-45.8 199.1-49.8-199.3c-1.3-5.4-6.1-9.1-11.6-9.1z'));
  exports.FireOutline = getIcon('fire', outline, getNode(newViewBox, 'M834.1 469.2A347.49 347.49 0 0 0 751.2 354l-29.1-26.7a8.09 8.09 0 0 0-13 3.3l-13 37.3c-8.1 23.4-23 47.3-44.1 70.8-1.4 1.5-3 1.9-4.1 2-1.1.1-2.8-.1-4.3-1.5-1.4-1.2-2.1-3-2-4.8 3.7-60.2-14.3-128.1-53.7-202C555.3 171 510 123.1 453.4 89.7l-41.3-24.3c-5.4-3.2-12.3 1-12 7.3l2.2 48c1.5 32.8-2.3 61.8-11.3 85.9-11 29.5-26.8 56.9-47 81.5a295.64 295.64 0 0 1-47.5 46.1 352.6 352.6 0 0 0-100.3 121.5A347.75 347.75 0 0 0 160 610c0 47.2 9.3 92.9 27.7 136a349.4 349.4 0 0 0 75.5 110.9c32.4 32 70 57.2 111.9 74.7C418.5 949.8 464.5 959 512 959s93.5-9.2 136.9-27.3A348.6 348.6 0 0 0 760.8 857c32.4-32 57.8-69.4 75.5-110.9a344.2 344.2 0 0 0 27.7-136c0-48.8-10-96.2-29.9-140.9zM713 808.5c-53.7 53.2-125 82.4-201 82.4s-147.3-29.2-201-82.4c-53.5-53.1-83-123.5-83-198.4 0-43.5 9.8-85.2 29.1-124 18.8-37.9 46.8-71.8 80.8-97.9a349.6 349.6 0 0 0 58.6-56.8c25-30.5 44.6-64.5 58.2-101a240 240 0 0 0 12.1-46.5c24.1 22.2 44.3 49 61.2 80.4 33.4 62.6 48.8 118.3 45.8 165.7a74.01 74.01 0 0 0 24.4 59.8 73.36 73.36 0 0 0 53.4 18.8c19.7-1 37.8-9.7 51-24.4 13.3-14.9 24.8-30.1 34.4-45.6 14 17.9 25.7 37.4 35 58.4 15.9 35.8 24 73.9 24 113.1 0 74.9-29.5 145.4-83 198.4z'));
  exports.FileUnknownOutline = getIcon('file-unknown', outline, getNode(newViewBox, 'M854.6 288.7L639.4 73.4c-6-6-14.2-9.4-22.7-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.6-9.4-22.6zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0 0 42 42h216v494zM402 549c0 5.4 4.4 9.5 9.8 9.5h32.4c5.4 0 9.8-4.2 9.8-9.4 0-28.2 25.8-51.6 58-51.6s58 23.4 58 51.5c0 25.3-21 47.2-49.3 50.9-19.3 2.8-34.5 20.3-34.7 40.1v32c0 5.5 4.5 10 10 10h32c5.5 0 10-4.5 10-10v-12.2c0-6 4-11.5 9.7-13.3 44.6-14.4 75-54 74.3-98.9-.8-55.5-49.2-100.8-108.5-101.6-61.4-.7-111.5 45.6-111.5 103zm78 195a32 32 0 1 0 64 0 32 32 0 1 0-64 0z'));
  exports.FlagOutline = getIcon('flag', outline, getNode(newViewBox, 'M880 305H624V192c0-17.7-14.3-32-32-32H184v-40c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v784c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V640h248v113c0 17.7 14.3 32 32 32h416c17.7 0 32-14.3 32-32V337c0-17.7-14.3-32-32-32zM184 568V232h368v336H184zm656 145H504v-73h112c4.4 0 8-3.6 8-8V377h216v336z'));
  exports.FolderAddOutline = getIcon('folder-add', outline, getNode(newViewBox, 'M484 443.1V528h-84.5c-4.1 0-7.5 3.1-7.5 7v42c0 3.8 3.4 7 7.5 7H484v84.9c0 3.9 3.2 7.1 7 7.1h42c3.9 0 7-3.2 7-7.1V584h84.5c4.1 0 7.5-3.2 7.5-7v-42c0-3.9-3.4-7-7.5-7H540v-84.9c0-3.9-3.1-7.1-7-7.1h-42c-3.8 0-7 3.2-7 7.1zm396-144.7H521L403.7 186.2a8.15 8.15 0 0 0-5.5-2.2H144c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V330.4c0-17.7-14.3-32-32-32zM840 768H184V256h188.5l119.6 114.4H840V768z'));
  exports.FolderOutline = getIcon('folder', outline, getNode(newViewBox, 'M880 298.4H521L403.7 186.2a8.15 8.15 0 0 0-5.5-2.2H144c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V330.4c0-17.7-14.3-32-32-32zM840 768H184V256h188.5l119.6 114.4H840V768z'));
  exports.FolderOpenOutline = getIcon('folder-open', outline, getNode(newViewBox, 'M928 444H820V330.4c0-17.7-14.3-32-32-32H473L355.7 186.2a8.15 8.15 0 0 0-5.5-2.2H96c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h698c13 0 24.8-7.9 29.7-20l134-332c1.5-3.8 2.3-7.9 2.3-12 0-17.7-14.3-32-32-32zM136 256h188.5l119.6 114.4H748V444H238c-13 0-24.8 7.9-29.7 20L136 643.2V256zm635.3 512H159l103.3-256h612.4L771.3 768z'));
  exports.ForwardOutline = getIcon('forward', outline, getNode(normalViewBox, 'M825.8 498L538.4 249.9c-10.7-9.2-26.4-.9-26.4 14v496.3c0 14.9 15.7 23.2 26.4 14L825.8 526c8.3-7.2 8.3-20.8 0-28zm-320 0L218.4 249.9c-10.7-9.2-26.4-.9-26.4 14v496.3c0 14.9 15.7 23.2 26.4 14L505.8 526c4.1-3.6 6.2-8.8 6.2-14 0-5.2-2.1-10.4-6.2-14z'));
  exports.FrownOutline = getIcon('frown', outline, getNode(newViewBox, 'M288 421a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm352 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zM512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm263 711c-34.2 34.2-74 61-118.3 79.8C611 874.2 562.3 884 512 884c-50.3 0-99-9.8-144.8-29.2A370.4 370.4 0 0 1 248.9 775c-34.2-34.2-61-74-79.8-118.3C149.8 611 140 562.3 140 512s9.8-99 29.2-144.8A370.4 370.4 0 0 1 249 248.9c34.2-34.2 74-61 118.3-79.8C413 149.8 461.7 140 512 140c50.3 0 99 9.8 144.8 29.2A370.4 370.4 0 0 1 775.1 249c34.2 34.2 61 74 79.8 118.3C874.2 413 884 461.7 884 512s-9.8 99-29.2 144.8A368.89 368.89 0 0 1 775 775zM512 533c-85.5 0-155.6 67.3-160 151.6a8 8 0 0 0 8 8.4h48.1c4.2 0 7.8-3.2 8.1-7.4C420 636.1 461.5 597 512 597s92.1 39.1 95.8 88.6c.3 4.2 3.9 7.4 8.1 7.4H664a8 8 0 0 0 8-8.4C667.6 600.3 597.5 533 512 533z'));
  exports.FundOutline = getIcon('fund', outline, getNode(newViewBox, 'M926 164H94c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V196c0-17.7-14.3-32-32-32zm-40 632H134V236h752v560zm-658.9-82.3c3.1 3.1 8.2 3.1 11.3 0l172.5-172.5 114.4 114.5c3.1 3.1 8.2 3.1 11.3 0l297-297.2c3.1-3.1 3.1-8.2 0-11.3l-36.8-36.8a8.03 8.03 0 0 0-11.3 0L531 565 416.6 450.5a8.03 8.03 0 0 0-11.3 0l-214.9 215a8.03 8.03 0 0 0 0 11.3l36.7 36.9z'));
  exports.FunnelPlotOutline = getIcon('funnel-plot', outline, getNode(newViewBox, 'M880.1 154H143.9c-24.5 0-39.8 26.7-27.5 48L349 607.4V838c0 17.7 14.2 32 31.8 32h262.4c17.6 0 31.8-14.3 31.8-32V607.4L907.7 202c12.2-21.3-3.1-48-27.6-48zM603.4 798H420.6V650h182.9v148zm9.6-226.6l-8.4 14.6H419.3l-8.4-14.6L334.4 438h355.2L613 571.4zM726.3 374H297.7l-85-148h598.6l-85 148z'));
  exports.GiftOutline = getIcon('gift', outline, getNode(newViewBox, 'M880 310H732.4c13.6-21.4 21.6-46.8 21.6-74 0-76.1-61.9-138-138-138-41.4 0-78.7 18.4-104 47.4-25.3-29-62.6-47.4-104-47.4-76.1 0-138 61.9-138 138 0 27.2 7.9 52.6 21.6 74H144c-17.7 0-32 14.3-32 32v200c0 4.4 3.6 8 8 8h40v344c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V550h40c4.4 0 8-3.6 8-8V342c0-17.7-14.3-32-32-32zm-334-74c0-38.6 31.4-70 70-70s70 31.4 70 70-31.4 70-70 70h-70v-70zm-138-70c38.6 0 70 31.4 70 70v70h-70c-38.6 0-70-31.4-70-70s31.4-70 70-70zM180 482V378h298v104H180zm48 68h250v308H228V550zm568 308H546V550h250v308zm48-376H546V378h298v104z'));
  exports.GithubOutline = getIcon('github', outline, getNode(newViewBox, 'M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9a127.5 127.5 0 0 1 38.1 91v112.5c.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z'));
  exports.GitlabOutline = getIcon('gitlab', outline, getNode(newViewBox, 'M913.9 552.2L805 181.4v-.1c-7.6-22.9-25.7-36.5-48.3-36.5-23.4 0-42.5 13.5-49.7 35.2l-71.4 213H388.8l-71.4-213c-7.2-21.7-26.3-35.2-49.7-35.2-23.1 0-42.5 14.8-48.4 36.6L110.5 552.2c-4.4 14.7 1.2 31.4 13.5 40.7l368.5 276.4c2.6 3.6 6.2 6.3 10.4 7.8l8.6 6.4 8.5-6.4c4.9-1.7 9-4.7 11.9-8.9l368.4-275.4c12.4-9.2 18-25.9 13.6-40.6zM751.7 193.4c1-1.8 2.9-1.9 3.5-1.9 1.1 0 2.5.3 3.4 3L818 394.3H684.5l67.2-200.9zm-487.4 1c.9-2.6 2.3-2.9 3.4-2.9 2.7 0 2.9.1 3.4 1.7l67.3 201.2H206.5l57.8-200zM158.8 558.7l28.2-97.3 202.4 270.2-230.6-172.9zm73.9-116.4h122.1l90.8 284.3-212.9-284.3zM512.9 776L405.7 442.3H620L512.9 776zm157.9-333.7h119.5L580 723.1l90.8-280.8zm-40.7 293.9l207.3-276.7 29.5 99.2-236.8 177.5z'));
  exports.HeartOutline = getIcon('heart', outline, getNode(newViewBox, 'M923 283.6a260.04 260.04 0 0 0-56.9-82.8 264.4 264.4 0 0 0-84-55.5A265.34 265.34 0 0 0 679.7 125c-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5a258.44 258.44 0 0 0-56.9 82.8c-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3.1-35.3-7-69.6-20.9-101.9zM512 814.8S156 586.7 156 385.5C156 283.6 240.3 201 344.3 201c73.1 0 136.5 40.8 167.7 100.4C543.2 241.8 606.6 201 679.7 201c104 0 188.3 82.6 188.3 184.5 0 201.2-356 429.3-356 429.3z'));
  exports.HddOutline = getIcon('hdd', outline, getNode(newViewBox, 'M832 64H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-600 72h560v208H232V136zm560 480H232V408h560v208zm0 272H232V680h560v208zM496 208H312c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM312 544h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H312c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8zm328 244a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'));
  exports.HighlightOutline = getIcon('highlight', outline, getNode(newViewBox, 'M957.6 507.4L603.2 158.2a7.9 7.9 0 0 0-11.2 0L353.3 393.4a8.03 8.03 0 0 0-.1 11.3l.1.1 40 39.4-117.2 115.3a8.03 8.03 0 0 0-.1 11.3l.1.1 39.5 38.9-189.1 187H72.1c-4.4 0-8.1 3.6-8.1 8V860c0 4.4 3.6 8 8 8h344.9c2.1 0 4.1-.8 5.6-2.3l76.1-75.6 40.4 39.8a7.9 7.9 0 0 0 11.2 0l117.1-115.6 40.1 39.5a7.9 7.9 0 0 0 11.2 0l238.7-235.2c3.4-3 3.4-8 .3-11.2zM389.8 796.2H229.6l134.4-133 80.1 78.9-54.3 54.1zm154.8-62.1L373.2 565.2l68.6-67.6 171.4 168.9-68.6 67.6zM713.1 658L450.3 399.1 597.6 254l262.8 259-147.3 145z'));
  exports.HomeOutline = getIcon('home', outline, getNode(newViewBox, 'M946.5 505L560.1 118.8l-25.9-25.9a31.5 31.5 0 0 0-44.4 0L77.5 505a63.9 63.9 0 0 0-18.8 46c.4 35.2 29.7 63.3 64.9 63.3h42.5V940h691.8V614.3h43.4c17.1 0 33.2-6.7 45.3-18.8a63.6 63.6 0 0 0 18.7-45.3c0-17-6.7-33.1-18.8-45.2zM568 868H456V664h112v204zm217.9-325.7V868H632V640c0-22.1-17.9-40-40-40H432c-22.1 0-40 17.9-40 40v228H238.1V542.3h-96l370-369.7 23.1 23.1L882 542.3h-96.1z'));
  exports.HourglassOutline = getIcon('hourglass', outline, getNode(newViewBox, 'M742 318V184h86c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H196c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h86v134c0 81.5 42.4 153.2 106.4 194-64 40.8-106.4 112.5-106.4 194v134h-86c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h632c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-86V706c0-81.5-42.4-153.2-106.4-194 64-40.8 106.4-112.5 106.4-194zm-72 388v134H354V706c0-42.2 16.4-81.9 46.3-111.7C430.1 564.4 469.8 548 512 548s81.9 16.4 111.7 46.3C653.6 624.1 670 663.8 670 706zm0-388c0 42.2-16.4 81.9-46.3 111.7C593.9 459.6 554.2 476 512 476s-81.9-16.4-111.7-46.3A156.63 156.63 0 0 1 354 318V184h316v134z'));
  exports.Html5Outline = getIcon('html5', outline, getNode(newViewBox, 'M145 96l66 746.6L511.8 928l299.6-85.4L878.7 96H145zm610.9 700.6l-244.1 69.6-245.2-69.6-56.7-641.2h603.8l-57.8 641.2zM281 249l1.7 24.3 22.7 253.5h206.5v-.1h112.9l-11.4 118.5L511 672.9v.2h-.8l-102.4-27.7-6.5-73.2h-91l11.3 144.7 188.6 52h1.7v-.4l187.7-51.7 1.7-16.3 21.2-242.2 3.2-24.3H511v.2H389.9l-8.2-94.2h352.1l1.7-19.5 4.8-47.2L742 249H511z'));
  exports.IdcardOutline = getIcon('idcard', outline, getNode(newViewBox, 'M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136V232h752v560zM610.3 476h123.4c1.3 0 2.3-3.6 2.3-8v-48c0-4.4-1-8-2.3-8H610.3c-1.3 0-2.3 3.6-2.3 8v48c0 4.4 1 8 2.3 8zm4.8 144h185.7c3.9 0 7.1-3.6 7.1-8v-48c0-4.4-3.2-8-7.1-8H615.1c-3.9 0-7.1 3.6-7.1 8v48c0 4.4 3.2 8 7.1 8zM224 673h43.9c4.2 0 7.6-3.3 7.9-7.5 3.8-50.5 46-90.5 97.2-90.5s93.4 40 97.2 90.5c.3 4.2 3.7 7.5 7.9 7.5H522a8 8 0 0 0 8-8.4c-2.8-53.3-32-99.7-74.6-126.1a111.8 111.8 0 0 0 29.1-75.5c0-61.9-49.9-112-111.4-112s-111.4 50.1-111.4 112c0 29.1 11 55.5 29.1 75.5a158.09 158.09 0 0 0-74.6 126.1c-.4 4.6 3.2 8.4 7.8 8.4zm149-262c28.5 0 51.7 23.3 51.7 52s-23.2 52-51.7 52-51.7-23.3-51.7-52 23.2-52 51.7-52z'));
  exports.InfoCircleOutline = getIcon('info-circle', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z', 'M464 336a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z'));
  exports.InstagramOutline = getIcon('instagram', outline, getNode(newViewBox, 'M512 306.9c-113.5 0-205.1 91.6-205.1 205.1S398.5 717.1 512 717.1 717.1 625.5 717.1 512 625.5 306.9 512 306.9zm0 338.4c-73.4 0-133.3-59.9-133.3-133.3S438.6 378.7 512 378.7 645.3 438.6 645.3 512 585.4 645.3 512 645.3zm213.5-394.6c-26.5 0-47.9 21.4-47.9 47.9s21.4 47.9 47.9 47.9 47.9-21.3 47.9-47.9a47.84 47.84 0 0 0-47.9-47.9zM911.8 512c0-55.2.5-109.9-2.6-165-3.1-64-17.7-120.8-64.5-167.6-46.9-46.9-103.6-61.4-167.6-64.5-55.2-3.1-109.9-2.6-165-2.6-55.2 0-109.9-.5-165 2.6-64 3.1-120.8 17.7-167.6 64.5C132.6 226.3 118.1 283 115 347c-3.1 55.2-2.6 109.9-2.6 165s-.5 109.9 2.6 165c3.1 64 17.7 120.8 64.5 167.6 46.9 46.9 103.6 61.4 167.6 64.5 55.2 3.1 109.9 2.6 165 2.6 55.2 0 109.9.5 165-2.6 64-3.1 120.8-17.7 167.6-64.5 46.9-46.9 61.4-103.6 64.5-167.6 3.2-55.1 2.6-109.8 2.6-165zm-88 235.8c-7.3 18.2-16.1 31.8-30.2 45.8-14.1 14.1-27.6 22.9-45.8 30.2C695.2 844.7 570.3 840 512 840c-58.3 0-183.3 4.7-235.9-16.1-18.2-7.3-31.8-16.1-45.8-30.2-14.1-14.1-22.9-27.6-30.2-45.8C179.3 695.2 184 570.3 184 512c0-58.3-4.7-183.3 16.1-235.9 7.3-18.2 16.1-31.8 30.2-45.8s27.6-22.9 45.8-30.2C328.7 179.3 453.7 184 512 184s183.3-4.7 235.9 16.1c18.2 7.3 31.8 16.1 45.8 30.2 14.1 14.1 22.9 27.6 30.2 45.8C844.7 328.7 840 453.7 840 512c0 58.3 4.7 183.2-16.2 235.8z'));
  exports.InsuranceOutline = getIcon('insurance', outline, getNode(newViewBox, 'M441.6 306.8L403 288.6a6.1 6.1 0 0 0-8.4 3.7c-17.5 58.5-45.2 110.1-82.2 153.6a6.05 6.05 0 0 0-1.2 5.6l13.2 43.5c1.3 4.4 7 5.7 10.2 2.4 7.7-8.1 15.4-16.9 23.1-26V656c0 4.4 3.6 8 8 8H403c4.4 0 8-3.6 8-8V393.1a429.2 429.2 0 0 0 33.6-79c1-2.9-.3-6-3-7.3zm26.8 9.2v127.2c0 4.4 3.6 8 8 8h65.9v18.6h-94.9c-4.4 0-8 3.6-8 8v35.6c0 4.4 3.6 8 8 8h55.1c-19.1 30.8-42.4 55.7-71 76a6 6 0 0 0-1.6 8.1l22.8 36.5c1.9 3.1 6.2 3.8 8.9 1.4 31.6-26.8 58.7-62.9 80.6-107.6v120c0 4.4 3.6 8 8 8h36.2c4.4 0 8-3.6 8-8V536c21.3 41.7 47.5 77.5 78.1 106.9 2.6 2.5 6.8 2.1 8.9-.7l26.3-35.3c2-2.7 1.4-6.5-1.2-8.4-30.5-22.6-54.2-47.8-72.3-76.9h59c4.4 0 8-3.6 8-8V478c0-4.4-3.6-8-8-8h-98.8v-18.6h66.7c4.4 0 8-3.6 8-8V316c0-4.4-3.6-8-8-8H476.4c-4.4 0-8 3.6-8 8zm51.5 42.8h97.9v41.6h-97.9v-41.6zm347-188.9L527.1 54.1C523 52.7 517.5 52 512 52s-11 .7-15.1 2.1L157.1 169.9c-8.3 2.8-15.1 12.4-15.1 21.2v482.4c0 8.8 5.7 20.4 12.6 25.9L499.3 968c3.5 2.7 8 4.1 12.6 4.1s9.2-1.4 12.6-4.1l344.7-268.6c6.9-5.4 12.6-17 12.6-25.9V191.1c.2-8.8-6.6-18.3-14.9-21.2zM810 654.3L512 886.5 214 654.3V226.7l298-101.6 298 101.6v427.6z'));
  exports.InteractionOutline = getIcon('interaction', outline, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656zM304.8 524h50.7c3.7 0 6.8-3 6.8-6.8v-78.9c0-19.7 15.9-35.6 35.5-35.6h205.7v53.4c0 5.7 6.5 8.8 10.9 5.3l109.1-85.7c3.5-2.7 3.5-8 0-10.7l-109.1-85.7c-4.4-3.5-10.9-.3-10.9 5.3V338H397.7c-55.1 0-99.7 44.8-99.7 100.1V517c0 4 3 7 6.8 7zm-4.2 134.9l109.1 85.7c4.4 3.5 10.9.3 10.9-5.3v-53.4h205.7c55.1 0 99.7-44.8 99.7-100.1v-78.9c0-3.7-3-6.8-6.8-6.8h-50.7c-3.7 0-6.8 3-6.8 6.8v78.9c0 19.7-15.9 35.6-35.5 35.6H420.6V568c0-5.7-6.5-8.8-10.9-5.3l-109.1 85.7c-3.5 2.5-3.5 7.8 0 10.5z'));
  exports.InterationOutline = getIcon('interation', outline, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656zM304.8 524h50.7c3.7 0 6.8-3 6.8-6.8v-78.9c0-19.7 15.9-35.6 35.5-35.6h205.7v53.4c0 5.7 6.5 8.8 10.9 5.3l109.1-85.7c3.5-2.7 3.5-8 0-10.7l-109.1-85.7c-4.4-3.5-10.9-.3-10.9 5.3V338H397.7c-55.1 0-99.7 44.8-99.7 100.1V517c0 4 3 7 6.8 7zm-4.2 134.9l109.1 85.7c4.4 3.5 10.9.3 10.9-5.3v-53.4h205.7c55.1 0 99.7-44.8 99.7-100.1v-78.9c0-3.7-3-6.8-6.8-6.8h-50.7c-3.7 0-6.8 3-6.8 6.8v78.9c0 19.7-15.9 35.6-35.5 35.6H420.6V568c0-5.7-6.5-8.8-10.9-5.3l-109.1 85.7c-3.5 2.5-3.5 7.8 0 10.5z'));
  exports.LayoutOutline = getIcon('layout', outline, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-696 72h136v656H184V184zm656 656H384V384h456v456zM384 320V184h456v136H384z'));
  exports.LeftCircleOutline = getIcon('left-circle', outline, getNode(newViewBox, 'M603.3 327.5l-246 178a7.95 7.95 0 0 0 0 12.9l246 178c5.3 3.8 12.7 0 12.7-6.5V643c0-10.2-4.9-19.9-13.2-25.9L457.4 512l145.4-105.2c8.3-6 13.2-15.6 13.2-25.9V334c0-6.5-7.4-10.3-12.7-6.5z', 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'));
  exports.LeftSquareOutline = getIcon('left-square', outline, getNode(newViewBox, 'M365.3 518.5l246 178c5.3 3.8 12.7 0 12.7-6.5v-46.9c0-10.2-4.9-19.9-13.2-25.9L465.4 512l145.4-105.2c8.3-6 13.2-15.6 13.2-25.9V334c0-6.5-7.4-10.3-12.7-6.5l-246 178a8.05 8.05 0 0 0 0 13z', 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'));
  exports.LikeOutline = getIcon('like', outline, getNode(newViewBox, 'M885.9 533.7c16.8-22.2 26.1-49.4 26.1-77.7 0-44.9-25.1-87.4-65.5-111.1a67.67 67.67 0 0 0-34.3-9.3H572.4l6-122.9c1.4-29.7-9.1-57.9-29.5-79.4A106.62 106.62 0 0 0 471 99.9c-52 0-98 35-111.8 85.1l-85.9 311H144c-17.7 0-32 14.3-32 32v364c0 17.7 14.3 32 32 32h601.3c9.2 0 18.2-1.8 26.5-5.4 47.6-20.3 78.3-66.8 78.3-118.4 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7-.2-12.6-2-25.1-5.6-37.1zM184 852V568h81v284h-81zm636.4-353l-21.9 19 13.9 25.4a56.2 56.2 0 0 1 6.9 27.3c0 16.5-7.2 32.2-19.6 43l-21.9 19 13.9 25.4a56.2 56.2 0 0 1 6.9 27.3c0 16.5-7.2 32.2-19.6 43l-21.9 19 13.9 25.4a56.2 56.2 0 0 1 6.9 27.3c0 22.4-13.2 42.6-33.6 51.8H329V564.8l99.5-360.5a44.1 44.1 0 0 1 42.2-32.3c7.6 0 15.1 2.2 21.1 6.7 9.9 7.4 15.2 18.6 14.6 30.5l-9.6 198.4h314.4C829 418.5 840 436.9 840 456c0 16.5-7.2 32.1-19.6 43z'));
  exports.LinkedinOutline = getIcon('linkedin', outline, getNode(newViewBox, 'M847.7 112H176.3c-35.5 0-64.3 28.8-64.3 64.3v671.4c0 35.5 28.8 64.3 64.3 64.3h671.4c35.5 0 64.3-28.8 64.3-64.3V176.3c0-35.5-28.8-64.3-64.3-64.3zm0 736c-447.8-.1-671.7-.2-671.7-.3.1-447.8.2-671.7.3-671.7 447.8.1 671.7.2 671.7.3-.1 447.8-.2 671.7-.3 671.7zM230.6 411.9h118.7v381.8H230.6zm59.4-52.2c37.9 0 68.8-30.8 68.8-68.8a68.8 68.8 0 1 0-137.6 0c-.1 38 30.7 68.8 68.8 68.8zm252.3 245.1c0-49.8 9.5-98 71.2-98 60.8 0 61.7 56.9 61.7 101.2v185.7h118.6V584.3c0-102.8-22.2-181.9-142.3-181.9-57.7 0-96.4 31.7-112.3 61.7h-1.6v-52.2H423.7v381.8h118.6V604.8z'));
  exports.LockOutline = getIcon('lock', outline, getNode(newViewBox, 'M832 464h-68V240c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zM332 240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v224H332V240zm460 600H232V536h560v304zM484 701v53c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-53a48.01 48.01 0 1 0-56 0z'));
  exports.MedicineBoxOutline = getIcon('medicine-box', outline, getNode(newViewBox, 'M839.2 278.1a32 32 0 0 0-30.4-22.1H736V144c0-17.7-14.3-32-32-32H320c-17.7 0-32 14.3-32 32v112h-72.8a31.9 31.9 0 0 0-30.4 22.1L112 502v378c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V502l-72.8-223.9zM360 184h304v72H360v-72zm480 656H184V513.4L244.3 328h535.4L840 513.4V840zM652 572H544V464c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v108H372c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h108v108c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V636h108c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z'));
  exports.MehOutline = getIcon('meh', outline, getNode(newViewBox, 'M288 421a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm352 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zM512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm263 711c-34.2 34.2-74 61-118.3 79.8C611 874.2 562.3 884 512 884c-50.3 0-99-9.8-144.8-29.2A370.4 370.4 0 0 1 248.9 775c-34.2-34.2-61-74-79.8-118.3C149.8 611 140 562.3 140 512s9.8-99 29.2-144.8A370.4 370.4 0 0 1 249 248.9c34.2-34.2 74-61 118.3-79.8C413 149.8 461.7 140 512 140c50.3 0 99 9.8 144.8 29.2A370.4 370.4 0 0 1 775.1 249c34.2 34.2 61 74 79.8 118.3C874.2 413 884 461.7 884 512s-9.8 99-29.2 144.8A368.89 368.89 0 0 1 775 775zM664 565H360c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h304c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z'));
  exports.MailOutline = getIcon('mail', outline, getNode(newViewBox, 'M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 110.8V792H136V270.8l-27.6-21.5 39.3-50.5 42.8 33.3h643.1l42.8-33.3 39.3 50.5-27.7 21.5zM833.6 232L512 482 190.4 232l-42.8-33.3-39.3 50.5 27.6 21.5 341.6 265.6a55.99 55.99 0 0 0 68.7 0L888 270.8l27.6-21.5-39.3-50.5-42.7 33.2z'));
  exports.MessageOutline = getIcon('message', outline, getNode(newViewBox, 'M464 512a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm200 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm-400 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm661.2-173.6c-22.6-53.7-55-101.9-96.3-143.3a444.35 444.35 0 0 0-143.3-96.3C630.6 75.7 572.2 64 512 64h-2c-60.6.3-119.3 12.3-174.5 35.9a445.35 445.35 0 0 0-142 96.5c-40.9 41.3-73 89.3-95.2 142.8-23 55.4-34.6 114.3-34.3 174.9A449.4 449.4 0 0 0 112 714v152a46 46 0 0 0 46 46h152.1A449.4 449.4 0 0 0 510 960h2.1c59.9 0 118-11.6 172.7-34.3a444.48 444.48 0 0 0 142.8-95.2c41.3-40.9 73.8-88.7 96.5-142 23.6-55.2 35.6-113.9 35.9-174.5.3-60.9-11.5-120-34.8-175.6zm-151.1 438C704 845.8 611 884 512 884h-1.7c-60.3-.3-120.2-15.3-173.1-43.5l-8.4-4.5H188V695.2l-4.5-8.4C155.3 633.9 140.3 574 140 513.7c-.4-99.7 37.7-193.3 107.6-263.8 69.8-70.5 163.1-109.5 262.8-109.9h1.7c50 0 98.5 9.7 144.2 28.9 44.6 18.7 84.6 45.6 119 80 34.3 34.3 61.3 74.4 80 119 19.4 46.2 29.1 95.2 28.9 145.8-.6 99.6-39.7 192.9-110.1 262.7z'));
  exports.MinusCircleOutline = getIcon('minus-circle', outline, getNode(newViewBox, 'M696 480H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z', 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'));
  exports.MinusSquareOutline = getIcon('minus-square', outline, getNode(newViewBox, 'M328 544h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z', 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'));
  exports.MobileOutline = getIcon('mobile', outline, getNode(newViewBox, 'M744 62H280c-35.3 0-64 28.7-64 64v768c0 35.3 28.7 64 64 64h464c35.3 0 64-28.7 64-64V126c0-35.3-28.7-64-64-64zm-8 824H288V134h448v752zM472 784a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'));
  exports.MoneyCollectOutline = getIcon('money-collect', outline, getNode(newViewBox, 'M911.5 700.7a8 8 0 0 0-10.3-4.8L840 718.2V180c0-37.6-30.4-68-68-68H252c-37.6 0-68 30.4-68 68v538.2l-61.3-22.3c-.9-.3-1.8-.5-2.7-.5-4.4 0-8 3.6-8 8V763c0 3.3 2.1 6.3 5.3 7.5L501 910.1c7.1 2.6 14.8 2.6 21.9 0l383.8-139.5c3.2-1.2 5.3-4.2 5.3-7.5v-59.6c0-1-.2-1.9-.5-2.8zM512 837.5l-256-93.1V184h512v560.4l-256 93.1zM660.6 312h-54.5c-3 0-5.8 1.7-7.1 4.4l-84.7 168.8H511l-84.7-168.8a8 8 0 0 0-7.1-4.4h-55.7c-1.3 0-2.6.3-3.8 1-3.9 2.1-5.3 7-3.2 10.8l103.9 191.6h-57c-4.4 0-8 3.6-8 8v27.1c0 4.4 3.6 8 8 8h76v39h-76c-4.4 0-8 3.6-8 8v27.1c0 4.4 3.6 8 8 8h76V704c0 4.4 3.6 8 8 8h49.9c4.4 0 8-3.6 8-8v-63.5h76.3c4.4 0 8-3.6 8-8v-27.1c0-4.4-3.6-8-8-8h-76.3v-39h76.3c4.4 0 8-3.6 8-8v-27.1c0-4.4-3.6-8-8-8H564l103.7-191.6c.6-1.2 1-2.5 1-3.8-.1-4.3-3.7-7.9-8.1-7.9z'));
  exports.PauseCircleOutline = getIcon('pause-circle', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm-88-532h-48c-4.4 0-8 3.6-8 8v304c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V360c0-4.4-3.6-8-8-8zm224 0h-48c-4.4 0-8 3.6-8 8v304c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V360c0-4.4-3.6-8-8-8z'));
  exports.PayCircleOutline = getIcon('pay-circle', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm159.6-585h-59.5c-3 0-5.8 1.7-7.1 4.4l-90.6 180H511l-90.6-180a8 8 0 0 0-7.1-4.4h-60.7c-1.3 0-2.6.3-3.8 1-3.9 2.1-5.3 7-3.2 10.9L457 515.7h-61.4c-4.4 0-8 3.6-8 8v29.9c0 4.4 3.6 8 8 8h81.7V603h-81.7c-4.4 0-8 3.6-8 8v29.9c0 4.4 3.6 8 8 8h81.7V717c0 4.4 3.6 8 8 8h54.3c4.4 0 8-3.6 8-8v-68.1h82c4.4 0 8-3.6 8-8V611c0-4.4-3.6-8-8-8h-82v-41.5h82c4.4 0 8-3.6 8-8v-29.9c0-4.4-3.6-8-8-8h-62l111.1-204.8c.6-1.2 1-2.5 1-3.8-.1-4.4-3.7-8-8.1-8z'));
  exports.NotificationOutline = getIcon('notification', outline, getNode(newViewBox, 'M880 112c-3.8 0-7.7.7-11.6 2.3L292 345.9H128c-8.8 0-16 7.4-16 16.6v299c0 9.2 7.2 16.6 16 16.6h101.7c-3.7 11.6-5.7 23.9-5.7 36.4 0 65.9 53.8 119.5 120 119.5 55.4 0 102.1-37.6 115.9-88.4l408.6 164.2c3.9 1.5 7.8 2.3 11.6 2.3 16.9 0 32-14.2 32-33.2V145.2C912 126.2 897 112 880 112zM344 762.3c-26.5 0-48-21.4-48-47.8 0-11.2 3.9-21.9 11-30.4l84.9 34.1c-2 24.6-22.7 44.1-47.9 44.1zm496 58.4L318.8 611.3l-12.9-5.2H184V417.9h121.9l12.9-5.2L840 203.3v617.4z'));
  exports.PhoneOutline = getIcon('phone', outline, getNode(newViewBox, 'M877.1 238.7L770.6 132.3c-13-13-30.4-20.3-48.8-20.3s-35.8 7.2-48.8 20.3L558.3 246.8c-13 13-20.3 30.5-20.3 48.9 0 18.5 7.2 35.8 20.3 48.9l89.6 89.7a405.46 405.46 0 0 1-86.4 127.3c-36.7 36.9-79.6 66-127.2 86.6l-89.6-89.7c-13-13-30.4-20.3-48.8-20.3a68.2 68.2 0 0 0-48.8 20.3L132.3 673c-13 13-20.3 30.5-20.3 48.9 0 18.5 7.2 35.8 20.3 48.9l106.4 106.4c22.2 22.2 52.8 34.9 84.2 34.9 6.5 0 12.8-.5 19.2-1.6 132.4-21.8 263.8-92.3 369.9-198.3C818 606 888.4 474.6 910.4 342.1c6.3-37.6-6.3-76.3-33.3-103.4zm-37.6 91.5c-19.5 117.9-82.9 235.5-178.4 331s-213 158.9-330.9 178.4c-14.8 2.5-30-2.5-40.8-13.2L184.9 721.9 295.7 611l119.8 120 .9.9 21.6-8a481.29 481.29 0 0 0 285.7-285.8l8-21.6-120.8-120.7 110.8-110.9 104.5 104.5c10.8 10.8 15.8 26 13.3 40.8z'));
  exports.PictureOutline = getIcon('picture', outline, getNode(newViewBox, 'M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136v-39.9l138.5-164.3 150.1 178L658.1 489 888 761.6V792zm0-129.8L664.2 396.8c-3.2-3.8-9-3.8-12.2 0L424.6 666.4l-144-170.7c-3.2-3.8-9-3.8-12.2 0L136 652.7V232h752v430.2zM304 456a88 88 0 1 0 0-176 88 88 0 0 0 0 176zm0-116c15.5 0 28 12.5 28 28s-12.5 28-28 28-28-12.5-28-28 12.5-28 28-28z'));
  exports.PieChartOutline = getIcon('pie-chart', outline, getNode(newViewBox, 'M864 518H506V160c0-4.4-3.6-8-8-8h-26a398.46 398.46 0 0 0-282.8 117.1 398.19 398.19 0 0 0-85.7 127.1A397.61 397.61 0 0 0 72 552a398.46 398.46 0 0 0 117.1 282.8c36.7 36.7 79.5 65.6 127.1 85.7A397.61 397.61 0 0 0 472 952a398.46 398.46 0 0 0 282.8-117.1c36.7-36.7 65.6-79.5 85.7-127.1A397.61 397.61 0 0 0 872 552v-26c0-4.4-3.6-8-8-8zM705.7 787.8A331.59 331.59 0 0 1 470.4 884c-88.1-.4-170.9-34.9-233.2-97.2C174.5 724.1 140 640.7 140 552c0-88.7 34.5-172.1 97.2-234.8 54.6-54.6 124.9-87.9 200.8-95.5V586h364.3c-7.7 76.3-41.3 147-96.6 201.8zM952 462.4l-2.6-28.2c-8.5-92.1-49.4-179-115.2-244.6A399.4 399.4 0 0 0 589 74.6L560.7 72c-4.7-.4-8.7 3.2-8.7 7.9V464c0 4.4 3.6 8 8 8l384-1c4.7 0 8.4-4 8-8.6zm-332.2-58.2V147.6a332.24 332.24 0 0 1 166.4 89.8c45.7 45.6 77 103.6 90 166.1l-256.4.7z'));
  exports.PlaySquareOutline = getIcon('play-square', outline, getNode(newViewBox, 'M442.3 677.6l199.4-156.7a11.3 11.3 0 0 0 0-17.7L442.3 346.4c-7.4-5.8-18.3-.6-18.3 8.8v313.5c0 9.4 10.9 14.7 18.3 8.9z', 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'));
  exports.PlayCircleOutline = getIcon('play-circle', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z', 'M719.4 499.1l-296.1-215A15.9 15.9 0 0 0 398 297v430c0 13.1 14.8 20.5 25.3 12.9l296.1-215a15.9 15.9 0 0 0 0-25.8zm-257.6 134V390.9L628.5 512 461.8 633.1z'));
  exports.PlusCircleOutline = getIcon('plus-circle', outline, getNode(newViewBox, 'M696 480H544V328c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v152H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h152v152c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V544h152c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z', 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'));
  exports.PrinterOutline = getIcon('printer', outline, getNode(newViewBox, 'M820 436h-40c-4.4 0-8 3.6-8 8v40c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-40c0-4.4-3.6-8-8-8zm32-104H732V120c0-4.4-3.6-8-8-8H300c-4.4 0-8 3.6-8 8v212H172c-44.2 0-80 35.8-80 80v328c0 17.7 14.3 32 32 32h168v132c0 4.4 3.6 8 8 8h424c4.4 0 8-3.6 8-8V772h168c17.7 0 32-14.3 32-32V412c0-44.2-35.8-80-80-80zM360 180h304v152H360V180zm304 664H360V568h304v276zm200-140H732V500H292v204H160V412c0-6.6 5.4-12 12-12h680c6.6 0 12 5.4 12 12v292z'));
  exports.PlusSquareOutline = getIcon('plus-square', outline, getNode(newViewBox, 'M328 544h152v152c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V544h152c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H544V328c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v152H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z', 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'));
  exports.ProfileOutline = getIcon('profile', outline, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656zM492 400h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H492c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8zm0 144h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H492c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8zm0 144h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H492c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8zM340 368a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm0 144a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm0 144a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'));
  exports.ProjectOutline = getIcon('project', outline, getNode(newViewBox, 'M280 752h80c4.4 0 8-3.6 8-8V280c0-4.4-3.6-8-8-8h-80c-4.4 0-8 3.6-8 8v464c0 4.4 3.6 8 8 8zm192-280h80c4.4 0 8-3.6 8-8V280c0-4.4-3.6-8-8-8h-80c-4.4 0-8 3.6-8 8v184c0 4.4 3.6 8 8 8zm192 72h80c4.4 0 8-3.6 8-8V280c0-4.4-3.6-8-8-8h-80c-4.4 0-8 3.6-8 8v256c0 4.4 3.6 8 8 8zm216-432H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'));
  exports.PushpinOutline = getIcon('pushpin', outline, getNode(newViewBox, 'M878.3 392.1L631.9 145.7c-6.5-6.5-15-9.7-23.5-9.7s-17 3.2-23.5 9.7L423.8 306.9c-12.2-1.4-24.5-2-36.8-2-73.2 0-146.4 24.1-206.5 72.3a33.23 33.23 0 0 0-2.7 49.4l181.7 181.7-215.4 215.2a15.8 15.8 0 0 0-4.6 9.8l-3.4 37.2c-.9 9.4 6.6 17.4 15.9 17.4.5 0 1 0 1.5-.1l37.2-3.4c3.7-.3 7.2-2 9.8-4.6l215.4-215.4 181.7 181.7c6.5 6.5 15 9.7 23.5 9.7 9.7 0 19.3-4.2 25.9-12.4 56.3-70.3 79.7-158.3 70.2-243.4l161.1-161.1c12.9-12.8 12.9-33.8 0-46.8zM666.2 549.3l-24.5 24.5 3.8 34.4a259.92 259.92 0 0 1-30.4 153.9L262 408.8c12.9-7.1 26.3-13.1 40.3-17.9 27.2-9.4 55.7-14.1 84.7-14.1 9.6 0 19.3.5 28.9 1.6l34.4 3.8 24.5-24.5L608.5 224 800 415.5 666.2 549.3z'));
  exports.PropertySafetyOutline = getIcon('property-safety', outline, getNode(newViewBox, 'M866.9 169.9L527.1 54.1C523 52.7 517.5 52 512 52s-11 .7-15.1 2.1L157.1 169.9c-8.3 2.8-15.1 12.4-15.1 21.2v482.4c0 8.8 5.7 20.4 12.6 25.9L499.3 968c3.5 2.7 8 4.1 12.6 4.1s9.2-1.4 12.6-4.1l344.7-268.6c6.9-5.4 12.6-17 12.6-25.9V191.1c.2-8.8-6.6-18.3-14.9-21.2zM810 654.3L512 886.5 214 654.3V226.7l298-101.6 298 101.6v427.6zM430.5 318h-46c-1.7 0-3.3.4-4.8 1.2a10.1 10.1 0 0 0-4 13.6l88 161.1h-45.2c-5.5 0-10 4.5-10 10v21.3c0 5.5 4.5 10 10 10h63.1v29.7h-63.1c-5.5 0-10 4.5-10 10v21.3c0 5.5 4.5 10 10 10h63.1V658c0 5.5 4.5 10 10 10h41.3c5.5 0 10-4.5 10-10v-51.8h63.4c5.5 0 10-4.5 10-10v-21.3c0-5.5-4.5-10-10-10h-63.4v-29.7h63.4c5.5 0 10-4.5 10-10v-21.3c0-5.5-4.5-10-10-10h-45.7l87.7-161.1a10.05 10.05 0 0 0-8.8-14.8h-45c-3.8 0-7.2 2.1-8.9 5.5l-73.2 144.3-72.9-144.3c-1.7-3.4-5.2-5.5-9-5.5z'));
  exports.QuestionCircleOutline = getIcon('question-circle', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z', 'M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0 1 30.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'));
  exports.ReadOutline = getIcon('read', outline, getNode(newViewBox, 'M928 161H699.2c-49.1 0-97.1 14.1-138.4 40.7L512 233l-48.8-31.3A255.2 255.2 0 0 0 324.8 161H96c-17.7 0-32 14.3-32 32v568c0 17.7 14.3 32 32 32h228.8c49.1 0 97.1 14.1 138.4 40.7l44.4 28.6c1.3.8 2.8 1.3 4.3 1.3s3-.4 4.3-1.3l44.4-28.6C602 807.1 650.1 793 699.2 793H928c17.7 0 32-14.3 32-32V193c0-17.7-14.3-32-32-32zM324.8 721H136V233h188.8c35.4 0 69.8 10.1 99.5 29.2l48.8 31.3 6.9 4.5v462c-47.6-25.6-100.8-39-155.2-39zm563.2 0H699.2c-54.4 0-107.6 13.4-155.2 39V298l6.9-4.5 48.8-31.3c29.7-19.1 64.1-29.2 99.5-29.2H888v488zM396.9 361H211.1c-3.9 0-7.1 3.4-7.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c.1-4.1-3.1-7.5-7-7.5zm223.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c0-4.1-3.2-7.5-7.1-7.5H627.1c-3.9 0-7.1 3.4-7.1 7.5zM396.9 501H211.1c-3.9 0-7.1 3.4-7.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c.1-4.1-3.1-7.5-7-7.5zm416 0H627.1c-3.9 0-7.1 3.4-7.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c.1-4.1-3.1-7.5-7-7.5z'));
  exports.ReconciliationOutline = getIcon('reconciliation', outline, getNode(newViewBox, 'M676 565c-50.8 0-92 41.2-92 92s41.2 92 92 92 92-41.2 92-92-41.2-92-92-92zm0 126c-18.8 0-34-15.2-34-34s15.2-34 34-34 34 15.2 34 34-15.2 34-34 34zm204-523H668c0-30.9-25.1-56-56-56h-80c-30.9 0-56 25.1-56 56H264c-17.7 0-32 14.3-32 32v200h-88c-17.7 0-32 14.3-32 32v448c0 17.7 14.3 32 32 32h336c17.7 0 32-14.3 32-32v-16h368c17.7 0 32-14.3 32-32V200c0-17.7-14.3-32-32-32zm-412 64h72v-56h64v56h72v48H468v-48zm-20 616H176V616h272v232zm0-296H176v-88h272v88zm392 240H512V432c0-17.7-14.3-32-32-32H304V240h100v104h336V240h100v552zM704 408v96c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-96c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8zM592 512h48c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8z'));
  exports.RedEnvelopeOutline = getIcon('red-envelope', outline, getNode(newViewBox, 'M440.6 462.6a8.38 8.38 0 0 0-7.5-4.6h-48.8c-1.3 0-2.6.4-3.9 1a8.4 8.4 0 0 0-3.4 11.4l87.4 161.1H419c-4.6 0-8.4 3.8-8.4 8.4V665c0 4.6 3.8 8.4 8.4 8.4h63V702h-63c-4.6 0-8.4 3.8-8.4 8.4v25.1c0 4.6 3.8 8.4 8.4 8.4h63v49.9c0 4.6 3.8 8.4 8.4 8.4h43.7c4.6 0 8.4-3.8 8.4-8.4v-49.9h63.3c4.7 0 8.4-3.8 8.2-8.5v-25c0-4.6-3.8-8.4-8.4-8.4h-63.3v-28.6h63.3c4.6 0 8.4-3.8 8.4-8.4v-25.1c0-4.6-3.8-8.4-8.4-8.4h-45.9l87.2-161a8.45 8.45 0 0 0-7.4-12.4h-47.8c-3.1 0-6 1.8-7.5 4.6l-71.9 141.9-71.7-142zM832 64H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-40 824H232V193.1l260.3 204.1c11.6 9.1 27.9 9.1 39.5 0L792 193.1V888zm0-751.3h-31.7L512 331.3 263.7 136.7H232v-.7h560v.7z'));
  exports.RestOutline = getIcon('rest', outline, getNode(newViewBox, 'M508 704c79.5 0 144-64.5 144-144s-64.5-144-144-144-144 64.5-144 144 64.5 144 144 144zm0-224c44.2 0 80 35.8 80 80s-35.8 80-80 80-80-35.8-80-80 35.8-80 80-80z', 'M832 256h-28.1l-35.7-120.9c-4-13.7-16.5-23.1-30.7-23.1h-451c-14.3 0-26.8 9.4-30.7 23.1L220.1 256H192c-17.7 0-32 14.3-32 32v28c0 4.4 3.6 8 8 8h45.8l47.7 558.7a32 32 0 0 0 31.9 29.3h429.2a32 32 0 0 0 31.9-29.3L802.2 324H856c4.4 0 8-3.6 8-8v-28c0-17.7-14.3-32-32-32zm-518.6-76h397.2l22.4 76H291l22.4-76zm376.2 664H326.4L282 324h451.9l-44.3 520z'));
  exports.RightCircleOutline = getIcon('right-circle', outline, getNode(newViewBox, 'M666.7 505.5l-246-178A8 8 0 0 0 408 334v46.9c0 10.2 4.9 19.9 13.2 25.9L566.6 512 421.2 617.2c-8.3 6-13.2 15.6-13.2 25.9V690c0 6.5 7.4 10.3 12.7 6.5l246-178c4.4-3.2 4.4-9.8 0-13z', 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'));
  exports.RocketOutline = getIcon('rocket', outline, getNode(newViewBox, 'M864 736c0-111.6-65.4-208-160-252.9V317.3c0-15.1-5.3-29.7-15.1-41.2L536.5 95.4C530.1 87.8 521 84 512 84s-18.1 3.8-24.5 11.4L335.1 276.1a63.97 63.97 0 0 0-15.1 41.2v165.8C225.4 528 160 624.4 160 736h156.5c-2.3 7.2-3.5 15-3.5 23.8 0 22.1 7.6 43.7 21.4 60.8a97.2 97.2 0 0 0 43.1 30.6c23.1 54 75.6 88.8 134.5 88.8 29.1 0 57.3-8.6 81.4-24.8 23.6-15.8 41.9-37.9 53-64a97 97 0 0 0 43.1-30.5 97.52 97.52 0 0 0 21.4-60.8c0-8.4-1.1-16.4-3.1-23.8H864zM762.3 621.4c9.4 14.6 17 30.3 22.5 46.6H700V558.7a211.6 211.6 0 0 1 62.3 62.7zM388 483.1V318.8l124-147 124 147V668H388V483.1zM239.2 668c5.5-16.3 13.1-32 22.5-46.6 16.3-25.2 37.5-46.5 62.3-62.7V668h-84.8zm388.9 116.2c-5.2 3-11.2 4.2-17.1 3.4l-19.5-2.4-2.8 19.4c-5.4 37.9-38.4 66.5-76.7 66.5-38.3 0-71.3-28.6-76.7-66.5l-2.8-19.5-19.5 2.5a27.7 27.7 0 0 1-17.1-3.5c-8.7-5-14.1-14.3-14.1-24.4 0-10.6 5.9-19.4 14.6-23.8h231.3c8.8 4.5 14.6 13.3 14.6 23.8-.1 10.2-5.5 19.6-14.2 24.5zM464 400a48 48 0 1 0 96 0 48 48 0 1 0-96 0z'));
  exports.RightSquareOutline = getIcon('right-square', outline, getNode(newViewBox, 'M412.7 696.5l246-178c4.4-3.2 4.4-9.7 0-12.9l-246-178c-5.3-3.8-12.7 0-12.7 6.5V381c0 10.2 4.9 19.9 13.2 25.9L558.6 512 413.2 617.2c-8.3 6-13.2 15.6-13.2 25.9V690c0 6.5 7.4 10.3 12.7 6.5z', 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'));
  exports.SafetyCertificateOutline = getIcon('safety-certificate', outline, getNode(newViewBox, 'M866.9 169.9L527.1 54.1C523 52.7 517.5 52 512 52s-11 .7-15.1 2.1L157.1 169.9c-8.3 2.8-15.1 12.4-15.1 21.2v482.4c0 8.8 5.7 20.4 12.6 25.9L499.3 968c3.5 2.7 8 4.1 12.6 4.1s9.2-1.4 12.6-4.1l344.7-268.6c6.9-5.4 12.6-17 12.6-25.9V191.1c.2-8.8-6.6-18.3-14.9-21.2zM810 654.3L512 886.5 214 654.3V226.7l298-101.6 298 101.6v427.6zm-405.8-201c-3-4.1-7.8-6.6-13-6.6H336c-6.5 0-10.3 7.4-6.5 12.7l126.4 174a16.1 16.1 0 0 0 26 0l212.6-292.7c3.8-5.3 0-12.7-6.5-12.7h-55.2c-5.1 0-10 2.5-13 6.6L468.9 542.4l-64.7-89.1z'));
  exports.ScheduleOutline = getIcon('schedule', outline, getNode(newViewBox, 'M928 224H768v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H548v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H328v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H96c-17.7 0-32 14.3-32 32v576c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V256c0-17.7-14.3-32-32-32zm-40 568H136V296h120v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56h148v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56h148v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56h120v496zM416 496H232c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm0 136H232c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm308.2-177.4L620.6 598.3l-52.8-73.1c-3-4.2-7.8-6.6-12.9-6.6H500c-6.5 0-10.3 7.4-6.5 12.7l114.1 158.2a15.9 15.9 0 0 0 25.8 0l165-228.7c3.8-5.3 0-12.7-6.5-12.7H737c-5-.1-9.8 2.4-12.8 6.5z'));
  exports.SaveOutline = getIcon('save', outline, getNode(newViewBox, 'M893.3 293.3L730.7 130.7c-7.5-7.5-16.7-13-26.7-16V112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V338.5c0-17-6.7-33.2-18.7-45.2zM384 184h256v104H384V184zm456 656H184V184h136v136c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V205.8l136 136V840zM512 442c-79.5 0-144 64.5-144 144s64.5 144 144 144 144-64.5 144-144-64.5-144-144-144zm0 224c-44.2 0-80-35.8-80-80s35.8-80 80-80 80 35.8 80 80-35.8 80-80 80z'));
  exports.SecurityScanOutline = getIcon('security-scan', outline, getNode(newViewBox, 'M866.9 169.9L527.1 54.1C523 52.7 517.5 52 512 52s-11 .7-15.1 2.1L157.1 169.9c-8.3 2.8-15.1 12.4-15.1 21.2v482.4c0 8.8 5.7 20.4 12.6 25.9L499.3 968c3.5 2.7 8 4.1 12.6 4.1s9.2-1.4 12.6-4.1l344.7-268.6c6.9-5.4 12.6-17 12.6-25.9V191.1c.2-8.8-6.6-18.3-14.9-21.2zM810 654.3L512 886.5 214 654.3V226.7l298-101.6 298 101.6v427.6zM402.9 528.8l-77.5 77.5a8.03 8.03 0 0 0 0 11.3l34 34c3.1 3.1 8.2 3.1 11.3 0l77.5-77.5c55.7 35.1 130.1 28.4 178.6-20.1 56.3-56.3 56.3-147.5 0-203.8-56.3-56.3-147.5-56.3-203.8 0-48.5 48.5-55.2 123-20.1 178.6zm65.4-133.3c31.3-31.3 82-31.3 113.2 0 31.3 31.3 31.3 82 0 113.2-31.3 31.3-82 31.3-113.2 0s-31.3-81.9 0-113.2z'));
  exports.SettingOutline = getIcon('setting', outline, getNode(newViewBox, 'M924.8 625.7l-65.5-56c3.1-19 4.7-38.4 4.7-57.8s-1.6-38.8-4.7-57.8l65.5-56a32.03 32.03 0 0 0 9.3-35.2l-.9-2.6a443.74 443.74 0 0 0-79.7-137.9l-1.8-2.1a32.12 32.12 0 0 0-35.1-9.5l-81.3 28.9c-30-24.6-63.5-44-99.7-57.6l-15.7-85a32.05 32.05 0 0 0-25.8-25.7l-2.7-.5c-52.1-9.4-106.9-9.4-159 0l-2.7.5a32.05 32.05 0 0 0-25.8 25.7l-15.8 85.4a351.86 351.86 0 0 0-99 57.4l-81.9-29.1a32 32 0 0 0-35.1 9.5l-1.8 2.1a446.02 446.02 0 0 0-79.7 137.9l-.9 2.6c-4.5 12.5-.8 26.5 9.3 35.2l66.3 56.6c-3.1 18.8-4.6 38-4.6 57.1 0 19.2 1.5 38.4 4.6 57.1L99 625.5a32.03 32.03 0 0 0-9.3 35.2l.9 2.6c18.1 50.4 44.9 96.9 79.7 137.9l1.8 2.1a32.12 32.12 0 0 0 35.1 9.5l81.9-29.1c29.8 24.5 63.1 43.9 99 57.4l15.8 85.4a32.05 32.05 0 0 0 25.8 25.7l2.7.5a449.4 449.4 0 0 0 159 0l2.7-.5a32.05 32.05 0 0 0 25.8-25.7l15.7-85a350 350 0 0 0 99.7-57.6l81.3 28.9a32 32 0 0 0 35.1-9.5l1.8-2.1c34.8-41.1 61.6-87.5 79.7-137.9l.9-2.6c4.5-12.3.8-26.3-9.3-35zM788.3 465.9c2.5 15.1 3.8 30.6 3.8 46.1s-1.3 31-3.8 46.1l-6.6 40.1 74.7 63.9a370.03 370.03 0 0 1-42.6 73.6L721 702.8l-31.4 25.8c-23.9 19.6-50.5 35-79.3 45.8l-38.1 14.3-17.9 97a377.5 377.5 0 0 1-85 0l-17.9-97.2-37.8-14.5c-28.5-10.8-55-26.2-78.7-45.7l-31.4-25.9-93.4 33.2c-17-22.9-31.2-47.6-42.6-73.6l75.5-64.5-6.5-40c-2.4-14.9-3.7-30.3-3.7-45.5 0-15.3 1.2-30.6 3.7-45.5l6.5-40-75.5-64.5c11.3-26.1 25.6-50.7 42.6-73.6l93.4 33.2 31.4-25.9c23.7-19.5 50.2-34.9 78.7-45.7l37.9-14.3 17.9-97.2c28.1-3.2 56.8-3.2 85 0l17.9 97 38.1 14.3c28.7 10.8 55.4 26.2 79.3 45.8l31.4 25.8 92.8-32.9c17 22.9 31.2 47.6 42.6 73.6L781.8 426l6.5 39.9zM512 326c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm79.2 255.2A111.6 111.6 0 0 1 512 614c-29.9 0-58-11.7-79.2-32.8A111.6 111.6 0 0 1 400 502c0-29.9 11.7-58 32.8-79.2C454 401.6 482.1 390 512 390c29.9 0 58 11.6 79.2 32.8A111.6 111.6 0 0 1 624 502c0 29.9-11.7 58-32.8 79.2z'));
  exports.ShoppingOutline = getIcon('shopping', outline, getNode(newViewBox, 'M832 312H696v-16c0-101.6-82.4-184-184-184s-184 82.4-184 184v16H192c-17.7 0-32 14.3-32 32v536c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V344c0-17.7-14.3-32-32-32zm-432-16c0-61.9 50.1-112 112-112s112 50.1 112 112v16H400v-16zm392 544H232V384h96v88c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-88h224v88c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-88h96v456z'));
  exports.SkinOutline = getIcon('skin', outline, getNode(newViewBox, 'M870 126H663.8c-17.4 0-32.9 11.9-37 29.3C614.3 208.1 567 246 512 246s-102.3-37.9-114.8-90.7a37.93 37.93 0 0 0-37-29.3H154a44 44 0 0 0-44 44v252a44 44 0 0 0 44 44h75v388a44 44 0 0 0 44 44h478a44 44 0 0 0 44-44V466h75a44 44 0 0 0 44-44V170a44 44 0 0 0-44-44zm-28 268H723v432H301V394H182V198h153.3c28.2 71.2 97.5 120 176.7 120s148.5-48.8 176.7-120H842v196z'));
  exports.SkypeOutline = getIcon('skype', outline, getNode(newViewBox, 'M883.7 578.6c4.1-22.5 6.3-45.5 6.3-68.5 0-51-10-100.5-29.7-147-19-45-46.3-85.4-81-120.1a375.79 375.79 0 0 0-120.1-80.9c-46.6-19.7-96-29.7-147-29.7-24 0-48.1 2.3-71.5 6.8A225.1 225.1 0 0 0 335.6 113c-59.7 0-115.9 23.3-158.1 65.5A222.25 222.25 0 0 0 112 336.6c0 38 9.8 75.4 28.1 108.4-3.7 21.4-5.7 43.3-5.7 65.1 0 51 10 100.5 29.7 147 19 45 46.2 85.4 80.9 120.1 34.7 34.7 75.1 61.9 120.1 80.9 46.6 19.7 96 29.7 147 29.7 22.2 0 44.4-2 66.2-5.9 33.5 18.9 71.3 29 110 29 59.7 0 115.9-23.2 158.1-65.5 42.3-42.2 65.5-98.4 65.5-158.1.1-38-9.7-75.5-28.2-108.7zm-88.1 216C766.9 823.4 729 839 688.4 839c-26.1 0-51.8-6.8-74.6-19.7l-22.5-12.7-25.5 4.5c-17.8 3.2-35.8 4.8-53.6 4.8-41.4 0-81.3-8.1-119.1-24.1-36.3-15.3-69-37.3-97.2-65.5a304.29 304.29 0 0 1-65.5-97.1c-16-37.7-24-77.6-24-119 0-17.4 1.6-35.2 4.6-52.8l4.4-25.1L203 410a151.02 151.02 0 0 1-19.1-73.4c0-40.6 15.7-78.5 44.4-107.2C257.1 200.7 295 185 335.6 185a153 153 0 0 1 71.4 17.9l22.4 11.8 24.8-4.8c18.9-3.6 38.4-5.5 58-5.5 41.4 0 81.3 8.1 119 24 36.5 15.4 69.1 37.4 97.2 65.5 28.2 28.1 50.2 60.8 65.6 97.2 16 37.7 24 77.6 24 119 0 18.4-1.7 37-5.1 55.5l-4.7 25.5 12.6 22.6c12.6 22.5 19.2 48 19.2 73.7 0 40.7-15.7 78.5-44.4 107.2zM583.4 466.2L495 446.6c-33.6-7.7-72.3-17.8-72.3-49.5s27.1-53.9 76.1-53.9c98.7 0 89.7 67.8 138.7 67.8 25.8 0 48.4-15.2 48.4-41.2 0-60.8-97.4-106.5-180-106.5-89.7 0-185.2 38.1-185.2 139.5 0 48.8 17.4 100.8 113.6 124.9l119.4 29.8c36.1 8.9 45.2 29.2 45.2 47.6 0 30.5-30.3 60.3-85.2 60.3-107.2 0-92.3-82.5-149.7-82.5-25.8 0-44.5 17.8-44.5 43.1 0 49.4 60 115.4 194.2 115.4 127.7 0 191-61.5 191-144 0-53.1-24.5-109.6-121.3-131.2z'));
  exports.SlackSquareOutline = getIcon('slack-square', outline, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM529 311.4c0-27.8 22.5-50.4 50.3-50.4 27.8 0 50.3 22.6 50.3 50.4v134.4c0 27.8-22.5 50.4-50.3 50.4-27.8 0-50.3-22.6-50.3-50.4V311.4zM361.5 580.2c0 27.8-22.5 50.4-50.3 50.4a50.35 50.35 0 0 1-50.3-50.4c0-27.8 22.5-50.4 50.3-50.4h50.3v50.4zm134 134.4c0 27.8-22.5 50.4-50.3 50.4-27.8 0-50.3-22.6-50.3-50.4V580.2c0-27.8 22.5-50.4 50.3-50.4a50.35 50.35 0 0 1 50.3 50.4v134.4zm-50.2-218.4h-134c-27.8 0-50.3-22.6-50.3-50.4 0-27.8 22.5-50.4 50.3-50.4h134c27.8 0 50.3 22.6 50.3 50.4-.1 27.9-22.6 50.4-50.3 50.4zm0-134.4c-13.3 0-26.1-5.3-35.6-14.8S395 324.8 395 311.4c0-27.8 22.5-50.4 50.3-50.4 27.8 0 50.3 22.6 50.3 50.4v50.4h-50.3zm134 403.2c-27.8 0-50.3-22.6-50.3-50.4v-50.4h50.3c27.8 0 50.3 22.6 50.3 50.4 0 27.8-22.5 50.4-50.3 50.4zm134-134.4h-134a50.35 50.35 0 0 1-50.3-50.4c0-27.8 22.5-50.4 50.3-50.4h134c27.8 0 50.3 22.6 50.3 50.4 0 27.8-22.5 50.4-50.3 50.4zm0-134.4H663v-50.4c0-27.8 22.5-50.4 50.3-50.4s50.3 22.6 50.3 50.4c0 27.8-22.5 50.4-50.3 50.4z'));
  exports.SlidersOutline = getIcon('sliders', outline, getNode(newViewBox, 'M320 224h-66v-56c0-4.4-3.6-8-8-8h-52c-4.4 0-8 3.6-8 8v56h-66c-4.4 0-8 3.6-8 8v560c0 4.4 3.6 8 8 8h66v56c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8v-56h66c4.4 0 8-3.6 8-8V232c0-4.4-3.6-8-8-8zm-60 508h-80V292h80v440zm644-436h-66v-96c0-4.4-3.6-8-8-8h-52c-4.4 0-8 3.6-8 8v96h-66c-4.4 0-8 3.6-8 8v416c0 4.4 3.6 8 8 8h66v96c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8v-96h66c4.4 0 8-3.6 8-8V304c0-4.4-3.6-8-8-8zm-60 364h-80V364h80v296zM612 404h-66V232c0-4.4-3.6-8-8-8h-52c-4.4 0-8 3.6-8 8v172h-66c-4.4 0-8 3.6-8 8v200c0 4.4 3.6 8 8 8h66v172c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8V620h66c4.4 0 8-3.6 8-8V412c0-4.4-3.6-8-8-8zm-60 145a3 3 0 0 1-3 3h-74a3 3 0 0 1-3-3v-74a3 3 0 0 1 3-3h74a3 3 0 0 1 3 3v74z'));
  exports.SmileOutline = getIcon('smile', outline, getNode(newViewBox, 'M288 421a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm352 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zM512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm263 711c-34.2 34.2-74 61-118.3 79.8C611 874.2 562.3 884 512 884c-50.3 0-99-9.8-144.8-29.2A370.4 370.4 0 0 1 248.9 775c-34.2-34.2-61-74-79.8-118.3C149.8 611 140 562.3 140 512s9.8-99 29.2-144.8A370.4 370.4 0 0 1 249 248.9c34.2-34.2 74-61 118.3-79.8C413 149.8 461.7 140 512 140c50.3 0 99 9.8 144.8 29.2A370.4 370.4 0 0 1 775.1 249c34.2 34.2 61 74 79.8 118.3C874.2 413 884 461.7 884 512s-9.8 99-29.2 144.8A368.89 368.89 0 0 1 775 775zM664 533h-48.1c-4.2 0-7.8 3.2-8.1 7.4C604 589.9 562.5 629 512 629s-92.1-39.1-95.8-88.6c-.3-4.2-3.9-7.4-8.1-7.4H360a8 8 0 0 0-8 8.4c4.4 84.3 74.5 151.6 160 151.6s155.6-67.3 160-151.6a8 8 0 0 0-8-8.4z'));
  exports.SnippetsOutline = getIcon('snippets', outline, getNode(newViewBox, 'M832 112H724V72c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v40H500V72c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v40H320c-17.7 0-32 14.3-32 32v120h-96c-17.7 0-32 14.3-32 32v632c0 17.7 14.3 32 32 32h512c17.7 0 32-14.3 32-32v-96h96c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM664 888H232V336h218v174c0 22.1 17.9 40 40 40h174v338zm0-402H514V336h.2L664 485.8v.2zm128 274h-56V456L544 264H360v-80h68v32c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-32h152v32c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-32h68v576z'));
  exports.SoundOutline = getIcon('sound', outline, getNode(newViewBox, 'M625.9 115c-5.9 0-11.9 1.6-17.4 5.3L254 352H90c-8.8 0-16 7.2-16 16v288c0 8.8 7.2 16 16 16h164l354.5 231.7c5.5 3.6 11.6 5.3 17.4 5.3 16.7 0 32.1-13.3 32.1-32.1V147.1c0-18.8-15.4-32.1-32.1-32.1zM586 803L293.4 611.7l-18-11.7H146V424h129.4l17.9-11.7L586 221v582zm348-327H806c-8.8 0-16 7.2-16 16v40c0 8.8 7.2 16 16 16h128c8.8 0 16-7.2 16-16v-40c0-8.8-7.2-16-16-16zm-41.9 261.8l-110.3-63.7a15.9 15.9 0 0 0-21.7 5.9l-19.9 34.5c-4.4 7.6-1.8 17.4 5.8 21.8L856.3 800a15.9 15.9 0 0 0 21.7-5.9l19.9-34.5c4.4-7.6 1.7-17.4-5.8-21.8zM760 344a15.9 15.9 0 0 0 21.7 5.9L892 286.2c7.6-4.4 10.2-14.2 5.8-21.8L878 230a15.9 15.9 0 0 0-21.7-5.9L746 287.8a15.99 15.99 0 0 0-5.8 21.8L760 344z'));
  exports.StarOutline = getIcon('star', outline, getNode(newViewBox, 'M908.1 353.1l-253.9-36.9L540.7 86.1c-3.1-6.3-8.2-11.4-14.5-14.5-15.8-7.8-35-1.3-42.9 14.5L369.8 316.2l-253.9 36.9c-7 1-13.4 4.3-18.3 9.3a32.05 32.05 0 0 0 .6 45.3l183.7 179.1-43.4 252.9a31.95 31.95 0 0 0 46.4 33.7L512 754l227.1 119.4c6.2 3.3 13.4 4.4 20.3 3.2 17.4-3 29.1-19.5 26.1-36.9l-43.4-252.9 183.7-179.1c5-4.9 8.3-11.3 9.3-18.3 2.7-17.5-9.5-33.7-27-36.3zM664.8 561.6l36.1 210.3L512 672.7 323.1 772l36.1-210.3-152.8-149L417.6 382 512 190.7 606.4 382l211.2 30.7-152.8 148.9z'));
  exports.StepBackwardOutline = getIcon('step-backward', outline, getNode(normalViewBox, 'M347.6 528.95l383.2 301.02c14.25 11.2 35.2 1.1 35.2-16.95V210.97c0-18.05-20.95-28.14-35.2-16.94L347.6 495.05a21.53 21.53 0 0 0 0 33.9M330 864h-64a8 8 0 0 1-8-8V168a8 8 0 0 1 8-8h64a8 8 0 0 1 8 8v688a8 8 0 0 1-8 8'));
  exports.StepForwardOutline = getIcon('step-forward', outline, getNode(normalViewBox, 'M676.4 528.95L293.2 829.97c-14.25 11.2-35.2 1.1-35.2-16.95V210.97c0-18.05 20.95-28.14 35.2-16.94l383.2 301.02a21.53 21.53 0 0 1 0 33.9M694 864h64a8 8 0 0 0 8-8V168a8 8 0 0 0-8-8h-64a8 8 0 0 0-8 8v688a8 8 0 0 0 8 8'));
  exports.StopOutline = getIcon('stop', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372 0-89 31.3-170.8 83.5-234.8l523.3 523.3C682.8 852.7 601 884 512 884zm288.5-137.2L277.2 223.5C341.2 171.3 423 140 512 140c205.4 0 372 166.6 372 372 0 89-31.3 170.8-83.5 234.8z'));
  exports.SwitcherOutline = getIcon('switcher', outline, getNode(newViewBox, 'M752 240H144c-17.7 0-32 14.3-32 32v608c0 17.7 14.3 32 32 32h608c17.7 0 32-14.3 32-32V272c0-17.7-14.3-32-32-32zm-40 600H184V312h528v528zm168-728H264c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h576v576c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V144c0-17.7-14.3-32-32-32zM300 550h296v64H300z'));
  exports.TagOutline = getIcon('tag', outline, getNode(newViewBox, 'M938 458.8l-29.6-312.6c-1.5-16.2-14.4-29-30.6-30.6L565.2 86h-.4c-3.2 0-5.7 1-7.6 2.9L88.9 557.2a9.96 9.96 0 0 0 0 14.1l363.8 363.8c1.9 1.9 4.4 2.9 7.1 2.9s5.2-1 7.1-2.9l468.3-468.3c2-2.1 3-5 2.8-8zM459.7 834.7L189.3 564.3 589 164.6 836 188l23.4 247-399.7 399.7zM680 256c-48.5 0-88 39.5-88 88s39.5 88 88 88 88-39.5 88-88-39.5-88-88-88zm0 120c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z'));
  exports.TabletOutline = getIcon('tablet', outline, getNode(newViewBox, 'M800 64H224c-35.3 0-64 28.7-64 64v768c0 35.3 28.7 64 64 64h576c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64zm-8 824H232V136h560v752zM472 784a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'));
  exports.ShopOutline = getIcon('shop', outline, getNode(newViewBox, 'M882 272.1V144c0-17.7-14.3-32-32-32H174c-17.7 0-32 14.3-32 32v128.1c-16.7 1-30 14.9-30 31.9v131.7a177 177 0 0 0 14.4 70.4c4.3 10.2 9.6 19.8 15.6 28.9v345c0 17.6 14.3 32 32 32h676c17.7 0 32-14.3 32-32V535a175 175 0 0 0 15.6-28.9c9.5-22.3 14.4-46 14.4-70.4V304c0-17-13.3-30.9-30-31.9zM214 184h596v88H214v-88zm362 656.1H448V736h128v104.1zm234 0H640V704c0-17.7-14.3-32-32-32H416c-17.7 0-32 14.3-32 32v136.1H214V597.9c2.9 1.4 5.9 2.8 9 4 22.3 9.4 46 14.1 70.4 14.1s48-4.7 70.4-14.1c13.8-5.8 26.8-13.2 38.7-22.1.2-.1.4-.1.6 0a180.4 180.4 0 0 0 38.7 22.1c22.3 9.4 46 14.1 70.4 14.1 24.4 0 48-4.7 70.4-14.1 13.8-5.8 26.8-13.2 38.7-22.1.2-.1.4-.1.6 0a180.4 180.4 0 0 0 38.7 22.1c22.3 9.4 46 14.1 70.4 14.1 24.4 0 48-4.7 70.4-14.1 3-1.3 6-2.6 9-4v242.2zm30-404.4c0 59.8-49 108.3-109.3 108.3-40.8 0-76.4-22.1-95.2-54.9-2.9-5-8.1-8.1-13.9-8.1h-.6c-5.7 0-11 3.1-13.9 8.1A109.24 109.24 0 0 1 512 544c-40.7 0-76.2-22-95-54.7-3-5.1-8.4-8.3-14.3-8.3s-11.4 3.2-14.3 8.3a109.63 109.63 0 0 1-95.1 54.7C233 544 184 495.5 184 435.7v-91.2c0-.3.2-.5.5-.5h655c.3 0 .5.2.5.5v91.2z'));
  exports.TagsOutline = getIcon('tags', outline, getNode(newViewBox, 'M483.2 790.3L861.4 412c1.7-1.7 2.5-4 2.3-6.3l-25.5-301.4c-.7-7.8-6.8-13.9-14.6-14.6L522.2 64.3c-2.3-.2-4.7.6-6.3 2.3L137.7 444.8a8.03 8.03 0 0 0 0 11.3l334.2 334.2c3.1 3.2 8.2 3.2 11.3 0zm62.6-651.7l224.6 19 19 224.6L477.5 694 233.9 450.5l311.9-311.9zm60.16 186.23a48 48 0 1 0 67.88-67.89 48 48 0 1 0-67.88 67.89zM889.7 539.8l-39.6-39.5a8.03 8.03 0 0 0-11.3 0l-362 361.3-237.6-237a8.03 8.03 0 0 0-11.3 0l-39.6 39.5a8.03 8.03 0 0 0 0 11.3l243.2 242.8 39.6 39.5c3.1 3.1 8.2 3.1 11.3 0l407.3-406.6c3.1-3.1 3.1-8.2 0-11.3z'));
  exports.TaobaoCircleOutline = getIcon('taobao-circle', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zM315.7 291.5c27.3 0 49.5 22.1 49.5 49.4s-22.1 49.4-49.5 49.4a49.4 49.4 0 1 1 0-98.8zM366.9 578c-13.6 42.3-10.2 26.7-64.4 144.5l-78.5-49s87.7-79.8 105.6-116.2c19.2-38.4-21.1-58.9-21.1-58.9l-60.2-37.5 32.7-50.2c45.4 33.7 48.7 36.6 79.2 67.2 23.8 23.9 20.7 56.8 6.7 100.1zm427.2 55c-15.3 143.8-202.4 90.3-202.4 90.3l10.2-41.1 43.3 9.3c80 5 72.3-64.9 72.3-64.9V423c.6-77.3-72.6-85.4-204.2-38.3l30.6 8.3c-2.5 9-12.5 23.2-25.2 38.6h176v35.6h-99.1v44.5h98.7v35.7h-98.7V622c14.9-4.8 28.6-11.5 40.5-20.5l-8.7-32.5 46.5-14.4 38.8 94.9-57.3 23.9-10.2-37.8c-25.6 19.5-78.8 48-171.8 45.4-99.2 2.6-73.7-112-73.7-112l2.5-1.3H472c-.5 14.7-6.6 38.7 1.7 51.8 6.8 10.8 24.2 12.6 35.3 13.1 1.3.1 2.6.1 3.9.1v-85.3h-101v-35.7h101v-44.5H487c-22.7 24.1-43.5 44.1-43.5 44.1l-30.6-26.7c21.7-22.9 43.3-59.1 56.8-83.2-10.9 4.4-22 9.2-33.6 14.2-11.2 14.3-24.2 29-38.7 43.5.5.8-50-28.4-50-28.4 52.2-44.4 81.4-139.9 81.4-139.9l72.5 20.4s-5.9 14-18.4 35.6c290.3-82.3 307.4 50.5 307.4 50.5s19.1 91.8 3.8 235.7z'));
  exports.ToolOutline = getIcon('tool', outline, getNode(newViewBox, 'M876.6 239.5c-.5-.9-1.2-1.8-2-2.5-5-5-13.1-5-18.1 0L684.2 409.3l-67.9-67.9L788.7 169c.8-.8 1.4-1.6 2-2.5 3.6-6.1 1.6-13.9-4.5-17.5-98.2-58-226.8-44.7-311.3 39.7-67 67-89.2 162-66.5 247.4l-293 293c-3 3-2.8 7.9.3 11l169.7 169.7c3.1 3.1 8.1 3.3 11 .3l292.9-292.9c85.5 22.8 180.5.7 247.6-66.4 84.4-84.5 97.7-213.1 39.7-311.3zM786 499.8c-58.1 58.1-145.3 69.3-214.6 33.6l-8.8 8.8-.1-.1-274 274.1-79.2-79.2 230.1-230.1s0 .1.1.1l52.8-52.8c-35.7-69.3-24.5-156.5 33.6-214.6a184.2 184.2 0 0 1 144-53.5L537 318.9a32.05 32.05 0 0 0 0 45.3l124.5 124.5a32.05 32.05 0 0 0 45.3 0l132.8-132.8c3.7 51.8-14.4 104.8-53.6 143.9z'));
  exports.ThunderboltOutline = getIcon('thunderbolt', outline, getNode(newViewBox, 'M848 359.3H627.7L825.8 109c4.1-5.3.4-13-6.3-13H436c-2.8 0-5.5 1.5-6.9 4L170 547.5c-3.1 5.3.7 12 6.9 12h174.4l-89.4 357.6c-1.9 7.8 7.5 13.3 13.3 7.7L853.5 373c5.2-4.9 1.7-13.7-5.5-13.7zM378.2 732.5l60.3-241H281.1l189.6-327.4h224.6L487 427.4h211L378.2 732.5z'));
  exports.TrophyOutline = getIcon('trophy', outline, getNode(newViewBox, 'M868 160h-92v-40c0-4.4-3.6-8-8-8H256c-4.4 0-8 3.6-8 8v40h-92a44 44 0 0 0-44 44v148c0 81.7 60 149.6 138.2 162C265.7 630.2 359 721.7 476 734.5v105.2H280c-17.7 0-32 14.3-32 32V904c0 4.4 3.6 8 8 8h512c4.4 0 8-3.6 8-8v-32.3c0-17.7-14.3-32-32-32H548V734.5C665 721.7 758.3 630.2 773.8 514 852 501.6 912 433.7 912 352V204a44 44 0 0 0-44-44zM184 352V232h64v207.6a91.99 91.99 0 0 1-64-87.6zm520 128c0 49.1-19.1 95.4-53.9 130.1-34.8 34.8-81 53.9-130.1 53.9h-16c-49.1 0-95.4-19.1-130.1-53.9-34.8-34.8-53.9-81-53.9-130.1V184h384v296zm136-128c0 41-26.9 75.8-64 87.6V232h64v120z'));
  exports.UnlockOutline = getIcon('unlock', outline, getNode(newViewBox, 'M832 464H332V240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v68c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-68c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zm-40 376H232V536h560v304zM484 701v53c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-53a48.01 48.01 0 1 0-56 0z'));
  exports.UpCircleOutline = getIcon('up-circle', outline, getNode(newViewBox, 'M518.5 360.3a7.95 7.95 0 0 0-12.9 0l-178 246c-3.8 5.3 0 12.7 6.5 12.7H381c10.2 0 19.9-4.9 25.9-13.2L512 460.4l105.2 145.4c6 8.3 15.6 13.2 25.9 13.2H690c6.5 0 10.3-7.4 6.5-12.7l-178-246z', 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'));
  exports.UpSquareOutline = getIcon('up-square', outline, getNode(newViewBox, 'M334 624h46.9c10.2 0 19.9-4.9 25.9-13.2L512 465.4l105.2 145.4c6 8.3 15.6 13.2 25.9 13.2H690c6.5 0 10.3-7.4 6.5-12.7l-178-246a7.95 7.95 0 0 0-12.9 0l-178 246A7.96 7.96 0 0 0 334 624z', 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'));
  exports.UsbOutline = getIcon('usb', outline, getNode(newViewBox, 'M760 432V144c0-17.7-14.3-32-32-32H296c-17.7 0-32 14.3-32 32v288c-66.2 0-120 52.1-120 116v356c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V548c0-24.3 21.6-44 48.1-44h495.8c26.5 0 48.1 19.7 48.1 44v356c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V548c0-63.9-53.8-116-120-116zm-424 0V184h352v248H336zm120-184h-48c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm160 0h-48c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z'));
  exports.VideoCameraOutline = getIcon('video-camera', outline, getNode(newViewBox, 'M912 302.3L784 376V224c0-35.3-28.7-64-64-64H128c-35.3 0-64 28.7-64 64v576c0 35.3 28.7 64 64 64h592c35.3 0 64-28.7 64-64V648l128 73.7c21.3 12.3 48-3.1 48-27.6V330c0-24.6-26.7-40-48-27.7zM712 792H136V232h576v560zm176-167l-104-59.8V458.9L888 399v226zM208 360h112c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H208c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z'));
  exports.WalletOutline = getIcon('wallet', outline, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 464H528V448h312v128zm0 264H184V184h656v200H496c-17.7 0-32 14.3-32 32v192c0 17.7 14.3 32 32 32h344v200zM580 512a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'));
  exports.WarningOutline = getIcon('warning', outline, getNode(newViewBox, 'M464 720a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm16-304v184c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V416c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8zm475.7 440l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zm-783.5-27.9L512 239.9l339.8 588.2H172.2z'));
  exports.WechatOutline = getIcon('wechat', outline, getNode(newViewBox, 'M690.1 377.4c5.9 0 11.8.2 17.6.5-24.4-128.7-158.3-227.1-319.9-227.1C209 150.8 64 271.4 64 420.2c0 81.1 43.6 154.2 111.9 203.6a21.5 21.5 0 0 1 9.1 17.6c0 2.4-.5 4.6-1.1 6.9-5.5 20.3-14.2 52.8-14.6 54.3-.7 2.6-1.7 5.2-1.7 7.9 0 5.9 4.8 10.8 10.8 10.8 2.3 0 4.2-.9 6.2-2l70.9-40.9c5.3-3.1 11-5 17.2-5 3.2 0 6.4.5 9.5 1.4 33.1 9.5 68.8 14.8 105.7 14.8 6 0 11.9-.1 17.8-.4-7.1-21-10.9-43.1-10.9-66 0-135.8 132.2-245.8 295.3-245.8zm-194.3-86.5c23.8 0 43.2 19.3 43.2 43.1s-19.3 43.1-43.2 43.1c-23.8 0-43.2-19.3-43.2-43.1s19.4-43.1 43.2-43.1zm-215.9 86.2c-23.8 0-43.2-19.3-43.2-43.1s19.3-43.1 43.2-43.1 43.2 19.3 43.2 43.1-19.4 43.1-43.2 43.1zm586.8 415.6c56.9-41.2 93.2-102 93.2-169.7 0-124-120.8-224.5-269.9-224.5-149 0-269.9 100.5-269.9 224.5S540.9 847.5 690 847.5c30.8 0 60.6-4.4 88.1-12.3 2.6-.8 5.2-1.2 7.9-1.2 5.2 0 9.9 1.6 14.3 4.1l59.1 34c1.7 1 3.3 1.7 5.2 1.7a9 9 0 0 0 6.4-2.6 9 9 0 0 0 2.6-6.4c0-2.2-.9-4.4-1.4-6.6-.3-1.2-7.6-28.3-12.2-45.3-.5-1.9-.9-3.8-.9-5.7.1-5.9 3.1-11.2 7.6-14.5zM600.2 587.2c-19.9 0-36-16.1-36-35.9 0-19.8 16.1-35.9 36-35.9s36 16.1 36 35.9c0 19.8-16.2 35.9-36 35.9zm179.9 0c-19.9 0-36-16.1-36-35.9 0-19.8 16.1-35.9 36-35.9s36 16.1 36 35.9a36.08 36.08 0 0 1-36 35.9z'));
  exports.WeiboCircleOutline = getIcon('weibo-circle', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-44.4 672C353.1 736 236 680.4 236 588.9c0-47.8 30.2-103.1 82.3-155.3 69.5-69.6 150.6-101.4 181.1-70.8 13.5 13.5 14.8 36.8 6.1 64.6-4.5 14 13.1 6.3 13.1 6.3 56.2-23.6 105.2-25 123.1.7 9.6 13.7 8.6 32.8-.2 55.1-4.1 10.2 1.3 11.8 9 14.1 31.7 9.8 66.9 33.6 66.9 75.5.2 69.5-99.7 156.9-249.8 156.9zm207.3-290.8a34.9 34.9 0 0 0-7.2-34.1 34.68 34.68 0 0 0-33.1-10.7 18.24 18.24 0 0 1-7.6-35.7c24.1-5.1 50.1 2.3 67.7 21.9 17.7 19.6 22.4 46.3 14.9 69.8a18.13 18.13 0 0 1-22.9 11.7 18.18 18.18 0 0 1-11.8-22.9zm106 34.3s0 .1 0 0a21.1 21.1 0 0 1-26.6 13.7 21.19 21.19 0 0 1-13.6-26.7c11-34.2 4-73.2-21.7-101.8a104.04 104.04 0 0 0-98.9-32.1 21.14 21.14 0 0 1-25.1-16.3 21.07 21.07 0 0 1 16.2-25.1c49.4-10.5 102.8 4.8 139.1 45.1 36.3 40.2 46.1 95.1 30.6 143.2zm-334.5 6.1c-91.4 9-160.7 65.1-154.7 125.2 5.9 60.1 84.8 101.5 176.2 92.5 91.4-9.1 160.7-65.1 154.7-125.3-5.9-60.1-84.8-101.5-176.2-92.4zm80.2 141.7c-18.7 42.3-72.3 64.8-117.8 50.1-43.9-14.2-62.5-57.7-43.3-96.8 18.9-38.4 68-60.1 111.5-48.8 45 11.7 68 54.2 49.6 95.5zm-93-32.2c-14.2-5.9-32.4.2-41.2 13.9-8.8 13.8-4.7 30.2 9.3 36.6 14.3 6.5 33.2.3 42-13.8 8.8-14.3 4.2-30.6-10.1-36.7zm34.9-14.5c-5.4-2.2-12.2.5-15.4 5.8-3.1 5.4-1.4 11.5 4.1 13.8 5.5 2.3 12.6-.3 15.8-5.8 3-5.6 1-11.8-4.5-13.8z'));
  exports.WindowsOutline = getIcon('windows', outline, getNode(newViewBox, 'M120.1 770.6L443 823.2V543.8H120.1v226.8zm63.4-163.5h196.2v141.6l-196.2-31.9V607.1zm340.3 226.5l382 62.2v-352h-382v289.8zm63.4-226.5h255.3v214.4l-255.3-41.6V607.1zm-63.4-415.7v288.8h382V128.1l-382 63.3zm318.7 225.5H587.3V245l255.3-42.3v214.2zm-722.4 63.3H443V201.9l-322.9 53.5v224.8zM183.5 309l196.2-32.5v140.4H183.5V309z'));
  exports.YahooOutline = getIcon('yahoo', outline, getNode(newViewBox, 'M859.9 681.4h-14.1c-27.1 0-49.2 22.2-49.2 49.3v14.1c0 27.1 22.2 49.3 49.2 49.3h14.1c27.1 0 49.2-22.2 49.2-49.3v-14.1c0-27.1-22.2-49.3-49.2-49.3zM402.6 231C216.2 231 65 357 65 512.5S216.2 794 402.6 794s337.6-126 337.6-281.5S589.1 231 402.6 231zm0 507C245.1 738 121 634.6 121 512.5c0-62.3 32.3-119.7 84.9-161v48.4h37l159.8 159.9v65.3h-84.4v56.3h225.1v-56.3H459v-65.3l103.5-103.6h65.3v-56.3H459v65.3l-28.1 28.1-93.4-93.5h37v-56.3H216.4c49.4-35 114.3-56.6 186.2-56.6 157.6 0 281.6 103.4 281.6 225.5S560.2 738 402.6 738zm534.7-507H824.7c-15.5 0-27.7 12.6-27.1 28.1l13.1 366h84.4l65.4-366.4c2.7-15.2-7.8-27.7-23.2-27.7z'));
  exports.WeiboSquareOutline = getIcon('weibo-square', outline, getNode(newViewBox, 'M433.6 595.1c-14.2-5.9-32.4.2-41.2 13.9-8.8 13.8-4.7 30.2 9.3 36.6 14.3 6.5 33.2.3 42-13.8 8.8-14.3 4.2-30.6-10.1-36.7zM880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM467.6 736C353.1 736 236 680.4 236 588.9c0-47.8 30.2-103.1 82.3-155.3 69.5-69.6 150.6-101.4 181.1-70.8 13.5 13.5 14.8 36.8 6.1 64.6-4.5 14 13.1 6.3 13.1 6.3 56.2-23.6 105.2-25 123.1.7 9.6 13.7 8.6 32.8-.2 55.1-4.1 10.2 1.3 11.8 9 14.1 31.7 9.8 66.9 33.6 66.9 75.5.2 69.5-99.7 156.9-249.8 156.9zm207.3-290.8a34.9 34.9 0 0 0-7.2-34.1 34.68 34.68 0 0 0-33.1-10.7 18.24 18.24 0 0 1-7.6-35.7c24.1-5.1 50.1 2.3 67.7 21.9 17.7 19.6 22.4 46.3 14.9 69.8a18.13 18.13 0 0 1-22.9 11.7 18.18 18.18 0 0 1-11.8-22.9zm106 34.3s0 .1 0 0a21.1 21.1 0 0 1-26.6 13.7 21.19 21.19 0 0 1-13.6-26.7c11-34.2 4-73.2-21.7-101.8a104.04 104.04 0 0 0-98.9-32.1 21.14 21.14 0 0 1-25.1-16.3 21.07 21.07 0 0 1 16.2-25.1c49.4-10.5 102.8 4.8 139.1 45.1 36.3 40.2 46.1 95.1 30.6 143.2zm-334.5 6.1c-91.4 9-160.7 65.1-154.7 125.2 5.9 60.1 84.8 101.5 176.2 92.5 91.4-9.1 160.7-65.1 154.7-125.3-5.9-60.1-84.8-101.5-176.2-92.4zm80.2 141.7c-18.7 42.3-72.3 64.8-117.8 50.1-43.9-14.2-62.5-57.7-43.3-96.8 18.9-38.4 68-60.1 111.5-48.8 45 11.7 68 54.2 49.6 95.5zm-58.1-46.7c-5.4-2.2-12.2.5-15.4 5.8-3.1 5.4-1.4 11.5 4.1 13.8 5.5 2.3 12.6-.3 15.8-5.8 3-5.6 1-11.8-4.5-13.8z'));
  exports.YuqueOutline = getIcon('yuque', outline, getNode(newViewBox, 'M854.6 370.6c-9.9-39.4 9.9-102.2 73.4-124.4l-67.9-3.6s-25.7-90-143.6-98c-117.8-8.1-194.9-3-195-3 .1 0 87.4 55.6 52.4 154.7-25.6 52.5-65.8 95.6-108.8 144.7-1.3 1.3-2.5 2.6-3.5 3.7C319.4 605 96 860 96 860c245.9 64.4 410.7-6.3 508.2-91.1 20.5-.2 35.9-.3 46.3-.3 135.8 0 250.6-117.6 245.9-248.4-3.2-89.9-31.9-110.2-41.8-149.6zm-204.1 334c-10.6 0-26.2.1-46.8.3l-23.6.2-17.8 15.5c-47.1 41-104.4 71.5-171.4 87.6-52.5 12.6-110 16.2-172.7 9.6 18-20.5 36.5-41.6 55.4-63.1 92-104.6 173.8-197.5 236.9-268.5l1.4-1.4 1.3-1.5c4.1-4.6 20.6-23.3 24.7-28.1 9.7-11.1 17.3-19.9 24.5-28.6 30.7-36.7 52.2-67.8 69-102.2l1.6-3.3 1.2-3.4c13.7-38.8 15.4-76.9 6.2-112.8 22.5.7 46.5 1.9 71.7 3.6 33.3 2.3 55.5 12.9 71.1 29.2 5.8 6 10.2 12.5 13.4 18.7 1 2 1.7 3.6 2.3 5l5 17.7c-15.7 34.5-19.9 73.3-11.4 107.2 3 11.8 6.9 22.4 12.3 34.4 2.1 4.7 9.5 20.1 11 23.3 10.3 22.7 15.4 43 16.7 78.7 3.3 94.6-82.7 181.9-182 181.9z'));
  exports.YoutubeOutline = getIcon('youtube', outline, getNode(newViewBox, 'M960 509.2c0-2.2 0-4.7-.1-7.6-.1-8.1-.3-17.2-.5-26.9-.8-27.9-2.2-55.7-4.4-81.9-3-36.1-7.4-66.2-13.4-88.8a139.52 139.52 0 0 0-98.3-98.5c-28.3-7.6-83.7-12.3-161.7-15.2-37.1-1.4-76.8-2.3-116.5-2.8-13.9-.2-26.8-.3-38.4-.4h-29.4c-11.6.1-24.5.2-38.4.4-39.7.5-79.4 1.4-116.5 2.8-78 3-133.5 7.7-161.7 15.2A139.35 139.35 0 0 0 82.4 304C76.3 326.6 72 356.7 69 392.8c-2.2 26.2-3.6 54-4.4 81.9-.3 9.7-.4 18.8-.5 26.9 0 2.9-.1 5.4-.1 7.6v5.6c0 2.2 0 4.7.1 7.6.1 8.1.3 17.2.5 26.9.8 27.9 2.2 55.7 4.4 81.9 3 36.1 7.4 66.2 13.4 88.8 12.8 47.9 50.4 85.7 98.3 98.5 28.2 7.6 83.7 12.3 161.7 15.2 37.1 1.4 76.8 2.3 116.5 2.8 13.9.2 26.8.3 38.4.4h29.4c11.6-.1 24.5-.2 38.4-.4 39.7-.5 79.4-1.4 116.5-2.8 78-3 133.5-7.7 161.7-15.2 47.9-12.8 85.5-50.5 98.3-98.5 6.1-22.6 10.4-52.7 13.4-88.8 2.2-26.2 3.6-54 4.4-81.9.3-9.7.4-18.8.5-26.9 0-2.9.1-5.4.1-7.6v-5.6zm-72 5.2c0 2.1 0 4.4-.1 7.1-.1 7.8-.3 16.4-.5 25.7-.7 26.6-2.1 53.2-4.2 77.9-2.7 32.2-6.5 58.6-11.2 76.3-6.2 23.1-24.4 41.4-47.4 47.5-21 5.6-73.9 10.1-145.8 12.8-36.4 1.4-75.6 2.3-114.7 2.8-13.7.2-26.4.3-37.8.3h-28.6l-37.8-.3c-39.1-.5-78.2-1.4-114.7-2.8-71.9-2.8-124.9-7.2-145.8-12.8-23-6.2-41.2-24.4-47.4-47.5-4.7-17.7-8.5-44.1-11.2-76.3-2.1-24.7-3.4-51.3-4.2-77.9-.3-9.3-.4-18-.5-25.7 0-2.7-.1-5.1-.1-7.1v-4.8c0-2.1 0-4.4.1-7.1.1-7.8.3-16.4.5-25.7.7-26.6 2.1-53.2 4.2-77.9 2.7-32.2 6.5-58.6 11.2-76.3 6.2-23.1 24.4-41.4 47.4-47.5 21-5.6 73.9-10.1 145.8-12.8 36.4-1.4 75.6-2.3 114.7-2.8 13.7-.2 26.4-.3 37.8-.3h28.6l37.8.3c39.1.5 78.2 1.4 114.7 2.8 71.9 2.8 124.9 7.2 145.8 12.8 23 6.2 41.2 24.4 47.4 47.5 4.7 17.7 8.5 44.1 11.2 76.3 2.1 24.7 3.4 51.3 4.2 77.9.3 9.3.4 18 .5 25.7 0 2.7.1 5.1.1 7.1v4.8zM423 646l232-135-232-133z'));
  exports.AlibabaOutline = getIcon('alibaba', outline, getNode(newViewBox, 'M602.9 669.8c-37.2 2.6-33.6-17.3-11.5-46.2 50.4-67.2 143.7-158.5 147.9-225.2 5.8-86.6-81.3-113.4-171-113.4-62.4 1.6-127 18.9-171 34.6-151.6 53.5-246.6 137.5-306.9 232-62.4 93.4-43 183.2 91.8 185.8 101.8-4.2 170.5-32.5 239.7-68.2.5 0-192.5 55.1-263.9 14.7-7.9-4.2-15.7-10-17.8-26.2 0-33.1 54.6-67.7 86.6-78.7v-56.7c64.5 22.6 140.6 16.3 205.7-32 2.1 5.8 4.2 13.1 3.7 21h11c2.6-22.6-12.6-44.6-37.8-46.2 7.3 5.8 12.6 10.5 15.2 14.7l-1 1-.5.5c-83.9 58.8-165.3 31.5-173.1 29.9l46.7-45.7-13.1-33.1c92.9-32.5 169.5-56.2 296.9-78.7l-28.5-23 14.7-8.9c75.5 21 126.4 36.7 123.8 76.6-1 6.8-3.7 14.7-7.9 23.1C660.1 466.1 594 538 567.2 569c-17.3 20.5-34.6 39.4-46.7 58.3-13.6 19.4-20.5 37.3-21 53.5 2.6 131.8 391.4-61.9 468-112.9-111.7 47.8-232.9 93.5-364.6 101.9zm85-302.9c2.8 5.2 4.1 11.6 4.1 19.1-.1-6.8-1.4-13.3-4.1-19.1z'));
  exports.AlignCenterOutline = getIcon('align-center', outline, getNode(newViewBox, 'M264 230h496c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H264c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm496 424c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H264c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496zm144 140H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-424H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.AlignLeftOutline = getIcon('align-left', outline, getNode(newViewBox, 'M120 230h496c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm0 424h496c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm784 140H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-424H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.AlignRightOutline = getIcon('align-right', outline, getNode(newViewBox, 'M904 158H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 424H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 212H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-424H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.AlipayOutline = getIcon('alipay', outline, getNode(newViewBox, 'M789 610.3c-38.7-12.9-90.7-32.7-148.5-53.6 34.8-60.3 62.5-129 80.7-203.6H530.5v-68.6h233.6v-38.3H530.5V132h-95.4c-16.7 0-16.7 16.5-16.7 16.5v97.8H182.2v38.3h236.3v68.6H223.4v38.3h378.4a667.18 667.18 0 0 1-54.5 132.9c-122.8-40.4-253.8-73.2-336.1-53-52.6 13-86.5 36.1-106.5 60.3-91.4 111-25.9 279.6 167.2 279.6C386 811.2 496 747.6 581.2 643 708.3 704 960 808.7 960 808.7V659.4s-31.6-2.5-171-49.1zM253.9 746.6c-150.5 0-195-118.3-120.6-183.1 24.8-21.9 70.2-32.6 94.4-35 89.4-8.8 172.2 25.2 269.9 72.8-68.8 89.5-156.3 145.3-243.7 145.3z'));
  exports.AliyunOutline = getIcon('aliyun', outline, getNode(newViewBox, 'M959.2 383.9c-.3-82.1-66.9-148.6-149.1-148.6H575.9l21.6 85.2 201 43.7a42.58 42.58 0 0 1 32.9 39.7c.1.5.1 216.1 0 216.6a42.58 42.58 0 0 1-32.9 39.7l-201 43.7-21.6 85.3h234.2c82.1 0 148.8-66.5 149.1-148.6V383.9zM225.5 660.4a42.58 42.58 0 0 1-32.9-39.7c-.1-.6-.1-216.1 0-216.6.8-19.4 14.6-35.5 32.9-39.7l201-43.7 21.6-85.2H213.8c-82.1 0-148.8 66.4-149.1 148.6V641c.3 82.1 67 148.6 149.1 148.6H448l-21.6-85.3-200.9-43.9zm200.9-158.8h171v21.3h-171z'));
  exports.AmazonOutline = getIcon('amazon', outline, getNode(newViewBox, 'M825 768.9c-3.3-.9-7.3-.4-11.9 1.3-61.6 28.2-121.5 48.3-179.7 60.2C507.7 856 385.2 842.6 266 790.3c-33.1-14.6-79.1-39.2-138-74a9.36 9.36 0 0 0-5.3-2c-2-.1-3.7.1-5.3.9-1.6.8-2.8 1.8-3.7 3.1-.9 1.3-1.1 3.1-.4 5.4.6 2.2 2.1 4.7 4.6 7.4 10.4 12.2 23.3 25.2 38.6 39s35.6 29.4 60.9 46.8c25.3 17.4 51.8 32.9 79.3 46.4 27.6 13.5 59.6 24.9 96.1 34.1s73 13.8 109.4 13.8c36.2 0 71.4-3.7 105.5-10.9 34.2-7.3 63-15.9 86.5-25.9 23.4-9.9 45-21 64.8-33 19.8-12 34.4-22.2 43.9-30.3 9.5-8.2 16.3-14.6 20.2-19.4 4.6-5.7 6.9-10.6 6.9-14.9.1-4.5-1.7-7.1-5-7.9zM527.4 348.1c-15.2 1.3-33.5 4.1-55 8.3-21.5 4.1-41.4 9.3-59.8 15.4s-37.2 14.6-56.3 25.4c-19.2 10.8-35.5 23.2-49 37s-24.5 31.1-33.1 52c-8.6 20.8-12.9 43.7-12.9 68.7 0 27.1 4.7 51.2 14.3 72.5 9.5 21.3 22.2 38 38.2 50.4 15.9 12.4 34 22.1 54 29.2 20 7.1 41.2 10.3 63.2 9.4 22-.9 43.5-4.3 64.4-10.3 20.8-5.9 40.4-15.4 58.6-28.3 18.2-12.9 33.1-28.2 44.8-45.7 4.3 6.6 8.1 11.5 11.5 14.7l8.7 8.9c5.8 5.9 14.7 14.6 26.7 26.1 11.9 11.5 24.1 22.7 36.3 33.7l104.4-99.9-6-4.9c-4.3-3.3-9.4-8-15.2-14.3-5.8-6.2-11.6-13.1-17.2-20.5-5.7-7.4-10.6-16.1-14.7-25.9-4.1-9.8-6.2-19.3-6.2-28.5V258.7c0-10.1-1.9-21-5.7-32.8-3.9-11.7-10.7-24.5-20.7-38.3-10-13.8-22.4-26.2-37.2-37-14.9-10.8-34.7-20-59.6-27.4-24.8-7.4-52.6-11.1-83.2-11.1-31.3 0-60.4 3.7-87.6 10.9-27.1 7.3-50.3 17-69.7 29.2-19.3 12.2-35.9 26.3-49.7 42.4-13.8 16.1-24.1 32.9-30.8 50.4-6.7 17.5-10.1 35.2-10.1 53.1L408 310c5.5-16.4 12.9-30.6 22-42.8 9.2-12.2 17.9-21 25.8-26.5 8-5.5 16.6-9.9 25.7-13.2 9.2-3.3 15.4-5 18.6-5.4 3.2-.3 5.7-.4 7.6-.4 26.7 0 45.2 7.9 55.6 23.6 6.5 9.5 9.7 23.9 9.7 43.3v56.6c-15.2.6-30.4 1.6-45.6 2.9zM573.1 500c0 16.6-2.2 31.7-6.5 45-9.2 29.1-26.7 47.4-52.4 54.8-22.4 6.6-43.7 3.3-63.9-9.8-21.5-14-32.2-33.8-32.2-59.3 0-19.9 5-36.9 15-51.1 10-14.1 23.3-24.7 40-31.7s33-12 49-14.9c15.9-3 33-4.8 51-5.4V500zm335.2 218.9c-4.3-5.4-15.9-8.9-34.9-10.7-19-1.8-35.5-1.7-49.7.4-15.3 1.8-31.1 6.2-47.3 13.4-16.3 7.1-23.4 13.1-21.6 17.8l.7 1.3.9.7 1.4.2h4.6c.8 0 1.8-.1 3.2-.2 1.4-.1 2.7-.3 3.9-.4 1.2-.1 2.9-.3 5.1-.4 2.1-.1 4.1-.4 6-.7.3 0 3.7-.3 10.3-.9 6.6-.6 11.4-1 14.3-1.3 2.9-.3 7.8-.6 14.5-.9 6.7-.3 12.1-.3 16.1 0 4 .3 8.5.7 13.6 1.1 5.1.4 9.2 1.3 12.4 2.7 3.2 1.3 5.6 3 7.1 5.1 5.2 6.6 4.2 21.2-3 43.9s-14 40.8-20.4 54.2c-2.8 5.7-2.8 9.2 0 10.7s6.7.1 11.9-4c15.6-12.2 28.6-30.6 39.1-55.3 6.1-14.6 10.5-29.8 13.1-45.7 2.4-15.9 2-26.2-1.3-31z'));
  exports.AntCloudOutline = getIcon('ant-cloud', outline, getNode(newViewBox, 'M378.9 738c-3.1 0-6.1-.5-8.8-1.5l4.4 30.7h26.3l-15.5-29.9c-2.1.5-4.2.7-6.4.7zm421-291.2c-12.6 0-24.8 1.5-36.5 4.2-21.4-38.4-62.3-64.3-109.3-64.3-6.9 0-13.6.6-20.2 1.6-35.4-77.4-113.4-131.1-203.9-131.1-112.3 0-205.3 82.6-221.6 190.4C127.3 455.5 64 523.8 64 607c0 88.4 71.6 160.1 160 160.2h50l13.2-27.6c-26.2-8.3-43.3-29-39.1-48.8 4.6-21.6 32.8-33.9 63.1-27.5 22.9 4.9 40.4 19.1 45.5 35.1a26.1 26.1 0 0 1 22.1-12.4h.2c-.8-3.2-1.2-6.5-1.2-9.9 0-20.1 14.8-36.7 34.1-39.6v-25.4c0-4.4 3.6-8 8-8s8 3.6 8 8v26.3c4.6 1.2 8.8 3.2 12.6 5.8l19.5-21.4c3-3.3 8-3.5 11.3-.5 3.3 3 3.5 8 .5 11.3l-20 22-.2.2a40 40 0 0 1-46.9 59.2c-.4 5.6-2.6 10.7-6 14.8l20 38.4H804v-.1c86.5-2.2 156-73 156-160.1 0-88.5-71.7-160.2-160.1-160.2zM338.2 737.2l-4.3 30h24.4l-5.9-41.5c-3.5 4.6-8.3 8.5-14.2 11.5zM797.5 305a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm-65.7 61.3a24 24 0 1 0 48 0 24 24 0 1 0-48 0zM303.4 742.9l-11.6 24.3h26l3.5-24.7c-5.7.8-11.7 1-17.9.4z'));
  exports.ApartmentOutline = getIcon('apartment', outline, getNode(newViewBox, 'M908 640H804V488c0-4.4-3.6-8-8-8H548v-96h108c8.8 0 16-7.2 16-16V80c0-8.8-7.2-16-16-16H368c-8.8 0-16 7.2-16 16v288c0 8.8 7.2 16 16 16h108v96H228c-4.4 0-8 3.6-8 8v152H116c-8.8 0-16 7.2-16 16v288c0 8.8 7.2 16 16 16h288c8.8 0 16-7.2 16-16V656c0-8.8-7.2-16-16-16H292v-88h440v88H620c-8.8 0-16 7.2-16 16v288c0 8.8 7.2 16 16 16h288c8.8 0 16-7.2 16-16V656c0-8.8-7.2-16-16-16zm-564 76v168H176V716h168zm84-408V140h168v168H428zm420 576H680V716h168v168z'));
  exports.AntDesignOutline = getIcon('ant-design', outline, getNode(newViewBox, 'M716.3 313.8c19-18.9 19-49.7 0-68.6l-69.9-69.9.1.1c-18.5-18.5-50.3-50.3-95.3-95.2-21.2-20.7-55.5-20.5-76.5.5L80.9 474.2a53.84 53.84 0 0 0 0 76.4L474.6 944a54.14 54.14 0 0 0 76.5 0l165.1-165c19-18.9 19-49.7 0-68.6a48.7 48.7 0 0 0-68.7 0l-125 125.2c-5.2 5.2-13.3 5.2-18.5 0L189.5 521.4c-5.2-5.2-5.2-13.3 0-18.5l314.4-314.2c.4-.4.9-.7 1.3-1.1 5.2-4.1 12.4-3.7 17.2 1.1l125.2 125.1c19 19 49.8 19 68.7 0zM408.6 514.4a106.3 106.2 0 1 0 212.6 0 106.3 106.2 0 1 0-212.6 0zm536.2-38.6L821.9 353.5c-19-18.9-49.8-18.9-68.7.1a48.4 48.4 0 0 0 0 68.6l83 82.9c5.2 5.2 5.2 13.3 0 18.5l-81.8 81.7a48.4 48.4 0 0 0 0 68.6 48.7 48.7 0 0 0 68.7 0l121.8-121.7a53.93 53.93 0 0 0-.1-76.4z'));
  exports.AreaChartOutline = getIcon('area-chart', outline, getNode(newViewBox, 'M888 792H200V168c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v688c0 4.4 3.6 8 8 8h752c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-616-64h536c4.4 0 8-3.6 8-8V284c0-7.2-8.7-10.7-13.7-5.7L592 488.6l-125.4-124a8.03 8.03 0 0 0-11.3 0l-189 189.6a7.87 7.87 0 0 0-2.3 5.6V720c0 4.4 3.6 8 8 8z'));
  exports.ArrowLeftOutline = getIcon('arrow-left', outline, getNode(newViewBox, 'M872 474H286.9l350.2-304c5.6-4.9 2.2-14-5.2-14h-88.5c-3.9 0-7.6 1.4-10.5 3.9L155 487.8a31.96 31.96 0 0 0 0 48.3L535.1 866c1.5 1.3 3.3 2 5.2 2h91.5c7.4 0 10.8-9.2 5.2-14L286.9 550H872c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z'));
  exports.ArrowDownOutline = getIcon('arrow-down', outline, getNode(newViewBox, 'M862 465.3h-81c-4.6 0-9 2-12.1 5.5L550 723.1V160c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v563.1L255.1 470.8c-3-3.5-7.4-5.5-12.1-5.5h-81c-6.8 0-10.5 8.1-6 13.2L487.9 861a31.96 31.96 0 0 0 48.3 0L868 478.5c4.5-5.2.8-13.2-6-13.2z'));
  exports.ArrowUpOutline = getIcon('arrow-up', outline, getNode(newViewBox, 'M868 545.5L536.1 163a31.96 31.96 0 0 0-48.3 0L156 545.5a7.97 7.97 0 0 0 6 13.2h81c4.6 0 9-2 12.1-5.5L474 300.9V864c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V300.9l218.9 252.3c3 3.5 7.4 5.5 12.1 5.5h81c6.8 0 10.5-8 6-13.2z'));
  exports.ArrowsAltOutline = getIcon('arrows-alt', outline, getNode(newViewBox, 'M855 160.1l-189.2 23.5c-6.6.8-9.3 8.8-4.7 13.5l54.7 54.7-153.5 153.5a8.03 8.03 0 0 0 0 11.3l45.1 45.1c3.1 3.1 8.2 3.1 11.3 0l153.6-153.6 54.7 54.7a7.94 7.94 0 0 0 13.5-4.7L863.9 169a7.9 7.9 0 0 0-8.9-8.9zM416.6 562.3a8.03 8.03 0 0 0-11.3 0L251.8 715.9l-54.7-54.7a7.94 7.94 0 0 0-13.5 4.7L160.1 855c-.6 5.2 3.7 9.5 8.9 8.9l189.2-23.5c6.6-.8 9.3-8.8 4.7-13.5l-54.7-54.7 153.6-153.6c3.1-3.1 3.1-8.2 0-11.3l-45.2-45z'));
  exports.ArrowRightOutline = getIcon('arrow-right', outline, getNode(newViewBox, 'M869 487.8L491.2 159.9c-2.9-2.5-6.6-3.9-10.5-3.9h-88.5c-7.4 0-10.8 9.2-5.2 14l350.2 304H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h585.1L386.9 854c-5.6 4.9-2.2 14 5.2 14h91.5c1.9 0 3.8-.7 5.2-2L869 536.2a32.07 32.07 0 0 0 0-48.4z'));
  exports.AuditOutline = getIcon('audit', outline, getNode(newViewBox, 'M296 250c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h384c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H296zm184 144H296c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm-48 458H208V148h560v320c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V108c0-17.7-14.3-32-32-32H168c-17.7 0-32 14.3-32 32v784c0 17.7 14.3 32 32 32h264c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm440-88H728v-36.6c46.3-13.8 80-56.6 80-107.4 0-61.9-50.1-112-112-112s-112 50.1-112 112c0 50.7 33.7 93.6 80 107.4V764H520c-8.8 0-16 7.2-16 16v152c0 8.8 7.2 16 16 16h352c8.8 0 16-7.2 16-16V780c0-8.8-7.2-16-16-16zM646 620c0-27.6 22.4-50 50-50s50 22.4 50 50-22.4 50-50 50-50-22.4-50-50zm180 266H566v-60h260v60z'));
  exports.BarChartOutline = getIcon('bar-chart', outline, getNode(newViewBox, 'M888 792H200V168c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v688c0 4.4 3.6 8 8 8h752c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-600-80h56c4.4 0 8-3.6 8-8V560c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v144c0 4.4 3.6 8 8 8zm152 0h56c4.4 0 8-3.6 8-8V384c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v320c0 4.4 3.6 8 8 8zm152 0h56c4.4 0 8-3.6 8-8V462c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v242c0 4.4 3.6 8 8 8zm152 0h56c4.4 0 8-3.6 8-8V304c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v400c0 4.4 3.6 8 8 8z'));
  exports.BarcodeOutline = getIcon('barcode', outline, getNode(newViewBox, 'M120 160H72c-4.4 0-8 3.6-8 8v688c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V168c0-4.4-3.6-8-8-8zm833 0h-48c-4.4 0-8 3.6-8 8v688c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V168c0-4.4-3.6-8-8-8zM200 736h112c4.4 0 8-3.6 8-8V168c0-4.4-3.6-8-8-8H200c-4.4 0-8 3.6-8 8v560c0 4.4 3.6 8 8 8zm321 0h48c4.4 0 8-3.6 8-8V168c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v560c0 4.4 3.6 8 8 8zm126 0h178c4.4 0 8-3.6 8-8V168c0-4.4-3.6-8-8-8H647c-4.4 0-8 3.6-8 8v560c0 4.4 3.6 8 8 8zm-255 0h48c4.4 0 8-3.6 8-8V168c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v560c0 4.4 3.6 8 8 8zm-79 64H201c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h112c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm257 0h-48c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm256 0H648c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h178c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm-385 0h-48c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z'));
  exports.BarsOutline = getIcon('bars', outline, getNode(normalViewBox, 'M912 192H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM104 228a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm0 284a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm0 284a56 56 0 1 0 112 0 56 56 0 1 0-112 0z'));
  exports.BgColorsOutline = getIcon('bg-colors', outline, getNode(newViewBox, 'M766.4 744.3c43.7 0 79.4-36.2 79.4-80.5 0-53.5-79.4-140.8-79.4-140.8S687 610.3 687 663.8c0 44.3 35.7 80.5 79.4 80.5zm-377.1-44.1c7.1 7.1 18.6 7.1 25.6 0l256.1-256c7.1-7.1 7.1-18.6 0-25.6l-256-256c-.6-.6-1.3-1.2-2-1.7l-78.2-78.2a9.11 9.11 0 0 0-12.8 0l-48 48a9.11 9.11 0 0 0 0 12.8l67.2 67.2-207.8 207.9c-7.1 7.1-7.1 18.6 0 25.6l255.9 256zm12.9-448.6l178.9 178.9H223.4l178.8-178.9zM904 816H120c-4.4 0-8 3.6-8 8v80c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-80c0-4.4-3.6-8-8-8z'));
  exports.BehanceOutline = getIcon('behance', outline, getNode(newViewBox, 'M634 294.3h199.5v48.4H634zM434.1 485.8c44.1-21.1 67.2-53.2 67.2-102.8 0-98.1-73-121.9-157.3-121.9H112v492.4h238.5c89.4 0 173.3-43 173.3-143 0-61.8-29.2-107.5-89.7-124.7zM220.2 345.1h101.5c39.1 0 74.2 10.9 74.2 56.3 0 41.8-27.3 58.6-66 58.6H220.2V345.1zm115.5 324.8H220.1V534.3H338c47.6 0 77.7 19.9 77.7 70.3 0 49.6-35.9 65.3-80 65.3zm575.8-89.5c0-105.5-61.7-193.4-173.3-193.4-108.5 0-182.3 81.7-182.3 188.8 0 111 69.9 187.2 182.3 187.2 85.1 0 140.2-38.3 166.7-120h-86.3c-9.4 30.5-47.6 46.5-77.3 46.5-57.4 0-87.4-33.6-87.4-90.7h256.9c.3-5.9.7-12.1.7-18.4zM653.9 537c3.1-46.9 34.4-76.2 81.2-76.2 49.2 0 73.8 28.9 78.1 76.2H653.9z'));
  exports.BlockOutline = getIcon('block', outline, getNode(newViewBox, 'M856 376H648V168c0-8.8-7.2-16-16-16H168c-8.8 0-16 7.2-16 16v464c0 8.8 7.2 16 16 16h208v208c0 8.8 7.2 16 16 16h464c8.8 0 16-7.2 16-16V392c0-8.8-7.2-16-16-16zm-480 16v188H220V220h360v156H392c-8.8 0-16 7.2-16 16zm204 52v136H444V444h136zm224 360H444V648h188c8.8 0 16-7.2 16-16V444h156v360z'));
  exports.BoldOutline = getIcon('bold', outline, getNode(newViewBox, 'M697.8 481.4c33.6-35 54.2-82.3 54.2-134.3v-10.2C752 229.3 663.9 142 555.3 142H259.4c-15.1 0-27.4 12.3-27.4 27.4v679.1c0 16.3 13.2 29.5 29.5 29.5h318.7c117 0 211.8-94.2 211.8-210.5v-11c0-73-37.4-137.3-94.2-175.1zM328 238h224.7c57.1 0 103.3 44.4 103.3 99.3v9.5c0 54.8-46.3 99.3-103.3 99.3H328V238zm366.6 429.4c0 62.9-51.7 113.9-115.5 113.9H328V542.7h251.1c63.8 0 115.5 51 115.5 113.9v10.8z'));
  exports.BorderBottomOutline = getIcon('border-bottom', outline, getNode(newViewBox, 'M872 808H152c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h720c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-720-94h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm0-498h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm0 332h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm0-166h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm166 166h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm0-332h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm332 0h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm0 332h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm222-72h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-388 72h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm388-404h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-388 72h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm388 426h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-388 72h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm388-404h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-388 72h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8z'));
  exports.BorderLeftOutline = getIcon('border-left', outline, getNode(newViewBox, 'M208 144h-56c-4.4 0-8 3.6-8 8v720c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V152c0-4.4-3.6-8-8-8zm166 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm498 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm166 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM540 310h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 166h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm332 332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM374 808h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm332 332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.BorderOuterOutline = getIcon('border-outer', outline, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656zM484 366h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zM302 548h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm364 0h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm-182 0h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm0 182h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8z'));
  exports.BorderInnerOutline = getIcon('border-inner', outline, getNode(newViewBox, 'M872 476H548V144h-72v332H152c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h324v332h72V548h324c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-166h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 498h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-664h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 498h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM650 216h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm56 592h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-56-592h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm-166 0h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm56 592h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-56-426h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm56 260h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.BorderRightOutline = getIcon('border-right', outline, getNode(newViewBox, 'M872 144h-56c-4.4 0-8 3.6-8 8v720c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V152c0-4.4-3.6-8-8-8zm-166 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-498 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-166 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm166 166h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 166h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM208 808h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm498 332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM374 808h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.BorderHorizontalOutline = getIcon('border-horizontal', outline, getNode(newViewBox, 'M540 144h-56c-4.4 0-8 3.6-8 8v720c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V152c0-4.4-3.6-8-8-8zm-166 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm498 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-664 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm498 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM208 310h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm664 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-664 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 166h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm664 332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM374 808h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm332 332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.BorderTopOutline = getIcon('border-top', outline, getNode(newViewBox, 'M872 144H152c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h720c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM208 310h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 498h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 166h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm166-166h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm166 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm332 332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm332-498h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm332 332h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.BorderVerticleOutline = getIcon('border-verticle', outline, getNode(newViewBox, 'M872 476H152c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h720c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-166h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 498h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-664h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 498h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM650 216h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm56 592h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-56-592h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm-166 0h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm332 0h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zM208 808h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM152 382h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm332 0h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zM208 642h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm332 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.BorderOutline = getIcon('border', outline, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'));
  exports.BranchesOutline = getIcon('branches', outline, getNode(newViewBox, 'M740 161c-61.8 0-112 50.2-112 112 0 50.1 33.1 92.6 78.5 106.9v95.9L320 602.4V318.1c44.2-15 76-56.9 76-106.1 0-61.8-50.2-112-112-112s-112 50.2-112 112c0 49.2 31.8 91 76 106.1V706c-44.2 15-76 56.9-76 106.1 0 61.8 50.2 112 112 112s112-50.2 112-112c0-49.2-31.8-91-76-106.1v-27.8l423.5-138.7a50.52 50.52 0 0 0 34.9-48.2V378.2c42.9-15.8 73.6-57 73.6-105.2 0-61.8-50.2-112-112-112zm-504 51a48.01 48.01 0 0 1 96 0 48.01 48.01 0 0 1-96 0zm96 600a48.01 48.01 0 0 1-96 0 48.01 48.01 0 0 1 96 0zm408-491a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'));
  exports.CheckOutline = getIcon('check', outline, getNode(newViewBox, 'M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 0 0-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z'));
  exports.CiOutline = getIcon('ci', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm218-572.1h-50.4c-4.4 0-8 3.6-8 8v384.2c0 4.4 3.6 8 8 8H730c4.4 0 8-3.6 8-8V319.9c0-4.4-3.6-8-8-8zm-281.4 49.6c49.5 0 83.1 31.5 87 77.6.4 4.2 3.8 7.4 8 7.4h52.6c2.4 0 4.4-2 4.4-4.4 0-81.2-64-138.1-152.3-138.1C345.4 304 286 373.5 286 488.4v49c0 114 59.4 182.6 162.3 182.6 88 0 152.3-55.1 152.3-132.5 0-2.4-2-4.4-4.4-4.4h-52.7c-4.2 0-7.6 3.2-8 7.3-4.2 43-37.7 72.4-87 72.4-61.1 0-95.6-44.9-95.6-125.2v-49.3c.1-81.4 34.6-126.8 95.7-126.8z'));
  exports.CloseOutline = getIcon('close', outline, getNode(newViewBox, 'M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 0 0 203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z'));
  exports.CloudDownloadOutline = getIcon('cloud-download', outline, getNode(newViewBox, 'M624 706.3h-74.1V464c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v242.3H400c-6.7 0-10.4 7.7-6.3 12.9l112 141.7a8 8 0 0 0 12.6 0l112-141.7c4.1-5.2.4-12.9-6.3-12.9z', 'M811.4 366.7C765.6 245.9 648.9 160 512.2 160S258.8 245.8 213 366.6C127.3 389.1 64 467.2 64 560c0 110.5 89.5 200 199.9 200H304c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8h-40.1c-33.7 0-65.4-13.4-89-37.7-23.5-24.2-36-56.8-34.9-90.6.9-26.4 9.9-51.2 26.2-72.1 16.7-21.3 40.1-36.8 66.1-43.7l37.9-9.9 13.9-36.6c8.6-22.8 20.6-44.1 35.7-63.4a245.6 245.6 0 0 1 52.4-49.9c41.1-28.9 89.5-44.2 140-44.2s98.9 15.3 140 44.2c19.9 14 37.5 30.8 52.4 49.9 15.1 19.3 27.1 40.7 35.7 63.4l13.8 36.5 37.8 10C846.1 454.5 884 503.8 884 560c0 33.1-12.9 64.3-36.3 87.7a123.07 123.07 0 0 1-87.6 36.3H720c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h40.1C870.5 760 960 670.5 960 560c0-92.7-63.1-170.7-148.6-193.3z'));
  exports.CloudServerOutline = getIcon('cloud-server', outline, getNode(newViewBox, 'M704 446H320c-4.4 0-8 3.6-8 8v402c0 4.4 3.6 8 8 8h384c4.4 0 8-3.6 8-8V454c0-4.4-3.6-8-8-8zm-328 64h272v117H376V510zm272 290H376V683h272v117z', 'M424 748a32 32 0 1 0 64 0 32 32 0 1 0-64 0zm0-178a32 32 0 1 0 64 0 32 32 0 1 0-64 0z', 'M811.4 368.9C765.6 248 648.9 162 512.2 162S258.8 247.9 213 368.8C126.9 391.5 63.5 470.2 64 563.6 64.6 668 145.6 752.9 247.6 762c4.7.4 8.7-3.3 8.7-8v-60.4c0-4-3-7.4-7-7.9-27-3.4-52.5-15.2-72.1-34.5-24-23.5-37.2-55.1-37.2-88.6 0-28 9.1-54.4 26.2-76.4 16.7-21.4 40.2-36.9 66.1-43.7l37.9-10 13.9-36.7c8.6-22.8 20.6-44.2 35.7-63.5 14.9-19.2 32.6-36 52.4-50 41.1-28.9 89.5-44.2 140-44.2s98.9 15.3 140 44.3c19.9 14 37.5 30.8 52.4 50 15.1 19.3 27.1 40.7 35.7 63.5l13.8 36.6 37.8 10c54.2 14.4 92.1 63.7 92.1 120 0 33.6-13.2 65.1-37.2 88.6-19.5 19.2-44.9 31.1-71.9 34.5-4 .5-6.9 3.9-6.9 7.9V754c0 4.7 4.1 8.4 8.8 8 101.7-9.2 182.5-94 183.2-198.2.6-93.4-62.7-172.1-148.6-194.9z'));
  exports.CloudSyncOutline = getIcon('cloud-sync', outline, getNode(newViewBox, 'M811.4 368.9C765.6 248 648.9 162 512.2 162S258.8 247.9 213 368.8C126.9 391.5 63.5 470.2 64 563.6 64.6 668 145.6 752.9 247.6 762c4.7.4 8.7-3.3 8.7-8v-60.4c0-4-3-7.4-7-7.9-27-3.4-52.5-15.2-72.1-34.5-24-23.5-37.2-55.1-37.2-88.6 0-28 9.1-54.4 26.2-76.4 16.7-21.4 40.2-36.9 66.1-43.7l37.9-10 13.9-36.7c8.6-22.8 20.6-44.2 35.7-63.5 14.9-19.2 32.6-36 52.4-50 41.1-28.9 89.5-44.2 140-44.2s98.9 15.3 140 44.3c19.9 14 37.5 30.8 52.4 50 15.1 19.3 27.1 40.7 35.7 63.5l13.8 36.6 37.8 10c54.2 14.4 92.1 63.7 92.1 120 0 33.6-13.2 65.1-37.2 88.6-19.5 19.2-44.9 31.1-71.9 34.5-4 .5-6.9 3.9-6.9 7.9V754c0 4.7 4.1 8.4 8.8 8 101.7-9.2 182.5-94 183.2-198.2.6-93.4-62.7-172.1-148.6-194.9z', 'M376.9 656.4c1.8-33.5 15.7-64.7 39.5-88.6 25.4-25.5 60-39.8 96-39.8 36.2 0 70.3 14.1 96 39.8 1.4 1.4 2.7 2.8 4.1 4.3l-25 19.6a8 8 0 0 0 3 14.1l98.2 24c5 1.2 9.9-2.6 9.9-7.7l.5-101.3c0-6.7-7.6-10.5-12.9-6.3L663 532.7c-36.6-42-90.4-68.6-150.5-68.6-107.4 0-195 85.1-199.4 191.7-.2 4.5 3.4 8.3 8 8.3H369c4.2-.1 7.7-3.4 7.9-7.7zM703 664h-47.9c-4.2 0-7.7 3.3-8 7.6-1.8 33.5-15.7 64.7-39.5 88.6-25.4 25.5-60 39.8-96 39.8-36.2 0-70.3-14.1-96-39.8-1.4-1.4-2.7-2.8-4.1-4.3l25-19.6a8 8 0 0 0-3-14.1l-98.2-24c-5-1.2-9.9 2.6-9.9 7.7l-.4 101.4c0 6.7 7.6 10.5 12.9 6.3l23.2-18.2c36.6 42 90.4 68.6 150.5 68.6 107.4 0 195-85.1 199.4-191.7.2-4.5-3.4-8.3-8-8.3z'));
  exports.CloudUploadOutline = getIcon('cloud-upload', outline, getNode(newViewBox, 'M518.3 459a8 8 0 0 0-12.6 0l-112 141.7a7.98 7.98 0 0 0 6.3 12.9h73.9V856c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V613.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 459z', 'M811.4 366.7C765.6 245.9 648.9 160 512.2 160S258.8 245.8 213 366.6C127.3 389.1 64 467.2 64 560c0 110.5 89.5 200 199.9 200H304c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8h-40.1c-33.7 0-65.4-13.4-89-37.7-23.5-24.2-36-56.8-34.9-90.6.9-26.4 9.9-51.2 26.2-72.1 16.7-21.3 40.1-36.8 66.1-43.7l37.9-9.9 13.9-36.6c8.6-22.8 20.6-44.1 35.7-63.4a245.6 245.6 0 0 1 52.4-49.9c41.1-28.9 89.5-44.2 140-44.2s98.9 15.3 140 44.2c19.9 14 37.5 30.8 52.4 49.9 15.1 19.3 27.1 40.7 35.7 63.4l13.8 36.5 37.8 10C846.1 454.5 884 503.8 884 560c0 33.1-12.9 64.3-36.3 87.7a123.07 123.07 0 0 1-87.6 36.3H720c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h40.1C870.5 760 960 670.5 960 560c0-92.7-63.1-170.7-148.6-193.3z'));
  exports.ClusterOutline = getIcon('cluster', outline, getNode(newViewBox, 'M888 680h-54V540H546v-92h238c8.8 0 16-7.2 16-16V168c0-8.8-7.2-16-16-16H240c-8.8 0-16 7.2-16 16v264c0 8.8 7.2 16 16 16h238v92H190v140h-54c-4.4 0-8 3.6-8 8v176c0 4.4 3.6 8 8 8h176c4.4 0 8-3.6 8-8V688c0-4.4-3.6-8-8-8h-54v-72h220v72h-54c-4.4 0-8 3.6-8 8v176c0 4.4 3.6 8 8 8h176c4.4 0 8-3.6 8-8V688c0-4.4-3.6-8-8-8h-54v-72h220v72h-54c-4.4 0-8 3.6-8 8v176c0 4.4 3.6 8 8 8h176c4.4 0 8-3.6 8-8V688c0-4.4-3.6-8-8-8zM256 805.3c0 1.5-1.2 2.7-2.7 2.7h-58.7c-1.5 0-2.7-1.2-2.7-2.7v-58.7c0-1.5 1.2-2.7 2.7-2.7h58.7c1.5 0 2.7 1.2 2.7 2.7v58.7zm288 0c0 1.5-1.2 2.7-2.7 2.7h-58.7c-1.5 0-2.7-1.2-2.7-2.7v-58.7c0-1.5 1.2-2.7 2.7-2.7h58.7c1.5 0 2.7 1.2 2.7 2.7v58.7zM288 384V216h448v168H288zm544 421.3c0 1.5-1.2 2.7-2.7 2.7h-58.7c-1.5 0-2.7-1.2-2.7-2.7v-58.7c0-1.5 1.2-2.7 2.7-2.7h58.7c1.5 0 2.7 1.2 2.7 2.7v58.7zM360 300a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'));
  exports.CodepenOutline = getIcon('codepen', outline, getNode(newViewBox, 'M911.7 385.3l-.3-1.5c-.2-1-.3-1.9-.6-2.9-.2-.6-.4-1.1-.5-1.7-.3-.8-.5-1.7-.9-2.5-.2-.6-.5-1.1-.8-1.7-.4-.8-.8-1.5-1.2-2.3-.3-.5-.6-1.1-1-1.6-.8-1.2-1.7-2.4-2.6-3.6-.5-.6-1.1-1.3-1.7-1.9-.4-.5-.9-.9-1.4-1.3-.6-.6-1.3-1.1-1.9-1.6-.5-.4-1-.8-1.6-1.2-.2-.1-.4-.3-.6-.4L531.1 117.8a34.3 34.3 0 0 0-38.1 0L127.3 361.3c-.2.1-.4.3-.6.4-.5.4-1 .8-1.6 1.2-.7.5-1.3 1.1-1.9 1.6-.5.4-.9.9-1.4 1.3-.6.6-1.2 1.2-1.7 1.9-1 1.1-1.8 2.3-2.6 3.6-.3.5-.7 1-1 1.6-.4.7-.8 1.5-1.2 2.3-.3.5-.5 1.1-.8 1.7-.3.8-.6 1.7-.9 2.5-.2.6-.4 1.1-.5 1.7-.2.9-.4 1.9-.6 2.9l-.3 1.5c-.2 1.5-.3 3-.3 4.5v243.5c0 1.5.1 3 .3 4.5l.3 1.5.6 2.9c.2.6.3 1.1.5 1.7.3.9.6 1.7.9 2.5.2.6.5 1.1.8 1.7.4.8.7 1.5 1.2 2.3.3.5.6 1.1 1 1.6.5.7.9 1.4 1.5 2.1l1.2 1.5c.5.6 1.1 1.3 1.7 1.9.4.5.9.9 1.4 1.3.6.6 1.3 1.1 1.9 1.6.5.4 1 .8 1.6 1.2.2.1.4.3.6.4L493 905.7c5.6 3.8 12.3 5.8 19.1 5.8 6.6 0 13.3-1.9 19.1-5.8l365.6-243.5c.2-.1.4-.3.6-.4.5-.4 1-.8 1.6-1.2.7-.5 1.3-1.1 1.9-1.6.5-.4.9-.9 1.4-1.3.6-.6 1.2-1.2 1.7-1.9l1.2-1.5 1.5-2.1c.3-.5.7-1 1-1.6.4-.8.8-1.5 1.2-2.3.3-.5.5-1.1.8-1.7.3-.8.6-1.7.9-2.5.2-.5.4-1.1.5-1.7.3-.9.4-1.9.6-2.9l.3-1.5c.2-1.5.3-3 .3-4.5V389.8c-.3-1.5-.4-3-.6-4.5zM546.4 210.5l269.4 179.4-120.3 80.4-149-99.6V210.5zm-68.8 0v160.2l-149 99.6-120.3-80.4 269.3-179.4zM180.7 454.1l86 57.5-86 57.5v-115zm296.9 358.5L208.3 633.2l120.3-80.4 149 99.6v160.2zM512 592.8l-121.6-81.2L512 430.3l121.6 81.2L512 592.8zm34.4 219.8V652.4l149-99.6 120.3 80.4-269.3 179.4zM843.3 569l-86-57.5 86-57.5v115z'));
  exports.CodeSandboxOutline = getIcon('code-sandbox', outline, getNode(newViewBox, 'M709.6 210l.4-.2h.2L512 96 313.9 209.8h-.2l.7.3L151.5 304v416L512 928l360.5-208V304l-162.9-94zM482.7 843.6L339.6 761V621.4L210 547.8V372.9l272.7 157.3v313.4zM238.2 321.5l134.7-77.8 138.9 79.7 139.1-79.9 135.2 78-273.9 158-274-158zM814 548.3l-128.8 73.1v139.1l-143.9 83V530.4L814 373.1v175.2z'));
  exports.ColumHeightOutline = getIcon('colum-height', outline, getNode(newViewBox, 'M840 836H184c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h656c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm0-724H184c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h656c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zM610.8 378c6 0 9.4-7 5.7-11.7L515.7 238.7a7.14 7.14 0 0 0-11.3 0L403.6 366.3a7.23 7.23 0 0 0 5.7 11.7H476v268h-62.8c-6 0-9.4 7-5.7 11.7l100.8 127.5c2.9 3.7 8.5 3.7 11.3 0l100.8-127.5c3.7-4.7.4-11.7-5.7-11.7H548V378h62.8z'));
  exports.ColumnWidthOutline = getIcon('column-width', outline, getNode(newViewBox, 'M180 176h-60c-4.4 0-8 3.6-8 8v656c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V184c0-4.4-3.6-8-8-8zm724 0h-60c-4.4 0-8 3.6-8 8v656c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V184c0-4.4-3.6-8-8-8zM785.3 504.3L657.7 403.6a7.23 7.23 0 0 0-11.7 5.7V476H378v-62.8c0-6-7-9.4-11.7-5.7L238.7 508.3a7.14 7.14 0 0 0 0 11.3l127.5 100.8c4.7 3.7 11.7.4 11.7-5.7V548h268v62.8c0 6 7 9.4 11.7 5.7l127.5-100.8c3.8-2.9 3.8-8.5.2-11.4z'));
  exports.ColumnHeightOutline = getIcon('column-height', outline, getNode(newViewBox, 'M840 836H184c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h656c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm0-724H184c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h656c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zM610.8 378c6 0 9.4-7 5.7-11.7L515.7 238.7a7.14 7.14 0 0 0-11.3 0L403.6 366.3a7.23 7.23 0 0 0 5.7 11.7H476v268h-62.8c-6 0-9.4 7-5.7 11.7l100.8 127.5c2.9 3.7 8.5 3.7 11.3 0l100.8-127.5c3.7-4.7.4-11.7-5.7-11.7H548V378h62.8z'));
  exports.CoffeeOutline = getIcon('coffee', outline, getNode(normalViewBox, 'M275 281c19.9 0 36-16.1 36-36V36c0-19.9-16.1-36-36-36s-36 16.1-36 36v209c0 19.9 16.1 36 36 36zm613 144H768c0-39.8-32.2-72-72-72H200c-39.8 0-72 32.2-72 72v248c0 3.4.2 6.7.7 9.9-.5 7-.7 14-.7 21.1 0 176.7 143.3 320 320 320 160.1 0 292.7-117.5 316.3-271H888c39.8 0 72-32.2 72-72V497c0-39.8-32.2-72-72-72zM696 681h-1.1c.7 7.6 1.1 15.2 1.1 23 0 137-111 248-248 248S200 841 200 704c0-7.8.4-15.4 1.1-23H200V425h496v256zm192-8H776V497h112v176zM613 281c19.9 0 36-16.1 36-36V36c0-19.9-16.1-36-36-36s-36 16.1-36 36v209c0 19.9 16.1 36 36 36zm-170 0c19.9 0 36-16.1 36-36V36c0-19.9-16.1-36-36-36s-36 16.1-36 36v209c0 19.9 16.1 36 36 36z'));
  exports.CopyrightOutline = getIcon('copyright', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm5.6-532.7c53 0 89 33.8 93 83.4.3 4.2 3.8 7.4 8 7.4h56.7c2.6 0 4.7-2.1 4.7-4.7 0-86.7-68.4-147.4-162.7-147.4C407.4 290 344 364.2 344 486.8v52.3C344 660.8 407.4 734 517.3 734c94 0 162.7-58.8 162.7-141.4 0-2.6-2.1-4.7-4.7-4.7h-56.8c-4.2 0-7.6 3.2-8 7.3-4.2 46.1-40.1 77.8-93 77.8-65.3 0-102.1-47.9-102.1-133.6v-52.6c.1-87 37-135.5 102.2-135.5z'));
  exports.DashOutline = getIcon('dash', outline, getNode(newViewBox, 'M112 476h160v72H112zm320 0h160v72H432zm320 0h160v72H752z'));
  exports.DeploymentUnitOutline = getIcon('deployment-unit', outline, getNode(newViewBox, 'M888.3 693.2c-42.5-24.6-94.3-18-129.2 12.8l-53-30.7V523.6c0-15.7-8.4-30.3-22-38.1l-136-78.3v-67.1c44.2-15 76-56.8 76-106.1 0-61.9-50.1-112-112-112s-112 50.1-112 112c0 49.3 31.8 91.1 76 106.1v67.1l-136 78.3c-13.6 7.8-22 22.4-22 38.1v151.6l-53 30.7c-34.9-30.8-86.8-37.4-129.2-12.8-53.5 31-71.7 99.4-41 152.9 30.8 53.5 98.9 71.9 152.2 41 42.5-24.6 62.7-73 53.6-118.8l48.7-28.3 140.6 81c6.8 3.9 14.4 5.9 22 5.9s15.2-2 22-5.9L674.5 740l48.7 28.3c-9.1 45.7 11.2 94.2 53.6 118.8 53.3 30.9 121.5 12.6 152.2-41 30.8-53.6 12.6-122-40.7-152.9zm-673 138.4a47.6 47.6 0 0 1-65.2-17.6c-13.2-22.9-5.4-52.3 17.5-65.5a47.6 47.6 0 0 1 65.2 17.6c13.2 22.9 5.4 52.3-17.5 65.5zM522 463.8zM464 234a48.01 48.01 0 0 1 96 0 48.01 48.01 0 0 1-96 0zm170 446.2l-122 70.3-122-70.3V539.8l122-70.3 122 70.3v140.4zm239.9 133.9c-13.2 22.9-42.4 30.8-65.2 17.6-22.8-13.2-30.7-42.6-17.5-65.5s42.4-30.8 65.2-17.6c22.9 13.2 30.7 42.5 17.5 65.5z'));
  exports.DesktopOutline = getIcon('desktop', outline, getNode(newViewBox, 'M928 140H96c-17.7 0-32 14.3-32 32v496c0 17.7 14.3 32 32 32h380v112H304c-8.8 0-16 7.2-16 16v48c0 4.4 3.6 8 8 8h432c4.4 0 8-3.6 8-8v-48c0-8.8-7.2-16-16-16H548V700h380c17.7 0 32-14.3 32-32V172c0-17.7-14.3-32-32-32zm-40 488H136V212h752v416z'));
  exports.DingdingOutline = getIcon('dingding', outline, getNode(newViewBox, 'M573.7 252.5C422.5 197.4 201.3 96.7 201.3 96.7c-15.7-4.1-17.9 11.1-17.9 11.1-5 61.1 33.6 160.5 53.6 182.8 19.9 22.3 319.1 113.7 319.1 113.7S326 357.9 270.5 341.9c-55.6-16-37.9 17.8-37.9 17.8 11.4 61.7 64.9 131.8 107.2 138.4 42.2 6.6 220.1 4 220.1 4s-35.5 4.1-93.2 11.9c-42.7 5.8-97 12.5-111.1 17.8-33.1 12.5 24 62.6 24 62.6 84.7 76.8 129.7 50.5 129.7 50.5 33.3-10.7 61.4-18.5 85.2-24.2L565 743.1h84.6L603 928l205.3-271.9H700.8l22.3-38.7c.3.5.4.8.4.8S799.8 496.1 829 433.8l.6-1h-.1c5-10.8 8.6-19.7 10-25.8 17-71.3-114.5-99.4-265.8-154.5z'));
  exports.DisconnectOutline = getIcon('disconnect', outline, getNode(newViewBox, 'M832.6 191.4c-84.6-84.6-221.5-84.6-306 0l-96.9 96.9 51 51 96.9-96.9c53.8-53.8 144.6-59.5 204 0 59.5 59.5 53.8 150.2 0 204l-96.9 96.9 51.1 51.1 96.9-96.9c84.4-84.6 84.4-221.5-.1-306.1zM446.5 781.6c-53.8 53.8-144.6 59.5-204 0-59.5-59.5-53.8-150.2 0-204l96.9-96.9-51.1-51.1-96.9 96.9c-84.6 84.6-84.6 221.5 0 306s221.5 84.6 306 0l96.9-96.9-51-51-96.8 97zM260.3 209.4a8.03 8.03 0 0 0-11.3 0L209.4 249a8.03 8.03 0 0 0 0 11.3l554.4 554.4c3.1 3.1 8.2 3.1 11.3 0l39.6-39.6c3.1-3.1 3.1-8.2 0-11.3L260.3 209.4z'));
  exports.DollarOutline = getIcon('dollar', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm47.7-395.2l-25.4-5.9V348.6c38 5.2 61.5 29 65.5 58.2.5 4 3.9 6.9 7.9 6.9h44.9c4.7 0 8.4-4.1 8-8.8-6.1-62.3-57.4-102.3-125.9-109.2V263c0-4.4-3.6-8-8-8h-28.1c-4.4 0-8 3.6-8 8v33c-70.8 6.9-126.2 46-126.2 119 0 67.6 49.8 100.2 102.1 112.7l24.7 6.3v142.7c-44.2-5.9-69-29.5-74.1-61.3-.6-3.8-4-6.6-7.9-6.6H363c-4.7 0-8.4 4-8 8.7 4.5 55 46.2 105.6 135.2 112.1V761c0 4.4 3.6 8 8 8h28.4c4.4 0 8-3.6 8-8.1l-.2-31.7c78.3-6.9 134.3-48.8 134.3-124-.1-69.4-44.2-100.4-109-116.4zm-68.6-16.2c-5.6-1.6-10.3-3.1-15-5-33.8-12.2-49.5-31.9-49.5-57.3 0-36.3 27.5-57 64.5-61.7v124zM534.3 677V543.3c3.1.9 5.9 1.6 8.8 2.2 47.3 14.4 63.2 34.4 63.2 65.1 0 39.1-29.4 62.6-72 66.4z'));
  exports.DoubleRightOutline = getIcon('double-right', outline, getNode(newViewBox, 'M533.2 492.3L277.9 166.1c-3-3.9-7.7-6.1-12.6-6.1H188c-6.7 0-10.4 7.7-6.3 12.9L447.1 512 181.7 851.1A7.98 7.98 0 0 0 188 864h77.3c4.9 0 9.6-2.3 12.6-6.1l255.3-326.1c9.1-11.7 9.1-27.9 0-39.5zm304 0L581.9 166.1c-3-3.9-7.7-6.1-12.6-6.1H492c-6.7 0-10.4 7.7-6.3 12.9L751.1 512 485.7 851.1A7.98 7.98 0 0 0 492 864h77.3c4.9 0 9.6-2.3 12.6-6.1l255.3-326.1c9.1-11.7 9.1-27.9 0-39.5z'));
  exports.DotChartOutline = getIcon('dot-chart', outline, getNode(newViewBox, 'M888 792H200V168c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v688c0 4.4 3.6 8 8 8h752c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM288 604a64 64 0 1 0 128 0 64 64 0 1 0-128 0zm118-224a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm158 228a96 96 0 1 0 192 0 96 96 0 1 0-192 0zm148-314a56 56 0 1 0 112 0 56 56 0 1 0-112 0z'));
  exports.DoubleLeftOutline = getIcon('double-left', outline, getNode(newViewBox, 'M272.9 512l265.4-339.1c4.1-5.2.4-12.9-6.3-12.9h-77.3c-4.9 0-9.6 2.3-12.6 6.1L186.8 492.3a31.99 31.99 0 0 0 0 39.5l255.3 326.1c3 3.9 7.7 6.1 12.6 6.1H532c6.7 0 10.4-7.7 6.3-12.9L272.9 512zm304 0l265.4-339.1c4.1-5.2.4-12.9-6.3-12.9h-77.3c-4.9 0-9.6 2.3-12.6 6.1L490.8 492.3a31.99 31.99 0 0 0 0 39.5l255.3 326.1c3 3.9 7.7 6.1 12.6 6.1H836c6.7 0 10.4-7.7 6.3-12.9L576.9 512z'));
  exports.DownloadOutline = getIcon('download', outline, getNode(newViewBox, 'M505.7 661a8 8 0 0 0 12.6 0l112-141.7c4.1-5.2.4-12.9-6.3-12.9h-74.1V168c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v338.3H400c-6.7 0-10.4 7.7-6.3 12.9l112 141.8zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z'));
  exports.DribbbleOutline = getIcon('dribbble', outline, getNode(newViewBox, 'M512 96C282.6 96 96 282.6 96 512s186.6 416 416 416 416-186.6 416-416S741.4 96 512 96zm275.1 191.8c49.5 60.5 79.5 137.5 80.2 221.4-11.7-2.5-129.2-26.3-247.4-11.4-2.5-6.1-5-12.2-7.6-18.3-7.4-17.3-15.3-34.6-23.6-51.5C720 374.3 779.6 298 787.1 287.8zM512 157.2c90.3 0 172.8 33.9 235.5 89.5-6.4 9.1-59.9 81-186.2 128.4-58.2-107-122.7-194.8-132.6-208 27.3-6.6 55.2-9.9 83.3-9.9zM360.9 191c9.4 12.8 72.9 100.9 131.7 205.5C326.4 440.6 180 440 164.1 439.8c23.1-110.3 97.4-201.9 196.8-248.8zM156.7 512.5c0-3.6.1-7.3.2-10.9 15.5.3 187.7 2.5 365.2-50.6 10.2 19.9 19.9 40.1 28.8 60.3-4.7 1.3-9.4 2.7-14 4.2C353.6 574.9 256.1 736.4 248 750.1c-56.7-63-91.3-146.3-91.3-237.6zM512 867.8c-82.2 0-157.9-28-218.1-75 6.4-13.1 78.3-152 278.7-221.9l2.3-.8c49.9 129.6 70.5 238.3 75.8 269.5A350.46 350.46 0 0 1 512 867.8zm198.5-60.7c-3.6-21.6-22.5-125.6-69-253.3C752.9 536 850.7 565.2 862.8 569c-15.8 98.8-72.5 184.2-152.3 238.1z'));
  exports.DropboxOutline = getIcon('dropbox', outline, getNode(newViewBox, 'M64 556.9l264.2 173.5L512.5 577 246.8 412.7zm896-290.3zm0 0L696.8 95 512.5 248.5l265.2 164.2L512.5 577l184.3 153.4L960 558.8 777.7 412.7zM513 609.8L328.2 763.3l-79.4-51.5v57.8L513 928l263.7-158.4v-57.8l-78.9 51.5zM328.2 95L64 265.1l182.8 147.6 265.7-164.2zM64 556.9z'));
  exports.EllipsisOutline = getIcon('ellipsis', outline, getNode(newViewBox, 'M176 511a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm280 0a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm280 0a56 56 0 1 0 112 0 56 56 0 1 0-112 0z'));
  exports.EnterOutline = getIcon('enter', outline, getNode(newViewBox, 'M864 170h-60c-4.4 0-8 3.6-8 8v518H310v-73c0-6.7-7.8-10.5-13-6.3l-141.9 112a8 8 0 0 0 0 12.6l141.9 112c5.3 4.2 13 .4 13-6.3v-75h498c35.3 0 64-28.7 64-64V178c0-4.4-3.6-8-8-8z'));
  exports.EuroOutline = getIcon('euro', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm117.7-588.6c-15.9-3.5-34.4-5.4-55.3-5.4-106.7 0-178.9 55.7-198.6 149.9H344c-4.4 0-8 3.6-8 8v27.2c0 4.4 3.6 8 8 8h26.4c-.3 4.1-.3 8.4-.3 12.8v36.9H344c-4.4 0-8 3.6-8 8V568c0 4.4 3.6 8 8 8h30.2c17.2 99.2 90.4 158 200.2 158 20.9 0 39.4-1.7 55.3-5.1 3.7-.8 6.4-4 6.4-7.8v-42.8c0-5-4.6-8.8-9.5-7.8-14.7 2.8-31.9 4.1-51.8 4.1-68.5 0-114.5-36.6-129.8-98.6h130.6c4.4 0 8-3.6 8-8v-27.2c0-4.4-3.6-8-8-8H439.2v-36c0-4.7 0-9.4.3-13.8h135.9c4.4 0 8-3.6 8-8v-27.2c0-4.4-3.6-8-8-8H447.1c17.2-56.9 62.3-90.4 127.6-90.4 19.9 0 37.1 1.5 51.7 4.4a8 8 0 0 0 9.6-7.8v-42.8c0-3.8-2.6-7-6.3-7.8z'));
  exports.ExceptionOutline = getIcon('exception', outline, getNode(newViewBox, 'M688 312v-48c0-4.4-3.6-8-8-8H296c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h384c4.4 0 8-3.6 8-8zm-392 88c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H296zm376 116c-119.3 0-216 96.7-216 216s96.7 216 216 216 216-96.7 216-216-96.7-216-216-216zm107.5 323.5C750.8 868.2 712.6 884 672 884s-78.8-15.8-107.5-44.5C535.8 810.8 520 772.6 520 732s15.8-78.8 44.5-107.5C593.2 595.8 631.4 580 672 580s78.8 15.8 107.5 44.5C808.2 653.2 824 691.4 824 732s-15.8 78.8-44.5 107.5zM640 812a32 32 0 1 0 64 0 32 32 0 1 0-64 0zm12-64h40c4.4 0 8-3.6 8-8V628c0-4.4-3.6-8-8-8h-40c-4.4 0-8 3.6-8 8v112c0 4.4 3.6 8 8 8zM440 852H208V148h560v344c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V108c0-17.7-14.3-32-32-32H168c-17.7 0-32 14.3-32 32v784c0 17.7 14.3 32 32 32h272c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.ExclamationOutline = getIcon('exclamation', outline, getNode(newViewBox, 'M448 804a64 64 0 1 0 128 0 64 64 0 1 0-128 0zm32-168h64c4.4 0 8-3.6 8-8V164c0-4.4-3.6-8-8-8h-64c-4.4 0-8 3.6-8 8v464c0 4.4 3.6 8 8 8z'));
  exports.ExportOutline = getIcon('export', outline, getNode(newViewBox, 'M888.3 757.4h-53.8c-4.2 0-7.7 3.5-7.7 7.7v61.8H197.1V197.1h629.8v61.8c0 4.2 3.5 7.7 7.7 7.7h53.8c4.2 0 7.7-3.4 7.7-7.7V158.7c0-17-13.7-30.7-30.7-30.7H158.7c-17 0-30.7 13.7-30.7 30.7v706.6c0 17 13.7 30.7 30.7 30.7h706.6c17 0 30.7-13.7 30.7-30.7V765.1c0-4.3-3.5-7.7-7.7-7.7zm18.6-251.7L765 393.7c-5.3-4.2-13-.4-13 6.3v76H438c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h314v76c0 6.7 7.8 10.5 13 6.3l141.9-112a8 8 0 0 0 0-12.6z'));
  exports.FallOutline = getIcon('fall', outline, getNode(newViewBox, 'M925.9 804l-24-199.2c-.8-6.6-8.9-9.4-13.6-4.7L829 659.5 557.7 388.3c-6.3-6.2-16.4-6.2-22.6 0L433.3 490 156.6 213.3a8.03 8.03 0 0 0-11.3 0l-45 45.2a8.03 8.03 0 0 0 0 11.3L422 591.7c6.2 6.3 16.4 6.3 22.6 0L546.4 490l226.1 226-59.3 59.3a8.01 8.01 0 0 0 4.7 13.6l199.2 24c5.1.7 9.5-3.7 8.8-8.9z'));
  exports.FileDoneOutline = getIcon('file-done', outline, getNode(newViewBox, 'M688 312v-48c0-4.4-3.6-8-8-8H296c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h384c4.4 0 8-3.6 8-8zm-392 88c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H296zm376 116c-119.3 0-216 96.7-216 216s96.7 216 216 216 216-96.7 216-216-96.7-216-216-216zm107.5 323.5C750.8 868.2 712.6 884 672 884s-78.8-15.8-107.5-44.5C535.8 810.8 520 772.6 520 732s15.8-78.8 44.5-107.5C593.2 595.8 631.4 580 672 580s78.8 15.8 107.5 44.5C808.2 653.2 824 691.4 824 732s-15.8 78.8-44.5 107.5zM761 656h-44.3c-2.6 0-5 1.2-6.5 3.3l-63.5 87.8-23.1-31.9a7.92 7.92 0 0 0-6.5-3.3H573c-6.5 0-10.3 7.4-6.5 12.7l73.8 102.1c3.2 4.4 9.7 4.4 12.9 0l114.2-158c3.9-5.3.1-12.7-6.4-12.7zM440 852H208V148h560v344c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V108c0-17.7-14.3-32-32-32H168c-17.7 0-32 14.3-32 32v784c0 17.7 14.3 32 32 32h272c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.FileSyncOutline = getIcon('file-sync', outline, getNode(newViewBox, 'M296 256c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h384c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H296zm192 200v-48c0-4.4-3.6-8-8-8H296c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8zm-48 396H208V148h560v344c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V108c0-17.7-14.3-32-32-32H168c-17.7 0-32 14.3-32 32v784c0 17.7 14.3 32 32 32h272c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm104.1-115.6c1.8-34.5 16.2-66.8 40.8-91.4 26.2-26.2 62-41 99.1-41 37.4 0 72.6 14.6 99.1 41 3.2 3.2 6.3 6.6 9.2 10.1L769.2 673a8 8 0 0 0 3 14.1l93.3 22.5c5 1.2 9.8-2.6 9.9-7.7l.6-95.4a8 8 0 0 0-12.9-6.4l-20.3 15.8C805.4 569.6 748.1 540 684 540c-109.9 0-199.6 86.9-204 195.7-.2 4.5 3.5 8.3 8 8.3h48.1c4.3 0 7.8-3.3 8-7.6zM880 744h-48.1c-4.3 0-7.8 3.3-8 7.6-1.8 34.5-16.2 66.8-40.8 91.4-26.2 26.2-62 41-99.1 41-37.4 0-72.6-14.6-99.1-41-3.2-3.2-6.3-6.6-9.2-10.1l23.1-17.9a8 8 0 0 0-3-14.1l-93.3-22.5c-5-1.2-9.8 2.6-9.9 7.7l-.6 95.4a8 8 0 0 0 12.9 6.4l20.3-15.8C562.6 918.4 619.9 948 684 948c109.9 0 199.6-86.9 204-195.7.2-4.5-3.5-8.3-8-8.3z'));
  exports.FileProtectOutline = getIcon('file-protect', outline, getNode(newViewBox, 'M644.7 669.2a7.92 7.92 0 0 0-6.5-3.3H594c-6.5 0-10.3 7.4-6.5 12.7l73.8 102.1c3.2 4.4 9.7 4.4 12.9 0l114.2-158c3.8-5.3 0-12.7-6.5-12.7h-44.3c-2.6 0-5 1.2-6.5 3.3l-63.5 87.8-22.9-31.9zM688 306v-48c0-4.4-3.6-8-8-8H296c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h384c4.4 0 8-3.6 8-8zm-392 88c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H296zm184 458H208V148h560v296c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V108c0-17.7-14.3-32-32-32H168c-17.7 0-32 14.3-32 32v784c0 17.7 14.3 32 32 32h312c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm402.6-320.8l-192-66.7c-.9-.3-1.7-.4-2.6-.4s-1.8.1-2.6.4l-192 66.7a7.96 7.96 0 0 0-5.4 7.5v251.1c0 2.5 1.1 4.8 3.1 6.3l192 150.2c1.4 1.1 3.2 1.7 4.9 1.7s3.5-.6 4.9-1.7l192-150.2c1.9-1.5 3.1-3.8 3.1-6.3V538.7c0-3.4-2.2-6.4-5.4-7.5zM826 763.7L688 871.6 550 763.7V577l138-48 138 48v186.7z'));
  exports.FileSearchOutline = getIcon('file-search', outline, getNode(newViewBox, 'M688 312v-48c0-4.4-3.6-8-8-8H296c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h384c4.4 0 8-3.6 8-8zm-392 88c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H296zm144 452H208V148h560v344c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V108c0-17.7-14.3-32-32-32H168c-17.7 0-32 14.3-32 32v784c0 17.7 14.3 32 32 32h272c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm445.7 51.5l-93.3-93.3C814.7 780.7 828 743.9 828 704c0-97.2-78.8-176-176-176s-176 78.8-176 176 78.8 176 176 176c35.8 0 69-10.7 96.8-29l94.7 94.7c1.6 1.6 3.6 2.3 5.6 2.3s4.1-.8 5.6-2.3l31-31a7.9 7.9 0 0 0 0-11.2zM652 816c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z'));
  exports.FileJpgOutline = getIcon('file-jpg', outline, getNode(normalViewBox, 'M874.6 301.8L596.8 21.3c-4.5-4.5-9.4-8.3-14.7-11.5-1.4-.8-2.8-1.6-4.3-2.3-.9-.5-1.9-.9-2.8-1.3-9-4-18.9-6.2-29-6.2H201c-39.8 0-73 32.2-73 72v880c0 39.8 33.2 72 73 72h623c39.8 0 71-32.2 71-72V352.5c0-19-7-37.2-20.4-50.7zM583 110.4L783.8 312H583V110.4zM823 952H200V72h311v240c0 39.8 33.2 72 73 72h239v568zM350 696.5c0 24.2-7.5 31.4-21.9 31.4-9 0-18.4-5.8-24.8-18.5L272.9 732c13.4 22.9 32.3 34.2 61.3 34.2 41.6 0 60.8-29.9 60.8-66.2V577h-45v119.5zM501.3 577H437v186h44v-62h21.6c39.1 0 73.1-19.6 73.1-63.6 0-45.8-33.5-60.4-74.4-60.4zm-.8 89H481v-53h18.2c21.5 0 33.4 6.2 33.4 24.9 0 18.1-10.5 28.1-32.1 28.1zm182.5-9v36h30v30.1c-4 2.9-11 4.7-17.7 4.7-34.3 0-50.7-21.4-50.7-58.2 0-36.1 19.7-57.4 47.1-57.4 15.3 0 25 6.2 34 14.4l23.7-28.3c-12.7-12.8-32.1-24.2-59.2-24.2-49.6 0-91.1 35.3-91.1 97 0 62.7 40 95.1 91.5 95.1 25.9 0 49.2-10.2 61.5-22.6V657H683z'));
  exports.FontColorsOutline = getIcon('font-colors', outline, getNode(newViewBox, 'M904 816H120c-4.4 0-8 3.6-8 8v80c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-80c0-4.4-3.6-8-8-8zm-650.3-80h85c4.2 0 8-2.7 9.3-6.8l53.7-166h219.2l53.2 166c1.3 4 5 6.8 9.3 6.8h89.1c1.1 0 2.2-.2 3.2-.5a9.7 9.7 0 0 0 6-12.4L573.6 118.6a9.9 9.9 0 0 0-9.2-6.6H462.1c-4.2 0-7.9 2.6-9.2 6.6L244.5 723.1c-.4 1-.5 2.1-.5 3.2-.1 5.3 4.3 9.7 9.7 9.7zm255.9-516.1h4.1l83.8 263.8H424.9l84.7-263.8z'));
  exports.FontSizeOutline = getIcon('font-size', outline, getNode(newViewBox, 'M920 416H616c-4.4 0-8 3.6-8 8v112c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-56h60v320h-46c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h164c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8h-46V480h60v56c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V424c0-4.4-3.6-8-8-8zM656 296V168c0-4.4-3.6-8-8-8H104c-4.4 0-8 3.6-8 8v128c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-64h168v560h-92c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h264c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-92V232h168v64c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8z'));
  exports.ForkOutline = getIcon('fork', outline, getNode(newViewBox, 'M752 100c-61.8 0-112 50.2-112 112 0 47.7 29.9 88.5 72 104.6v27.6L512 601.4 312 344.2v-27.6c42.1-16.1 72-56.9 72-104.6 0-61.8-50.2-112-112-112s-112 50.2-112 112c0 50.6 33.8 93.5 80 107.3v34.4c0 9.7 3.3 19.3 9.3 27L476 672.3v33.6c-44.2 15-76 56.9-76 106.1 0 61.8 50.2 112 112 112s112-50.2 112-112c0-49.2-31.8-91-76-106.1v-33.6l226.7-291.6c6-7.7 9.3-17.3 9.3-27v-34.4c46.2-13.8 80-56.7 80-107.3 0-61.8-50.2-112-112-112zM224 212a48.01 48.01 0 0 1 96 0 48.01 48.01 0 0 1-96 0zm336 600a48.01 48.01 0 0 1-96 0 48.01 48.01 0 0 1 96 0zm192-552a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'));
  exports.FormOutline = getIcon('form', outline, getNode(newViewBox, 'M904 512h-56c-4.4 0-8 3.6-8 8v320H184V184h320c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V520c0-4.4-3.6-8-8-8z', 'M355.9 534.9L354 653.8c-.1 8.9 7.1 16.2 16 16.2h.4l118-2.9c2-.1 4-.9 5.4-2.3l415.9-415c3.1-3.1 3.1-8.2 0-11.3L785.4 114.3c-1.6-1.6-3.6-2.3-5.7-2.3s-4.1.8-5.7 2.3l-415.8 415a8.3 8.3 0 0 0-2.3 5.6zm63.5 23.6L779.7 199l45.2 45.1-360.5 359.7-45.7 1.1.7-46.4z'));
  exports.FullscreenExitOutline = getIcon('fullscreen-exit', outline, getNode(newViewBox, 'M391 240.9c-.8-6.6-8.9-9.4-13.6-4.7l-43.7 43.7L200 146.3a8.03 8.03 0 0 0-11.3 0l-42.4 42.3a8.03 8.03 0 0 0 0 11.3L280 333.6l-43.9 43.9a8.01 8.01 0 0 0 4.7 13.6L401 410c5.1.6 9.5-3.7 8.9-8.9L391 240.9zm10.1 373.2L240.8 633c-6.6.8-9.4 8.9-4.7 13.6l43.9 43.9L146.3 824a8.03 8.03 0 0 0 0 11.3l42.4 42.3c3.1 3.1 8.2 3.1 11.3 0L333.7 744l43.7 43.7A8.01 8.01 0 0 0 391 783l18.9-160.1c.6-5.1-3.7-9.4-8.8-8.8zm221.8-204.2L783.2 391c6.6-.8 9.4-8.9 4.7-13.6L744 333.6 877.7 200c3.1-3.1 3.1-8.2 0-11.3l-42.4-42.3a8.03 8.03 0 0 0-11.3 0L690.3 279.9l-43.7-43.7a8.01 8.01 0 0 0-13.6 4.7L614.1 401c-.6 5.2 3.7 9.5 8.8 8.9zM744 690.4l43.9-43.9a8.01 8.01 0 0 0-4.7-13.6L623 614c-5.1-.6-9.5 3.7-8.9 8.9L633 783.1c.8 6.6 8.9 9.4 13.6 4.7l43.7-43.7L824 877.7c3.1 3.1 8.2 3.1 11.3 0l42.4-42.3c3.1-3.1 3.1-8.2 0-11.3L744 690.4z'));
  exports.FullscreenOutline = getIcon('fullscreen', outline, getNode(newViewBox, 'M290 236.4l43.9-43.9a8.01 8.01 0 0 0-4.7-13.6L169 160c-5.1-.6-9.5 3.7-8.9 8.9L179 329.1c.8 6.6 8.9 9.4 13.6 4.7l43.7-43.7L370 423.7c3.1 3.1 8.2 3.1 11.3 0l42.4-42.3c3.1-3.1 3.1-8.2 0-11.3L290 236.4zm352.7 187.3c3.1 3.1 8.2 3.1 11.3 0l133.7-133.6 43.7 43.7a8.01 8.01 0 0 0 13.6-4.7L863.9 169c.6-5.1-3.7-9.5-8.9-8.9L694.8 179c-6.6.8-9.4 8.9-4.7 13.6l43.9 43.9L600.3 370a8.03 8.03 0 0 0 0 11.3l42.4 42.4zM845 694.9c-.8-6.6-8.9-9.4-13.6-4.7l-43.7 43.7L654 600.3a8.03 8.03 0 0 0-11.3 0l-42.4 42.3a8.03 8.03 0 0 0 0 11.3L734 787.6l-43.9 43.9a8.01 8.01 0 0 0 4.7 13.6L855 864c5.1.6 9.5-3.7 8.9-8.9L845 694.9zm-463.7-94.6a8.03 8.03 0 0 0-11.3 0L236.3 733.9l-43.7-43.7a8.01 8.01 0 0 0-13.6 4.7L160.1 855c-.6 5.1 3.7 9.5 8.9 8.9L329.2 845c6.6-.8 9.4-8.9 4.7-13.6L290 787.6 423.7 654c3.1-3.1 3.1-8.2 0-11.3l-42.4-42.4z'));
  exports.GatewayOutline = getIcon('gateway', outline, getNode(newViewBox, 'M928 392c8.8 0 16-7.2 16-16V192c0-8.8-7.2-16-16-16H744c-8.8 0-16 7.2-16 16v56H296v-56c0-8.8-7.2-16-16-16H96c-8.8 0-16 7.2-16 16v184c0 8.8 7.2 16 16 16h56v240H96c-8.8 0-16 7.2-16 16v184c0 8.8 7.2 16 16 16h184c8.8 0 16-7.2 16-16v-56h432v56c0 8.8 7.2 16 16 16h184c8.8 0 16-7.2 16-16V648c0-8.8-7.2-16-16-16h-56V392h56zM792 240h88v88h-88v-88zm-648 88v-88h88v88h-88zm88 456h-88v-88h88v88zm648-88v88h-88v-88h88zm-80-64h-56c-8.8 0-16 7.2-16 16v56H296v-56c0-8.8-7.2-16-16-16h-56V392h56c8.8 0 16-7.2 16-16v-56h432v56c0 8.8 7.2 16 16 16h56v240z'));
  exports.DownOutline = getIcon('down', outline, getNode(newViewBox, 'M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z'));
  exports.DragOutline = getIcon('drag', outline, getNode(newViewBox, 'M909.3 506.3L781.7 405.6a7.23 7.23 0 0 0-11.7 5.7V476H548V254h64.8c6 0 9.4-7 5.7-11.7L517.7 114.7a7.14 7.14 0 0 0-11.3 0L405.6 242.3a7.23 7.23 0 0 0 5.7 11.7H476v222H254v-64.8c0-6-7-9.4-11.7-5.7L114.7 506.3a7.14 7.14 0 0 0 0 11.3l127.5 100.8c4.7 3.7 11.7.4 11.7-5.7V548h222v222h-64.8c-6 0-9.4 7-5.7 11.7l100.8 127.5c2.9 3.7 8.5 3.7 11.3 0l100.8-127.5c3.7-4.7.4-11.7-5.7-11.7H548V548h222v64.8c0 6 7 9.4 11.7 5.7l127.5-100.8a7.3 7.3 0 0 0 .1-11.4z'));
  exports.GlobalOutline = getIcon('global', outline, getNode(newViewBox, 'M854.4 800.9c.2-.3.5-.6.7-.9C920.6 722.1 960 621.7 960 512s-39.4-210.1-104.8-288c-.2-.3-.5-.5-.7-.8-1.1-1.3-2.1-2.5-3.2-3.7-.4-.5-.8-.9-1.2-1.4l-4.1-4.7-.1-.1c-1.5-1.7-3.1-3.4-4.6-5.1l-.1-.1c-3.2-3.4-6.4-6.8-9.7-10.1l-.1-.1-4.8-4.8-.3-.3c-1.5-1.5-3-2.9-4.5-4.3-.5-.5-1-1-1.6-1.5-1-1-2-1.9-3-2.8-.3-.3-.7-.6-1-1C736.4 109.2 629.5 64 512 64s-224.4 45.2-304.3 119.2c-.3.3-.7.6-1 1-1 .9-2 1.9-3 2.9-.5.5-1 1-1.6 1.5-1.5 1.4-3 2.9-4.5 4.3l-.3.3-4.8 4.8-.1.1c-3.3 3.3-6.5 6.7-9.7 10.1l-.1.1c-1.6 1.7-3.1 3.4-4.6 5.1l-.1.1c-1.4 1.5-2.8 3.1-4.1 4.7-.4.5-.8.9-1.2 1.4-1.1 1.2-2.1 2.5-3.2 3.7-.2.3-.5.5-.7.8C103.4 301.9 64 402.3 64 512s39.4 210.1 104.8 288c.2.3.5.6.7.9l3.1 3.7c.4.5.8.9 1.2 1.4l4.1 4.7c0 .1.1.1.1.2 1.5 1.7 3 3.4 4.6 5l.1.1c3.2 3.4 6.4 6.8 9.6 10.1l.1.1c1.6 1.6 3.1 3.2 4.7 4.7l.3.3c3.3 3.3 6.7 6.5 10.1 9.6 80.1 74 187 119.2 304.5 119.2s224.4-45.2 304.3-119.2a300 300 0 0 0 10-9.6l.3-.3c1.6-1.6 3.2-3.1 4.7-4.7l.1-.1c3.3-3.3 6.5-6.7 9.6-10.1l.1-.1c1.5-1.7 3.1-3.3 4.6-5 0-.1.1-.1.1-.2 1.4-1.5 2.8-3.1 4.1-4.7.4-.5.8-.9 1.2-1.4a99 99 0 0 0 3.3-3.7zm4.1-142.6c-13.8 32.6-32 62.8-54.2 90.2a444.07 444.07 0 0 0-81.5-55.9c11.6-46.9 18.8-98.4 20.7-152.6H887c-3 40.9-12.6 80.6-28.5 118.3zM887 484H743.5c-1.9-54.2-9.1-105.7-20.7-152.6 29.3-15.6 56.6-34.4 81.5-55.9A373.86 373.86 0 0 1 887 484zM658.3 165.5c39.7 16.8 75.8 40 107.6 69.2a394.72 394.72 0 0 1-59.4 41.8c-15.7-45-35.8-84.1-59.2-115.4 3.7 1.4 7.4 2.9 11 4.4zm-90.6 700.6c-9.2 7.2-18.4 12.7-27.7 16.4V697a389.1 389.1 0 0 1 115.7 26.2c-8.3 24.6-17.9 47.3-29 67.8-17.4 32.4-37.8 58.3-59 75.1zm59-633.1c11 20.6 20.7 43.3 29 67.8A389.1 389.1 0 0 1 540 327V141.6c9.2 3.7 18.5 9.1 27.7 16.4 21.2 16.7 41.6 42.6 59 75zM540 640.9V540h147.5c-1.6 44.2-7.1 87.1-16.3 127.8l-.3 1.2A445.02 445.02 0 0 0 540 640.9zm0-156.9V383.1c45.8-2.8 89.8-12.5 130.9-28.1l.3 1.2c9.2 40.7 14.7 83.5 16.3 127.8H540zm-56 56v100.9c-45.8 2.8-89.8 12.5-130.9 28.1l-.3-1.2c-9.2-40.7-14.7-83.5-16.3-127.8H484zm-147.5-56c1.6-44.2 7.1-87.1 16.3-127.8l.3-1.2c41.1 15.6 85 25.3 130.9 28.1V484H336.5zM484 697v185.4c-9.2-3.7-18.5-9.1-27.7-16.4-21.2-16.7-41.7-42.7-59.1-75.1-11-20.6-20.7-43.3-29-67.8 37.2-14.6 75.9-23.3 115.8-26.1zm0-370a389.1 389.1 0 0 1-115.7-26.2c8.3-24.6 17.9-47.3 29-67.8 17.4-32.4 37.8-58.4 59.1-75.1 9.2-7.2 18.4-12.7 27.7-16.4V327zM365.7 165.5c3.7-1.5 7.3-3 11-4.4-23.4 31.3-43.5 70.4-59.2 115.4-21-12-40.9-26-59.4-41.8 31.8-29.2 67.9-52.4 107.6-69.2zM165.5 365.7c13.8-32.6 32-62.8 54.2-90.2 24.9 21.5 52.2 40.3 81.5 55.9-11.6 46.9-18.8 98.4-20.7 152.6H137c3-40.9 12.6-80.6 28.5-118.3zM137 540h143.5c1.9 54.2 9.1 105.7 20.7 152.6a444.07 444.07 0 0 0-81.5 55.9A373.86 373.86 0 0 1 137 540zm228.7 318.5c-39.7-16.8-75.8-40-107.6-69.2 18.5-15.8 38.4-29.7 59.4-41.8 15.7 45 35.8 84.1 59.2 115.4-3.7-1.4-7.4-2.9-11-4.4zm292.6 0c-3.7 1.5-7.3 3-11 4.4 23.4-31.3 43.5-70.4 59.2-115.4 21 12 40.9 26 59.4 41.8a373.81 373.81 0 0 1-107.6 69.2z'));
  exports.GooglePlusOutline = getIcon('google-plus', outline, getNode(newViewBox, 'M879.5 470.4c-.3-27-.4-54.2-.5-81.3h-80.8c-.3 27-.5 54.1-.7 81.3-27.2.1-54.2.3-81.2.6v80.9c27 .3 54.2.5 81.2.8.3 27 .3 54.1.5 81.1h80.9c.1-27 .3-54.1.5-81.3 27.2-.3 54.2-.4 81.2-.7v-80.9c-26.9-.2-54.1-.2-81.1-.5zm-530 .4c-.1 32.3 0 64.7.1 97 54.2 1.8 108.5 1 162.7 1.8-23.9 120.3-187.4 159.3-273.9 80.7-89-68.9-84.8-220 7.7-284 64.7-51.6 156.6-38.9 221.3 5.8 25.4-23.5 49.2-48.7 72.1-74.7-53.8-42.9-119.8-73.5-190-70.3-146.6-4.9-281.3 123.5-283.7 270.2-9.4 119.9 69.4 237.4 180.6 279.8 110.8 42.7 252.9 13.6 323.7-86 46.7-62.9 56.8-143.9 51.3-220-90.7-.7-181.3-.6-271.9-.3z'));
  exports.GoogleOutline = getIcon('google', outline, getNode(newViewBox, 'M881 442.4H519.7v148.5h206.4c-8.9 48-35.9 88.6-76.6 115.8-34.4 23-78.3 36.6-129.9 36.6-99.9 0-184.4-67.5-214.6-158.2-7.6-23-12-47.6-12-72.9s4.4-49.9 12-72.9c30.3-90.6 114.8-158.1 214.7-158.1 56.3 0 106.8 19.4 146.6 57.4l110-110.1c-66.5-62-153.2-100-256.6-100-149.9 0-279.6 86-342.7 211.4-26 51.8-40.8 110.4-40.8 172.4S151 632.8 177 684.6C240.1 810 369.8 896 519.7 896c103.6 0 190.4-34.4 253.8-93 72.5-66.8 114.4-165.2 114.4-282.1 0-27.2-2.4-53.3-6.9-78.5z'));
  exports.HeatMapOutline = getIcon('heat-map', outline, getNode(newViewBox, 'M955.7 856l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zm-790.4-23.9L512 231.9 858.7 832H165.3zm319-474.1l-228 394c-12.3 21.3 3.1 48 27.7 48h455.8c24.7 0 40.1-26.7 27.7-48L539.7 358c-6.2-10.7-17-16-27.7-16-10.8 0-21.6 5.3-27.7 16zm214 386H325.7L512 422l186.3 322zm-214-194.1l-57 98.4C415 669.5 430.4 696 455 696h114c24.6 0 39.9-26.5 27.7-47.7l-57-98.4c-6.1-10.6-16.9-15.9-27.7-15.9s-21.5 5.3-27.7 15.9zm57.1 98.4h-58.7l29.4-50.7 29.3 50.7z'));
  exports.GoldOutline = getIcon('gold', outline, getNode(newViewBox, 'M342 472h342c.4 0 .9 0 1.3-.1 4.4-.7 7.3-4.8 6.6-9.2l-40.2-248c-.6-3.9-4-6.7-7.9-6.7H382.2c-3.9 0-7.3 2.8-7.9 6.7l-40.2 248c-.1.4-.1.9-.1 1.3 0 4.4 3.6 8 8 8zm91.2-196h159.5l20.7 128h-201l20.8-128zm2.5 282.7c-.6-3.9-4-6.7-7.9-6.7H166.2c-3.9 0-7.3 2.8-7.9 6.7l-40.2 248c-.1.4-.1.9-.1 1.3 0 4.4 3.6 8 8 8h342c.4 0 .9 0 1.3-.1 4.4-.7 7.3-4.8 6.6-9.2l-40.2-248zM196.5 748l20.7-128h159.5l20.7 128H196.5zm709.4 58.7l-40.2-248c-.6-3.9-4-6.7-7.9-6.7H596.2c-3.9 0-7.3 2.8-7.9 6.7l-40.2 248c-.1.4-.1.9-.1 1.3 0 4.4 3.6 8 8 8h342c.4 0 .9 0 1.3-.1 4.3-.7 7.3-4.8 6.6-9.2zM626.5 748l20.7-128h159.5l20.7 128H626.5z'));
  exports.HistoryOutline = getIcon('history', outline, getNode(newViewBox, 'M536.1 273H488c-4.4 0-8 3.6-8 8v275.3c0 2.6 1.2 5 3.3 6.5l165.3 120.7c3.6 2.6 8.6 1.9 11.2-1.7l28.6-39c2.7-3.7 1.9-8.7-1.7-11.2L544.1 528.5V281c0-4.4-3.6-8-8-8zm219.8 75.2l156.8 38.3c5 1.2 9.9-2.6 9.9-7.7l.8-161.5c0-6.7-7.7-10.5-12.9-6.3L752.9 334.1a8 8 0 0 0 3 14.1zm167.7 301.1l-56.7-19.5a8 8 0 0 0-10.1 4.8c-1.9 5.1-3.9 10.1-6 15.1-17.8 42.1-43.3 80-75.9 112.5a353 353 0 0 1-112.5 75.9 352.18 352.18 0 0 1-137.7 27.8c-47.8 0-94.1-9.3-137.7-27.8a353 353 0 0 1-112.5-75.9c-32.5-32.5-58-70.4-75.9-112.5A353.44 353.44 0 0 1 171 512c0-47.8 9.3-94.2 27.8-137.8 17.8-42.1 43.3-80 75.9-112.5a353 353 0 0 1 112.5-75.9C430.6 167.3 477 158 524.8 158s94.1 9.3 137.7 27.8A353 353 0 0 1 775 261.7c10.2 10.3 19.8 21 28.6 32.3l59.8-46.8C784.7 146.6 662.2 81.9 524.6 82 285 82.1 92.6 276.7 95 516.4 97.4 751.9 288.9 942 524.8 942c185.5 0 343.5-117.6 403.7-282.3 1.5-4.2-.7-8.9-4.9-10.4z'));
  exports.IeOutline = getIcon('ie', outline, getNode(newViewBox, 'M852.6 367.6c16.3-36.9 32.1-90.7 32.1-131.8 0-109.1-119.5-147.6-314.5-57.9-161.4-10.8-316.8 110.5-355.6 279.7 46.3-52.3 117.4-123.4 183-151.7C316.1 378.3 246.7 470 194 565.6c-31.1 56.9-66 148.8-66 217.5 0 147.9 139.3 129.8 270.4 63 47.1 23.1 99.8 23.4 152.5 23.4 145.7 0 276.4-81.4 325.2-219H694.9c-78.8 132.9-295.2 79.5-295.2-71.2h493.2c9.6-65.4-2.5-143.6-40.3-211.7zM224.8 648.3c26.6 76.7 80.6 143.8 150.4 185-133.1 73.4-259.9 43.6-150.4-185zm174-163.3c3-82.7 75.4-142.3 156-142.3 80.1 0 153 59.6 156 142.3h-312zm276.8-281.4c32.1-15.4 72.8-33 108.8-33 47.1 0 81.4 32.6 81.4 80.6 0 30-11.1 73.5-21.9 101.8-39.3-63.5-98.9-122.4-168.3-149.4z'));
  exports.InboxOutline = getIcon('inbox', outline, getNode(normalViewBox, 'M885.2 446.3l-.2-.8-112.2-285.1c-5-16.1-19.9-27.2-36.8-27.2H281.2c-17 0-32.1 11.3-36.9 27.6L139.4 443l-.3.7-.2.8c-1.3 4.9-1.7 9.9-1 14.8-.1 1.6-.2 3.2-.2 4.8V830a60.9 60.9 0 0 0 60.8 60.8h627.2c33.5 0 60.8-27.3 60.9-60.8V464.1c0-1.3 0-2.6-.1-3.7.4-4.9 0-9.6-1.3-14.1zm-295.8-43l-.3 15.7c-.8 44.9-31.8 75.1-77.1 75.1-22.1 0-41.1-7.1-54.8-20.6S436 441.2 435.6 419l-.3-15.7H229.5L309 210h399.2l81.7 193.3H589.4zm-375 76.8h157.3c24.3 57.1 76 90.8 140.4 90.8 33.7 0 65-9.4 90.3-27.2 22.2-15.6 39.5-37.4 50.7-63.6h156.5V814H214.4V480.1z'));
  exports.ImportOutline = getIcon('import', outline, getNode(newViewBox, 'M888.3 757.4h-53.8c-4.2 0-7.7 3.5-7.7 7.7v61.8H197.1V197.1h629.8v61.8c0 4.2 3.5 7.7 7.7 7.7h53.8c4.2 0 7.7-3.4 7.7-7.7V158.7c0-17-13.7-30.7-30.7-30.7H158.7c-17 0-30.7 13.7-30.7 30.7v706.6c0 17 13.7 30.7 30.7 30.7h706.6c17 0 30.7-13.7 30.7-30.7V765.1c0-4.3-3.5-7.7-7.7-7.7zM902 476H588v-76c0-6.7-7.8-10.5-13-6.3l-141.9 112a8 8 0 0 0 0 12.6l141.9 112c5.3 4.2 13 .4 13-6.3v-76h314c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.InfoOutline = getIcon('info', outline, getNode(newViewBox, 'M448 224a64 64 0 1 0 128 0 64 64 0 1 0-128 0zm96 168h-64c-4.4 0-8 3.6-8 8v464c0 4.4 3.6 8 8 8h64c4.4 0 8-3.6 8-8V400c0-4.4-3.6-8-8-8z'));
  exports.ItalicOutline = getIcon('italic', outline, getNode(newViewBox, 'M798 160H366c-4.4 0-8 3.6-8 8v64c0 4.4 3.6 8 8 8h181.2l-156 544H229c-4.4 0-8 3.6-8 8v64c0 4.4 3.6 8 8 8h432c4.4 0 8-3.6 8-8v-64c0-4.4-3.6-8-8-8H474.4l156-544H798c4.4 0 8-3.6 8-8v-64c0-4.4-3.6-8-8-8z'));
  exports.IssuesCloseOutline = getIcon('issues-close', outline, getNode(newViewBox, 'M464 688a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm72-112c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48zm400-188h-59.3c-2.6 0-5 1.2-6.5 3.3L763.7 538.1l-49.9-68.8a7.92 7.92 0 0 0-6.5-3.3H648c-6.5 0-10.3 7.4-6.5 12.7l109.2 150.7a16.1 16.1 0 0 0 26 0l165.8-228.7c3.8-5.3 0-12.7-6.5-12.7zm-44 306h-64.2c-5.5 0-10.6 2.9-13.6 7.5a352.2 352.2 0 0 1-49.8 62.2A355.92 355.92 0 0 1 651.1 840a355 355 0 0 1-138.7 27.9c-48.1 0-94.8-9.4-138.7-27.9a355.92 355.92 0 0 1-113.3-76.3A353.06 353.06 0 0 1 184 650.5c-18.6-43.8-28-90.5-28-138.5s9.4-94.7 28-138.5c17.9-42.4 43.6-80.5 76.4-113.2 32.8-32.7 70.9-58.4 113.3-76.3a355 355 0 0 1 138.7-27.9c48.1 0 94.8 9.4 138.7 27.9 42.4 17.9 80.5 43.6 113.3 76.3 19 19 35.6 39.8 49.8 62.2 2.9 4.7 8.1 7.5 13.6 7.5H892c6 0 9.8-6.3 7.2-11.6C828.8 178.5 684.7 82 517.7 80 278.9 77.2 80.5 272.5 80 511.2 79.5 750.1 273.3 944 512.4 944c169.2 0 315.6-97 386.7-238.4A8 8 0 0 0 892 694z'));
  exports.KeyOutline = getIcon('key', outline, getNode(newViewBox, 'M608 112c-167.9 0-304 136.1-304 304 0 70.3 23.9 135 63.9 186.5l-41.1 41.1-62.3-62.3a8.15 8.15 0 0 0-11.4 0l-39.8 39.8a8.15 8.15 0 0 0 0 11.4l62.3 62.3-44.9 44.9-62.3-62.3a8.15 8.15 0 0 0-11.4 0l-39.8 39.8a8.15 8.15 0 0 0 0 11.4l62.3 62.3-65.3 65.3a8.03 8.03 0 0 0 0 11.3l42.3 42.3c3.1 3.1 8.2 3.1 11.3 0l253.6-253.6A304.06 304.06 0 0 0 608 720c167.9 0 304-136.1 304-304S775.9 112 608 112zm161.2 465.2C726.2 620.3 668.9 644 608 644c-60.9 0-118.2-23.7-161.2-66.8-43.1-43-66.8-100.3-66.8-161.2 0-60.9 23.7-118.2 66.8-161.2 43-43.1 100.3-66.8 161.2-66.8 60.9 0 118.2 23.7 161.2 66.8 43.1 43 66.8 100.3 66.8 161.2 0 60.9-23.7 118.2-66.8 161.2z'));
  exports.LaptopOutline = getIcon('laptop', outline, getNode(newViewBox, 'M956.9 845.1L896.4 632V168c0-17.7-14.3-32-32-32h-704c-17.7 0-32 14.3-32 32v464L67.9 845.1C60.4 866 75.8 888 98 888h828.8c22.2 0 37.6-22 30.1-42.9zM200.4 208h624v395h-624V208zm228.3 608l8.1-37h150.3l8.1 37H428.7zm224 0l-19.1-86.7c-.8-3.7-4.1-6.3-7.8-6.3H398.2c-3.8 0-7 2.6-7.8 6.3L371.3 816H151l42.3-149h638.2l42.3 149H652.7z'));
  exports.LeftOutline = getIcon('left', outline, getNode(newViewBox, 'M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 0 0 0 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z'));
  exports.LinkOutline = getIcon('link', outline, getNode(newViewBox, 'M574 665.4a8.03 8.03 0 0 0-11.3 0L446.5 781.6c-53.8 53.8-144.6 59.5-204 0-59.5-59.5-53.8-150.2 0-204l116.2-116.2c3.1-3.1 3.1-8.2 0-11.3l-39.8-39.8a8.03 8.03 0 0 0-11.3 0L191.4 526.5c-84.6 84.6-84.6 221.5 0 306s221.5 84.6 306 0l116.2-116.2c3.1-3.1 3.1-8.2 0-11.3L574 665.4zm258.6-474c-84.6-84.6-221.5-84.6-306 0L410.3 307.6a8.03 8.03 0 0 0 0 11.3l39.7 39.7c3.1 3.1 8.2 3.1 11.3 0l116.2-116.2c53.8-53.8 144.6-59.5 204 0 59.5 59.5 53.8 150.2 0 204L665.3 562.6a8.03 8.03 0 0 0 0 11.3l39.8 39.8c3.1 3.1 8.2 3.1 11.3 0l116.2-116.2c84.5-84.6 84.5-221.5 0-306.1zM610.1 372.3a8.03 8.03 0 0 0-11.3 0L372.3 598.7a8.03 8.03 0 0 0 0 11.3l39.6 39.6c3.1 3.1 8.2 3.1 11.3 0l226.4-226.4c3.1-3.1 3.1-8.2 0-11.3l-39.5-39.6z'));
  exports.LineChartOutline = getIcon('line-chart', outline, getNode(newViewBox, 'M888 792H200V168c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v688c0 4.4 3.6 8 8 8h752c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM305.8 637.7c3.1 3.1 8.1 3.1 11.3 0l138.3-137.6L583 628.5c3.1 3.1 8.2 3.1 11.3 0l275.4-275.3c3.1-3.1 3.1-8.2 0-11.3l-39.6-39.6a8.03 8.03 0 0 0-11.3 0l-230 229.9L461.4 404a8.03 8.03 0 0 0-11.3 0L266.3 586.7a8.03 8.03 0 0 0 0 11.3l39.5 39.7z'));
  exports.LineHeightOutline = getIcon('line-height', outline, getNode(newViewBox, 'M648 160H104c-4.4 0-8 3.6-8 8v128c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-64h168v560h-92c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h264c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-92V232h168v64c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V168c0-4.4-3.6-8-8-8zm272.8 546H856V318h64.8c6 0 9.4-7 5.7-11.7L825.7 178.7a7.14 7.14 0 0 0-11.3 0L713.6 306.3a7.23 7.23 0 0 0 5.7 11.7H784v388h-64.8c-6 0-9.4 7-5.7 11.7l100.8 127.5c2.9 3.7 8.5 3.7 11.3 0l100.8-127.5a7.2 7.2 0 0 0-5.6-11.7z'));
  exports.LineOutline = getIcon('line', outline, getNode(newViewBox, 'M904 476H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.Loading3QuartersOutline = getIcon('loading-3-quarters', outline, getNode(normalViewBox, 'M512 1024c-69.1 0-136.2-13.5-199.3-40.2C251.7 958 197 921 150 874c-47-47-84-101.7-109.8-162.7C13.5 648.2 0 581.1 0 512c0-19.9 16.1-36 36-36s36 16.1 36 36c0 59.4 11.6 117 34.6 171.3 22.2 52.4 53.9 99.5 94.3 139.9 40.4 40.4 87.5 72.2 139.9 94.3C395 940.4 452.6 952 512 952c59.4 0 117-11.6 171.3-34.6 52.4-22.2 99.5-53.9 139.9-94.3 40.4-40.4 72.2-87.5 94.3-139.9C940.4 629 952 571.4 952 512c0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 0 0-94.3-139.9 437.71 437.71 0 0 0-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.2C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3s-13.5 136.2-40.2 199.3C958 772.3 921 827 874 874c-47 47-101.8 83.9-162.7 109.7-63.1 26.8-130.2 40.3-199.3 40.3z'));
  exports.LoadingOutline = getIcon('loading', outline, getNode(normalViewBox, 'M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 0 0-94.3-139.9 437.71 437.71 0 0 0-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z'));
  exports.LoginOutline = getIcon('login', outline, getNode(newViewBox, 'M521.7 82c-152.5-.4-286.7 78.5-363.4 197.7-3.4 5.3.4 12.3 6.7 12.3h70.3c4.8 0 9.3-2.1 12.3-5.8 7-8.5 14.5-16.7 22.4-24.5 32.6-32.5 70.5-58.1 112.7-75.9 43.6-18.4 90-27.8 137.9-27.8 47.9 0 94.3 9.3 137.9 27.8 42.2 17.8 80.1 43.4 112.7 75.9 32.6 32.5 58.1 70.4 76 112.5C865.7 417.8 875 464.1 875 512c0 47.9-9.4 94.2-27.8 137.8-17.8 42.1-43.4 80-76 112.5s-70.5 58.1-112.7 75.9A352.8 352.8 0 0 1 520.6 866c-47.9 0-94.3-9.4-137.9-27.8A353.84 353.84 0 0 1 270 762.3c-7.9-7.9-15.3-16.1-22.4-24.5-3-3.7-7.6-5.8-12.3-5.8H165c-6.3 0-10.2 7-6.7 12.3C234.9 863.2 368.5 942 520.6 942c236.2 0 428-190.1 430.4-425.6C953.4 277.1 761.3 82.6 521.7 82zM395.02 624v-76h-314c-4.4 0-8-3.6-8-8v-56c0-4.4 3.6-8 8-8h314v-76c0-6.7 7.8-10.5 13-6.3l141.9 112a8 8 0 0 1 0 12.6l-141.9 112c-5.2 4.1-13 .4-13-6.3z'));
  exports.LogoutOutline = getIcon('logout', outline, getNode(newViewBox, 'M868 732h-70.3c-4.8 0-9.3 2.1-12.3 5.8-7 8.5-14.5 16.7-22.4 24.5a353.84 353.84 0 0 1-112.7 75.9A352.8 352.8 0 0 1 512.4 866c-47.9 0-94.3-9.4-137.9-27.8a353.84 353.84 0 0 1-112.7-75.9 353.28 353.28 0 0 1-76-112.5C167.3 606.2 158 559.9 158 512s9.4-94.2 27.8-137.8c17.8-42.1 43.4-80 76-112.5s70.5-58.1 112.7-75.9c43.6-18.4 90-27.8 137.9-27.8 47.9 0 94.3 9.3 137.9 27.8 42.2 17.8 80.1 43.4 112.7 75.9 7.9 7.9 15.3 16.1 22.4 24.5 3 3.7 7.6 5.8 12.3 5.8H868c6.3 0 10.2-7 6.7-12.3C798 160.5 663.8 81.6 511.3 82 271.7 82.6 79.6 277.1 82 516.4 84.4 751.9 276.2 942 512.4 942c152.1 0 285.7-78.8 362.3-197.7 3.4-5.3-.4-12.3-6.7-12.3zm88.9-226.3L815 393.7c-5.3-4.2-13-.4-13 6.3v76H488c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h314v76c0 6.7 7.8 10.5 13 6.3l141.9-112a8 8 0 0 0 0-12.6z'));
  exports.ManOutline = getIcon('man', outline, getNode(newViewBox, 'M874 120H622c-3.3 0-6 2.7-6 6v56c0 3.3 2.7 6 6 6h160.4L583.1 387.3c-50-38.5-111-59.3-175.1-59.3-76.9 0-149.3 30-203.6 84.4S120 539.1 120 616s30 149.3 84.4 203.6C258.7 874 331.1 904 408 904s149.3-30 203.6-84.4C666 765.3 696 692.9 696 616c0-64.1-20.8-124.9-59.2-174.9L836 241.9V402c0 3.3 2.7 6 6 6h56c3.3 0 6-2.7 6-6V150c0-16.5-13.5-30-30-30zM408 828c-116.9 0-212-95.1-212-212s95.1-212 212-212 212 95.1 212 212-95.1 212-212 212z'));
  exports.MediumOutline = getIcon('medium', outline, getNode(newViewBox, 'M834.7 279.8l61.3-58.9V208H683.7L532.4 586.4 360.3 208H137.7v12.9l71.6 86.6c7 6.4 10.6 15.8 9.7 25.2V673c2.2 12.3-1.7 24.8-10.3 33.7L128 805v12.7h228.6v-12.9l-80.6-98a39.99 39.99 0 0 1-11.1-33.7V378.7l200.7 439.2h23.3l172.6-439.2v349.9c0 9.2 0 11.1-6 17.2l-62.1 60.3V819h301.2v-12.9l-59.9-58.9c-5.2-4-7.9-10.7-6.8-17.2V297a18.1 18.1 0 0 1 6.8-17.2z'));
  exports.MediumWorkmarkOutline = getIcon('medium-workmark', outline, getNode(normalViewBox, 'M517.2 590.55c0 3.55 0 4.36 2.4 6.55l13.43 13.25v.57h-59.57v-25.47a41.44 41.44 0 0 1-39.5 27.65c-30.61 0-52.84-24.25-52.84-68.87 0-41.8 23.99-69.69 57.65-69.69a35.15 35.15 0 0 1 34.61 21.67v-56.19a6.99 6.99 0 0 0-2.71-6.79l-12.8-12.45v-.56l59.33-7.04v177.37zm-43.74-8.09v-83.83a22.2 22.2 0 0 0-17.74-8.4c-14.48 0-28.47 13.25-28.47 52.62 0 36.86 12.07 49.88 27.1 49.88a23.91 23.91 0 0 0 19.11-10.27zm83.23 28.46V497.74a7.65 7.65 0 0 0-2.4-6.79l-13.19-13.74v-.57h59.56v114.8c0 3.55 0 4.36 2.4 6.54l13.12 12.45v.57l-59.49-.08zm-2.16-175.67c0-13.4 10.74-24.25 23.99-24.25 13.25 0 23.98 10.86 23.98 24.25 0 13.4-10.73 24.25-23.98 24.25s-23.99-10.85-23.99-24.25zm206.83 155.06c0 3.55 0 4.6 2.4 6.79l13.43 13.25v.57h-59.88V581.9a43.4 43.4 0 0 1-41.01 31.2c-26.55 0-40.78-19.56-40.78-56.59 0-17.86 0-37.43.56-59.41a6.91 6.91 0 0 0-2.4-6.55L620.5 477.2v-.57h59.09v73.81c0 24.25 3.51 40.42 18.54 40.42a23.96 23.96 0 0 0 19.35-12.2v-80.85a7.65 7.65 0 0 0-2.4-6.79l-13.27-13.82v-.57h59.56V590.3zm202.76 20.6c0-4.36.8-59.97.8-72.75 0-24.25-3.76-40.98-20.63-40.98a26.7 26.7 0 0 0-21.19 11.64 99.68 99.68 0 0 1 2.4 23.04c0 16.81-.56 38.23-.8 59.66a6.91 6.91 0 0 0 2.4 6.55l13.43 12.45v.56h-60.12c0-4.04.8-59.98.8-72.76 0-24.65-3.76-40.98-20.39-40.98-8.2.3-15.68 4.8-19.83 11.96v82.46c0 3.56 0 4.37 2.4 6.55l13.11 12.45v.56h-59.48V498.15a7.65 7.65 0 0 0-2.4-6.8l-13.19-14.14v-.57H841v28.78c5.53-19 23.13-31.76 42.7-30.96 19.82 0 33.26 11.16 38.93 32.34a46.41 46.41 0 0 1 44.77-32.34c26.55 0 41.58 19.8 41.58 57.23 0 17.87-.56 38.24-.8 59.66a6.5 6.5 0 0 0 2.72 6.55l13.11 12.45v.57h-59.88zM215.87 593.3l17.66 17.05v.57h-89.62v-.57l17.99-17.05a6.91 6.91 0 0 0 2.4-6.55V477.69c0-4.6 0-10.83.8-16.16L104.66 613.1h-.72l-62.6-139.45c-1.37-3.47-1.77-3.72-2.65-6.06v91.43a32.08 32.08 0 0 0 2.96 17.87l25.19 33.46v.57H0v-.57l25.18-33.55a32.16 32.16 0 0 0 2.96-17.78V457.97A19.71 19.71 0 0 0 24 444.15L6.16 420.78v-.56h63.96l53.56 118.1 47.17-118.1h62.6v.56l-17.58 19.8a6.99 6.99 0 0 0-2.72 6.8v139.37a6.5 6.5 0 0 0 2.72 6.55zm70.11-54.65v.56c0 34.6 17.67 48.5 38.38 48.5a43.5 43.5 0 0 0 40.77-24.97h.56c-7.2 34.2-28.14 50.36-59.48 50.36-33.82 0-65.72-20.61-65.72-68.39 0-50.2 31.98-70.25 67.32-70.25 28.46 0 58.76 13.58 58.76 57.24v6.95h-80.59zm0-6.95h39.42v-7.04c0-35.57-7.28-45.03-18.23-45.03-13.27 0-21.35 14.15-21.35 52.07h.16z'));
  exports.MenuUnfoldOutline = getIcon('menu-unfold', outline, getNode(newViewBox, 'M408 442h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm-8 204c0 4.4 3.6 8 8 8h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56zm504-486H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 632H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM142.4 642.1L298.7 519a8.84 8.84 0 0 0 0-13.9L142.4 381.9c-5.8-4.6-14.4-.5-14.4 6.9v246.3a8.9 8.9 0 0 0 14.4 7z'));
  exports.MenuFoldOutline = getIcon('menu-fold', outline, getNode(newViewBox, 'M408 442h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm-8 204c0 4.4 3.6 8 8 8h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56zm504-486H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 632H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM115.4 518.9L271.7 642c5.8 4.6 14.4.5 14.4-6.9V388.9c0-7.4-8.5-11.5-14.4-6.9L115.4 505.1a8.74 8.74 0 0 0 0 13.8z'));
  exports.MenuOutline = getIcon('menu', outline, getNode(newViewBox, 'M904 160H120c-4.4 0-8 3.6-8 8v64c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-64c0-4.4-3.6-8-8-8zm0 624H120c-4.4 0-8 3.6-8 8v64c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-64c0-4.4-3.6-8-8-8zm0-312H120c-4.4 0-8 3.6-8 8v64c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-64c0-4.4-3.6-8-8-8z'));
  exports.MinusOutline = getIcon('minus', outline, getNode(newViewBox, 'M872 474H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h720c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z'));
  exports.MonitorOutline = getIcon('monitor', outline, getNode(newViewBox, 'M692.8 412.7l.2-.2-34.6-44.3a7.97 7.97 0 0 0-11.2-1.4l-50.4 39.3-70.5-90.1a7.97 7.97 0 0 0-11.2-1.4l-37.9 29.7a7.97 7.97 0 0 0-1.4 11.2l70.5 90.2-.2.1 34.6 44.3c2.7 3.5 7.7 4.1 11.2 1.4l50.4-39.3 64.1 82c2.7 3.5 7.7 4.1 11.2 1.4l37.9-29.6c3.5-2.7 4.1-7.7 1.4-11.2l-64.1-82.1zM608 112c-167.9 0-304 136.1-304 304 0 70.3 23.9 135 63.9 186.5L114.3 856.1a8.03 8.03 0 0 0 0 11.3l42.3 42.3c3.1 3.1 8.2 3.1 11.3 0l253.6-253.6C473 696.1 537.7 720 608 720c167.9 0 304-136.1 304-304S775.9 112 608 112zm161.2 465.2C726.2 620.3 668.9 644 608 644s-118.2-23.7-161.2-66.8C403.7 534.2 380 476.9 380 416s23.7-118.2 66.8-161.2c43-43.1 100.3-66.8 161.2-66.8s118.2 23.7 161.2 66.8c43.1 43 66.8 100.3 66.8 161.2s-23.7 118.2-66.8 161.2z'));
  exports.MoreOutline = getIcon('more', outline, getNode(newViewBox, 'M456 231a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm0 280a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm0 280a56 56 0 1 0 112 0 56 56 0 1 0-112 0z'));
  exports.OrderedListOutline = getIcon('ordered-list', outline, getNode(newViewBox, 'M920 760H336c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-568H336c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H336c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM216 712H100c-2.2 0-4 1.8-4 4v34c0 2.2 1.8 4 4 4h72.4v20.5h-35.7c-2.2 0-4 1.8-4 4v34c0 2.2 1.8 4 4 4h35.7V838H100c-2.2 0-4 1.8-4 4v34c0 2.2 1.8 4 4 4h116c2.2 0 4-1.8 4-4V716c0-2.2-1.8-4-4-4zM100 188h38v120c0 2.2 1.8 4 4 4h40c2.2 0 4-1.8 4-4V152c0-4.4-3.6-8-8-8h-78c-2.2 0-4 1.8-4 4v36c0 2.2 1.8 4 4 4zm116 240H100c-2.2 0-4 1.8-4 4v36c0 2.2 1.8 4 4 4h68.4l-70.3 77.7a8.3 8.3 0 0 0-2.1 5.4V592c0 2.2 1.8 4 4 4h116c2.2 0 4-1.8 4-4v-36c0-2.2-1.8-4-4-4h-68.4l70.3-77.7a8.3 8.3 0 0 0 2.1-5.4V432c0-2.2-1.8-4-4-4z'));
  exports.NumberOutline = getIcon('number', outline, getNode(newViewBox, 'M872 394c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8H708V152c0-4.4-3.6-8-8-8h-64c-4.4 0-8 3.6-8 8v166H400V152c0-4.4-3.6-8-8-8h-64c-4.4 0-8 3.6-8 8v166H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h168v236H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h168v166c0 4.4 3.6 8 8 8h64c4.4 0 8-3.6 8-8V706h228v166c0 4.4 3.6 8 8 8h64c4.4 0 8-3.6 8-8V706h164c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8H708V394h164zM628 630H400V394h228v236z'));
  exports.PauseOutline = getIcon('pause', outline, getNode(newViewBox, 'M304 176h80v672h-80zm408 0h-64c-4.4 0-8 3.6-8 8v656c0 4.4 3.6 8 8 8h64c4.4 0 8-3.6 8-8V184c0-4.4-3.6-8-8-8z'));
  exports.PercentageOutline = getIcon('percentage', outline, getNode(newViewBox, 'M855.7 210.8l-42.4-42.4a8.03 8.03 0 0 0-11.3 0L168.3 801.9a8.03 8.03 0 0 0 0 11.3l42.4 42.4c3.1 3.1 8.2 3.1 11.3 0L855.6 222c3.2-3 3.2-8.1.1-11.2zM304 448c79.4 0 144-64.6 144-144s-64.6-144-144-144-144 64.6-144 144 64.6 144 144 144zm0-216c39.7 0 72 32.3 72 72s-32.3 72-72 72-72-32.3-72-72 32.3-72 72-72zm416 344c-79.4 0-144 64.6-144 144s64.6 144 144 144 144-64.6 144-144-64.6-144-144-144zm0 216c-39.7 0-72-32.3-72-72s32.3-72 72-72 72 32.3 72 72-32.3 72-72 72z'));
  exports.PaperClipOutline = getIcon('paper-clip', outline, getNode(newViewBox, 'M779.3 196.6c-94.2-94.2-247.6-94.2-341.7 0l-261 260.8c-1.7 1.7-2.6 4-2.6 6.4s.9 4.7 2.6 6.4l36.9 36.9a9 9 0 0 0 12.7 0l261-260.8c32.4-32.4 75.5-50.2 121.3-50.2s88.9 17.8 121.2 50.2c32.4 32.4 50.2 75.5 50.2 121.2 0 45.8-17.8 88.8-50.2 121.2l-266 265.9-43.1 43.1c-40.3 40.3-105.8 40.3-146.1 0-19.5-19.5-30.2-45.4-30.2-73s10.7-53.5 30.2-73l263.9-263.8c6.7-6.6 15.5-10.3 24.9-10.3h.1c9.4 0 18.1 3.7 24.7 10.3 6.7 6.7 10.3 15.5 10.3 24.9 0 9.3-3.7 18.1-10.3 24.7L372.4 653c-1.7 1.7-2.6 4-2.6 6.4s.9 4.7 2.6 6.4l36.9 36.9a9 9 0 0 0 12.7 0l215.6-215.6c19.9-19.9 30.8-46.3 30.8-74.4s-11-54.6-30.8-74.4c-41.1-41.1-107.9-41-149 0L463 364 224.8 602.1A172.22 172.22 0 0 0 174 724.8c0 46.3 18.1 89.8 50.8 122.5 33.9 33.8 78.3 50.7 122.7 50.7 44.4 0 88.8-16.9 122.6-50.7l309.2-309C824.8 492.7 850 432 850 367.5c.1-64.6-25.1-125.3-70.7-170.9z'));
  exports.PicCenterOutline = getIcon('pic-center', outline, getNode(newViewBox, 'M952 792H72c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h880c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-632H72c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h880c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM848 660c8.8 0 16-7.2 16-16V380c0-8.8-7.2-16-16-16H176c-8.8 0-16 7.2-16 16v264c0 8.8 7.2 16 16 16h672zM232 436h560v152H232V436z'));
  exports.PicLeftOutline = getIcon('pic-left', outline, getNode(newViewBox, 'M952 792H72c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h880c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-632H72c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h880c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM608 660c8.8 0 16-7.2 16-16V380c0-8.8-7.2-16-16-16H96c-8.8 0-16 7.2-16 16v264c0 8.8 7.2 16 16 16h512zM152 436h400v152H152V436zm552 210c0 4.4 3.6 8 8 8h224c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H712c-4.4 0-8 3.6-8 8v56zm8-204h224c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H712c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8z'));
  exports.PlusOutline = getIcon('plus', outline, getNode(newViewBox, 'M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z', 'M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z'));
  exports.PicRightOutline = getIcon('pic-right', outline, getNode(newViewBox, 'M952 792H72c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h880c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-632H72c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h880c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-24 500c8.8 0 16-7.2 16-16V380c0-8.8-7.2-16-16-16H416c-8.8 0-16 7.2-16 16v264c0 8.8 7.2 16 16 16h512zM472 436h400v152H472V436zM80 646c0 4.4 3.6 8 8 8h224c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H88c-4.4 0-8 3.6-8 8v56zm8-204h224c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H88c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8z'));
  exports.PoundOutline = getIcon('pound', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm138-209.8H469.8v-4.7c27.4-17.2 43.9-50.4 43.9-91.1 0-14.1-2.2-27.9-5.3-41H607c4.4 0 8-3.6 8-8v-30c0-4.4-3.6-8-8-8H495c-7.2-22.6-13.4-45.7-13.4-70.5 0-43.5 34-70.2 87.3-70.2 21.5 0 42.5 4.1 60.4 10.5 5.2 1.9 10.6-2 10.6-7.6v-39.5c0-3.3-2.1-6.3-5.2-7.5-18.8-7.2-43.8-12.7-70.3-12.7-92.9 0-151.5 44.5-151.5 120.3 0 26.3 6.9 52 14.6 77.1H374c-4.4 0-8 3.6-8 8v30c0 4.4 3.6 8 8 8h67.1c3.4 14.7 5.9 29.4 5.9 44.2 0 45.2-28.8 83.3-72.8 94.2-3.6.9-6.1 4.1-6.1 7.8V722c0 4.4 3.6 8 8 8H650c4.4 0 8-3.6 8-8v-39.8c0-4.4-3.6-8-8-8z'));
  exports.PoweroffOutline = getIcon('poweroff', outline, getNode(newViewBox, 'M705.6 124.9a8 8 0 0 0-11.6 7.2v64.2c0 5.5 2.9 10.6 7.5 13.6a352.2 352.2 0 0 1 62.2 49.8c32.7 32.8 58.4 70.9 76.3 113.3a355 355 0 0 1 27.9 138.7c0 48.1-9.4 94.8-27.9 138.7a355.92 355.92 0 0 1-76.3 113.3 353.06 353.06 0 0 1-113.2 76.4c-43.8 18.6-90.5 28-138.5 28s-94.7-9.4-138.5-28a353.06 353.06 0 0 1-113.2-76.4A355.92 355.92 0 0 1 184 650.4a355 355 0 0 1-27.9-138.7c0-48.1 9.4-94.8 27.9-138.7 17.9-42.4 43.6-80.5 76.3-113.3 19-19 39.8-35.6 62.2-49.8 4.7-2.9 7.5-8.1 7.5-13.6V132c0-6-6.3-9.8-11.6-7.2C178.5 195.2 82 339.3 80 506.3 77.2 745.1 272.5 943.5 511.2 944c239 .5 432.8-193.3 432.8-432.4 0-169.2-97-315.7-238.4-386.7zM480 560h64c4.4 0 8-3.6 8-8V88c0-4.4-3.6-8-8-8h-64c-4.4 0-8 3.6-8 8v464c0 4.4 3.6 8 8 8z'));
  exports.PullRequestOutline = getIcon('pull-request', outline, getNode(newViewBox, 'M788 705.9V192c0-8.8-7.2-16-16-16H602v-68.8c0-6-7-9.4-11.7-5.7L462.7 202.3a7.14 7.14 0 0 0 0 11.3l127.5 100.8c4.7 3.7 11.7.4 11.7-5.7V240h114v465.9c-44.2 15-76 56.9-76 106.1 0 61.8 50.2 112 112 112s112-50.2 112-112c.1-49.2-31.7-91-75.9-106.1zM752 860a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96zM384 212c0-61.8-50.2-112-112-112s-112 50.2-112 112c0 49.2 31.8 91 76 106.1V706c-44.2 15-76 56.9-76 106.1 0 61.8 50.2 112 112 112s112-50.2 112-112c0-49.2-31.8-91-76-106.1V318.1c44.2-15.1 76-56.9 76-106.1zm-160 0a48.01 48.01 0 0 1 96 0 48.01 48.01 0 0 1-96 0zm96 600a48.01 48.01 0 0 1-96 0 48.01 48.01 0 0 1 96 0z'));
  exports.QqOutline = getIcon('qq', outline, getNode(newViewBox, 'M824.8 613.2c-16-51.4-34.4-94.6-62.7-165.3C766.5 262.2 689.3 112 511.5 112 331.7 112 256.2 265.2 261 447.9c-28.4 70.8-46.7 113.7-62.7 165.3-34 109.5-23 154.8-14.6 155.8 18 2.2 70.1-82.4 70.1-82.4 0 49 25.2 112.9 79.8 159-26.4 8.1-85.7 29.9-71.6 53.8 11.4 19.3 196.2 12.3 249.5 6.3 53.3 6 238.1 13 249.5-6.3 14.1-23.8-45.3-45.7-71.6-53.8 54.6-46.2 79.8-110.1 79.8-159 0 0 52.1 84.6 70.1 82.4 8.5-1.1 19.5-46.4-14.5-155.8z'));
  exports.QuestionOutline = getIcon('question', outline, getNode(newViewBox, 'M764 280.9c-14-30.6-33.9-58.1-59.3-81.6C653.1 151.4 584.6 125 512 125s-141.1 26.4-192.7 74.2c-25.4 23.6-45.3 51-59.3 81.7-14.6 32-22 65.9-22 100.9v27c0 6.2 5 11.2 11.2 11.2h54c6.2 0 11.2-5 11.2-11.2v-27c0-99.5 88.6-180.4 197.6-180.4s197.6 80.9 197.6 180.4c0 40.8-14.5 79.2-42 111.2-27.2 31.7-65.6 54.4-108.1 64-24.3 5.5-46.2 19.2-61.7 38.8a110.85 110.85 0 0 0-23.9 68.6v31.4c0 6.2 5 11.2 11.2 11.2h54c6.2 0 11.2-5 11.2-11.2v-31.4c0-15.7 10.9-29.5 26-32.9 58.4-13.2 111.4-44.7 149.3-88.7 19.1-22.3 34-47.1 44.3-74 10.7-27.9 16.1-57.2 16.1-87 0-35-7.4-69-22-100.9zM512 787c-30.9 0-56 25.1-56 56s25.1 56 56 56 56-25.1 56-56-25.1-56-56-56z'));
  exports.RadarChartOutline = getIcon('radar-chart', outline, getNode(newViewBox, 'M926.8 397.1l-396-288a31.81 31.81 0 0 0-37.6 0l-396 288a31.99 31.99 0 0 0-11.6 35.8l151.3 466a32 32 0 0 0 30.4 22.1h489.5c13.9 0 26.1-8.9 30.4-22.1l151.3-466c4.2-13.2-.5-27.6-11.7-35.8zM838.6 417l-98.5 32-200-144.7V199.9L838.6 417zM466 567.2l-89.1 122.3-55.2-169.2L466 567.2zm-116.3-96.8L484 373.3v140.8l-134.3-43.7zM512 599.2l93.9 128.9H418.1L512 599.2zm28.1-225.9l134.2 97.1L540.1 514V373.3zM558 567.2l144.3-46.9-55.2 169.2L558 567.2zm-74-367.3v104.4L283.9 449l-98.5-32L484 199.9zM169.3 470.8l86.5 28.1 80.4 246.4-53.8 73.9-113.1-348.4zM327.1 853l50.3-69h269.3l50.3 69H327.1zm414.5-33.8l-53.8-73.9 80.4-246.4 86.5-28.1-113.1 348.4z'));
  exports.QrcodeOutline = getIcon('qrcode', outline, getNode(newViewBox, 'M468 128H160c-17.7 0-32 14.3-32 32v308c0 4.4 3.6 8 8 8h332c4.4 0 8-3.6 8-8V136c0-4.4-3.6-8-8-8zm-56 284H192V192h220v220zm-138-74h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm194 210H136c-4.4 0-8 3.6-8 8v308c0 17.7 14.3 32 32 32h308c4.4 0 8-3.6 8-8V556c0-4.4-3.6-8-8-8zm-56 284H192V612h220v220zm-138-74h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm590-630H556c-4.4 0-8 3.6-8 8v332c0 4.4 3.6 8 8 8h332c4.4 0 8-3.6 8-8V160c0-17.7-14.3-32-32-32zm-32 284H612V192h220v220zm-138-74h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm194 210h-48c-4.4 0-8 3.6-8 8v134h-78V556c0-4.4-3.6-8-8-8H556c-4.4 0-8 3.6-8 8v332c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V644h78v102c0 4.4 3.6 8 8 8h190c4.4 0 8-3.6 8-8V556c0-4.4-3.6-8-8-8zM746 832h-48c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm142 0h-48c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z'));
  exports.RadiusBottomleftOutline = getIcon('radius-bottomleft', outline, getNode(newViewBox, 'M712 824h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm2-696h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM136 374h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm0-174h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm752 624h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-348 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-230 72h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm230 624H358c-87.3 0-158-70.7-158-158V484c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v182c0 127 103 230 230 230h182c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.RadiusBottomrightOutline = getIcon('radius-bottomright', outline, getNode(newViewBox, 'M368 824h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-58-624h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm578 102h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM192 824h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0-174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm292 72h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm174 0h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm230 276h-56c-4.4 0-8 3.6-8 8v182c0 87.3-70.7 158-158 158H484c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h182c127 0 230-103 230-230V484c0-4.4-3.6-8-8-8z'));
  exports.RadiusUpleftOutline = getIcon('radius-upleft', outline, getNode(newViewBox, 'M656 200h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm58 624h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM192 650h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm696-696h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-348 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-174 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm174-696H358c-127 0-230 103-230 230v182c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V358c0-87.3 70.7-158 158-158h182c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.RadiusUprightOutline = getIcon('radius-upright', outline, getNode(newViewBox, 'M368 128h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-2 696h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm522-174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM192 128h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 174h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm348 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm174 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-48-696H484c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h182c87.3 0 158 70.7 158 158v182c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V358c0-127-103-230-230-230z'));
  exports.RadiusSettingOutline = getIcon('radius-setting', outline, getNode(newViewBox, 'M396 140h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm-44 684h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm524-204h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM192 344h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 160h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 160h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 160h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm320 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm160 0h-56c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm140-284c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V370c0-127-103-230-230-230H484c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h170c87.3 0 158 70.7 158 158v170zM236 96H92c-4.4 0-8 3.6-8 8v144c0 4.4 3.6 8 8 8h144c4.4 0 8-3.6 8-8V104c0-4.4-3.6-8-8-8zm-48 101.6c0 1.3-1.1 2.4-2.4 2.4h-43.2c-1.3 0-2.4-1.1-2.4-2.4v-43.2c0-1.3 1.1-2.4 2.4-2.4h43.2c1.3 0 2.4 1.1 2.4 2.4v43.2zM920 780H776c-4.4 0-8 3.6-8 8v144c0 4.4 3.6 8 8 8h144c4.4 0 8-3.6 8-8V788c0-4.4-3.6-8-8-8zm-48 101.6c0 1.3-1.1 2.4-2.4 2.4h-43.2c-1.3 0-2.4-1.1-2.4-2.4v-43.2c0-1.3 1.1-2.4 2.4-2.4h43.2c1.3 0 2.4 1.1 2.4 2.4v43.2z'));
  exports.RedditOutline = getIcon('reddit', outline, getNode(newViewBox, 'M288 568a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm338.7 119.7c-23.1 18.2-68.9 37.8-114.7 37.8s-91.6-19.6-114.7-37.8c-14.4-11.3-35.3-8.9-46.7 5.5s-8.9 35.3 5.5 46.7C396.3 771.6 457.5 792 512 792s115.7-20.4 155.9-52.1a33.25 33.25 0 1 0-41.2-52.2zM960 456c0-61.9-50.1-112-112-112-42.1 0-78.7 23.2-97.9 57.6-57.6-31.5-127.7-51.8-204.1-56.5L612.9 195l127.9 36.9c11.5 32.6 42.6 56.1 79.2 56.1 46.4 0 84-37.6 84-84s-37.6-84-84-84c-32 0-59.8 17.9-74 44.2L603.5 123a33.2 33.2 0 0 0-39.6 18.4l-90.8 203.9c-74.5 5.2-142.9 25.4-199.2 56.2A111.94 111.94 0 0 0 176 344c-61.9 0-112 50.1-112 112 0 45.8 27.5 85.1 66.8 102.5-7.1 21-10.8 43-10.8 65.5 0 154.6 175.5 280 392 280s392-125.4 392-280c0-22.6-3.8-44.5-10.8-65.5C932.5 541.1 960 501.8 960 456zM820 172.5a31.5 31.5 0 1 1 0 63 31.5 31.5 0 0 1 0-63zM120 456c0-30.9 25.1-56 56-56a56 56 0 0 1 50.6 32.1c-29.3 22.2-53.5 47.8-71.5 75.9a56.23 56.23 0 0 1-35.1-52zm392 381.5c-179.8 0-325.5-95.6-325.5-213.5S332.2 410.5 512 410.5 837.5 506.1 837.5 624 691.8 837.5 512 837.5zM868.8 508c-17.9-28.1-42.2-53.7-71.5-75.9 9-18.9 28.3-32.1 50.6-32.1 30.9 0 56 25.1 56 56 .1 23.5-14.5 43.7-35.1 52zM624 568a56 56 0 1 0 112 0 56 56 0 1 0-112 0z'));
  exports.RedoOutline = getIcon('redo', outline, getNode(newViewBox, 'M758.2 839.1C851.8 765.9 912 651.9 912 523.9 912 303 733.5 124.3 512.6 124 291.4 123.7 112 302.8 112 523.9c0 125.2 57.5 236.9 147.6 310.2 3.5 2.8 8.6 2.2 11.4-1.3l39.4-50.5c2.7-3.4 2.1-8.3-1.2-11.1-8.1-6.6-15.9-13.7-23.4-21.2a318.64 318.64 0 0 1-68.6-101.7C200.4 609 192 567.1 192 523.9s8.4-85.1 25.1-124.5c16.1-38.1 39.2-72.3 68.6-101.7 29.4-29.4 63.6-52.5 101.7-68.6C426.9 212.4 468.8 204 512 204s85.1 8.4 124.5 25.1c38.1 16.1 72.3 39.2 101.7 68.6 29.4 29.4 52.5 63.6 68.6 101.7 16.7 39.4 25.1 81.3 25.1 124.5s-8.4 85.1-25.1 124.5a318.64 318.64 0 0 1-68.6 101.7c-9.3 9.3-19.1 18-29.3 26L668.2 724a8 8 0 0 0-14.1 3l-39.6 162.2c-1.2 5 2.6 9.9 7.7 9.9l167 .8c6.7 0 10.5-7.7 6.3-12.9l-37.3-47.9z'));
  exports.ReloadOutline = getIcon('reload', outline, getNode(newViewBox, 'M909.1 209.3l-56.4 44.1C775.8 155.1 656.2 92 521.9 92 290 92 102.3 279.5 102 511.5 101.7 743.7 289.8 932 521.9 932c181.3 0 335.8-115 394.6-276.1 1.5-4.2-.7-8.9-4.9-10.3l-56.7-19.5a8 8 0 0 0-10.1 4.8c-1.8 5-3.8 10-5.9 14.9-17.3 41-42.1 77.8-73.7 109.4A344.77 344.77 0 0 1 655.9 829c-42.3 17.9-87.4 27-133.8 27-46.5 0-91.5-9.1-133.8-27A341.5 341.5 0 0 1 279 755.2a342.16 342.16 0 0 1-73.7-109.4c-17.9-42.4-27-87.4-27-133.9s9.1-91.5 27-133.9c17.3-41 42.1-77.8 73.7-109.4 31.6-31.6 68.4-56.4 109.3-73.8 42.3-17.9 87.4-27 133.8-27 46.5 0 91.5 9.1 133.8 27a341.5 341.5 0 0 1 109.3 73.8c9.9 9.9 19.2 20.4 27.8 31.4l-60.2 47a8 8 0 0 0 3 14.1l175.6 43c5 1.2 9.9-2.6 9.9-7.7l.8-180.9c-.1-6.6-7.8-10.3-13-6.2z'));
  exports.RetweetOutline = getIcon('retweet', outline, getNode(normalViewBox, 'M136 552h63.6c4.4 0 8-3.6 8-8V288.7h528.6v72.6c0 1.9.6 3.7 1.8 5.2a8.3 8.3 0 0 0 11.7 1.4L893 255.4c4.3-5 3.6-10.3 0-13.2L749.7 129.8a8.22 8.22 0 0 0-5.2-1.8c-4.6 0-8.4 3.8-8.4 8.4V209H199.7c-39.5 0-71.7 32.2-71.7 71.8V544c0 4.4 3.6 8 8 8zm752-80h-63.6c-4.4 0-8 3.6-8 8v255.3H287.8v-72.6c0-1.9-.6-3.7-1.8-5.2a8.3 8.3 0 0 0-11.7-1.4L131 768.6c-4.3 5-3.6 10.3 0 13.2l143.3 112.4c1.5 1.2 3.3 1.8 5.2 1.8 4.6 0 8.4-3.8 8.4-8.4V815h536.6c39.5 0 71.7-32.2 71.7-71.8V480c-.2-4.4-3.8-8-8.2-8z'));
  exports.RightOutline = getIcon('right', outline, getNode(newViewBox, 'M765.7 486.8L314.9 134.7A7.97 7.97 0 0 0 302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 0 0 0-50.4z'));
  exports.RiseOutline = getIcon('rise', outline, getNode(newViewBox, 'M917 211.1l-199.2 24c-6.6.8-9.4 8.9-4.7 13.6l59.3 59.3-226 226-101.8-101.7c-6.3-6.3-16.4-6.2-22.6 0L100.3 754.1a8.03 8.03 0 0 0 0 11.3l45 45.2c3.1 3.1 8.2 3.1 11.3 0L433.3 534 535 635.7c6.3 6.2 16.4 6.2 22.6 0L829 364.5l59.3 59.3a8.01 8.01 0 0 0 13.6-4.7l24-199.2c.7-5.1-3.7-9.5-8.9-8.8z'));
  exports.RollbackOutline = getIcon('rollback', outline, getNode(newViewBox, 'M793 242H366v-74c0-6.7-7.7-10.4-12.9-6.3l-142 112a8 8 0 0 0 0 12.6l142 112c5.2 4.1 12.9.4 12.9-6.3v-74h415v470H175c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h618c35.3 0 64-28.7 64-64V306c0-35.3-28.7-64-64-64z'));
  exports.SafetyOutline = getIcon('safety', outline, getNode(normalViewBox, 'M512 64L128 192v384c0 212.1 171.9 384 384 384s384-171.9 384-384V192L512 64zm312 512c0 172.3-139.7 312-312 312S200 748.3 200 576V246l312-110 312 110v330z', 'M378.4 475.1a35.91 35.91 0 0 0-50.9 0 35.91 35.91 0 0 0 0 50.9l129.4 129.4 2.1 2.1a33.98 33.98 0 0 0 48.1 0L730.6 434a33.98 33.98 0 0 0 0-48.1l-2.8-2.8a33.98 33.98 0 0 0-48.1 0L483 579.7 378.4 475.1z'));
  exports.RobotOutline = getIcon('robot', outline, getNode(newViewBox, 'M300 328a60 60 0 1 0 120 0 60 60 0 1 0-120 0zM852 64H172c-17.7 0-32 14.3-32 32v660c0 17.7 14.3 32 32 32h680c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-32 660H204V128h616v596zM604 328a60 60 0 1 0 120 0 60 60 0 1 0-120 0zm250.2 556H169.8c-16.5 0-29.8 14.3-29.8 32v36c0 4.4 3.3 8 7.4 8h729.1c4.1 0 7.4-3.6 7.4-8v-36c.1-17.7-13.2-32-29.7-32zM664 508H360c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h304c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z'));
  exports.SearchOutline = getIcon('search', outline, getNode(newViewBox, 'M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0 0 11.6 0l43.6-43.5a8.2 8.2 0 0 0 0-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z'));
  exports.ScanOutline = getIcon('scan', outline, getNode(newViewBox, 'M136 384h56c4.4 0 8-3.6 8-8V200h176c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H196c-37.6 0-68 30.4-68 68v180c0 4.4 3.6 8 8 8zm512-184h176v176c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V196c0-37.6-30.4-68-68-68H648c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zM376 824H200V648c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v180c0 37.6 30.4 68 68 68h180c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm512-184h-56c-4.4 0-8 3.6-8 8v176H648c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h180c37.6 0 68-30.4 68-68V648c0-4.4-3.6-8-8-8zm16-164H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.ScissorOutline = getIcon('scissor', outline, getNode(newViewBox, 'M567.1 512l318.5-319.3c5-5 1.5-13.7-5.6-13.7h-90.5c-2.1 0-4.2.8-5.6 2.3l-273.3 274-90.2-90.5c12.5-22.1 19.7-47.6 19.7-74.8 0-83.9-68.1-152-152-152s-152 68.1-152 152 68.1 152 152 152c27.7 0 53.6-7.4 75.9-20.3l90 90.3-90.1 90.3A151.04 151.04 0 0 0 288 582c-83.9 0-152 68.1-152 152s68.1 152 152 152 152-68.1 152-152c0-27.2-7.2-52.7-19.7-74.8l90.2-90.5 273.3 274c1.5 1.5 3.5 2.3 5.6 2.3H880c7.1 0 10.7-8.6 5.6-13.7L567.1 512zM288 370c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80zm0 444c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z'));
  exports.SelectOutline = getIcon('select', outline, getNode(newViewBox, 'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h360c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H184V184h656v320c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V144c0-17.7-14.3-32-32-32zM653.3 599.4l52.2-52.2a8.01 8.01 0 0 0-4.7-13.6l-179.4-21c-5.1-.6-9.5 3.7-8.9 8.9l21 179.4c.8 6.6 8.9 9.4 13.6 4.7l52.4-52.4 256.2 256.2c3.1 3.1 8.2 3.1 11.3 0l42.4-42.4c3.1-3.1 3.1-8.2 0-11.3L653.3 599.4z'));
  exports.ShakeOutline = getIcon('shake', outline, getNode(newViewBox, 'M324 666a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm616.7-309.6L667.6 83.2C655.2 70.9 638.7 64 621.1 64s-34.1 6.8-46.5 19.2L83.3 574.5a65.85 65.85 0 0 0 0 93.1l273.2 273.2c12.3 12.3 28.9 19.2 46.5 19.2s34.1-6.8 46.5-19.2l491.3-491.3c25.6-25.7 25.6-67.5-.1-93.1zM403 880.1L143.9 621l477.2-477.2 259 259.2L403 880.1zM152.8 373.7a7.9 7.9 0 0 0 11.2 0L373.7 164a7.9 7.9 0 0 0 0-11.2l-38.4-38.4a7.9 7.9 0 0 0-11.2 0L114.3 323.9a7.9 7.9 0 0 0 0 11.2l38.5 38.6zm718.6 276.6a7.9 7.9 0 0 0-11.2 0L650.3 860.1a7.9 7.9 0 0 0 0 11.2l38.4 38.4a7.9 7.9 0 0 0 11.2 0L909.7 700a7.9 7.9 0 0 0 0-11.2l-38.3-38.5z'));
  exports.ShareAltOutline = getIcon('share-alt', outline, getNode(newViewBox, 'M752 664c-28.5 0-54.8 10-75.4 26.7L469.4 540.8a160.68 160.68 0 0 0 0-57.6l207.2-149.9C697.2 350 723.5 360 752 360c66.2 0 120-53.8 120-120s-53.8-120-120-120-120 53.8-120 120c0 11.6 1.6 22.7 4.7 33.3L439.9 415.8C410.7 377.1 364.3 352 312 352c-88.4 0-160 71.6-160 160s71.6 160 160 160c52.3 0 98.7-25.1 127.9-63.8l196.8 142.5c-3.1 10.6-4.7 21.8-4.7 33.3 0 66.2 53.8 120 120 120s120-53.8 120-120-53.8-120-120-120zm0-476c28.7 0 52 23.3 52 52s-23.3 52-52 52-52-23.3-52-52 23.3-52 52-52zM312 600c-48.5 0-88-39.5-88-88s39.5-88 88-88 88 39.5 88 88-39.5 88-88 88zm440 236c-28.7 0-52-23.3-52-52s23.3-52 52-52 52 23.3 52 52-23.3 52-52 52z'));
  exports.ShoppingCartOutline = getIcon('shopping-cart', outline, getNode(normalViewBox, 'M922.9 701.9H327.4l29.9-60.9 496.8-.9c16.8 0 31.2-12 34.2-28.6l68.8-385.1c1.8-10.1-.9-20.5-7.5-28.4a34.99 34.99 0 0 0-26.6-12.5l-632-2.1-5.4-25.4c-3.4-16.2-18-28-34.6-28H96.5a35.3 35.3 0 1 0 0 70.6h125.9L246 312.8l58.1 281.3-74.8 122.1a34.96 34.96 0 0 0-3 36.8c6 11.9 18.1 19.4 31.5 19.4h62.8a102.43 102.43 0 0 0-20.6 61.7c0 56.6 46 102.6 102.6 102.6s102.6-46 102.6-102.6c0-22.3-7.4-44-20.6-61.7h161.1a102.43 102.43 0 0 0-20.6 61.7c0 56.6 46 102.6 102.6 102.6s102.6-46 102.6-102.6c0-22.3-7.4-44-20.6-61.7H923c19.4 0 35.3-15.8 35.3-35.3a35.42 35.42 0 0 0-35.4-35.2zM305.7 253l575.8 1.9-56.4 315.8-452.3.8L305.7 253zm96.9 612.7c-17.4 0-31.6-14.2-31.6-31.6 0-17.4 14.2-31.6 31.6-31.6s31.6 14.2 31.6 31.6a31.6 31.6 0 0 1-31.6 31.6zm325.1 0c-17.4 0-31.6-14.2-31.6-31.6 0-17.4 14.2-31.6 31.6-31.6s31.6 14.2 31.6 31.6a31.6 31.6 0 0 1-31.6 31.6z'));
  exports.ShrinkOutline = getIcon('shrink', outline, getNode(newViewBox, 'M881.7 187.4l-45.1-45.1a8.03 8.03 0 0 0-11.3 0L667.8 299.9l-54.7-54.7a7.94 7.94 0 0 0-13.5 4.7L576.1 439c-.6 5.2 3.7 9.5 8.9 8.9l189.2-23.5c6.6-.8 9.3-8.8 4.7-13.5l-54.7-54.7 157.6-157.6c3-3 3-8.1-.1-11.2zM439 576.1l-189.2 23.5c-6.6.8-9.3 8.9-4.7 13.5l54.7 54.7-157.5 157.5a8.03 8.03 0 0 0 0 11.3l45.1 45.1c3.1 3.1 8.2 3.1 11.3 0l157.6-157.6 54.7 54.7a7.94 7.94 0 0 0 13.5-4.7L447.9 585a7.9 7.9 0 0 0-8.9-8.9z'));
  exports.SlackOutline = getIcon('slack', outline, getNode(newViewBox, 'M409.4 128c-42.4 0-76.7 34.4-76.7 76.8 0 20.3 8.1 39.9 22.4 54.3a76.74 76.74 0 0 0 54.3 22.5h76.7v-76.8c0-42.3-34.3-76.7-76.7-76.8zm0 204.8H204.7c-42.4 0-76.7 34.4-76.7 76.8s34.4 76.8 76.7 76.8h204.6c42.4 0 76.7-34.4 76.7-76.8.1-42.4-34.3-76.8-76.6-76.8zM614 486.4c42.4 0 76.8-34.4 76.7-76.8V204.8c0-42.4-34.3-76.8-76.7-76.8-42.4 0-76.7 34.4-76.7 76.8v204.8c0 42.5 34.3 76.8 76.7 76.8zm281.4-76.8c0-42.4-34.4-76.8-76.7-76.8S742 367.2 742 409.6v76.8h76.7c42.3 0 76.7-34.4 76.7-76.8zm-76.8 128H614c-42.4 0-76.7 34.4-76.7 76.8 0 20.3 8.1 39.9 22.4 54.3a76.74 76.74 0 0 0 54.3 22.5h204.6c42.4 0 76.7-34.4 76.7-76.8.1-42.4-34.3-76.7-76.7-76.8zM614 742.4h-76.7v76.8c0 42.4 34.4 76.8 76.7 76.8 42.4 0 76.8-34.4 76.7-76.8.1-42.4-34.3-76.7-76.7-76.8zM409.4 537.6c-42.4 0-76.7 34.4-76.7 76.8v204.8c0 42.4 34.4 76.8 76.7 76.8 42.4 0 76.8-34.4 76.7-76.8V614.4c0-20.3-8.1-39.9-22.4-54.3a76.92 76.92 0 0 0-54.3-22.5zM128 614.4c0 20.3 8.1 39.9 22.4 54.3a76.74 76.74 0 0 0 54.3 22.5c42.4 0 76.8-34.4 76.7-76.8v-76.8h-76.7c-42.3 0-76.7 34.4-76.7 76.8z'));
  exports.SmallDashOutline = getIcon('small-dash', outline, getNode(newViewBox, 'M112 476h72v72h-72zm182 0h72v72h-72zm364 0h72v72h-72zm182 0h72v72h-72zm-364 0h72v72h-72z'));
  exports.SolutionOutline = getIcon('solution', outline, getNode(newViewBox, 'M688 264c0-4.4-3.6-8-8-8H296c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h384c4.4 0 8-3.6 8-8v-48zm-8 136H296c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h384c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM480 544H296c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm-48 308H208V148h560v344c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V108c0-17.7-14.3-32-32-32H168c-17.7 0-32 14.3-32 32v784c0 17.7 14.3 32 32 32h264c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm356.8-74.4c29-26.3 47.2-64.3 47.2-106.6 0-79.5-64.5-144-144-144s-144 64.5-144 144c0 42.3 18.2 80.3 47.2 106.6-57 32.5-96.2 92.7-99.2 162.1-.2 4.5 3.5 8.3 8 8.3h48.1c4.2 0 7.7-3.3 8-7.6C564 871.2 621.7 816 692 816s128 55.2 131.9 124.4c.2 4.2 3.7 7.6 8 7.6H880c4.6 0 8.2-3.8 8-8.3-2.9-69.5-42.2-129.6-99.2-162.1zM692 591c44.2 0 80 35.8 80 80s-35.8 80-80 80-80-35.8-80-80 35.8-80 80-80z'));
  exports.SketchOutline = getIcon('sketch', outline, getNode(newViewBox, 'M925.6 405.1l-203-253.7a6.5 6.5 0 0 0-5-2.4H306.4c-1.9 0-3.8.9-5 2.4l-203 253.7a6.5 6.5 0 0 0 .2 8.3l408.6 459.5c1.2 1.4 3 2.1 4.8 2.1 1.8 0 3.5-.8 4.8-2.1l408.6-459.5a6.5 6.5 0 0 0 .2-8.3zM645.2 206.4l34.4 133.9-132.5-133.9h98.1zm8.2 178.5H370.6L512 242l141.4 142.9zM378.8 206.4h98.1L344.3 340.3l34.5-133.9zm-53.4 7l-44.1 171.5h-93.1l137.2-171.5zM194.6 434.9H289l125.8 247.7-220.2-247.7zM512 763.4L345.1 434.9h333.7L512 763.4zm97.1-80.8L735 434.9h94.4L609.1 682.6zm133.6-297.7l-44.1-171.5 137.2 171.5h-93.1z'));
  exports.SortDescendingOutline = getIcon('sort-descending', outline, getNode(newViewBox, 'M839.6 433.8L749 150.5a9.24 9.24 0 0 0-8.9-6.5h-77.4c-4.1 0-7.6 2.6-8.9 6.5l-91.3 283.3c-.3.9-.5 1.9-.5 2.9 0 5.1 4.2 9.3 9.3 9.3h56.4c4.2 0 7.8-2.8 9-6.8l17.5-61.6h89l17.3 61.5c1.1 4 4.8 6.8 9 6.8h61.2c1 0 1.9-.1 2.8-.4 2.4-.8 4.3-2.4 5.5-4.6 1.1-2.2 1.3-4.7.6-7.1zM663.3 325.5l32.8-116.9h6.3l32.1 116.9h-71.2zm143.5 492.9H677.2v-.4l132.6-188.9c1.1-1.6 1.7-3.4 1.7-5.4v-36.4c0-5.1-4.2-9.3-9.3-9.3h-204c-5.1 0-9.3 4.2-9.3 9.3v43c0 5.1 4.2 9.3 9.3 9.3h122.6v.4L587.7 828.9a9.35 9.35 0 0 0-1.7 5.4v36.4c0 5.1 4.2 9.3 9.3 9.3h211.4c5.1 0 9.3-4.2 9.3-9.3v-43a9.2 9.2 0 0 0-9.2-9.3zM310.3 167.1a8 8 0 0 0-12.6 0L185.7 309c-4.2 5.3-.4 13 6.3 13h76v530c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V322h76c6.7 0 10.5-7.8 6.3-13l-112-141.9z'));
  exports.SortAscendingOutline = getIcon('sort-ascending', outline, getNode(newViewBox, 'M839.6 433.8L749 150.5a9.24 9.24 0 0 0-8.9-6.5h-77.4c-4.1 0-7.6 2.6-8.9 6.5l-91.3 283.3c-.3.9-.5 1.9-.5 2.9 0 5.1 4.2 9.3 9.3 9.3h56.4c4.2 0 7.8-2.8 9-6.8l17.5-61.6h89l17.3 61.5c1.1 4 4.8 6.8 9 6.8h61.2c1 0 1.9-.1 2.8-.4 2.4-.8 4.3-2.4 5.5-4.6 1.1-2.2 1.3-4.7.6-7.1zM663.3 325.5l32.8-116.9h6.3l32.1 116.9h-71.2zm143.5 492.9H677.2v-.4l132.6-188.9c1.1-1.6 1.7-3.4 1.7-5.4v-36.4c0-5.1-4.2-9.3-9.3-9.3h-204c-5.1 0-9.3 4.2-9.3 9.3v43c0 5.1 4.2 9.3 9.3 9.3h122.6v.4L587.7 828.9a9.35 9.35 0 0 0-1.7 5.4v36.4c0 5.1 4.2 9.3 9.3 9.3h211.4c5.1 0 9.3-4.2 9.3-9.3v-43a9.2 9.2 0 0 0-9.2-9.3zM416 702h-76V172c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v530h-76c-6.7 0-10.5 7.8-6.3 13l112 141.9a8 8 0 0 0 12.6 0l112-141.9c4.1-5.2.4-13-6.3-13z'));
  exports.StockOutline = getIcon('stock', outline, getNode(newViewBox, 'M904 747H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM165.7 621.8l39.7 39.5c3.1 3.1 8.2 3.1 11.3 0l234.7-233.9 97.6 97.3a32.11 32.11 0 0 0 45.2 0l264.2-263.2c3.1-3.1 3.1-8.2 0-11.3l-39.7-39.6a8.03 8.03 0 0 0-11.3 0l-235.7 235-97.7-97.3a32.11 32.11 0 0 0-45.2 0L165.7 610.5a7.94 7.94 0 0 0 0 11.3z'));
  exports.SwapLeftOutline = getIcon('swap-left', outline, getNode(normalViewBox, 'M872 572H266.8l144.3-183c4.1-5.2.4-13-6.3-13H340c-9.8 0-19.1 4.5-25.1 12.2l-164 208c-16.5 21-1.6 51.8 25.1 51.8h696c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z'));
  exports.SwapRightOutline = getIcon('swap-right', outline, getNode(normalViewBox, 'M873.1 596.2l-164-208A32 32 0 0 0 684 376h-64.8c-6.7 0-10.4 7.7-6.3 13l144.3 183H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h695.9c26.8 0 41.7-30.8 25.2-51.8z'));
  exports.StrikethroughOutline = getIcon('strikethrough', outline, getNode(newViewBox, 'M952 474H569.9c-10-2-20.5-4-31.6-6-15.9-2.9-22.2-4.1-30.8-5.8-51.3-10-82.2-20-106.8-34.2-35.1-20.5-52.2-48.3-52.2-85.1 0-37 15.2-67.7 44-89 28.4-21 68.8-32.1 116.8-32.1 54.8 0 97.1 14.4 125.8 42.8 14.6 14.4 25.3 32.1 31.8 52.6 1.3 4.1 2.8 10 4.3 17.8.9 4.8 5.2 8.2 9.9 8.2h72.8c5.6 0 10.1-4.6 10.1-10.1v-1c-.7-6.8-1.3-12.1-2-16-7.3-43.5-28-81.7-59.7-110.3-44.4-40.5-109.7-61.8-188.7-61.8-72.3 0-137.4 18.1-183.3 50.9-25.6 18.4-45.4 41.2-58.6 67.7-13.5 27.1-20.3 58.4-20.3 92.9 0 29.5 5.7 54.5 17.3 76.5 8.3 15.7 19.6 29.5 34.1 42H72c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h433.2c2.1.4 3.9.8 5.9 1.2 30.9 6.2 49.5 10.4 66.6 15.2 23 6.5 40.6 13.3 55.2 21.5 35.8 20.2 53.3 49.2 53.3 89 0 35.3-15.5 66.8-43.6 88.8-30.5 23.9-75.6 36.4-130.5 36.4-43.7 0-80.7-8.5-110.2-25-29.1-16.3-49.1-39.8-59.7-69.5-.8-2.2-1.7-5.2-2.7-9-1.2-4.4-5.3-7.5-9.7-7.5h-79.7c-5.6 0-10.1 4.6-10.1 10.1v1c.2 2.3.4 4.2.6 5.7 6.5 48.8 30.3 88.8 70.7 118.8 47.1 34.8 113.4 53.2 191.8 53.2 84.2 0 154.8-19.8 204.2-57.3 25-18.9 44.2-42.2 57.1-69 13-27.1 19.7-57.9 19.7-91.5 0-31.8-5.8-58.4-17.8-81.4-5.8-11.2-13.1-21.5-21.8-30.8H952c4.4 0 8-3.6 8-8v-60a8 8 0 0 0-8-7.9z'));
  exports.SwapOutline = getIcon('swap', outline, getNode(newViewBox, 'M847.9 592H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h605.2L612.9 851c-4.1 5.2-.4 13 6.3 13h72.5c4.9 0 9.5-2.2 12.6-6.1l168.8-214.1c16.5-21 1.6-51.8-25.2-51.8zM872 356H266.8l144.3-183c4.1-5.2.4-13-6.3-13h-72.5c-4.9 0-9.5 2.2-12.6 6.1L150.9 380.2c-16.5 21-1.6 51.8 25.1 51.8h696c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z'));
  exports.SyncOutline = getIcon('sync', outline, getNode(newViewBox, 'M168 504.2c1-43.7 10-86.1 26.9-126 17.3-41 42.1-77.7 73.7-109.4S337 212.3 378 195c42.4-17.9 87.4-27 133.9-27s91.5 9.1 133.8 27A341.5 341.5 0 0 1 755 268.8c9.9 9.9 19.2 20.4 27.8 31.4l-60.2 47a8 8 0 0 0 3 14.1l175.7 43c5 1.2 9.9-2.6 9.9-7.7l.8-180.9c0-6.7-7.7-10.5-12.9-6.3l-56.4 44.1C765.8 155.1 646.2 92 511.8 92 282.7 92 96.3 275.6 92 503.8a8 8 0 0 0 8 8.2h60c4.4 0 7.9-3.5 8-7.8zm756 7.8h-60c-4.4 0-7.9 3.5-8 7.8-1 43.7-10 86.1-26.9 126-17.3 41-42.1 77.8-73.7 109.4A342.45 342.45 0 0 1 512.1 856a342.24 342.24 0 0 1-243.2-100.8c-9.9-9.9-19.2-20.4-27.8-31.4l60.2-47a8 8 0 0 0-3-14.1l-175.7-43c-5-1.2-9.9 2.6-9.9 7.7l-.7 181c0 6.7 7.7 10.5 12.9 6.3l56.4-44.1C258.2 868.9 377.8 932 512.2 932c229.2 0 415.5-183.7 419.8-411.8a8 8 0 0 0-8-8.2z'));
  exports.TableOutline = getIcon('table', outline, getNode(newViewBox, 'M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 208H676V232h212v136zm0 224H676V432h212v160zM412 432h200v160H412V432zm200-64H412V232h200v136zm-476 64h212v160H136V432zm0-200h212v136H136V232zm0 424h212v136H136V656zm276 0h200v136H412V656zm476 136H676V656h212v136z'));
  exports.TeamOutline = getIcon('team', outline, getNode(newViewBox, 'M824.2 699.9a301.55 301.55 0 0 0-86.4-60.4C783.1 602.8 812 546.8 812 484c0-110.8-92.4-201.7-203.2-200-109.1 1.7-197 90.6-197 200 0 62.8 29 118.8 74.2 155.5a300.95 300.95 0 0 0-86.4 60.4C345 754.6 314 826.8 312 903.8a8 8 0 0 0 8 8.2h56c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5A226.62 226.62 0 0 1 612 684c60.9 0 118.2 23.7 161.3 66.8C814.5 792 838 846.3 840 904.3c.1 4.3 3.7 7.7 8 7.7h56a8 8 0 0 0 8-8.2c-2-77-33-149.2-87.8-203.9zM612 612c-34.2 0-66.4-13.3-90.5-37.5a126.86 126.86 0 0 1-37.5-91.8c.3-32.8 13.4-64.5 36.3-88 24-24.6 56.1-38.3 90.4-38.7 33.9-.3 66.8 12.9 91 36.6 24.8 24.3 38.4 56.8 38.4 91.4 0 34.2-13.3 66.3-37.5 90.5A127.3 127.3 0 0 1 612 612zM361.5 510.4c-.9-8.7-1.4-17.5-1.4-26.4 0-15.9 1.5-31.4 4.3-46.5.7-3.6-1.2-7.3-4.5-8.8-13.6-6.1-26.1-14.5-36.9-25.1a127.54 127.54 0 0 1-38.7-95.4c.9-32.1 13.8-62.6 36.3-85.6 24.7-25.3 57.9-39.1 93.2-38.7 31.9.3 62.7 12.6 86 34.4 7.9 7.4 14.7 15.6 20.4 24.4 2 3.1 5.9 4.4 9.3 3.2 17.6-6.1 36.2-10.4 55.3-12.4 5.6-.6 8.8-6.6 6.3-11.6-32.5-64.3-98.9-108.7-175.7-109.9-110.9-1.7-203.3 89.2-203.3 199.9 0 62.8 28.9 118.8 74.2 155.5-31.8 14.7-61.1 35-86.5 60.4-54.8 54.7-85.8 126.9-87.8 204a8 8 0 0 0 8 8.2h56.1c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5 29.4-29.4 65.4-49.8 104.7-59.7 3.9-1 6.5-4.7 6-8.7z'));
  exports.TaobaoOutline = getIcon('taobao', outline, getNode(newViewBox, 'M168.5 273.7a68.7 68.7 0 1 0 137.4 0 68.7 68.7 0 1 0-137.4 0zm730 79.2s-23.7-184.4-426.9-70.1c17.3-30 25.6-49.5 25.6-49.5L396.4 205s-40.6 132.6-113 194.4c0 0 70.1 40.6 69.4 39.4 20.1-20.1 38.2-40.6 53.7-60.4 16.1-7 31.5-13.6 46.7-19.8-18.6 33.5-48.7 83.8-78.8 115.6l42.4 37s28.8-27.7 60.4-61.2h36v61.8H372.9v49.5h140.3v118.5c-1.7 0-3.6 0-5.4-.2-15.4-.7-39.5-3.3-49-18.2-11.5-18.1-3-51.5-2.4-71.9h-97l-3.4 1.8s-35.5 159.1 102.3 155.5c129.1 3.6 203-36 238.6-63.1l14.2 52.6 79.6-33.2-53.9-131.9-64.6 20.1 12.1 45.2c-16.6 12.4-35.6 21.7-56.2 28.4V561.3h137.1v-49.5H628.1V450h137.6v-49.5H521.3c17.6-21.4 31.5-41.1 35-53.6l-42.5-11.6c182.8-65.5 284.5-54.2 283.6 53.2v282.8s10.8 97.1-100.4 90.1l-60.2-12.9-14.2 57.1S882.5 880 903.7 680.2c21.3-200-5.2-327.3-5.2-327.3zm-707.4 18.3l-45.4 69.7 83.6 52.1s56 28.5 29.4 81.9C233.8 625.5 112 736.3 112 736.3l109 68.1c75.4-163.7 70.5-142 89.5-200.7 19.5-60.1 23.7-105.9-9.4-139.1-42.4-42.6-47-46.6-110-93.4z'));
  exports.ToTopOutline = getIcon('to-top', outline, getNode(newViewBox, 'M885 780H165c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h720c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zM400 325.7h73.9V664c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V325.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 171a8 8 0 0 0-12.6 0l-112 141.7c-4.1 5.3-.4 13 6.3 13z'));
  exports.TrademarkOutline = getIcon('trademark', outline, getNode(newViewBox, 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm87.5-334.7c34.8-12.8 78.4-49 78.4-119.2 0-71.2-45.5-131.1-144.2-131.1H378c-4.4 0-8 3.6-8 8v410c0 4.4 3.6 8 8 8h54.5c4.4 0 8-3.6 8-8V561.2h88.7l74.6 159.2c1.3 2.8 4.1 4.6 7.2 4.6h62a7.9 7.9 0 0 0 7.1-11.5l-80.6-164.2zM522 505h-81.5V357h83.4c48 0 80.9 25.3 80.9 75.5 0 46.9-29.8 72.5-82.8 72.5z'));
  exports.TransactionOutline = getIcon('transaction', outline, getNode(newViewBox, 'M668.6 320c0-4.4-3.6-8-8-8h-54.5c-3 0-5.8 1.7-7.1 4.4l-84.7 168.8H511l-84.7-168.8a8 8 0 0 0-7.1-4.4h-55.7c-1.3 0-2.6.3-3.8 1-3.9 2.1-5.3 7-3.2 10.8l103.9 191.6h-57c-4.4 0-8 3.6-8 8v27.1c0 4.4 3.6 8 8 8h76v39h-76c-4.4 0-8 3.6-8 8v27.1c0 4.4 3.6 8 8 8h76V704c0 4.4 3.6 8 8 8h49.9c4.4 0 8-3.6 8-8v-63.5h76.3c4.4 0 8-3.6 8-8v-27.1c0-4.4-3.6-8-8-8h-76.3v-39h76.3c4.4 0 8-3.6 8-8v-27.1c0-4.4-3.6-8-8-8H564l103.7-191.6c.5-1.1.9-2.4.9-3.7zM157.9 504.2a352.7 352.7 0 0 1 103.5-242.4c32.5-32.5 70.3-58.1 112.4-75.9 43.6-18.4 89.9-27.8 137.6-27.8 47.8 0 94.1 9.3 137.6 27.8 42.1 17.8 79.9 43.4 112.4 75.9 10 10 19.3 20.5 27.9 31.4l-50 39.1a8 8 0 0 0 3 14.1l156.8 38.3c5 1.2 9.9-2.6 9.9-7.7l.8-161.5c0-6.7-7.7-10.5-12.9-6.3l-47.8 37.4C770.7 146.3 648.6 82 511.5 82 277 82 86.3 270.1 82 503.8a8 8 0 0 0 8 8.2h60c4.3 0 7.8-3.5 7.9-7.8zM934 512h-60c-4.3 0-7.9 3.5-8 7.8a352.7 352.7 0 0 1-103.5 242.4 352.57 352.57 0 0 1-112.4 75.9c-43.6 18.4-89.9 27.8-137.6 27.8s-94.1-9.3-137.6-27.8a352.57 352.57 0 0 1-112.4-75.9c-10-10-19.3-20.5-27.9-31.4l49.9-39.1a8 8 0 0 0-3-14.1l-156.8-38.3c-5-1.2-9.9 2.6-9.9 7.7l-.8 161.7c0 6.7 7.7 10.5 12.9 6.3l47.8-37.4C253.3 877.7 375.4 942 512.5 942 747 942 937.7 753.9 942 520.2a8 8 0 0 0-8-8.2z'));
  exports.TwitterOutline = getIcon('twitter', outline, getNode(newViewBox, 'M928 254.3c-30.6 13.2-63.9 22.7-98.2 26.4a170.1 170.1 0 0 0 75-94 336.64 336.64 0 0 1-108.2 41.2A170.1 170.1 0 0 0 672 174c-94.5 0-170.5 76.6-170.5 170.6 0 13.2 1.6 26.4 4.2 39.1-141.5-7.4-267.7-75-351.6-178.5a169.32 169.32 0 0 0-23.2 86.1c0 59.2 30.1 111.4 76 142.1a172 172 0 0 1-77.1-21.7v2.1c0 82.9 58.6 151.6 136.7 167.4a180.6 180.6 0 0 1-44.9 5.8c-11.1 0-21.6-1.1-32.2-2.6C211 652 273.9 701.1 348.8 702.7c-58.6 45.9-132 72.9-211.7 72.9-14.3 0-27.5-.5-41.2-2.1C171.5 822 261.2 850 357.8 850 671.4 850 843 590.2 843 364.7c0-7.4 0-14.8-.5-22.2 33.2-24.3 62.3-54.4 85.5-88.2z'));
  exports.UnderlineOutline = getIcon('underline', outline, getNode(newViewBox, 'M824 804H200c-4.4 0-8 3.4-8 7.6v60.8c0 4.2 3.6 7.6 8 7.6h624c4.4 0 8-3.4 8-7.6v-60.8c0-4.2-3.6-7.6-8-7.6zm-312-76c69.4 0 134.6-27.1 183.8-76.2C745 602.7 772 537.4 772 468V156c0-6.6-5.4-12-12-12h-60c-6.6 0-12 5.4-12 12v312c0 97-79 176-176 176s-176-79-176-176V156c0-6.6-5.4-12-12-12h-60c-6.6 0-12 5.4-12 12v312c0 69.4 27.1 134.6 76.2 183.8C377.3 701 442.6 728 512 728z'));
  exports.UndoOutline = getIcon('undo', outline, getNode(newViewBox, 'M511.4 124C290.5 124.3 112 303 112 523.9c0 128 60.2 242 153.8 315.2l-37.5 48c-4.1 5.3-.3 13 6.3 12.9l167-.8c5.2 0 9-4.9 7.7-9.9L369.8 727a8 8 0 0 0-14.1-3L315 776.1c-10.2-8-20-16.7-29.3-26a318.64 318.64 0 0 1-68.6-101.7C200.4 609 192 567.1 192 523.9s8.4-85.1 25.1-124.5c16.1-38.1 39.2-72.3 68.6-101.7 29.4-29.4 63.6-52.5 101.7-68.6C426.9 212.4 468.8 204 512 204s85.1 8.4 124.5 25.1c38.1 16.1 72.3 39.2 101.7 68.6 29.4 29.4 52.5 63.6 68.6 101.7 16.7 39.4 25.1 81.3 25.1 124.5s-8.4 85.1-25.1 124.5a318.64 318.64 0 0 1-68.6 101.7c-7.5 7.5-15.3 14.5-23.4 21.2a7.93 7.93 0 0 0-1.2 11.1l39.4 50.5c2.8 3.5 7.9 4.1 11.4 1.3C854.5 760.8 912 649.1 912 523.9c0-221.1-179.4-400.2-400.6-399.9z'));
  exports.UnorderedListOutline = getIcon('unordered-list', outline, getNode(newViewBox, 'M912 192H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM104 228a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm0 284a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm0 284a56 56 0 1 0 112 0 56 56 0 1 0-112 0z'));
  exports.UpOutline = getIcon('up', outline, getNode(newViewBox, 'M890.5 755.3L537.9 269.2c-12.8-17.6-39-17.6-51.7 0L133.5 755.3A8 8 0 0 0 140 768h75c5.1 0 9.9-2.5 12.9-6.6L512 369.8l284.1 391.6c3 4.1 7.8 6.6 12.9 6.6h75c6.5 0 10.3-7.4 6.5-12.7z'));
  exports.UploadOutline = getIcon('upload', outline, getNode(newViewBox, 'M400 317.7h73.9V656c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V317.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 163a8 8 0 0 0-12.6 0l-112 141.7c-4.1 5.3-.4 13 6.3 13zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z'));
  exports.UserAddOutline = getIcon('user-add', outline, getNode(newViewBox, 'M678.3 642.4c24.2-13 51.9-20.4 81.4-20.4h.1c3 0 4.4-3.6 2.2-5.6a371.67 371.67 0 0 0-103.7-65.8c-.4-.2-.8-.3-1.2-.5C719.2 505 759.6 431.7 759.6 349c0-137-110.8-248-247.5-248S264.7 212 264.7 349c0 82.7 40.4 156 102.6 201.1-.4.2-.8.3-1.2.5-44.7 18.9-84.8 46-119.3 80.6a373.42 373.42 0 0 0-80.4 119.5A373.6 373.6 0 0 0 137 888.8a8 8 0 0 0 8 8.2h59.9c4.3 0 7.9-3.5 8-7.8 2-77.2 32.9-149.5 87.6-204.3C357 628.2 432.2 597 512.2 597c56.7 0 111.1 15.7 158 45.1a8.1 8.1 0 0 0 8.1.3zM512.2 521c-45.8 0-88.9-17.9-121.4-50.4A171.2 171.2 0 0 1 340.5 349c0-45.9 17.9-89.1 50.3-121.6S466.3 177 512.2 177s88.9 17.9 121.4 50.4A171.2 171.2 0 0 1 683.9 349c0 45.9-17.9 89.1-50.3 121.6C601.1 503.1 558 521 512.2 521zM880 759h-84v-84c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v84h-84c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h84v84c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-84h84c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.UsergroupAddOutline = getIcon('usergroup-add', outline, getNode(newViewBox, 'M892 772h-80v-80c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v80h-80c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h80v80c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-80h80c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM373.5 498.4c-.9-8.7-1.4-17.5-1.4-26.4 0-15.9 1.5-31.4 4.3-46.5.7-3.6-1.2-7.3-4.5-8.8-13.6-6.1-26.1-14.5-36.9-25.1a127.54 127.54 0 0 1-38.7-95.4c.9-32.1 13.8-62.6 36.3-85.6 24.7-25.3 57.9-39.1 93.2-38.7 31.9.3 62.7 12.6 86 34.4 7.9 7.4 14.7 15.6 20.4 24.4 2 3.1 5.9 4.4 9.3 3.2 17.6-6.1 36.2-10.4 55.3-12.4 5.6-.6 8.8-6.6 6.3-11.6-32.5-64.3-98.9-108.7-175.7-109.9-110.8-1.7-203.2 89.2-203.2 200 0 62.8 28.9 118.8 74.2 155.5-31.8 14.7-61.1 35-86.5 60.4-54.8 54.7-85.8 126.9-87.8 204a8 8 0 0 0 8 8.2h56.1c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5 29.4-29.4 65.4-49.8 104.7-59.7 3.8-1.1 6.4-4.8 5.9-8.8zM824 472c0-109.4-87.9-198.3-196.9-200C516.3 270.3 424 361.2 424 472c0 62.8 29 118.8 74.2 155.5a300.95 300.95 0 0 0-86.4 60.4C357 742.6 326 814.8 324 891.8a8 8 0 0 0 8 8.2h56c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5C505.8 695.7 563 672 624 672c110.4 0 200-89.5 200-200zm-109.5 90.5C690.3 586.7 658.2 600 624 600s-66.3-13.3-90.5-37.5a127.26 127.26 0 0 1-37.5-91.8c.3-32.8 13.4-64.5 36.3-88 24-24.6 56.1-38.3 90.4-38.7 33.9-.3 66.8 12.9 91 36.6 24.8 24.3 38.4 56.8 38.4 91.4-.1 34.2-13.4 66.3-37.6 90.5z'));
  exports.UserOutline = getIcon('user', outline, getNode(newViewBox, 'M858.5 763.6a374 374 0 0 0-80.6-119.5 375.63 375.63 0 0 0-119.5-80.6c-.4-.2-.8-.3-1.2-.5C719.5 518 760 444.7 760 362c0-137-111-248-248-248S264 225 264 362c0 82.7 40.5 156 102.8 201.1-.4.2-.8.3-1.2.5-44.8 18.9-85 46-119.5 80.6a375.63 375.63 0 0 0-80.6 119.5A371.7 371.7 0 0 0 136 901.8a8 8 0 0 0 8 8.2h60c4.4 0 7.9-3.5 8-7.8 2-77.2 33-149.5 87.8-204.3 56.7-56.7 132-87.9 212.2-87.9s155.5 31.2 212.2 87.9C779 752.7 810 825 812 902.2c.1 4.4 3.6 7.8 8 7.8h60a8 8 0 0 0 8-8.2c-1-47.8-10.9-94.3-29.5-138.2zM512 534c-45.9 0-89.1-17.9-121.6-50.4S340 407.9 340 362c0-45.9 17.9-89.1 50.4-121.6S466.1 190 512 190s89.1 17.9 121.6 50.4S684 316.1 684 362c0 45.9-17.9 89.1-50.4 121.6S557.9 534 512 534z'));
  exports.UserDeleteOutline = getIcon('user-delete', outline, getNode(newViewBox, 'M678.3 655.4c24.2-13 51.9-20.4 81.4-20.4h.1c3 0 4.4-3.6 2.2-5.6a371.67 371.67 0 0 0-103.7-65.8c-.4-.2-.8-.3-1.2-.5C719.2 518 759.6 444.7 759.6 362c0-137-110.8-248-247.5-248S264.7 225 264.7 362c0 82.7 40.4 156 102.6 201.1-.4.2-.8.3-1.2.5-44.7 18.9-84.8 46-119.3 80.6a373.42 373.42 0 0 0-80.4 119.5A373.6 373.6 0 0 0 137 901.8a8 8 0 0 0 8 8.2h59.9c4.3 0 7.9-3.5 8-7.8 2-77.2 32.9-149.5 87.6-204.3C357 641.2 432.2 610 512.2 610c56.7 0 111.1 15.7 158 45.1a8.1 8.1 0 0 0 8.1.3zM512.2 534c-45.8 0-88.9-17.9-121.4-50.4A171.2 171.2 0 0 1 340.5 362c0-45.9 17.9-89.1 50.3-121.6S466.3 190 512.2 190s88.9 17.9 121.4 50.4A171.2 171.2 0 0 1 683.9 362c0 45.9-17.9 89.1-50.3 121.6C601.1 516.1 558 534 512.2 534zM880 772H640c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h240c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z'));
  exports.UsergroupDeleteOutline = getIcon('usergroup-delete', outline, getNode(newViewBox, 'M888 784H664c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h224c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM373.5 510.4c-.9-8.7-1.4-17.5-1.4-26.4 0-15.9 1.5-31.4 4.3-46.5.7-3.6-1.2-7.3-4.5-8.8-13.6-6.1-26.1-14.5-36.9-25.1a127.54 127.54 0 0 1-38.7-95.4c.9-32.1 13.8-62.6 36.3-85.6 24.7-25.3 57.9-39.1 93.2-38.7 31.9.3 62.7 12.6 86 34.4 7.9 7.4 14.7 15.6 20.4 24.4 2 3.1 5.9 4.4 9.3 3.2 17.6-6.1 36.2-10.4 55.3-12.4 5.6-.6 8.8-6.6 6.3-11.6-32.5-64.3-98.9-108.7-175.7-109.9-110.9-1.7-203.3 89.2-203.3 199.9 0 62.8 28.9 118.8 74.2 155.5-31.8 14.7-61.1 35-86.5 60.4-54.8 54.7-85.8 126.9-87.8 204a8 8 0 0 0 8 8.2h56.1c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5 29.4-29.4 65.4-49.8 104.7-59.7 3.9-1 6.5-4.7 6-8.7zM824 484c0-109.4-87.9-198.3-196.9-200C516.3 282.3 424 373.2 424 484c0 62.8 29 118.8 74.2 155.5a300.95 300.95 0 0 0-86.4 60.4C357 754.6 326 826.8 324 903.8a8 8 0 0 0 8 8.2h56c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5C505.8 707.7 563 684 624 684c110.4 0 200-89.5 200-200zm-109.5 90.5C690.3 598.7 658.2 612 624 612s-66.3-13.3-90.5-37.5a127.26 127.26 0 0 1-37.5-91.8c.3-32.8 13.4-64.5 36.3-88 24-24.6 56.1-38.3 90.4-38.7 33.9-.3 66.8 12.9 91 36.6 24.8 24.3 38.4 56.8 38.4 91.4-.1 34.2-13.4 66.3-37.6 90.5z'));
  exports.VerticalAlignBottomOutline = getIcon('vertical-align-bottom', outline, getNode(newViewBox, 'M859.9 780H164.1c-4.5 0-8.1 3.6-8.1 8v60c0 4.4 3.6 8 8.1 8h695.8c4.5 0 8.1-3.6 8.1-8v-60c0-4.4-3.6-8-8.1-8zM505.7 669a8 8 0 0 0 12.6 0l112-141.7c4.1-5.2.4-12.9-6.3-12.9h-74.1V176c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v338.3H400c-6.7 0-10.4 7.7-6.3 12.9l112 141.8z'));
  exports.VerticalAlignMiddleOutline = getIcon('vertical-align-middle', outline, getNode(newViewBox, 'M859.9 474H164.1c-4.5 0-8.1 3.6-8.1 8v60c0 4.4 3.6 8 8.1 8h695.8c4.5 0 8.1-3.6 8.1-8v-60c0-4.4-3.6-8-8.1-8zm-353.6-74.7c2.9 3.7 8.5 3.7 11.3 0l100.8-127.5c3.7-4.7.4-11.7-5.7-11.7H550V104c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v156h-62.8c-6 0-9.4 7-5.7 11.7l100.8 127.6zm11.4 225.4a7.14 7.14 0 0 0-11.3 0L405.6 752.3a7.23 7.23 0 0 0 5.7 11.7H474v156c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V764h62.8c6 0 9.4-7 5.7-11.7L517.7 624.7z'));
  exports.VerticalAlignTopOutline = getIcon('vertical-align-top', outline, getNode(newViewBox, 'M859.9 168H164.1c-4.5 0-8.1 3.6-8.1 8v60c0 4.4 3.6 8 8.1 8h695.8c4.5 0 8.1-3.6 8.1-8v-60c0-4.4-3.6-8-8.1-8zM518.3 355a8 8 0 0 0-12.6 0l-112 141.7a7.98 7.98 0 0 0 6.3 12.9h73.9V848c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V509.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 355z'));
  exports.VerticalRightOutline = getIcon('vertical-right', outline, getNode(newViewBox, 'M326 164h-64c-4.4 0-8 3.6-8 8v688c0 4.4 3.6 8 8 8h64c4.4 0 8-3.6 8-8V172c0-4.4-3.6-8-8-8zm444 72.4V164c0-6.8-7.9-10.5-13.1-6.1L335 512l421.9 354.1c5.2 4.4 13.1.7 13.1-6.1v-72.4c0-9.4-4.2-18.4-11.4-24.5L459.4 512l299.2-251.1c7.2-6.1 11.4-15.1 11.4-24.5z'));
  exports.VerticalLeftOutline = getIcon('vertical-left', outline, getNode(newViewBox, 'M762 164h-64c-4.4 0-8 3.6-8 8v688c0 4.4 3.6 8 8 8h64c4.4 0 8-3.6 8-8V172c0-4.4-3.6-8-8-8zm-508 0v72.4c0 9.5 4.2 18.4 11.4 24.5L564.6 512 265.4 763.1c-7.2 6.1-11.4 15-11.4 24.5V860c0 6.8 7.9 10.5 13.1 6.1L689 512 267.1 157.9A7.95 7.95 0 0 0 254 164z'));
  exports.WifiOutline = getIcon('wifi', outline, getNode(newViewBox, 'M723 620.5C666.8 571.6 593.4 542 513 542s-153.8 29.6-210.1 78.6a8.1 8.1 0 0 0-.8 11.2l36 42.9c2.9 3.4 8 3.8 11.4.9C393.1 637.2 450.3 614 513 614s119.9 23.2 163.5 61.5c3.4 2.9 8.5 2.5 11.4-.9l36-42.9c2.8-3.3 2.4-8.3-.9-11.2zm117.4-140.1C751.7 406.5 637.6 362 513 362s-238.7 44.5-327.5 118.4a8.05 8.05 0 0 0-1 11.3l36 42.9c2.8 3.4 7.9 3.8 11.2 1C308 472.2 406.1 434 513 434s205 38.2 281.2 101.6c3.4 2.8 8.4 2.4 11.2-1l36-42.9c2.8-3.4 2.4-8.5-1-11.3zm116.7-139C835.7 241.8 680.3 182 511 182c-168.2 0-322.6 59-443.7 157.4a8 8 0 0 0-1.1 11.4l36 42.9c2.8 3.3 7.8 3.8 11.1 1.1C222 306.7 360.3 254 511 254c151.8 0 291 53.5 400 142.7 3.4 2.8 8.4 2.3 11.2-1.1l36-42.9c2.9-3.4 2.4-8.5-1.1-11.3zM448 778a64 64 0 1 0 128 0 64 64 0 1 0-128 0z'));
  exports.ZhihuOutline = getIcon('zhihu', outline, getNode(newViewBox, 'M564.7 230.1V803h60l25.2 71.4L756.3 803h131.5V230.1H564.7zm247.7 497h-59.9l-75.1 50.4-17.8-50.4h-18V308.3h170.7v418.8zM526.1 486.9H393.3c2.1-44.9 4.3-104.3 6.6-172.9h130.9l-.1-8.1c0-.6-.2-14.7-2.3-29.1-2.1-15-6.6-34.9-21-34.9H287.8c4.4-20.6 15.7-69.7 29.4-93.8l6.4-11.2-12.9-.7c-.8 0-19.6-.9-41.4 10.6-35.7 19-51.7 56.4-58.7 84.4-18.4 73.1-44.6 123.9-55.7 145.6-3.3 6.4-5.3 10.2-6.2 12.8-1.8 4.9-.8 9.8 2.8 13 10.5 9.5 38.2-2.9 38.5-3 .6-.3 1.3-.6 2.2-1 13.9-6.3 55.1-25 69.8-84.5h56.7c.7 32.2 3.1 138.4 2.9 172.9h-141l-2.1 1.5c-23.1 16.9-30.5 63.2-30.8 65.2l-1.4 9.2h167c-12.3 78.3-26.5 113.4-34 127.4-3.7 7-7.3 14-10.7 20.8-21.3 42.2-43.4 85.8-126.3 153.6-3.6 2.8-7 8-4.8 13.7 2.4 6.3 9.3 9.1 24.6 9.1 5.4 0 11.8-.3 19.4-1 49.9-4.4 100.8-18 135.1-87.6 17-35.1 31.7-71.7 43.9-108.9L497 850l5-12c.8-1.9 19-46.3 5.1-95.9l-.5-1.8-108.1-123-22 16.6c6.4-26.1 10.6-49.9 12.5-71.1h158.7v-8c0-40.1-18.5-63.9-19.2-64.9l-2.4-3z'));
  exports.WeiboOutline = getIcon('weibo', outline, getNode(newViewBox, 'M457.3 543c-68.1-17.7-145 16.2-174.6 76.2-30.1 61.2-1 129.1 67.8 151.3 71.2 23 155.2-12.2 184.4-78.3 28.7-64.6-7.2-131-77.6-149.2zm-52 156.2c-13.8 22.1-43.5 31.7-65.8 21.6-22-10-28.5-35.7-14.6-57.2 13.7-21.4 42.3-31 64.4-21.7 22.4 9.5 29.6 35 16 57.3zm45.5-58.5c-5 8.6-16.1 12.7-24.7 9.1-8.5-3.5-11.2-13.1-6.4-21.5 5-8.4 15.6-12.4 24.1-9.1 8.7 3.2 11.8 12.9 7 21.5zm334.5-197.2c15 4.8 31-3.4 35.9-18.3 11.8-36.6 4.4-78.4-23.2-109a111.39 111.39 0 0 0-106-34.3 28.45 28.45 0 0 0-21.9 33.8 28.39 28.39 0 0 0 33.8 21.8c18.4-3.9 38.3 1.8 51.9 16.7a54.2 54.2 0 0 1 11.3 53.3 28.45 28.45 0 0 0 18.2 36zm99.8-206c-56.7-62.9-140.4-86.9-217.7-70.5a32.98 32.98 0 0 0-25.4 39.3 33.12 33.12 0 0 0 39.3 25.5c55-11.7 114.4 5.4 154.8 50.1 40.3 44.7 51.2 105.7 34 159.1-5.6 17.4 3.9 36 21.3 41.7 17.4 5.6 36-3.9 41.6-21.2v-.1c24.1-75.4 8.9-161.1-47.9-223.9zM729 499c-12.2-3.6-20.5-6.1-14.1-22.1 13.8-34.7 15.2-64.7.3-86-28-40.1-104.8-37.9-192.8-1.1 0 0-27.6 12.1-20.6-9.8 13.5-43.5 11.5-79.9-9.6-101-47.7-47.8-174.6 1.8-283.5 110.6C127.3 471.1 80 557.5 80 632.2 80 775.1 263.2 862 442.5 862c235 0 391.3-136.5 391.3-245 0-65.5-55.2-102.6-104.8-118zM443 810.8c-143 14.1-266.5-50.5-275.8-144.5-9.3-93.9 99.2-181.5 242.2-195.6 143-14.2 266.5 50.5 275.8 144.4C694.4 709 586 796.6 443 810.8z'));
  exports.WomanOutline = getIcon('woman', outline, getNode(newViewBox, 'M712.8 548.8c53.6-53.6 83.2-125 83.2-200.8 0-75.9-29.5-147.2-83.2-200.8C659.2 93.6 587.8 64 512 64s-147.2 29.5-200.8 83.2C257.6 200.9 228 272.1 228 348c0 63.8 20.9 124.4 59.4 173.9 7.3 9.4 15.2 18.3 23.7 26.9 8.5 8.5 17.5 16.4 26.8 23.7 39.6 30.8 86.3 50.4 136.1 57V736H360c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h114v140c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V812h114c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8H550V629.5c61.5-8.2 118.2-36.1 162.8-80.7zM512 556c-55.6 0-107.7-21.6-147.1-60.9C325.6 455.8 304 403.6 304 348s21.6-107.7 60.9-147.1C404.2 161.5 456.4 140 512 140s107.7 21.6 147.1 60.9C698.4 240.2 720 292.4 720 348s-21.6 107.7-60.9 147.1C619.7 534.4 567.6 556 512 556z'));
  exports.ZoomInOutline = getIcon('zoom-in', outline, getNode(newViewBox, 'M637 443H519V309c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v134H325c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h118v134c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V519h118c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm284 424L775 721c122.1-148.9 113.6-369.5-26-509-148-148.1-388.4-148.1-537 0-148.1 148.6-148.1 389 0 537 139.5 139.6 360.1 148.1 509 26l146 146c3.2 2.8 8.3 2.8 11 0l43-43c2.8-2.7 2.8-7.8 0-11zM696 696c-118.8 118.7-311.2 118.7-430 0-118.7-118.8-118.7-311.2 0-430 118.8-118.7 311.2-118.7 430 0 118.7 118.8 118.7 311.2 0 430z'));
  exports.AccountBookTwoTone = getIcon('account-book', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M712 304c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-48H384v48c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-48H184v584h656V256H712v48zm-65.6 121.8l-89.3 164.1h49.1c4.4 0 8 3.6 8 8v21.3c0 4.4-3.6 8-8 8h-65.4v33.7h65.4c4.4 0 8 3.6 8 8v21.3c0 4.4-3.6 8-8 8h-65.4V752c0 4.4-3.6 8-8 8h-41.3c-4.4 0-8-3.6-8-8v-53.8h-65.1c-4.4 0-8-3.6-8-8v-21.3c0-4.4 3.6-8 8-8h65.1v-33.7h-65.1c-4.4 0-8-3.6-8-8v-21.3c0-4.4 3.6-8 8-8H467l-89.3-164c-2.1-3.9-.7-8.8 3.2-10.9 1.1-.7 2.5-1 3.8-1h46a8 8 0 0 1 7.1 4.4l73.4 145.4h2.8l73.4-145.4c1.3-2.7 4.1-4.4 7.1-4.4h45c4.5 0 8 3.6 7.9 8 0 1.3-.4 2.6-1 3.8z'
      ], [
          primaryColor,
          'M639.5 414h-45c-3 0-5.8 1.7-7.1 4.4L514 563.8h-2.8l-73.4-145.4a8 8 0 0 0-7.1-4.4h-46c-1.3 0-2.7.3-3.8 1-3.9 2.1-5.3 7-3.2 10.9l89.3 164h-48.6c-4.4 0-8 3.6-8 8v21.3c0 4.4 3.6 8 8 8h65.1v33.7h-65.1c-4.4 0-8 3.6-8 8v21.3c0 4.4 3.6 8 8 8h65.1V752c0 4.4 3.6 8 8 8h41.3c4.4 0 8-3.6 8-8v-53.8h65.4c4.4 0 8-3.6 8-8v-21.3c0-4.4-3.6-8-8-8h-65.4v-33.7h65.4c4.4 0 8-3.6 8-8v-21.3c0-4.4-3.6-8-8-8h-49.1l89.3-164.1c.6-1.2 1-2.5 1-3.8.1-4.4-3.4-8-7.9-8z'
      ], [
          primaryColor,
          'M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v584z'
      ]);
  });
  exports.ZoomOutOutline = getIcon('zoom-out', outline, getNode(newViewBox, 'M637 443H325c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h312c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm284 424L775 721c122.1-148.9 113.6-369.5-26-509-148-148.1-388.4-148.1-537 0-148.1 148.6-148.1 389 0 537 139.5 139.6 360.1 148.1 509 26l146 146c3.2 2.8 8.3 2.8 11 0l43-43c2.8-2.7 2.8-7.8 0-11zM696 696c-118.8 118.7-311.2 118.7-430 0-118.7-118.8-118.7-311.2 0-430 118.8-118.7 311.2-118.7 430 0 118.7 118.8 118.7 311.2 0 430z'));
  exports.AlertTwoTone = getIcon('alert', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M340 585c0-5.5 4.5-10 10-10h44c5.5 0 10 4.5 10 10v171h355V563c0-136.4-110.6-247-247-247S265 426.6 265 563v193h75V585z'
      ], [
          primaryColor,
          'M216.9 310.5l39.6-39.6c3.1-3.1 3.1-8.2 0-11.3l-67.9-67.9a8.03 8.03 0 0 0-11.3 0l-39.6 39.6a8.03 8.03 0 0 0 0 11.3l67.9 67.9c3.1 3.1 8.1 3.1 11.3 0zm669.6-79.2l-39.6-39.6a8.03 8.03 0 0 0-11.3 0l-67.9 67.9a8.03 8.03 0 0 0 0 11.3l39.6 39.6c3.1 3.1 8.2 3.1 11.3 0l67.9-67.9c3.1-3.2 3.1-8.2 0-11.3zM484 180h56c4.4 0 8-3.6 8-8V76c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v96c0 4.4 3.6 8 8 8zm348 712H192c-17.7 0-32 14.3-32 32v24c0 4.4 3.6 8 8 8h688c4.4 0 8-3.6 8-8v-24c0-17.7-14.3-32-32-32zm-639-96c0 17.7 14.3 32 32 32h574c17.7 0 32-14.3 32-32V563c0-176.2-142.8-319-319-319S193 386.8 193 563v233zm72-233c0-136.4 110.6-247 247-247s247 110.6 247 247v193H404V585c0-5.5-4.5-10-10-10h-44c-5.5 0-10 4.5-10 10v171h-75V563z'
      ]);
  });
  exports.ApiTwoTone = getIcon('api', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M148.2 674.6zm106.7-92.3c-25 25-38.7 58.1-38.7 93.4s13.8 68.5 38.7 93.4c25 25 58.1 38.7 93.4 38.7 35.3 0 68.5-13.8 93.4-38.7l59.4-59.4-186.8-186.8-59.4 59.4zm420.8-366.1c-35.3 0-68.5 13.8-93.4 38.7l-59.4 59.4 186.8 186.8 59.4-59.4c24.9-25 38.7-58.1 38.7-93.4s-13.8-68.5-38.7-93.4c-25-25-58.1-38.7-93.4-38.7z'
      ], [
          primaryColor,
          'M578.9 546.7a8.03 8.03 0 0 0-11.3 0L501 613.3 410.7 523l66.7-66.7c3.1-3.1 3.1-8.2 0-11.3L441 408.6a8.03 8.03 0 0 0-11.3 0L363 475.3l-43-43a7.85 7.85 0 0 0-5.7-2.3c-2 0-4.1.8-5.7 2.3L206.8 534.2a199.45 199.45 0 0 0-58.6 140.4c-.2 39.5 11.2 79.1 34.3 113.1l-76.1 76.1a8.03 8.03 0 0 0 0 11.3l42.4 42.4c1.6 1.6 3.6 2.3 5.7 2.3s4.1-.8 5.7-2.3l76.1-76.1c33.7 22.9 72.9 34.3 112.1 34.3 51.2 0 102.4-19.5 141.5-58.6l101.9-101.9c3.1-3.1 3.1-8.2 0-11.3l-43-43 66.7-66.7c3.1-3.1 3.1-8.2 0-11.3l-36.6-36.2zM441.7 769.1a131.32 131.32 0 0 1-93.4 38.7c-35.3 0-68.4-13.7-93.4-38.7-24.9-24.9-38.7-58.1-38.7-93.4s13.7-68.4 38.7-93.4l59.4-59.4 186.8 186.8-59.4 59.4zm476-620.3l-42.4-42.4c-1.6-1.6-3.6-2.3-5.7-2.3s-4.1.8-5.7 2.3l-76.1 76.1a199.27 199.27 0 0 0-112.1-34.3c-51.2 0-102.4 19.5-141.5 58.6L432.3 308.7a8.03 8.03 0 0 0 0 11.3L704 591.7c1.6 1.6 3.6 2.3 5.7 2.3 2 0 4.1-.8 5.7-2.3l101.9-101.9c68.9-69 77-175.7 24.3-253.5l76.1-76.1c3.1-3.2 3.1-8.3 0-11.4zM769.1 441.7l-59.4 59.4-186.8-186.8 59.4-59.4c24.9-24.9 58.1-38.7 93.4-38.7s68.4 13.7 93.4 38.7c24.9 24.9 38.7 58.1 38.7 93.4s-13.8 68.4-38.7 93.4z'
      ]);
  });
  exports.AppstoreTwoTone = getIcon('appstore', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M864 144H560c-8.8 0-16 7.2-16 16v304c0 8.8 7.2 16 16 16h304c8.8 0 16-7.2 16-16V160c0-8.8-7.2-16-16-16zm-52 268H612V212h200v200zM464 544H160c-8.8 0-16 7.2-16 16v304c0 8.8 7.2 16 16 16h304c8.8 0 16-7.2 16-16V560c0-8.8-7.2-16-16-16zm-52 268H212V612h200v200zm52-668H160c-8.8 0-16 7.2-16 16v304c0 8.8 7.2 16 16 16h304c8.8 0 16-7.2 16-16V160c0-8.8-7.2-16-16-16zm-52 268H212V212h200v200zm452 132H560c-8.8 0-16 7.2-16 16v304c0 8.8 7.2 16 16 16h304c8.8 0 16-7.2 16-16V560c0-8.8-7.2-16-16-16zm-52 268H612V612h200v200z'
      ], [
          secondaryColor,
          'M212 212h200v200H212zm400 0h200v200H612zM212 612h200v200H212zm400 0h200v200H612z'
      ]);
  });
  exports.BankTwoTone = getIcon('bank', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [secondaryColor, 'M240.9 393.9h542.2L512 196.7z'], [
          primaryColor,
          'M894 462c30.9 0 43.8-39.7 18.7-58L530.8 126.2a31.81 31.81 0 0 0-37.6 0L111.3 404c-25.1 18.2-12.2 58 18.8 58H192v374h-72c-4.4 0-8 3.6-8 8v52c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-52c0-4.4-3.6-8-8-8h-72V462h62zM381 836H264V462h117v374zm189 0H453V462h117v374zm190 0H642V462h118v374zM240.9 393.9L512 196.7l271.1 197.2H240.9z'
      ]);
  });
  exports.AudioTwoTone = getIcon('audio', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M512 552c54.3 0 98-43.2 98-96V232c0-52.8-43.7-96-98-96s-98 43.2-98 96v224c0 52.8 43.7 96 98 96z'
      ], [
          primaryColor,
          'M842 454c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8 0 140.3-113.7 254-254 254S258 594.3 258 454c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8 0 168.7 126.6 307.9 290 327.6V884H326.7c-13.7 0-24.7 14.3-24.7 32v36c0 4.4 2.8 8 6.2 8h407.6c3.4 0 6.2-3.6 6.2-8v-36c0-17.7-11-32-24.7-32H548V782.1c165.3-18 294-158 294-328.1z'
      ], [
          primaryColor,
          'M512 624c93.9 0 170-75.2 170-168V232c0-92.8-76.1-168-170-168s-170 75.2-170 168v224c0 92.8 76.1 168 170 168zm-98-392c0-52.8 43.7-96 98-96s98 43.2 98 96v224c0 52.8-43.7 96-98 96s-98-43.2-98-96V232z'
      ]);
  });
  exports.BellTwoTone = getIcon('bell', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M512 220c-55.6 0-107.8 21.6-147.1 60.9S304 372.4 304 428v340h416V428c0-55.6-21.6-107.8-60.9-147.1S567.6 220 512 220zm280 208c0-141.1-104.3-257.8-240-277.2v.1c135.7 19.4 240 136 240 277.1zM472 150.9v-.1C336.3 170.2 232 286.9 232 428c0-141.1 104.3-257.7 240-277.1z'
      ], [
          primaryColor,
          'M816 768h-24V428c0-141.1-104.3-257.7-240-277.1V112c0-22.1-17.9-40-40-40s-40 17.9-40 40v38.9c-135.7 19.4-240 136-240 277.1v340h-24c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h216c0 61.8 50.2 112 112 112s112-50.2 112-112h216c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM512 888c-26.5 0-48-21.5-48-48h96c0 26.5-21.5 48-48 48zm208-120H304V428c0-55.6 21.6-107.8 60.9-147.1S456.4 220 512 220c55.6 0 107.8 21.6 147.1 60.9S720 372.4 720 428v340z'
      ]);
  });
  exports.BookTwoTone = getIcon('book', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M832 64H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-260 72h96v209.9L621.5 312 572 347.4V136zM232 888V136h280v296.9c0 3.3 1 6.6 3 9.3a15.9 15.9 0 0 0 22.3 3.7l83.8-59.9 81.4 59.4c2.7 2 6 3.1 9.4 3.1 8.8 0 16-7.2 16-16V136h64v752H232z'
      ], [secondaryColor, 'M668 345.9V136h-96v211.4l49.5-35.4z'], [
          secondaryColor,
          'M727.9 136v296.5c0 8.8-7.2 16-16 16-3.4 0-6.7-1.1-9.4-3.1L621.1 386l-83.8 59.9a15.9 15.9 0 0 1-22.3-3.7c-2-2.7-3-6-3-9.3V136H232v752h559.9V136h-64z'
      ]);
  });
  exports.BoxPlotTwoTone = getIcon('box-plot', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [secondaryColor, 'M296 368h88v288h-88zm152 0h280v288H448z'], [
          primaryColor,
          'M952 224h-52c-4.4 0-8 3.6-8 8v248h-92V304c0-4.4-3.6-8-8-8H232c-4.4 0-8 3.6-8 8v176h-92V232c0-4.4-3.6-8-8-8H72c-4.4 0-8 3.6-8 8v560c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8V548h92v172c0 4.4 3.6 8 8 8h560c4.4 0 8-3.6 8-8V548h92v244c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8V232c0-4.4-3.6-8-8-8zM384 656h-88V368h88v288zm344 0H448V368h280v288z'
      ]);
  });
  exports.BugTwoTone = getIcon('bug', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M308 412v268c0 36.78 9.68 71.96 27.8 102.9a205.39 205.39 0 0 0 73.3 73.3A202.68 202.68 0 0 0 512 884c36.78 0 71.96-9.68 102.9-27.8a205.39 205.39 0 0 0 73.3-73.3A202.68 202.68 0 0 0 716 680V412H308zm484 172v96c0 6.5-.22 12.95-.66 19.35C859.94 728.64 908 796.7 908 876a8 8 0 0 1-8 8h-56a8 8 0 0 1-8-8c0-44.24-23.94-82.89-59.57-103.7a278.63 278.63 0 0 1-22.66 49.02 281.39 281.39 0 0 1-100.45 100.45C611.84 946.07 563.55 960 512 960s-99.84-13.93-141.32-38.23a281.39 281.39 0 0 1-100.45-100.45 278.63 278.63 0 0 1-22.66-49.02A119.95 119.95 0 0 0 188 876a8 8 0 0 1-8 8h-56a8 8 0 0 1-8-8c0-79.3 48.07-147.36 116.66-176.65A284.12 284.12 0 0 1 232 680v-96H84a8 8 0 0 1-8-8v-56a8 8 0 0 1 8-8h148V412c-76.77 0-139-62.23-139-139a8 8 0 0 1 8-8h60a8 8 0 0 1 8 8 63 63 0 0 0 63 63h560a63 63 0 0 0 63-63 8 8 0 0 1 8-8h60a8 8 0 0 1 8 8c0 76.77-62.23 139-139 139v100h148a8 8 0 0 1 8 8v56a8 8 0 0 1-8 8H792zM368 272a8 8 0 0 1-8 8h-56a8 8 0 0 1-8-8c0-40.04 8.78-76.75 25.9-108.07a184.57 184.57 0 0 1 74.03-74.03C427.25 72.78 463.96 64 504 64h16c40.04 0 76.75 8.78 108.07 25.9a184.57 184.57 0 0 1 74.03 74.03C719.22 195.25 728 231.96 728 272a8 8 0 0 1-8 8h-56a8 8 0 0 1-8-8c0-28.33-5.94-53.15-17.08-73.53a112.56 112.56 0 0 0-45.39-45.4C573.15 141.95 548.33 136 520 136h-16c-28.33 0-53.15 5.94-73.53 17.08a112.56 112.56 0 0 0-45.4 45.39C373.95 218.85 368 243.67 368 272z'
      ], [
          secondaryColor,
          'M308 412v268c0 36.78 9.68 71.96 27.8 102.9a205.39 205.39 0 0 0 73.3 73.3A202.68 202.68 0 0 0 512 884c36.78 0 71.96-9.68 102.9-27.8a205.39 205.39 0 0 0 73.3-73.3A202.68 202.68 0 0 0 716 680V412H308z'
      ]);
  });
  exports.BulbTwoTone = getIcon('bulb', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M512 136c-141.4 0-256 114.6-256 256 0 92.5 49.4 176.3 128.1 221.8l35.9 20.8V752h184V634.6l35.9-20.8C718.6 568.3 768 484.5 768 392c0-141.4-114.6-256-256-256z'
      ], [
          primaryColor,
          'M632 888H392c-4.4 0-8 3.6-8 8v32c0 17.7 14.3 32 32 32h192c17.7 0 32-14.3 32-32v-32c0-4.4-3.6-8-8-8zM512 64c-181.1 0-328 146.9-328 328 0 121.4 66 227.4 164 284.1V792c0 17.7 14.3 32 32 32h264c17.7 0 32-14.3 32-32V676.1c98-56.7 164-162.7 164-284.1 0-181.1-146.9-328-328-328zm127.9 549.8L604 634.6V752H420V634.6l-35.9-20.8C305.4 568.3 256 484.5 256 392c0-141.4 114.6-256 256-256s256 114.6 256 256c0 92.5-49.4 176.3-128.1 221.8z'
      ]);
  });
  exports.CalculatorTwoTone = getIcon('calculator', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm256.2-75h-50.8c-2.2 0-4.5-1.1-5.9-2.9L348 718.6l-35.5 43.5a7.38 7.38 0 0 1-5.9 2.9h-50.8c-6.6 0-10.2-7.9-5.8-13.1l62.7-76.8-61.2-74.9c-4.3-5.2-.7-13.1 5.9-13.1h50.9c2.2 0 4.5 1.1 5.9 2.9l34 41.6 34-41.6c1.5-1.9 3.6-2.9 5.9-2.9h50.8c6.6 0 10.2 7.9 5.9 13.1L383.5 675l62.7 76.8c4.2 5.3.6 13.2-6 13.2zM576 335c0-2.2 1.4-4 3.2-4h193.5c1.9 0 3.3 1.8 3.3 4v48c0 2.2-1.4 4-3.2 4H579.2c-1.8 0-3.2-1.8-3.2-4v-48zm0 265c0-2.2 1.4-4 3.2-4h193.5c1.9 0 3.3 1.8 3.3 4v48c0 2.2-1.4 4-3.2 4H579.2c-1.8 0-3.2-1.8-3.2-4v-48zm0 104c0-2.2 1.4-4 3.2-4h193.5c1.9 0 3.3 1.8 3.3 4v48c0 2.2-1.4 4-3.2 4H579.2c-1.8 0-3.2-1.8-3.2-4v-48zM248 335c0-2.2 1.4-4 3.2-4H320v-68.8c0-1.8 1.8-3.2 4-3.2h48c2.2 0 4 1.4 4 3.2V331h68.7c1.9 0 3.3 1.8 3.3 4v48c0 2.2-1.4 4-3.2 4H376v68.7c0 1.9-1.8 3.3-4 3.3h-48c-2.2 0-4-1.4-4-3.2V387h-68.8c-1.8 0-3.2-1.8-3.2-4v-48z'
      ], [
          primaryColor,
          'M383.5 675l61.3-74.8c4.3-5.2.7-13.1-5.9-13.1h-50.8c-2.3 0-4.4 1-5.9 2.9l-34 41.6-34-41.6a7.69 7.69 0 0 0-5.9-2.9h-50.9c-6.6 0-10.2 7.9-5.9 13.1l61.2 74.9-62.7 76.8c-4.4 5.2-.8 13.1 5.8 13.1h50.8c2.3 0 4.4-1 5.9-2.9l35.5-43.5 35.5 43.5c1.4 1.8 3.7 2.9 5.9 2.9h50.8c6.6 0 10.2-7.9 6-13.2L383.5 675zM251.2 387H320v68.8c0 1.8 1.8 3.2 4 3.2h48c2.2 0 4-1.4 4-3.3V387h68.8c1.8 0 3.2-1.8 3.2-4v-48c0-2.2-1.4-4-3.3-4H376v-68.8c0-1.8-1.8-3.2-4-3.2h-48c-2.2 0-4 1.4-4 3.2V331h-68.8c-1.8 0-3.2 1.8-3.2 4v48c0 2.2 1.4 4 3.2 4zm328 369h193.6c1.8 0 3.2-1.8 3.2-4v-48c0-2.2-1.4-4-3.3-4H579.2c-1.8 0-3.2 1.8-3.2 4v48c0 2.2 1.4 4 3.2 4zm0-104h193.6c1.8 0 3.2-1.8 3.2-4v-48c0-2.2-1.4-4-3.3-4H579.2c-1.8 0-3.2 1.8-3.2 4v48c0 2.2 1.4 4 3.2 4zm0-265h193.6c1.8 0 3.2-1.8 3.2-4v-48c0-2.2-1.4-4-3.3-4H579.2c-1.8 0-3.2 1.8-3.2 4v48c0 2.2 1.4 4 3.2 4z'
      ]);
  });
  exports.BuildTwoTone = getIcon('build', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [secondaryColor, 'M144 546h200v200H144zm268-268h200v200H412z'], [
          primaryColor,
          'M916 210H376c-17.7 0-32 14.3-32 32v236H108c-17.7 0-32 14.3-32 32v272c0 17.7 14.3 32 32 32h540c17.7 0 32-14.3 32-32V546h236c17.7 0 32-14.3 32-32V242c0-17.7-14.3-32-32-32zM344 746H144V546h200v200zm268 0H412V546h200v200zm0-268H412V278h200v200zm268 0H680V278h200v200z'
      ]);
  });
  exports.CalendarTwoTone = getIcon('calendar', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M712 304c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-48H384v48c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-48H184v136h656V256H712v48z'
      ], [
          primaryColor,
          'M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zm0-448H184V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136z'
      ]);
  });
  exports.CameraTwoTone = getIcon('camera', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M864 320H677.2l-17.1-47.8-22.9-64.2H386.7l-22.9 64.2-17.1 47.8H160c-4.4 0-8 3.6-8 8v456c0 4.4 3.6 8 8 8h704c4.4 0 8-3.6 8-8V328c0-4.4-3.6-8-8-8zM512 704c-88.4 0-160-71.6-160-160s71.6-160 160-160 160 71.6 160 160-71.6 160-160 160z'
      ], [
          primaryColor,
          'M512 384c-88.4 0-160 71.6-160 160s71.6 160 160 160 160-71.6 160-160-71.6-160-160-160zm0 256c-53 0-96-43-96-96s43-96 96-96 96 43 96 96-43 96-96 96z'
      ], [
          primaryColor,
          'M864 248H728l-32.4-90.8a32.07 32.07 0 0 0-30.2-21.2H358.6c-13.5 0-25.6 8.5-30.1 21.2L296 248H160c-44.2 0-80 35.8-80 80v456c0 44.2 35.8 80 80 80h704c44.2 0 80-35.8 80-80V328c0-44.2-35.8-80-80-80zm8 536c0 4.4-3.6 8-8 8H160c-4.4 0-8-3.6-8-8V328c0-4.4 3.6-8 8-8h186.7l17.1-47.8 22.9-64.2h250.5l22.9 64.2 17.1 47.8H864c4.4 0 8 3.6 8 8v456z'
      ]);
  });
  exports.CarTwoTone = getIcon('car', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M199.6 474L184 517v237h656V517l-15.6-43H199.6zM264 621c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40zm388 75c0 4.4-3.6 8-8 8H380c-4.4 0-8-3.6-8-8v-84c0-4.4 3.6-8 8-8h40c4.4 0 8 3.6 8 8v36h168v-36c0-4.4 3.6-8 8-8h40c4.4 0 8 3.6 8 8v84zm108-75c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40z'
      ], [primaryColor, 'M720 581a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'], [
          primaryColor,
          'M959 413.4L935.3 372a8 8 0 0 0-10.9-2.9l-50.7 29.6-78.3-216.2a63.9 63.9 0 0 0-60.9-44.4H301.2c-34.7 0-65.5 22.4-76.2 55.5l-74.6 205.2-50.8-29.6a8 8 0 0 0-10.9 2.9L65 413.4c-2.2 3.8-.9 8.6 2.9 10.8l60.4 35.2-14.5 40c-1.2 3.2-1.8 6.6-1.8 10v348.2c0 15.7 11.8 28.4 26.3 28.4h67.6c12.3 0 23-9.3 25.6-22.3l7.7-37.7h545.6l7.7 37.7c2.7 13 13.3 22.3 25.6 22.3h67.6c14.5 0 26.3-12.7 26.3-28.4V509.4c0-3.4-.6-6.8-1.8-10l-14.5-40 60.3-35.2a8 8 0 0 0 3-10.8zM292.7 218.1l.5-1.3.4-1.3c1.1-3.3 4.1-5.5 7.6-5.5h427.6l75.4 208H220l72.7-199.9zM840 754H184V517l15.6-43h624.8l15.6 43v237z'
      ], [
          primaryColor,
          'M224 581a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm420 23h-40c-4.4 0-8 3.6-8 8v36H428v-36c0-4.4-3.6-8-8-8h-40c-4.4 0-8 3.6-8 8v84c0 4.4 3.6 8 8 8h264c4.4 0 8-3.6 8-8v-84c0-4.4-3.6-8-8-8z'
      ]);
  });
  exports.CarryOutTwoTone = getIcon('carry-out', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v584z'
      ], [
          secondaryColor,
          'M712 304c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-48H384v48c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-48H184v584h656V256H712v48zm-17.5 128.8L481.9 725.5a16.1 16.1 0 0 1-26 0l-126.4-174c-3.8-5.3 0-12.7 6.5-12.7h55.2c5.2 0 10 2.5 13 6.6l64.7 89 150.9-207.8c3-4.1 7.9-6.6 13-6.6H688c6.5 0 10.3 7.4 6.5 12.8z'
      ], [
          primaryColor,
          'M688 420h-55.2c-5.1 0-10 2.5-13 6.6L468.9 634.4l-64.7-89c-3-4.1-7.8-6.6-13-6.6H336c-6.5 0-10.3 7.4-6.5 12.7l126.4 174a16.1 16.1 0 0 0 26 0l212.6-292.7c3.8-5.4 0-12.8-6.5-12.8z'
      ]);
  });
  exports.CheckCircleTwoTone = getIcon('check-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm193.4 225.7l-210.6 292a31.8 31.8 0 0 1-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.3 0 19.9 5 25.9 13.3l71.2 98.8 157.2-218c6-8.4 15.7-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.4 12.7z'
      ], [
          primaryColor,
          'M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0 0 51.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z'
      ]);
  });
  exports.CheckSquareTwoTone = getIcon('check-square', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm130-367.8h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H688c6.5 0 10.3 7.4 6.5 12.7l-210.6 292a31.8 31.8 0 0 1-51.7 0L307.5 484.9c-3.8-5.3 0-12.7 6.5-12.7z'
      ], [
          primaryColor,
          'M432.2 657.7a31.8 31.8 0 0 0 51.7 0l210.6-292c3.8-5.3 0-12.7-6.5-12.7h-46.9c-10.3 0-19.9 5-25.9 13.3L458 584.3l-71.2-98.8c-6-8.4-15.7-13.3-25.9-13.3H314c-6.5 0-10.3 7.4-6.5 12.7l124.7 172.8z'
      ]);
  });
  exports.ClockCircleTwoTone = getIcon('clock-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm176.5 509.7l-28.6 39a7.99 7.99 0 0 1-11.2 1.7L483.3 569.8a7.92 7.92 0 0 1-3.3-6.5V288c0-4.4 3.6-8 8-8h48.1c4.4 0 8 3.6 8 8v247.5l142.6 103.1c3.6 2.5 4.4 7.5 1.8 11.1z'
      ], [
          primaryColor,
          'M686.7 638.6L544.1 535.5V288c0-4.4-3.6-8-8-8H488c-4.4 0-8 3.6-8 8v275.3c0 2.6 1.2 5 3.3 6.5l165.4 120.6c3.6 2.6 8.6 1.9 11.2-1.7l28.6-39c2.6-3.6 1.8-8.6-1.8-11.1z'
      ]);
  });
  exports.CloseCircleTwoTone = getIcon('close-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm171.8 527.1c1.2 1.5 1.9 3.3 1.9 5.2 0 4.5-3.6 8-8 8l-66-.3-99.3-118.4-99.3 118.5-66.1.3c-4.4 0-8-3.6-8-8 0-1.9.7-3.7 1.9-5.2L471 512.3l-130.1-155a8.32 8.32 0 0 1-1.9-5.2c0-4.5 3.6-8 8-8l66.1.3 99.3 118.4 99.4-118.5 66-.3c4.4 0 8 3.6 8 8 0 1.9-.6 3.8-1.8 5.2l-130.1 155 129.9 154.9z'
      ], [
          primaryColor,
          'M685.8 352c0-4.4-3.6-8-8-8l-66 .3-99.4 118.5-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155-130.1 154.9a8.32 8.32 0 0 0-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3 99.3-118.5L611.7 680l66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.9 512.2l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z'
      ]);
  });
  exports.CloudTwoTone = getIcon('cloud', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M791.9 492l-37.8-10-13.8-36.5c-8.6-22.7-20.6-44.1-35.7-63.4a245.73 245.73 0 0 0-52.4-49.9c-41.1-28.9-89.5-44.2-140-44.2s-98.9 15.3-140 44.2a245.6 245.6 0 0 0-52.4 49.9 240.47 240.47 0 0 0-35.7 63.4l-13.9 36.6-37.9 9.9a125.7 125.7 0 0 0-66.1 43.7A123.1 123.1 0 0 0 140 612c0 33.1 12.9 64.3 36.3 87.7 23.4 23.4 54.5 36.3 87.6 36.3h496.2c33.1 0 64.2-12.9 87.6-36.3A123.3 123.3 0 0 0 884 612c0-56.2-37.8-105.5-92.1-120z'
      ], [
          primaryColor,
          'M811.4 418.7C765.6 297.9 648.9 212 512.2 212S258.8 297.8 213 418.6C127.3 441.1 64 519.1 64 612c0 110.5 89.5 200 199.9 200h496.2C870.5 812 960 722.5 960 612c0-92.7-63.1-170.7-148.6-193.3zm36.3 281a123.07 123.07 0 0 1-87.6 36.3H263.9c-33.1 0-64.2-12.9-87.6-36.3A123.3 123.3 0 0 1 140 612c0-28 9.1-54.3 26.2-76.3a125.7 125.7 0 0 1 66.1-43.7l37.9-9.9 13.9-36.6c8.6-22.8 20.6-44.1 35.7-63.4a245.6 245.6 0 0 1 52.4-49.9c41.1-28.9 89.5-44.2 140-44.2s98.9 15.3 140 44.2c19.9 14 37.5 30.8 52.4 49.9 15.1 19.3 27.1 40.7 35.7 63.4l13.8 36.5 37.8 10c54.3 14.5 92.1 63.8 92.1 120 0 33.1-12.9 64.3-36.3 87.7z'
      ]);
  });
  exports.CloseSquareTwoTone = getIcon('close-square', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm163.9-473.9A7.95 7.95 0 0 1 354 353h58.9c4.7 0 9.2 2.1 12.3 5.7L512 462.2l86.8-103.5c3-3.6 7.5-5.7 12.3-5.7H670c6.8 0 10.5 7.9 6.1 13.1L553.8 512l122.3 145.9c4.4 5.2.7 13.1-6.1 13.1h-58.9c-4.7 0-9.2-2.1-12.3-5.7L512 561.8l-86.8 103.5c-3 3.6-7.5 5.7-12.3 5.7H354c-6.8 0-10.5-7.9-6.1-13.1L470.2 512 347.9 366.1z'
      ], [
          primaryColor,
          'M354 671h58.9c4.8 0 9.3-2.1 12.3-5.7L512 561.8l86.8 103.5c3.1 3.6 7.6 5.7 12.3 5.7H670c6.8 0 10.5-7.9 6.1-13.1L553.8 512l122.3-145.9c4.4-5.2.7-13.1-6.1-13.1h-58.9c-4.8 0-9.3 2.1-12.3 5.7L512 462.2l-86.8-103.5c-3.1-3.6-7.6-5.7-12.3-5.7H354c-6.8 0-10.5 7.9-6.1 13.1L470.2 512 347.9 657.9A7.95 7.95 0 0 0 354 671z'
      ]);
  });
  exports.CodeTwoTone = getIcon('code', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm339.5-223h185c4.1 0 7.5 3.6 7.5 8v48c0 4.4-3.4 8-7.5 8h-185c-4.1 0-7.5-3.6-7.5-8v-48c0-4.4 3.4-8 7.5-8zM308 610.3c0-2.3 1.1-4.6 2.9-6.1L420.7 512l-109.8-92.2a7.63 7.63 0 0 1-2.9-6.1V351c0-6.8 7.9-10.5 13.1-6.1l192 160.9c3.9 3.2 3.9 9.1 0 12.3l-192 161c-5.2 4.4-13.1.7-13.1-6.1v-62.7z'
      ], [
          primaryColor,
          'M321.1 679.1l192-161c3.9-3.2 3.9-9.1 0-12.3l-192-160.9A7.95 7.95 0 0 0 308 351v62.7c0 2.4 1 4.6 2.9 6.1L420.7 512l-109.8 92.2a8.1 8.1 0 0 0-2.9 6.1V673c0 6.8 7.9 10.5 13.1 6.1zM516 673c0 4.4 3.4 8 7.5 8h185c4.1 0 7.5-3.6 7.5-8v-48c0-4.4-3.4-8-7.5-8h-185c-4.1 0-7.5 3.6-7.5 8v48z'
      ]);
  });
  exports.CompassTwoTone = getIcon('compass', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zM327.6 701.7c-2 .9-4.4 0-5.3-2.1-.4-1-.4-2.2 0-3.2L421 470.9 553.1 603l-225.5 98.7zm375.1-375.1L604 552.1 471.9 420l225.5-98.7c2-.9 4.4 0 5.3 2.1.4 1 .4 2.1 0 3.2z'
      ], [
          primaryColor,
          'M322.3 696.4c-.4 1-.4 2.2 0 3.2.9 2.1 3.3 3 5.3 2.1L553.1 603 421 470.9l-98.7 225.5zm375.1-375.1L471.9 420 604 552.1l98.7-225.5c.4-1.1.4-2.2 0-3.2-.9-2.1-3.3-3-5.3-2.1z'
      ], [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ]);
  });
  exports.ContactsTwoTone = getIcon('contacts', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M460.3 526a51.7 52 0 1 0 103.4 0 51.7 52 0 1 0-103.4 0z'
      ], [
          secondaryColor,
          'M768 352c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-56H548v56c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-56H328v56c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-56H136v496h752V296H768v56zM661 736h-43.8c-4.2 0-7.6-3.3-7.9-7.5-3.8-50.5-46-90.5-97.2-90.5s-93.4 39.9-97.2 90.5c-.3 4.2-3.7 7.5-7.9 7.5h-43.9a8 8 0 0 1-8-8.4c2.8-53.3 31.9-99.6 74.6-126.1-18.1-20-29.1-46.4-29.1-75.5 0-61.9 49.9-112 111.4-112s111.4 50.1 111.4 112c0 29.1-11 55.6-29.1 75.5 42.7 26.4 71.9 72.8 74.7 126.1a8 8 0 0 1-8 8.4z'
      ], [
          primaryColor,
          'M594.3 601.5a111.8 111.8 0 0 0 29.1-75.5c0-61.9-49.9-112-111.4-112s-111.4 50.1-111.4 112c0 29.1 11 55.5 29.1 75.5a158.09 158.09 0 0 0-74.6 126.1 8 8 0 0 0 8 8.4H407c4.2 0 7.6-3.3 7.9-7.5 3.8-50.6 46-90.5 97.2-90.5s93.4 40 97.2 90.5c.3 4.2 3.7 7.5 7.9 7.5H661a8 8 0 0 0 8-8.4c-2.8-53.3-32-99.7-74.7-126.1zM512 578c-28.5 0-51.7-23.3-51.7-52s23.2-52 51.7-52 51.7 23.3 51.7 52-23.2 52-51.7 52z'
      ], [
          primaryColor,
          'M928 224H768v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H548v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H328v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H96c-17.7 0-32 14.3-32 32v576c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V256c0-17.7-14.3-32-32-32zm-40 568H136V296h120v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56h148v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56h148v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56h120v496z'
      ]);
  });
  exports.ContainerTwoTone = getIcon('container', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M635 771.7c-34.5 28.6-78.2 44.3-123 44.3s-88.5-15.8-123-44.3a194.02 194.02 0 0 1-59.1-84.7H232v201h560V687h-97.9c-11.6 32.8-32 62.3-59.1 84.7z'
      ], [
          primaryColor,
          'M320 501h384c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H320c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z'
      ], [
          primaryColor,
          'M832 64H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-40 824H232V687h97.9c11.6 32.8 32 62.3 59.1 84.7 34.5 28.5 78.2 44.3 123 44.3s88.5-15.7 123-44.3c27.1-22.4 47.5-51.9 59.1-84.7H792v201zm0-264H643.6l-5.2 24.7C626.4 708.5 573.2 752 512 752s-114.4-43.5-126.5-103.3l-5.2-24.7H232V136h560v488z'
      ], [
          primaryColor,
          'M320 341h384c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H320c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z'
      ]);
  });
  exports.ControlTwoTone = getIcon('control', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M616 440a36 36 0 1 0 72 0 36 36 0 1 0-72 0zM340.4 601.5l1.5 2.4c0 .1.1.1.1.2l.9 1.2c.1.1.2.2.2.3 1 1.3 2 2.5 3.2 3.6l.2.2c.4.4.8.8 1.2 1.1.8.8 1.7 1.5 2.6 2.1h.1l1.2.9c.1.1.3.2.4.3 1.2.8 2.5 1.6 3.9 2.2.2.1.5.2.7.4.4.2.7.3 1.1.5.3.1.7.3 1 .4.5.2 1 .4 1.5.5.4.1.9.3 1.3.4l.9.3 1.4.3c.2.1.5.1.7.2.7.1 1.4.3 2.1.4.2 0 .4 0 .6.1.6.1 1.1.1 1.7.2.2 0 .4 0 .7.1.8 0 1.5.1 2.3.1s1.5 0 2.3-.1c.2 0 .4 0 .7-.1.6 0 1.2-.1 1.7-.2.2 0 .4 0 .6-.1.7-.1 1.4-.2 2.1-.4.2-.1.5-.1.7-.2l1.4-.3.9-.3c.4-.1.9-.3 1.3-.4.5-.2 1-.4 1.5-.5.3-.1.7-.3 1-.4.4-.2.7-.3 1.1-.5.2-.1.5-.2.7-.4 1.3-.7 2.6-1.4 3.9-2.2.1-.1.3-.2.4-.3l1.2-.9h.1c.9-.7 1.8-1.4 2.6-2.1.4-.4.8-.7 1.2-1.1l.2-.2c1.1-1.1 2.2-2.4 3.2-3.6.1-.1.2-.2.2-.3l.9-1.2c0-.1.1-.1.1-.2l1.5-2.4c.1-.2.2-.3.3-.5 2.7-5.1 4.3-10.9 4.3-17s-1.6-12-4.3-17c-.1-.2-.2-.4-.3-.5l-1.5-2.4c0-.1-.1-.1-.1-.2l-.9-1.2c-.1-.1-.2-.2-.2-.3-1-1.3-2-2.5-3.2-3.6l-.2-.2c-.4-.4-.8-.8-1.2-1.1-.8-.8-1.7-1.5-2.6-2.1h-.1l-1.2-.9c-.1-.1-.3-.2-.4-.3-1.2-.8-2.5-1.6-3.9-2.2-.2-.1-.5-.2-.7-.4-.4-.2-.7-.3-1.1-.5-.3-.1-.7-.3-1-.4-.5-.2-1-.4-1.5-.5-.4-.1-.9-.3-1.3-.4l-.9-.3-1.4-.3c-.2-.1-.5-.1-.7-.2-.7-.1-1.4-.3-2.1-.4-.2 0-.4 0-.6-.1-.6-.1-1.1-.1-1.7-.2-.2 0-.4 0-.7-.1-.8 0-1.5-.1-2.3-.1s-1.5 0-2.3.1c-.2 0-.4 0-.7.1-.6 0-1.2.1-1.7.2-.2 0-.4 0-.6.1-.7.1-1.4.2-2.1.4-.2.1-.5.1-.7.2l-1.4.3-.9.3c-.4.1-.9.3-1.3.4-.5.2-1 .4-1.5.5-.3.1-.7.3-1 .4-.4.2-.7.3-1.1.5-.2.1-.5.2-.7.4-1.3.7-2.6 1.4-3.9 2.2-.1.1-.3.2-.4.3l-1.2.9h-.1c-.9.7-1.8 1.4-2.6 2.1-.4.4-.8.7-1.2 1.1l-.2.2a54.8 54.8 0 0 0-3.2 3.6c-.1.1-.2.2-.2.3l-.9 1.2c0 .1-.1.1-.1.2l-1.5 2.4c-.1.2-.2.3-.3.5-2.7 5.1-4.3 10.9-4.3 17s1.6 12 4.3 17c.1.2.2.3.3.5z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm436.4-499.1c-.2 0-.3.1-.4.1v-77c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v77c-.2 0-.3-.1-.4-.1 42 13.4 72.4 52.7 72.4 99.1 0 46.4-30.4 85.7-72.4 99.1.2 0 .3-.1.4-.1v221c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V539c.2 0 .3.1.4.1-42-13.4-72.4-52.7-72.4-99.1 0-46.4 30.4-85.7 72.4-99.1zM340 485V264c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v221c41.7 13.6 72 52.8 72 99s-30.3 85.5-72 99v77c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-77c-41.7-13.6-72-52.8-72-99s30.3-85.5 72-99z'
      ], [
          primaryColor,
          'M340 683v77c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-77c41.7-13.5 72-52.8 72-99s-30.3-85.4-72-99V264c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v221c-41.7 13.5-72 52.8-72 99s30.3 85.4 72 99zm.1-116c.1-.2.2-.3.3-.5l1.5-2.4c0-.1.1-.1.1-.2l.9-1.2c0-.1.1-.2.2-.3 1-1.2 2.1-2.5 3.2-3.6l.2-.2c.4-.4.8-.7 1.2-1.1.8-.7 1.7-1.4 2.6-2.1h.1l1.2-.9c.1-.1.3-.2.4-.3 1.3-.8 2.6-1.5 3.9-2.2.2-.2.5-.3.7-.4.4-.2.7-.3 1.1-.5.3-.1.7-.3 1-.4.5-.1 1-.3 1.5-.5.4-.1.9-.3 1.3-.4l.9-.3 1.4-.3c.2-.1.5-.1.7-.2.7-.2 1.4-.3 2.1-.4.2-.1.4-.1.6-.1.5-.1 1.1-.2 1.7-.2.3-.1.5-.1.7-.1.8-.1 1.5-.1 2.3-.1s1.5.1 2.3.1c.3.1.5.1.7.1.6.1 1.1.1 1.7.2.2.1.4.1.6.1.7.1 1.4.3 2.1.4.2.1.5.1.7.2l1.4.3.9.3c.4.1.9.3 1.3.4.5.1 1 .3 1.5.5.3.1.7.3 1 .4.4.2.7.3 1.1.5.2.2.5.3.7.4 1.4.6 2.7 1.4 3.9 2.2.1.1.3.2.4.3l1.2.9h.1c.9.6 1.8 1.3 2.6 2.1.4.3.8.7 1.2 1.1l.2.2c1.2 1.1 2.2 2.3 3.2 3.6 0 .1.1.2.2.3l.9 1.2c0 .1.1.1.1.2l1.5 2.4A36.03 36.03 0 0 1 408 584c0 6.1-1.6 11.9-4.3 17-.1.2-.2.3-.3.5l-1.5 2.4c0 .1-.1.1-.1.2l-.9 1.2c0 .1-.1.2-.2.3-1 1.2-2.1 2.5-3.2 3.6l-.2.2c-.4.4-.8.7-1.2 1.1-.8.7-1.7 1.4-2.6 2.1h-.1l-1.2.9c-.1.1-.3.2-.4.3-1.3.8-2.6 1.5-3.9 2.2-.2.2-.5.3-.7.4-.4.2-.7.3-1.1.5-.3.1-.7.3-1 .4-.5.1-1 .3-1.5.5-.4.1-.9.3-1.3.4l-.9.3-1.4.3c-.2.1-.5.1-.7.2-.7.2-1.4.3-2.1.4-.2.1-.4.1-.6.1-.5.1-1.1.2-1.7.2-.3.1-.5.1-.7.1-.8.1-1.5.1-2.3.1s-1.5-.1-2.3-.1c-.3-.1-.5-.1-.7-.1-.6-.1-1.1-.1-1.7-.2-.2-.1-.4-.1-.6-.1-.7-.1-1.4-.3-2.1-.4-.2-.1-.5-.1-.7-.2l-1.4-.3-.9-.3c-.4-.1-.9-.3-1.3-.4-.5-.1-1-.3-1.5-.5-.3-.1-.7-.3-1-.4-.4-.2-.7-.3-1.1-.5-.2-.2-.5-.3-.7-.4-1.4-.6-2.7-1.4-3.9-2.2-.1-.1-.3-.2-.4-.3l-1.2-.9h-.1c-.9-.6-1.8-1.3-2.6-2.1-.4-.3-.8-.7-1.2-1.1l-.2-.2c-1.2-1.1-2.2-2.3-3.2-3.6 0-.1-.1-.2-.2-.3l-.9-1.2c0-.1-.1-.1-.1-.2l-1.5-2.4c-.1-.2-.2-.3-.3-.5-2.7-5-4.3-10.9-4.3-17s1.6-11.9 4.3-17zm280.3-27.9c-.1 0-.2-.1-.4-.1v221c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V539c-.1 0-.2.1-.4.1 42-13.4 72.4-52.7 72.4-99.1 0-46.4-30.4-85.7-72.4-99.1.1 0 .2.1.4.1v-77c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v77c.1 0 .2-.1.4-.1-42 13.4-72.4 52.7-72.4 99.1 0 46.4 30.4 85.7 72.4 99.1zM652 404c19.9 0 36 16.1 36 36s-16.1 36-36 36-36-16.1-36-36 16.1-36 36-36z'
      ]);
  });
  exports.CopyTwoTone = getIcon('copy', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [secondaryColor, 'M232 706h142c22.1 0 40 17.9 40 40v142h250V264H232v442z'], [
          primaryColor,
          'M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32z'
      ], [
          primaryColor,
          'M704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z'
      ]);
  });
  exports.CreditCardTwoTone = getIcon('credit-card', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M136 792h752V440H136v352zm507-144c0-4.4 3.6-8 8-8h165c4.4 0 8 3.6 8 8v72c0 4.4-3.6 8-8 8H651c-4.4 0-8-3.6-8-8v-72zM136 232h752v120H136z'
      ], [
          primaryColor,
          'M651 728h165c4.4 0 8-3.6 8-8v-72c0-4.4-3.6-8-8-8H651c-4.4 0-8 3.6-8 8v72c0 4.4 3.6 8 8 8z'
      ], [
          primaryColor,
          'M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136V440h752v352zm0-440H136V232h752v120z'
      ]);
  });
  exports.CrownTwoTone = getIcon('crown', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M911.9 283.9v.5L835.5 865c-1 8-7.9 14-15.9 14H204.5c-8.1 0-14.9-6.1-16-14l-76.4-580.6v-.6 1.6L188.5 866c1.1 7.9 7.9 14 16 14h615.1c8 0 14.9-6 15.9-14l76.4-580.6c.1-.5.1-1 0-1.5z'
      ], [
          secondaryColor,
          'M773.6 810.6l53.9-409.4-139.8 86.1L512 252.9 336.3 487.3l-139.8-86.1 53.8 409.4h523.3zm-374.2-189c0-62.1 50.5-112.6 112.6-112.6s112.6 50.5 112.6 112.6v1c0 62.1-50.5 112.6-112.6 112.6s-112.6-50.5-112.6-112.6v-1z'
      ], [
          primaryColor,
          'M512 734.2c61.9 0 112.3-50.2 112.6-112.1v-.5c0-62.1-50.5-112.6-112.6-112.6s-112.6 50.5-112.6 112.6v.5c.3 61.9 50.7 112.1 112.6 112.1zm0-160.9c26.6 0 48.2 21.6 48.2 48.3 0 26.6-21.6 48.3-48.2 48.3s-48.2-21.6-48.2-48.3c0-26.6 21.6-48.3 48.2-48.3z'
      ], [
          primaryColor,
          'M188.5 865c1.1 7.9 7.9 14 16 14h615.1c8 0 14.9-6 15.9-14l76.4-580.6v-.5c.3-6.4-6.7-10.8-12.3-7.4L705 396.4 518.4 147.5a8.06 8.06 0 0 0-12.9 0L319 396.4 124.3 276.5c-5.5-3.4-12.6.9-12.2 7.3v.6L188.5 865zm147.8-377.7L512 252.9l175.7 234.4 139.8-86.1-53.9 409.4H250.3l-53.8-409.4 139.8 86.1z'
      ]);
  });
  exports.CustomerServiceTwoTone = getIcon('customer-service', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [secondaryColor, 'M696 632h128v192H696zm-496 0h128v192H200z'], [
          primaryColor,
          'M512 128c-212.1 0-384 171.9-384 384v360c0 13.3 10.7 24 24 24h184c35.3 0 64-28.7 64-64V624c0-35.3-28.7-64-64-64H200v-48c0-172.3 139.7-312 312-312s312 139.7 312 312v48H688c-35.3 0-64 28.7-64 64v208c0 35.3 28.7 64 64 64h184c13.3 0 24-10.7 24-24V512c0-212.1-171.9-384-384-384zM328 632v192H200V632h128zm496 192H696V632h128v192z'
      ]);
  });
  exports.DashboardTwoTone = getIcon('dashboard', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M512 188c-99.3 0-192.7 38.7-263 109-70.3 70.2-109 163.6-109 263 0 105.6 44.5 205.5 122.6 276h498.8A371.12 371.12 0 0 0 884 560c0-99.3-38.7-192.7-109-263-70.2-70.3-163.6-109-263-109zm-30 44c0-4.4 3.6-8 8-8h44c4.4 0 8 3.6 8 8v80c0 4.4-3.6 8-8 8h-44c-4.4 0-8-3.6-8-8v-80zM270 582c0 4.4-3.6 8-8 8h-80c-4.4 0-8-3.6-8-8v-44c0-4.4 3.6-8 8-8h80c4.4 0 8 3.6 8 8v44zm90.7-204.4l-31.1 31.1a8.03 8.03 0 0 1-11.3 0l-56.6-56.6a8.03 8.03 0 0 1 0-11.3l31.1-31.1c3.1-3.1 8.2-3.1 11.3 0l56.6 56.6c3.1 3.1 3.1 8.2 0 11.3zm291.1 83.5l-84.5 84.5c5 18.7.2 39.4-14.5 54.1a55.95 55.95 0 0 1-79.2 0 55.95 55.95 0 0 1 0-79.2 55.87 55.87 0 0 1 54.1-14.5l84.5-84.5c3.1-3.1 8.2-3.1 11.3 0l28.3 28.3c3.1 3.1 3.1 8.2 0 11.3zm43-52.4l-31.1-31.1a8.03 8.03 0 0 1 0-11.3l56.6-56.6c3.1-3.1 8.2-3.1 11.3 0l31.1 31.1c3.1 3.1 3.1 8.2 0 11.3l-56.6 56.6a8.03 8.03 0 0 1-11.3 0zM846 538v44c0 4.4-3.6 8-8 8h-80c-4.4 0-8-3.6-8-8v-44c0-4.4 3.6-8 8-8h80c4.4 0 8 3.6 8 8z'
      ], [
          primaryColor,
          'M623.5 421.5a8.03 8.03 0 0 0-11.3 0L527.7 506c-18.7-5-39.4-.2-54.1 14.5a55.95 55.95 0 0 0 0 79.2 55.95 55.95 0 0 0 79.2 0 55.87 55.87 0 0 0 14.5-54.1l84.5-84.5c3.1-3.1 3.1-8.2 0-11.3l-28.3-28.3zM490 320h44c4.4 0 8-3.6 8-8v-80c0-4.4-3.6-8-8-8h-44c-4.4 0-8 3.6-8 8v80c0 4.4 3.6 8 8 8z'
      ], [
          primaryColor,
          'M924.8 385.6a446.7 446.7 0 0 0-96-142.4 446.7 446.7 0 0 0-142.4-96C631.1 123.8 572.5 112 512 112s-119.1 11.8-174.4 35.2a446.7 446.7 0 0 0-142.4 96 446.7 446.7 0 0 0-96 142.4C75.8 440.9 64 499.5 64 560c0 132.7 58.3 257.7 159.9 343.1l1.7 1.4c5.8 4.8 13.1 7.5 20.6 7.5h531.7c7.5 0 14.8-2.7 20.6-7.5l1.7-1.4C901.7 817.7 960 692.7 960 560c0-60.5-11.9-119.1-35.2-174.4zM761.4 836H262.6A371.12 371.12 0 0 1 140 560c0-99.4 38.7-192.8 109-263 70.3-70.3 163.7-109 263-109 99.4 0 192.8 38.7 263 109 70.3 70.3 109 163.7 109 263 0 105.6-44.5 205.5-122.6 276z'
      ], [
          primaryColor,
          'M762.7 340.8l-31.1-31.1a8.03 8.03 0 0 0-11.3 0l-56.6 56.6a8.03 8.03 0 0 0 0 11.3l31.1 31.1c3.1 3.1 8.2 3.1 11.3 0l56.6-56.6c3.1-3.1 3.1-8.2 0-11.3zM750 538v44c0 4.4 3.6 8 8 8h80c4.4 0 8-3.6 8-8v-44c0-4.4-3.6-8-8-8h-80c-4.4 0-8 3.6-8 8zM304.1 309.7a8.03 8.03 0 0 0-11.3 0l-31.1 31.1a8.03 8.03 0 0 0 0 11.3l56.6 56.6c3.1 3.1 8.2 3.1 11.3 0l31.1-31.1c3.1-3.1 3.1-8.2 0-11.3l-56.6-56.6zM262 530h-80c-4.4 0-8 3.6-8 8v44c0 4.4 3.6 8 8 8h80c4.4 0 8-3.6 8-8v-44c0-4.4-3.6-8-8-8z'
      ]);
  });
  exports.DeleteTwoTone = getIcon('delete', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [secondaryColor, 'M292.7 840h438.6l24.2-512h-487z'], [
          primaryColor,
          'M864 256H736v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zm-504-72h304v72H360v-72zm371.3 656H292.7l-24.2-512h487l-24.2 512z'
      ]);
  });
  exports.DiffTwoTone = getIcon('diff', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M232 264v624h432V413.8L514.2 264H232zm336 489c0 3.8-3.4 7-7.5 7h-225c-4.1 0-7.5-3.2-7.5-7v-42c0-3.8 3.4-7 7.5-7h225c4.1 0 7.5 3.2 7.5 7v42zm0-262v42c0 3.8-3.4 7-7.5 7H476v84.9c0 3.9-3.1 7.1-7 7.1h-42c-3.8 0-7-3.2-7-7.1V540h-84.5c-4.1 0-7.5-3.2-7.5-7v-42c0-3.9 3.4-7 7.5-7H420v-84.9c0-3.9 3.2-7.1 7-7.1h42c3.9 0 7 3.2 7 7.1V484h84.5c4.1 0 7.5 3.1 7.5 7z'
      ], [
          primaryColor,
          'M854.2 306.6L611.3 72.9c-6-5.7-13.9-8.9-22.2-8.9H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h277l219 210.6V824c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V329.6c0-8.7-3.5-17-9.8-23z'
      ], [
          primaryColor,
          'M553.4 201.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v704c0 17.7 14.3 32 32 32h512c17.7 0 32-14.3 32-32V397.3c0-8.5-3.4-16.6-9.4-22.6L553.4 201.4zM664 888H232V264h282.2L664 413.8V888z'
      ], [
          primaryColor,
          'M476 399.1c0-3.9-3.1-7.1-7-7.1h-42c-3.8 0-7 3.2-7 7.1V484h-84.5c-4.1 0-7.5 3.1-7.5 7v42c0 3.8 3.4 7 7.5 7H420v84.9c0 3.9 3.2 7.1 7 7.1h42c3.9 0 7-3.2 7-7.1V540h84.5c4.1 0 7.5-3.2 7.5-7v-42c0-3.9-3.4-7-7.5-7H476v-84.9zM560.5 704h-225c-4.1 0-7.5 3.2-7.5 7v42c0 3.8 3.4 7 7.5 7h225c4.1 0 7.5-3.2 7.5-7v-42c0-3.8-3.4-7-7.5-7z'
      ]);
  });
  exports.DatabaseTwoTone = getIcon('database', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M232 616h560V408H232v208zm112-144c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40zM232 888h560V680H232v208zm112-144c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40zM232 344h560V136H232v208zm112-144c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40z'
      ], [
          primaryColor,
          'M304 512a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm0 272a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm0-544a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'
      ], [
          primaryColor,
          'M832 64H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-40 824H232V680h560v208zm0-272H232V408h560v208zm0-272H232V136h560v208z'
      ]);
  });
  exports.DislikeTwoTone = getIcon('dislike', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M273 100.1v428h.3l-.3-428zM820.4 525l-21.9-19 14-25.5a56.2 56.2 0 0 0 6.9-27.3c0-16.5-7.1-32.2-19.6-43l-21.9-19 13.9-25.4a56.2 56.2 0 0 0 6.9-27.3c0-16.5-7.1-32.2-19.6-43l-21.9-19 13.9-25.4a56.2 56.2 0 0 0 6.9-27.3c0-22.4-13.2-42.6-33.6-51.8H345v345.2c18.6 67.2 46.4 168 83.5 302.5a44.28 44.28 0 0 0 42.2 32.3c7.5.1 15-2.2 21.1-6.7 9.9-7.4 15.2-18.6 14.6-30.5l-9.6-198.4h314.4C829 605.5 840 587.1 840 568c0-16.5-7.1-32.2-19.6-43z'
      ], [
          primaryColor,
          'M112 132v364c0 17.7 14.3 32 32 32h65V100h-65c-17.7 0-32 14.3-32 32zm773.9 358.3c3.6-12 5.4-24.4 5.4-37 0-28.3-9.3-55.5-26.1-77.7 3.6-12 5.4-24.4 5.4-37 0-28.3-9.3-55.5-26.1-77.7 3.6-12 5.4-24.4 5.4-37 0-51.6-30.7-98.1-78.3-118.4a66.1 66.1 0 0 0-26.5-5.4H273l.3 428 85.8 310.8C372.9 889 418.9 924 470.9 924c29.7 0 57.4-11.8 77.9-33.4 20.5-21.5 31-49.7 29.5-79.4l-6-122.9h239.9c12.1 0 23.9-3.2 34.3-9.3 40.4-23.5 65.5-66.1 65.5-111 0-28.3-9.3-55.5-26.1-77.7zm-74.7 126.1H496.8l9.6 198.4c.6 11.9-4.7 23.1-14.6 30.5-6.1 4.5-13.6 6.8-21.1 6.7a44.28 44.28 0 0 1-42.2-32.3c-37.1-134.4-64.9-235.2-83.5-302.5V172h399.4a56.85 56.85 0 0 1 33.6 51.8c0 9.7-2.3 18.9-6.9 27.3l-13.9 25.4 21.9 19a56.76 56.76 0 0 1 19.6 43c0 9.7-2.3 18.9-6.9 27.3l-13.9 25.4 21.9 19a56.76 56.76 0 0 1 19.6 43c0 9.7-2.3 18.9-6.9 27.3l-14 25.5 21.9 19a56.76 56.76 0 0 1 19.6 43c0 19.1-11 37.5-28.8 48.4z'
      ]);
  });
  exports.DownCircleTwoTone = getIcon('down-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm184.4 277.7l-178 246a7.95 7.95 0 0 1-12.9 0l-178-246c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.3 0 19.9 4.9 25.9 13.2L512 563.6l105.2-145.4c6-8.3 15.7-13.2 25.9-13.2H690c6.5 0 10.3 7.4 6.4 12.7z'
      ], [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          primaryColor,
          'M690 405h-46.9c-10.2 0-19.9 4.9-25.9 13.2L512 563.6 406.8 418.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246c3.2 4.4 9.7 4.4 12.9 0l178-246c3.9-5.3.1-12.7-6.4-12.7z'
      ]);
  });
  exports.DownSquareTwoTone = getIcon('down-square', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm150-440h46.9c10.3 0 19.9 4.9 25.9 13.2L512 558.6l105.2-145.4c6-8.3 15.7-13.2 25.9-13.2H690c6.5 0 10.3 7.4 6.4 12.7l-178 246a7.95 7.95 0 0 1-12.9 0l-178-246c-3.8-5.3 0-12.7 6.5-12.7z'
      ], [
          primaryColor,
          'M505.5 658.7c3.2 4.4 9.7 4.4 12.9 0l178-246c3.9-5.3.1-12.7-6.4-12.7h-46.9c-10.2 0-19.9 4.9-25.9 13.2L512 558.6 406.8 413.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246z'
      ]);
  });
  exports.EnvironmentTwoTone = getIcon('environment', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M724.4 224.9C667.7 169.5 592.3 139 512 139s-155.7 30.5-212.4 85.8C243.1 280 212 353.2 212 431.1c0 241.3 234.1 407.2 300 449.1 65.9-41.9 300-207.8 300-449.1 0-77.9-31.1-151.1-87.6-206.2zM512 615c-97.2 0-176-78.8-176-176s78.8-176 176-176 176 78.8 176 176-78.8 176-176 176z'
      ], [
          primaryColor,
          'M512 263c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm79.2 255.2A111.6 111.6 0 0 1 512 551c-29.9 0-58-11.7-79.2-32.8A111.6 111.6 0 0 1 400 439c0-29.9 11.7-58 32.8-79.2C454 338.6 482.1 327 512 327c29.9 0 58 11.6 79.2 32.8S624 409.1 624 439c0 29.9-11.6 58-32.8 79.2z'
      ], [
          primaryColor,
          'M854.6 289.1a362.49 362.49 0 0 0-79.9-115.7 370.83 370.83 0 0 0-118.2-77.8C610.7 76.6 562.1 67 512 67c-50.1 0-98.7 9.6-144.5 28.5-44.3 18.3-84 44.5-118.2 77.8A363.6 363.6 0 0 0 169.4 289c-19.5 45-29.4 92.8-29.4 142 0 70.6 16.9 140.9 50.1 208.7 26.7 54.5 64 107.6 111 158.1 80.3 86.2 164.5 138.9 188.4 153a43.9 43.9 0 0 0 22.4 6.1c7.8 0 15.5-2 22.4-6.1 23.9-14.1 108.1-66.8 188.4-153 47-50.4 84.3-103.6 111-158.1C867.1 572 884 501.8 884 431.1c0-49.2-9.9-97-29.4-142zM512 880.2c-65.9-41.9-300-207.8-300-449.1 0-77.9 31.1-151.1 87.6-206.3C356.3 169.5 431.7 139 512 139s155.7 30.5 212.4 85.9C780.9 280 812 353.2 812 431.1c0 241.3-234.1 407.2-300 449.1z'
      ]);
  });
  exports.EditTwoTone = getIcon('edit', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [secondaryColor, 'M761.1 288.3L687.8 215 325.1 577.6l-15.6 89 88.9-15.7z'], [
          primaryColor,
          'M880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32zm-622.3-84c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 0 0 0-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 0 0 9.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89z'
      ]);
  });
  exports.ExclamationCircleTwoTone = getIcon('exclamation-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm-32 156c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'
      ], [
          primaryColor,
          'M488 576h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8zm-24 112a48 48 0 1 0 96 0 48 48 0 1 0-96 0z'
      ]);
  });
  exports.ExperimentTwoTone = getIcon('experiment', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M551.9 513c19.6 0 35.9-14.2 39.3-32.8A40.02 40.02 0 0 1 552 512a40 40 0 0 1-40-39.4v.5c0 22 17.9 39.9 39.9 39.9zM752 687.8l-.3-.3c-29-17.5-62.3-26.8-97-26.8-44.9 0-87.2 15.7-121 43.8a256.27 256.27 0 0 1-164.9 59.9c-41.2 0-81-9.8-116.7-28L210.5 844h603l-59.9-155.2-1.6-1z'
      ], [
          primaryColor,
          'M879 824.9L696.3 352V178H768v-68H256v68h71.7v174L145 824.9c-2.8 7.4-4.3 15.2-4.3 23.1 0 35.3 28.7 64 64 64h614.6c7.9 0 15.7-1.5 23.1-4.3 33-12.7 49.4-49.8 36.6-82.8zM395.7 364.7V180h232.6v184.7L719.2 600c-20.7-5.3-42.1-8-63.9-8-61.2 0-119.2 21.5-165.3 60a188.78 188.78 0 0 1-121.3 43.9c-32.7 0-64.1-8.3-91.8-23.7l118.8-307.5zM210.5 844l41.6-107.6.1-.2c35.7 18.1 75.4 27.8 116.6 27.8 61.2 0 119.2-21.5 165.3-60 33.9-28.2 76.3-43.9 121.3-43.9 35 0 68.4 9.5 97.6 27.1l.6 1.6L813.5 844h-603z'
      ], [
          primaryColor,
          'M552 512c19.3 0 35.4-13.6 39.2-31.8.6-2.7.8-5.4.8-8.2 0-22.1-17.9-40-40-40s-40 17.9-40 40v.6a40 40 0 0 0 40 39.4z'
      ]);
  });
  exports.EyeInvisibleTwoTone = getIcon('eye-invisible', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M254.89 758.85l125.57-125.57a176 176 0 0 1 248.82-248.82L757 256.72Q651.69 186.07 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 0 0 0 51.5q69.27 145.91 173.09 221.05zM942.2 486.2Q889.46 375.11 816.7 305L672.48 449.27a176.09 176.09 0 0 1-227.22 227.21L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 0 0 0-51.5z'
      ], [
          primaryColor,
          'M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 0 0 0-51.5zM878.63 165.56L836 122.88a8 8 0 0 0-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 0 0 0 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 0 0 0 11.31L155.17 889a8 8 0 0 0 11.31 0l712.15-712.12a8 8 0 0 0 0-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 0 0-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 0 1 146.2-106.69L401.31 546.2A112 112 0 0 1 396 512z'
      ], [
          primaryColor,
          'M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 0 0 227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 0 1-112 112z'
      ]);
  });
  exports.EyeTwoTone = getIcon('eye', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M81.8 537.8a60.3 60.3 0 0 1 0-51.5C176.6 286.5 319.8 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 0 0 0 51.5C176.6 737.5 319.9 838 512 838c-192.1 0-335.4-100.5-430.2-300.2z'
      ], [
          secondaryColor,
          'M512 258c-161.3 0-279.4 81.8-362.7 254C232.6 684.2 350.7 766 512 766c161.4 0 279.5-81.8 362.7-254C791.4 339.8 673.3 258 512 258zm-4 430c-97.2 0-176-78.8-176-176s78.8-176 176-176 176 78.8 176 176-78.8 176-176 176z'
      ], [
          primaryColor,
          'M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 0 0 0 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258s279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766z'
      ], [
          primaryColor,
          'M508 336c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z'
      ]);
  });
  exports.FileAddTwoTone = getIcon('file-add', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M534 352V136H232v752h560V394H576a42 42 0 0 1-42-42zm126 236v48c0 4.4-3.6 8-8 8H544v108c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V644H372c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h108V472c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v108h108c4.4 0 8 3.6 8 8z'
      ], [
          primaryColor,
          'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0 0 42 42h216v494z'
      ], [
          primaryColor,
          'M544 472c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v108H372c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h108v108c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V644h108c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H544V472z'
      ]);
  });
  exports.FileExclamationTwoTone = getIcon('file-exclamation', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M534 352V136H232v752h560V394H576a42 42 0 0 1-42-42zm-54 96c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v184c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V448zm32 336c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40z'
      ], [
          primaryColor,
          'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0 0 42 42h216v494z'
      ], [
          primaryColor,
          'M488 640h48c4.4 0 8-3.6 8-8V448c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v184c0 4.4 3.6 8 8 8zm-16 104a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'
      ]);
  });
  exports.FileImageTwoTone = getIcon('file-image', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M534 352V136H232v752h560V394H576a42 42 0 0 1-42-42zm-134 50c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40zm296 294H328.1c-6.7 0-10.4-7.7-6.3-12.9l99.8-127.2a8 8 0 0 1 12.6 0l41.1 52.4 77.8-99.2a8.1 8.1 0 0 1 12.7 0l136.5 174c4.1 5.2.4 12.9-6.3 12.9z'
      ], [
          primaryColor,
          'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0 0 42 42h216v494z'
      ], [
          primaryColor,
          'M553.1 509.1l-77.8 99.2-41.1-52.4a8 8 0 0 0-12.6 0l-99.8 127.2a7.98 7.98 0 0 0 6.3 12.9H696c6.7 0 10.4-7.7 6.3-12.9l-136.5-174a8.1 8.1 0 0 0-12.7 0zM360 442a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'
      ]);
  });
  exports.FileExcelTwoTone = getIcon('file-excel', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M534 352V136H232v752h560V394H576a42 42 0 0 1-42-42zm51.6 120h35.7a12.04 12.04 0 0 1 10.1 18.5L546.1 623l84 130.4c3.6 5.6 2 13-3.6 16.6-2 1.2-4.2 1.9-6.5 1.9h-37.5c-4.1 0-8-2.1-10.2-5.7L510 664.8l-62.7 101.5c-2.2 3.5-6 5.7-10.2 5.7h-34.5a12.04 12.04 0 0 1-10.2-18.4l83.4-132.8-82.3-130.4c-3.6-5.7-1.9-13.1 3.7-16.6 1.9-1.3 4.1-1.9 6.4-1.9H442c4.2 0 8.1 2.2 10.3 5.8l61.8 102.4 61.2-102.3c2.2-3.6 6.1-5.8 10.3-5.8z'
      ], [
          primaryColor,
          'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0 0 42 42h216v494z'
      ], [
          primaryColor,
          'M514.1 580.1l-61.8-102.4c-2.2-3.6-6.1-5.8-10.3-5.8h-38.4c-2.3 0-4.5.6-6.4 1.9-5.6 3.5-7.3 10.9-3.7 16.6l82.3 130.4-83.4 132.8a12.04 12.04 0 0 0 10.2 18.4h34.5c4.2 0 8-2.2 10.2-5.7L510 664.8l62.3 101.4c2.2 3.6 6.1 5.7 10.2 5.7H620c2.3 0 4.5-.7 6.5-1.9 5.6-3.6 7.2-11 3.6-16.6l-84-130.4 85.3-132.5a12.04 12.04 0 0 0-10.1-18.5h-35.7c-4.2 0-8.1 2.2-10.3 5.8l-61.2 102.3z'
      ]);
  });
  exports.FileMarkdownTwoTone = getIcon('file-markdown', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M534 352V136H232v752h560V394H576a42 42 0 0 1-42-42zm72.3 122H641c6.6 0 12 5.4 12 12v272c0 6.6-5.4 12-12 12h-27.2c-6.6 0-12-5.4-12-12V581.7L535 732.3c-2 4.3-6.3 7.1-11 7.1h-24.1a12 12 0 0 1-11-7.1l-66.8-150.2V758c0 6.6-5.4 12-12 12H383c-6.6 0-12-5.4-12-12V486c0-6.6 5.4-12 12-12h35c4.8 0 9.1 2.8 11 7.2l83.2 191 83.1-191c1.9-4.4 6.2-7.2 11-7.2z'
      ], [
          primaryColor,
          'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0 0 42 42h216v494z'
      ], [
          primaryColor,
          'M429 481.2c-1.9-4.4-6.2-7.2-11-7.2h-35c-6.6 0-12 5.4-12 12v272c0 6.6 5.4 12 12 12h27.1c6.6 0 12-5.4 12-12V582.1l66.8 150.2a12 12 0 0 0 11 7.1H524c4.7 0 9-2.8 11-7.1l66.8-150.6V758c0 6.6 5.4 12 12 12H641c6.6 0 12-5.4 12-12V486c0-6.6-5.4-12-12-12h-34.7c-4.8 0-9.1 2.8-11 7.2l-83.1 191-83.2-191z'
      ]);
  });
  exports.FilePdfTwoTone = getIcon('file-pdf', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M509.2 490.8c-.7-1.3-1.4-1.9-2.2-2-2.9 3.3-2.2 31.5 2.7 51.4 4-13.6 4.7-40.5-.5-49.4zm-1.6 120.5c-7.7 20-18.8 47.3-32.1 71.4 4-1.6 8.1-3.3 12.3-5 17.6-7.2 37.3-15.3 58.9-20.2-14.9-11.8-28.4-27.7-39.1-46.2z'
      ], [
          secondaryColor,
          'M534 352V136H232v752h560V394H576a42 42 0 0 1-42-42zm55 287.6c16.1-1.9 30.6-2.8 44.3-2.3 12.8.4 23.6 2 32 5.1.2.1.3.1.5.2.4.2.8.3 1.2.5.5.2 1.1.4 1.6.7.1.1.3.1.4.2 4.1 1.8 7.5 4 10.1 6.6 9.1 9.1 11.8 26.1 6.2 39.6-3.2 7.7-11.7 20.5-33.3 20.5-21.8 0-53.9-9.7-82.1-24.8-25.5 4.3-53.7 13.9-80.9 23.1-5.8 2-11.8 4-17.6 5.9-38 65.2-66.5 79.4-84.1 79.4-4.2 0-7.8-.9-10.8-2-6.9-2.6-12.8-8-16.5-15-.9-1.7-1.6-3.4-2.2-5.2-1.6-4.8-2.1-9.6-1.3-13.6l.6-2.7c.1-.2.1-.4.2-.6.2-.7.4-1.4.7-2.1 0-.1.1-.2.1-.3 4.1-11.9 13.6-23.4 27.7-34.6 12.3-9.8 27.1-18.7 45.9-28.4 15.9-28 37.6-75.1 51.2-107.4-10.8-41.8-16.7-74.6-10.1-98.6.9-3.3 2.5-6.4 4.6-9.1.2-.2.3-.4.5-.6.1-.1.1-.2.2-.2 6.3-7.5 16.9-11.9 28.1-11.5 16.6.7 29.7 11.5 33 30.1 1.7 8 2.2 16.5 1.9 25.7v.7c0 .5 0 1-.1 1.5-.7 13.3-3 26.6-7.3 44.7-.4 1.6-.8 3.2-1.2 5.2l-1 4.1-.1.3c.1.2.1.3.2.5l1.8 4.5c.1.3.3.7.4 1 .7 1.6 1.4 3.3 2.1 4.8v.1c8.7 18.8 19.7 33.4 33.9 45.1 4.3 3.5 8.9 6.7 13.9 9.8 1.8-.5 3.5-.7 5.3-.9z'
      ], [
          secondaryColor,
          'M391.5 761c5.7-4.4 16.2-14.5 30.1-34.7-10.3 9.4-23.4 22.4-30.1 34.7zm270.9-83l.2-.3h.2c.6-.4.5-.7.4-.9-.1-.1-4.5-9.3-45.1-7.4 35.3 13.9 43.5 9.1 44.3 8.6z'
      ], [
          primaryColor,
          'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0 0 42 42h216v494z'
      ], [
          primaryColor,
          'M535.9 585.3c-.8-1.7-1.5-3.3-2.2-4.9-.1-.3-.3-.7-.4-1l-1.8-4.5c-.1-.2-.1-.3-.2-.5l.1-.3.2-1.1c4-16.3 8.6-35.3 9.4-54.4v-.7c.3-8.6-.2-17.2-2-25.6-3.8-21.3-19.5-29.6-32.9-30.2-11.3-.5-21.8 4-28.1 11.4-.1.1-.1.2-.2.2-.2.2-.4.4-.5.6-2.1 2.7-3.7 5.8-4.6 9.1-6.6 24-.7 56.8 10.1 98.6-13.6 32.4-35.3 79.4-51.2 107.4v.1c-27.7 14.3-64.1 35.8-73.6 62.9 0 .1-.1.2-.1.3-.2.7-.5 1.4-.7 2.1-.1.2-.1.4-.2.6-.2.9-.5 1.8-.6 2.7-.9 4-.4 8.8 1.3 13.6.6 1.8 1.3 3.5 2.2 5.2 3.7 7 9.6 12.4 16.5 15 3 1.1 6.6 2 10.8 2 17.6 0 46.1-14.2 84.1-79.4 5.8-1.9 11.8-3.9 17.6-5.9 27.2-9.2 55.4-18.8 80.9-23.1 28.2 15.1 60.3 24.8 82.1 24.8 21.6 0 30.1-12.8 33.3-20.5 5.6-13.5 2.9-30.5-6.2-39.6-2.6-2.6-6-4.8-10.1-6.6-.1-.1-.3-.1-.4-.2-.5-.2-1.1-.4-1.6-.7-.4-.2-.8-.3-1.2-.5-.2-.1-.3-.1-.5-.2-16.2-5.8-41.7-6.7-76.3-2.8l-5.3.6c-5-3-9.6-6.3-13.9-9.8-14.2-11.3-25.1-25.8-33.8-44.7zM391.5 761c6.7-12.3 19.8-25.3 30.1-34.7-13.9 20.2-24.4 30.3-30.1 34.7zM507 488.8c.8.1 1.5.7 2.2 2 5.2 8.9 4.5 35.8.5 49.4-4.9-19.9-5.6-48.1-2.7-51.4zm-19.2 188.9c-4.2 1.7-8.3 3.4-12.3 5 13.3-24.1 24.4-51.4 32.1-71.4 10.7 18.5 24.2 34.4 39.1 46.2-21.6 4.9-41.3 13-58.9 20.2zm175.4-.9c.1.2.2.5-.4.9h-.2l-.2.3c-.8.5-9 5.3-44.3-8.6 40.6-1.9 45 7.3 45.1 7.4z'
      ]);
  });
  exports.FilePptTwoTone = getIcon('file-ppt', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M464.5 516.2v108.4h38.9c44.7 0 71.2-10.9 71.2-54.3 0-34.4-20.1-54.1-53.9-54.1h-56.2z'
      ], [
          secondaryColor,
          'M534 352V136H232v752h560V394H576a42 42 0 0 1-42-42zm90 218.4c0 55.2-36.8 94.1-96.2 94.1h-63.3V760c0 4.4-3.6 8-8 8H424c-4.4 0-8-3.6-8-8V484c0-4.4 3.6-8 8-8v.1h104c59.7 0 96 39.8 96 94.3z'
      ], [
          primaryColor,
          'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0 0 42 42h216v494z'
      ], [
          primaryColor,
          'M424 476.1c-4.4-.1-8 3.5-8 7.9v276c0 4.4 3.6 8 8 8h32.5c4.4 0 8-3.6 8-8v-95.5h63.3c59.4 0 96.2-38.9 96.2-94.1 0-54.5-36.3-94.3-96-94.3H424zm150.6 94.2c0 43.4-26.5 54.3-71.2 54.3h-38.9V516.2h56.2c33.8 0 53.9 19.7 53.9 54.1z'
      ]);
  });
  exports.FileTextTwoTone = getIcon('file-text', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M534 352V136H232v752h560V394H576a42 42 0 0 1-42-42zm-22 322c0 4.4-3.6 8-8 8H320c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48zm200-184v48c0 4.4-3.6 8-8 8H320c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h384c4.4 0 8 3.6 8 8z'
      ], [
          primaryColor,
          'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0 0 42 42h216v494z'
      ], [
          primaryColor,
          'M312 490v48c0 4.4 3.6 8 8 8h384c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H320c-4.4 0-8 3.6-8 8zm192 128H320c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z'
      ]);
  });
  exports.FileUnknownTwoTone = getIcon('file-unknown', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M534 352V136H232v752h560V394H576a42 42 0 0 1-42-42zm-22 424c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm110-228.4c.7 44.9-29.7 84.5-74.3 98.9-5.7 1.8-9.7 7.3-9.7 13.3V672c0 5.5-4.5 10-10 10h-32c-5.5 0-10-4.5-10-10v-32c.2-19.8 15.4-37.3 34.7-40.1C549 596.2 570 574.3 570 549c0-28.1-25.8-51.5-58-51.5s-58 23.4-58 51.6c0 5.2-4.4 9.4-9.8 9.4h-32.4c-5.4 0-9.8-4.1-9.8-9.5 0-57.4 50.1-103.7 111.5-103 59.3.8 107.7 46.1 108.5 101.6z'
      ], [
          primaryColor,
          'M854.6 288.7L639.4 73.4c-6-6-14.2-9.4-22.7-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.6-9.4-22.6zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0 0 42 42h216v494z'
      ], [
          primaryColor,
          'M480 744a32 32 0 1 0 64 0 32 32 0 1 0-64 0zm-78-195c0 5.4 4.4 9.5 9.8 9.5h32.4c5.4 0 9.8-4.2 9.8-9.4 0-28.2 25.8-51.6 58-51.6s58 23.4 58 51.5c0 25.3-21 47.2-49.3 50.9-19.3 2.8-34.5 20.3-34.7 40.1v32c0 5.5 4.5 10 10 10h32c5.5 0 10-4.5 10-10v-12.2c0-6 4-11.5 9.7-13.3 44.6-14.4 75-54 74.3-98.9-.8-55.5-49.2-100.8-108.5-101.6-61.4-.7-111.5 45.6-111.5 103z'
      ]);
  });
  exports.FileZipTwoTone = getIcon('file-zip', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [secondaryColor, 'M344 630h32v2h-32z'], [
          secondaryColor,
          'M534 352V136H360v64h64v64h-64v64h64v64h-64v64h64v64h-64v62h64v160H296V520h64v-64h-64v-64h64v-64h-64v-64h64v-64h-64v-64h-64v752h560V394H576a42 42 0 0 1-42-42z'
      ], [
          primaryColor,
          'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h64v64h64v-64h174v216a42 42 0 0 0 42 42h216v494z'
      ], [
          primaryColor,
          'M296 392h64v64h-64zm0-128h64v64h-64zm0 318v160h128V582h-64v-62h-64v62zm48 50v-2h32v64h-32v-62zm16-432h64v64h-64zm0 256h64v64h-64zm0-128h64v64h-64z'
      ]);
  });
  exports.FileWordTwoTone = getIcon('file-word', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M534 352V136H232v752h560V394H576a42 42 0 0 1-42-42zm101.3 129.3c1.3-5.4 6.1-9.3 11.7-9.3h35.6a12.04 12.04 0 0 1 11.6 15.1l-74.4 276c-1.4 5.3-6.2 8.9-11.6 8.9h-31.8c-5.4 0-10.2-3.7-11.6-8.9l-52.8-197-52.8 197c-1.4 5.3-6.2 8.9-11.6 8.9h-32c-5.4 0-10.2-3.7-11.6-8.9l-74.2-276a12.02 12.02 0 0 1 11.6-15.1h35.4c5.6 0 10.4 3.9 11.7 9.3L434.6 680l49.7-198.9c1.3-5.4 6.1-9.1 11.6-9.1h32.2c5.5 0 10.3 3.7 11.6 9.1l49.8 199.3 45.8-199.1z'
      ], [
          primaryColor,
          'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0 0 42 42h216v494z'
      ], [
          primaryColor,
          'M528.1 472h-32.2c-5.5 0-10.3 3.7-11.6 9.1L434.6 680l-46.1-198.7c-1.3-5.4-6.1-9.3-11.7-9.3h-35.4a12.02 12.02 0 0 0-11.6 15.1l74.2 276c1.4 5.2 6.2 8.9 11.6 8.9h32c5.4 0 10.2-3.6 11.6-8.9l52.8-197 52.8 197c1.4 5.2 6.2 8.9 11.6 8.9h31.8c5.4 0 10.2-3.6 11.6-8.9l74.4-276a12.04 12.04 0 0 0-11.6-15.1H647c-5.6 0-10.4 3.9-11.7 9.3l-45.8 199.1-49.8-199.3c-1.3-5.4-6.1-9.1-11.6-9.1z'
      ]);
  });
  exports.FileTwoTone = getIcon('file', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [secondaryColor, 'M534 352V136H232v752h560V394H576a42 42 0 0 1-42-42z'], [
          primaryColor,
          'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0 0 42 42h216v494z'
      ]);
  });
  exports.FilterTwoTone = getIcon('filter', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M420.6 798h182.9V642H420.6zM411 561.4l9.5 16.6h183l9.5-16.6L811.3 226H212.7z'
      ], [
          primaryColor,
          'M880.1 154H143.9c-24.5 0-39.8 26.7-27.5 48L349 597.4V838c0 17.7 14.2 32 31.8 32h262.4c17.6 0 31.8-14.3 31.8-32V597.4L907.7 202c12.2-21.3-3.1-48-27.6-48zM603.5 798H420.6V642h182.9v156zm9.5-236.6l-9.5 16.6h-183l-9.5-16.6L212.7 226h598.6L613 561.4z'
      ]);
  });
  exports.FireTwoTone = getIcon('fire', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M737 438.6c-9.6 15.5-21.1 30.7-34.4 45.6a73.1 73.1 0 0 1-51 24.4 73.36 73.36 0 0 1-53.4-18.8 74.01 74.01 0 0 1-24.4-59.8c3-47.4-12.4-103.1-45.8-165.7-16.9-31.4-37.1-58.2-61.2-80.4a240 240 0 0 1-12.1 46.5 354.26 354.26 0 0 1-58.2 101 349.6 349.6 0 0 1-58.6 56.8c-34 26.1-62 60-80.8 97.9a275.96 275.96 0 0 0-29.1 124c0 74.9 29.5 145.3 83 198.4 53.7 53.2 125 82.4 201 82.4s147.3-29.2 201-82.4c53.5-53 83-123.5 83-198.4 0-39.2-8.1-77.3-24-113.1-9.3-21-21-40.5-35-58.4z'
      ], [
          primaryColor,
          'M834.1 469.2A347.49 347.49 0 0 0 751.2 354l-29.1-26.7a8.09 8.09 0 0 0-13 3.3l-13 37.3c-8.1 23.4-23 47.3-44.1 70.8-1.4 1.5-3 1.9-4.1 2-1.1.1-2.8-.1-4.3-1.5-1.4-1.2-2.1-3-2-4.8 3.7-60.2-14.3-128.1-53.7-202C555.3 171 510 123.1 453.4 89.7l-41.3-24.3c-5.4-3.2-12.3 1-12 7.3l2.2 48c1.5 32.8-2.3 61.8-11.3 85.9-11 29.5-26.8 56.9-47 81.5a295.64 295.64 0 0 1-47.5 46.1 352.6 352.6 0 0 0-100.3 121.5A347.75 347.75 0 0 0 160 610c0 47.2 9.3 92.9 27.7 136a349.4 349.4 0 0 0 75.5 110.9c32.4 32 70 57.2 111.9 74.7C418.5 949.8 464.5 959 512 959s93.5-9.2 136.9-27.3A348.6 348.6 0 0 0 760.8 857c32.4-32 57.8-69.4 75.5-110.9a344.2 344.2 0 0 0 27.7-136c0-48.8-10-96.2-29.9-140.9zM713 808.5c-53.7 53.2-125 82.4-201 82.4s-147.3-29.2-201-82.4c-53.5-53.1-83-123.5-83-198.4 0-43.5 9.8-85.2 29.1-124 18.8-37.9 46.8-71.8 80.8-97.9a349.6 349.6 0 0 0 58.6-56.8c25-30.5 44.6-64.5 58.2-101a240 240 0 0 0 12.1-46.5c24.1 22.2 44.3 49 61.2 80.4 33.4 62.6 48.8 118.3 45.8 165.7a74.01 74.01 0 0 0 24.4 59.8 73.36 73.36 0 0 0 53.4 18.8c19.7-1 37.8-9.7 51-24.4 13.3-14.9 24.8-30.1 34.4-45.6 14 17.9 25.7 37.4 35 58.4 15.9 35.8 24 73.9 24 113.1 0 74.9-29.5 145.4-83 198.4z'
      ]);
  });
  exports.FolderAddTwoTone = getIcon('folder-add', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M372.5 256H184v512h656V370.4H492.1L372.5 256zM540 443.1V528h84.5c4.1 0 7.5 3.1 7.5 7v42c0 3.8-3.4 7-7.5 7H540v84.9c0 3.9-3.1 7.1-7 7.1h-42c-3.8 0-7-3.2-7-7.1V584h-84.5c-4.1 0-7.5-3.2-7.5-7v-42c0-3.9 3.4-7 7.5-7H484v-84.9c0-3.9 3.2-7.1 7-7.1h42c3.9 0 7 3.2 7 7.1z'
      ], [
          primaryColor,
          'M880 298.4H521L403.7 186.2a8.15 8.15 0 0 0-5.5-2.2H144c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V330.4c0-17.7-14.3-32-32-32zM840 768H184V256h188.5l119.6 114.4H840V768z'
      ], [
          primaryColor,
          'M484 443.1V528h-84.5c-4.1 0-7.5 3.1-7.5 7v42c0 3.8 3.4 7 7.5 7H484v84.9c0 3.9 3.2 7.1 7 7.1h42c3.9 0 7-3.2 7-7.1V584h84.5c4.1 0 7.5-3.2 7.5-7v-42c0-3.9-3.4-7-7.5-7H540v-84.9c0-3.9-3.1-7.1-7-7.1h-42c-3.8 0-7 3.2-7 7.1z'
      ]);
  });
  exports.FlagTwoTone = getIcon('flag', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [secondaryColor, 'M184 232h368v336H184z'], [secondaryColor, 'M624 632c0 4.4-3.6 8-8 8H504v73h336V377H624v255z'], [
          primaryColor,
          'M880 305H624V192c0-17.7-14.3-32-32-32H184v-40c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v784c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V640h248v113c0 17.7 14.3 32 32 32h416c17.7 0 32-14.3 32-32V337c0-17.7-14.3-32-32-32zM184 568V232h368v336H184zm656 145H504v-73h112c4.4 0 8-3.6 8-8V377h216v336z'
      ]);
  });
  exports.FolderTwoTone = getIcon('folder', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 298.4H521L403.7 186.2a8.15 8.15 0 0 0-5.5-2.2H144c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V330.4c0-17.7-14.3-32-32-32zM840 768H184V256h188.5l119.6 114.4H840V768z'
      ], [secondaryColor, 'M372.5 256H184v512h656V370.4H492.1z']);
  });
  exports.FolderOpenTwoTone = getIcon('folder-open', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [secondaryColor, 'M159 768h612.3l103.4-256H262.3z'], [
          primaryColor,
          'M928 444H820V330.4c0-17.7-14.3-32-32-32H473L355.7 186.2a8.15 8.15 0 0 0-5.5-2.2H96c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h698c13 0 24.8-7.9 29.7-20l134-332c1.5-3.8 2.3-7.9 2.3-12 0-17.7-14.3-32-32-32zM136 256h188.5l119.6 114.4H748V444H238c-13 0-24.8 7.9-29.7 20L136 643.2V256zm635.3 512H159l103.3-256h612.4L771.3 768z'
      ]);
  });
  exports.FrownTwoTone = getIcon('frown', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zM288 421a48.01 48.01 0 0 1 96 0 48.01 48.01 0 0 1-96 0zm376 272h-48.1c-4.2 0-7.8-3.2-8.1-7.4C604 636.1 562.5 597 512 597s-92.1 39.1-95.8 88.6c-.3 4.2-3.9 7.4-8.1 7.4H360a8 8 0 0 1-8-8.4c4.4-84.3 74.5-151.6 160-151.6s155.6 67.3 160 151.6a8 8 0 0 1-8 8.4zm24-224a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'
      ], [
          primaryColor,
          'M288 421a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm224 112c-85.5 0-155.6 67.3-160 151.6a8 8 0 0 0 8 8.4h48.1c4.2 0 7.8-3.2 8.1-7.4 3.7-49.5 45.3-88.6 95.8-88.6s92 39.1 95.8 88.6c.3 4.2 3.9 7.4 8.1 7.4H664a8 8 0 0 0 8-8.4C667.6 600.3 597.5 533 512 533zm128-112a48 48 0 1 0 96 0 48 48 0 1 0-96 0z'
      ]);
  });
  exports.FundTwoTone = getIcon('fund', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136V232h752v560z'
      ], [
          secondaryColor,
          'M136 792h752V232H136v560zm56.4-130.5l214.9-215c3.1-3.1 8.2-3.1 11.3 0L533 561l254.5-254.6c3.1-3.1 8.2-3.1 11.3 0l36.8 36.8c3.1 3.1 3.1 8.2 0 11.3l-297 297.2a8.03 8.03 0 0 1-11.3 0L412.9 537.2 240.4 709.7a8.03 8.03 0 0 1-11.3 0l-36.7-36.9a8.03 8.03 0 0 1 0-11.3z'
      ], [
          primaryColor,
          'M229.1 709.7c3.1 3.1 8.2 3.1 11.3 0l172.5-172.5 114.4 114.5c3.1 3.1 8.2 3.1 11.3 0l297-297.2c3.1-3.1 3.1-8.2 0-11.3l-36.8-36.8a8.03 8.03 0 0 0-11.3 0L533 561 418.6 446.5a8.03 8.03 0 0 0-11.3 0l-214.9 215a8.03 8.03 0 0 0 0 11.3l36.7 36.9z'
      ]);
  });
  exports.FunnelPlotTwoTone = getIcon('funnel-plot', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M420.6 798h182.9V650H420.6zM297.7 374h428.6l85-148H212.7zm113.2 197.4l8.4 14.6h185.3l8.4-14.6L689.6 438H334.4z'
      ], [
          primaryColor,
          'M880.1 154H143.9c-24.5 0-39.8 26.7-27.5 48L349 607.4V838c0 17.7 14.2 32 31.8 32h262.4c17.6 0 31.8-14.3 31.8-32V607.4L907.7 202c12.2-21.3-3.1-48-27.6-48zM603.5 798H420.6V650h182.9v148zm9.5-226.6l-8.4 14.6H419.3l-8.4-14.6L334.4 438h355.2L613 571.4zM726.3 374H297.7l-85-148h598.6l-85 148z'
      ]);
  });
  exports.GiftTwoTone = getIcon('gift', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M546 378h298v104H546zM228 550h250v308H228zm-48-172h298v104H180zm366 172h250v308H546z'
      ], [
          primaryColor,
          'M880 310H732.4c13.6-21.4 21.6-46.8 21.6-74 0-76.1-61.9-138-138-138-41.4 0-78.7 18.4-104 47.4-25.3-29-62.6-47.4-104-47.4-76.1 0-138 61.9-138 138 0 27.2 7.9 52.6 21.6 74H144c-17.7 0-32 14.3-32 32v200c0 4.4 3.6 8 8 8h40v344c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V550h40c4.4 0 8-3.6 8-8V342c0-17.7-14.3-32-32-32zM478 858H228V550h250v308zm0-376H180V378h298v104zm0-176h-70c-38.6 0-70-31.4-70-70s31.4-70 70-70 70 31.4 70 70v70zm68-70c0-38.6 31.4-70 70-70s70 31.4 70 70-31.4 70-70 70h-70v-70zm250 622H546V550h250v308zm48-376H546V378h298v104z'
      ]);
  });
  exports.HddTwoTone = getIcon('hdd', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M232 888h560V680H232v208zm448-140c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40zM232 616h560V408H232v208zm72-128c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48c0 4.4-3.6 8-8 8H312c-4.4 0-8-3.6-8-8v-48zm-72-144h560V136H232v208zm72-128c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48c0 4.4-3.6 8-8 8H312c-4.4 0-8-3.6-8-8v-48z'
      ], [
          primaryColor,
          'M832 64H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-40 824H232V680h560v208zm0-272H232V408h560v208zm0-272H232V136h560v208z'
      ], [
          primaryColor,
          'M312 544h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H312c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8zm0-272h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H312c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8zm328 516a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'
      ]);
  });
  exports.HeartTwoTone = getIcon('heart', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M923 283.6a260.04 260.04 0 0 0-56.9-82.8 264.4 264.4 0 0 0-84-55.5A265.34 265.34 0 0 0 679.7 125c-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5a258.44 258.44 0 0 0-56.9 82.8c-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3.1-35.3-7-69.6-20.9-101.9zM512 814.8S156 586.7 156 385.5C156 283.6 240.3 201 344.3 201c73.1 0 136.5 40.8 167.7 100.4C543.2 241.8 606.6 201 679.7 201c104 0 188.3 82.6 188.3 184.5 0 201.2-356 429.3-356 429.3z'
      ], [
          secondaryColor,
          'M679.7 201c-73.1 0-136.5 40.8-167.7 100.4C480.8 241.8 417.4 201 344.3 201c-104 0-188.3 82.6-188.3 184.5 0 201.2 356 429.3 356 429.3s356-228.1 356-429.3C868 283.6 783.7 201 679.7 201z'
      ]);
  });
  exports.HighlightTwoTone = getIcon('highlight', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M229.6 796.3h160.2l54.3-54.1-80.1-78.9zm220.7-397.1l262.8 258.9 147.3-145-262.8-259zm-77.1 166.1l171.4 168.9 68.6-67.6-171.4-168.9z'
      ], [
          primaryColor,
          'M957.6 507.5L603.2 158.3a7.9 7.9 0 0 0-11.2 0L353.3 393.5a8.03 8.03 0 0 0-.1 11.3l.1.1 40 39.4-117.2 115.3a8.03 8.03 0 0 0-.1 11.3l.1.1 39.5 38.9-189.1 187H72.1c-4.4 0-8.1 3.6-8.1 8v55.2c0 4.4 3.6 8 8 8h344.9c2.1 0 4.1-.8 5.6-2.3l76.1-75.6L539 830a7.9 7.9 0 0 0 11.2 0l117.1-115.6 40.1 39.5a7.9 7.9 0 0 0 11.2 0l238.7-235.2c3.4-3 3.4-8 .3-11.2zM389.8 796.3H229.6l134.4-133 80.1 78.9-54.3 54.1zm154.8-62.1L373.2 565.3l68.6-67.6 171.4 168.9-68.6 67.6zm168.5-76.1L450.3 399.2l147.3-145.1 262.8 259-147.3 145z'
      ]);
  });
  exports.HomeTwoTone = getIcon('home', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M512.1 172.6l-370 369.7h96V868H392V640c0-22.1 17.9-40 40-40h160c22.1 0 40 17.9 40 40v228h153.9V542.3H882L535.2 195.7l-23.1-23.1zm434.5 422.9c-6 6-13.1 10.8-20.8 13.9 7.7-3.2 14.8-7.9 20.8-13.9zm-887-34.7c5 30.3 31.4 53.5 63.1 53.5h.9c-31.9 0-58.9-23-64-53.5zm-.9-10.5v-1.9 1.9zm.1-2.6c.1-3.1.5-6.1 1-9.1-.6 2.9-.9 6-1 9.1z'
      ], [
          primaryColor,
          'M951 510c0-.1-.1-.1-.1-.2l-1.8-2.1c-.1-.1-.2-.3-.4-.4-.7-.8-1.5-1.6-2.2-2.4L560.1 118.8l-25.9-25.9a31.5 31.5 0 0 0-44.4 0L77.5 505a63.6 63.6 0 0 0-16 26.6l-.6 2.1-.3 1.1-.3 1.2c-.2.7-.3 1.4-.4 2.1 0 .1 0 .3-.1.4-.6 3-.9 6-1 9.1v3.3c0 .5 0 1 .1 1.5 0 .5 0 .9.1 1.4 0 .5.1 1 .1 1.5 0 .6.1 1.2.2 1.8 0 .3.1.6.1.9l.3 2.5v.1c5.1 30.5 32.2 53.5 64 53.5h42.5V940h691.7V614.3h43.4c8.6 0 16.9-1.7 24.5-4.9s14.7-7.9 20.8-13.9a63.6 63.6 0 0 0 18.7-45.3c0-14.7-5-28.8-14.3-40.2zM568 868H456V664h112v204zm217.9-325.7V868H632V640c0-22.1-17.9-40-40-40H432c-22.1 0-40 17.9-40 40v228H238.1V542.3h-96l370-369.7 23.1 23.1L882 542.3h-96.1z'
      ]);
  });
  exports.HourglassTwoTone = getIcon('hourglass', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M512 548c-42.2 0-81.9 16.4-111.7 46.3A156.63 156.63 0 0 0 354 706v134h316V706c0-42.2-16.4-81.9-46.3-111.7A156.63 156.63 0 0 0 512 548zM354 318c0 42.2 16.4 81.9 46.3 111.7C430.1 459.6 469.8 476 512 476s81.9-16.4 111.7-46.3C653.6 399.9 670 360.2 670 318V184H354v134z'
      ], [
          primaryColor,
          'M742 318V184h86c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H196c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h86v134c0 81.5 42.4 153.2 106.4 194-64 40.8-106.4 112.5-106.4 194v134h-86c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h632c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-86V706c0-81.5-42.4-153.2-106.4-194 64-40.8 106.4-112.5 106.4-194zm-72 388v134H354V706c0-42.2 16.4-81.9 46.3-111.7C430.1 564.4 469.8 548 512 548s81.9 16.4 111.7 46.3C653.6 624.1 670 663.8 670 706zm0-388c0 42.2-16.4 81.9-46.3 111.7C593.9 459.6 554.2 476 512 476s-81.9-16.4-111.7-46.3A156.63 156.63 0 0 1 354 318V184h316v134z'
      ]);
  });
  exports.Html5TwoTone = getIcon('html5', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M145 96l66 746.6L511.8 928l299.6-85.4L878.7 96H145zm610.9 700.6l-244.1 69.6-245.2-69.6-56.7-641.2h603.8l-57.8 641.2z'
      ], [
          secondaryColor,
          'M209.9 155.4l56.7 641.2 245.2 69.6 244.1-69.6 57.8-641.2H209.9zm530.4 117.9l-4.8 47.2-1.7 19.5H381.7l8.2 94.2H511v-.2h214.7l-3.2 24.3-21.2 242.2-1.7 16.3-187.7 51.7v.4h-1.7l-188.6-52-11.3-144.7h91l6.5 73.2 102.4 27.7h.8v-.2l102.4-27.7 11.4-118.5H511.9v.1H305.4l-22.7-253.5L281 249h461l-1.7 24.3z'
      ], [
          primaryColor,
          'M281 249l1.7 24.3 22.7 253.5h206.5v-.1h112.9l-11.4 118.5L511 672.9v.2h-.8l-102.4-27.7-6.5-73.2h-91l11.3 144.7 188.6 52h1.7v-.4l187.7-51.7 1.7-16.3 21.2-242.2 3.2-24.3H511v.2H389.9l-8.2-94.2h352.1l1.7-19.5 4.8-47.2L742 249H511z'
      ]);
  });
  exports.IdcardTwoTone = getIcon('idcard', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136V232h752v560z'
      ], [
          secondaryColor,
          'M136 792h752V232H136v560zm472-372c0-4.4 1-8 2.3-8h123.4c1.3 0 2.3 3.6 2.3 8v48c0 4.4-1 8-2.3 8H610.3c-1.3 0-2.3-3.6-2.3-8v-48zm0 144c0-4.4 3.2-8 7.1-8h185.7c3.9 0 7.1 3.6 7.1 8v48c0 4.4-3.2 8-7.1 8H615.1c-3.9 0-7.1-3.6-7.1-8v-48zM216.2 664.6c2.8-53.3 31.9-99.6 74.6-126.1-18.1-20-29.1-46.4-29.1-75.5 0-61.9 49.9-112 111.4-112s111.4 50.1 111.4 112c0 29.1-11 55.6-29.1 75.5 42.6 26.4 71.8 72.8 74.6 126.1a8 8 0 0 1-8 8.4h-43.9c-4.2 0-7.6-3.3-7.9-7.5-3.8-50.5-46-90.5-97.2-90.5s-93.4 40-97.2 90.5c-.3 4.2-3.7 7.5-7.9 7.5H224c-4.6 0-8.2-3.8-7.8-8.4z'
      ], [
          secondaryColor,
          'M321.3 463a51.7 52 0 1 0 103.4 0 51.7 52 0 1 0-103.4 0z'
      ], [
          primaryColor,
          'M610.3 476h123.4c1.3 0 2.3-3.6 2.3-8v-48c0-4.4-1-8-2.3-8H610.3c-1.3 0-2.3 3.6-2.3 8v48c0 4.4 1 8 2.3 8zm4.8 144h185.7c3.9 0 7.1-3.6 7.1-8v-48c0-4.4-3.2-8-7.1-8H615.1c-3.9 0-7.1 3.6-7.1 8v48c0 4.4 3.2 8 7.1 8zM224 673h43.9c4.2 0 7.6-3.3 7.9-7.5 3.8-50.5 46-90.5 97.2-90.5s93.4 40 97.2 90.5c.3 4.2 3.7 7.5 7.9 7.5H522a8 8 0 0 0 8-8.4c-2.8-53.3-32-99.7-74.6-126.1a111.8 111.8 0 0 0 29.1-75.5c0-61.9-49.9-112-111.4-112s-111.4 50.1-111.4 112c0 29.1 11 55.5 29.1 75.5a158.09 158.09 0 0 0-74.6 126.1c-.4 4.6 3.2 8.4 7.8 8.4zm149-262c28.5 0 51.7 23.3 51.7 52s-23.2 52-51.7 52-51.7-23.3-51.7-52 23.2-52 51.7-52z'
      ]);
  });
  exports.InfoCircleTwoTone = getIcon('info-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm32 588c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'
      ], [
          primaryColor,
          'M464 336a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z'
      ]);
  });
  exports.InsuranceTwoTone = getIcon('insurance', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M866.9 169.9L527.1 54.1C523 52.7 517.5 52 512 52s-11 .7-15.1 2.1L157.1 169.9c-8.3 2.8-15.1 12.4-15.1 21.2v482.4c0 8.8 5.7 20.4 12.6 25.9L499.3 968c3.5 2.7 8 4.1 12.6 4.1s9.2-1.4 12.6-4.1l344.7-268.6c6.9-5.4 12.6-17 12.6-25.9V191.1c.2-8.8-6.6-18.3-14.9-21.2zM810 654.3L512 886.5 214 654.3V226.7l298-101.6 298 101.6v427.6z'
      ], [secondaryColor, 'M521.9 358.8h97.9v41.6h-97.9z'], [
          secondaryColor,
          'M214 226.7v427.6l298 232.2 298-232.2V226.7L512 125.1 214 226.7zM413.3 656h-.2c0 4.4-3.6 8-8 8h-37.3c-4.4 0-8-3.6-8-8V471.4c-7.7 9.2-15.4 17.9-23.1 26a6.04 6.04 0 0 1-10.2-2.4l-13.2-43.5c-.6-2-.2-4.1 1.2-5.6 37-43.4 64.7-95.1 82.2-153.6 1.1-3.5 5-5.3 8.4-3.7l38.6 18.3c2.7 1.3 4.1 4.4 3.2 7.2a429.2 429.2 0 0 1-33.6 79V656zm257.9-340v127.2c0 4.4-3.6 8-8 8h-66.7v18.6h98.8c4.4 0 8 3.6 8 8v35.6c0 4.4-3.6 8-8 8h-59c18.1 29.1 41.8 54.3 72.3 76.9 2.6 2.1 3.2 5.9 1.2 8.5l-26.3 35.3a5.92 5.92 0 0 1-8.9.7c-30.6-29.3-56.8-65.2-78.1-106.9V656c0 4.4-3.6 8-8 8h-36.2c-4.4 0-8-3.6-8-8V536c-22 44.7-49 80.8-80.6 107.6a6.38 6.38 0 0 1-4.8 1.4c-1.7-.3-3.2-1.3-4.1-2.8L432 605.7a6 6 0 0 1 1.6-8.1c28.6-20.3 51.9-45.2 71-76h-55.1c-4.4 0-8-3.6-8-8V478c0-4.4 3.6-8 8-8h94.9v-18.6h-65.9c-4.4 0-8-3.6-8-8V316c0-4.4 3.6-8 8-8h184.7c4.4 0 8 3.6 8 8z'
      ], [
          primaryColor,
          'M443.7 306.9l-38.6-18.3c-3.4-1.6-7.3.2-8.4 3.7-17.5 58.5-45.2 110.2-82.2 153.6a5.7 5.7 0 0 0-1.2 5.6l13.2 43.5c1.4 4.5 7 5.8 10.2 2.4 7.7-8.1 15.4-16.8 23.1-26V656c0 4.4 3.6 8 8 8h37.3c4.4 0 8-3.6 8-8h.2V393.1a429.2 429.2 0 0 0 33.6-79c.9-2.8-.5-5.9-3.2-7.2zm26.8 9.1v127.4c0 4.4 3.6 8 8 8h65.9V470h-94.9c-4.4 0-8 3.6-8 8v35.6c0 4.4 3.6 8 8 8h55.1c-19.1 30.8-42.4 55.7-71 76a6 6 0 0 0-1.6 8.1l22.8 36.5c.9 1.5 2.4 2.5 4.1 2.8 1.7.3 3.5-.2 4.8-1.4 31.6-26.8 58.6-62.9 80.6-107.6v120c0 4.4 3.6 8 8 8h36.2c4.4 0 8-3.6 8-8V535.9c21.3 41.7 47.5 77.6 78.1 106.9 2.6 2.5 6.7 2.2 8.9-.7l26.3-35.3c2-2.6 1.4-6.4-1.2-8.5-30.5-22.6-54.2-47.8-72.3-76.9h59c4.4 0 8-3.6 8-8v-35.6c0-4.4-3.6-8-8-8h-98.8v-18.6h66.7c4.4 0 8-3.6 8-8V316c0-4.4-3.6-8-8-8H478.5c-4.4 0-8 3.6-8 8zm51.4 42.8h97.9v41.6h-97.9v-41.6z'
      ]);
  });
  exports.InteractionTwoTone = getIcon('interaction', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm114-401.9c0-55.3 44.6-100.1 99.7-100.1h205.8v-53.4c0-5.6 6.5-8.8 10.9-5.3L723.5 365c3.5 2.7 3.5 8 0 10.7l-109.1 85.7c-4.4 3.5-10.9.4-10.9-5.3v-53.4H397.8c-19.6 0-35.5 15.9-35.5 35.6v78.9c0 3.8-3.1 6.8-6.8 6.8h-50.7c-3.8 0-6.8-3-6.8-7v-78.9zm2.6 210.3l109.1-85.7c4.4-3.5 10.9-.4 10.9 5.3v53.4h205.6c19.6 0 35.5-15.9 35.5-35.6v-78.9c0-3.8 3.1-6.8 6.8-6.8h50.7c3.8 0 6.8 3.1 6.8 6.8v78.9c0 55.3-44.6 100.1-99.7 100.1H420.6v53.4c0 5.6-6.5 8.8-10.9 5.3l-109.1-85.7c-3.5-2.7-3.5-8 0-10.5z'
      ], [
          primaryColor,
          'M304.8 524h50.7c3.7 0 6.8-3 6.8-6.8v-78.9c0-19.7 15.9-35.6 35.5-35.6h205.7v53.4c0 5.7 6.5 8.8 10.9 5.3l109.1-85.7c3.5-2.7 3.5-8 0-10.7l-109.1-85.7c-4.4-3.5-10.9-.3-10.9 5.3V338H397.7c-55.1 0-99.7 44.8-99.7 100.1V517c0 4 3 7 6.8 7zm-4.2 134.9l109.1 85.7c4.4 3.5 10.9.3 10.9-5.3v-53.4h205.7c55.1 0 99.7-44.8 99.7-100.1v-78.9c0-3.7-3-6.8-6.8-6.8h-50.7c-3.7 0-6.8 3-6.8 6.8v78.9c0 19.7-15.9 35.6-35.5 35.6H420.6V568c0-5.7-6.5-8.8-10.9-5.3l-109.1 85.7c-3.5 2.5-3.5 7.8 0 10.5z'
      ]);
  });
  exports.InterationTwoTone = getIcon('interation', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm114-401.9c0-55.3 44.6-100.1 99.7-100.1h205.8v-53.4c0-5.6 6.5-8.8 10.9-5.3L723.5 365c3.5 2.7 3.5 8 0 10.7l-109.1 85.7c-4.4 3.5-10.9.4-10.9-5.3v-53.4H397.8c-19.6 0-35.5 15.9-35.5 35.6v78.9c0 3.8-3.1 6.8-6.8 6.8h-50.7c-3.8 0-6.8-3-6.8-7v-78.9zm2.6 210.3l109.1-85.7c4.4-3.5 10.9-.4 10.9 5.3v53.4h205.6c19.6 0 35.5-15.9 35.5-35.6v-78.9c0-3.8 3.1-6.8 6.8-6.8h50.7c3.8 0 6.8 3.1 6.8 6.8v78.9c0 55.3-44.6 100.1-99.7 100.1H420.6v53.4c0 5.6-6.5 8.8-10.9 5.3l-109.1-85.7c-3.5-2.7-3.5-8 0-10.5z'
      ], [
          primaryColor,
          'M304.8 524h50.7c3.7 0 6.8-3 6.8-6.8v-78.9c0-19.7 15.9-35.6 35.5-35.6h205.7v53.4c0 5.7 6.5 8.8 10.9 5.3l109.1-85.7c3.5-2.7 3.5-8 0-10.7l-109.1-85.7c-4.4-3.5-10.9-.3-10.9 5.3V338H397.7c-55.1 0-99.7 44.8-99.7 100.1V517c0 4 3 7 6.8 7zm-4.2 134.9l109.1 85.7c4.4 3.5 10.9.3 10.9-5.3v-53.4h205.7c55.1 0 99.7-44.8 99.7-100.1v-78.9c0-3.7-3-6.8-6.8-6.8h-50.7c-3.7 0-6.8 3-6.8 6.8v78.9c0 19.7-15.9 35.6-35.5 35.6H420.6V568c0-5.7-6.5-8.8-10.9-5.3l-109.1 85.7c-3.5 2.5-3.5 7.8 0 10.5z'
      ]);
  });
  exports.LayoutTwoTone = getIcon('layout', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M384 185h456v136H384zm-200 0h136v656H184zm696-73H144c-17.7 0-32 14.3-32 32v1c0-17.7 14.3-32 32-32h736c17.7 0 32 14.3 32 32v-1c0-17.7-14.3-32-32-32zM384 385h456v456H384z'
      ], [
          primaryColor,
          'M880 113H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V145c0-17.7-14.3-32-32-32zM320 841H184V185h136v656zm520 0H384V385h456v456zm0-520H384V185h456v136z'
      ]);
  });
  exports.LeftCircleTwoTone = getIcon('left-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm104 240.9c0 10.3-4.9 19.9-13.2 25.9L457.4 512l145.4 105.1c8.3 6 13.2 15.7 13.2 25.9v46.9c0 6.5-7.4 10.3-12.7 6.5l-246-178a7.95 7.95 0 0 1 0-12.9l246-178c5.3-3.8 12.7 0 12.7 6.5v46.9z'
      ], [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          primaryColor,
          'M603.3 327.5l-246 178a7.95 7.95 0 0 0 0 12.9l246 178c5.3 3.8 12.7 0 12.7-6.5V643c0-10.2-4.9-19.9-13.2-25.9L457.4 512l145.4-105.2c8.3-6 13.2-15.6 13.2-25.9V334c0-6.5-7.4-10.3-12.7-6.5z'
      ]);
  });
  exports.LeftSquareTwoTone = getIcon('left-square', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm181.3-334.5l246-178c5.3-3.8 12.7 0 12.7 6.5v46.9c0 10.3-4.9 19.9-13.2 25.9L465.4 512l145.4 105.2c8.3 6 13.2 15.7 13.2 25.9V690c0 6.5-7.4 10.3-12.7 6.4l-246-178a7.95 7.95 0 0 1 0-12.9z'
      ], [
          primaryColor,
          'M365.3 518.4l246 178c5.3 3.9 12.7.1 12.7-6.4v-46.9c0-10.2-4.9-19.9-13.2-25.9L465.4 512l145.4-105.2c8.3-6 13.2-15.6 13.2-25.9V334c0-6.5-7.4-10.3-12.7-6.5l-246 178a7.95 7.95 0 0 0 0 12.9z'
      ]);
  });
  exports.LikeTwoTone = getIcon('like', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M273 495.9v428l.3-428zm538.2-88.3H496.8l9.6-198.4c.6-11.9-4.7-23.1-14.6-30.5-6.1-4.5-13.6-6.8-21.1-6.7-19.6.1-36.9 13.4-42.2 32.3-37.1 134.4-64.9 235.2-83.5 302.5V852h399.4a56.85 56.85 0 0 0 33.6-51.8c0-9.7-2.3-18.9-6.9-27.3l-13.9-25.4 21.9-19a56.76 56.76 0 0 0 19.6-43c0-9.7-2.3-18.9-6.9-27.3l-13.9-25.4 21.9-19a56.76 56.76 0 0 0 19.6-43c0-9.7-2.3-18.9-6.9-27.3l-14-25.5 21.9-19a56.76 56.76 0 0 0 19.6-43c0-19.1-11-37.5-28.8-48.4z'
      ], [
          primaryColor,
          'M112 528v364c0 17.7 14.3 32 32 32h65V496h-65c-17.7 0-32 14.3-32 32zm773.9 5.7c16.8-22.2 26.1-49.4 26.1-77.7 0-44.9-25.1-87.5-65.5-111a67.67 67.67 0 0 0-34.3-9.3H572.3l6-122.9c1.5-29.7-9-57.9-29.5-79.4a106.4 106.4 0 0 0-77.9-33.4c-52 0-98 35-111.8 85.1l-85.8 310.8-.3 428h472.1c9.3 0 18.2-1.8 26.5-5.4 47.6-20.3 78.3-66.8 78.3-118.4 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7 0-12.6-1.8-25-5.4-37zM820.4 499l-21.9 19 14 25.5a56.2 56.2 0 0 1 6.9 27.3c0 16.5-7.1 32.2-19.6 43l-21.9 19 13.9 25.4a56.2 56.2 0 0 1 6.9 27.3c0 16.5-7.1 32.2-19.6 43l-21.9 19 13.9 25.4a56.2 56.2 0 0 1 6.9 27.3c0 22.4-13.2 42.6-33.6 51.8H345V506.8c18.6-67.2 46.4-168 83.5-302.5a44.28 44.28 0 0 1 42.2-32.3c7.5-.1 15 2.2 21.1 6.7 9.9 7.4 15.2 18.6 14.6 30.5l-9.6 198.4h314.4C829 418.5 840 436.9 840 456c0 16.5-7.1 32.2-19.6 43z'
      ]);
  });
  exports.LockTwoTone = getIcon('lock', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M832 464h-68V240c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zM332 240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v224H332V240zm460 600H232V536h560v304z'
      ], [
          secondaryColor,
          'M232 840h560V536H232v304zm280-226a48.01 48.01 0 0 1 28 87v53c0 4.4-3.6 8-8 8h-40c-4.4 0-8-3.6-8-8v-53a48.01 48.01 0 0 1 28-87z'
      ], [
          primaryColor,
          'M484 701v53c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-53a48.01 48.01 0 1 0-56 0z'
      ]);
  });
  exports.MailTwoTone = getIcon('mail', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M477.5 536.3L135.9 270.7l-27.5-21.4 27.6 21.5V792h752V270.8L546.2 536.3a55.99 55.99 0 0 1-68.7 0z'
      ], [secondaryColor, 'M876.3 198.8l39.3 50.5-27.6 21.5 27.7-21.5-39.3-50.5z'], [
          primaryColor,
          'M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-94.5 72.1L512 482 190.5 232.1h643zm54.5 38.7V792H136V270.8l-27.6-21.5 27.5 21.4 341.6 265.6a55.99 55.99 0 0 0 68.7 0L888 270.8l27.6-21.5-39.3-50.5h.1l39.3 50.5-27.7 21.5z'
      ]);
  });
  exports.MedicineBoxTwoTone = getIcon('medicine-box', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M244.3 328L184 513.4V840h656V513.4L779.7 328H244.3zM660 628c0 4.4-3.6 8-8 8H544v108c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V636H372c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h108V464c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v108h108c4.4 0 8 3.6 8 8v48z'
      ], [
          primaryColor,
          'M652 572H544V464c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v108H372c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h108v108c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V636h108c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z'
      ], [
          primaryColor,
          'M839.2 278.1a32 32 0 0 0-30.4-22.1H736V144c0-17.7-14.3-32-32-32H320c-17.7 0-32 14.3-32 32v112h-72.8a31.9 31.9 0 0 0-30.4 22.1L112 502v378c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V502l-72.8-223.9zM360 184h304v72H360v-72zm480 656H184V513.4L244.3 328h535.4L840 513.4V840z'
      ]);
  });
  exports.MehTwoTone = getIcon('meh', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zM288 421a48.01 48.01 0 0 1 96 0 48.01 48.01 0 0 1-96 0zm384 200c0 4.4-3.6 8-8 8H360c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h304c4.4 0 8 3.6 8 8v48zm16-152a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'
      ], [
          primaryColor,
          'M288 421a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm376 144H360c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h304c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm-24-144a48 48 0 1 0 96 0 48 48 0 1 0-96 0z'
      ]);
  });
  exports.MessageTwoTone = getIcon('message', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M775.3 248.9a369.62 369.62 0 0 0-119-80A370.2 370.2 0 0 0 512.1 140h-1.7c-99.7.4-193 39.4-262.8 109.9-69.9 70.5-108 164.1-107.6 263.8.3 60.3 15.3 120.2 43.5 173.1l4.5 8.4V836h140.8l8.4 4.5c52.9 28.2 112.8 43.2 173.1 43.5h1.7c99 0 192-38.2 262.1-107.6 70.4-69.8 109.5-163.1 110.1-262.7.2-50.6-9.5-99.6-28.9-145.8a370.15 370.15 0 0 0-80-119zM312 560a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96zm200 0a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96zm200 0a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'
      ], [
          primaryColor,
          'M664 512a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm-400 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0z'
      ], [
          primaryColor,
          'M925.2 338.4c-22.6-53.7-55-101.9-96.3-143.3a444.35 444.35 0 0 0-143.3-96.3C630.6 75.7 572.2 64 512 64h-2c-60.6.3-119.3 12.3-174.5 35.9a445.35 445.35 0 0 0-142 96.5c-40.9 41.3-73 89.3-95.2 142.8-23 55.4-34.6 114.3-34.3 174.9A449.4 449.4 0 0 0 112 714v152a46 46 0 0 0 46 46h152.1A449.4 449.4 0 0 0 510 960h2.1c59.9 0 118-11.6 172.7-34.3a444.48 444.48 0 0 0 142.8-95.2c41.3-40.9 73.8-88.7 96.5-142 23.6-55.2 35.6-113.9 35.9-174.5.3-60.9-11.5-120-34.8-175.6zm-151.1 438C704 845.8 611 884 512 884h-1.7c-60.3-.3-120.2-15.3-173.1-43.5l-8.4-4.5H188V695.2l-4.5-8.4C155.3 633.9 140.3 574 140 513.7c-.4-99.7 37.7-193.3 107.6-263.8 69.8-70.5 163.1-109.5 262.8-109.9h1.7c50 0 98.5 9.7 144.2 28.9 44.6 18.7 84.6 45.6 119 80 34.3 34.3 61.3 74.4 80 119 19.4 46.2 29.1 95.2 28.9 145.8-.6 99.6-39.7 192.9-110.1 262.7z'
      ], [primaryColor, 'M464 512a48 48 0 1 0 96 0 48 48 0 1 0-96 0z']);
  });
  exports.MinusCircleTwoTone = getIcon('minus-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm192 396c0 4.4-3.6 8-8 8H328c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h368c4.4 0 8 3.6 8 8v48z'
      ], [
          primaryColor,
          'M696 480H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z'
      ]);
  });
  exports.MinusSquareTwoTone = getIcon('minus-square', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm136-352c0-4.4 3.6-8 8-8h368c4.4 0 8 3.6 8 8v48c0 4.4-3.6 8-8 8H328c-4.4 0-8-3.6-8-8v-48z'
      ], [
          primaryColor,
          'M328 544h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z'
      ]);
  });
  exports.MobileTwoTone = getIcon('mobile', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M744 64H280c-35.3 0-64 28.7-64 64v768c0 35.3 28.7 64 64 64h464c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64zm-8 824H288V136h448v752z'
      ], [
          secondaryColor,
          'M288 888h448V136H288v752zm224-142c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40z'
      ], [primaryColor, 'M472 786a40 40 0 1 0 80 0 40 40 0 1 0-80 0z']);
  });
  exports.PauseCircleTwoTone = getIcon('pause-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm-80 524c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V360c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v304zm224 0c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V360c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v304z'
      ], [
          primaryColor,
          'M424 352h-48c-4.4 0-8 3.6-8 8v304c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V360c0-4.4-3.6-8-8-8zm224 0h-48c-4.4 0-8 3.6-8 8v304c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V360c0-4.4-3.6-8-8-8z'
      ]);
  });
  exports.MoneyCollectTwoTone = getIcon('money-collect', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M256 744.4l256 93.1 256-93.1V184H256v560.4zM359.7 313c1.2-.7 2.5-1 3.8-1h55.7a8 8 0 0 1 7.1 4.4L511 485.2h3.3L599 316.4c1.3-2.7 4.1-4.4 7.1-4.4h54.5c4.4 0 8 3.6 8.1 7.9 0 1.3-.4 2.6-1 3.8L564 515.3h57.6c4.4 0 8 3.6 8 8v27.1c0 4.4-3.6 8-8 8h-76.3v39h76.3c4.4 0 8 3.6 8 8v27.1c0 4.4-3.6 8-8 8h-76.3V704c0 4.4-3.6 8-8 8h-49.9c-4.4 0-8-3.6-8-8v-63.4h-76c-4.4 0-8-3.6-8-8v-27.1c0-4.4 3.6-8 8-8h76v-39h-76c-4.4 0-8-3.6-8-8v-27.1c0-4.4 3.6-8 8-8h57L356.5 323.8c-2.1-3.8-.7-8.7 3.2-10.8z'
      ], [
          primaryColor,
          'M911.5 700.7a8 8 0 0 0-10.3-4.8L840 718.2V180c0-37.6-30.4-68-68-68H252c-37.6 0-68 30.4-68 68v538.2l-61.3-22.3c-.9-.3-1.8-.5-2.7-.5-4.4 0-8 3.6-8 8V763c0 3.3 2.1 6.3 5.3 7.5L501 910.1c7.1 2.6 14.8 2.6 21.9 0l383.8-139.5c3.2-1.2 5.3-4.2 5.3-7.5v-59.6c0-1-.2-1.9-.5-2.8zM768 744.4l-256 93.1-256-93.1V184h512v560.4z'
      ], [
          primaryColor,
          'M460.4 515.4h-57c-4.4 0-8 3.6-8 8v27.1c0 4.4 3.6 8 8 8h76v39h-76c-4.4 0-8 3.6-8 8v27.1c0 4.4 3.6 8 8 8h76V704c0 4.4 3.6 8 8 8h49.9c4.4 0 8-3.6 8-8v-63.5h76.3c4.4 0 8-3.6 8-8v-27.1c0-4.4-3.6-8-8-8h-76.3v-39h76.3c4.4 0 8-3.6 8-8v-27.1c0-4.4-3.6-8-8-8H564l103.7-191.6c.6-1.2 1-2.5 1-3.8-.1-4.3-3.7-7.9-8.1-7.9h-54.5c-3 0-5.8 1.7-7.1 4.4l-84.7 168.8H511l-84.7-168.8a8 8 0 0 0-7.1-4.4h-55.7c-1.3 0-2.6.3-3.8 1-3.9 2.1-5.3 7-3.2 10.8l103.9 191.6z'
      ]);
  });
  exports.NotificationTwoTone = getIcon('notification', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M229.6 678.1c-3.7 11.6-5.6 23.9-5.6 36.4 0-12.5 2-24.8 5.7-36.4h-.1zm76.3-260.2H184v188.2h121.9l12.9 5.2L840 820.7V203.3L318.8 412.7z'
      ], [
          primaryColor,
          'M880 112c-3.8 0-7.7.7-11.6 2.3L292 345.9H128c-8.8 0-16 7.4-16 16.6v299c0 9.2 7.2 16.6 16 16.6h101.7c-3.7 11.6-5.7 23.9-5.7 36.4 0 65.9 53.8 119.5 120 119.5 55.4 0 102.1-37.6 115.9-88.4l408.6 164.2c3.9 1.5 7.8 2.3 11.6 2.3 16.9 0 32-14.2 32-33.2V145.2C912 126.2 897 112 880 112zM344 762.3c-26.5 0-48-21.4-48-47.8 0-11.2 3.9-21.9 11-30.4l84.9 34.1c-2 24.6-22.7 44.1-47.9 44.1zm496 58.4L318.8 611.3l-12.9-5.2H184V417.9h121.9l12.9-5.2L840 203.3v617.4z'
      ]);
  });
  exports.PhoneTwoTone = getIcon('phone', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M721.7 184.9L610.9 295.8l120.8 120.7-8 21.6A481.29 481.29 0 0 1 438 723.9l-21.6 8-.9-.9-119.8-120-110.8 110.9 104.5 104.5c10.8 10.7 26 15.7 40.8 13.2 117.9-19.5 235.4-82.9 330.9-178.4s158.9-213.1 178.4-331c2.5-14.8-2.5-30-13.3-40.8L721.7 184.9z'
      ], [
          primaryColor,
          'M877.1 238.7L770.6 132.3c-13-13-30.4-20.3-48.8-20.3s-35.8 7.2-48.8 20.3L558.3 246.8c-13 13-20.3 30.5-20.3 48.9 0 18.5 7.2 35.8 20.3 48.9l89.6 89.7a405.46 405.46 0 0 1-86.4 127.3c-36.7 36.9-79.6 66-127.2 86.6l-89.6-89.7c-13-13-30.4-20.3-48.8-20.3a68.2 68.2 0 0 0-48.8 20.3L132.3 673c-13 13-20.3 30.5-20.3 48.9 0 18.5 7.2 35.8 20.3 48.9l106.4 106.4c22.2 22.2 52.8 34.9 84.2 34.9 6.5 0 12.8-.5 19.2-1.6 132.4-21.8 263.8-92.3 369.9-198.3C818 606 888.4 474.6 910.4 342.1c6.3-37.6-6.3-76.3-33.3-103.4zm-37.6 91.5c-19.5 117.9-82.9 235.5-178.4 331s-213 158.9-330.9 178.4c-14.8 2.5-30-2.5-40.8-13.2L184.9 721.9 295.7 611l119.8 120 .9.9 21.6-8a481.29 481.29 0 0 0 285.7-285.8l8-21.6-120.8-120.7 110.8-110.9 104.5 104.5c10.8 10.8 15.8 26 13.3 40.8z'
      ]);
  });
  exports.PictureTwoTone = getIcon('picture', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136v-39.9l138.5-164.3 150.1 178L658.1 489 888 761.6V792zm0-129.8L664.2 396.8c-3.2-3.8-9-3.8-12.2 0L424.6 666.4l-144-170.7c-3.2-3.8-9-3.8-12.2 0L136 652.7V232h752v430.2z'
      ], [
          secondaryColor,
          'M424.6 765.8l-150.1-178L136 752.1V792h752v-30.4L658.1 489z'
      ], [
          secondaryColor,
          'M136 652.7l132.4-157c3.2-3.8 9-3.8 12.2 0l144 170.7L652 396.8c3.2-3.8 9-3.8 12.2 0L888 662.2V232H136v420.7zM304 280a88 88 0 1 1 0 176 88 88 0 0 1 0-176z'
      ], [secondaryColor, 'M276 368a28 28 0 1 0 56 0 28 28 0 1 0-56 0z'], [
          primaryColor,
          'M304 456a88 88 0 1 0 0-176 88 88 0 0 0 0 176zm0-116c15.5 0 28 12.5 28 28s-12.5 28-28 28-28-12.5-28-28 12.5-28 28-28z'
      ]);
  });
  exports.PlayCircleTwoTone = getIcon('play-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm164.1 378.2L457.7 677.1a8.02 8.02 0 0 1-12.7-6.5V353a8 8 0 0 1 12.7-6.5l218.4 158.8a7.9 7.9 0 0 1 0 12.9z'
      ], [
          primaryColor,
          'M676.1 505.3L457.7 346.5A8 8 0 0 0 445 353v317.6a8.02 8.02 0 0 0 12.7 6.5l218.4-158.9a7.9 7.9 0 0 0 0-12.9z'
      ]);
  });
  exports.PlaySquareTwoTone = getIcon('play-square', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm240-484.7c0-9.4 10.9-14.7 18.3-8.8l199.4 156.7a11.2 11.2 0 0 1 0 17.6L442.3 677.6c-7.4 5.8-18.3.6-18.3-8.8V355.3z'
      ], [
          primaryColor,
          'M442.3 677.6l199.4-156.8a11.2 11.2 0 0 0 0-17.6L442.3 346.5c-7.4-5.9-18.3-.6-18.3 8.8v313.5c0 9.4 10.9 14.6 18.3 8.8z'
      ]);
  });
  exports.PieChartTwoTone = getIcon('pie-chart', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M316.2 920.5c-47.6-20.1-90.4-49-127.1-85.7a398.19 398.19 0 0 1-85.7-127.1A397.12 397.12 0 0 1 72 552.2v.2a398.57 398.57 0 0 0 117 282.5c36.7 36.7 79.4 65.5 127 85.6A396.64 396.64 0 0 0 471.6 952c27 0 53.6-2.7 79.7-7.9-25.9 5.2-52.4 7.8-79.3 7.8-54 .1-106.4-10.5-155.8-31.4zM560 472c-4.4 0-8-3.6-8-8V79.9c0-1.3.3-2.5.9-3.6-.9 1.3-1.5 2.9-1.5 4.6v383.7c0 4.4 3.6 8 8 8l383.6-1c1.6 0 3.1-.5 4.4-1.3-1 .5-2.2.7-3.4.7l-384 1z'
      ], [
          secondaryColor,
          'M619.8 147.6v256.6l256.4-.7c-13-62.5-44.3-120.5-90-166.1a332.24 332.24 0 0 0-166.4-89.8z'
      ], [
          secondaryColor,
          'M438 221.7c-75.9 7.6-146.2 40.9-200.8 95.5C174.5 379.9 140 463.3 140 552s34.5 172.1 97.2 234.8c62.3 62.3 145.1 96.8 233.2 97.2 88.2.4 172.7-34.1 235.3-96.2C761 733 794.6 662.3 802.3 586H438V221.7z'
      ], [
          primaryColor,
          'M864 518H506V160c0-4.4-3.6-8-8-8h-26a398.46 398.46 0 0 0-282.8 117.1 398.19 398.19 0 0 0-85.7 127.1A397.61 397.61 0 0 0 72 552v.2c0 53.9 10.6 106.2 31.4 155.5 20.1 47.6 49 90.4 85.7 127.1 36.7 36.7 79.5 65.6 127.1 85.7A397.61 397.61 0 0 0 472 952c26.9 0 53.4-2.6 79.3-7.8 26.1-5.3 51.7-13.1 76.4-23.6 47.6-20.1 90.4-49 127.1-85.7 36.7-36.7 65.6-79.5 85.7-127.1A397.61 397.61 0 0 0 872 552v-26c0-4.4-3.6-8-8-8zM705.7 787.8A331.59 331.59 0 0 1 470.4 884c-88.1-.4-170.9-34.9-233.2-97.2C174.5 724.1 140 640.7 140 552s34.5-172.1 97.2-234.8c54.6-54.6 124.9-87.9 200.8-95.5V586h364.3c-7.7 76.3-41.3 147-96.6 201.8z'
      ], [
          primaryColor,
          'M952 462.4l-2.6-28.2c-8.5-92.1-49.4-179-115.2-244.6A399.4 399.4 0 0 0 589 74.6L560.7 72c-3.4-.3-6.4 1.5-7.8 4.3a8.7 8.7 0 0 0-.9 3.6V464c0 4.4 3.6 8 8 8l384-1c1.2 0 2.3-.3 3.4-.7a8.1 8.1 0 0 0 4.6-7.9zm-332.2-58.2V147.6a332.24 332.24 0 0 1 166.4 89.8c45.7 45.6 77 103.6 90 166.1l-256.4.7z'
      ]);
  });
  exports.PlusCircleTwoTone = getIcon('plus-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm192 396c0 4.4-3.6 8-8 8H544v152c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V544H328c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h152V328c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v152h152c4.4 0 8 3.6 8 8v48z'
      ], [
          primaryColor,
          'M696 480H544V328c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v152H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h152v152c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V544h152c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z'
      ]);
  });
  exports.PlusSquareTwoTone = getIcon('plus-square', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm136-352c0-4.4 3.6-8 8-8h152V328c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v152h152c4.4 0 8 3.6 8 8v48c0 4.4-3.6 8-8 8H544v152c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V544H328c-4.4 0-8-3.6-8-8v-48z'
      ], [
          primaryColor,
          'M328 544h152v152c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V544h152c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H544V328c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v152H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z'
      ]);
  });
  exports.PoundCircleTwoTone = getIcon('pound-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm146 582.1c0 4.4-3.6 8-8 8H376.2c-4.4 0-8-3.6-8-8v-38.5c0-3.7 2.5-6.9 6.1-7.8 44-10.9 72.8-49 72.8-94.2 0-14.7-2.5-29.4-5.9-44.2H374c-4.4 0-8-3.6-8-8v-30c0-4.4 3.6-8 8-8h53.7c-7.8-25.1-14.6-50.7-14.6-77.1 0-75.8 58.6-120.3 151.5-120.3 26.5 0 51.4 5.5 70.3 12.7 3.1 1.2 5.2 4.2 5.2 7.5v39.5a8 8 0 0 1-10.6 7.6c-17.9-6.4-39-10.5-60.4-10.5-53.3 0-87.3 26.6-87.3 70.2 0 24.7 6.2 47.9 13.4 70.5h112c4.4 0 8 3.6 8 8v30c0 4.4-3.6 8-8 8h-98.6c3.1 13.2 5.3 26.9 5.3 41 0 40.7-16.5 73.9-43.9 91.1v4.7h180c4.4 0 8 3.6 8 8v39.8z'
      ], [
          primaryColor,
          'M650 674.3H470v-4.7c27.4-17.2 43.9-50.4 43.9-91.1 0-14.1-2.2-27.8-5.3-41h98.6c4.4 0 8-3.6 8-8v-30c0-4.4-3.6-8-8-8h-112c-7.2-22.6-13.4-45.8-13.4-70.5 0-43.6 34-70.2 87.3-70.2 21.4 0 42.5 4.1 60.4 10.5a8 8 0 0 0 10.6-7.6v-39.5c0-3.3-2.1-6.3-5.2-7.5-18.9-7.2-43.8-12.7-70.3-12.7-92.9 0-151.5 44.5-151.5 120.3 0 26.4 6.8 52 14.6 77.1H374c-4.4 0-8 3.6-8 8v30c0 4.4 3.6 8 8 8h67.2c3.4 14.8 5.9 29.5 5.9 44.2 0 45.2-28.8 83.3-72.8 94.2-3.6.9-6.1 4.1-6.1 7.8v38.5c0 4.4 3.6 8 8 8H650c4.4 0 8-3.6 8-8v-39.8c0-4.4-3.6-8-8-8z'
      ]);
  });
  exports.PrinterTwoTone = getIcon('printer', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M360 180h304v152H360zm492 220H172c-6.6 0-12 5.4-12 12v292h132V500h440v204h132V412c0-6.6-5.4-12-12-12zm-24 84c0 4.4-3.6 8-8 8h-40c-4.4 0-8-3.6-8-8v-40c0-4.4 3.6-8 8-8h40c4.4 0 8 3.6 8 8v40z'
      ], [
          primaryColor,
          'M852 332H732V120c0-4.4-3.6-8-8-8H300c-4.4 0-8 3.6-8 8v212H172c-44.2 0-80 35.8-80 80v328c0 17.7 14.3 32 32 32h168v132c0 4.4 3.6 8 8 8h424c4.4 0 8-3.6 8-8V772h168c17.7 0 32-14.3 32-32V412c0-44.2-35.8-80-80-80zM360 180h304v152H360V180zm304 664H360V568h304v276zm200-140H732V500H292v204H160V412c0-6.6 5.4-12 12-12h680c6.6 0 12 5.4 12 12v292z'
      ], [
          primaryColor,
          'M820 436h-40c-4.4 0-8 3.6-8 8v40c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-40c0-4.4-3.6-8-8-8z'
      ]);
  });
  exports.ProfileTwoTone = getIcon('profile', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm300-496c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48c0 4.4-3.6 8-8 8H492c-4.4 0-8-3.6-8-8v-48zm0 144c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48c0 4.4-3.6 8-8 8H492c-4.4 0-8-3.6-8-8v-48zm0 144c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48c0 4.4-3.6 8-8 8H492c-4.4 0-8-3.6-8-8v-48zM380 328c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40zm0 144c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40zm0 144c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40z'
      ], [
          primaryColor,
          'M340 656a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm0-144a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm0-144a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm152 320h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H492c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8zm0-144h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H492c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8zm0-144h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H492c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z'
      ]);
  });
  exports.ProjectTwoTone = getIcon('project', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm472-560c0-4.4 3.6-8 8-8h80c4.4 0 8 3.6 8 8v256c0 4.4-3.6 8-8 8h-80c-4.4 0-8-3.6-8-8V280zm-192 0c0-4.4 3.6-8 8-8h80c4.4 0 8 3.6 8 8v184c0 4.4-3.6 8-8 8h-80c-4.4 0-8-3.6-8-8V280zm-192 0c0-4.4 3.6-8 8-8h80c4.4 0 8 3.6 8 8v464c0 4.4-3.6 8-8 8h-80c-4.4 0-8-3.6-8-8V280z'
      ], [
          primaryColor,
          'M280 752h80c4.4 0 8-3.6 8-8V280c0-4.4-3.6-8-8-8h-80c-4.4 0-8 3.6-8 8v464c0 4.4 3.6 8 8 8zm192-280h80c4.4 0 8-3.6 8-8V280c0-4.4-3.6-8-8-8h-80c-4.4 0-8 3.6-8 8v184c0 4.4 3.6 8 8 8zm192 72h80c4.4 0 8-3.6 8-8V280c0-4.4-3.6-8-8-8h-80c-4.4 0-8 3.6-8 8v256c0 4.4 3.6 8 8 8z'
      ]);
  });
  exports.PushpinTwoTone = getIcon('pushpin', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M474.8 357.7l-24.5 24.5-34.4-3.8c-9.6-1.1-19.3-1.6-28.9-1.6-29 0-57.5 4.7-84.7 14.1-14 4.8-27.4 10.8-40.3 17.9l353.1 353.3a259.92 259.92 0 0 0 30.4-153.9l-3.8-34.4 24.5-24.5L800 415.5 608.5 224 474.8 357.7z'
      ], [
          primaryColor,
          'M878.3 392.1L631.9 145.7c-6.5-6.5-15-9.7-23.5-9.7s-17 3.2-23.5 9.7L423.8 306.9c-12.2-1.4-24.5-2-36.8-2-73.2 0-146.4 24.1-206.5 72.3a33.23 33.23 0 0 0-2.7 49.4l181.7 181.7-215.4 215.2a15.8 15.8 0 0 0-4.6 9.8l-3.4 37.2c-.9 9.4 6.6 17.4 15.9 17.4.5 0 1 0 1.5-.1l37.2-3.4c3.7-.3 7.2-2 9.8-4.6l215.4-215.4 181.7 181.7c6.5 6.5 15 9.7 23.5 9.7 9.7 0 19.3-4.2 25.9-12.4 56.3-70.3 79.7-158.3 70.2-243.4l161.1-161.1c12.9-12.8 12.9-33.8 0-46.8zM666.2 549.3l-24.5 24.5 3.8 34.4a259.92 259.92 0 0 1-30.4 153.9L262 408.8c12.9-7.1 26.3-13.1 40.3-17.9 27.2-9.4 55.7-14.1 84.7-14.1 9.6 0 19.3.5 28.9 1.6l34.4 3.8 24.5-24.5L608.5 224 800 415.5 666.2 549.3z'
      ]);
  });
  exports.PropertySafetyTwoTone = getIcon('property-safety', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M866.9 169.9L527.1 54.1C523 52.7 517.5 52 512 52s-11 .7-15.1 2.1L157.1 169.9c-8.3 2.8-15.1 12.4-15.1 21.2v482.4c0 8.8 5.7 20.4 12.6 25.9L499.3 968c3.5 2.7 8 4.1 12.6 4.1s9.2-1.4 12.6-4.1l344.7-268.6c6.9-5.4 12.6-17 12.6-25.9V191.1c.2-8.8-6.6-18.3-14.9-21.2zM810 654.3L512 886.5 214 654.3V226.7l298-101.6 298 101.6v427.6z'
      ], [
          secondaryColor,
          'M214 226.7v427.6l298 232.2 298-232.2V226.7L512 125.1 214 226.7zM593.9 318h45c5.5 0 10 4.5 10 10 .1 1.7-.3 3.3-1.1 4.8l-87.7 161.1h45.7c5.5 0 10 4.5 10 10v21.3c0 5.5-4.5 10-10 10h-63.4v29.7h63.4c5.5 0 10 4.5 10 10v21.3c0 5.5-4.5 10-10 10h-63.4V658c0 5.5-4.5 10-10 10h-41.3c-5.5 0-10-4.5-10-10v-51.8H418c-5.5 0-10-4.5-10-10v-21.3c0-5.5 4.5-10 10-10h63.1v-29.7H418c-5.5 0-10-4.5-10-10v-21.3c0-5.5 4.5-10 10-10h45.2l-88-161.1c-2.6-4.8-.9-10.9 4-13.6 1.5-.8 3.1-1.2 4.8-1.2h46c3.8 0 7.2 2.1 8.9 5.5l72.9 144.3L585 323.5a10 10 0 0 1 8.9-5.5z'
      ], [
          primaryColor,
          'M438.9 323.5a9.88 9.88 0 0 0-8.9-5.5h-46c-1.7 0-3.3.4-4.8 1.2-4.9 2.7-6.6 8.8-4 13.6l88 161.1H418c-5.5 0-10 4.5-10 10v21.3c0 5.5 4.5 10 10 10h63.1v29.7H418c-5.5 0-10 4.5-10 10v21.3c0 5.5 4.5 10 10 10h63.1V658c0 5.5 4.5 10 10 10h41.3c5.5 0 10-4.5 10-10v-51.8h63.4c5.5 0 10-4.5 10-10v-21.3c0-5.5-4.5-10-10-10h-63.4v-29.7h63.4c5.5 0 10-4.5 10-10v-21.3c0-5.5-4.5-10-10-10h-45.7l87.7-161.1c.8-1.5 1.2-3.1 1.1-4.8 0-5.5-4.5-10-10-10h-45a10 10 0 0 0-8.9 5.5l-73.2 144.3-72.9-144.3z'
      ]);
  });
  exports.QuestionCircleTwoTone = getIcon('question-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm0 632c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40zm62.9-219.5a48.3 48.3 0 0 0-30.9 44.8V620c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-21.5c0-23.1 6.7-45.9 19.9-64.9 12.9-18.6 30.9-32.8 52.1-40.9 34-13.1 56-41.6 56-72.7 0-44.1-43.1-80-96-80s-96 35.9-96 80v7.6c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V420c0-39.3 17.2-76 48.4-103.3C430.4 290.4 470 276 512 276s81.6 14.5 111.6 40.7C654.8 344 672 380.7 672 420c0 57.8-38.1 109.8-97.1 132.5z'
      ], [
          primaryColor,
          'M472 732a40 40 0 1 0 80 0 40 40 0 1 0-80 0zm151.6-415.3C593.6 290.5 554 276 512 276s-81.6 14.4-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.2 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0 1 30.9-44.8c59-22.7 97.1-74.7 97.1-132.5 0-39.3-17.2-76-48.4-103.3z'
      ]);
  });
  exports.ReconciliationTwoTone = getIcon('reconciliation', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M740 344H404V240H304v160h176c17.7 0 32 14.3 32 32v360h328V240H740v104zM584 448c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v56c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-56zm92 301c-50.8 0-92-41.2-92-92s41.2-92 92-92 92 41.2 92 92-41.2 92-92 92zm92-341v96c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-96c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8z'
      ], [secondaryColor, 'M642 657a34 34 0 1 0 68 0 34 34 0 1 0-68 0z'], [
          primaryColor,
          'M592 512h48c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm112-104v96c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-96c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8z'
      ], [
          primaryColor,
          'M880 168H668c0-30.9-25.1-56-56-56h-80c-30.9 0-56 25.1-56 56H264c-17.7 0-32 14.3-32 32v200h-88c-17.7 0-32 14.3-32 32v448c0 17.7 14.3 32 32 32h336c17.7 0 32-14.3 32-32v-16h368c17.7 0 32-14.3 32-32V200c0-17.7-14.3-32-32-32zm-412 64h72v-56h64v56h72v48H468v-48zm-20 616H176V616h272v232zm0-296H176v-88h272v88zm392 240H512V432c0-17.7-14.3-32-32-32H304V240h100v104h336V240h100v552z'
      ], [
          primaryColor,
          'M676 565c-50.8 0-92 41.2-92 92s41.2 92 92 92 92-41.2 92-92-41.2-92-92-92zm0 126c-18.8 0-34-15.2-34-34s15.2-34 34-34 34 15.2 34 34-15.2 34-34 34z'
      ]);
  });
  exports.RedEnvelopeTwoTone = getIcon('red-envelope', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M832 64H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-40 824H232V193.1l260.3 204.1c11.6 9.1 27.9 9.1 39.5 0L792 193.1V888zm0-751.3h-31.7L512 331.3 263.7 136.7H232v-.7h560v.7z'
      ], [
          secondaryColor,
          'M492.3 397.2L232 193.1V888h560V193.1L531.8 397.2a31.99 31.99 0 0 1-39.5 0zm99.4 60.9h47.8a8.45 8.45 0 0 1 7.4 12.4l-87.2 161h45.9c4.6 0 8.4 3.8 8.4 8.4V665c0 4.6-3.8 8.4-8.4 8.4h-63.3V702h63.3c4.6 0 8.4 3.8 8.4 8.4v25c.2 4.7-3.5 8.5-8.2 8.5h-63.3v49.9c0 4.6-3.8 8.4-8.4 8.4h-43.7c-4.6 0-8.4-3.8-8.4-8.4v-49.9h-63c-4.6 0-8.4-3.8-8.4-8.4v-25.1c0-4.6 3.8-8.4 8.4-8.4h63v-28.6h-63c-4.6 0-8.4-3.8-8.4-8.4v-25.1c0-4.6 3.8-8.4 8.4-8.4h45.4L377 470.4a8.4 8.4 0 0 1 3.4-11.4c1.3-.6 2.6-1 3.9-1h48.8c3.2 0 6.1 1.8 7.5 4.6l71.7 142 71.9-141.9a8.6 8.6 0 0 1 7.5-4.6z'
      ], [secondaryColor, 'M232 136.7h31.7L512 331.3l248.3-194.6H792v-.7H232z'], [
          primaryColor,
          'M440.6 462.6a8.38 8.38 0 0 0-7.5-4.6h-48.8c-1.3 0-2.6.4-3.9 1a8.4 8.4 0 0 0-3.4 11.4l87.4 161.1H419c-4.6 0-8.4 3.8-8.4 8.4V665c0 4.6 3.8 8.4 8.4 8.4h63V702h-63c-4.6 0-8.4 3.8-8.4 8.4v25.1c0 4.6 3.8 8.4 8.4 8.4h63v49.9c0 4.6 3.8 8.4 8.4 8.4h43.7c4.6 0 8.4-3.8 8.4-8.4v-49.9h63.3c4.7 0 8.4-3.8 8.2-8.5v-25c0-4.6-3.8-8.4-8.4-8.4h-63.3v-28.6h63.3c4.6 0 8.4-3.8 8.4-8.4v-25.1c0-4.6-3.8-8.4-8.4-8.4h-45.9l87.2-161a8.45 8.45 0 0 0-7.4-12.4h-47.8c-3.1 0-6 1.8-7.5 4.6l-71.9 141.9-71.7-142z'
      ]);
  });
  exports.RestTwoTone = getIcon('rest', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M326.4 844h363.2l44.3-520H282l44.4 520zM508 416c79.5 0 144 64.5 144 144s-64.5 144-144 144-144-64.5-144-144 64.5-144 144-144z'
      ], [
          primaryColor,
          'M508 704c79.5 0 144-64.5 144-144s-64.5-144-144-144-144 64.5-144 144 64.5 144 144 144zm0-224c44.2 0 80 35.8 80 80s-35.8 80-80 80-80-35.8-80-80 35.8-80 80-80z'
      ], [
          primaryColor,
          'M832 256h-28.1l-35.7-120.9c-4-13.7-16.5-23.1-30.7-23.1h-451c-14.3 0-26.8 9.4-30.7 23.1L220.1 256H192c-17.7 0-32 14.3-32 32v28c0 4.4 3.6 8 8 8h45.8l47.7 558.7a32 32 0 0 0 31.9 29.3h429.2a32 32 0 0 0 31.9-29.3L802.2 324H856c4.4 0 8-3.6 8-8v-28c0-17.7-14.3-32-32-32zm-518.6-76h397.2l22.4 76H291l22.4-76zm376.2 664H326.4L282 324h451.9l-44.3 520z'
      ]);
  });
  exports.RightCircleTwoTone = getIcon('right-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm154.7 378.4l-246 178c-5.3 3.8-12.7 0-12.7-6.5V643c0-10.2 4.9-19.9 13.2-25.9L566.6 512 421.2 406.8c-8.3-6-13.2-15.6-13.2-25.9V334c0-6.5 7.4-10.3 12.7-6.5l246 178c4.4 3.2 4.4 9.7 0 12.9z'
      ], [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          primaryColor,
          'M666.7 505.5l-246-178c-5.3-3.8-12.7 0-12.7 6.5v46.9c0 10.3 4.9 19.9 13.2 25.9L566.6 512 421.2 617.1c-8.3 6-13.2 15.7-13.2 25.9v46.9c0 6.5 7.4 10.3 12.7 6.5l246-178c4.4-3.2 4.4-9.7 0-12.9z'
      ]);
  });
  exports.RocketTwoTone = getIcon('rocket', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M261.7 621.4c-9.4 14.6-17 30.3-22.5 46.6H324V558.7c-24.8 16.2-46 37.5-62.3 62.7zM700 558.7V668h84.8c-5.5-16.3-13.1-32-22.5-46.6a211.6 211.6 0 0 0-62.3-62.7zm-64-239.9l-124-147-124 147V668h248V318.8zM512 448a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'
      ], [
          primaryColor,
          'M864 736c0-111.6-65.4-208-160-252.9V317.3c0-15.1-5.3-29.7-15.1-41.2L536.5 95.4C530.1 87.8 521 84 512 84s-18.1 3.8-24.5 11.4L335.1 276.1a63.97 63.97 0 0 0-15.1 41.2v165.8C225.4 528 160 624.4 160 736h156.5c-2.3 7.2-3.5 15-3.5 23.8 0 22.1 7.6 43.7 21.4 60.8a97.2 97.2 0 0 0 43.1 30.6c23.1 54 75.6 88.8 134.5 88.8 29.1 0 57.3-8.6 81.4-24.8 23.6-15.8 41.9-37.9 53-64a97 97 0 0 0 43.1-30.5 97.52 97.52 0 0 0 21.4-60.8c0-8.4-1.1-16.4-3.1-23.8L864 736zm-540-68h-84.8c5.5-16.3 13.1-32 22.5-46.6 16.3-25.2 37.5-46.5 62.3-62.7V668zm64-184.9V318.8l124-147 124 147V668H388V483.1zm240.1 301.1c-5.2 3-11.2 4.2-17.1 3.4l-19.5-2.4-2.8 19.4c-5.4 37.9-38.4 66.5-76.7 66.5s-71.3-28.6-76.7-66.5l-2.8-19.5-19.5 2.5a27.7 27.7 0 0 1-17.1-3.5c-8.7-5-14.1-14.3-14.1-24.4 0-10.6 5.9-19.4 14.6-23.8h231.3c8.8 4.5 14.6 13.3 14.6 23.8-.1 10.2-5.5 19.6-14.2 24.5zM700 668V558.7a211.6 211.6 0 0 1 62.3 62.7c9.4 14.6 17 30.3 22.5 46.6H700z'
      ], [primaryColor, 'M464 400a48 48 0 1 0 96 0 48 48 0 1 0-96 0z']);
  });
  exports.RightSquareTwoTone = getIcon('right-square', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm216-196.9c0-10.2 4.9-19.9 13.2-25.9L558.6 512 413.2 406.8c-8.3-6-13.2-15.6-13.2-25.9V334c0-6.5 7.4-10.3 12.7-6.5l246 178c4.4 3.2 4.4 9.7 0 12.9l-246 178c-5.3 3.9-12.7.1-12.7-6.4v-46.9z'
      ], [
          primaryColor,
          'M412.7 696.4l246-178c4.4-3.2 4.4-9.7 0-12.9l-246-178c-5.3-3.8-12.7 0-12.7 6.5v46.9c0 10.3 4.9 19.9 13.2 25.9L558.6 512 413.2 617.2c-8.3 6-13.2 15.7-13.2 25.9V690c0 6.5 7.4 10.3 12.7 6.4z'
      ]);
  });
  exports.SafetyCertificateTwoTone = getIcon('safety-certificate', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M866.9 169.9L527.1 54.1C523 52.7 517.5 52 512 52s-11 .7-15.1 2.1L157.1 169.9c-8.3 2.8-15.1 12.4-15.1 21.2v482.4c0 8.8 5.7 20.4 12.6 25.9L499.3 968c3.5 2.7 8 4.1 12.6 4.1s9.2-1.4 12.6-4.1l344.7-268.6c6.9-5.4 12.6-17 12.6-25.9V191.1c.2-8.8-6.6-18.3-14.9-21.2zM810 654.3L512 886.5 214 654.3V226.7l298-101.6 298 101.6v427.6z'
      ], [
          secondaryColor,
          'M214 226.7v427.6l298 232.2 298-232.2V226.7L512 125.1 214 226.7zM632.8 328H688c6.5 0 10.3 7.4 6.5 12.7L481.9 633.4a16.1 16.1 0 0 1-26 0l-126.4-174c-3.8-5.3 0-12.7 6.5-12.7h55.2c5.2 0 10 2.5 13 6.6l64.7 89.1 150.9-207.8c3-4.1 7.9-6.6 13-6.6z'
      ], [
          primaryColor,
          'M404.2 453.3c-3-4.1-7.8-6.6-13-6.6H336c-6.5 0-10.3 7.4-6.5 12.7l126.4 174a16.1 16.1 0 0 0 26 0l212.6-292.7c3.8-5.3 0-12.7-6.5-12.7h-55.2c-5.1 0-10 2.5-13 6.6L468.9 542.4l-64.7-89.1z'
      ]);
  });
  exports.SaveTwoTone = getIcon('save', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M704 320c0 17.7-14.3 32-32 32H352c-17.7 0-32-14.3-32-32V184H184v656h656V341.8l-136-136V320zM512 730c-79.5 0-144-64.5-144-144s64.5-144 144-144 144 64.5 144 144-64.5 144-144 144z'
      ], [
          primaryColor,
          'M512 442c-79.5 0-144 64.5-144 144s64.5 144 144 144 144-64.5 144-144-64.5-144-144-144zm0 224c-44.2 0-80-35.8-80-80s35.8-80 80-80 80 35.8 80 80-35.8 80-80 80z'
      ], [
          primaryColor,
          'M893.3 293.3L730.7 130.7c-.7-.7-1.4-1.3-2.1-2-.1-.1-.3-.2-.4-.3-.7-.7-1.5-1.3-2.2-1.9a64 64 0 0 0-22-11.7V112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V338.5c0-17-6.7-33.2-18.7-45.2zM384 184h256v104H384V184zm456 656H184V184h136v136c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V205.8l136 136V840z'
      ]);
  });
  exports.ScheduleTwoTone = getIcon('schedule', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M768 352c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-56H548v56c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-56H328v56c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-56H136v496h752V296H768v56zM424 688c0 4.4-3.6 8-8 8H232c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48zm0-136c0 4.4-3.6 8-8 8H232c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48zm374.4-91.2l-165 228.7a15.9 15.9 0 0 1-25.8 0L493.5 531.3c-3.8-5.3 0-12.7 6.5-12.7h54.9c5.1 0 9.9 2.4 12.9 6.6l52.8 73.1 103.6-143.7c3-4.1 7.8-6.6 12.8-6.5h54.9c6.5 0 10.3 7.4 6.5 12.7z'
      ], [
          primaryColor,
          'M724.2 454.6L620.6 598.3l-52.8-73.1c-3-4.2-7.8-6.6-12.9-6.6H500c-6.5 0-10.3 7.4-6.5 12.7l114.1 158.2a15.9 15.9 0 0 0 25.8 0l165-228.7c3.8-5.3 0-12.7-6.5-12.7H737c-5-.1-9.8 2.4-12.8 6.5zM416 496H232c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z'
      ], [
          primaryColor,
          'M928 224H768v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H548v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H328v-56c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v56H96c-17.7 0-32 14.3-32 32v576c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V256c0-17.7-14.3-32-32-32zm-40 568H136V296h120v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56h148v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56h148v56c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-56h120v496z'
      ], [
          primaryColor,
          'M416 632H232c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z'
      ]);
  });
  exports.SecurityScanTwoTone = getIcon('security-scan', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M866.9 169.9L527.1 54.1C523 52.7 517.5 52 512 52s-11 .7-15.1 2.1L157.1 169.9c-8.3 2.8-15.1 12.4-15.1 21.2v482.4c0 8.8 5.7 20.4 12.6 25.9L499.3 968c3.5 2.7 8 4.1 12.6 4.1s9.2-1.4 12.6-4.1l344.7-268.6c6.9-5.4 12.6-17 12.6-25.9V191.1c.2-8.8-6.6-18.3-14.9-21.2zM810 654.3L512 886.5 214 654.3V226.7l298-101.6 298 101.6v427.6z'
      ], [
          secondaryColor,
          'M460.7 451.1a80.1 80.1 0 1 0 160.2 0 80.1 80.1 0 1 0-160.2 0z'
      ], [
          secondaryColor,
          'M214 226.7v427.6l298 232.2 298-232.2V226.7L512 125.1 214 226.7zm428.7 122.5c56.3 56.3 56.3 147.5 0 203.8-48.5 48.5-123 55.2-178.6 20.1l-77.5 77.5a8.03 8.03 0 0 1-11.3 0l-34-34a8.03 8.03 0 0 1 0-11.3l77.5-77.5c-35.1-55.7-28.4-130.1 20.1-178.6 56.3-56.3 147.5-56.3 203.8 0z'
      ], [
          primaryColor,
          'M418.8 527.8l-77.5 77.5a8.03 8.03 0 0 0 0 11.3l34 34c3.1 3.1 8.2 3.1 11.3 0l77.5-77.5c55.6 35.1 130.1 28.4 178.6-20.1 56.3-56.3 56.3-147.5 0-203.8-56.3-56.3-147.5-56.3-203.8 0-48.5 48.5-55.2 122.9-20.1 178.6zm65.4-133.3a80.1 80.1 0 0 1 113.3 0 80.1 80.1 0 0 1 0 113.3c-31.3 31.3-82 31.3-113.3 0s-31.3-82 0-113.3z'
      ]);
  });
  exports.SettingTwoTone = getIcon('setting', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M859.3 569.7l.2.1c3.1-18.9 4.6-38.2 4.6-57.3 0-17.1-1.3-34.3-3.7-51.1 2.4 16.7 3.6 33.6 3.6 50.5 0 19.4-1.6 38.8-4.7 57.8zM99 398.1c-.5-.4-.9-.8-1.4-1.3.7.7 1.4 1.4 2.2 2.1l65.5 55.9v-.1L99 398.1zm536.6-216h.1l-15.5-83.8c-.2-1-.4-1.9-.7-2.8.1.5.3 1.1.4 1.6l15.7 85zm54 546.5l31.4-25.8 92.8 32.9c17-22.9 31.3-47.5 42.6-73.6l-74.7-63.9 6.6-40.1c2.5-15.1 3.8-30.6 3.8-46.1s-1.3-31-3.8-46.1l-6.5-39.9 74.7-63.9c-11.4-26-25.6-50.7-42.6-73.6l-92.8 32.9-31.4-25.8c-23.9-19.6-50.6-35-79.3-45.8l-38.1-14.3-17.9-97a377.5 377.5 0 0 0-85 0l-17.9 97.2-37.9 14.3c-28.5 10.8-55 26.2-78.7 45.7l-31.4 25.9-93.4-33.2c-17 22.9-31.3 47.5-42.6 73.6l75.5 64.5-6.5 40c-2.5 14.9-3.7 30.2-3.7 45.5 0 15.2 1.3 30.6 3.7 45.5l6.5 40-75.5 64.5c11.4 26 25.6 50.7 42.6 73.6l93.4-33.2 31.4 25.9c23.7 19.5 50.2 34.9 78.7 45.7l37.8 14.5 17.9 97.2c28.2 3.2 56.9 3.2 85 0l17.9-97 38.1-14.3c28.8-10.8 55.4-26.2 79.3-45.8zm-177.1-50.3c-30.5 0-59.2-7.8-84.3-21.5C373.3 627 336 568.9 336 502c0-97.2 78.8-176 176-176 66.9 0 125 37.3 154.8 92.2 13.7 25 21.5 53.7 21.5 84.3 0 97.1-78.7 175.8-175.8 175.8zM207.2 812.8c-5.5 1.9-11.2 2.3-16.6 1.2 5.7 1.2 11.7 1 17.5-1l81.4-29c-.1-.1-.3-.2-.4-.3l-81.9 29.1zm717.6-414.7l-65.5 56c0 .2.1.5.1.7l65.4-55.9c7.1-6.1 11.1-14.9 11.2-24-.3 8.8-4.3 17.3-11.2 23.2z'
      ], [
          secondaryColor,
          'M935.8 646.6c.5 4.7 0 9.5-1.7 14.1l-.9 2.6a446.02 446.02 0 0 1-79.7 137.9l-1.8 2.1a32 32 0 0 1-35.1 9.5l-81.3-28.9a350 350 0 0 1-99.7 57.6l-15.7 85a32.05 32.05 0 0 1-25.8 25.7l-2.7.5a445.2 445.2 0 0 1-79.2 7.1h.3c26.7 0 53.4-2.4 79.4-7.1l2.7-.5a32.05 32.05 0 0 0 25.8-25.7l15.7-84.9c36.2-13.6 69.6-32.9 99.6-57.5l81.2 28.9a32 32 0 0 0 35.1-9.5l1.8-2.1c34.8-41.1 61.5-87.4 79.6-137.7l.9-2.6c1.6-4.7 2.1-9.7 1.5-14.5z'
      ], [
          primaryColor,
          'M688 502c0-30.3-7.7-58.9-21.2-83.8C637 363.3 578.9 326 512 326c-97.2 0-176 78.8-176 176 0 66.9 37.3 125 92.2 154.8 24.9 13.5 53.4 21.2 83.8 21.2 97.2 0 176-78.8 176-176zm-288 0c0-29.9 11.7-58 32.8-79.2C454 401.6 482.1 390 512 390c29.9 0 58 11.6 79.2 32.8A111.6 111.6 0 0 1 624 502c0 29.9-11.7 58-32.8 79.2A111.6 111.6 0 0 1 512 614c-29.9 0-58-11.7-79.2-32.8A111.6 111.6 0 0 1 400 502z'
      ], [
          primaryColor,
          'M594.1 952.2a32.05 32.05 0 0 0 25.8-25.7l15.7-85a350 350 0 0 0 99.7-57.6l81.3 28.9a32 32 0 0 0 35.1-9.5l1.8-2.1c34.8-41.1 61.6-87.5 79.7-137.9l.9-2.6c1.7-4.6 2.2-9.4 1.7-14.1-.9-7.9-4.7-15.4-11-20.9l-65.3-55.9-.2-.1c3.1-19 4.7-38.4 4.7-57.8 0-16.9-1.2-33.9-3.6-50.5-.3-2.2-.7-4.4-1-6.6 0-.2-.1-.5-.1-.7l65.5-56c6.9-5.9 10.9-14.4 11.2-23.2.1-4-.5-8.1-1.9-12l-.9-2.6a443.74 443.74 0 0 0-79.7-137.9l-1.8-2.1a32.12 32.12 0 0 0-35.1-9.5l-81.3 28.9c-30-24.6-63.4-44-99.6-57.6h-.1l-15.7-85c-.1-.5-.2-1.1-.4-1.6a32.08 32.08 0 0 0-25.4-24.1l-2.7-.5c-52.1-9.4-106.9-9.4-159 0l-2.7.5a32.05 32.05 0 0 0-25.8 25.7l-15.8 85.4a351.86 351.86 0 0 0-99 57.4l-81.9-29.1a32 32 0 0 0-35.1 9.5l-1.8 2.1a446.02 446.02 0 0 0-79.7 137.9l-.9 2.6a32.09 32.09 0 0 0 7.9 33.9c.5.4.9.9 1.4 1.3l66.3 56.6v.1c-3.1 18.8-4.6 37.9-4.6 57 0 19.2 1.5 38.4 4.6 57.1L99 625.5a32.03 32.03 0 0 0-9.3 35.2l.9 2.6c18.1 50.4 44.9 96.9 79.7 137.9l1.8 2.1c4.9 5.7 11.4 9.4 18.5 10.7 5.4 1 11.1.7 16.6-1.2l81.9-29.1c.1.1.3.2.4.3 29.7 24.3 62.8 43.6 98.6 57.1l15.8 85.4a32.05 32.05 0 0 0 25.8 25.7l2.7.5c26.1 4.7 52.8 7.1 79.5 7.1h.3c26.6 0 53.3-2.4 79.2-7.1l2.7-.5zm-39.8-66.5a377.5 377.5 0 0 1-85 0l-17.9-97.2-37.8-14.5c-28.5-10.8-55-26.2-78.7-45.7l-31.4-25.9-93.4 33.2c-17-22.9-31.2-47.6-42.6-73.6l75.5-64.5-6.5-40c-2.4-14.9-3.7-30.3-3.7-45.5 0-15.3 1.2-30.6 3.7-45.5l6.5-40-75.5-64.5c11.3-26.1 25.6-50.7 42.6-73.6l93.4 33.2 31.4-25.9c23.7-19.5 50.2-34.9 78.7-45.7l37.9-14.3 17.9-97.2c28.1-3.2 56.8-3.2 85 0l17.9 97 38.1 14.3c28.7 10.8 55.4 26.2 79.3 45.8l31.4 25.8 92.8-32.9c17 22.9 31.2 47.6 42.6 73.6L781.8 426l6.5 39.9c2.5 15.1 3.8 30.6 3.8 46.1s-1.3 31-3.8 46.1l-6.6 40.1 74.7 63.9a370.03 370.03 0 0 1-42.6 73.6L721 702.8l-31.4 25.8c-23.9 19.6-50.5 35-79.3 45.8l-38.1 14.3-17.9 97z'
      ]);
  });
  exports.ShopTwoTone = getIcon('shop', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M839.5 344h-655c-.3 0-.5.2-.5.5v91.2c0 59.8 49 108.3 109.3 108.3 40.7 0 76.2-22 95.1-54.7 2.9-5.1 8.4-8.3 14.3-8.3s11.3 3.2 14.3 8.3c18.8 32.7 54.3 54.7 95 54.7 40.8 0 76.4-22.1 95.1-54.9 2.9-5 8.2-8.1 13.9-8.1h.6c5.8 0 11 3.1 13.9 8.1 18.8 32.8 54.4 54.9 95.2 54.9C791 544 840 495.5 840 435.7v-91.2c0-.3-.2-.5-.5-.5z'
      ], [
          primaryColor,
          'M882 272.1V144c0-17.7-14.3-32-32-32H174c-17.7 0-32 14.3-32 32v128.1c-16.7 1-30 14.9-30 31.9v131.7a177 177 0 0 0 14.4 70.4c4.3 10.2 9.6 19.8 15.6 28.9v345c0 17.6 14.3 32 32 32h676c17.7 0 32-14.3 32-32V535a175 175 0 0 0 15.6-28.9c9.5-22.3 14.4-46 14.4-70.4V304c0-17-13.3-30.9-30-31.9zM214 184h596v88H214v-88zm362 656.1H448V736h128v104.1zm234.4 0H640V704c0-17.7-14.3-32-32-32H416c-17.7 0-32 14.3-32 32v136.1H214V597.9c2.9 1.4 5.9 2.8 9 4 22.3 9.4 46 14.1 70.4 14.1 24.4 0 48-4.7 70.4-14.1 13.8-5.8 26.8-13.2 38.7-22.1.2-.1.4-.1.6 0a180.4 180.4 0 0 0 38.7 22.1c22.3 9.4 46 14.1 70.4 14.1s48-4.7 70.4-14.1c13.8-5.8 26.8-13.2 38.7-22.1.2-.1.4-.1.6 0a180.4 180.4 0 0 0 38.7 22.1c22.3 9.4 46 14.1 70.4 14.1s48-4.7 70.4-14.1c3-1.3 6-2.6 9-4v242.2zM840 435.7c0 59.8-49 108.3-109.3 108.3-40.8 0-76.4-22.1-95.2-54.9-2.9-5-8.1-8.1-13.9-8.1h-.6c-5.7 0-11 3.1-13.9 8.1A109.24 109.24 0 0 1 512 544c-40.7 0-76.2-22-95-54.7-3-5.1-8.4-8.3-14.3-8.3s-11.4 3.2-14.3 8.3a109.63 109.63 0 0 1-95.1 54.7C233 544 184 495.5 184 435.7v-91.2c0-.3.2-.5.5-.5h655c.3 0 .5.2.5.5v91.2z'
      ]);
  });
  exports.ShoppingTwoTone = getIcon('shopping', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M696 472c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-88H400v88c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-88h-96v456h560V384h-96v88z'
      ], [
          primaryColor,
          'M832 312H696v-16c0-101.6-82.4-184-184-184s-184 82.4-184 184v16H192c-17.7 0-32 14.3-32 32v536c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V344c0-17.7-14.3-32-32-32zm-432-16c0-61.9 50.1-112 112-112s112 50.1 112 112v16H400v-16zm392 544H232V384h96v88c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-88h224v88c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-88h96v456z'
      ]);
  });
  exports.SkinTwoTone = getIcon('skin', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M512 318c-79.2 0-148.5-48.8-176.7-120H182v196h119v432h422V394h119V198H688.7c-28.2 71.2-97.5 120-176.7 120z'
      ], [
          primaryColor,
          'M870 126H663.8c-17.4 0-32.9 11.9-37 29.3C614.3 208.1 567 246 512 246s-102.3-37.9-114.8-90.7a37.93 37.93 0 0 0-37-29.3H154a44 44 0 0 0-44 44v252a44 44 0 0 0 44 44h75v388a44 44 0 0 0 44 44h478a44 44 0 0 0 44-44V466h75a44 44 0 0 0 44-44V170a44 44 0 0 0-44-44zm-28 268H723v432H301V394H182V198h153.3c28.2 71.2 97.5 120 176.7 120s148.5-48.8 176.7-120H842v196z'
      ]);
  });
  exports.SlidersTwoTone = getIcon('sliders', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M180 292h80v440h-80zm369 180h-74a3 3 0 0 0-3 3v74a3 3 0 0 0 3 3h74a3 3 0 0 0 3-3v-74a3 3 0 0 0-3-3zm215-108h80v296h-80z'
      ], [
          primaryColor,
          'M904 296h-66v-96c0-4.4-3.6-8-8-8h-52c-4.4 0-8 3.6-8 8v96h-66c-4.4 0-8 3.6-8 8v416c0 4.4 3.6 8 8 8h66v96c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8v-96h66c4.4 0 8-3.6 8-8V304c0-4.4-3.6-8-8-8zm-60 364h-80V364h80v296zM612 404h-66V232c0-4.4-3.6-8-8-8h-52c-4.4 0-8 3.6-8 8v172h-66c-4.4 0-8 3.6-8 8v200c0 4.4 3.6 8 8 8h66v172c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8V620h66c4.4 0 8-3.6 8-8V412c0-4.4-3.6-8-8-8zm-60 145a3 3 0 0 1-3 3h-74a3 3 0 0 1-3-3v-74a3 3 0 0 1 3-3h74a3 3 0 0 1 3 3v74zM320 224h-66v-56c0-4.4-3.6-8-8-8h-52c-4.4 0-8 3.6-8 8v56h-66c-4.4 0-8 3.6-8 8v560c0 4.4 3.6 8 8 8h66v56c0 4.4 3.6 8 8 8h52c4.4 0 8-3.6 8-8v-56h66c4.4 0 8-3.6 8-8V232c0-4.4-3.6-8-8-8zm-60 508h-80V292h80v440z'
      ]);
  });
  exports.SmileTwoTone = getIcon('smile', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zM288 421a48.01 48.01 0 0 1 96 0 48.01 48.01 0 0 1-96 0zm224 272c-85.5 0-155.6-67.3-160-151.6a8 8 0 0 1 8-8.4h48.1c4.2 0 7.8 3.2 8.1 7.4C420 589.9 461.5 629 512 629s92.1-39.1 95.8-88.6c.3-4.2 3.9-7.4 8.1-7.4H664a8 8 0 0 1 8 8.4C667.6 625.7 597.5 693 512 693zm176-224a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z'
      ], [
          primaryColor,
          'M288 421a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm376 112h-48.1c-4.2 0-7.8 3.2-8.1 7.4-3.7 49.5-45.3 88.6-95.8 88.6s-92-39.1-95.8-88.6c-.3-4.2-3.9-7.4-8.1-7.4H360a8 8 0 0 0-8 8.4c4.4 84.3 74.5 151.6 160 151.6s155.6-67.3 160-151.6a8 8 0 0 0-8-8.4zm-24-112a48 48 0 1 0 96 0 48 48 0 1 0-96 0z'
      ]);
  });
  exports.SnippetsTwoTone = getIcon('snippets', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M450 510V336H232v552h432V550H490c-22.1 0-40-17.9-40-40z'
      ], [
          primaryColor,
          'M832 112H724V72c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v40H500V72c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v40H320c-17.7 0-32 14.3-32 32v120h-96c-17.7 0-32 14.3-32 32v632c0 17.7 14.3 32 32 32h512c17.7 0 32-14.3 32-32v-96h96c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM664 888H232V336h218v174c0 22.1 17.9 40 40 40h174v338zm0-402H514V336h.2L664 485.8v.2zm128 274h-56V456L544 264H360v-80h68v32c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-32h152v32c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-32h68v576z'
      ]);
  });
  exports.SoundTwoTone = getIcon('sound', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M275.4 424H146v176h129.4l18 11.7L586 803V221L293.3 412.3z'
      ], [
          primaryColor,
          'M892.1 737.8l-110.3-63.7a15.9 15.9 0 0 0-21.7 5.9l-19.9 34.5c-4.4 7.6-1.8 17.4 5.8 21.8L856.3 800a15.9 15.9 0 0 0 21.7-5.9l19.9-34.5c4.4-7.6 1.7-17.4-5.8-21.8zM934 476H806c-8.8 0-16 7.2-16 16v40c0 8.8 7.2 16 16 16h128c8.8 0 16-7.2 16-16v-40c0-8.8-7.2-16-16-16zM760 344a15.9 15.9 0 0 0 21.7 5.9L892 286.2c7.6-4.4 10.2-14.2 5.8-21.8L878 230a15.9 15.9 0 0 0-21.7-5.9L746 287.8a15.99 15.99 0 0 0-5.8 21.8L760 344zM625.9 115c-5.9 0-11.9 1.6-17.4 5.3L254 352H90c-8.8 0-16 7.2-16 16v288c0 8.8 7.2 16 16 16h164l354.5 231.7c5.5 3.6 11.6 5.3 17.4 5.3 16.7 0 32.1-13.3 32.1-32.1V147.1c0-18.8-15.4-32.1-32.1-32.1zM586 803L293.4 611.7l-18-11.7H146V424h129.4l17.9-11.7L586 221v582z'
      ]);
  });
  exports.StarTwoTone = getIcon('star', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M512.5 190.4l-94.4 191.3-211.2 30.7 152.8 149-36.1 210.3 188.9-99.3 188.9 99.2-36.1-210.3 152.8-148.9-211.2-30.7z'
      ], [
          primaryColor,
          'M908.6 352.8l-253.9-36.9L541.2 85.8c-3.1-6.3-8.2-11.4-14.5-14.5-15.8-7.8-35-1.3-42.9 14.5L370.3 315.9l-253.9 36.9c-7 1-13.4 4.3-18.3 9.3a32.05 32.05 0 0 0 .6 45.3l183.7 179.1L239 839.4a31.95 31.95 0 0 0 46.4 33.7l227.1-119.4 227.1 119.4c6.2 3.3 13.4 4.4 20.3 3.2 17.4-3 29.1-19.5 26.1-36.9l-43.4-252.9 183.7-179.1c5-4.9 8.3-11.3 9.3-18.3 2.7-17.5-9.5-33.7-27-36.3zM665.3 561.3l36.1 210.3-188.9-99.2-188.9 99.3 36.1-210.3-152.8-149 211.2-30.7 94.4-191.3 94.4 191.3 211.2 30.7-152.8 148.9z'
      ]);
  });
  exports.StopTwoTone = getIcon('stop', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm288.5 682.8L277.7 224C258 240 240 258 224 277.7l522.8 522.8C682.8 852.7 601 884 512 884c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372c0 89-31.3 170.8-83.5 234.8z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372c89 0 170.8-31.3 234.8-83.5L224 277.7c16-19.7 34-37.7 53.7-53.7l522.8 522.8C852.7 682.8 884 601 884 512c0-205.4-166.6-372-372-372z'
      ]);
  });
  exports.SwitcherTwoTone = getIcon('switcher', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [secondaryColor, 'M184 840h528V312H184v528zm116-290h296v64H300v-64z'], [
          primaryColor,
          'M880 112H264c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h576v576c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V144c0-17.7-14.3-32-32-32z'
      ], [
          primaryColor,
          'M752 240H144c-17.7 0-32 14.3-32 32v608c0 17.7 14.3 32 32 32h608c17.7 0 32-14.3 32-32V272c0-17.7-14.3-32-32-32zm-40 600H184V312h528v528z'
      ], [primaryColor, 'M300 550h296v64H300z']);
  });
  exports.TabletTwoTone = getIcon('tablet', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M800 64H224c-35.3 0-64 28.7-64 64v768c0 35.3 28.7 64 64 64h576c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64zm-8 824H232V136h560v752z'
      ], [
          secondaryColor,
          'M232 888h560V136H232v752zm280-144c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40z'
      ], [primaryColor, 'M472 784a40 40 0 1 0 80 0 40 40 0 1 0-80 0z']);
  });
  exports.TagTwoTone = getIcon('tag', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M589 164.6L189.3 564.3l270.4 270.4L859.4 435 836 188l-247-23.4zM680 432c-48.5 0-88-39.5-88-88s39.5-88 88-88 88 39.5 88 88-39.5 88-88 88z'
      ], [
          primaryColor,
          'M680 256c-48.5 0-88 39.5-88 88s39.5 88 88 88 88-39.5 88-88-39.5-88-88-88zm0 120c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z'
      ], [
          primaryColor,
          'M938 458.8l-29.6-312.6c-1.5-16.2-14.4-29-30.6-30.6L565.2 86h-.4c-3.2 0-5.7 1-7.6 2.9L88.9 557.2a9.96 9.96 0 0 0 0 14.1l363.8 363.8a9.9 9.9 0 0 0 7.1 2.9c2.7 0 5.2-1 7.1-2.9l468.3-468.3c2-2.1 3-5 2.8-8zM459.7 834.7L189.3 564.3 589 164.6 836 188l23.4 247-399.7 399.7z'
      ]);
  });
  exports.TagsTwoTone = getIcon('tags', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M477.5 694l311.9-311.8-19-224.6-224.6-19-311.9 311.9L477.5 694zm116-415.5a47.81 47.81 0 0 1 33.9-33.9c16.6-4.4 34.2.3 46.4 12.4a47.93 47.93 0 0 1 12.4 46.4 47.81 47.81 0 0 1-33.9 33.9c-16.6 4.4-34.2-.3-46.4-12.4a48.3 48.3 0 0 1-12.4-46.4z'
      ], [
          secondaryColor,
          'M476.6 792.6c-1.7-.2-3.4-1-4.7-2.3L137.7 456.1a8.03 8.03 0 0 1 0-11.3L515.9 66.6c1.2-1.3 2.9-2.1 4.7-2.3h-.4c-2.3-.2-4.7.6-6.3 2.3L135.7 444.8a8.03 8.03 0 0 0 0 11.3l334.2 334.2c1.8 1.9 4.3 2.6 6.7 2.3z'
      ], [
          primaryColor,
          'M889.7 539.8l-39.6-39.5a8.03 8.03 0 0 0-11.3 0l-362 361.3-237.6-237a8.03 8.03 0 0 0-11.3 0l-39.6 39.5a8.03 8.03 0 0 0 0 11.3l243.2 242.8 39.6 39.5c3.1 3.1 8.2 3.1 11.3 0l407.3-406.6c3.1-3.1 3.1-8.2 0-11.3zM652.3 337.3a47.81 47.81 0 0 0 33.9-33.9c4.4-16.6-.3-34.2-12.4-46.4a47.93 47.93 0 0 0-46.4-12.4 47.81 47.81 0 0 0-33.9 33.9c-4.4 16.6.3 34.2 12.4 46.4a48.3 48.3 0 0 0 46.4 12.4z'
      ], [
          primaryColor,
          'M137.7 444.8a8.03 8.03 0 0 0 0 11.3l334.2 334.2c1.3 1.3 2.9 2.1 4.7 2.3 2.4.3 4.8-.5 6.6-2.3L861.4 412c1.7-1.7 2.5-4 2.3-6.3l-25.5-301.4c-.7-7.8-6.8-13.9-14.6-14.6L522.2 64.3h-1.6c-1.8.2-3.4 1-4.7 2.3L137.7 444.8zm408.1-306.2l224.6 19 19 224.6L477.5 694 233.9 450.5l311.9-311.9z'
      ]);
  });
  exports.ToolTwoTone = getIcon('tool', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M706.8 488.7a32.05 32.05 0 0 1-45.3 0L537 364.2a32.05 32.05 0 0 1 0-45.3l132.9-132.8a184.2 184.2 0 0 0-144 53.5c-58.1 58.1-69.3 145.3-33.6 214.6L439.5 507c-.1 0-.1-.1-.1-.1L209.3 737l79.2 79.2 274-274.1.1.1 8.8-8.8c69.3 35.7 156.5 24.5 214.6-33.6 39.2-39.1 57.3-92.1 53.6-143.9L706.8 488.7z'
      ], [
          primaryColor,
          'M876.6 239.5c-.5-.9-1.2-1.8-2-2.5-5-5-13.1-5-18.1 0L684.2 409.3l-67.9-67.9L788.7 169c.8-.8 1.4-1.6 2-2.5 3.6-6.1 1.6-13.9-4.5-17.5-98.2-58-226.8-44.7-311.3 39.7-67 67-89.2 162-66.5 247.4l-293 293c-3 3-2.8 7.9.3 11l169.7 169.7c3.1 3.1 8.1 3.3 11 .3l292.9-292.9c85.5 22.8 180.5.7 247.6-66.4 84.4-84.5 97.7-213.1 39.7-311.3zM786 499.8c-58.1 58.1-145.3 69.3-214.6 33.6l-8.8 8.8-.1-.1-274 274.1-79.2-79.2 230.1-230.1s0 .1.1.1l52.8-52.8c-35.7-69.3-24.5-156.5 33.6-214.6a184.2 184.2 0 0 1 144-53.5L537 318.9a32.05 32.05 0 0 0 0 45.3l124.5 124.5a32.05 32.05 0 0 0 45.3 0l132.8-132.8c3.7 51.8-14.4 104.8-53.6 143.9z'
      ]);
  });
  exports.TrademarkCircleTwoTone = getIcon('trademark-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm170.7 584.2c-1.1.5-2.3.8-3.5.8h-62c-3.1 0-5.9-1.8-7.2-4.6l-74.6-159.2h-88.7V717c0 4.4-3.6 8-8 8H384c-4.4 0-8-3.6-8-8V307c0-4.4 3.6-8 8-8h155.6c98.8 0 144.2 59.9 144.2 131.1 0 70.2-43.6 106.4-78.4 119.2l80.8 164.2c2.1 3.9.4 8.7-3.5 10.7z'
      ], [
          secondaryColor,
          'M529.9 357h-83.4v148H528c53 0 82.8-25.6 82.8-72.4 0-50.3-32.9-75.6-80.9-75.6z'
      ], [
          primaryColor,
          'M605.4 549.3c34.8-12.8 78.4-49 78.4-119.2 0-71.2-45.4-131.1-144.2-131.1H384c-4.4 0-8 3.6-8 8v410c0 4.4 3.6 8 8 8h54.7c4.4 0 8-3.6 8-8V561.2h88.7L610 720.4c1.3 2.8 4.1 4.6 7.2 4.6h62c1.2 0 2.4-.3 3.5-.8 3.9-2 5.6-6.8 3.5-10.7l-80.8-164.2zM528 505h-81.5V357h83.4c48 0 80.9 25.3 80.9 75.6 0 46.8-29.8 72.4-82.8 72.4z'
      ]);
  });
  exports.UnlockTwoTone = getIcon('unlock', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M232 840h560V536H232v304zm280-226a48.01 48.01 0 0 1 28 87v53c0 4.4-3.6 8-8 8h-40c-4.4 0-8-3.6-8-8v-53a48.01 48.01 0 0 1 28-87z'
      ], [
          primaryColor,
          'M484 701v53c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-53a48.01 48.01 0 1 0-56 0z'
      ], [
          primaryColor,
          'M832 464H332V240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v68c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-68c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zm-40 376H232V536h560v304z'
      ]);
  });
  exports.TrophyTwoTone = getIcon('trophy', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M320 480c0 49.1 19.1 95.3 53.9 130.1 34.7 34.8 81 53.9 130.1 53.9h16c49.1 0 95.3-19.1 130.1-53.9 34.8-34.7 53.9-81 53.9-130.1V184H320v296zM184 352c0 41 26.9 75.8 64 87.6-37.1-11.9-64-46.7-64-87.6zm364 382.5C665 721.8 758.4 630.2 773.8 514 758.3 630.2 665 721.7 548 734.5zM250.2 514C265.6 630.2 359 721.8 476 734.5 359 721.7 265.7 630.2 250.2 514z'
      ], [
          primaryColor,
          'M868 160h-92v-40c0-4.4-3.6-8-8-8H256c-4.4 0-8 3.6-8 8v40h-92a44 44 0 0 0-44 44v148c0 81.7 60 149.6 138.2 162C265.7 630.2 359 721.7 476 734.5v105.2H280c-17.7 0-32 14.3-32 32V904c0 4.4 3.6 8 8 8h512c4.4 0 8-3.6 8-8v-32.3c0-17.7-14.3-32-32-32H548V734.5C665 721.7 758.3 630.2 773.8 514 852 501.6 912 433.7 912 352V204a44 44 0 0 0-44-44zM248 439.6a91.99 91.99 0 0 1-64-87.6V232h64v207.6zM704 480c0 49.1-19.1 95.4-53.9 130.1-34.8 34.8-81 53.9-130.1 53.9h-16c-49.1 0-95.4-19.1-130.1-53.9-34.8-34.8-53.9-81-53.9-130.1V184h384v296zm136-128c0 41-26.9 75.8-64 87.6V232h64v120z'
      ]);
  });
  exports.UpCircleTwoTone = getIcon('up-circle', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm178 479h-46.9c-10.2 0-19.9-4.9-25.9-13.2L512 460.4 406.8 605.8c-6 8.3-15.6 13.2-25.9 13.2H334c-6.5 0-10.3-7.4-6.5-12.7l178-246c3.2-4.4 9.7-4.4 12.9 0l178 246c3.9 5.3.1 12.7-6.4 12.7z'
      ], [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          primaryColor,
          'M518.4 360.3a7.95 7.95 0 0 0-12.9 0l-178 246c-3.8 5.3 0 12.7 6.5 12.7h46.9c10.3 0 19.9-4.9 25.9-13.2L512 460.4l105.2 145.4c6 8.3 15.7 13.2 25.9 13.2H690c6.5 0 10.3-7.4 6.4-12.7l-178-246z'
      ]);
  });
  exports.ThunderboltTwoTone = getIcon('thunderbolt', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M695.4 164.1H470.8L281.2 491.5h157.4l-60.3 241 319.8-305.1h-211z'
      ], [
          primaryColor,
          'M848.1 359.3H627.8L825.9 109c4.1-5.3.4-13-6.3-13H436.1c-2.8 0-5.5 1.5-6.9 4L170.1 547.5c-3.1 5.3.7 12 6.9 12h174.4L262 917.1c-1.9 7.8 7.5 13.3 13.3 7.7L853.6 373c5.2-4.9 1.7-13.7-5.5-13.7zM378.3 732.5l60.3-241H281.2l189.6-327.4h224.6L487.1 427.4h211L378.3 732.5z'
      ]);
  });
  exports.UpSquareTwoTone = getIcon('up-square', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z'
      ], [
          secondaryColor,
          'M184 840h656V184H184v656zm143.5-228.7l178-246c3.2-4.4 9.7-4.4 12.9 0l178 246c3.9 5.3.1 12.7-6.4 12.7h-46.9c-10.2 0-19.9-4.9-25.9-13.2L512 465.4 406.8 610.8c-6 8.3-15.6 13.2-25.9 13.2H334c-6.5 0-10.3-7.4-6.5-12.7z'
      ], [
          primaryColor,
          'M334 624h46.9c10.3 0 19.9-4.9 25.9-13.2L512 465.4l105.2 145.4c6 8.3 15.7 13.2 25.9 13.2H690c6.5 0 10.3-7.4 6.4-12.7l-178-246a7.95 7.95 0 0 0-12.9 0l-178 246c-3.8 5.3 0 12.7 6.5 12.7z'
      ]);
  });
  exports.UsbTwoTone = getIcon('usb', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M759.9 504H264.1c-26.5 0-48.1 19.7-48.1 44v292h592V548c0-24.3-21.6-44-48.1-44z'
      ], [
          primaryColor,
          'M456 248h-48c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm160 0h-48c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z'
      ], [
          primaryColor,
          'M760 432V144c0-17.7-14.3-32-32-32H296c-17.7 0-32 14.3-32 32v288c-66.2 0-120 52.1-120 116v356c0 4.4 3.6 8 8 8h720c4.4 0 8-3.6 8-8V548c0-63.9-53.8-116-120-116zM336 184h352v248H336V184zm472 656H216V548c0-24.3 21.6-44 48.1-44h495.8c26.5 0 48.1 19.7 48.1 44v292z'
      ]);
  });
  exports.VideoCameraTwoTone = getIcon('video-camera', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M136 792h576V232H136v560zm64-488c0-4.4 3.6-8 8-8h112c4.4 0 8 3.6 8 8v48c0 4.4-3.6 8-8 8H208c-4.4 0-8-3.6-8-8v-48z'
      ], [
          primaryColor,
          'M912 302.3L784 376V224c0-35.3-28.7-64-64-64H128c-35.3 0-64 28.7-64 64v576c0 35.3 28.7 64 64 64h592c35.3 0 64-28.7 64-64V648l128 73.7c21.3 12.3 48-3.1 48-27.6V330c0-24.6-26.7-40-48-27.7zM712 792H136V232h576v560zm176-167l-104-59.8V458.9L888 399v226z'
      ], [
          primaryColor,
          'M208 360h112c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H208c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z'
      ]);
  });
  exports.WalletTwoTone = getIcon('wallet', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 464H528V448h312v128zm0-192H496c-17.7 0-32 14.3-32 32v192c0 17.7 14.3 32 32 32h344v200H184V184h656v200z'
      ], [
          secondaryColor,
          'M528 576h312V448H528v128zm92-104c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40z'
      ], [primaryColor, 'M580 512a40 40 0 1 0 80 0 40 40 0 1 0-80 0z'], [
          secondaryColor,
          'M184 840h656V640H496c-17.7 0-32-14.3-32-32V416c0-17.7 14.3-32 32-32h344V184H184v656z'
      ]);
  });
  exports.WarningTwoTone = getIcon('warning', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M955.7 856l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zm-783.5-27.9L512 239.9l339.8 588.2H172.2z'
      ], [
          secondaryColor,
          'M172.2 828.1h679.6L512 239.9 172.2 828.1zM560 720a48.01 48.01 0 0 1-96 0 48.01 48.01 0 0 1 96 0zm-16-304v184c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V416c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8z'
      ], [
          primaryColor,
          'M464 720a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm16-304v184c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V416c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8z'
      ]);
  });
  exports.CiTwoTone = getIcon('ci', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm-63.5 522.8c49.3 0 82.8-29.4 87-72.4.4-4.1 3.8-7.3 8-7.3h52.7c2.4 0 4.4 2 4.4 4.4 0 77.4-64.3 132.5-152.3 132.5C345.4 720 286 651.4 286 537.4v-49C286 373.5 345.4 304 448.3 304c88.3 0 152.3 56.9 152.3 138.1 0 2.4-2 4.4-4.4 4.4h-52.6c-4.2 0-7.6-3.2-8-7.4-3.9-46.1-37.5-77.6-87-77.6-61.1 0-95.6 45.4-95.7 126.8v49.3c0 80.3 34.5 125.2 95.6 125.2zM738 704.1c0 4.4-3.6 8-8 8h-50.4c-4.4 0-8-3.6-8-8V319.9c0-4.4 3.6-8 8-8H730c4.4 0 8 3.6 8 8v384.2z'
      ], [
          primaryColor,
          'M730 311.9h-50.4c-4.4 0-8 3.6-8 8v384.2c0 4.4 3.6 8 8 8H730c4.4 0 8-3.6 8-8V319.9c0-4.4-3.6-8-8-8zm-281.4 49.6c49.5 0 83.1 31.5 87 77.6.4 4.2 3.8 7.4 8 7.4h52.6c2.4 0 4.4-2 4.4-4.4 0-81.2-64-138.1-152.3-138.1C345.4 304 286 373.5 286 488.4v49c0 114 59.4 182.6 162.3 182.6 88 0 152.3-55.1 152.3-132.5 0-2.4-2-4.4-4.4-4.4h-52.7c-4.2 0-7.6 3.2-8 7.3-4.2 43-37.7 72.4-87 72.4-61.1 0-95.6-44.9-95.6-125.2v-49.3c.1-81.4 34.6-126.8 95.7-126.8z'
      ]);
  });
  exports.CopyrightTwoTone = getIcon('copyright', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm5.5 533c52.9 0 88.8-31.7 93-77.8.4-4.1 3.8-7.3 8-7.3h56.8c2.6 0 4.7 2.1 4.7 4.7 0 82.6-68.7 141.4-162.7 141.4C407.4 734 344 660.8 344 539.1v-52.3C344 364.2 407.4 290 517.3 290c94.3 0 162.7 60.7 162.7 147.4 0 2.6-2.1 4.7-4.7 4.7h-56.7c-4.2 0-7.7-3.2-8-7.4-4-49.6-40-83.4-93-83.4-65.2 0-102.1 48.5-102.2 135.5v52.6c0 85.7 36.8 133.6 102.1 133.6z'
      ], [
          primaryColor,
          'M517.6 351.3c53 0 89 33.8 93 83.4.3 4.2 3.8 7.4 8 7.4h56.7c2.6 0 4.7-2.1 4.7-4.7 0-86.7-68.4-147.4-162.7-147.4C407.4 290 344 364.2 344 486.8v52.3C344 660.8 407.4 734 517.3 734c94 0 162.7-58.8 162.7-141.4 0-2.6-2.1-4.7-4.7-4.7h-56.8c-4.2 0-7.6 3.2-8 7.3-4.2 46.1-40.1 77.8-93 77.8-65.3 0-102.1-47.9-102.1-133.6v-52.6c.1-87 37-135.5 102.2-135.5z'
      ]);
  });
  exports.DollarTwoTone = getIcon('dollar', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M426.6 410.3c0 25.4 15.7 45.1 49.5 57.3 4.7 1.9 9.4 3.4 15 5v-124c-37 4.7-64.5 25.4-64.5 61.7zm116.5 135.2c-2.9-.6-5.7-1.3-8.8-2.2V677c42.6-3.8 72-27.3 72-66.4 0-30.7-15.9-50.7-63.2-65.1z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm22.4 589.2l.2 31.7c0 4.5-3.6 8.1-8 8.1h-28.4c-4.4 0-8-3.6-8-8v-31.4c-89-6.5-130.7-57.1-135.2-112.1-.4-4.7 3.3-8.7 8-8.7h46.2c3.9 0 7.3 2.8 7.9 6.6 5.1 31.8 29.9 55.4 74.1 61.3V534l-24.7-6.3c-52.3-12.5-102.1-45.1-102.1-112.7 0-73 55.4-112.1 126.2-119v-33c0-4.4 3.6-8 8-8h28.1c4.4 0 8 3.6 8 8v32.7c68.5 6.9 119.8 46.9 125.9 109.2a8.1 8.1 0 0 1-8 8.8h-44.9c-4 0-7.4-2.9-7.9-6.9-4-29.2-27.5-53-65.5-58.2v134.3l25.4 5.9c64.8 16 108.9 47 109 116.4 0 75.2-56 117.1-134.3 124z'
      ], [
          primaryColor,
          'M559.7 488.8l-25.4-5.9V348.6c38 5.2 61.5 29 65.5 58.2.5 4 3.9 6.9 7.9 6.9h44.9c4.7 0 8.4-4.1 8-8.8-6.1-62.3-57.4-102.3-125.9-109.2V263c0-4.4-3.6-8-8-8h-28.1c-4.4 0-8 3.6-8 8v33c-70.8 6.9-126.2 46-126.2 119 0 67.6 49.8 100.2 102.1 112.7l24.7 6.3v142.7c-44.2-5.9-69-29.5-74.1-61.3-.6-3.8-4-6.6-7.9-6.6H363c-4.7 0-8.4 4-8 8.7 4.5 55 46.2 105.6 135.2 112.1V761c0 4.4 3.6 8 8 8h28.4c4.4 0 8-3.6 8-8.1l-.2-31.7c78.3-6.9 134.3-48.8 134.3-124-.1-69.4-44.2-100.4-109-116.4zm-68.6-16.2c-5.6-1.6-10.3-3.1-15-5-33.8-12.2-49.5-31.9-49.5-57.3 0-36.3 27.5-57 64.5-61.7v124zM534.3 677V543.3c3.1.9 5.9 1.6 8.8 2.2 47.3 14.4 63.2 34.4 63.2 65.1 0 39.1-29.4 62.6-72 66.4z'
      ]);
  });
  exports.EuroTwoTone = getIcon('euro', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z'
      ], [
          secondaryColor,
          'M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm117.1 581.1c0 3.8-2.7 7-6.4 7.8-15.9 3.4-34.4 5.1-55.3 5.1-109.8 0-183-58.8-200.2-158H337c-4.4 0-8-3.6-8-8v-27.2c0-4.4 3.6-8 8-8h26.1v-36.9c0-4.4 0-8.7.3-12.8H337c-4.4 0-8-3.6-8-8v-27.2c0-4.4 3.6-8 8-8h31.8C388.5 345.7 460.7 290 567.4 290c20.9 0 39.4 1.9 55.3 5.4 3.7.8 6.3 4 6.3 7.8V346a8 8 0 0 1-9.6 7.8c-14.6-2.9-31.8-4.4-51.7-4.4-65.3 0-110.4 33.5-127.6 90.4h128.3c4.4 0 8 3.6 8 8V475c0 4.4-3.6 8-8 8H432.5c-.3 4.4-.3 9.1-.3 13.8v36h136.4c4.4 0 8 3.6 8 8V568c0 4.4-3.6 8-8 8H438c15.3 62 61.3 98.6 129.8 98.6 19.9 0 37.1-1.3 51.8-4.1 4.9-1 9.5 2.8 9.5 7.8v42.8z'
      ], [
          primaryColor,
          'M619.6 670.5c-14.7 2.8-31.9 4.1-51.8 4.1-68.5 0-114.5-36.6-129.8-98.6h130.6c4.4 0 8-3.6 8-8v-27.2c0-4.4-3.6-8-8-8H432.2v-36c0-4.7 0-9.4.3-13.8h135.9c4.4 0 8-3.6 8-8v-27.2c0-4.4-3.6-8-8-8H440.1c17.2-56.9 62.3-90.4 127.6-90.4 19.9 0 37.1 1.5 51.7 4.4a8 8 0 0 0 9.6-7.8v-42.8c0-3.8-2.6-7-6.3-7.8-15.9-3.5-34.4-5.4-55.3-5.4-106.7 0-178.9 55.7-198.6 149.9H337c-4.4 0-8 3.6-8 8v27.2c0 4.4 3.6 8 8 8h26.4c-.3 4.1-.3 8.4-.3 12.8v36.9H337c-4.4 0-8 3.6-8 8V568c0 4.4 3.6 8 8 8h30.2c17.2 99.2 90.4 158 200.2 158 20.9 0 39.4-1.7 55.3-5.1 3.7-.8 6.4-4 6.4-7.8v-42.8c0-5-4.6-8.8-9.5-7.8z'
      ]);
  });
  exports.GoldTwoTone = getIcon('gold', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          primaryColor,
          'M435.7 558.7c-.6-3.9-4-6.7-7.9-6.7H166.2c-3.9 0-7.3 2.8-7.9 6.7l-40.2 248c-.1.4-.1.9-.1 1.3 0 4.4 3.6 8 8 8h342c.4 0 .9 0 1.3-.1 4.4-.7 7.3-4.8 6.6-9.2l-40.2-248zM196.5 748l20.7-128h159.5l20.7 128H196.5zm709.4 58.7l-40.2-248c-.6-3.9-4-6.7-7.9-6.7H596.2c-3.9 0-7.3 2.8-7.9 6.7l-40.2 248c-.1.4-.1.9-.1 1.3 0 4.4 3.6 8 8 8h342c.4 0 .9 0 1.3-.1 4.3-.7 7.3-4.8 6.6-9.2zM626.5 748l20.7-128h159.5l20.7 128H626.5zM342 472h342c.4 0 .9 0 1.3-.1 4.4-.7 7.3-4.8 6.6-9.2l-40.2-248c-.6-3.9-4-6.7-7.9-6.7H382.2c-3.9 0-7.3 2.8-7.9 6.7l-40.2 248c-.1.4-.1.9-.1 1.3 0 4.4 3.6 8 8 8zm91.2-196h159.5l20.7 128h-201l20.8-128z'
      ], [
          secondaryColor,
          'M592.7 276H433.2l-20.8 128h201zM217.2 620l-20.7 128h200.9l-20.7-128zm430 0l-20.7 128h200.9l-20.7-128z'
      ]);
  });
  exports.CanlendarTwoTone = getIcon('canlendar', twotone, function (primaryColor, secondaryColor) {
      return getNode(newViewBox, [
          secondaryColor,
          'M712 304c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-48H384v48c0 4.4-3.6 8-8 8h-56c-4.4 0-8-3.6-8-8v-48H184v136h656V256H712v48z'
      ], [
          primaryColor,
          'M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zm0-448H184V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136z'
      ]);
  });
  });

  var dist$1 = /*@__PURE__*/getDefaultExportFromCjs(dist);

  var allIcons = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), dist, {
    'default': dist$1
  }));

  var classCallCheck = createCommonjsModule(function (module, exports) {

  exports.__esModule = true;

  exports.default = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  });

  var _classCallCheck = /*@__PURE__*/getDefaultExportFromCjs(classCallCheck);

  var createClass = createCommonjsModule(function (module, exports) {

  exports.__esModule = true;



  var _defineProperty2 = _interopRequireDefault(defineProperty$1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.default = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        (0, _defineProperty2.default)(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  });

  var _createClass = /*@__PURE__*/getDefaultExportFromCjs(createClass);

  var tinycolor = createCommonjsModule(function (module) {
  // TinyColor v1.4.2
  // https://github.com/bgrins/TinyColor
  // Brian Grinstead, MIT License

  (function(Math) {

  var trimLeft = /^\s+/,
      trimRight = /\s+$/,
      tinyCounter = 0,
      mathRound = Math.round,
      mathMin = Math.min,
      mathMax = Math.max,
      mathRandom = Math.random;

  function tinycolor (color, opts) {

      color = (color) ? color : '';
      opts = opts || { };

      // If input is already a tinycolor, return itself
      if (color instanceof tinycolor) {
         return color;
      }
      // If we are called as a function, call using new instead
      if (!(this instanceof tinycolor)) {
          return new tinycolor(color, opts);
      }

      var rgb = inputToRGB(color);
      this._originalInput = color,
      this._r = rgb.r,
      this._g = rgb.g,
      this._b = rgb.b,
      this._a = rgb.a,
      this._roundA = mathRound(100*this._a) / 100,
      this._format = opts.format || rgb.format;
      this._gradientType = opts.gradientType;

      // Don't let the range of [0,255] come back in [0,1].
      // Potentially lose a little bit of precision here, but will fix issues where
      // .5 gets interpreted as half of the total, instead of half of 1
      // If it was supposed to be 128, this was already taken care of by `inputToRgb`
      if (this._r < 1) { this._r = mathRound(this._r); }
      if (this._g < 1) { this._g = mathRound(this._g); }
      if (this._b < 1) { this._b = mathRound(this._b); }

      this._ok = rgb.ok;
      this._tc_id = tinyCounter++;
  }

  tinycolor.prototype = {
      isDark: function() {
          return this.getBrightness() < 128;
      },
      isLight: function() {
          return !this.isDark();
      },
      isValid: function() {
          return this._ok;
      },
      getOriginalInput: function() {
        return this._originalInput;
      },
      getFormat: function() {
          return this._format;
      },
      getAlpha: function() {
          return this._a;
      },
      getBrightness: function() {
          //http://www.w3.org/TR/AERT#color-contrast
          var rgb = this.toRgb();
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
      },
      getLuminance: function() {
          //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
          var rgb = this.toRgb();
          var RsRGB, GsRGB, BsRGB, R, G, B;
          RsRGB = rgb.r/255;
          GsRGB = rgb.g/255;
          BsRGB = rgb.b/255;

          if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}
          if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}
          if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}
          return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
      },
      setAlpha: function(value) {
          this._a = boundAlpha(value);
          this._roundA = mathRound(100*this._a) / 100;
          return this;
      },
      toHsv: function() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
      },
      toHsvString: function() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
          return (this._a == 1) ?
            "hsv("  + h + ", " + s + "%, " + v + "%)" :
            "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
      },
      toHsl: function() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
      },
      toHslString: function() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
          return (this._a == 1) ?
            "hsl("  + h + ", " + s + "%, " + l + "%)" :
            "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
      },
      toHex: function(allow3Char) {
          return rgbToHex(this._r, this._g, this._b, allow3Char);
      },
      toHexString: function(allow3Char) {
          return '#' + this.toHex(allow3Char);
      },
      toHex8: function(allow4Char) {
          return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
      },
      toHex8String: function(allow4Char) {
          return '#' + this.toHex8(allow4Char);
      },
      toRgb: function() {
          return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
      },
      toRgbString: function() {
          return (this._a == 1) ?
            "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
            "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
      },
      toPercentageRgb: function() {
          return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
      },
      toPercentageRgbString: function() {
          return (this._a == 1) ?
            "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
            "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
      },
      toName: function() {
          if (this._a === 0) {
              return "transparent";
          }

          if (this._a < 1) {
              return false;
          }

          return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
      },
      toFilter: function(secondColor) {
          var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
          var secondHex8String = hex8String;
          var gradientType = this._gradientType ? "GradientType = 1, " : "";

          if (secondColor) {
              var s = tinycolor(secondColor);
              secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
          }

          return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
      },
      toString: function(format) {
          var formatSet = !!format;
          format = format || this._format;

          var formattedString = false;
          var hasAlpha = this._a < 1 && this._a >= 0;
          var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

          if (needsAlphaFormat) {
              // Special case for "transparent", all other non-alpha formats
              // will return rgba when there is transparency.
              if (format === "name" && this._a === 0) {
                  return this.toName();
              }
              return this.toRgbString();
          }
          if (format === "rgb") {
              formattedString = this.toRgbString();
          }
          if (format === "prgb") {
              formattedString = this.toPercentageRgbString();
          }
          if (format === "hex" || format === "hex6") {
              formattedString = this.toHexString();
          }
          if (format === "hex3") {
              formattedString = this.toHexString(true);
          }
          if (format === "hex4") {
              formattedString = this.toHex8String(true);
          }
          if (format === "hex8") {
              formattedString = this.toHex8String();
          }
          if (format === "name") {
              formattedString = this.toName();
          }
          if (format === "hsl") {
              formattedString = this.toHslString();
          }
          if (format === "hsv") {
              formattedString = this.toHsvString();
          }

          return formattedString || this.toHexString();
      },
      clone: function() {
          return tinycolor(this.toString());
      },

      _applyModification: function(fn, args) {
          var color = fn.apply(null, [this].concat([].slice.call(args)));
          this._r = color._r;
          this._g = color._g;
          this._b = color._b;
          this.setAlpha(color._a);
          return this;
      },
      lighten: function() {
          return this._applyModification(lighten, arguments);
      },
      brighten: function() {
          return this._applyModification(brighten, arguments);
      },
      darken: function() {
          return this._applyModification(darken, arguments);
      },
      desaturate: function() {
          return this._applyModification(desaturate, arguments);
      },
      saturate: function() {
          return this._applyModification(saturate, arguments);
      },
      greyscale: function() {
          return this._applyModification(greyscale, arguments);
      },
      spin: function() {
          return this._applyModification(spin, arguments);
      },

      _applyCombination: function(fn, args) {
          return fn.apply(null, [this].concat([].slice.call(args)));
      },
      analogous: function() {
          return this._applyCombination(analogous, arguments);
      },
      complement: function() {
          return this._applyCombination(complement, arguments);
      },
      monochromatic: function() {
          return this._applyCombination(monochromatic, arguments);
      },
      splitcomplement: function() {
          return this._applyCombination(splitcomplement, arguments);
      },
      triad: function() {
          return this._applyCombination(triad, arguments);
      },
      tetrad: function() {
          return this._applyCombination(tetrad, arguments);
      }
  };

  // If input is an object, force 1 into "1.0" to handle ratios properly
  // String input requires "1.0" as input, so 1 will be treated as 1
  tinycolor.fromRatio = function(color, opts) {
      if (typeof color == "object") {
          var newColor = {};
          for (var i in color) {
              if (color.hasOwnProperty(i)) {
                  if (i === "a") {
                      newColor[i] = color[i];
                  }
                  else {
                      newColor[i] = convertToPercentage(color[i]);
                  }
              }
          }
          color = newColor;
      }

      return tinycolor(color, opts);
  };

  // Given a string or object, convert that input to RGB
  // Possible string inputs:
  //
  //     "red"
  //     "#f00" or "f00"
  //     "#ff0000" or "ff0000"
  //     "#ff000000" or "ff000000"
  //     "rgb 255 0 0" or "rgb (255, 0, 0)"
  //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
  //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
  //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
  //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
  //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
  //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
  //
  function inputToRGB(color) {

      var rgb = { r: 0, g: 0, b: 0 };
      var a = 1;
      var s = null;
      var v = null;
      var l = null;
      var ok = false;
      var format = false;

      if (typeof color == "string") {
          color = stringInputToObject(color);
      }

      if (typeof color == "object") {
          if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
              rgb = rgbToRgb(color.r, color.g, color.b);
              ok = true;
              format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
          }
          else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
              s = convertToPercentage(color.s);
              v = convertToPercentage(color.v);
              rgb = hsvToRgb(color.h, s, v);
              ok = true;
              format = "hsv";
          }
          else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
              s = convertToPercentage(color.s);
              l = convertToPercentage(color.l);
              rgb = hslToRgb(color.h, s, l);
              ok = true;
              format = "hsl";
          }

          if (color.hasOwnProperty("a")) {
              a = color.a;
          }
      }

      a = boundAlpha(a);

      return {
          ok: ok,
          format: color.format || format,
          r: mathMin(255, mathMax(rgb.r, 0)),
          g: mathMin(255, mathMax(rgb.g, 0)),
          b: mathMin(255, mathMax(rgb.b, 0)),
          a: a
      };
  }


  // Conversion Functions
  // --------------------

  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

  // `rgbToRgb`
  // Handle bounds / percentage checking to conform to CSS color spec
  // <http://www.w3.org/TR/css3-color/>
  // *Assumes:* r, g, b in [0, 255] or [0, 1]
  // *Returns:* { r, g, b } in [0, 255]
  function rgbToRgb(r, g, b){
      return {
          r: bound01(r, 255) * 255,
          g: bound01(g, 255) * 255,
          b: bound01(b, 255) * 255
      };
  }

  // `rgbToHsl`
  // Converts an RGB color value to HSL.
  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
  // *Returns:* { h, s, l } in [0,1]
  function rgbToHsl(r, g, b) {

      r = bound01(r, 255);
      g = bound01(g, 255);
      b = bound01(b, 255);

      var max = mathMax(r, g, b), min = mathMin(r, g, b);
      var h, s, l = (max + min) / 2;

      if(max == min) {
          h = s = 0; // achromatic
      }
      else {
          var d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          switch(max) {
              case r: h = (g - b) / d + (g < b ? 6 : 0); break;
              case g: h = (b - r) / d + 2; break;
              case b: h = (r - g) / d + 4; break;
          }

          h /= 6;
      }

      return { h: h, s: s, l: l };
  }

  // `hslToRgb`
  // Converts an HSL color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
  function hslToRgb(h, s, l) {
      var r, g, b;

      h = bound01(h, 360);
      s = bound01(s, 100);
      l = bound01(l, 100);

      function hue2rgb(p, q, t) {
          if(t < 0) t += 1;
          if(t > 1) t -= 1;
          if(t < 1/6) return p + (q - p) * 6 * t;
          if(t < 1/2) return q;
          if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
          return p;
      }

      if(s === 0) {
          r = g = b = l; // achromatic
      }
      else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = hue2rgb(p, q, h + 1/3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1/3);
      }

      return { r: r * 255, g: g * 255, b: b * 255 };
  }

  // `rgbToHsv`
  // Converts an RGB color value to HSV
  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
  // *Returns:* { h, s, v } in [0,1]
  function rgbToHsv(r, g, b) {

      r = bound01(r, 255);
      g = bound01(g, 255);
      b = bound01(b, 255);

      var max = mathMax(r, g, b), min = mathMin(r, g, b);
      var h, s, v = max;

      var d = max - min;
      s = max === 0 ? 0 : d / max;

      if(max == min) {
          h = 0; // achromatic
      }
      else {
          switch(max) {
              case r: h = (g - b) / d + (g < b ? 6 : 0); break;
              case g: h = (b - r) / d + 2; break;
              case b: h = (r - g) / d + 4; break;
          }
          h /= 6;
      }
      return { h: h, s: s, v: v };
  }

  // `hsvToRgb`
  // Converts an HSV color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
   function hsvToRgb(h, s, v) {

      h = bound01(h, 360) * 6;
      s = bound01(s, 100);
      v = bound01(v, 100);

      var i = Math.floor(h),
          f = h - i,
          p = v * (1 - s),
          q = v * (1 - f * s),
          t = v * (1 - (1 - f) * s),
          mod = i % 6,
          r = [v, q, p, p, t, v][mod],
          g = [t, v, v, q, p, p][mod],
          b = [p, p, t, v, v, q][mod];

      return { r: r * 255, g: g * 255, b: b * 255 };
  }

  // `rgbToHex`
  // Converts an RGB color to hex
  // Assumes r, g, and b are contained in the set [0, 255]
  // Returns a 3 or 6 character hex
  function rgbToHex(r, g, b, allow3Char) {

      var hex = [
          pad2(mathRound(r).toString(16)),
          pad2(mathRound(g).toString(16)),
          pad2(mathRound(b).toString(16))
      ];

      // Return a 3 character hex if possible
      if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
      }

      return hex.join("");
  }

  // `rgbaToHex`
  // Converts an RGBA color plus alpha transparency to hex
  // Assumes r, g, b are contained in the set [0, 255] and
  // a in [0, 1]. Returns a 4 or 8 character rgba hex
  function rgbaToHex(r, g, b, a, allow4Char) {

      var hex = [
          pad2(mathRound(r).toString(16)),
          pad2(mathRound(g).toString(16)),
          pad2(mathRound(b).toString(16)),
          pad2(convertDecimalToHex(a))
      ];

      // Return a 4 character hex if possible
      if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
      }

      return hex.join("");
  }

  // `rgbaToArgbHex`
  // Converts an RGBA color to an ARGB Hex8 string
  // Rarely used, but required for "toFilter()"
  function rgbaToArgbHex(r, g, b, a) {

      var hex = [
          pad2(convertDecimalToHex(a)),
          pad2(mathRound(r).toString(16)),
          pad2(mathRound(g).toString(16)),
          pad2(mathRound(b).toString(16))
      ];

      return hex.join("");
  }

  // `equals`
  // Can be called with any tinycolor input
  tinycolor.equals = function (color1, color2) {
      if (!color1 || !color2) { return false; }
      return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
  };

  tinycolor.random = function() {
      return tinycolor.fromRatio({
          r: mathRandom(),
          g: mathRandom(),
          b: mathRandom()
      });
  };


  // Modification Functions
  // ----------------------
  // Thanks to less.js for some of the basics here
  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

  function desaturate(color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var hsl = tinycolor(color).toHsl();
      hsl.s -= amount / 100;
      hsl.s = clamp01(hsl.s);
      return tinycolor(hsl);
  }

  function saturate(color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var hsl = tinycolor(color).toHsl();
      hsl.s += amount / 100;
      hsl.s = clamp01(hsl.s);
      return tinycolor(hsl);
  }

  function greyscale(color) {
      return tinycolor(color).desaturate(100);
  }

  function lighten (color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var hsl = tinycolor(color).toHsl();
      hsl.l += amount / 100;
      hsl.l = clamp01(hsl.l);
      return tinycolor(hsl);
  }

  function brighten(color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var rgb = tinycolor(color).toRgb();
      rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));
      rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));
      rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));
      return tinycolor(rgb);
  }

  function darken (color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var hsl = tinycolor(color).toHsl();
      hsl.l -= amount / 100;
      hsl.l = clamp01(hsl.l);
      return tinycolor(hsl);
  }

  // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
  // Values outside of this range will be wrapped into this range.
  function spin(color, amount) {
      var hsl = tinycolor(color).toHsl();
      var hue = (hsl.h + amount) % 360;
      hsl.h = hue < 0 ? 360 + hue : hue;
      return tinycolor(hsl);
  }

  // Combination Functions
  // ---------------------
  // Thanks to jQuery xColor for some of the ideas behind these
  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

  function complement(color) {
      var hsl = tinycolor(color).toHsl();
      hsl.h = (hsl.h + 180) % 360;
      return tinycolor(hsl);
  }

  function triad(color) {
      var hsl = tinycolor(color).toHsl();
      var h = hsl.h;
      return [
          tinycolor(color),
          tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
          tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
      ];
  }

  function tetrad(color) {
      var hsl = tinycolor(color).toHsl();
      var h = hsl.h;
      return [
          tinycolor(color),
          tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
          tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
          tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
      ];
  }

  function splitcomplement(color) {
      var hsl = tinycolor(color).toHsl();
      var h = hsl.h;
      return [
          tinycolor(color),
          tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
          tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
      ];
  }

  function analogous(color, results, slices) {
      results = results || 6;
      slices = slices || 30;

      var hsl = tinycolor(color).toHsl();
      var part = 360 / slices;
      var ret = [tinycolor(color)];

      for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(tinycolor(hsl));
      }
      return ret;
  }

  function monochromatic(color, results) {
      results = results || 6;
      var hsv = tinycolor(color).toHsv();
      var h = hsv.h, s = hsv.s, v = hsv.v;
      var ret = [];
      var modification = 1 / results;

      while (results--) {
          ret.push(tinycolor({ h: h, s: s, v: v}));
          v = (v + modification) % 1;
      }

      return ret;
  }

  // Utility Functions
  // ---------------------

  tinycolor.mix = function(color1, color2, amount) {
      amount = (amount === 0) ? 0 : (amount || 50);

      var rgb1 = tinycolor(color1).toRgb();
      var rgb2 = tinycolor(color2).toRgb();

      var p = amount / 100;

      var rgba = {
          r: ((rgb2.r - rgb1.r) * p) + rgb1.r,
          g: ((rgb2.g - rgb1.g) * p) + rgb1.g,
          b: ((rgb2.b - rgb1.b) * p) + rgb1.b,
          a: ((rgb2.a - rgb1.a) * p) + rgb1.a
      };

      return tinycolor(rgba);
  };


  // Readability Functions
  // ---------------------
  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

  // `contrast`
  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
  tinycolor.readability = function(color1, color2) {
      var c1 = tinycolor(color1);
      var c2 = tinycolor(color2);
      return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);
  };

  // `isReadable`
  // Ensure that foreground and background color combinations meet WCAG2 guidelines.
  // The third argument is an optional Object.
  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
  // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

  // *Example*
  //    tinycolor.isReadable("#000", "#111") => false
  //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
  tinycolor.isReadable = function(color1, color2, wcag2) {
      var readability = tinycolor.readability(color1, color2);
      var wcag2Parms, out;

      out = false;

      wcag2Parms = validateWCAG2Parms(wcag2);
      switch (wcag2Parms.level + wcag2Parms.size) {
          case "AAsmall":
          case "AAAlarge":
              out = readability >= 4.5;
              break;
          case "AAlarge":
              out = readability >= 3;
              break;
          case "AAAsmall":
              out = readability >= 7;
              break;
      }
      return out;

  };

  // `mostReadable`
  // Given a base color and a list of possible foreground or background
  // colors for that base, returns the most readable color.
  // Optionally returns Black or White if the most readable color is unreadable.
  // *Example*
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
  tinycolor.mostReadable = function(baseColor, colorList, args) {
      var bestColor = null;
      var bestScore = 0;
      var readability;
      var includeFallbackColors, level, size ;
      args = args || {};
      includeFallbackColors = args.includeFallbackColors ;
      level = args.level;
      size = args.size;

      for (var i= 0; i < colorList.length ; i++) {
          readability = tinycolor.readability(baseColor, colorList[i]);
          if (readability > bestScore) {
              bestScore = readability;
              bestColor = tinycolor(colorList[i]);
          }
      }

      if (tinycolor.isReadable(baseColor, bestColor, {"level":level,"size":size}) || !includeFallbackColors) {
          return bestColor;
      }
      else {
          args.includeFallbackColors=false;
          return tinycolor.mostReadable(baseColor,["#fff", "#000"],args);
      }
  };


  // Big List of Colors
  // ------------------
  // <http://www.w3.org/TR/css3-color/#svg-color>
  var names = tinycolor.names = {
      aliceblue: "f0f8ff",
      antiquewhite: "faebd7",
      aqua: "0ff",
      aquamarine: "7fffd4",
      azure: "f0ffff",
      beige: "f5f5dc",
      bisque: "ffe4c4",
      black: "000",
      blanchedalmond: "ffebcd",
      blue: "00f",
      blueviolet: "8a2be2",
      brown: "a52a2a",
      burlywood: "deb887",
      burntsienna: "ea7e5d",
      cadetblue: "5f9ea0",
      chartreuse: "7fff00",
      chocolate: "d2691e",
      coral: "ff7f50",
      cornflowerblue: "6495ed",
      cornsilk: "fff8dc",
      crimson: "dc143c",
      cyan: "0ff",
      darkblue: "00008b",
      darkcyan: "008b8b",
      darkgoldenrod: "b8860b",
      darkgray: "a9a9a9",
      darkgreen: "006400",
      darkgrey: "a9a9a9",
      darkkhaki: "bdb76b",
      darkmagenta: "8b008b",
      darkolivegreen: "556b2f",
      darkorange: "ff8c00",
      darkorchid: "9932cc",
      darkred: "8b0000",
      darksalmon: "e9967a",
      darkseagreen: "8fbc8f",
      darkslateblue: "483d8b",
      darkslategray: "2f4f4f",
      darkslategrey: "2f4f4f",
      darkturquoise: "00ced1",
      darkviolet: "9400d3",
      deeppink: "ff1493",
      deepskyblue: "00bfff",
      dimgray: "696969",
      dimgrey: "696969",
      dodgerblue: "1e90ff",
      firebrick: "b22222",
      floralwhite: "fffaf0",
      forestgreen: "228b22",
      fuchsia: "f0f",
      gainsboro: "dcdcdc",
      ghostwhite: "f8f8ff",
      gold: "ffd700",
      goldenrod: "daa520",
      gray: "808080",
      green: "008000",
      greenyellow: "adff2f",
      grey: "808080",
      honeydew: "f0fff0",
      hotpink: "ff69b4",
      indianred: "cd5c5c",
      indigo: "4b0082",
      ivory: "fffff0",
      khaki: "f0e68c",
      lavender: "e6e6fa",
      lavenderblush: "fff0f5",
      lawngreen: "7cfc00",
      lemonchiffon: "fffacd",
      lightblue: "add8e6",
      lightcoral: "f08080",
      lightcyan: "e0ffff",
      lightgoldenrodyellow: "fafad2",
      lightgray: "d3d3d3",
      lightgreen: "90ee90",
      lightgrey: "d3d3d3",
      lightpink: "ffb6c1",
      lightsalmon: "ffa07a",
      lightseagreen: "20b2aa",
      lightskyblue: "87cefa",
      lightslategray: "789",
      lightslategrey: "789",
      lightsteelblue: "b0c4de",
      lightyellow: "ffffe0",
      lime: "0f0",
      limegreen: "32cd32",
      linen: "faf0e6",
      magenta: "f0f",
      maroon: "800000",
      mediumaquamarine: "66cdaa",
      mediumblue: "0000cd",
      mediumorchid: "ba55d3",
      mediumpurple: "9370db",
      mediumseagreen: "3cb371",
      mediumslateblue: "7b68ee",
      mediumspringgreen: "00fa9a",
      mediumturquoise: "48d1cc",
      mediumvioletred: "c71585",
      midnightblue: "191970",
      mintcream: "f5fffa",
      mistyrose: "ffe4e1",
      moccasin: "ffe4b5",
      navajowhite: "ffdead",
      navy: "000080",
      oldlace: "fdf5e6",
      olive: "808000",
      olivedrab: "6b8e23",
      orange: "ffa500",
      orangered: "ff4500",
      orchid: "da70d6",
      palegoldenrod: "eee8aa",
      palegreen: "98fb98",
      paleturquoise: "afeeee",
      palevioletred: "db7093",
      papayawhip: "ffefd5",
      peachpuff: "ffdab9",
      peru: "cd853f",
      pink: "ffc0cb",
      plum: "dda0dd",
      powderblue: "b0e0e6",
      purple: "800080",
      rebeccapurple: "663399",
      red: "f00",
      rosybrown: "bc8f8f",
      royalblue: "4169e1",
      saddlebrown: "8b4513",
      salmon: "fa8072",
      sandybrown: "f4a460",
      seagreen: "2e8b57",
      seashell: "fff5ee",
      sienna: "a0522d",
      silver: "c0c0c0",
      skyblue: "87ceeb",
      slateblue: "6a5acd",
      slategray: "708090",
      slategrey: "708090",
      snow: "fffafa",
      springgreen: "00ff7f",
      steelblue: "4682b4",
      tan: "d2b48c",
      teal: "008080",
      thistle: "d8bfd8",
      tomato: "ff6347",
      turquoise: "40e0d0",
      violet: "ee82ee",
      wheat: "f5deb3",
      white: "fff",
      whitesmoke: "f5f5f5",
      yellow: "ff0",
      yellowgreen: "9acd32"
  };

  // Make it easy to access colors via `hexNames[hex]`
  var hexNames = tinycolor.hexNames = flip(names);


  // Utilities
  // ---------

  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
  function flip(o) {
      var flipped = { };
      for (var i in o) {
          if (o.hasOwnProperty(i)) {
              flipped[o[i]] = i;
          }
      }
      return flipped;
  }

  // Return a valid alpha value [0,1] with all invalid values being set to 1
  function boundAlpha(a) {
      a = parseFloat(a);

      if (isNaN(a) || a < 0 || a > 1) {
          a = 1;
      }

      return a;
  }

  // Take input from [0, n] and return it as [0, 1]
  function bound01(n, max) {
      if (isOnePointZero(n)) { n = "100%"; }

      var processPercent = isPercentage(n);
      n = mathMin(max, mathMax(0, parseFloat(n)));

      // Automatically convert percentage into number
      if (processPercent) {
          n = parseInt(n * max, 10) / 100;
      }

      // Handle floating point rounding errors
      if ((Math.abs(n - max) < 0.000001)) {
          return 1;
      }

      // Convert into [0, 1] range if it isn't already
      return (n % max) / parseFloat(max);
  }

  // Force a number between 0 and 1
  function clamp01(val) {
      return mathMin(1, mathMax(0, val));
  }

  // Parse a base-16 hex value into a base-10 integer
  function parseIntFromHex(val) {
      return parseInt(val, 16);
  }

  // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
  function isOnePointZero(n) {
      return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
  }

  // Check to see if string passed in is a percentage
  function isPercentage(n) {
      return typeof n === "string" && n.indexOf('%') != -1;
  }

  // Force a hex value to have 2 characters
  function pad2(c) {
      return c.length == 1 ? '0' + c : '' + c;
  }

  // Replace a decimal with it's percentage value
  function convertToPercentage(n) {
      if (n <= 1) {
          n = (n * 100) + "%";
      }

      return n;
  }

  // Converts a decimal to a hex value
  function convertDecimalToHex(d) {
      return Math.round(parseFloat(d) * 255).toString(16);
  }
  // Converts a hex value to a decimal
  function convertHexToDecimal(h) {
      return (parseIntFromHex(h) / 255);
  }

  var matchers = (function() {

      // <http://www.w3.org/TR/css3-values/#integers>
      var CSS_INTEGER = "[-\\+]?\\d+%?";

      // <http://www.w3.org/TR/css3-values/#number-value>
      var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

      // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
      var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

      // Actual matching.
      // Parentheses and commas are optional, but not required.
      // Whitespace can take the place of commas or opening paren
      var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
      var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

      return {
          CSS_UNIT: new RegExp(CSS_UNIT),
          rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
          rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
          hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
          hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
          hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
          hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
          hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
          hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
      };
  })();

  // `isValidCSSUnit`
  // Take in a single string / number and check to see if it looks like a CSS unit
  // (see `matchers` above for definition).
  function isValidCSSUnit(color) {
      return !!matchers.CSS_UNIT.exec(color);
  }

  // `stringInputToObject`
  // Permissive string parsing.  Take in a number of formats, and output an object
  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
  function stringInputToObject(color) {

      color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();
      var named = false;
      if (names[color]) {
          color = names[color];
          named = true;
      }
      else if (color == 'transparent') {
          return { r: 0, g: 0, b: 0, a: 0, format: "name" };
      }

      // Try to match string input using regular expressions.
      // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
      // Just return an object and let the conversion functions handle that.
      // This way the result will be the same whether the tinycolor is initialized with string or object.
      var match;
      if ((match = matchers.rgb.exec(color))) {
          return { r: match[1], g: match[2], b: match[3] };
      }
      if ((match = matchers.rgba.exec(color))) {
          return { r: match[1], g: match[2], b: match[3], a: match[4] };
      }
      if ((match = matchers.hsl.exec(color))) {
          return { h: match[1], s: match[2], l: match[3] };
      }
      if ((match = matchers.hsla.exec(color))) {
          return { h: match[1], s: match[2], l: match[3], a: match[4] };
      }
      if ((match = matchers.hsv.exec(color))) {
          return { h: match[1], s: match[2], v: match[3] };
      }
      if ((match = matchers.hsva.exec(color))) {
          return { h: match[1], s: match[2], v: match[3], a: match[4] };
      }
      if ((match = matchers.hex8.exec(color))) {
          return {
              r: parseIntFromHex(match[1]),
              g: parseIntFromHex(match[2]),
              b: parseIntFromHex(match[3]),
              a: convertHexToDecimal(match[4]),
              format: named ? "name" : "hex8"
          };
      }
      if ((match = matchers.hex6.exec(color))) {
          return {
              r: parseIntFromHex(match[1]),
              g: parseIntFromHex(match[2]),
              b: parseIntFromHex(match[3]),
              format: named ? "name" : "hex"
          };
      }
      if ((match = matchers.hex4.exec(color))) {
          return {
              r: parseIntFromHex(match[1] + '' + match[1]),
              g: parseIntFromHex(match[2] + '' + match[2]),
              b: parseIntFromHex(match[3] + '' + match[3]),
              a: convertHexToDecimal(match[4] + '' + match[4]),
              format: named ? "name" : "hex8"
          };
      }
      if ((match = matchers.hex3.exec(color))) {
          return {
              r: parseIntFromHex(match[1] + '' + match[1]),
              g: parseIntFromHex(match[2] + '' + match[2]),
              b: parseIntFromHex(match[3] + '' + match[3]),
              format: named ? "name" : "hex"
          };
      }

      return false;
  }

  function validateWCAG2Parms(parms) {
      // return valid WCAG2 parms for isReadable.
      // If input parms are invalid, return {"level":"AA", "size":"small"}
      var level, size;
      parms = parms || {"level":"AA", "size":"small"};
      level = (parms.level || "AA").toUpperCase();
      size = (parms.size || "small").toLowerCase();
      if (level !== "AA" && level !== "AAA") {
          level = "AA";
      }
      if (size !== "small" && size !== "large") {
          size = "small";
      }
      return {"level":level, "size":size};
  }

  // Node: Export function
  if ( module.exports) {
      module.exports = tinycolor;
  }
  // AMD/requirejs: Define the module
  else {
      window.tinycolor = tinycolor;
  }

  })(Math);
  });

  var generate_1 = createCommonjsModule(function (module, exports) {
  var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  var tinycolor2_1 = __importDefault(tinycolor);
  var hueStep = 2; // 色相阶梯
  var saturationStep = 16; // 饱和度阶梯，浅色部分
  var saturationStep2 = 5; // 饱和度阶梯，深色部分
  var brightnessStep1 = 5; // 亮度阶梯，浅色部分
  var brightnessStep2 = 15; // 亮度阶梯，深色部分
  var lightColorCount = 5; // 浅色数量，主色上
  var darkColorCount = 4; // 深色数量，主色下
  function getHue(hsv, i, light) {
      var hue;
      // 根据色相不同，色相转向不同
      if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {
          hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;
      }
      else {
          hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;
      }
      if (hue < 0) {
          hue += 360;
      }
      else if (hue >= 360) {
          hue -= 360;
      }
      return hue;
  }
  function getSaturation(hsv, i, light) {
      // grey color don't change saturation
      if (hsv.h === 0 && hsv.s === 0) {
          return hsv.s;
      }
      var saturation;
      if (light) {
          saturation = Math.round(hsv.s * 100) - saturationStep * i;
      }
      else if (i === darkColorCount) {
          saturation = Math.round(hsv.s * 100) + saturationStep;
      }
      else {
          saturation = Math.round(hsv.s * 100) + saturationStep2 * i;
      }
      // 边界值修正
      if (saturation > 100) {
          saturation = 100;
      }
      // 第一格的 s 限制在 6-10 之间
      if (light && i === lightColorCount && saturation > 10) {
          saturation = 10;
      }
      if (saturation < 6) {
          saturation = 6;
      }
      return saturation;
  }
  function getValue(hsv, i, light) {
      if (light) {
          return Math.round(hsv.v * 100) + brightnessStep1 * i;
      }
      return Math.round(hsv.v * 100) - brightnessStep2 * i;
  }
  function generate(color) {
      var patterns = [];
      var pColor = tinycolor2_1.default(color);
      for (var i = lightColorCount; i > 0; i -= 1) {
          var hsv = pColor.toHsv();
          var colorString = tinycolor2_1.default({
              h: getHue(hsv, i, true),
              s: getSaturation(hsv, i, true),
              v: getValue(hsv, i, true),
          }).toHexString();
          patterns.push(colorString);
      }
      patterns.push(pColor.toHexString());
      for (var i = 1; i <= darkColorCount; i += 1) {
          var hsv = pColor.toHsv();
          var colorString = tinycolor2_1.default({
              h: getHue(hsv, i),
              s: getSaturation(hsv, i),
              v: getValue(hsv, i),
          }).toHexString();
          patterns.push(colorString);
      }
      return patterns;
  }
  exports.default = generate;
  });

  var lib$1 = createCommonjsModule(function (module, exports) {
  var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  var generate_1$1 = __importDefault(generate_1);
  exports.generate = generate_1$1.default;
  var presetPrimaryColors = {
      red: '#F5222D',
      volcano: '#FA541C',
      orange: '#FA8C16',
      gold: '#FAAD14',
      yellow: '#FADB14',
      lime: '#A0D911',
      green: '#52C41A',
      cyan: '#13C2C2',
      blue: '#1890FF',
      geekblue: '#2F54EB',
      purple: '#722ED1',
      magenta: '#EB2F96',
      grey: '#666666',
  };
  exports.presetPrimaryColors = presetPrimaryColors;
  var presetPalettes = {};
  exports.presetPalettes = presetPalettes;
  Object.keys(presetPrimaryColors).forEach(function (key) {
      presetPalettes[key] = generate_1$1.default(presetPrimaryColors[key]);
      presetPalettes[key].primary = presetPalettes[key][5];
  });
  var red = presetPalettes.red;
  exports.red = red;
  var volcano = presetPalettes.volcano;
  exports.volcano = volcano;
  var gold = presetPalettes.gold;
  exports.gold = gold;
  var orange = presetPalettes.orange;
  exports.orange = orange;
  var yellow = presetPalettes.yellow;
  exports.yellow = yellow;
  var lime = presetPalettes.lime;
  exports.lime = lime;
  var green = presetPalettes.green;
  exports.green = green;
  var cyan = presetPalettes.cyan;
  exports.cyan = cyan;
  var blue = presetPalettes.blue;
  exports.blue = blue;
  var geekblue = presetPalettes.geekblue;
  exports.geekblue = geekblue;
  var purple = presetPalettes.purple;
  exports.purple = purple;
  var magenta = presetPalettes.magenta;
  exports.magenta = magenta;
  var grey = presetPalettes.grey;
  exports.grey = grey;
  });

  function log(message) {
    if (!(process && process.env && process.env.NODE_ENV === 'production')) {
      console.error('[@ant-design/icons-vue]: ' + message + '.');
    }
  }

  function isIconDefinition(target) {
    return typeof target === 'object' && typeof target.name === 'string' && typeof target.theme === 'string' && (typeof target.icon === 'object' || typeof target.icon === 'function');
  }

  function normalizeAttrs() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return Object.keys(attrs).reduce(function (acc, key) {
      var val = attrs[key];
      switch (key) {
        case 'class':
          acc.className = val;
          delete acc['class'];
          break;
        default:
          acc[key] = val;
      }
      return acc;
    }, {});
  }

  var MiniMap = function () {
    function MiniMap() {
      _classCallCheck(this, MiniMap);

      this.collection = {};
    }

    _createClass(MiniMap, [{
      key: 'clear',
      value: function clear() {
        this.collection = {};
      }
    }, {
      key: 'delete',
      value: function _delete(key) {
        return delete this.collection[key];
      }
    }, {
      key: 'get',
      value: function get(key) {
        return this.collection[key];
      }
    }, {
      key: 'has',
      value: function has(key) {
        return Boolean(this.collection[key]);
      }
    }, {
      key: 'set',
      value: function set(key, value) {
        this.collection[key] = value;
        return this;
      }
    }, {
      key: 'size',
      get: function get() {
        return Object.keys(this.collection).length;
      }
    }]);

    return MiniMap;
  }();

  function generate(h, node, key, rootProps) {
    if (!rootProps) {
      return h(node.tag, { key: key, attrs: _extends$1({}, normalizeAttrs(node.attrs)) }, (node.children || []).map(function (child, index) {
        return generate(h, child, key + '-' + node.tag + '-' + index);
      }));
    }
    return h(node.tag, _extends$1({
      key: key
    }, rootProps, {
      attrs: _extends$1({}, normalizeAttrs(node.attrs), rootProps.attrs)
    }), (node.children || []).map(function (child, index) {
      return generate(h, child, key + '-' + node.tag + '-' + index);
    }));
  }

  function getSecondaryColor(primaryColor) {
    // choose the second color
    return lib$1.generate(primaryColor)[0];
  }

  function withSuffix(name, theme) {
    switch (theme) {
      case 'fill':
        return name + '-fill';
      case 'outline':
        return name + '-o';
      case 'twotone':
        return name + '-twotone';
      default:
        throw new TypeError('Unknown theme type: ' + theme + ', name: ' + name);
    }
  }

  var twoToneColorPalette = {
    primaryColor: '#333',
    secondaryColor: '#E6E6E6'
  };

  var Icon = {
    name: 'AntdIcon',
    props: ['type', 'primaryColor', 'secondaryColor'],
    displayName: 'IconVue',
    definitions: new MiniMap(),
    data: function data() {
      return {
        twoToneColorPalette: twoToneColorPalette
      };
    },
    add: function add() {
      for (var _len = arguments.length, icons = Array(_len), _key = 0; _key < _len; _key++) {
        icons[_key] = arguments[_key];
      }

      icons.forEach(function (icon) {
        Icon.definitions.set(withSuffix(icon.name, icon.theme), icon);
      });
    },
    clear: function clear() {
      Icon.definitions.clear();
    },
    get: function get(key) {
      var colors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : twoToneColorPalette;

      if (key) {
        var target = Icon.definitions.get(key);
        if (target && typeof target.icon === 'function') {
          target = _extends$1({}, target, {
            icon: target.icon(colors.primaryColor, colors.secondaryColor)
          });
        }
        return target;
      }
    },
    setTwoToneColors: function setTwoToneColors(_ref) {
      var primaryColor = _ref.primaryColor,
          secondaryColor = _ref.secondaryColor;

      twoToneColorPalette.primaryColor = primaryColor;
      twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
    },
    getTwoToneColors: function getTwoToneColors() {
      return _extends$1({}, twoToneColorPalette);
    },
    render: function render(h) {
      var _$props = this.$props,
          type = _$props.type,
          primaryColor = _$props.primaryColor,
          secondaryColor = _$props.secondaryColor;


      var target = void 0;
      var colors = twoToneColorPalette;
      if (primaryColor) {
        colors = {
          primaryColor: primaryColor,
          secondaryColor: secondaryColor || getSecondaryColor(primaryColor)
        };
      }
      if (isIconDefinition(type)) {
        target = type;
      } else if (typeof type === 'string') {
        target = Icon.get(type, colors);
        if (!target) {
          // log(`Could not find icon: ${type}`);
          return null;
        }
      }
      if (!target) {
        log('type should be string or icon definiton, but got ' + type);
        return null;
      }
      if (target && typeof target.icon === 'function') {
        target = _extends$1({}, target, {
          icon: target.icon(colors.primaryColor, colors.secondaryColor)
        });
      }
      return generate(h, target.icon, 'svg-' + target.name, {
        attrs: {
          'data-icon': target.name,
          width: '1em',
          height: '1em',
          fill: 'currentColor',
          'aria-hidden': 'true'
        },
        on: this.$listeners
      });
    }
  };

  /* istanbul ignore next */
  Icon.install = function (Vue) {
    Vue.component(Icon.name, Icon);
  };

  var customCache = new Set();

  function create$1(options) {
    var scriptUrl = options.scriptUrl,
        _options$extraCommonP = options.extraCommonProps,
        extraCommonProps = _options$extraCommonP === undefined ? {} : _options$extraCommonP;

    /**
     * DOM API required.
     * Make sure in browser environment.
     * The Custom Icon will create a <script/>
     * that loads SVG symbols and insert the SVG Element into the document body.
     */

    if (typeof document !== 'undefined' && typeof window !== 'undefined' && typeof document.createElement === 'function' && typeof scriptUrl === 'string' && scriptUrl.length && !customCache.has(scriptUrl)) {
      var script = document.createElement('script');
      script.setAttribute('src', scriptUrl);
      script.setAttribute('data-namespace', scriptUrl);
      customCache.add(scriptUrl);
      document.body.appendChild(script);
    }

    var Iconfont = {
      functional: true,
      name: 'AIconfont',
      props: Icon$1.props,
      render: function render(h, context) {
        var props = context.props,
            slots = context.slots,
            listeners = context.listeners,
            data = context.data;

        var type = props.type,
            restProps = _objectWithoutProperties(props, ['type']);

        var slotsMap = slots();
        var children = slotsMap['default'];
        // component > children > type
        var content = null;
        if (type) {
          content = h('use', { attrs: { 'xlink:href': '#' + type } });
        }
        if (children) {
          content = children;
        }
        var iconProps = mergeProps(extraCommonProps, data, { props: restProps, on: listeners });
        return h(
          Icon$1,
          iconProps,
          [content]
        );
      }
    };
    return Iconfont;
  }

  // These props make sure that the SVG behaviours like general text.
  // Reference: https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4
  var svgBaseProps = {
    width: '1em',
    height: '1em',
    fill: 'currentColor',
    'aria-hidden': 'true',
    focusable: 'false'
  };

  var fillTester = /-fill$/;
  var outlineTester = /-o$/;
  var twoToneTester = /-twotone$/;

  function getThemeFromTypeName(type) {
    var result = null;
    if (fillTester.test(type)) {
      result = 'filled';
    } else if (outlineTester.test(type)) {
      result = 'outlined';
    } else if (twoToneTester.test(type)) {
      result = 'twoTone';
    }
    return result;
  }

  function removeTypeTheme(type) {
    return type.replace(fillTester, '').replace(outlineTester, '').replace(twoToneTester, '');
  }

  function withThemeSuffix(type, theme) {
    var result = type;
    if (theme === 'filled') {
      result += '-fill';
    } else if (theme === 'outlined') {
      result += '-o';
    } else if (theme === 'twoTone') {
      result += '-twotone';
    } else {
      warning$1(false, 'Icon', 'This icon \'' + type + '\' has unknown theme \'' + theme + '\'');
    }
    return result;
  }

  // For alias or compatibility
  function alias(type) {
    var newType = type;
    switch (type) {
      case 'cross':
        newType = 'close';
        break;
      // https://github.com/ant-design/ant-design/issues/13007
      case 'interation':
        newType = 'interaction';
        break;
      // https://github.com/ant-design/ant-design/issues/16810
      case 'canlendar':
        newType = 'calendar';
        break;
      // https://github.com/ant-design/ant-design/issues/17448
      case 'colum-height':
        newType = 'column-height';
        break;
    }
    warning$1(newType === type, 'Icon', 'Icon \'' + type + '\' was a typo and is now deprecated, please use \'' + newType + '\' instead.');
    return newType;
  }

  function setTwoToneColor(primaryColor) {
    return Icon.setTwoToneColors({
      primaryColor: primaryColor
    });
  }

  function getTwoToneColor() {
    var colors = Icon.getTwoToneColors();
    return colors.primaryColor;
  }

  // Initial setting
  Icon.add.apply(Icon, _toConsumableArray(Object.keys(allIcons).map(function (key) {
    return allIcons[key];
  })));
  setTwoToneColor('#1890ff');
  var defaultTheme = 'outlined';

  function renderIcon(h, locale, context) {
    var _classNames;

    var props = context.$props,
        $slots = context.$slots;

    var listeners = getListeners(context);
    var type = props.type,
        Component = props.component,
        viewBox = props.viewBox,
        spin = props.spin,
        theme = props.theme,
        twoToneColor = props.twoToneColor,
        rotate = props.rotate,
        tabIndex = props.tabIndex;

    var children = filterEmpty($slots['default']);
    children = children.length === 0 ? undefined : children;
    warning$1(Boolean(type || Component || children), 'Icon', 'Icon should have `type` prop or `component` prop or `children`.');

    var classString = classnames((_classNames = {}, _defineProperty(_classNames, 'anticon', true), _defineProperty(_classNames, 'anticon-' + type, !!type), _classNames));

    var svgClassString = classnames(_defineProperty({}, 'anticon-spin', !!spin || type === 'loading'));

    var svgStyle = rotate ? {
      msTransform: 'rotate(' + rotate + 'deg)',
      transform: 'rotate(' + rotate + 'deg)'
    } : undefined;

    var innerSvgProps = {
      attrs: _extends$1({}, svgBaseProps, {
        viewBox: viewBox
      }),
      'class': svgClassString,
      style: svgStyle
    };
    if (!viewBox) {
      delete innerSvgProps.attrs.viewBox;
    }

    var renderInnerNode = function renderInnerNode() {
      // component > children > type
      if (Component) {
        return h(
          Component,
          innerSvgProps,
          [children]
        );
      }
      if (children) {
        warning$1(Boolean(viewBox) || children.length === 1 && children[0].tag === 'use', 'Icon', 'Make sure that you provide correct `viewBox`' + ' prop (default `0 0 1024 1024`) to the icon.');
        var _innerSvgProps = {
          attrs: _extends$1({}, svgBaseProps),
          'class': svgClassString,
          style: svgStyle
        };
        return h(
          'svg',
          babelHelperVueJsxMergeProps([_innerSvgProps, {
            attrs: { viewBox: viewBox }
          }]),
          [children]
        );
      }

      if (typeof type === 'string') {
        var computedType = type;
        if (theme) {
          var themeInName = getThemeFromTypeName(type);
          warning$1(!themeInName || theme === themeInName, 'Icon', 'The icon name \'' + type + '\' already specify a theme \'' + themeInName + '\',' + (' the \'theme\' prop \'' + theme + '\' will be ignored.'));
        }
        computedType = withThemeSuffix(removeTypeTheme(alias(computedType)),  theme || defaultTheme);

        return h(Icon, {
          attrs: {
            focusable: 'false',

            type: computedType,
            primaryColor: twoToneColor
          },
          'class': svgClassString, style: svgStyle
        });
      }
    };
    var iconTabIndex = tabIndex;
    if (iconTabIndex === undefined && 'click' in listeners) {
      iconTabIndex = -1;
    }
    // functional component not support nativeOn，https://github.com/vuejs/vue/issues/7526
    var iProps = {
      attrs: {
        'aria-label': type && locale.icon + ': ' + type,
        tabIndex: iconTabIndex
      },
      on: listeners,
      'class': classString,
      staticClass: ''
    };
    return h(
      'i',
      iProps,
      [renderInnerNode()]
    );
  }

  var Icon$1 = {
    name: 'AIcon',
    props: {
      tabIndex: VuePropTypes.number,
      type: VuePropTypes.string,
      component: VuePropTypes.any,
      viewBox: VuePropTypes.any,
      spin: VuePropTypes.bool.def(false),
      rotate: VuePropTypes.number,
      theme: VuePropTypes.oneOf(['filled', 'outlined', 'twoTone']),
      twoToneColor: VuePropTypes.string,
      role: VuePropTypes.string
    },
    render: function render(h) {
      var _this = this;

      return h(LocaleReceiver, {
        attrs: {
          componentName: 'Icon'
        },
        scopedSlots: { 'default': function _default(locale) {
            return renderIcon(h, locale, _this);
          } }
      });
    }
  };

  Icon$1.createFromIconfontCN = create$1;
  Icon$1.getTwoToneColor = getTwoToneColor;
  Icon$1.setTwoToneColor = setTwoToneColor;

  /* istanbul ignore next */
  Icon$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Icon$1.name, Icon$1);
  };

  var AbstractSelectProps = function AbstractSelectProps() {
    return {
      prefixCls: VuePropTypes.string,
      size: VuePropTypes.oneOf(['small', 'large', 'default']),
      showAction: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.arrayOf(String)]),
      notFoundContent: VuePropTypes.any,
      transitionName: VuePropTypes.string,
      choiceTransitionName: VuePropTypes.string,
      showSearch: VuePropTypes.bool,
      allowClear: VuePropTypes.bool,
      disabled: VuePropTypes.bool,
      tabIndex: VuePropTypes.number,
      placeholder: VuePropTypes.any,
      defaultActiveFirstOption: VuePropTypes.bool,
      dropdownClassName: VuePropTypes.string,
      dropdownStyle: VuePropTypes.any,
      dropdownMenuStyle: VuePropTypes.any,
      dropdownMatchSelectWidth: VuePropTypes.bool,
      // onSearch: (value: string) => any,
      filterOption: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.func]),
      autoFocus: VuePropTypes.bool,
      backfill: VuePropTypes.bool,
      showArrow: VuePropTypes.bool,
      getPopupContainer: VuePropTypes.func,
      open: VuePropTypes.bool,
      defaultOpen: VuePropTypes.bool,
      autoClearSearchValue: VuePropTypes.bool,
      dropdownRender: VuePropTypes.func,
      loading: VuePropTypes.bool
    };
  };
  var Value = VuePropTypes.shape({
    key: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number])
  }).loose;

  var SelectValue = VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number, VuePropTypes.arrayOf(VuePropTypes.oneOfType([Value, VuePropTypes.string, VuePropTypes.number])), Value]);

  var SelectProps = _extends$1({}, AbstractSelectProps(), {
    value: SelectValue,
    defaultValue: SelectValue,
    // mode: PropTypes.oneOf(['default', 'multiple', 'tags', 'combobox']),
    mode: VuePropTypes.string,
    optionLabelProp: VuePropTypes.string,
    firstActiveValue: VuePropTypes.oneOfType([String, VuePropTypes.arrayOf(String)]),
    maxTagCount: VuePropTypes.number,
    maxTagPlaceholder: VuePropTypes.any,
    maxTagTextLength: VuePropTypes.number,
    dropdownMatchSelectWidth: VuePropTypes.bool,
    optionFilterProp: VuePropTypes.string,
    labelInValue: VuePropTypes.boolean,
    getPopupContainer: VuePropTypes.func,
    tokenSeparators: VuePropTypes.arrayOf(VuePropTypes.string),
    getInputElement: VuePropTypes.func,
    options: VuePropTypes.array,
    suffixIcon: VuePropTypes.any,
    removeIcon: VuePropTypes.any,
    clearIcon: VuePropTypes.any,
    menuItemSelectedIcon: VuePropTypes.any
  });

  var SelectPropTypes$1 = {
    prefixCls: VuePropTypes.string,
    size: VuePropTypes.oneOf(['default', 'large', 'small']),
    // combobox: PropTypes.bool,
    notFoundContent: VuePropTypes.any,
    showSearch: VuePropTypes.bool,
    optionLabelProp: VuePropTypes.string,
    transitionName: VuePropTypes.string,
    choiceTransitionName: VuePropTypes.string
  };
  var SECRET_COMBOBOX_MODE_DO_NOT_USE = 'SECRET_COMBOBOX_MODE_DO_NOT_USE';
  var Select$1 = {
    SECRET_COMBOBOX_MODE_DO_NOT_USE: SECRET_COMBOBOX_MODE_DO_NOT_USE,
    Option: _extends$1({}, Option, { name: 'ASelectOption' }),
    OptGroup: _extends$1({}, OptGroup, { name: 'ASelectOptGroup' }),
    name: 'ASelect',
    props: _extends$1({}, SelectProps, {
      showSearch: VuePropTypes.bool.def(false),
      transitionName: VuePropTypes.string.def('slide-up'),
      choiceTransitionName: VuePropTypes.string.def('zoom')
    }),
    propTypes: SelectPropTypes$1,
    model: {
      prop: 'value',
      event: 'change'
    },
    provide: function provide() {
      return {
        savePopupRef: this.savePopupRef
      };
    },

    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    created: function created() {
      warning$1(this.$props.mode !== 'combobox', 'Select', 'The combobox mode of Select is deprecated,' + 'it will be removed in next major version,' + 'please use AutoComplete instead');
    },

    methods: {
      getNotFoundContent: function getNotFoundContent(renderEmpty) {
        var h = this.$createElement;
        var notFoundContent = getComponentFromProp(this, 'notFoundContent');
        if (notFoundContent !== undefined) {
          return notFoundContent;
        }
        if (this.isCombobox()) {
          return null;
        }
        return renderEmpty(h, 'Select');
      },
      savePopupRef: function savePopupRef(ref) {
        this.popupRef = ref;
      },
      focus: function focus() {
        this.$refs.vcSelect.focus();
      },
      blur: function blur() {
        this.$refs.vcSelect.blur();
      },
      isCombobox: function isCombobox() {
        var mode = this.mode;

        return mode === 'combobox' || mode === SECRET_COMBOBOX_MODE_DO_NOT_USE;
      },
      renderSuffixIcon: function renderSuffixIcon(prefixCls) {
        var h = this.$createElement;
        var loading = this.$props.loading;

        var suffixIcon = getComponentFromProp(this, 'suffixIcon');
        suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
        if (suffixIcon) {
          return isValidElement(suffixIcon) ? cloneElement(suffixIcon, { 'class': prefixCls + '-arrow-icon' }) : suffixIcon;
        }
        if (loading) {
          return h(Icon$1, {
            attrs: { type: 'loading' }
          });
        }
        return h(Icon$1, {
          attrs: { type: 'down' },
          'class': prefixCls + '-arrow-icon' });
      }
    },
    render: function render() {
      var _cls;

      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          customizePrefixCls = _getOptionProps.prefixCls,
          size = _getOptionProps.size,
          mode = _getOptionProps.mode,
          options = _getOptionProps.options,
          getPopupContainer = _getOptionProps.getPopupContainer,
          showArrow = _getOptionProps.showArrow,
          restProps = _objectWithoutProperties(_getOptionProps, ['prefixCls', 'size', 'mode', 'options', 'getPopupContainer', 'showArrow']);

      var getPrefixCls = this.configProvider.getPrefixCls;
      var renderEmpty = this.configProvider.renderEmpty;
      var prefixCls = getPrefixCls('select', customizePrefixCls);

      var getContextPopupContainer = this.configProvider.getPopupContainer;

      var removeIcon = getComponentFromProp(this, 'removeIcon');
      removeIcon = Array.isArray(removeIcon) ? removeIcon[0] : removeIcon;
      var clearIcon = getComponentFromProp(this, 'clearIcon');
      clearIcon = Array.isArray(clearIcon) ? clearIcon[0] : clearIcon;
      var menuItemSelectedIcon = getComponentFromProp(this, 'menuItemSelectedIcon');
      menuItemSelectedIcon = Array.isArray(menuItemSelectedIcon) ? menuItemSelectedIcon[0] : menuItemSelectedIcon;
      var rest = omit(restProps, ['inputIcon', 'removeIcon', 'clearIcon', 'suffixIcon', 'menuItemSelectedIcon']);

      var cls = (_cls = {}, _defineProperty(_cls, prefixCls + '-lg', size === 'large'), _defineProperty(_cls, prefixCls + '-sm', size === 'small'), _defineProperty(_cls, prefixCls + '-show-arrow', showArrow), _cls);

      var optionLabelProp = this.$props.optionLabelProp;

      if (this.isCombobox()) {
        // children 带 dom 结构时，无法填入输入框
        optionLabelProp = optionLabelProp || 'value';
      }

      var modeConfig = {
        multiple: mode === 'multiple',
        tags: mode === 'tags',
        combobox: this.isCombobox()
      };
      var finalRemoveIcon = removeIcon && (isValidElement(removeIcon) ? cloneElement(removeIcon, { 'class': prefixCls + '-remove-icon' }) : removeIcon) || h(Icon$1, {
        attrs: { type: 'close' },
        'class': prefixCls + '-remove-icon' });

      var finalClearIcon = clearIcon && (isValidElement(clearIcon) ? cloneElement(clearIcon, { 'class': prefixCls + '-clear-icon' }) : clearIcon) || h(Icon$1, {
        attrs: { type: 'close-circle', theme: 'filled' },
        'class': prefixCls + '-clear-icon' });

      var finalMenuItemSelectedIcon = menuItemSelectedIcon && (isValidElement(menuItemSelectedIcon) ? cloneElement(menuItemSelectedIcon, { 'class': prefixCls + '-selected-icon' }) : menuItemSelectedIcon) || h(Icon$1, {
        attrs: { type: 'check' },
        'class': prefixCls + '-selected-icon' });

      var selectProps = {
        props: _extends$1({
          inputIcon: this.renderSuffixIcon(prefixCls),
          removeIcon: finalRemoveIcon,
          clearIcon: finalClearIcon,
          menuItemSelectedIcon: finalMenuItemSelectedIcon,
          showArrow: showArrow
        }, rest, modeConfig, {
          prefixCls: prefixCls,
          optionLabelProp: optionLabelProp || 'children',
          notFoundContent: this.getNotFoundContent(renderEmpty),
          maxTagPlaceholder: getComponentFromProp(this, 'maxTagPlaceholder'),
          placeholder: getComponentFromProp(this, 'placeholder'),
          children: options ? options.map(function (option) {
            var key = option.key,
                _option$label = option.label,
                label = _option$label === undefined ? option.title : _option$label,
                on = option.on,
                cls = option['class'],
                style = option.style,
                restOption = _objectWithoutProperties(option, ['key', 'label', 'on', 'class', 'style']);

            return h(
              Option,
              babelHelperVueJsxMergeProps([{ key: key }, { props: restOption, on: on, 'class': cls, style: style }]),
              [label]
            );
          }) : filterEmpty(this.$slots['default']),
          __propsSymbol__: Symbol(),
          dropdownRender: getComponentFromProp(this, 'dropdownRender', {}, false),
          getPopupContainer: getPopupContainer || getContextPopupContainer
        }),
        on: getListeners(this),
        'class': cls,
        ref: 'vcSelect'
      };
      return h(Select, selectProps);
    }
  };

  /* istanbul ignore next */
  Select$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Select$1.name, Select$1);
    Vue.component(Select$1.Option.name, Select$1.Option);
    Vue.component(Select$1.OptGroup.name, Select$1.OptGroup);
  };

  function hasPrefixSuffix(instance) {
    return !!(getComponentFromProp(instance, 'prefix') || getComponentFromProp(instance, 'suffix') || instance.$props.allowClear);
  }

  var ClearableInputType = ['text', 'input'];

  var ClearableLabeledInput = {
    props: {
      prefixCls: VuePropTypes.string,
      inputType: VuePropTypes.oneOf(ClearableInputType),
      value: VuePropTypes.any,
      defaultValue: VuePropTypes.any,
      allowClear: VuePropTypes.bool,
      element: VuePropTypes.any,
      handleReset: VuePropTypes.func,
      disabled: VuePropTypes.bool,
      size: VuePropTypes.oneOf(['small', 'large', 'default']),
      suffix: VuePropTypes.any,
      prefix: VuePropTypes.any,
      addonBefore: VuePropTypes.any,
      addonAfter: VuePropTypes.any,
      className: VuePropTypes.string,
      readOnly: VuePropTypes.bool
    },
    methods: {
      renderClearIcon: function renderClearIcon(prefixCls) {
        var h = this.$createElement;
        var _$props = this.$props,
            allowClear = _$props.allowClear,
            value = _$props.value,
            disabled = _$props.disabled,
            readOnly = _$props.readOnly,
            inputType = _$props.inputType,
            handleReset = _$props.handleReset;

        if (!allowClear || disabled || readOnly || value === undefined || value === null || value === '') {
          return null;
        }
        var className = inputType === ClearableInputType[0] ? prefixCls + '-textarea-clear-icon' : prefixCls + '-clear-icon';
        return h(Icon$1, {
          attrs: {
            type: 'close-circle',
            theme: 'filled',

            role: 'button'
          },
          on: {
            'click': handleReset
          },

          'class': className });
      },
      renderSuffix: function renderSuffix(prefixCls) {
        var h = this.$createElement;
        var _$props2 = this.$props,
            suffix = _$props2.suffix,
            allowClear = _$props2.allowClear;

        if (suffix || allowClear) {
          return h(
            'span',
            { 'class': prefixCls + '-suffix' },
            [this.renderClearIcon(prefixCls), suffix]
          );
        }
        return null;
      },
      renderLabeledIcon: function renderLabeledIcon(prefixCls, element) {
        var _classNames;

        var h = this.$createElement;

        var props = this.$props;
        var suffix = this.renderSuffix(prefixCls);
        if (!hasPrefixSuffix(this)) {
          return cloneElement(element, {
            props: { value: props.value }
          });
        }

        var prefix = props.prefix ? h(
          'span',
          { 'class': prefixCls + '-prefix' },
          [props.prefix]
        ) : null;

        var affixWrapperCls = classnames(props.className, prefixCls + '-affix-wrapper', (_classNames = {}, _defineProperty(_classNames, prefixCls + '-affix-wrapper-sm', props.size === 'small'), _defineProperty(_classNames, prefixCls + '-affix-wrapper-lg', props.size === 'large'), _defineProperty(_classNames, prefixCls + '-affix-wrapper-input-with-clear-btn', props.suffix && props.allowClear && this.$props.value), _classNames));

        return h(
          'span',
          { 'class': affixWrapperCls, style: props.style },
          [prefix, cloneElement(element, {
            style: null,
            props: { value: props.value },
            'class': getInputClassName(prefixCls, props.size, props.disabled)
          }), suffix]
        );
      },
      renderInputWithLabel: function renderInputWithLabel(prefixCls, labeledElement) {
        var _classNames3;

        var h = this.$createElement;
        var _$props3 = this.$props,
            addonBefore = _$props3.addonBefore,
            addonAfter = _$props3.addonAfter,
            style = _$props3.style,
            size = _$props3.size,
            className = _$props3.className;
        // Not wrap when there is not addons

        if (!addonBefore && !addonAfter) {
          return labeledElement;
        }

        var wrapperClassName = prefixCls + '-group';
        var addonClassName = wrapperClassName + '-addon';
        var addonBeforeNode = addonBefore ? h(
          'span',
          { 'class': addonClassName },
          [addonBefore]
        ) : null;
        var addonAfterNode = addonAfter ? h(
          'span',
          { 'class': addonClassName },
          [addonAfter]
        ) : null;

        var mergedWrapperClassName = classnames(prefixCls + '-wrapper', _defineProperty({}, wrapperClassName, addonBefore || addonAfter));

        var mergedGroupClassName = classnames(className, prefixCls + '-group-wrapper', (_classNames3 = {}, _defineProperty(_classNames3, prefixCls + '-group-wrapper-sm', size === 'small'), _defineProperty(_classNames3, prefixCls + '-group-wrapper-lg', size === 'large'), _classNames3));

        // Need another wrapper for changing display:table to display:inline-block
        // and put style prop in wrapper
        return h(
          'span',
          { 'class': mergedGroupClassName, style: style },
          [h(
            'span',
            { 'class': mergedWrapperClassName },
            [addonBeforeNode, cloneElement(labeledElement, { style: null }), addonAfterNode]
          )]
        );
      },
      renderTextAreaWithClearIcon: function renderTextAreaWithClearIcon(prefixCls, element) {
        var h = this.$createElement;
        var _$props4 = this.$props,
            value = _$props4.value,
            allowClear = _$props4.allowClear,
            className = _$props4.className,
            style = _$props4.style;

        if (!allowClear) {
          return cloneElement(element, {
            props: { value: value }
          });
        }
        var affixWrapperCls = classnames(className, prefixCls + '-affix-wrapper', prefixCls + '-affix-wrapper-textarea-with-clear-btn');
        return h(
          'span',
          { 'class': affixWrapperCls, style: style },
          [cloneElement(element, {
            style: null,
            props: { value: value }
          }), this.renderClearIcon(prefixCls)]
        );
      },
      renderClearableLabeledInput: function renderClearableLabeledInput() {
        var _$props5 = this.$props,
            prefixCls = _$props5.prefixCls,
            inputType = _$props5.inputType,
            element = _$props5.element;

        if (inputType === ClearableInputType[0]) {
          return this.renderTextAreaWithClearIcon(prefixCls, element);
        }
        return this.renderInputWithLabel(prefixCls, this.renderLabeledIcon(prefixCls, element));
      }
    },
    render: function render() {
      return this.renderClearableLabeledInput();
    }
  };

  // Thanks to https://github.com/andreypopp/react-textarea-autosize/

  /**
   * calculateNodeHeight(uiTextNode, useCache = false)
   */

  var HIDDEN_TEXTAREA_STYLE = '\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n';

  var SIZING_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'font-variant', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];

  var computedStyleCache = {};
  var hiddenTextarea = void 0;

  function calculateNodeStyling(node) {
    var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var nodeRef = node.getAttribute('id') || node.getAttribute('data-reactid') || node.getAttribute('name');

    if (useCache && computedStyleCache[nodeRef]) {
      return computedStyleCache[nodeRef];
    }

    var style = window.getComputedStyle(node);

    var boxSizing = style.getPropertyValue('box-sizing') || style.getPropertyValue('-moz-box-sizing') || style.getPropertyValue('-webkit-box-sizing');

    var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));

    var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));

    var sizingStyle = SIZING_STYLE.map(function (name) {
      return name + ':' + style.getPropertyValue(name);
    }).join(';');

    var nodeInfo = {
      sizingStyle: sizingStyle,
      paddingSize: paddingSize,
      borderSize: borderSize,
      boxSizing: boxSizing
    };

    if (useCache && nodeRef) {
      computedStyleCache[nodeRef] = nodeInfo;
    }

    return nodeInfo;
  }

  function calculateNodeHeight(uiTextNode) {
    var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    if (!hiddenTextarea) {
      hiddenTextarea = document.createElement('textarea');
      document.body.appendChild(hiddenTextarea);
    }

    // Fix wrap="off" issue
    // https://github.com/ant-design/ant-design/issues/6577
    if (uiTextNode.getAttribute('wrap')) {
      hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));
    } else {
      hiddenTextarea.removeAttribute('wrap');
    }

    // Copy all CSS properties that have an impact on the height of the content in
    // the textbox

    var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache),
        paddingSize = _calculateNodeStyling.paddingSize,
        borderSize = _calculateNodeStyling.borderSize,
        boxSizing = _calculateNodeStyling.boxSizing,
        sizingStyle = _calculateNodeStyling.sizingStyle;

    // Need to have the overflow attribute to hide the scrollbar otherwise
    // text-lines will not calculated properly as the shadow will technically be
    // narrower for content


    hiddenTextarea.setAttribute('style', sizingStyle + ';' + HIDDEN_TEXTAREA_STYLE);
    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';

    var minHeight = Number.MIN_SAFE_INTEGER;
    var maxHeight = Number.MAX_SAFE_INTEGER;
    var height = hiddenTextarea.scrollHeight;
    var overflowY = void 0;

    if (boxSizing === 'border-box') {
      // border-box: add border, since height = content + padding + border
      height += borderSize;
    } else if (boxSizing === 'content-box') {
      // remove padding, since height = content
      height -= paddingSize;
    }

    if (minRows !== null || maxRows !== null) {
      // measure height of a textarea with a single row
      hiddenTextarea.value = ' ';
      var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
      if (minRows !== null) {
        minHeight = singleRowHeight * minRows;
        if (boxSizing === 'border-box') {
          minHeight = minHeight + paddingSize + borderSize;
        }
        height = Math.max(minHeight, height);
      }
      if (maxRows !== null) {
        maxHeight = singleRowHeight * maxRows;
        if (boxSizing === 'border-box') {
          maxHeight = maxHeight + paddingSize + borderSize;
        }
        overflowY = height > maxHeight ? '' : 'hidden';
        height = Math.min(maxHeight, height);
      }
    }
    return {
      height: height + 'px',
      minHeight: minHeight + 'px',
      maxHeight: maxHeight + 'px',
      overflowY: overflowY
    };
  }

  var id$2 = 0;
  var ids = {};

  // Support call raf with delay specified frame
  function wrapperRaf(callback) {
    var delayFrames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    var myId = id$2++;
    var restFrames = delayFrames;

    function internalCallback() {
      restFrames -= 1;

      if (restFrames <= 0) {
        callback();
        delete ids[myId];
      } else {
        ids[myId] = raf_1(internalCallback);
      }
    }

    ids[myId] = raf_1(internalCallback);

    return myId;
  }

  wrapperRaf.cancel = function (pid) {
    if (pid === undefined) return;
    raf_1.cancel(ids[pid]);
    delete ids[pid];
  };
  wrapperRaf.ids = ids; // export this for test usage

  var inputProps = {
    prefixCls: VuePropTypes.string,
    inputPrefixCls: VuePropTypes.string,
    defaultValue: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
    value: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
    placeholder: [String, Number],
    type: {
      'default': 'text',
      type: String
    },
    name: String,
    size: VuePropTypes.oneOf(['small', 'large', 'default']),
    disabled: VuePropTypes.bool,
    readOnly: VuePropTypes.bool,
    addonBefore: VuePropTypes.any,
    addonAfter: VuePropTypes.any,
    // onPressEnter?: React.FormEventHandler<any>;
    // onKeyDown?: React.FormEventHandler<any>;
    // onChange?: React.ChangeEventHandler<HTMLInputElement>;
    // onClick?: React.FormEventHandler<any>;
    // onFocus?: React.FormEventHandler<any>;
    // onBlur?: React.FormEventHandler<any>;
    prefix: VuePropTypes.any,
    suffix: VuePropTypes.any,
    // spellCheck: Boolean,
    autoFocus: Boolean,
    allowClear: Boolean,
    lazy: {
      'default': true,
      type: Boolean
    },
    maxLength: VuePropTypes.number,
    loading: VuePropTypes.bool,
    className: VuePropTypes.string
  };

  var RESIZE_STATUS_NONE = 0;
  var RESIZE_STATUS_RESIZING = 1;
  var RESIZE_STATUS_RESIZED = 2;

  var TextAreaProps = _extends$1({}, inputProps, {
    autosize: VuePropTypes.oneOfType([Object, Boolean]),
    autoSize: VuePropTypes.oneOfType([Object, Boolean])
  });
  var ResizableTextArea = {
    name: 'ResizableTextArea',
    props: TextAreaProps,
    data: function data() {
      return {
        textareaStyles: {},
        resizeStatus: RESIZE_STATUS_NONE
      };
    },

    mixins: [BaseMixin],
    mounted: function mounted() {
      this.resizeTextarea();
    },
    beforeDestroy: function beforeDestroy() {
      wrapperRaf.cancel(this.nextFrameActionId);
      wrapperRaf.cancel(this.resizeFrameId);
    },

    watch: {
      value: function value() {
        var _this = this;

        this.$nextTick(function () {
          _this.resizeTextarea();
        });
      }
    },
    methods: {
      handleResize: function handleResize(size) {
        var resizeStatus = this.$data.resizeStatus;
        var autoSize = this.$props.autoSize;


        if (resizeStatus !== RESIZE_STATUS_NONE) {
          return;
        }
        this.$emit('resize', size);
        if (autoSize) {
          this.resizeOnNextFrame();
        }
      },
      resizeOnNextFrame: function resizeOnNextFrame() {
        wrapperRaf.cancel(this.nextFrameActionId);
        this.nextFrameActionId = wrapperRaf(this.resizeTextarea);
      },
      resizeTextarea: function resizeTextarea() {
        var _this2 = this;

        var autoSize = this.$props.autoSize || this.$props.autosize;
        if (!autoSize || !this.$refs.textArea) {
          return;
        }
        var minRows = autoSize.minRows,
            maxRows = autoSize.maxRows;

        var textareaStyles = calculateNodeHeight(this.$refs.textArea, false, minRows, maxRows);
        this.setState({ textareaStyles: textareaStyles, resizeStatus: RESIZE_STATUS_RESIZING }, function () {
          wrapperRaf.cancel(_this2.resizeFrameId);
          _this2.resizeFrameId = wrapperRaf(function () {
            _this2.setState({ resizeStatus: RESIZE_STATUS_RESIZED }, function () {
              _this2.resizeFrameId = wrapperRaf(function () {
                _this2.setState({ resizeStatus: RESIZE_STATUS_NONE });
                _this2.fixFirefoxAutoScroll();
              });
            });
          });
        });
      },

      // https://github.com/ant-design/ant-design/issues/21870
      fixFirefoxAutoScroll: function fixFirefoxAutoScroll() {
        try {
          if (document.activeElement === this.$refs.textArea) {
            var currentStart = this.$refs.textArea.selectionStart;
            var currentEnd = this.$refs.textArea.selectionEnd;
            this.$refs.textArea.setSelectionRange(currentStart, currentEnd);
          }
        } catch (e) {
          // Fix error in Chrome:
          // Failed to read the 'selectionStart' property from 'HTMLInputElement'
          // http://stackoverflow.com/q/21177489/3040605
        }
      },
      renderTextArea: function renderTextArea() {
        var h = this.$createElement;

        var props = getOptionProps(this);
        var prefixCls = props.prefixCls,
            autoSize = props.autoSize,
            autosize = props.autosize,
            disabled = props.disabled;
        var _$data = this.$data,
            textareaStyles = _$data.textareaStyles,
            resizeStatus = _$data.resizeStatus;

        warning$1(autosize === undefined, 'Input.TextArea', 'autosize is deprecated, please use autoSize instead.');
        var otherProps = omit(props, ['prefixCls', 'autoSize', 'autosize', 'defaultValue', 'allowClear', 'type', 'lazy', 'value']);
        var cls = classnames(prefixCls, _defineProperty({}, prefixCls + '-disabled', disabled));
        var domProps = {};
        // Fix https://github.com/ant-design/ant-design/issues/6776
        // Make sure it could be reset when using form.getFieldDecorator
        if ('value' in props) {
          domProps.value = props.value || '';
        }
        var style = _extends$1({}, textareaStyles, resizeStatus === RESIZE_STATUS_RESIZING ? { overflowX: 'hidden', overflowY: 'hidden' } : null);
        var textareaProps = {
          attrs: otherProps,
          domProps: domProps,
          style: style,
          'class': cls,
          on: omit(getListeners(this), 'pressEnter'),
          directives: [{
            name: 'ant-input'
          }]
        };
        return h(
          VueResizeObserver,
          {
            on: {
              'resize': this.handleResize
            },
            attrs: { disabled: !(autoSize || autosize) }
          },
          [h('textarea', babelHelperVueJsxMergeProps([textareaProps, { ref: 'textArea' }]))]
        );
      }
    },

    render: function render() {
      return this.renderTextArea();
    }
  };

  var TextAreaProps$1 = _extends$1({}, inputProps, {
    autosize: VuePropTypes.oneOfType([Object, Boolean]),
    autoSize: VuePropTypes.oneOfType([Object, Boolean])
  });

  var TextArea = {
    name: 'ATextarea',
    inheritAttrs: false,
    model: {
      prop: 'value',
      event: 'change.value'
    },
    props: _extends$1({}, TextAreaProps$1),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      var value = typeof this.value === 'undefined' ? this.defaultValue : this.value;
      return {
        stateValue: typeof value === 'undefined' ? '' : value
      };
    },

    computed: {},
    watch: {
      value: function value(val) {
        this.stateValue = val;
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        if (_this.autoFocus) {
          _this.focus();
        }
      });
    },

    methods: {
      setValue: function setValue(value, callback) {
        if (!hasProp(this, 'value')) {
          this.stateValue = value;
          this.$nextTick(function () {
            callback && callback();
          });
        }
      },
      handleKeyDown: function handleKeyDown(e) {
        if (e.keyCode === 13) {
          this.$emit('pressEnter', e);
        }
        this.$emit('keydown', e);
      },
      onChange: function onChange(e) {
        this.$emit('change.value', e.target.value);
        this.$emit('change', e);
        this.$emit('input', e);
      },
      handleChange: function handleChange(e) {
        var _this2 = this;

        var _e$target = e.target,
            value = _e$target.value,
            composing = _e$target.composing;

        if ((e.isComposing || composing) && this.lazy || this.stateValue === value) return;

        this.setValue(e.target.value, function () {
          _this2.$refs.resizableTextArea.resizeTextarea();
        });
        resolveOnChange(this.$refs.resizableTextArea.$refs.textArea, e, this.onChange);
      },
      focus: function focus() {
        this.$refs.resizableTextArea.$refs.textArea.focus();
      },
      blur: function blur() {
        this.$refs.resizableTextArea.$refs.textArea.blur();
      },
      handleReset: function handleReset(e) {
        var _this3 = this;

        this.setValue('', function () {
          _this3.$refs.resizableTextArea.renderTextArea();
          _this3.focus();
        });
        resolveOnChange(this.$refs.resizableTextArea.$refs.textArea, e, this.onChange);
      },
      renderTextArea: function renderTextArea(prefixCls) {
        var h = this.$createElement;

        var props = getOptionProps(this);
        var resizeProps = {
          props: _extends$1({}, props, {
            prefixCls: prefixCls
          }),
          on: _extends$1({}, getListeners(this), {
            input: this.handleChange,
            keydown: this.handleKeyDown
          }),
          attrs: this.$attrs
        };
        return h(ResizableTextArea, babelHelperVueJsxMergeProps([resizeProps, { ref: 'resizableTextArea' }]));
      }
    },
    render: function render() {
      var h = arguments[0];
      var stateValue = this.stateValue,
          customizePrefixCls = this.prefixCls;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('input', customizePrefixCls);

      var props = {
        props: _extends$1({}, getOptionProps(this), {
          prefixCls: prefixCls,
          inputType: 'text',
          value: fixControlledValue(stateValue),
          element: this.renderTextArea(prefixCls),
          handleReset: this.handleReset
        }),
        on: getListeners(this)
      };
      return h(ClearableLabeledInput, props);
    }
  };

  function noop$6() {}

  function fixControlledValue(value) {
    if (typeof value === 'undefined' || value === null) {
      return '';
    }
    return value;
  }

  function resolveOnChange(target, e, onChange) {
    if (onChange) {
      var event = e;
      if (e.type === 'click') {
        // click clear icon
        //event = Object.create(e);
        Object.defineProperty(event, 'target', {
          writable: true
        });
        Object.defineProperty(event, 'currentTarget', {
          writable: true
        });
        event.target = target;
        event.currentTarget = target;
        var originalInputValue = target.value;
        // change target ref value cause e.target.value should be '' when clear input
        target.value = '';
        onChange(event);
        // reset target ref value
        target.value = originalInputValue;
        return;
      }
      onChange(event);
    }
  }

  function getInputClassName(prefixCls, size, disabled) {
    var _classNames;

    return classnames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-sm', size === 'small'), _defineProperty(_classNames, prefixCls + '-lg', size === 'large'), _defineProperty(_classNames, prefixCls + '-disabled', disabled), _classNames));
  }

  var Input = {
    name: 'AInput',
    inheritAttrs: false,
    model: {
      prop: 'value',
      event: 'change.value'
    },
    props: _extends$1({}, inputProps),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      var props = this.$props;
      var value = typeof props.value === 'undefined' ? props.defaultValue : props.value;
      return {
        stateValue: typeof value === 'undefined' ? '' : value
      };
    },

    watch: {
      value: function value(val) {
        this.stateValue = val;
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        if (_this.autoFocus) {
          _this.focus();
        }
        _this.clearPasswordValueAttribute();
      });
    },
    beforeDestroy: function beforeDestroy() {
      if (this.removePasswordTimeout) {
        clearTimeout(this.removePasswordTimeout);
      }
    },

    methods: {
      focus: function focus() {
        this.$refs.input.focus();
      },
      blur: function blur() {
        this.$refs.input.blur();
      },
      select: function select() {
        this.$refs.input.select();
      },
      setValue: function setValue(value, callback) {
        if (this.stateValue === value) {
          return;
        }
        if (!hasProp(this, 'value')) {
          this.stateValue = value;
          this.$nextTick(function () {
            callback && callback();
          });
        }
      },
      onChange: function onChange(e) {
        this.$emit('change.value', e.target.value);
        this.$emit('change', e);
        this.$emit('input', e);
      },
      handleReset: function handleReset(e) {
        var _this2 = this;

        this.setValue('', function () {
          _this2.focus();
        });
        resolveOnChange(this.$refs.input, e, this.onChange);
      },
      renderInput: function renderInput(prefixCls) {
        var h = this.$createElement;

        var otherProps = omit(this.$props, ['prefixCls', 'addonBefore', 'addonAfter', 'prefix', 'suffix', 'allowClear', 'value', 'defaultValue', 'lazy', 'size', 'inputType', 'className']);
        var stateValue = this.stateValue,
            handleKeyDown = this.handleKeyDown,
            handleChange = this.handleChange,
            size = this.size,
            disabled = this.disabled;

        var inputProps = {
          directives: [{ name: 'ant-input' }],
          domProps: {
            value: fixControlledValue(stateValue)
          },
          attrs: _extends$1({}, otherProps, this.$attrs),
          on: _extends$1({}, getListeners(this), {
            keydown: handleKeyDown,
            input: handleChange,
            change: noop$6
          }),
          'class': getInputClassName(prefixCls, size, disabled),
          ref: 'input',
          key: 'ant-input'
        };
        return h('input', inputProps);
      },
      clearPasswordValueAttribute: function clearPasswordValueAttribute() {
        var _this3 = this;

        // https://github.com/ant-design/ant-design/issues/20541
        this.removePasswordTimeout = setTimeout(function () {
          if (_this3.$refs.input && _this3.$refs.input.getAttribute && _this3.$refs.input.getAttribute('type') === 'password' && _this3.$refs.input.hasAttribute('value')) {
            _this3.$refs.input.removeAttribute('value');
          }
        });
      },
      handleChange: function handleChange(e) {
        var _e$target = e.target,
            value = _e$target.value,
            composing = _e$target.composing;
        // https://github.com/vueComponent/ant-design-vue/issues/2203

        if ((e.isComposing || composing) && this.lazy || this.stateValue === value) return;
        this.setValue(value, this.clearPasswordValueAttribute);
        resolveOnChange(this.$refs.input, e, this.onChange);
      },
      handleKeyDown: function handleKeyDown(e) {
        if (e.keyCode === 13) {
          this.$emit('pressEnter', e);
        }
        this.$emit('keydown', e);
      }
    },
    render: function render() {
      var h = arguments[0];

      if (this.$props.type === 'textarea') {
        var textareaProps = {
          props: this.$props,
          attrs: this.$attrs,
          on: _extends$1({}, getListeners(this), {
            input: this.handleChange,
            keydown: this.handleKeyDown,
            change: noop$6
          })
        };
        return h(TextArea, babelHelperVueJsxMergeProps([textareaProps, { ref: 'input' }]));
      }
      var customizePrefixCls = this.$props.prefixCls;
      var stateValue = this.$data.stateValue;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('input', customizePrefixCls);
      var addonAfter = getComponentFromProp(this, 'addonAfter');
      var addonBefore = getComponentFromProp(this, 'addonBefore');
      var suffix = getComponentFromProp(this, 'suffix');
      var prefix = getComponentFromProp(this, 'prefix');
      var props = {
        props: _extends$1({}, getOptionProps(this), {
          prefixCls: prefixCls,
          inputType: 'input',
          value: fixControlledValue(stateValue),
          element: this.renderInput(prefixCls),
          handleReset: this.handleReset,
          addonAfter: addonAfter,
          addonBefore: addonBefore,
          suffix: suffix,
          prefix: prefix
        }),
        on: getListeners(this)
      };
      return h(ClearableLabeledInput, props);
    }
  };

  var Group = {
    name: 'AInputGroup',
    props: {
      prefixCls: VuePropTypes.string,
      size: {
        validator: function validator(value) {
          return ['small', 'large', 'default'].includes(value);
        }
      },
      compact: Boolean
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    computed: {
      classes: function classes() {
        var _ref;

        var customizePrefixCls = this.prefixCls,
            size = this.size,
            _compact = this.compact,
            compact = _compact === undefined ? false : _compact;

        var getPrefixCls = this.configProvider.getPrefixCls;
        var prefixCls = getPrefixCls('input-group', customizePrefixCls);

        return _ref = {}, _defineProperty(_ref, '' + prefixCls, true), _defineProperty(_ref, prefixCls + '-lg', size === 'large'), _defineProperty(_ref, prefixCls + '-sm', size === 'small'), _defineProperty(_ref, prefixCls + '-compact', compact), _ref;
      }
    },
    methods: {},
    render: function render() {
      var h = arguments[0];

      return h(
        'span',
        babelHelperVueJsxMergeProps([{ 'class': this.classes }, { on: getListeners(this) }]),
        [filterEmpty(this.$slots['default'])]
      );
    }
  };

  var isMobile_1 = isMobile$1;
  var isMobile_2 = isMobile$1;
  var _default = isMobile$1;

  var mobileRE = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series[46]0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i;

  var tabletRE = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series[46]0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i;

  function isMobile$1 (opts) {
    if (!opts) opts = {};
    var ua = opts.ua;
    if (!ua && typeof navigator !== 'undefined') ua = navigator.userAgent;
    if (ua && ua.headers && typeof ua.headers['user-agent'] === 'string') {
      ua = ua.headers['user-agent'];
    }
    if (typeof ua !== 'string') return false

    var result = opts.tablet ? tabletRE.test(ua) : mobileRE.test(ua);

    if (
      !result &&
      opts.tablet &&
      opts.featureDetect &&
      navigator &&
      navigator.maxTouchPoints > 1 &&
      ua.indexOf('Macintosh') !== -1 &&
      ua.indexOf('Safari') !== -1
    ) {
      result = true;
    }

    return result
  }
  isMobile_1.isMobile = isMobile_2;
  isMobile_1.default = _default;

  var styleForPesudo = void 0;

  // Where el is the DOM element you'd like to test for visibility
  function isHidden$1(element) {
    if (process.env.NODE_ENV === 'test') {
      return false;
    }
    return !element || element.offsetParent === null;
  }
  function isNotGrey(color) {
    // eslint-disable-next-line no-useless-escape
    var match = (color || '').match(/rgba?\((\d*), (\d*), (\d*)(, [\.\d]*)?\)/);
    if (match && match[1] && match[2] && match[3]) {
      return !(match[1] === match[2] && match[2] === match[3]);
    }
    return true;
  }
  var Wave = {
    name: 'Wave',
    props: ['insertExtraNode'],
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        var node = _this.$el;
        if (node.nodeType !== 1) {
          return;
        }
        _this.instance = _this.bindAnimationEvent(node);
      });
    },

    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    beforeDestroy: function beforeDestroy() {
      if (this.instance) {
        this.instance.cancel();
      }
      if (this.clickWaveTimeoutId) {
        clearTimeout(this.clickWaveTimeoutId);
      }
      this.destroy = true;
    },

    methods: {
      onClick: function onClick(node, waveColor) {
        if (!node || isHidden$1(node) || node.className.indexOf('-leave') >= 0) {
          return;
        }
        var insertExtraNode = this.$props.insertExtraNode;

        this.extraNode = document.createElement('div');
        var extraNode = this.extraNode;
        extraNode.className = 'ant-click-animating-node';
        var attributeName = this.getAttributeName();
        node.removeAttribute(attributeName);
        node.setAttribute(attributeName, 'true');
        // Not white or transparent or grey
        styleForPesudo = styleForPesudo || document.createElement('style');
        if (waveColor && waveColor !== '#ffffff' && waveColor !== 'rgb(255, 255, 255)' && isNotGrey(waveColor) && !/rgba\(\d*, \d*, \d*, 0\)/.test(waveColor) && // any transparent rgba color
        waveColor !== 'transparent') {
          // Add nonce if CSP exist
          if (this.csp && this.csp.nonce) {
            styleForPesudo.nonce = this.csp.nonce;
          }
          extraNode.style.borderColor = waveColor;
          styleForPesudo.innerHTML = '\n        [ant-click-animating-without-extra-node=\'true\']::after, .ant-click-animating-node {\n          --antd-wave-shadow-color: ' + waveColor + ';\n        }';
          if (!document.body.contains(styleForPesudo)) {
            document.body.appendChild(styleForPesudo);
          }
        }
        if (insertExtraNode) {
          node.appendChild(extraNode);
        }
        TransitionEvents.addStartEventListener(node, this.onTransitionStart);
        TransitionEvents.addEndEventListener(node, this.onTransitionEnd);
      },
      onTransitionStart: function onTransitionStart(e) {
        if (this.destroy) return;

        var node = this.$el;
        if (!e || e.target !== node) {
          return;
        }

        if (!this.animationStart) {
          this.resetEffect(node);
        }
      },
      onTransitionEnd: function onTransitionEnd(e) {
        if (!e || e.animationName !== 'fadeEffect') {
          return;
        }
        this.resetEffect(e.target);
      },
      getAttributeName: function getAttributeName() {
        var insertExtraNode = this.$props.insertExtraNode;

        return insertExtraNode ? 'ant-click-animating' : 'ant-click-animating-without-extra-node';
      },
      bindAnimationEvent: function bindAnimationEvent(node) {
        var _this2 = this;

        if (!node || !node.getAttribute || node.getAttribute('disabled') || node.className.indexOf('disabled') >= 0) {
          return;
        }
        var onClick = function onClick(e) {
          // Fix radio button click twice
          if (e.target.tagName === 'INPUT' || isHidden$1(e.target)) {
            return;
          }
          _this2.resetEffect(node);
          // Get wave color from target
          var waveColor = getComputedStyle(node).getPropertyValue('border-top-color') || // Firefox Compatible
          getComputedStyle(node).getPropertyValue('border-color') || getComputedStyle(node).getPropertyValue('background-color');
          _this2.clickWaveTimeoutId = window.setTimeout(function () {
            return _this2.onClick(node, waveColor);
          }, 0);
          wrapperRaf.cancel(_this2.animationStartId);
          _this2.animationStart = true;

          // Render to trigger transition event cost 3 frames. Let's delay 10 frames to reset this.
          _this2.animationStartId = wrapperRaf(function () {
            _this2.animationStart = false;
          }, 10);
        };
        node.addEventListener('click', onClick, true);
        return {
          cancel: function cancel() {
            node.removeEventListener('click', onClick, true);
          }
        };
      },
      resetEffect: function resetEffect(node) {
        if (!node || node === this.extraNode || !(node instanceof Element)) {
          return;
        }
        var insertExtraNode = this.$props.insertExtraNode;

        var attributeName = this.getAttributeName();
        node.setAttribute(attributeName, 'false'); // edge has bug on `removeAttribute` #14466
        if (styleForPesudo) {
          styleForPesudo.innerHTML = '';
        }
        if (insertExtraNode && this.extraNode && node.contains(this.extraNode)) {
          node.removeChild(this.extraNode);
        }
        TransitionEvents.removeStartEventListener(node, this.onTransitionStart);
        TransitionEvents.removeEndEventListener(node, this.onTransitionEnd);
      }
    },

    render: function render() {
      if (this.configProvider.csp) {
        this.csp = this.configProvider.csp;
      }
      return this.$slots['default'] && this.$slots['default'][0];
    }
  };

  var buttonTypes = (function () {
    return {
      prefixCls: VuePropTypes.string,
      type: VuePropTypes.string,
      htmlType: VuePropTypes.oneOf(['button', 'submit', 'reset']).def('button'),
      icon: VuePropTypes.any,
      shape: VuePropTypes.oneOf(['circle', 'circle-outline', 'round']),
      size: VuePropTypes.oneOf(['small', 'large', 'default']).def('default'),
      loading: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.object]),
      disabled: VuePropTypes.bool,
      ghost: VuePropTypes.bool,
      block: VuePropTypes.bool
    };
  });

  var rxTwoCNChar = /^[\u4e00-\u9fa5]{2}$/;
  var isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);
  var props$2 = buttonTypes();
  var Button = {
    name: 'AButton',
    inheritAttrs: false,
    __ANT_BUTTON: true,
    props: props$2,
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      return {
        sizeMap: {
          large: 'lg',
          small: 'sm'
        },
        sLoading: !!this.loading,
        hasTwoCNChar: false
      };
    },

    computed: {
      classes: function classes() {
        var _ref;

        var customizePrefixCls = this.prefixCls,
            type = this.type,
            shape = this.shape,
            size = this.size,
            hasTwoCNChar = this.hasTwoCNChar,
            sLoading = this.sLoading,
            ghost = this.ghost,
            block = this.block,
            icon = this.icon,
            $slots = this.$slots;

        var getPrefixCls = this.configProvider.getPrefixCls;
        var prefixCls = getPrefixCls('btn', customizePrefixCls);
        var autoInsertSpace = this.configProvider.autoInsertSpaceInButton !== false;

        // large => lg
        // small => sm
        var sizeCls = '';
        switch (size) {
          case 'large':
            sizeCls = 'lg';
            break;
          case 'small':
            sizeCls = 'sm';
            break;
        }
        var iconType = sLoading ? 'loading' : icon;
        var children = filterEmpty($slots['default']);
        return _ref = {}, _defineProperty(_ref, '' + prefixCls, true), _defineProperty(_ref, prefixCls + '-' + type, type), _defineProperty(_ref, prefixCls + '-' + shape, shape), _defineProperty(_ref, prefixCls + '-' + sizeCls, sizeCls), _defineProperty(_ref, prefixCls + '-icon-only', children.length === 0 && iconType), _defineProperty(_ref, prefixCls + '-loading', sLoading), _defineProperty(_ref, prefixCls + '-background-ghost', ghost || type === 'ghost'), _defineProperty(_ref, prefixCls + '-two-chinese-chars', hasTwoCNChar && autoInsertSpace), _defineProperty(_ref, prefixCls + '-block', block), _ref;
      }
    },
    watch: {
      loading: function loading(val, preVal) {
        var _this = this;

        if (preVal && typeof preVal !== 'boolean') {
          clearTimeout(this.delayTimeout);
        }
        if (val && typeof val !== 'boolean' && val.delay) {
          this.delayTimeout = setTimeout(function () {
            _this.sLoading = !!val;
          }, val.delay);
        } else {
          this.sLoading = !!val;
        }
      }
    },
    mounted: function mounted() {
      this.fixTwoCNChar();
    },
    updated: function updated() {
      this.fixTwoCNChar();
    },
    beforeDestroy: function beforeDestroy() {
      // if (this.timeout) {
      //   clearTimeout(this.timeout)
      // }
      if (this.delayTimeout) {
        clearTimeout(this.delayTimeout);
      }
    },

    methods: {
      fixTwoCNChar: function fixTwoCNChar() {
        // Fix for HOC usage like <FormatMessage />
        var node = this.$refs.buttonNode;
        if (!node) {
          return;
        }
        var buttonText = node.textContent;
        if (this.isNeedInserted() && isTwoCNChar(buttonText)) {
          if (!this.hasTwoCNChar) {
            this.hasTwoCNChar = true;
          }
        } else if (this.hasTwoCNChar) {
          this.hasTwoCNChar = false;
        }
      },
      handleClick: function handleClick(event) {
        var sLoading = this.$data.sLoading;

        if (sLoading) {
          return;
        }
        this.$emit('click', event);
      },
      insertSpace: function insertSpace(child, needInserted) {
        var h = this.$createElement;

        var SPACE = needInserted ? ' ' : '';
        if (typeof child.text === 'string') {
          var text = child.text.trim();
          if (isTwoCNChar(text)) {
            text = text.split('').join(SPACE);
          }
          return h('span', [text]);
        }
        return child;
      },
      isNeedInserted: function isNeedInserted() {
        var $slots = this.$slots,
            type = this.type;

        var icon = getComponentFromProp(this, 'icon');
        return $slots['default'] && $slots['default'].length === 1 && !icon && type !== 'link';
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      var type = this.type,
          htmlType = this.htmlType,
          classes = this.classes,
          disabled = this.disabled,
          handleClick = this.handleClick,
          sLoading = this.sLoading,
          $slots = this.$slots,
          $attrs = this.$attrs;

      var icon = getComponentFromProp(this, 'icon');
      var buttonProps = {
        attrs: _extends$1({}, $attrs, {
          disabled: disabled
        }),
        'class': classes,
        on: _extends$1({}, getListeners(this), {
          click: handleClick
        })
      };
      var iconType = sLoading ? 'loading' : icon;
      var iconNode = iconType ? h(Icon$1, {
        attrs: { type: iconType }
      }) : null;
      var children = filterEmpty($slots['default']);
      var autoInsertSpace = this.configProvider.autoInsertSpaceInButton !== false;
      var kids = children.map(function (child) {
        return _this2.insertSpace(child, _this2.isNeedInserted() && autoInsertSpace);
      });

      if ($attrs.href !== undefined) {
        return h(
          'a',
          babelHelperVueJsxMergeProps([buttonProps, { ref: 'buttonNode' }]),
          [iconNode, kids]
        );
      }

      var buttonNode = h(
        'button',
        babelHelperVueJsxMergeProps([buttonProps, { ref: 'buttonNode', attrs: { type: htmlType || 'button' }
        }]),
        [iconNode, kids]
      );

      if (type === 'link') {
        return buttonNode;
      }

      return h(Wave, [buttonNode]);
    }
  };

  var ButtonGroupProps = {
    prefixCls: VuePropTypes.string,
    size: {
      validator: function validator(value) {
        return ['small', 'large', 'default'].includes(value);
      }
    }
  };
  var ButtonGroup = {
    name: 'AButtonGroup',
    props: ButtonGroupProps,
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      return {
        sizeMap: {
          large: 'lg',
          small: 'sm'
        }
      };
    },
    render: function render() {
      var _classes;

      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          size = this.size,
          $slots = this.$slots;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('btn-group', customizePrefixCls);

      // large => lg
      // small => sm
      var sizeCls = '';
      switch (size) {
        case 'large':
          sizeCls = 'lg';
          break;
        case 'small':
          sizeCls = 'sm';
          break;
      }
      var classes = (_classes = {}, _defineProperty(_classes, '' + prefixCls, true), _defineProperty(_classes, prefixCls + '-' + sizeCls, sizeCls), _classes);
      return h(
        'div',
        { 'class': classes },
        [filterEmpty($slots['default'])]
      );
    }
  };

  Button.Group = ButtonGroup;

  /* istanbul ignore next */
  Button.install = function (Vue) {
    Vue.use(base);
    Vue.component(Button.name, Button);
    Vue.component(ButtonGroup.name, ButtonGroup);
  };

  var Search = {
    name: 'AInputSearch',
    inheritAttrs: false,
    model: {
      prop: 'value',
      event: 'change.value'
    },
    props: _extends$1({}, inputProps, {
      // 不能设置默认值 https://github.com/vueComponent/ant-design-vue/issues/1916
      enterButton: VuePropTypes.any
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      onChange: function onChange(e) {
        if (e && e.target && e.type === 'click') {
          this.$emit('search', e.target.value, e);
        }
        this.$emit('change', e);
      },
      onSearch: function onSearch(e) {
        if (this.loading || this.disabled) {
          return;
        }
        this.$emit('search', this.$refs.input.stateValue, e);
        if (!isMobile_2({ tablet: true })) {
          this.$refs.input.focus();
        }
      },
      focus: function focus() {
        this.$refs.input.focus();
      },
      blur: function blur() {
        this.$refs.input.blur();
      },
      renderLoading: function renderLoading(prefixCls) {
        var h = this.$createElement;
        var size = this.$props.size;

        var enterButton = getComponentFromProp(this, 'enterButton');
        // 兼容 <a-input-search enterButton />， 因enterButton类型为 any，此类写法 enterButton 为空字符串
        enterButton = enterButton || enterButton === '';
        if (enterButton) {
          return h(
            Button,
            { 'class': prefixCls + '-button', attrs: { type: 'primary', size: size },
              key: 'enterButton' },
            [h(Icon$1, {
              attrs: { type: 'loading' }
            })]
          );
        }
        return h(Icon$1, { 'class': prefixCls + '-icon', attrs: { type: 'loading' },
          key: 'loadingIcon' });
      },
      renderSuffix: function renderSuffix(prefixCls) {
        var h = this.$createElement;
        var loading = this.loading;

        var suffix = getComponentFromProp(this, 'suffix');
        var enterButton = getComponentFromProp(this, 'enterButton');
        // 兼容 <a-input-search enterButton />， 因enterButton类型为 any，此类写法 enterButton 为空字符串
        enterButton = enterButton || enterButton === '';
        if (loading && !enterButton) {
          return [suffix, this.renderLoading(prefixCls)];
        }

        if (enterButton) return suffix;

        var icon = h(Icon$1, { 'class': prefixCls + '-icon', attrs: { type: 'search' },
          key: 'searchIcon', on: {
            'click': this.onSearch
          }
        });

        if (suffix) {
          // let cloneSuffix = suffix;
          // if (isValidElement(cloneSuffix) && !cloneSuffix.key) {
          //   cloneSuffix = cloneElement(cloneSuffix, {
          //     key: 'originSuffix',
          //   });
          // }
          return [suffix, icon];
        }

        return icon;
      },
      renderAddonAfter: function renderAddonAfter(prefixCls) {
        var h = this.$createElement;
        var size = this.size,
            disabled = this.disabled,
            loading = this.loading;

        var btnClassName = prefixCls + '-button';
        var enterButton = getComponentFromProp(this, 'enterButton');
        enterButton = enterButton || enterButton === '';
        var addonAfter = getComponentFromProp(this, 'addonAfter');
        if (loading && enterButton) {
          return [this.renderLoading(prefixCls), addonAfter];
        }
        if (!enterButton) return addonAfter;
        var enterButtonAsElement = Array.isArray(enterButton) ? enterButton[0] : enterButton;
        var button = void 0;
        var isAntdButton = enterButtonAsElement.componentOptions && enterButtonAsElement.componentOptions.Ctor.extendOptions.__ANT_BUTTON;
        if (enterButtonAsElement.tag === 'button' || isAntdButton) {
          button = cloneElement(enterButtonAsElement, {
            key: 'enterButton',
            'class': isAntdButton ? btnClassName : '',
            props: isAntdButton ? { size: size } : {},
            on: {
              click: this.onSearch
            }
          });
        } else {
          button = h(
            Button,
            {
              'class': btnClassName,
              attrs: { type: 'primary',
                size: size,
                disabled: disabled
              },
              key: 'enterButton',
              on: {
                'click': this.onSearch
              }
            },
            [enterButton === true || enterButton === '' ? h(Icon$1, {
              attrs: { type: 'search' }
            }) : enterButton]
          );
        }
        if (addonAfter) {
          return [button, addonAfter];
        }

        return button;
      }
    },
    render: function render() {
      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          customizePrefixCls = _getOptionProps.prefixCls,
          customizeInputPrefixCls = _getOptionProps.inputPrefixCls,
          size = _getOptionProps.size,
          loading = _getOptionProps.loading,
          others = _objectWithoutProperties(_getOptionProps, ['prefixCls', 'inputPrefixCls', 'size', 'loading']);

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('input-search', customizePrefixCls);
      var inputPrefixCls = getPrefixCls('input', customizeInputPrefixCls);

      var enterButton = getComponentFromProp(this, 'enterButton');
      var addonBefore = getComponentFromProp(this, 'addonBefore');
      enterButton = enterButton || enterButton === '';
      var inputClassName = void 0;
      if (enterButton) {
        var _classNames;

        inputClassName = classnames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-enter-button', !!enterButton), _defineProperty(_classNames, prefixCls + '-' + size, !!size), _classNames));
      } else {
        inputClassName = prefixCls;
      }

      var on = _extends$1({}, getListeners(this));
      delete on.search;
      var inputProps = {
        props: _extends$1({}, others, {
          prefixCls: inputPrefixCls,
          size: size,
          suffix: this.renderSuffix(prefixCls),
          prefix: getComponentFromProp(this, 'prefix'),
          addonAfter: this.renderAddonAfter(prefixCls),
          addonBefore: addonBefore,
          className: inputClassName
        }),
        attrs: this.$attrs,
        ref: 'input',
        on: _extends$1({
          pressEnter: this.onSearch
        }, on, {
          change: this.onChange
        })
      };
      return h(Input, inputProps);
    }
  };

  var ActionMap = {
    click: 'click',
    hover: 'mouseover'
  };

  var Password = {
    name: 'AInputPassword',
    mixins: [BaseMixin],
    inheritAttrs: false,
    model: {
      prop: 'value',
      event: 'change.value'
    },
    props: _extends$1({}, inputProps, {
      prefixCls: VuePropTypes.string.def('ant-input-password'),
      inputPrefixCls: VuePropTypes.string.def('ant-input'),
      action: VuePropTypes.string.def('click'),
      visibilityToggle: VuePropTypes.bool.def(true)
    }),
    data: function data() {
      return {
        visible: false
      };
    },

    methods: {
      focus: function focus() {
        this.$refs.input.focus();
      },
      blur: function blur() {
        this.$refs.input.blur();
      },
      onVisibleChange: function onVisibleChange() {
        if (this.disabled) {
          return;
        }
        this.setState({
          visible: !this.visible
        });
      },
      getIcon: function getIcon() {
        var _on;

        var h = this.$createElement;
        var _$props = this.$props,
            prefixCls = _$props.prefixCls,
            action = _$props.action;

        var iconTrigger = ActionMap[action] || '';
        var iconProps = {
          props: {
            type: this.visible ? 'eye' : 'eye-invisible'
          },
          on: (_on = {}, _defineProperty(_on, iconTrigger, this.onVisibleChange), _defineProperty(_on, 'mousedown', function mousedown(e) {
            // Prevent focused state lost
            // https://github.com/ant-design/ant-design/issues/15173
            e.preventDefault();
          }), _defineProperty(_on, 'mouseup', function mouseup(e) {
            // Prevent focused state lost
            // https://github.com/ant-design/ant-design/pull/23633/files
            e.preventDefault();
          }), _on),
          'class': prefixCls + '-icon',
          key: 'passwordIcon'
        };
        return h(Icon$1, iconProps);
      }
    },
    render: function render() {
      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          prefixCls = _getOptionProps.prefixCls,
          inputPrefixCls = _getOptionProps.inputPrefixCls,
          size = _getOptionProps.size,
          suffix = _getOptionProps.suffix,
          visibilityToggle = _getOptionProps.visibilityToggle,
          restProps = _objectWithoutProperties(_getOptionProps, ['prefixCls', 'inputPrefixCls', 'size', 'suffix', 'visibilityToggle']);

      var suffixIcon = visibilityToggle && this.getIcon();
      var inputClassName = classnames(prefixCls, _defineProperty({}, prefixCls + '-' + size, !!size));
      var inputProps = {
        props: _extends$1({}, restProps, {
          prefixCls: inputPrefixCls,
          size: size,
          suffix: suffixIcon,
          prefix: getComponentFromProp(this, 'prefix'),
          addonAfter: getComponentFromProp(this, 'addonAfter'),
          addonBefore: getComponentFromProp(this, 'addonBefore')
        }),
        attrs: _extends$1({}, this.$attrs, {
          type: this.visible ? 'text' : 'password'
        }),
        'class': inputClassName,
        ref: 'input',
        on: getListeners(this)
      };
      return h(Input, inputProps);
    }
  };

  Vue.use(antInputDirective);

  Input.Group = Group;
  Input.Search = Search;
  Input.TextArea = TextArea;
  Input.Password = Password;

  /* istanbul ignore next */
  Input.install = function (Vue) {
    Vue.use(base);
    Vue.component(Input.name, Input);
    Vue.component(Input.Group.name, Input.Group);
    Vue.component(Input.Search.name, Input.Search);
    Vue.component(Input.TextArea.name, Input.TextArea);
    Vue.component(Input.Password.name, Input.Password);
  };

  function chaining$1() {
    for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
      fns[_key] = arguments[_key];
    }

    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      // eslint-disable-line
      // eslint-disable-line
      for (var i = 0; i < fns.length; i++) {
        if (fns[i] && typeof fns[i] === 'function') {
          fns[i].apply(this, args);
        }
      }
    };
  }
  var InputElement = {
    name: 'InputElement',
    inheritAttrs: false,
    props: {
      value: VuePropTypes.any,
      disabled: VuePropTypes.bool,
      placeholder: VuePropTypes.string
    },
    render: function render() {
      var _$slots = this.$slots,
          $slots = _$slots === undefined ? {} : _$slots,
          _$attrs = this.$attrs,
          $attrs = _$attrs === undefined ? {} : _$attrs,
          placeholder = this.placeholder;

      var listeners = getListeners(this);
      var props = getOptionProps(this);
      var value = props.value === undefined ? '' : props.value;
      var children = $slots['default'][0];
      var _$slots$default$0$com = $slots['default'][0].componentOptions,
          componentOptions = _$slots$default$0$com === undefined ? {} : _$slots$default$0$com;
      var _componentOptions$lis = componentOptions.listeners,
          events = _componentOptions$lis === undefined ? {} : _componentOptions$lis;

      var newEvent = _extends$1({}, events);

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Object.entries(listeners)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ref = _step.value;

          var _ref2 = _slicedToArray(_ref, 2);

          var eventName = _ref2[0];
          var event = _ref2[1];

          newEvent[eventName] = chaining$1(event, events[eventName]);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var attrs = _extends$1({}, $attrs, { value: value });
      // https://github.com/vueComponent/ant-design-vue/issues/1761
      delete props.placeholder;
      if (placeholder) {
        props.placeholder = placeholder;
        attrs.placeholder = placeholder;
      }
      return cloneElement(children, {
        domProps: {
          value: value
        },
        props: props,
        on: newEvent,
        attrs: attrs,
        ref: 'ele'
      });
    }
  };

  // const DataSourceItemObject = PropTypes.shape({
  //   value: String,
  //   text: String,
  // }).loose
  // const DataSourceItemType = PropTypes.oneOfType([
  //   PropTypes.string,
  //   DataSourceItemObject,
  // ]).isRequired

  // export interface AutoCompleteInputProps {
  //   onChange?: React.FormEventHandler<any>;
  //   value: any;
  // }

  var AutoCompleteProps = _extends$1({}, AbstractSelectProps(), {
    value: SelectValue,
    defaultValue: SelectValue,
    dataSource: VuePropTypes.array,
    dropdownMenuStyle: VuePropTypes.object,
    optionLabelProp: String,
    dropdownMatchSelectWidth: VuePropTypes.bool
    // onChange?: (value: SelectValue) => void;
    // onSelect?: (value: SelectValue, option: Object) => any;
  });

  var AutoComplete = {
    name: 'AAutoComplete',
    props: _extends$1({}, AutoCompleteProps, {
      prefixCls: VuePropTypes.string.def('ant-select'),
      showSearch: VuePropTypes.bool.def(false),
      transitionName: VuePropTypes.string.def('slide-up'),
      choiceTransitionName: VuePropTypes.string.def('zoom'),
      autoFocus: VuePropTypes.bool,
      backfill: VuePropTypes.bool,
      optionLabelProp: VuePropTypes.string.def('children'),
      filterOption: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.func]).def(false),
      defaultActiveFirstOption: VuePropTypes.bool.def(true)
    }),
    Option: _extends$1({}, Option, { name: 'AAutoCompleteOption' }),
    OptGroup: _extends$1({}, OptGroup, { name: 'AAutoCompleteOptGroup' }),
    model: {
      prop: 'value',
      event: 'change'
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    provide: function provide() {
      return {
        savePopupRef: this.savePopupRef
      };
    },

    methods: {
      savePopupRef: function savePopupRef(ref) {
        this.popupRef = ref;
      },
      getInputElement: function getInputElement() {
        var h = this.$createElement;
        var $slots = this.$slots,
            placeholder = this.placeholder;

        var children = filterEmpty($slots['default']);
        var element = children.length ? children[0] : h(Input, {
          attrs: { lazy: false }
        });
        return h(
          InputElement,
          {
            attrs: { placeholder: placeholder }
          },
          [element]
        );
      },
      focus: function focus() {
        if (this.$refs.select) {
          this.$refs.select.focus();
        }
      },
      blur: function blur() {
        if (this.$refs.select) {
          this.$refs.select.blur();
        }
      }
    },

    render: function render() {
      var _cls;

      var h = arguments[0];
      var size = this.size,
          customizePrefixCls = this.prefixCls,
          optionLabelProp = this.optionLabelProp,
          dataSource = this.dataSource,
          $slots = this.$slots;


      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('select', customizePrefixCls);

      var cls = (_cls = {}, _defineProperty(_cls, prefixCls + '-lg', size === 'large'), _defineProperty(_cls, prefixCls + '-sm', size === 'small'), _defineProperty(_cls, prefixCls + '-show-search', true), _defineProperty(_cls, prefixCls + '-auto-complete', true), _cls);

      var options = void 0;
      var childArray = filterEmpty($slots.dataSource);
      if (childArray.length) {
        options = childArray;
      } else {
        options = dataSource ? dataSource.map(function (item) {
          if (isValidElement(item)) {
            return item;
          }
          switch (typeof item === 'undefined' ? 'undefined' : _typeof(item)) {
            case 'string':
              return h(
                Option,
                { key: item },
                [item]
              );
            case 'object':
              return h(
                Option,
                { key: item.value },
                [item.text]
              );
            default:
              throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');
          }
        }) : [];
      }
      var selectProps = {
        props: _extends$1({}, getOptionProps(this), {
          mode: Select$1.SECRET_COMBOBOX_MODE_DO_NOT_USE,
          optionLabelProp: optionLabelProp,
          getInputElement: this.getInputElement,
          notFoundContent: getComponentFromProp(this, 'notFoundContent'),
          placeholder: ''
        }),
        'class': cls,
        ref: 'select',
        on: getListeners(this)
      };
      return h(
        Select$1,
        selectProps,
        [options]
      );
    }
  };

  /* istanbul ignore next */
  AutoComplete.install = function (Vue) {
    Vue.use(base);
    Vue.component(AutoComplete.name, AutoComplete);
    Vue.component(AutoComplete.Option.name, AutoComplete.Option);
    Vue.component(AutoComplete.OptGroup.name, AutoComplete.OptGroup);
  };

  function noop$7() {}
  var AlertProps = {
    /**
     * Type of Alert styles, options:`success`, `info`, `warning`, `error`
     */
    type: VuePropTypes.oneOf(['success', 'info', 'warning', 'error']),
    /** Whether Alert can be closed */
    closable: VuePropTypes.bool,
    /** Close text to show */
    closeText: VuePropTypes.any,
    /** Content of Alert */
    message: VuePropTypes.any,
    /** Additional content of Alert */
    description: VuePropTypes.any,
    /** Callback when close Alert */
    // onClose?: React.MouseEventHandler<HTMLAnchorElement>;
    /** Trigger when animation ending of Alert */
    afterClose: VuePropTypes.func.def(noop$7),
    /** Whether to show icon */
    showIcon: VuePropTypes.bool,
    iconType: VuePropTypes.string,
    prefixCls: VuePropTypes.string,
    banner: VuePropTypes.bool,
    icon: VuePropTypes.any
  };

  var Alert = {
    name: 'AAlert',
    props: AlertProps,
    mixins: [BaseMixin],
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      return {
        closing: false,
        closed: false
      };
    },

    methods: {
      handleClose: function handleClose(e) {
        e.preventDefault();
        var dom = this.$el;
        dom.style.height = dom.offsetHeight + 'px';
        // Magic code
        // 重复一次后才能正确设置 height
        dom.style.height = dom.offsetHeight + 'px';

        this.setState({
          closing: true
        });
        this.$emit('close', e);
      },
      animationEnd: function animationEnd() {
        this.setState({
          closing: false,
          closed: true
        });
        this.afterClose();
      }
    },

    render: function render() {
      var _classNames;

      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          banner = this.banner,
          closing = this.closing,
          closed = this.closed;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('alert', customizePrefixCls);

      var closable = this.closable,
          type = this.type,
          showIcon = this.showIcon,
          iconType = this.iconType;

      var closeText = getComponentFromProp(this, 'closeText');
      var description = getComponentFromProp(this, 'description');
      var message = getComponentFromProp(this, 'message');
      var icon = getComponentFromProp(this, 'icon');
      // banner模式默认有 Icon
      showIcon = banner && showIcon === undefined ? true : showIcon;
      // banner模式默认为警告
      type = banner && type === undefined ? 'warning' : type || 'info';
      var iconTheme = 'filled';

      if (!iconType) {
        switch (type) {
          case 'success':
            iconType = 'check-circle';
            break;
          case 'info':
            iconType = 'info-circle';
            break;
          case 'error':
            iconType = 'close-circle';
            break;
          case 'warning':
            iconType = 'exclamation-circle';
            break;
          default:
            iconType = 'default';
        }

        // use outline icon in alert with description
        if (description) {
          iconTheme = 'outlined';
        }
      }

      // closeable when closeText is assigned
      if (closeText) {
        closable = true;
      }

      var alertCls = classnames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-' + type, true), _defineProperty(_classNames, prefixCls + '-closing', closing), _defineProperty(_classNames, prefixCls + '-with-description', !!description), _defineProperty(_classNames, prefixCls + '-no-icon', !showIcon), _defineProperty(_classNames, prefixCls + '-banner', !!banner), _defineProperty(_classNames, prefixCls + '-closable', closable), _classNames));

      var closeIcon = closable ? h(
        'a',
        {
          attrs: { type: 'button', tabIndex: 0 },
          on: {
            'click': this.handleClose
          },
          'class': prefixCls + '-close-icon' },
        [closeText ? h(
          'span',
          { 'class': prefixCls + '-close-text' },
          [closeText]
        ) : h(Icon$1, {
          attrs: { type: 'close' }
        })]
      ) : null;

      var iconNode = icon && (isValidElement(icon) ? cloneElement(icon, {
        'class': prefixCls + '-icon'
      }) : h(
        'span',
        { 'class': prefixCls + '-icon' },
        [icon]
      )) || h(Icon$1, { 'class': prefixCls + '-icon', attrs: { type: iconType, theme: iconTheme }
      });

      var transitionProps = getTransitionProps(prefixCls + '-slide-up', {
        appear: false,
        afterLeave: this.animationEnd
      });
      return closed ? null : h(
        'transition',
        transitionProps,
        [h(
          'div',
          {
            directives: [{
              name: 'show',
              value: !closing
            }],
            'class': alertCls, attrs: { 'data-show': !closing }
          },
          [showIcon ? iconNode : null, h(
            'span',
            { 'class': prefixCls + '-message' },
            [message]
          ), h(
            'span',
            { 'class': prefixCls + '-description' },
            [description]
          ), closeIcon]
        )]
      );
    }
  };

  /* istanbul ignore next */
  Alert.install = function (Vue) {
    Vue.use(base);
    Vue.component(Alert.name, Alert);
  };

  var Avatar = {
    name: 'AAvatar',
    props: {
      prefixCls: {
        type: String,
        'default': undefined
      },
      shape: {
        validator: function validator(val) {
          return ['circle', 'square'].includes(val);
        },
        'default': 'circle'
      },
      size: {
        validator: function validator(val) {
          return typeof val === 'number' || ['small', 'large', 'default'].includes(val);
        },
        'default': 'default'
      },
      src: String,
      /** Srcset of image avatar */
      srcSet: String,
      icon: VuePropTypes.any,
      alt: String,
      loadError: Function
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      return {
        isImgExist: true,
        isMounted: false,
        scale: 1
      };
    },

    watch: {
      src: function src() {
        var _this = this;

        this.$nextTick(function () {
          _this.isImgExist = true;
          _this.scale = 1;
          // force uodate for position
          _this.$forceUpdate();
        });
      }
    },
    mounted: function mounted() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.setScale();
        _this2.isMounted = true;
      });
    },
    updated: function updated() {
      var _this3 = this;

      this.$nextTick(function () {
        _this3.setScale();
      });
    },

    methods: {
      setScale: function setScale() {
        if (!this.$refs.avatarChildren || !this.$refs.avatarNode) {
          return;
        }
        var childrenWidth = this.$refs.avatarChildren.offsetWidth; // offsetWidth avoid affecting be transform scale
        var nodeWidth = this.$refs.avatarNode.offsetWidth;
        // denominator is 0 is no meaning
        if (childrenWidth === 0 || nodeWidth === 0 || this.lastChildrenWidth === childrenWidth && this.lastNodeWidth === nodeWidth) {
          return;
        }
        this.lastChildrenWidth = childrenWidth;
        this.lastNodeWidth = nodeWidth;
        // add 4px gap for each side to get better performance
        this.scale = nodeWidth - 8 < childrenWidth ? (nodeWidth - 8) / childrenWidth : 1;
      },
      handleImgLoadError: function handleImgLoadError() {
        var loadError = this.$props.loadError;

        var errorFlag = loadError ? loadError() : undefined;
        if (errorFlag !== false) {
          this.isImgExist = false;
        }
      }
    },
    render: function render() {
      var _sizeCls, _extends3;

      var h = arguments[0];
      var _$props = this.$props,
          customizePrefixCls = _$props.prefixCls,
          shape = _$props.shape,
          size = _$props.size,
          src = _$props.src,
          alt = _$props.alt,
          srcSet = _$props.srcSet;

      var icon = getComponentFromProp(this, 'icon');
      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('avatar', customizePrefixCls);

      var _$data = this.$data,
          isImgExist = _$data.isImgExist,
          scale = _$data.scale,
          isMounted = _$data.isMounted;


      var sizeCls = (_sizeCls = {}, _defineProperty(_sizeCls, prefixCls + '-lg', size === 'large'), _defineProperty(_sizeCls, prefixCls + '-sm', size === 'small'), _sizeCls);

      var classString = _extends$1(_defineProperty({}, prefixCls, true), sizeCls, (_extends3 = {}, _defineProperty(_extends3, prefixCls + '-' + shape, shape), _defineProperty(_extends3, prefixCls + '-image', src && isImgExist), _defineProperty(_extends3, prefixCls + '-icon', icon), _extends3));

      var sizeStyle = typeof size === 'number' ? {
        width: size + 'px',
        height: size + 'px',
        lineHeight: size + 'px',
        fontSize: icon ? size / 2 + 'px' : '18px'
      } : {};

      var children = this.$slots['default'];
      if (src && isImgExist) {
        children = h('img', {
          attrs: { src: src, srcSet: srcSet, alt: alt },
          on: {
            'error': this.handleImgLoadError
          }
        });
      } else if (icon) {
        if (typeof icon === 'string') {
          children = h(Icon$1, {
            attrs: { type: icon }
          });
        } else {
          children = icon;
        }
      } else {
        var childrenNode = this.$refs.avatarChildren;
        if (childrenNode || scale !== 1) {
          var transformString = 'scale(' + scale + ') translateX(-50%)';
          var childrenStyle = {
            msTransform: transformString,
            WebkitTransform: transformString,
            transform: transformString
          };
          var sizeChildrenStyle = typeof size === 'number' ? {
            lineHeight: size + 'px'
          } : {};
          children = h(
            'span',
            {
              'class': prefixCls + '-string',
              ref: 'avatarChildren',
              style: _extends$1({}, sizeChildrenStyle, childrenStyle)
            },
            [children]
          );
        } else {
          var _childrenStyle = {};
          if (!isMounted) {
            _childrenStyle.opacity = 0;
          }
          children = h(
            'span',
            { 'class': prefixCls + '-string', ref: 'avatarChildren', style: { opacity: 0 } },
            [children]
          );
        }
      }
      return h(
        'span',
        babelHelperVueJsxMergeProps([{ ref: 'avatarNode' }, { on: getListeners(this), 'class': classString, style: sizeStyle }]),
        [children]
      );
    }
  };

  /* istanbul ignore next */
  Avatar.install = function (Vue) {
    Vue.use(base);
    Vue.component(Avatar.name, Avatar);
  };

  function getDefaultTarget$1() {
    return window;
  }

  var BackTopProps = {
    visibilityHeight: VuePropTypes.number,
    // onClick?: React.MouseEventHandler<any>;
    target: VuePropTypes.func,
    prefixCls: VuePropTypes.string
    // visible: PropTypes.bool, // Only for test. Don't use it.
  };

  var BackTop = {
    name: 'ABackTop',
    mixins: [BaseMixin],
    props: _extends$1({}, BackTopProps, {
      visibilityHeight: VuePropTypes.number.def(400)
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      this.scrollEvent = null;
      return {
        visible: false
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        var getTarget = _this.target || getDefaultTarget$1;
        _this.scrollEvent = addEventListenerWrap(getTarget(), 'scroll', _this.handleScroll);
        _this.handleScroll();
      });
    },
    beforeDestroy: function beforeDestroy() {
      if (this.scrollEvent) {
        this.scrollEvent.remove();
      }
    },

    methods: {
      getCurrentScrollTop: function getCurrentScrollTop() {
        var getTarget = this.target || getDefaultTarget$1;
        var targetNode = getTarget();
        if (targetNode === window) {
          return window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
        }
        return targetNode.scrollTop;
      },
      scrollToTop: function scrollToTop(e) {
        var _target = this.target,
            target = _target === undefined ? getDefaultTarget$1 : _target;

        scrollTo(0, {
          getContainer: target
        });
        this.$emit('click', e);
      },
      handleScroll: function handleScroll() {
        var visibilityHeight = this.visibilityHeight,
            _target2 = this.target,
            target = _target2 === undefined ? getDefaultTarget$1 : _target2;

        var scrollTop = getScroll(target(), true);
        this.setState({
          visible: scrollTop > visibilityHeight
        });
      }
    },

    render: function render() {
      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          $slots = this.$slots;


      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('back-top', customizePrefixCls);

      var defaultElement = h(
        'div',
        { 'class': prefixCls + '-content' },
        [h('div', { 'class': prefixCls + '-icon' })]
      );
      var divProps = {
        on: _extends$1({}, getListeners(this), {
          click: this.scrollToTop
        }),
        'class': prefixCls
      };

      var backTopBtn = this.visible ? h(
        'div',
        divProps,
        [$slots['default'] || defaultElement]
      ) : null;
      var transitionProps = getTransitionProps('fade');
      return h(
        'transition',
        transitionProps,
        [backTopBtn]
      );
    }
  };

  /* istanbul ignore next */
  BackTop.install = function (Vue) {
    Vue.use(base);
    Vue.component(BackTop.name, BackTop);
  };

  function getNumberArray(num) {
    return num ? num.toString().split('').reverse().map(function (i) {
      var current = Number(i);
      return isNaN(current) ? i : current;
    }) : [];
  }

  var ScrollNumberProps = {
    prefixCls: VuePropTypes.string,
    count: VuePropTypes.any,
    component: VuePropTypes.string,
    title: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string, null]),
    displayComponent: VuePropTypes.any,
    className: VuePropTypes.object
  };

  var ScrollNumber = {
    mixins: [BaseMixin],
    props: ScrollNumberProps,
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      return {
        animateStarted: true,
        sCount: this.count
      };
    },

    watch: {
      count: function count() {
        this.lastCount = this.sCount;
        this.setState({
          animateStarted: true
        });
      }
    },
    updated: function updated() {
      var _this = this;

      var animateStarted = this.animateStarted,
          count = this.count;

      if (animateStarted) {
        this.clearTimeout();
        // Let browser has time to reset the scroller before actually
        // performing the transition.
        this.timeout = setTimeout(function () {
          _this.setState({
            animateStarted: false,
            sCount: count
          }, _this.onAnimated);
        });
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.clearTimeout();
    },

    methods: {
      clearTimeout: function (_clearTimeout) {
        function clearTimeout() {
          return _clearTimeout.apply(this, arguments);
        }

        clearTimeout.toString = function () {
          return _clearTimeout.toString();
        };

        return clearTimeout;
      }(function () {
        if (this.timeout) {
          clearTimeout(this.timeout);
          this.timeout = undefined;
        }
      }),
      getPositionByNum: function getPositionByNum(num, i) {
        var sCount = this.sCount;

        var currentCount = Math.abs(Number(sCount));
        var lastCount = Math.abs(Number(this.lastCount));
        var currentDigit = Math.abs(getNumberArray(sCount)[i]);
        var lastDigit = Math.abs(getNumberArray(this.lastCount)[i]);

        if (this.animateStarted) {
          return 10 + num;
        }
        // 同方向则在同一侧切换数字
        if (currentCount > lastCount) {
          if (currentDigit >= lastDigit) {
            return 10 + num;
          }
          return 20 + num;
        }
        if (currentDigit <= lastDigit) {
          return 10 + num;
        }
        return num;
      },
      onAnimated: function onAnimated() {
        this.$emit('animated');
      },
      renderNumberList: function renderNumberList(position, className) {
        var h = this.$createElement;

        var childrenToReturn = [];
        for (var i = 0; i < 30; i++) {
          childrenToReturn.push(h(
            'p',
            {
              key: i.toString(),
              'class': classnames(className, {
                current: position === i
              })
            },
            [i % 10]
          ));
        }

        return childrenToReturn;
      },
      renderCurrentNumber: function renderCurrentNumber(prefixCls, num, i) {
        var h = this.$createElement;

        if (typeof num === 'number') {
          var position = this.getPositionByNum(num, i);
          var removeTransition = this.animateStarted || getNumberArray(this.lastCount)[i] === undefined;
          var style = {
            transition: removeTransition ? 'none' : undefined,
            msTransform: 'translateY(' + -position * 100 + '%)',
            WebkitTransform: 'translateY(' + -position * 100 + '%)',
            transform: 'translateY(' + -position * 100 + '%)'
          };
          return h(
            'span',
            { 'class': prefixCls + '-only', style: style, key: i },
            [this.renderNumberList(position, prefixCls + '-only-unit')]
          );
        }
        return h(
          'span',
          { key: 'symbol', 'class': prefixCls + '-symbol' },
          [num]
        );
      },
      renderNumberElement: function renderNumberElement(prefixCls) {
        var _this2 = this;

        var sCount = this.sCount;

        if (sCount && Number(sCount) % 1 === 0) {
          return getNumberArray(sCount).map(function (num, i) {
            return _this2.renderCurrentNumber(prefixCls, num, i);
          }).reverse();
        }
        return sCount;
      }
    },

    render: function render() {
      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          title = this.title,
          _component = this.component,
          Tag = _component === undefined ? 'sup' : _component,
          displayComponent = this.displayComponent,
          className = this.className;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('scroll-number', customizePrefixCls);
      if (displayComponent) {
        return cloneElement(displayComponent, {
          'class': prefixCls + '-custom-component'
        });
      }
      var style = getStyle(this, true);
      // fix https://fb.me/react-unknown-prop
      var restProps = omit(this.$props, ['count', 'component', 'prefixCls', 'displayComponent']);
      var newProps = {
        props: _extends$1({}, restProps),
        attrs: {
          title: title
        },
        style: style,
        'class': classnames(prefixCls, className)
      };
      // allow specify the border
      // mock border-color by box-shadow for compatible with old usage:
      // <Badge count={4} style={{ backgroundColor: '#fff', color: '#999', borderColor: '#d9d9d9' }} />
      if (style && style.borderColor) {
        newProps.style.boxShadow = '0 0 0 1px ' + style.borderColor + ' inset';
      }

      return h(
        Tag,
        newProps,
        [this.renderNumberElement(prefixCls)]
      );
    }
  };

  // https://stackoverflow.com/questions/46176165/ways-to-get-string-literal-type-of-array-values-without-enum-overhead
  var tuple = function tuple() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args;
  };

  var PresetColorTypes = tuple('pink', 'red', 'yellow', 'orange', 'cyan', 'green', 'blue', 'purple', 'geekblue', 'magenta', 'volcano', 'gold', 'lime');

  var isNumeric = function isNumeric(value) {
    return !isNaN(parseFloat(value)) && isFinite(value);
  };

  var BadgeProps = {
    /** Number to show in badge */
    count: VuePropTypes.any,
    showZero: VuePropTypes.bool,
    /** Max count to show */
    overflowCount: VuePropTypes.number,
    /** whether to show red dot without number */
    dot: VuePropTypes.bool,
    prefixCls: VuePropTypes.string,
    scrollNumberPrefixCls: VuePropTypes.string,
    status: VuePropTypes.oneOf(['success', 'processing', 'default', 'error', 'warning']),
    color: VuePropTypes.string,
    text: VuePropTypes.string,
    offset: VuePropTypes.array,
    numberStyle: VuePropTypes.object.def(function () {
      return {};
    }),
    title: VuePropTypes.string
  };
  function isPresetColor(color) {
    return PresetColorTypes.indexOf(color) !== -1;
  }
  var Badge = {
    name: 'ABadge',
    props: initDefaultProps(BadgeProps, {
      showZero: false,
      dot: false,
      overflowCount: 99
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      getNumberedDispayCount: function getNumberedDispayCount() {
        var overflowCount = this.$props.overflowCount;

        var count = this.badgeCount;
        var displayCount = count > overflowCount ? overflowCount + '+' : count;
        return displayCount;
      },
      getDispayCount: function getDispayCount() {
        var isDot = this.isDot();
        // dot mode don't need count
        if (isDot) {
          return '';
        }
        return this.getNumberedDispayCount();
      },
      getScrollNumberTitle: function getScrollNumberTitle() {
        var title = this.$props.title;

        var count = this.badgeCount;
        if (title) {
          return title;
        }
        return typeof count === 'string' || typeof count === 'number' ? count : undefined;
      },
      getStyleWithOffset: function getStyleWithOffset() {
        var _$props = this.$props,
            offset = _$props.offset,
            numberStyle = _$props.numberStyle;

        return offset ? _extends$1({
          right: -parseInt(offset[0], 10) + 'px',
          marginTop: isNumeric(offset[1]) ? offset[1] + 'px' : offset[1]
        }, numberStyle) : _extends$1({}, numberStyle);
      },
      getBadgeClassName: function getBadgeClassName(prefixCls) {
        var _classNames;

        var children = filterEmpty(this.$slots['default']);
        var hasStatus = this.hasStatus();
        return classnames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-status', hasStatus), _defineProperty(_classNames, prefixCls + '-dot-status', hasStatus && this.dot && !this.isZero()), _defineProperty(_classNames, prefixCls + '-not-a-wrapper', !children.length), _classNames));
      },
      hasStatus: function hasStatus() {
        var _$props2 = this.$props,
            status = _$props2.status,
            color = _$props2.color;

        return !!status || !!color;
      },
      isZero: function isZero() {
        var numberedDispayCount = this.getNumberedDispayCount();
        return numberedDispayCount === '0' || numberedDispayCount === 0;
      },
      isDot: function isDot() {
        var dot = this.$props.dot;

        var isZero = this.isZero();
        return dot && !isZero || this.hasStatus();
      },
      isHidden: function isHidden() {
        var showZero = this.$props.showZero;

        var displayCount = this.getDispayCount();
        var isZero = this.isZero();
        var isDot = this.isDot();
        var isEmpty = displayCount === null || displayCount === undefined || displayCount === '';
        return (isEmpty || isZero && !showZero) && !isDot;
      },
      renderStatusText: function renderStatusText(prefixCls) {
        var h = this.$createElement;
        var text = this.$props.text;

        var hidden = this.isHidden();
        return hidden || !text ? null : h(
          'span',
          { 'class': prefixCls + '-status-text' },
          [text]
        );
      },
      renderDispayComponent: function renderDispayComponent() {
        var count = this.badgeCount;
        var customNode = count;
        if (!customNode || (typeof customNode === 'undefined' ? 'undefined' : _typeof(customNode)) !== 'object') {
          return undefined;
        }
        return cloneElement(customNode, {
          style: this.getStyleWithOffset()
        });
      },
      renderBadgeNumber: function renderBadgeNumber(prefixCls, scrollNumberPrefixCls) {
        var _scrollNumberCls;

        var h = this.$createElement;
        var _$props3 = this.$props,
            status = _$props3.status,
            color = _$props3.color;

        var count = this.badgeCount;
        var displayCount = this.getDispayCount();
        var isDot = this.isDot();
        var hidden = this.isHidden();

        var scrollNumberCls = (_scrollNumberCls = {}, _defineProperty(_scrollNumberCls, prefixCls + '-dot', isDot), _defineProperty(_scrollNumberCls, prefixCls + '-count', !isDot), _defineProperty(_scrollNumberCls, prefixCls + '-multiple-words', !isDot && count && count.toString && count.toString().length > 1), _defineProperty(_scrollNumberCls, prefixCls + '-status-' + status, !!status), _defineProperty(_scrollNumberCls, prefixCls + '-status-' + color, isPresetColor(color)), _scrollNumberCls);

        var statusStyle = this.getStyleWithOffset();
        if (color && !isPresetColor(color)) {
          statusStyle = statusStyle || {};
          statusStyle.background = color;
        }

        return hidden ? null : h(ScrollNumber, {
          attrs: {
            prefixCls: scrollNumberPrefixCls,
            'data-show': !hidden,

            className: scrollNumberCls,
            count: displayCount,
            displayComponent: this.renderDispayComponent() // <Badge status="success" count={<Icon type="xxx" />}></Badge>
            , title: this.getScrollNumberTitle()
          },
          directives: [{
            name: 'show',
            value: !hidden
          }],
          style: statusStyle,
          key: 'scrollNumber'
        });
      }
    },

    render: function render() {
      var _classNames2;

      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          customizeScrollNumberPrefixCls = this.scrollNumberPrefixCls,
          status = this.status,
          text = this.text,
          color = this.color,
          $slots = this.$slots;


      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('badge', customizePrefixCls);
      var scrollNumberPrefixCls = getPrefixCls('scroll-number', customizeScrollNumberPrefixCls);

      var children = filterEmpty($slots['default']);
      var count = getComponentFromProp(this, 'count');
      if (Array.isArray(count)) {
        count = count[0];
      }
      this.badgeCount = count;
      var scrollNumber = this.renderBadgeNumber(prefixCls, scrollNumberPrefixCls);
      var statusText = this.renderStatusText(prefixCls);
      var statusCls = classnames((_classNames2 = {}, _defineProperty(_classNames2, prefixCls + '-status-dot', this.hasStatus()), _defineProperty(_classNames2, prefixCls + '-status-' + status, !!status), _defineProperty(_classNames2, prefixCls + '-status-' + color, isPresetColor(color)), _classNames2));
      var statusStyle = {};
      if (color && !isPresetColor(color)) {
        statusStyle.background = color;
      }
      // <Badge status="success" />
      if (!children.length && this.hasStatus()) {
        var styleWithOffset = this.getStyleWithOffset();
        var statusTextColor = styleWithOffset && styleWithOffset.color;
        return h(
          'span',
          babelHelperVueJsxMergeProps([{ on: getListeners(this) }, {
            'class': this.getBadgeClassName(prefixCls),
            style: styleWithOffset
          }]),
          [h('span', { 'class': statusCls, style: statusStyle }), h(
            'span',
            { style: { color: statusTextColor }, 'class': prefixCls + '-status-text' },
            [text]
          )]
        );
      }

      var transitionProps = getTransitionProps(children.length ? prefixCls + '-zoom' : '');

      return h(
        'span',
        babelHelperVueJsxMergeProps([{ on: getListeners(this) }, { 'class': this.getBadgeClassName(prefixCls) }]),
        [children, h(
          'transition',
          transitionProps,
          [scrollNumber]
        ), statusText]
      );
    }
  };

  /* istanbul ignore next */
  Badge.install = function (Vue) {
    Vue.use(base);
    Vue.component(Badge.name, Badge);
  };

  var autoAdjustOverflow$1 = {
    adjustX: 1,
    adjustY: 1
  };

  var targetOffset = [0, 0];

  var placements$1 = {
    topLeft: {
      points: ['bl', 'tl'],
      overflow: autoAdjustOverflow$1,
      offset: [0, -4],
      targetOffset: targetOffset
    },
    topCenter: {
      points: ['bc', 'tc'],
      overflow: autoAdjustOverflow$1,
      offset: [0, -4],
      targetOffset: targetOffset
    },
    topRight: {
      points: ['br', 'tr'],
      overflow: autoAdjustOverflow$1,
      offset: [0, -4],
      targetOffset: targetOffset
    },
    bottomLeft: {
      points: ['tl', 'bl'],
      overflow: autoAdjustOverflow$1,
      offset: [0, 4],
      targetOffset: targetOffset
    },
    bottomCenter: {
      points: ['tc', 'bc'],
      overflow: autoAdjustOverflow$1,
      offset: [0, 4],
      targetOffset: targetOffset
    },
    bottomRight: {
      points: ['tr', 'br'],
      overflow: autoAdjustOverflow$1,
      offset: [0, 4],
      targetOffset: targetOffset
    }
  };

  var Dropdown = {
    mixins: [BaseMixin],
    props: {
      minOverlayWidthMatchTrigger: VuePropTypes.bool,
      prefixCls: VuePropTypes.string.def('rc-dropdown'),
      transitionName: VuePropTypes.string,
      overlayClassName: VuePropTypes.string.def(''),
      openClassName: VuePropTypes.string,
      animation: VuePropTypes.any,
      align: VuePropTypes.object,
      overlayStyle: VuePropTypes.object.def(function () {
        return {};
      }),
      placement: VuePropTypes.string.def('bottomLeft'),
      overlay: VuePropTypes.any,
      trigger: VuePropTypes.array.def(['hover']),
      alignPoint: VuePropTypes.bool,
      showAction: VuePropTypes.array.def([]),
      hideAction: VuePropTypes.array.def([]),
      getPopupContainer: VuePropTypes.func,
      visible: VuePropTypes.bool,
      defaultVisible: VuePropTypes.bool.def(false),
      mouseEnterDelay: VuePropTypes.number.def(0.15),
      mouseLeaveDelay: VuePropTypes.number.def(0.1)
    },
    data: function data() {
      var sVisible = this.defaultVisible;
      if (hasProp(this, 'visible')) {
        sVisible = this.visible;
      }
      return {
        sVisible: sVisible
      };
    },

    watch: {
      visible: function visible(val) {
        if (val !== undefined) {
          this.setState({
            sVisible: val
          });
        }
      }
    },
    methods: {
      onClick: function onClick(e) {
        // do no call onVisibleChange, if you need click to hide, use onClick and control visible
        if (!hasProp(this, 'visible')) {
          this.setState({
            sVisible: false
          });
        }
        this.$emit('overlayClick', e);
        if (this.childOriginEvents.click) {
          this.childOriginEvents.click(e);
        }
      },
      onVisibleChange: function onVisibleChange(visible) {
        if (!hasProp(this, 'visible')) {
          this.setState({
            sVisible: visible
          });
        }
        this.__emit('visibleChange', visible);
      },
      getMinOverlayWidthMatchTrigger: function getMinOverlayWidthMatchTrigger() {
        var props = getOptionProps(this);
        var minOverlayWidthMatchTrigger = props.minOverlayWidthMatchTrigger,
            alignPoint = props.alignPoint;

        if ('minOverlayWidthMatchTrigger' in props) {
          return minOverlayWidthMatchTrigger;
        }

        return !alignPoint;
      },
      getOverlayElement: function getOverlayElement() {
        var overlay = this.overlay || this.$slots.overlay || this.$scopedSlots.overlay;
        var overlayElement = void 0;
        if (typeof overlay === 'function') {
          overlayElement = overlay();
        } else {
          overlayElement = overlay;
        }
        return overlayElement;
      },
      getMenuElement: function getMenuElement() {
        var _this = this;

        var onClick = this.onClick,
            prefixCls = this.prefixCls,
            $slots = this.$slots;

        this.childOriginEvents = getEvents($slots.overlay[0]);
        var overlayElement = this.getOverlayElement();
        var extraOverlayProps = {
          props: {
            prefixCls: prefixCls + '-menu',
            getPopupContainer: function getPopupContainer() {
              return _this.getPopupDomNode();
            }
          },
          on: {
            click: onClick
          }
        };
        if (typeof overlayElement.type === 'string') {
          delete extraOverlayProps.props.prefixCls;
        }
        return cloneElement($slots.overlay[0], extraOverlayProps);
      },
      getMenuElementOrLambda: function getMenuElementOrLambda() {
        var overlay = this.overlay || this.$slots.overlay || this.$scopedSlots.overlay;
        if (typeof overlay === 'function') {
          return this.getMenuElement;
        }
        return this.getMenuElement();
      },
      getPopupDomNode: function getPopupDomNode() {
        return this.$refs.trigger.getPopupDomNode();
      },
      getOpenClassName: function getOpenClassName() {
        var _$props = this.$props,
            openClassName = _$props.openClassName,
            prefixCls = _$props.prefixCls;

        if (openClassName !== undefined) {
          return openClassName;
        }
        return prefixCls + '-open';
      },
      afterVisibleChange: function afterVisibleChange(visible) {
        if (visible && this.getMinOverlayWidthMatchTrigger()) {
          var overlayNode = this.getPopupDomNode();
          var rootNode = this.$el;
          if (rootNode && overlayNode && rootNode.offsetWidth > overlayNode.offsetWidth) {
            overlayNode.style.minWidth = rootNode.offsetWidth + 'px';
            if (this.$refs.trigger && this.$refs.trigger._component && this.$refs.trigger._component.$refs && this.$refs.trigger._component.$refs.alignInstance) {
              this.$refs.trigger._component.$refs.alignInstance.forceAlign();
            }
          }
        }
      },
      renderChildren: function renderChildren() {
        var children = this.$slots['default'] && this.$slots['default'][0];
        var sVisible = this.sVisible;

        return sVisible && children ? cloneElement(children, { 'class': this.getOpenClassName() }) : children;
      }
    },

    render: function render() {
      var h = arguments[0];

      var _$props2 = this.$props,
          prefixCls = _$props2.prefixCls,
          transitionName = _$props2.transitionName,
          animation = _$props2.animation,
          align = _$props2.align,
          placement = _$props2.placement,
          getPopupContainer = _$props2.getPopupContainer,
          showAction = _$props2.showAction,
          hideAction = _$props2.hideAction,
          overlayClassName = _$props2.overlayClassName,
          overlayStyle = _$props2.overlayStyle,
          trigger = _$props2.trigger,
          otherProps = _objectWithoutProperties(_$props2, ['prefixCls', 'transitionName', 'animation', 'align', 'placement', 'getPopupContainer', 'showAction', 'hideAction', 'overlayClassName', 'overlayStyle', 'trigger']);

      var triggerHideAction = hideAction;
      if (!triggerHideAction && trigger.indexOf('contextmenu') !== -1) {
        triggerHideAction = ['click'];
      }

      var triggerProps = {
        props: _extends$1({}, otherProps, {
          prefixCls: prefixCls,
          popupClassName: overlayClassName,
          popupStyle: overlayStyle,
          builtinPlacements: placements$1,
          action: trigger,
          showAction: showAction,
          hideAction: triggerHideAction || [],
          popupPlacement: placement,
          popupAlign: align,
          popupTransitionName: transitionName,
          popupAnimation: animation,
          popupVisible: this.sVisible,
          afterPopupVisibleChange: this.afterVisibleChange,
          getPopupContainer: getPopupContainer
        }),
        on: {
          popupVisibleChange: this.onVisibleChange
        },
        ref: 'trigger'
      };
      return h(
        Trigger,
        triggerProps,
        [this.renderChildren(), h(
          'template',
          { slot: 'popup' },
          [this.$slots.overlay && this.getMenuElement()]
        )]
      );
    }
  };

  var getDropdownProps = (function () {
    return {
      trigger: VuePropTypes.array.def(['hover']),
      overlay: VuePropTypes.any,
      visible: VuePropTypes.bool,
      disabled: VuePropTypes.bool,
      align: VuePropTypes.object,
      getPopupContainer: VuePropTypes.func,
      prefixCls: VuePropTypes.string,
      transitionName: VuePropTypes.string,
      placement: VuePropTypes.oneOf(['topLeft', 'topCenter', 'topRight', 'bottomLeft', 'bottomCenter', 'bottomRight']),
      overlayClassName: VuePropTypes.string,
      overlayStyle: VuePropTypes.object,
      forceRender: VuePropTypes.bool,
      mouseEnterDelay: VuePropTypes.number,
      mouseLeaveDelay: VuePropTypes.number,
      openClassName: VuePropTypes.string,
      minOverlayWidthMatchTrigger: VuePropTypes.bool
    };
  });

  var ButtonTypesProps = buttonTypes();
  var DropdownProps = getDropdownProps();
  var ButtonGroup$1 = Button.Group;
  var DropdownButtonProps = _extends$1({}, ButtonGroupProps, DropdownProps, {
    type: VuePropTypes.oneOf(['primary', 'ghost', 'dashed', 'danger', 'default']).def('default'),
    size: VuePropTypes.oneOf(['small', 'large', 'default']).def('default'),
    htmlType: ButtonTypesProps.htmlType,
    href: VuePropTypes.string,
    disabled: VuePropTypes.bool,
    prefixCls: VuePropTypes.string,
    placement: DropdownProps.placement.def('bottomRight'),
    icon: VuePropTypes.any,
    title: VuePropTypes.string
  });
  var DropdownButton = {
    name: 'ADropdownButton',
    model: {
      prop: 'visible',
      event: 'visibleChange'
    },
    props: DropdownButtonProps,
    provide: function provide() {
      return {
        savePopupRef: this.savePopupRef
      };
    },

    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      savePopupRef: function savePopupRef(ref) {
        this.popupRef = ref;
      },
      onClick: function onClick(e) {
        this.$emit('click', e);
      },
      onVisibleChange: function onVisibleChange(val) {
        this.$emit('visibleChange', val);
      }
    },
    render: function render() {
      var h = arguments[0];

      var _$props = this.$props,
          type = _$props.type,
          disabled = _$props.disabled,
          htmlType = _$props.htmlType,
          customizePrefixCls = _$props.prefixCls,
          trigger = _$props.trigger,
          align = _$props.align,
          visible = _$props.visible,
          placement = _$props.placement,
          getPopupContainer = _$props.getPopupContainer,
          href = _$props.href,
          title = _$props.title,
          restProps = _objectWithoutProperties(_$props, ['type', 'disabled', 'htmlType', 'prefixCls', 'trigger', 'align', 'visible', 'placement', 'getPopupContainer', 'href', 'title']);

      var icon = getComponentFromProp(this, 'icon') || h(Icon$1, {
        attrs: { type: 'ellipsis' }
      });
      var getContextPopupContainer = this.configProvider.getPopupContainer;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('dropdown-button', customizePrefixCls);
      var dropdownProps = {
        props: {
          align: align,
          disabled: disabled,
          trigger: disabled ? [] : trigger,
          placement: placement,
          getPopupContainer: getPopupContainer || getContextPopupContainer
        },
        on: {
          visibleChange: this.onVisibleChange
        }
      };
      if (hasProp(this, 'visible')) {
        dropdownProps.props.visible = visible;
      }

      var buttonGroupProps = {
        props: _extends$1({}, restProps),
        'class': prefixCls
      };

      return h(
        ButtonGroup$1,
        buttonGroupProps,
        [h(
          Button,
          {
            attrs: {
              type: type,
              disabled: disabled,

              htmlType: htmlType,
              href: href,
              title: title
            },
            on: {
              'click': this.onClick
            }
          },
          [this.$slots['default']]
        ), h(
          Dropdown$1,
          dropdownProps,
          [h(
            'template',
            { slot: 'overlay' },
            [getComponentFromProp(this, 'overlay')]
          ), h(
            Button,
            {
              attrs: { type: type }
            },
            [icon]
          )]
        )]
      );
    }
  };

  var DropdownProps$1 = getDropdownProps();
  var Dropdown$1 = {
    name: 'ADropdown',
    props: _extends$1({}, DropdownProps$1, {
      prefixCls: VuePropTypes.string,
      mouseEnterDelay: VuePropTypes.number.def(0.15),
      mouseLeaveDelay: VuePropTypes.number.def(0.1),
      placement: DropdownProps$1.placement.def('bottomLeft')
    }),
    model: {
      prop: 'visible',
      event: 'visibleChange'
    },
    provide: function provide() {
      return {
        savePopupRef: this.savePopupRef
      };
    },

    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      savePopupRef: function savePopupRef(ref) {
        this.popupRef = ref;
      },
      getTransitionName: function getTransitionName() {
        var _$props = this.$props,
            _$props$placement = _$props.placement,
            placement = _$props$placement === undefined ? '' : _$props$placement,
            transitionName = _$props.transitionName;

        if (transitionName !== undefined) {
          return transitionName;
        }
        if (placement.indexOf('top') >= 0) {
          return 'slide-down';
        }
        return 'slide-up';
      },
      renderOverlay: function renderOverlay(prefixCls) {
        var h = this.$createElement;

        var overlay = getComponentFromProp(this, 'overlay');
        var overlayNode = Array.isArray(overlay) ? overlay[0] : overlay;
        // menu cannot be selectable in dropdown defaultly
        // menu should be focusable in dropdown defaultly
        var overlayProps = overlayNode && getPropsData(overlayNode);

        var _ref = overlayProps || {},
            _ref$selectable = _ref.selectable,
            selectable = _ref$selectable === undefined ? false : _ref$selectable,
            _ref$focusable = _ref.focusable,
            focusable = _ref$focusable === undefined ? true : _ref$focusable;

        var expandIcon = h(
          'span',
          { 'class': prefixCls + '-menu-submenu-arrow' },
          [h(Icon$1, {
            attrs: { type: 'right' },
            'class': prefixCls + '-menu-submenu-arrow-icon' })]
        );

        var fixedModeOverlay = overlayNode && overlayNode.componentOptions ? cloneElement(overlayNode, {
          props: {
            mode: 'vertical',
            selectable: selectable,
            focusable: focusable,
            expandIcon: expandIcon
          }
        }) : overlay;
        return fixedModeOverlay;
      }
    },

    render: function render() {
      var h = arguments[0];
      var $slots = this.$slots;

      var props = getOptionProps(this);
      var customizePrefixCls = props.prefixCls,
          trigger = props.trigger,
          disabled = props.disabled,
          getPopupContainer = props.getPopupContainer;
      var getContextPopupContainer = this.configProvider.getPopupContainer;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('dropdown', customizePrefixCls);

      var dropdownTrigger = cloneElement($slots['default'], {
        'class': prefixCls + '-trigger',
        props: {
          disabled: disabled
        }
      });
      var triggerActions = disabled ? [] : trigger;
      var alignPoint = void 0;
      if (triggerActions && triggerActions.indexOf('contextmenu') !== -1) {
        alignPoint = true;
      }
      var dropdownProps = {
        props: _extends$1({
          alignPoint: alignPoint
        }, props, {
          prefixCls: prefixCls,
          getPopupContainer: getPopupContainer || getContextPopupContainer,
          transitionName: this.getTransitionName(),
          trigger: triggerActions
        }),
        on: getListeners(this)
      };
      return h(
        Dropdown,
        dropdownProps,
        [dropdownTrigger, h(
          'template',
          { slot: 'overlay' },
          [this.renderOverlay(prefixCls)]
        )]
      );
    }
  };

  Dropdown$1.Button = DropdownButton;

  var BreadcrumbItem = {
    name: 'ABreadcrumbItem',
    __ANT_BREADCRUMB_ITEM: true,
    props: {
      prefixCls: VuePropTypes.string,
      href: VuePropTypes.string,
      separator: VuePropTypes.any.def('/'),
      overlay: VuePropTypes.any
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      /**
       * if overlay is have
       * Wrap a DropDown
       */
      renderBreadcrumbNode: function renderBreadcrumbNode(breadcrumbItem, prefixCls) {
        var h = this.$createElement;

        var overlay = getComponentFromProp(this, 'overlay');
        if (overlay) {
          return h(
            Dropdown$1,
            {
              attrs: { overlay: overlay, placement: 'bottomCenter' }
            },
            [h(
              'span',
              { 'class': prefixCls + '-overlay-link' },
              [breadcrumbItem, h(Icon$1, {
                attrs: { type: 'down' }
              })]
            )]
          );
        }
        return breadcrumbItem;
      }
    },
    render: function render() {
      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          $slots = this.$slots;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('breadcrumb', customizePrefixCls);
      var separator = getComponentFromProp(this, 'separator');
      var children = $slots['default'];
      var link = void 0;
      if (hasProp(this, 'href')) {
        link = h(
          'a',
          { 'class': prefixCls + '-link' },
          [children]
        );
      } else {
        link = h(
          'span',
          { 'class': prefixCls + '-link' },
          [children]
        );
      }
      // wrap to dropDown
      link = this.renderBreadcrumbNode(link, prefixCls);
      if (children) {
        return h('span', [link, separator && separator !== '' && h(
          'span',
          { 'class': prefixCls + '-separator' },
          [separator]
        )]);
      }
      return null;
    }
  };

  var SubMenu$1 = {
    name: 'ASubMenu',
    isSubMenu: true,
    props: _extends$1({}, connected.props),
    inject: {
      menuPropsContext: { 'default': function _default() {
          return {};
        } }
    },
    methods: {
      onKeyDown: function onKeyDown(e) {
        this.$refs.subMenu.onKeyDown(e);
      }
    },

    render: function render() {
      var h = arguments[0];
      var $slots = this.$slots,
          $scopedSlots = this.$scopedSlots;
      var _$props = this.$props,
          rootPrefixCls = _$props.rootPrefixCls,
          popupClassName = _$props.popupClassName;
      var antdMenuTheme = this.menuPropsContext.theme;

      var props = {
        props: _extends$1({}, this.$props, {
          popupClassName: classnames(rootPrefixCls + '-' + antdMenuTheme, popupClassName)
        }),
        ref: 'subMenu',
        on: getListeners(this),
        scopedSlots: $scopedSlots
      };
      var slotsKey = Object.keys($slots);
      return h(
        connected,
        props,
        [slotsKey.length ? slotsKey.map(function (name) {
          return h(
            'template',
            { slot: name },
            [$slots[name]]
          );
        }) : null]
      );
    }
  };

  function animate(node, show, done) {
    var height = void 0;
    var requestAnimationFrameId = void 0;
    var appearRequestAnimationFrameId = void 0;
    return cssAnimation(node, 'ant-motion-collapse-legacy', {
      start: function start() {
        if (appearRequestAnimationFrameId) {
          raf_1.cancel(appearRequestAnimationFrameId);
        }
        if (!show) {
          node.style.height = node.offsetHeight + 'px';
          node.style.opacity = '1';
        } else {
          height = node.offsetHeight;
          // not get offsetHeight when appear
          // set it into raf get correct offsetHeight
          if (height === 0) {
            appearRequestAnimationFrameId = raf_1(function () {
              height = node.offsetHeight;
              node.style.height = '0px';
              node.style.opacity = '0';
            });
          } else {
            node.style.height = '0px';
            node.style.opacity = '0';
          }
        }
      },
      active: function active() {
        if (requestAnimationFrameId) {
          raf_1.cancel(requestAnimationFrameId);
        }
        requestAnimationFrameId = raf_1(function () {
          node.style.height = (show ? height : 0) + 'px';
          node.style.opacity = show ? '1' : '0';
        });
      },
      end: function end() {
        if (appearRequestAnimationFrameId) {
          raf_1.cancel(appearRequestAnimationFrameId);
        }
        if (requestAnimationFrameId) {
          raf_1.cancel(requestAnimationFrameId);
        }
        node.style.height = '';
        node.style.opacity = '';
        done && done();
      }
    });
  }

  var animation = {
    enter: function enter(node, done) {
      Vue.nextTick(function () {
        animate(node, true, done);
      });
    },
    leave: function leave(node, done) {
      return animate(node, false, done);
    }
  };

  var autoAdjustOverflow$2 = {
    adjustX: 1,
    adjustY: 1
  };

  var targetOffset$1 = [0, 0];

  var placements$2 = {
    left: {
      points: ['cr', 'cl'],
      overflow: autoAdjustOverflow$2,
      offset: [-4, 0],
      targetOffset: targetOffset$1
    },
    right: {
      points: ['cl', 'cr'],
      overflow: autoAdjustOverflow$2,
      offset: [4, 0],
      targetOffset: targetOffset$1
    },
    top: {
      points: ['bc', 'tc'],
      overflow: autoAdjustOverflow$2,
      offset: [0, -4],
      targetOffset: targetOffset$1
    },
    bottom: {
      points: ['tc', 'bc'],
      overflow: autoAdjustOverflow$2,
      offset: [0, 4],
      targetOffset: targetOffset$1
    },
    topLeft: {
      points: ['bl', 'tl'],
      overflow: autoAdjustOverflow$2,
      offset: [0, -4],
      targetOffset: targetOffset$1
    },
    leftTop: {
      points: ['tr', 'tl'],
      overflow: autoAdjustOverflow$2,
      offset: [-4, 0],
      targetOffset: targetOffset$1
    },
    topRight: {
      points: ['br', 'tr'],
      overflow: autoAdjustOverflow$2,
      offset: [0, -4],
      targetOffset: targetOffset$1
    },
    rightTop: {
      points: ['tl', 'tr'],
      overflow: autoAdjustOverflow$2,
      offset: [4, 0],
      targetOffset: targetOffset$1
    },
    bottomRight: {
      points: ['tr', 'br'],
      overflow: autoAdjustOverflow$2,
      offset: [0, 4],
      targetOffset: targetOffset$1
    },
    rightBottom: {
      points: ['bl', 'br'],
      overflow: autoAdjustOverflow$2,
      offset: [4, 0],
      targetOffset: targetOffset$1
    },
    bottomLeft: {
      points: ['tl', 'bl'],
      overflow: autoAdjustOverflow$2,
      offset: [0, 4],
      targetOffset: targetOffset$1
    },
    leftBottom: {
      points: ['br', 'bl'],
      overflow: autoAdjustOverflow$2,
      offset: [-4, 0],
      targetOffset: targetOffset$1
    }
  };

  var Content = {
    props: {
      prefixCls: VuePropTypes.string,
      overlay: VuePropTypes.any,
      trigger: VuePropTypes.any
    },
    updated: function updated() {
      var trigger = this.trigger;

      if (trigger) {
        trigger.forcePopupAlign();
      }
    },
    render: function render() {
      var h = arguments[0];
      var overlay = this.overlay,
          prefixCls = this.prefixCls;

      return h(
        'div',
        { 'class': prefixCls + '-inner', attrs: { role: 'tooltip' }
        },
        [typeof overlay === 'function' ? overlay() : overlay]
      );
    }
  };

  function noop$8() {}
  var Tooltip = {
    props: {
      trigger: VuePropTypes.any.def(['hover']),
      defaultVisible: VuePropTypes.bool,
      visible: VuePropTypes.bool,
      placement: VuePropTypes.string.def('right'),
      transitionName: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.object]),
      animation: VuePropTypes.any,
      afterVisibleChange: VuePropTypes.func.def(function () {}),
      overlay: VuePropTypes.any,
      overlayStyle: VuePropTypes.object,
      overlayClassName: VuePropTypes.string,
      prefixCls: VuePropTypes.string.def('rc-tooltip'),
      mouseEnterDelay: VuePropTypes.number.def(0),
      mouseLeaveDelay: VuePropTypes.number.def(0.1),
      getTooltipContainer: VuePropTypes.func,
      destroyTooltipOnHide: VuePropTypes.bool.def(false),
      align: VuePropTypes.object.def(function () {
        return {};
      }),
      arrowContent: VuePropTypes.any.def(null),
      tipId: VuePropTypes.string,
      builtinPlacements: VuePropTypes.object
    },
    methods: {
      getPopupElement: function getPopupElement() {
        var h = this.$createElement;
        var _$props = this.$props,
            prefixCls = _$props.prefixCls,
            tipId = _$props.tipId;

        return [h(
          'div',
          { 'class': prefixCls + '-arrow', key: 'arrow' },
          [getComponentFromProp(this, 'arrowContent')]
        ), h(Content, {
          key: 'content',
          attrs: { trigger: this.$refs.trigger,
            prefixCls: prefixCls,
            id: tipId,
            overlay: getComponentFromProp(this, 'overlay')
          }
        })];
      },
      getPopupDomNode: function getPopupDomNode() {
        return this.$refs.trigger.getPopupDomNode();
      }
    },
    render: function render(h) {
      var _getOptionProps = getOptionProps(this),
          overlayClassName = _getOptionProps.overlayClassName,
          trigger = _getOptionProps.trigger,
          mouseEnterDelay = _getOptionProps.mouseEnterDelay,
          mouseLeaveDelay = _getOptionProps.mouseLeaveDelay,
          overlayStyle = _getOptionProps.overlayStyle,
          prefixCls = _getOptionProps.prefixCls,
          afterVisibleChange = _getOptionProps.afterVisibleChange,
          transitionName = _getOptionProps.transitionName,
          animation = _getOptionProps.animation,
          placement = _getOptionProps.placement,
          align = _getOptionProps.align,
          destroyTooltipOnHide = _getOptionProps.destroyTooltipOnHide,
          defaultVisible = _getOptionProps.defaultVisible,
          getTooltipContainer = _getOptionProps.getTooltipContainer,
          restProps = _objectWithoutProperties(_getOptionProps, ['overlayClassName', 'trigger', 'mouseEnterDelay', 'mouseLeaveDelay', 'overlayStyle', 'prefixCls', 'afterVisibleChange', 'transitionName', 'animation', 'placement', 'align', 'destroyTooltipOnHide', 'defaultVisible', 'getTooltipContainer']);

      var extraProps = _extends$1({}, restProps);
      if (hasProp(this, 'visible')) {
        extraProps.popupVisible = this.$props.visible;
      }
      var listeners = getListeners(this);
      var triggerProps = {
        props: _extends$1({
          popupClassName: overlayClassName,
          prefixCls: prefixCls,
          action: trigger,
          builtinPlacements: placements$2,
          popupPlacement: placement,
          popupAlign: align,
          getPopupContainer: getTooltipContainer,
          afterPopupVisibleChange: afterVisibleChange,
          popupTransitionName: transitionName,
          popupAnimation: animation,
          defaultPopupVisible: defaultVisible,
          destroyPopupOnHide: destroyTooltipOnHide,
          mouseLeaveDelay: mouseLeaveDelay,
          popupStyle: overlayStyle,
          mouseEnterDelay: mouseEnterDelay
        }, extraProps),
        on: _extends$1({}, listeners, {
          popupVisibleChange: listeners.visibleChange || noop$8,
          popupAlign: listeners.popupAlign || noop$8
        }),
        ref: 'trigger'
      };
      return h(
        Trigger,
        triggerProps,
        [h(
          'template',
          { slot: 'popup' },
          [this.getPopupElement(h)]
        ), this.$slots['default']]
      );
    }
  };

  var autoAdjustOverflowEnabled = {
    adjustX: 1,
    adjustY: 1
  };

  var autoAdjustOverflowDisabled = {
    adjustX: 0,
    adjustY: 0
  };

  var targetOffset$2 = [0, 0];

  function getOverflowOptions(autoAdjustOverflow) {
    if (typeof autoAdjustOverflow === 'boolean') {
      return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;
    }
    return _extends$1({}, autoAdjustOverflowDisabled, autoAdjustOverflow);
  }

  function getPlacements(config) {
    var _config$arrowWidth = config.arrowWidth,
        arrowWidth = _config$arrowWidth === undefined ? 5 : _config$arrowWidth,
        _config$horizontalArr = config.horizontalArrowShift,
        horizontalArrowShift = _config$horizontalArr === undefined ? 16 : _config$horizontalArr,
        _config$verticalArrow = config.verticalArrowShift,
        verticalArrowShift = _config$verticalArrow === undefined ? 12 : _config$verticalArrow,
        _config$autoAdjustOve = config.autoAdjustOverflow,
        autoAdjustOverflow = _config$autoAdjustOve === undefined ? true : _config$autoAdjustOve;

    var placementMap = {
      left: {
        points: ['cr', 'cl'],
        offset: [-4, 0]
      },
      right: {
        points: ['cl', 'cr'],
        offset: [4, 0]
      },
      top: {
        points: ['bc', 'tc'],
        offset: [0, -4]
      },
      bottom: {
        points: ['tc', 'bc'],
        offset: [0, 4]
      },
      topLeft: {
        points: ['bl', 'tc'],
        offset: [-(horizontalArrowShift + arrowWidth), -4]
      },
      leftTop: {
        points: ['tr', 'cl'],
        offset: [-4, -(verticalArrowShift + arrowWidth)]
      },
      topRight: {
        points: ['br', 'tc'],
        offset: [horizontalArrowShift + arrowWidth, -4]
      },
      rightTop: {
        points: ['tl', 'cr'],
        offset: [4, -(verticalArrowShift + arrowWidth)]
      },
      bottomRight: {
        points: ['tr', 'bc'],
        offset: [horizontalArrowShift + arrowWidth, 4]
      },
      rightBottom: {
        points: ['bl', 'cr'],
        offset: [4, verticalArrowShift + arrowWidth]
      },
      bottomLeft: {
        points: ['tl', 'bc'],
        offset: [-(horizontalArrowShift + arrowWidth), 4]
      },
      leftBottom: {
        points: ['br', 'cl'],
        offset: [-4, verticalArrowShift + arrowWidth]
      }
    };
    Object.keys(placementMap).forEach(function (key) {
      placementMap[key] = config.arrowPointAtCenter ? _extends$1({}, placementMap[key], {
        overflow: getOverflowOptions(autoAdjustOverflow),
        targetOffset: targetOffset$2
      }) : _extends$1({}, placements$2[key], {
        overflow: getOverflowOptions(autoAdjustOverflow)
      });
      placementMap[key].ignoreShake = true;
    });
    return placementMap;
  }

  var triggerType = VuePropTypes.oneOf(['hover', 'focus', 'click', 'contextmenu']);
  var abstractTooltipProps = (function () {
    return {
      trigger: VuePropTypes.oneOfType([triggerType, VuePropTypes.arrayOf(triggerType)]).def('hover'),
      visible: VuePropTypes.bool,
      defaultVisible: VuePropTypes.bool,
      placement: VuePropTypes.oneOf(['top', 'left', 'right', 'bottom', 'topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'leftTop', 'leftBottom', 'rightTop', 'rightBottom']).def('top'),
      transitionName: VuePropTypes.string.def('zoom-big-fast'),
      // onVisibleChange: PropTypes.func,
      overlayStyle: VuePropTypes.object.def(function () {
        return {};
      }),
      overlayClassName: VuePropTypes.string,
      prefixCls: VuePropTypes.string,
      mouseEnterDelay: VuePropTypes.number.def(0.1),
      mouseLeaveDelay: VuePropTypes.number.def(0.1),
      getPopupContainer: VuePropTypes.func,
      arrowPointAtCenter: VuePropTypes.bool.def(false),
      autoAdjustOverflow: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.object]).def(true),
      destroyTooltipOnHide: VuePropTypes.bool.def(false),
      align: VuePropTypes.object.def(function () {
        return {};
      }),
      builtinPlacements: VuePropTypes.object
    };
  });

  var splitObject = function splitObject(obj, keys) {
    var picked = {};
    var omitted = _extends$1({}, obj);
    keys.forEach(function (key) {
      if (obj && key in obj) {
        picked[key] = obj[key];
        delete omitted[key];
      }
    });
    return { picked: picked, omitted: omitted };
  };
  var props$3 = abstractTooltipProps();
  var ToolTip = {
    name: 'ATooltip',
    model: {
      prop: 'visible',
      event: 'visibleChange'
    },
    props: _extends$1({}, props$3, {
      title: VuePropTypes.any
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      return {
        sVisible: !!this.$props.visible || !!this.$props.defaultVisible
      };
    },

    watch: {
      visible: function visible(val) {
        this.sVisible = val;
      }
    },
    methods: {
      onVisibleChange: function onVisibleChange(visible) {
        if (!hasProp(this, 'visible')) {
          this.sVisible = this.isNoTitle() ? false : visible;
        }
        if (!this.isNoTitle()) {
          this.$emit('visibleChange', visible);
        }
      },
      getPopupDomNode: function getPopupDomNode() {
        return this.$refs.tooltip.getPopupDomNode();
      },
      getPlacements: function getPlacements$1() {
        var _$props = this.$props,
            builtinPlacements = _$props.builtinPlacements,
            arrowPointAtCenter = _$props.arrowPointAtCenter,
            autoAdjustOverflow = _$props.autoAdjustOverflow;

        return builtinPlacements || getPlacements({
          arrowPointAtCenter: arrowPointAtCenter,
          verticalArrowShift: 8,
          autoAdjustOverflow: autoAdjustOverflow
        });
      },


      // Fix Tooltip won't hide at disabled button
      // mouse events don't trigger at disabled button in Chrome
      // https://github.com/react-component/tooltip/issues/18
      getDisabledCompatibleChildren: function getDisabledCompatibleChildren(ele) {
        var h = this.$createElement;

        var options = ele.componentOptions && ele.componentOptions.Ctor.options || {};

        if ((options.__ANT_BUTTON === true || options.__ANT_SWITCH === true || options.__ANT_CHECKBOX === true) && (ele.componentOptions.propsData.disabled || ele.componentOptions.propsData.disabled === '') || ele.tag === 'button' && ele.data && ele.data.attrs && ele.data.attrs.disabled !== undefined) {
          // Pick some layout related style properties up to span
          // Prevent layout bugs like https://github.com/ant-design/ant-design/issues/5254
          var _splitObject = splitObject(getStyle(ele), ['position', 'left', 'right', 'top', 'bottom', 'float', 'display', 'zIndex']),
              picked = _splitObject.picked,
              omitted = _splitObject.omitted;

          var spanStyle = _extends$1({
            display: 'inline-block' }, picked, {
            cursor: 'not-allowed',
            width: ele.componentOptions.propsData.block ? '100%' : null
          });
          var buttonStyle = _extends$1({}, omitted, {
            pointerEvents: 'none'
          });
          var spanCls = getClass(ele);
          var child = cloneElement(ele, {
            style: buttonStyle,
            'class': null
          });
          return h(
            'span',
            { style: spanStyle, 'class': spanCls },
            [child]
          );
        }
        return ele;
      },
      isNoTitle: function isNoTitle() {
        var title = getComponentFromProp(this, 'title');
        return !title && title !== 0;
      },
      getOverlay: function getOverlay() {
        var title = getComponentFromProp(this, 'title');
        if (title === 0) {
          return title;
        }
        return title || '';
      },


      // 动态设置动画点
      onPopupAlign: function onPopupAlign(domNode, align) {
        var placements = this.getPlacements();
        // 当前返回的位置
        var placement = Object.keys(placements).filter(function (key) {
          return placements[key].points[0] === align.points[0] && placements[key].points[1] === align.points[1];
        })[0];
        if (!placement) {
          return;
        }
        // 根据当前坐标设置动画点
        var rect = domNode.getBoundingClientRect();
        var transformOrigin = {
          top: '50%',
          left: '50%'
        };
        if (placement.indexOf('top') >= 0 || placement.indexOf('Bottom') >= 0) {
          transformOrigin.top = rect.height - align.offset[1] + 'px';
        } else if (placement.indexOf('Top') >= 0 || placement.indexOf('bottom') >= 0) {
          transformOrigin.top = -align.offset[1] + 'px';
        }
        if (placement.indexOf('left') >= 0 || placement.indexOf('Right') >= 0) {
          transformOrigin.left = rect.width - align.offset[0] + 'px';
        } else if (placement.indexOf('right') >= 0 || placement.indexOf('Left') >= 0) {
          transformOrigin.left = -align.offset[0] + 'px';
        }
        domNode.style.transformOrigin = transformOrigin.left + ' ' + transformOrigin.top;
      }
    },

    render: function render() {
      var h = arguments[0];
      var $props = this.$props,
          $data = this.$data,
          $slots = this.$slots;
      var customizePrefixCls = $props.prefixCls,
          openClassName = $props.openClassName,
          getPopupContainer = $props.getPopupContainer;
      var getContextPopupContainer = this.configProvider.getPopupContainer;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('tooltip', customizePrefixCls);
      var children = ($slots['default'] || []).filter(function (c) {
        return c.tag || c.text.trim() !== '';
      });
      children = children.length === 1 ? children[0] : children;
      var sVisible = $data.sVisible;
      // Hide tooltip when there is no title
      if (!hasProp(this, 'visible') && this.isNoTitle()) {
        sVisible = false;
      }
      if (!children) {
        return null;
      }
      var child = this.getDisabledCompatibleChildren(isValidElement(children) ? children : h('span', [children]));
      var childCls = _defineProperty({}, openClassName || prefixCls + '-open', true);
      var tooltipProps = {
        props: _extends$1({}, $props, {
          prefixCls: prefixCls,
          getTooltipContainer: getPopupContainer || getContextPopupContainer,
          builtinPlacements: this.getPlacements(),
          overlay: this.getOverlay(),
          visible: sVisible
        }),
        ref: 'tooltip',
        on: _extends$1({}, getListeners(this), {
          visibleChange: this.onVisibleChange,
          popupAlign: this.onPopupAlign
        })
      };
      return h(
        Tooltip,
        tooltipProps,
        [sVisible ? cloneElement(child, { 'class': childCls }) : child]
      );
    }
  };

  /* istanbul ignore next */
  ToolTip.install = function (Vue) {
    Vue.use(base);
    Vue.component(ToolTip.name, ToolTip);
  };

  function noop$9() {}
  var Item = {
    name: 'MenuItem',
    inheritAttrs: false,
    props: props$1,
    inject: {
      getInlineCollapsed: { 'default': function _default() {
          return noop$9;
        } },
      layoutSiderContext: { 'default': function _default() {
          return {};
        } },
      injectExtraProps: {
        from: injectExtraPropsKey,
        'default': function _default() {
          return {};
        }
      }
    },
    isMenuItem: true,
    methods: {
      onKeyDown: function onKeyDown(e) {
        this.$refs.menuItem.onKeyDown(e);
      }
    },
    render: function render() {
      var h = arguments[0];

      var props = getOptionProps(this);

      var _props$injectExtraPro = _extends$1({}, props, this.injectExtraProps.$attrs),
          level = _props$injectExtraPro.level,
          title = _props$injectExtraPro.title,
          rootPrefixCls = _props$injectExtraPro.rootPrefixCls;

      var getInlineCollapsed = this.getInlineCollapsed,
          $slots = this.$slots,
          attrs = this.$attrs;

      var inlineCollapsed = getInlineCollapsed();
      var tooltipTitle = title;
      if (typeof title === 'undefined') {
        tooltipTitle = level === 1 ? $slots['default'] : '';
      } else if (title === false) {
        tooltipTitle = '';
      }
      var tooltipProps = {
        title: tooltipTitle
      };
      var siderCollapsed = this.layoutSiderContext.sCollapsed;
      if (!siderCollapsed && !inlineCollapsed) {
        tooltipProps.title = null;
        // Reset `visible` to fix control mode tooltip display not correct
        // ref: https://github.com/ant-design/ant-design/issues/16742
        tooltipProps.visible = false;
      }

      var itemProps = {
        props: _extends$1({}, props, {
          title: title
        }),
        attrs: attrs,
        on: getListeners(this)
      };
      var toolTipProps = {
        props: _extends$1({}, tooltipProps, {
          placement: 'right',
          overlayClassName: rootPrefixCls + '-inline-collapsed-tooltip'
        })
      };
      return h(
        ToolTip,
        toolTipProps,
        [h(
          connected$1,
          babelHelperVueJsxMergeProps([itemProps, { ref: 'menuItem' }]),
          [$slots['default']]
        )]
      );
    }
  };

  // import raf from '../_util/raf';

  var MenuMode = VuePropTypes.oneOf(['vertical', 'vertical-left', 'vertical-right', 'horizontal', 'inline']);

  var menuProps = _extends$1({}, commonPropsType, {
    theme: VuePropTypes.oneOf(['light', 'dark']).def('light'),
    mode: MenuMode.def('vertical'),
    selectable: VuePropTypes.bool,
    selectedKeys: VuePropTypes.arrayOf(VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number])),
    defaultSelectedKeys: VuePropTypes.array,
    openKeys: VuePropTypes.array,
    defaultOpenKeys: VuePropTypes.array,
    openAnimation: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.object]),
    openTransitionName: VuePropTypes.string,
    prefixCls: VuePropTypes.string,
    multiple: VuePropTypes.bool,
    inlineIndent: VuePropTypes.number.def(24),
    inlineCollapsed: VuePropTypes.bool,
    isRootMenu: VuePropTypes.bool.def(true),
    focusable: VuePropTypes.bool.def(false)
  });

  var Menu$1 = {
    name: 'AMenu',
    props: menuProps,
    Divider: _extends$1({}, Divider, { name: 'AMenuDivider' }),
    Item: _extends$1({}, Item, { name: 'AMenuItem' }),
    SubMenu: _extends$1({}, SubMenu$1, { name: 'ASubMenu' }),
    ItemGroup: _extends$1({}, MenuItemGroup, { name: 'AMenuItemGroup' }),
    provide: function provide() {
      return {
        getInlineCollapsed: this.getInlineCollapsed,
        menuPropsContext: this.$props
      };
    },

    mixins: [BaseMixin],
    inject: {
      layoutSiderContext: { 'default': function _default() {
          return {};
        } },
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    model: {
      prop: 'selectedKeys',
      event: 'selectChange'
    },
    updated: function updated() {
      this.propsUpdating = false;
    },

    // beforeDestroy() {
    //   raf.cancel(this.mountRafId);
    // },
    watch: {
      mode: function mode(val, oldVal) {
        if (oldVal === 'inline' && val !== 'inline') {
          this.switchingModeFromInline = true;
        }
      },
      openKeys: function openKeys(val) {
        this.setState({ sOpenKeys: val });
      },
      inlineCollapsed: function inlineCollapsed(val) {
        this.collapsedChange(val);
      },
      'layoutSiderContext.sCollapsed': function layoutSiderContextSCollapsed(val) {
        this.collapsedChange(val);
      }
    },
    data: function data() {
      var props = getOptionProps(this);
      warning$1(!('inlineCollapsed' in props && props.mode !== 'inline'), 'Menu', "`inlineCollapsed` should only be used when Menu's `mode` is inline.");
      this.switchingModeFromInline = false;
      this.leaveAnimationExecutedWhenInlineCollapsed = false;
      this.inlineOpenKeys = [];
      var sOpenKeys = void 0;

      if ('openKeys' in props) {
        sOpenKeys = props.openKeys;
      } else if ('defaultOpenKeys' in props) {
        sOpenKeys = props.defaultOpenKeys;
      }
      return {
        sOpenKeys: sOpenKeys
      };
    },

    methods: {
      collapsedChange: function collapsedChange(val) {
        if (this.propsUpdating) {
          return;
        }
        this.propsUpdating = true;
        if (!hasProp(this, 'openKeys')) {
          if (val) {
            this.switchingModeFromInline = true;
            this.inlineOpenKeys = this.sOpenKeys;
            this.setState({ sOpenKeys: [] });
          } else {
            this.setState({ sOpenKeys: this.inlineOpenKeys });
            this.inlineOpenKeys = [];
          }
        } else if (val) {
          // 缩起时，openKeys置为空的动画会闪动，react可以通过是否传递openKeys避免闪动，vue不是很方便动态传递openKeys
          this.switchingModeFromInline = true;
        }
      },
      restoreModeVerticalFromInline: function restoreModeVerticalFromInline() {
        if (this.switchingModeFromInline) {
          this.switchingModeFromInline = false;
          this.$forceUpdate();
        }
      },

      // Restore vertical mode when menu is collapsed responsively when mounted
      // https://github.com/ant-design/ant-design/issues/13104
      // TODO: not a perfect solution, looking a new way to avoid setting switchingModeFromInline in this situation
      handleMouseEnter: function handleMouseEnter(e) {
        this.restoreModeVerticalFromInline();
        this.$emit('mouseenter', e);
      },
      handleTransitionEnd: function handleTransitionEnd(e) {
        // when inlineCollapsed menu width animation finished
        // https://github.com/ant-design/ant-design/issues/12864
        var widthCollapsed = e.propertyName === 'width' && e.target === e.currentTarget;

        // Fix SVGElement e.target.className.indexOf is not a function
        // https://github.com/ant-design/ant-design/issues/15699
        var className = e.target.className;
        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during an animation.

        var classNameValue = Object.prototype.toString.call(className) === '[object SVGAnimatedString]' ? className.animVal : className;

        // Fix for <Menu style={{ width: '100%' }} />, the width transition won't trigger when menu is collapsed
        // https://github.com/ant-design/ant-design-pro/issues/2783
        var iconScaled = e.propertyName === 'font-size' && classNameValue.indexOf('anticon') >= 0;

        if (widthCollapsed || iconScaled) {
          this.restoreModeVerticalFromInline();
        }
      },
      handleClick: function handleClick(e) {
        this.handleOpenChange([]);
        this.$emit('click', e);
      },
      handleSelect: function handleSelect(info) {
        this.$emit('select', info);
        this.$emit('selectChange', info.selectedKeys);
      },
      handleDeselect: function handleDeselect(info) {
        this.$emit('deselect', info);
        this.$emit('selectChange', info.selectedKeys);
      },
      handleOpenChange: function handleOpenChange(openKeys) {
        this.setOpenKeys(openKeys);
        this.$emit('openChange', openKeys);
        this.$emit('update:openKeys', openKeys);
      },
      setOpenKeys: function setOpenKeys(openKeys) {
        if (!hasProp(this, 'openKeys')) {
          this.setState({ sOpenKeys: openKeys });
        }
      },
      getRealMenuMode: function getRealMenuMode() {
        var inlineCollapsed = this.getInlineCollapsed();
        if (this.switchingModeFromInline && inlineCollapsed) {
          return 'inline';
        }
        var mode = this.$props.mode;

        return inlineCollapsed ? 'vertical' : mode;
      },
      getInlineCollapsed: function getInlineCollapsed() {
        var inlineCollapsed = this.$props.inlineCollapsed;

        if (this.layoutSiderContext.sCollapsed !== undefined) {
          return this.layoutSiderContext.sCollapsed;
        }
        return inlineCollapsed;
      },
      getMenuOpenAnimation: function getMenuOpenAnimation(menuMode) {
        var _$props = this.$props,
            openAnimation = _$props.openAnimation,
            openTransitionName = _$props.openTransitionName;

        var menuOpenAnimation = openAnimation || openTransitionName;
        if (openAnimation === undefined && openTransitionName === undefined) {
          if (menuMode === 'horizontal') {
            menuOpenAnimation = 'slide-up';
          } else if (menuMode === 'inline') {
            menuOpenAnimation = { on: animation };
          } else {
            // When mode switch from inline
            // submenu should hide without animation
            if (this.switchingModeFromInline) {
              menuOpenAnimation = '';
              this.switchingModeFromInline = false;
            } else {
              menuOpenAnimation = 'zoom-big';
            }
          }
        }
        return menuOpenAnimation;
      }
    },
    render: function render() {
      var _menuClassName,
          _this = this;

      var h = arguments[0];
      var layoutSiderContext = this.layoutSiderContext,
          $slots = this.$slots;
      var collapsedWidth = layoutSiderContext.collapsedWidth;
      var getContextPopupContainer = this.configProvider.getPopupContainer;

      var props = getOptionProps(this);
      var customizePrefixCls = props.prefixCls,
          theme = props.theme,
          getPopupContainer = props.getPopupContainer;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('menu', customizePrefixCls);
      var menuMode = this.getRealMenuMode();
      var menuOpenAnimation = this.getMenuOpenAnimation(menuMode);

      var menuClassName = (_menuClassName = {}, _defineProperty(_menuClassName, prefixCls + '-' + theme, true), _defineProperty(_menuClassName, prefixCls + '-inline-collapsed', this.getInlineCollapsed()), _menuClassName);

      var menuProps = {
        props: _extends$1({}, omit(props, ['inlineCollapsed']), {
          getPopupContainer: getPopupContainer || getContextPopupContainer,
          openKeys: this.sOpenKeys,
          mode: menuMode,
          prefixCls: prefixCls
        }),
        on: _extends$1({}, getListeners(this), {
          select: this.handleSelect,
          deselect: this.handleDeselect,
          openChange: this.handleOpenChange,
          mouseenter: this.handleMouseEnter
        }),
        nativeOn: {
          transitionend: this.handleTransitionEnd
        }
      };
      if (!hasProp(this, 'selectedKeys')) {
        delete menuProps.props.selectedKeys;
      }

      if (menuMode !== 'inline') {
        // closing vertical popup submenu after click it
        menuProps.on.click = this.handleClick;
        menuProps.props.openTransitionName = menuOpenAnimation;
      } else {
        menuProps.on.click = function (e) {
          _this.$emit('click', e);
        };
        menuProps.props.openAnimation = menuOpenAnimation;
      }

      // https://github.com/ant-design/ant-design/issues/8587
      var hideMenu = this.getInlineCollapsed() && (collapsedWidth === 0 || collapsedWidth === '0' || collapsedWidth === '0px');
      if (hideMenu) {
        menuProps.props.openKeys = [];
      }

      return h(
        Menu,
        babelHelperVueJsxMergeProps([menuProps, { 'class': menuClassName }]),
        [$slots['default']]
      );
    }
  };

  /* istanbul ignore next */
  Menu$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Menu$1.name, Menu$1);
    Vue.component(Menu$1.Item.name, Menu$1.Item);
    Vue.component(Menu$1.SubMenu.name, Menu$1.SubMenu);
    Vue.component(Menu$1.Divider.name, Menu$1.Divider);
    Vue.component(Menu$1.ItemGroup.name, Menu$1.ItemGroup);
  };

  var Route = VuePropTypes.shape({
    path: VuePropTypes.string,
    breadcrumbName: VuePropTypes.string,
    children: VuePropTypes.array
  }).loose;

  var BreadcrumbProps = {
    prefixCls: VuePropTypes.string,
    routes: VuePropTypes.arrayOf(Route),
    params: VuePropTypes.any,
    separator: VuePropTypes.any,
    itemRender: VuePropTypes.func
  };

  function getBreadcrumbName(route, params) {
    if (!route.breadcrumbName) {
      return null;
    }
    var paramsKeys = Object.keys(params).join('|');
    var name = route.breadcrumbName.replace(new RegExp(':(' + paramsKeys + ')', 'g'), function (replacement, key) {
      return params[key] || replacement;
    });
    return name;
  }

  var Breadcrumb = {
    name: 'ABreadcrumb',
    props: BreadcrumbProps,
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      defaultItemRender: function defaultItemRender(_ref) {
        var route = _ref.route,
            params = _ref.params,
            routes = _ref.routes,
            paths = _ref.paths;
        var h = this.$createElement;

        var isLastItem = routes.indexOf(route) === routes.length - 1;
        var name = getBreadcrumbName(route, params);
        return isLastItem ? h('span', [name]) : h(
          'a',
          {
            attrs: { href: '#/' + paths.join('/') }
          },
          [name]
        );
      },
      getPath: function getPath(path, params) {
        path = (path || '').replace(/^\//, '');
        Object.keys(params).forEach(function (key) {
          path = path.replace(':' + key, params[key]);
        });
        return path;
      },
      addChildPath: function addChildPath(paths, childPath, params) {
        var originalPaths = [].concat(_toConsumableArray(paths));
        var path = this.getPath(childPath, params);
        if (path) {
          originalPaths.push(path);
        }
        return originalPaths;
      },
      genForRoutes: function genForRoutes(_ref2) {
        var _this = this;

        var _ref2$routes = _ref2.routes,
            routes = _ref2$routes === undefined ? [] : _ref2$routes,
            _ref2$params = _ref2.params,
            params = _ref2$params === undefined ? {} : _ref2$params,
            separator = _ref2.separator,
            _ref2$itemRender = _ref2.itemRender,
            itemRender = _ref2$itemRender === undefined ? this.defaultItemRender : _ref2$itemRender;
        var h = this.$createElement;

        var paths = [];
        return routes.map(function (route) {
          var path = _this.getPath(route.path, params);

          if (path) {
            paths.push(path);
          }
          // generated overlay by route.children
          var overlay = null;
          if (route.children && route.children.length) {
            overlay = h(Menu$1, [route.children.map(function (child) {
              return h(
                Menu$1.Item,
                { key: child.path || child.breadcrumbName },
                [itemRender({
                  route: child,
                  params: params,
                  routes: routes,
                  paths: _this.addChildPath(paths, child.path, params),
                  h: _this.$createElement
                })]
              );
            })]);
          }

          return h(
            BreadcrumbItem,
            {
              attrs: {
                overlay: overlay,
                separator: separator
              },
              key: path || route.breadcrumbName
            },
            [itemRender({ route: route, params: params, routes: routes, paths: paths, h: _this.$createElement })]
          );
        });
      }
    },
    render: function render() {
      var h = arguments[0];

      var crumbs = void 0;
      var customizePrefixCls = this.prefixCls,
          routes = this.routes,
          _params = this.params,
          params = _params === undefined ? {} : _params,
          $slots = this.$slots,
          $scopedSlots = this.$scopedSlots;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('breadcrumb', customizePrefixCls);

      var children = filterEmpty($slots['default']);
      var separator = getComponentFromProp(this, 'separator');
      var itemRender = this.itemRender || $scopedSlots.itemRender || this.defaultItemRender;
      if (routes && routes.length > 0) {
        // generated by route
        crumbs = this.genForRoutes({
          routes: routes,
          params: params,
          separator: separator,
          itemRender: itemRender
        });
      } else if (children.length) {
        crumbs = children.map(function (element, index) {
          warning$1(getSlotOptions(element).__ANT_BREADCRUMB_ITEM || getSlotOptions(element).__ANT_BREADCRUMB_SEPARATOR, 'Breadcrumb', "Only accepts Breadcrumb.Item and Breadcrumb.Separator as it's children");
          return cloneElement(element, {
            props: { separator: separator },
            key: index
          });
        });
      }
      return h(
        'div',
        { 'class': prefixCls },
        [crumbs]
      );
    }
  };

  var BreadcrumbSeparator = {
    name: 'ABreadcrumbSeparator',
    __ANT_BREADCRUMB_SEPARATOR: true,
    props: {
      prefixCls: VuePropTypes.string
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    render: function render() {
      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          $slots = this.$slots;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('breadcrumb', customizePrefixCls);

      var children = $slots['default'];
      return h(
        'span',
        { 'class': prefixCls + '-separator' },
        [children || '/']
      );
    }
  };

  Breadcrumb.Item = BreadcrumbItem;
  Breadcrumb.Separator = BreadcrumbSeparator;

  /* istanbul ignore next */
  Breadcrumb.install = function (Vue) {
    Vue.use(base);
    Vue.component(Breadcrumb.name, Breadcrumb);
    Vue.component(BreadcrumbItem.name, BreadcrumbItem);
    Vue.component(BreadcrumbSeparator.name, BreadcrumbSeparator);
  };

  var DateConstants = {
    DATE_ROW_COUNT: 6,
    DATE_COL_COUNT: 7
  };

  var DateTHead = {
    functional: true,
    render: function render(createElement, context) {
      var h = arguments[0];
      var props = context.props;

      var value = props.value;
      var localeData = value.localeData();
      var prefixCls = props.prefixCls;
      var veryShortWeekdays = [];
      var weekDays = [];
      var firstDayOfWeek = localeData.firstDayOfWeek();
      var showWeekNumberEl = void 0;
      var now = moment();
      for (var dateColIndex = 0; dateColIndex < DateConstants.DATE_COL_COUNT; dateColIndex++) {
        var index = (firstDayOfWeek + dateColIndex) % DateConstants.DATE_COL_COUNT;
        now.day(index);
        veryShortWeekdays[dateColIndex] = localeData.weekdaysMin(now);
        weekDays[dateColIndex] = localeData.weekdaysShort(now);
      }

      if (props.showWeekNumber) {
        showWeekNumberEl = h(
          'th',
          {
            attrs: {
              role: 'columnheader'
            },
            'class': prefixCls + '-column-header ' + prefixCls + '-week-number-header'
          },
          [h(
            'span',
            { 'class': prefixCls + '-column-header-inner' },
            ['x']
          )]
        );
      }
      var weekDaysEls = weekDays.map(function (day, xindex) {
        return h(
          'th',
          { key: xindex, attrs: { role: 'columnheader', title: day },
            'class': prefixCls + '-column-header' },
          [h(
            'span',
            { 'class': prefixCls + '-column-header-inner' },
            [veryShortWeekdays[xindex]]
          )]
        );
      });
      return h('thead', [h(
        'tr',
        {
          attrs: { role: 'row' }
        },
        [showWeekNumberEl, weekDaysEls]
      )]);
    }
  };

  var defaultDisabledTime = {
    disabledHours: function disabledHours() {
      return [];
    },
    disabledMinutes: function disabledMinutes() {
      return [];
    },
    disabledSeconds: function disabledSeconds() {
      return [];
    }
  };

  function getTodayTime(value) {
    var today = moment();
    today.locale(value.locale()).utcOffset(value.utcOffset());
    return today;
  }

  function getTitleString(value) {
    return value.format('LL');
  }

  function getTodayTimeStr(value) {
    var today = getTodayTime(value);
    return getTitleString(today);
  }

  function getMonthName(month) {
    var locale = month.locale();
    var localeData = month.localeData();
    return localeData[locale === 'zh-cn' ? 'months' : 'monthsShort'](month);
  }

  function syncTime(from, to) {
    if (!moment.isMoment(from) || !moment.isMoment(to)) return;
    to.hour(from.hour());
    to.minute(from.minute());
    to.second(from.second());
    to.millisecond(from.millisecond());
  }

  function getTimeConfig(value, disabledTime) {
    var disabledTimeConfig = disabledTime ? disabledTime(value) : {};
    disabledTimeConfig = _extends$1({}, defaultDisabledTime, disabledTimeConfig);
    return disabledTimeConfig;
  }

  function isTimeValidByConfig(value, disabledTimeConfig) {
    var invalidTime = false;
    if (value) {
      var hour = value.hour();
      var minutes = value.minute();
      var seconds = value.second();
      var disabledHours = disabledTimeConfig.disabledHours();
      if (disabledHours.indexOf(hour) === -1) {
        var disabledMinutes = disabledTimeConfig.disabledMinutes(hour);
        if (disabledMinutes.indexOf(minutes) === -1) {
          var disabledSeconds = disabledTimeConfig.disabledSeconds(hour, minutes);
          invalidTime = disabledSeconds.indexOf(seconds) !== -1;
        } else {
          invalidTime = true;
        }
      } else {
        invalidTime = true;
      }
    }
    return !invalidTime;
  }

  function isTimeValid(value, disabledTime) {
    var disabledTimeConfig = getTimeConfig(value, disabledTime);
    return isTimeValidByConfig(value, disabledTimeConfig);
  }

  function isAllowedDate(value, disabledDate, disabledTime) {
    if (disabledDate) {
      if (disabledDate(value)) {
        return false;
      }
    }
    if (disabledTime) {
      if (!isTimeValid(value, disabledTime)) {
        return false;
      }
    }
    return true;
  }

  function formatDate(value, format) {
    if (!value) {
      return '';
    }

    if (Array.isArray(format)) {
      format = format[0];
    }

    if (typeof format === 'function') {
      var result = format(value);
      if (typeof result === 'string') {
        return result;
      } else {
        throw new Error('The function of format does not return a string');
      }
    }

    return value.format(format);
  }

  function noop$a() {}
  function isSameDay(one, two) {
    return one && two && one.isSame(two, 'day');
  }

  function beforeCurrentMonthYear(current, today) {
    if (current.year() < today.year()) {
      return 1;
    }
    return current.year() === today.year() && current.month() < today.month();
  }

  function afterCurrentMonthYear(current, today) {
    if (current.year() > today.year()) {
      return 1;
    }
    return current.year() === today.year() && current.month() > today.month();
  }

  function getIdFromDate(date) {
    return 'rc-calendar-' + date.year() + '-' + date.month() + '-' + date.date();
  }

  var DateTBody = {
    props: {
      contentRender: VuePropTypes.func,
      dateRender: VuePropTypes.func,
      disabledDate: VuePropTypes.func,
      prefixCls: VuePropTypes.string,
      selectedValue: VuePropTypes.oneOfType([VuePropTypes.any, VuePropTypes.arrayOf(VuePropTypes.any)]),
      value: VuePropTypes.object,
      hoverValue: VuePropTypes.any.def([]),
      showWeekNumber: VuePropTypes.bool
    },

    render: function render() {
      var h = arguments[0];

      var props = getOptionProps(this);
      var contentRender = props.contentRender,
          prefixCls = props.prefixCls,
          selectedValue = props.selectedValue,
          value = props.value,
          showWeekNumber = props.showWeekNumber,
          dateRender = props.dateRender,
          disabledDate = props.disabledDate,
          hoverValue = props.hoverValue;

      var _getListeners = getListeners(this),
          _getListeners$select = _getListeners.select,
          select = _getListeners$select === undefined ? noop$a : _getListeners$select,
          _getListeners$dayHove = _getListeners.dayHover,
          dayHover = _getListeners$dayHove === undefined ? noop$a : _getListeners$dayHove;

      var iIndex = void 0;
      var jIndex = void 0;
      var current = void 0;
      var dateTable = [];
      var today = getTodayTime(value);
      var cellClass = prefixCls + '-cell';
      var weekNumberCellClass = prefixCls + '-week-number-cell';
      var dateClass = prefixCls + '-date';
      var todayClass = prefixCls + '-today';
      var selectedClass = prefixCls + '-selected-day';
      var selectedDateClass = prefixCls + '-selected-date'; // do not move with mouse operation
      var selectedStartDateClass = prefixCls + '-selected-start-date';
      var selectedEndDateClass = prefixCls + '-selected-end-date';
      var inRangeClass = prefixCls + '-in-range-cell';
      var lastMonthDayClass = prefixCls + '-last-month-cell';
      var nextMonthDayClass = prefixCls + '-next-month-btn-day';
      var disabledClass = prefixCls + '-disabled-cell';
      var firstDisableClass = prefixCls + '-disabled-cell-first-of-row';
      var lastDisableClass = prefixCls + '-disabled-cell-last-of-row';
      var lastDayOfMonthClass = prefixCls + '-last-day-of-month';
      var month1 = value.clone();
      month1.date(1);
      var day = month1.day();
      var lastMonthDiffDay = (day + 7 - value.localeData().firstDayOfWeek()) % 7;
      // calculate last month
      var lastMonth1 = month1.clone();
      lastMonth1.add(0 - lastMonthDiffDay, 'days');
      var passed = 0;
      for (iIndex = 0; iIndex < DateConstants.DATE_ROW_COUNT; iIndex++) {
        for (jIndex = 0; jIndex < DateConstants.DATE_COL_COUNT; jIndex++) {
          current = lastMonth1;
          if (passed) {
            current = current.clone();
            current.add(passed, 'days');
          }
          dateTable.push(current);
          passed++;
        }
      }
      var tableHtml = [];
      passed = 0;

      for (iIndex = 0; iIndex < DateConstants.DATE_ROW_COUNT; iIndex++) {
        var _cx;

        var isCurrentWeek = void 0;
        var weekNumberCell = void 0;
        var isActiveWeek = false;
        var dateCells = [];
        if (showWeekNumber) {
          weekNumberCell = h(
            'td',
            { key: 'week-' + dateTable[passed].week(), attrs: { role: 'gridcell' },
              'class': weekNumberCellClass },
            [dateTable[passed].week()]
          );
        }
        for (jIndex = 0; jIndex < DateConstants.DATE_COL_COUNT; jIndex++) {
          var next = null;
          var last = null;
          current = dateTable[passed];
          if (jIndex < DateConstants.DATE_COL_COUNT - 1) {
            next = dateTable[passed + 1];
          }
          if (jIndex > 0) {
            last = dateTable[passed - 1];
          }
          var cls = cellClass;
          var disabled = false;
          var selected = false;

          if (isSameDay(current, today)) {
            cls += ' ' + todayClass;
            isCurrentWeek = true;
          }

          var isBeforeCurrentMonthYear = beforeCurrentMonthYear(current, value);
          var isAfterCurrentMonthYear = afterCurrentMonthYear(current, value);

          if (selectedValue && Array.isArray(selectedValue)) {
            var rangeValue = hoverValue.length ? hoverValue : selectedValue;
            if (!isBeforeCurrentMonthYear && !isAfterCurrentMonthYear) {
              var startValue = rangeValue[0];
              var endValue = rangeValue[1];
              if (startValue) {
                if (isSameDay(current, startValue)) {
                  selected = true;
                  isActiveWeek = true;
                  cls += ' ' + selectedStartDateClass;
                }
              }
              if (startValue || endValue) {
                if (isSameDay(current, endValue)) {
                  selected = true;
                  isActiveWeek = true;
                  cls += ' ' + selectedEndDateClass;
                } else if ((startValue === null || startValue === undefined) && current.isBefore(endValue, 'day')) {
                  cls += ' ' + inRangeClass;
                } else if ((endValue === null || endValue === undefined) && current.isAfter(startValue, 'day')) {
                  cls += ' ' + inRangeClass;
                } else if (current.isAfter(startValue, 'day') && current.isBefore(endValue, 'day')) {
                  cls += ' ' + inRangeClass;
                }
              }
            }
          } else if (isSameDay(current, value)) {
            // keyboard change value, highlight works
            selected = true;
            isActiveWeek = true;
          }

          if (isSameDay(current, selectedValue)) {
            cls += ' ' + selectedDateClass;
          }

          if (isBeforeCurrentMonthYear) {
            cls += ' ' + lastMonthDayClass;
          }
          if (isAfterCurrentMonthYear) {
            cls += ' ' + nextMonthDayClass;
          }

          if (current.clone().endOf('month').date() === current.date()) {
            cls += ' ' + lastDayOfMonthClass;
          }

          if (disabledDate) {
            if (disabledDate(current, value)) {
              disabled = true;

              if (!last || !disabledDate(last, value)) {
                cls += ' ' + firstDisableClass;
              }

              if (!next || !disabledDate(next, value)) {
                cls += ' ' + lastDisableClass;
              }
            }
          }

          if (selected) {
            cls += ' ' + selectedClass;
          }

          if (disabled) {
            cls += ' ' + disabledClass;
          }

          var dateHtml = void 0;
          if (dateRender) {
            dateHtml = dateRender(current, value);
          } else {
            var content = contentRender ? contentRender(current, value) : current.date();
            dateHtml = h(
              'div',
              {
                key: getIdFromDate(current),
                'class': dateClass,
                attrs: { 'aria-selected': selected,
                  'aria-disabled': disabled
                }
              },
              [content]
            );
          }

          dateCells.push(h(
            'td',
            {
              key: passed,
              on: {
                'click': disabled ? noop$a : select.bind(null, current),
                'mouseenter': disabled ? noop$a : dayHover.bind(null, current)
              },
              attrs: {
                role: 'gridcell',
                title: getTitleString(current)
              },
              'class': cls
            },
            [dateHtml]
          ));

          passed++;
        }

        tableHtml.push(h(
          'tr',
          {
            key: iIndex,
            attrs: { role: 'row'
            },
            'class': classnames((_cx = {}, _defineProperty(_cx, prefixCls + '-current-week', isCurrentWeek), _defineProperty(_cx, prefixCls + '-active-week', isActiveWeek), _cx))
          },
          [weekNumberCell, dateCells]
        ));
      }
      return h(
        'tbody',
        { 'class': prefixCls + '-tbody' },
        [tableHtml]
      );
    }
  };

  var DateTable = {
    functional: true,
    render: function render(createElement, context) {
      var h = arguments[0];
      var props = context.props,
          _context$listeners = context.listeners,
          listeners = _context$listeners === undefined ? {} : _context$listeners;

      var prefixCls = props.prefixCls;
      var bodyProps = {
        props: props,
        on: listeners
      };
      return h(
        'table',
        { 'class': prefixCls + '-table', attrs: { cellSpacing: '0', role: 'grid' }
        },
        [h(DateTHead, bodyProps), h(DateTBody, bodyProps)]
      );
    }
  };

  var ROW = 4;
  var COL = 3;

  function noop$b() {}

  var MonthTable = {
    name: 'MonthTable',
    mixins: [BaseMixin],
    props: {
      cellRender: VuePropTypes.func,
      prefixCls: VuePropTypes.string,
      value: VuePropTypes.object,
      locale: VuePropTypes.any,
      contentRender: VuePropTypes.any,
      disabledDate: VuePropTypes.func
    },
    data: function data() {
      return {
        sValue: this.value
      };
    },

    watch: {
      value: function value(val) {
        this.setState({
          sValue: val
        });
      }
    },
    methods: {
      setAndSelectValue: function setAndSelectValue(value) {
        this.setState({
          sValue: value
        });
        this.__emit('select', value);
      },
      chooseMonth: function chooseMonth(month) {
        var next = this.sValue.clone();
        next.month(month);
        this.setAndSelectValue(next);
      },
      months: function months() {
        var value = this.sValue;
        var current = value.clone();
        var months = [];
        var index = 0;
        for (var rowIndex = 0; rowIndex < ROW; rowIndex++) {
          months[rowIndex] = [];
          for (var colIndex = 0; colIndex < COL; colIndex++) {
            current.month(index);
            var content = getMonthName(current);
            months[rowIndex][colIndex] = {
              value: index,
              content: content,
              title: content
            };
            index++;
          }
        }
        return months;
      }
    },

    render: function render() {
      var _this = this;

      var h = arguments[0];

      var props = this.$props;
      var value = this.sValue;
      var today = getTodayTime(value);
      var months = this.months();
      var currentMonth = value.month();
      var prefixCls = props.prefixCls,
          locale = props.locale,
          contentRender = props.contentRender,
          cellRender = props.cellRender,
          disabledDate = props.disabledDate;

      var monthsEls = months.map(function (month, index) {
        var tds = month.map(function (monthData) {
          var _classNameMap;

          var disabled = false;
          if (disabledDate) {
            var testValue = value.clone();
            testValue.month(monthData.value);
            disabled = disabledDate(testValue);
          }
          var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, prefixCls + '-cell', 1), _defineProperty(_classNameMap, prefixCls + '-cell-disabled', disabled), _defineProperty(_classNameMap, prefixCls + '-selected-cell', monthData.value === currentMonth), _defineProperty(_classNameMap, prefixCls + '-current-cell', today.year() === value.year() && monthData.value === today.month()), _classNameMap);
          var cellEl = void 0;
          if (cellRender) {
            var currentValue = value.clone();
            currentValue.month(monthData.value);
            cellEl = cellRender(currentValue, locale);
          } else {
            var content = void 0;
            if (contentRender) {
              var _currentValue = value.clone();
              _currentValue.month(monthData.value);
              content = contentRender(_currentValue, locale);
            } else {
              content = monthData.content;
            }
            cellEl = h(
              'a',
              { 'class': prefixCls + '-month' },
              [content]
            );
          }
          return h(
            'td',
            {
              attrs: {
                role: 'gridcell',

                title: monthData.title
              },
              key: monthData.value,
              on: {
                'click': disabled ? noop$b : function () {
                  return _this.chooseMonth(monthData.value);
                }
              },
              'class': classNameMap
            },
            [cellEl]
          );
        });
        return h(
          'tr',
          { key: index, attrs: { role: 'row' }
          },
          [tds]
        );
      });

      return h(
        'table',
        { 'class': prefixCls + '-table', attrs: { cellSpacing: '0', role: 'grid' }
        },
        [h(
          'tbody',
          { 'class': prefixCls + '-tbody' },
          [monthsEls]
        )]
      );
    }
  };

  function noop$c() {}

  function getNowByCurrentStateValue(value) {
    var ret = void 0;
    if (value) {
      ret = getTodayTime(value);
    } else {
      ret = moment();
    }
    return ret;
  }
  function isMoment(value) {
    if (Array.isArray(value)) {
      return value.length === 0 || value.findIndex(function (val) {
        return val === undefined || moment.isMoment(val);
      }) !== -1;
    } else {
      return value === undefined || moment.isMoment(value);
    }
  }
  var MomentType = VuePropTypes.custom(isMoment);
  var CalendarMixin = {
    mixins: [BaseMixin],
    name: 'CalendarMixinWrapper',
    props: {
      value: MomentType,
      defaultValue: MomentType
    },

    data: function data() {
      var props = this.$props;
      var sValue = props.value || props.defaultValue || getNowByCurrentStateValue();
      return {
        sValue: sValue,
        sSelectedValue: props.selectedValue || props.defaultSelectedValue
      };
    },

    watch: {
      value: function value(val) {
        var sValue = val || this.defaultValue || getNowByCurrentStateValue(this.sValue);
        this.setState({
          sValue: sValue
        });
      },
      selectedValue: function selectedValue(val) {
        this.setState({
          sSelectedValue: val
        });
      }
    },
    methods: {
      onSelect: function onSelect(value, cause) {
        if (value) {
          this.setValue(value);
        }
        this.setSelectedValue(value, cause);
      },
      renderRoot: function renderRoot(newProps) {
        var _className;

        var h = this.$createElement;

        var props = this.$props;
        var prefixCls = props.prefixCls;

        var className = (_className = {}, _defineProperty(_className, prefixCls, 1), _defineProperty(_className, prefixCls + '-hidden', !props.visible), _defineProperty(_className, newProps['class'], !!newProps['class']), _className);
        return h(
          'div',
          {
            ref: 'rootInstance',
            'class': className,
            attrs: { tabIndex: '0'
            },
            on: {
              'keydown': this.onKeyDown || noop$c,
              'blur': this.onBlur || noop$c
            }
          },
          [newProps.children]
        );
      },
      setSelectedValue: function setSelectedValue(selectedValue, cause) {
        // if (this.isAllowedDate(selectedValue)) {
        if (!hasProp(this, 'selectedValue')) {
          this.setState({
            sSelectedValue: selectedValue
          });
        }
        this.__emit('select', selectedValue, cause);
        // }
      },
      setValue: function setValue(value) {
        var originalValue = this.sValue;
        if (!hasProp(this, 'value')) {
          this.setState({
            sValue: value
          });
        }
        if (originalValue && value && !originalValue.isSame(value) || !originalValue && value || originalValue && !value) {
          this.__emit('change', value);
        }
      },
      isAllowedDate: function isAllowedDate$1(value) {
        var disabledDate = this.disabledDate;
        var disabledTime = this.disabledTime;
        return isAllowedDate(value, disabledDate, disabledTime);
      }
    }
  };

  var CommonMixin = {
    methods: {
      getFormat: function getFormat() {
        var format = this.format;
        var locale = this.locale,
            timePicker = this.timePicker;

        if (!format) {
          if (timePicker) {
            format = locale.dateTimeFormat;
          } else {
            format = locale.dateFormat;
          }
        }
        return format;
      },
      focus: function focus() {
        if (this.focusElement) {
          this.focusElement.focus();
        } else if (this.$refs.rootInstance) {
          this.$refs.rootInstance.focus();
        }
      },
      saveFocusElement: function saveFocusElement(focusElement) {
        this.focusElement = focusElement;
      }
    }
  };

  var CalendarHeader = {
    name: 'CalendarHeader',
    mixins: [BaseMixin],
    props: {
      value: VuePropTypes.object,
      locale: VuePropTypes.object,
      yearSelectOffset: VuePropTypes.number.def(10),
      yearSelectTotal: VuePropTypes.number.def(20),
      // onValueChange: PropTypes.func,
      // onTypeChange: PropTypes.func,
      Select: VuePropTypes.object,
      prefixCls: VuePropTypes.string,
      type: VuePropTypes.string,
      showTypeSwitch: VuePropTypes.bool,
      headerComponents: VuePropTypes.array
    },
    methods: {
      onYearChange: function onYearChange(year) {
        var newValue = this.value.clone();
        newValue.year(parseInt(year, 10));
        this.__emit('valueChange', newValue);
      },
      onMonthChange: function onMonthChange(month) {
        var newValue = this.value.clone();
        newValue.month(parseInt(month, 10));
        this.__emit('valueChange', newValue);
      },
      yearSelectElement: function yearSelectElement(year) {
        var h = this.$createElement;
        var yearSelectOffset = this.yearSelectOffset,
            yearSelectTotal = this.yearSelectTotal,
            prefixCls = this.prefixCls,
            Select = this.Select;

        var start = year - yearSelectOffset;
        var end = start + yearSelectTotal;

        var options = [];
        for (var index = start; index < end; index++) {
          options.push(h(
            Select.Option,
            { key: '' + index },
            [index]
          ));
        }
        return h(
          Select,
          {
            'class': prefixCls + '-header-year-select',
            on: {
              'change': this.onYearChange
            },
            attrs: {
              dropdownStyle: { zIndex: 2000 },
              dropdownMenuStyle: { maxHeight: '250px', overflow: 'auto', fontSize: '12px' },
              optionLabelProp: 'children',
              value: String(year),
              showSearch: false
            }
          },
          [options]
        );
      },
      monthSelectElement: function monthSelectElement(month) {
        var h = this.$createElement;
        var value = this.value,
            Select = this.Select,
            prefixCls = this.prefixCls;

        var t = value.clone();
        var options = [];

        for (var index = 0; index < 12; index++) {
          t.month(index);
          options.push(h(
            Select.Option,
            { key: '' + index },
            [getMonthName(t)]
          ));
        }

        return h(
          Select,
          {
            'class': prefixCls + '-header-month-select',
            attrs: { dropdownStyle: { zIndex: 2000 },
              dropdownMenuStyle: {
                maxHeight: '250px',
                overflow: 'auto',
                overflowX: 'hidden',
                fontSize: '12px'
              },
              optionLabelProp: 'children',
              value: String(month),
              showSearch: false
            },
            on: {
              'change': this.onMonthChange
            }
          },
          [options]
        );
      },
      changeTypeToDate: function changeTypeToDate() {
        this.__emit('typeChange', 'date');
      },
      changeTypeToMonth: function changeTypeToMonth() {
        this.__emit('typeChange', 'month');
      }
    },

    render: function render() {
      var h = arguments[0];
      var value = this.value,
          locale = this.locale,
          prefixCls = this.prefixCls,
          type = this.type,
          showTypeSwitch = this.showTypeSwitch,
          headerComponents = this.headerComponents;

      var year = value.year();
      var month = value.month();
      var yearSelect = this.yearSelectElement(year);
      var monthSelect = type === 'month' ? null : this.monthSelectElement(month);
      var switchCls = prefixCls + '-header-switcher';
      var typeSwitcher = showTypeSwitch ? h(
        'span',
        { 'class': switchCls },
        [type === 'date' ? h(
          'span',
          { 'class': switchCls + '-focus' },
          [locale.month]
        ) : h(
          'span',
          {
            on: {
              'click': this.changeTypeToDate
            },
            'class': switchCls + '-normal' },
          [locale.month]
        ), type === 'month' ? h(
          'span',
          { 'class': switchCls + '-focus' },
          [locale.year]
        ) : h(
          'span',
          {
            on: {
              'click': this.changeTypeToMonth
            },
            'class': switchCls + '-normal' },
          [locale.year]
        )]
      ) : null;

      return h(
        'div',
        { 'class': prefixCls + '-header' },
        [typeSwitcher, monthSelect, yearSelect, headerComponents]
      );
    }
  };

  var FullCalendar = {
    name: 'FullCalendar',
    props: {
      locale: VuePropTypes.object.def(enUs),
      format: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.array, VuePropTypes.func]),
      visible: VuePropTypes.bool.def(true),
      prefixCls: VuePropTypes.string.def('rc-calendar'),
      defaultType: VuePropTypes.string.def('date'),
      type: VuePropTypes.string,
      fullscreen: VuePropTypes.bool.def(false),
      monthCellRender: VuePropTypes.func,
      dateCellRender: VuePropTypes.func,
      showTypeSwitch: VuePropTypes.bool.def(true),
      Select: VuePropTypes.object.isRequired,
      headerComponents: VuePropTypes.array,
      headerComponent: VuePropTypes.object, // The whole header component
      headerRender: VuePropTypes.func,
      showHeader: VuePropTypes.bool.def(true),
      disabledDate: VuePropTypes.func,
      value: VuePropTypes.object,
      defaultValue: VuePropTypes.object,
      selectedValue: VuePropTypes.object,
      defaultSelectedValue: VuePropTypes.object,
      renderFooter: VuePropTypes.func.def(function () {
        return null;
      }),
      renderSidebar: VuePropTypes.func.def(function () {
        return null;
      })
    },
    mixins: [BaseMixin, CommonMixin, CalendarMixin],
    data: function data() {
      var type = void 0;
      if (hasProp(this, 'type')) {
        type = this.type;
      } else {
        type = this.defaultType;
      }
      var props = this.$props;
      return {
        sType: type,
        sValue: props.value || props.defaultValue || moment(),
        sSelectedValue: props.selectedValue || props.defaultSelectedValue
      };
    },

    watch: {
      type: function type(val) {
        this.setState({
          sType: val
        });
      },
      value: function value(val) {
        var sValue = val || this.defaultValue || getNowByCurrentStateValue(this.sValue);
        this.setState({
          sValue: sValue
        });
      },
      selectedValue: function selectedValue(val) {
        this.setState({
          sSelectedValue: val
        });
      }
    },
    methods: {
      onMonthSelect: function onMonthSelect(value) {
        this.onSelect(value, {
          target: 'month'
        });
      },
      setType: function setType(type) {
        if (!hasProp(this, 'type')) {
          this.setState({
            sType: type
          });
        }
        this.__emit('typeChange', type);
      }
    },

    render: function render() {
      var h = arguments[0];

      var props = getOptionProps(this);
      var locale = props.locale,
          prefixCls = props.prefixCls,
          fullscreen = props.fullscreen,
          showHeader = props.showHeader,
          headerComponent = props.headerComponent,
          headerRender = props.headerRender,
          disabledDate = props.disabledDate;
      var value = this.sValue,
          type = this.sType;


      var header = null;
      if (showHeader) {
        if (headerRender) {
          header = headerRender(value, type, locale);
        } else {
          var TheHeader = headerComponent || CalendarHeader;
          var headerProps = {
            props: _extends$1({}, props, {
              prefixCls: prefixCls + '-full',
              type: type,
              value: value
            }),
            on: _extends$1({}, getListeners(this), {
              typeChange: this.setType,
              valueChange: this.setValue
            }),
            key: 'calendar-header'
          };
          header = h(TheHeader, headerProps);
        }
      }

      var table = type === 'date' ? h(DateTable, {
        attrs: {
          dateRender: props.dateCellRender,
          contentRender: props.dateCellContentRender,
          locale: locale,
          prefixCls: prefixCls,

          value: value,
          disabledDate: disabledDate
        },
        on: {
          'select': this.onSelect
        }
      }) : h(MonthTable, {
        attrs: {
          cellRender: props.monthCellRender,
          contentRender: props.monthCellContentRender,
          locale: locale,

          prefixCls: prefixCls + '-month-panel',
          value: value,
          disabledDate: disabledDate
        },
        on: {
          'select': this.onMonthSelect
        }
      });

      var children = [header, h(
        'div',
        { key: 'calendar-body', 'class': prefixCls + '-calendar-body' },
        [table]
      )];

      var className = [prefixCls + '-full'];

      if (fullscreen) {
        className.push(prefixCls + '-fullscreen');
      }

      return this.renderRoot({
        children: children,
        'class': className.join(' ')
      });
    }
  };

  var Checkbox = {
    name: 'Checkbox',
    mixins: [BaseMixin],
    inheritAttrs: false,
    model: {
      prop: 'checked',
      event: 'change'
    },
    props: initDefaultProps({
      prefixCls: VuePropTypes.string,
      name: VuePropTypes.string,
      id: VuePropTypes.string,
      type: VuePropTypes.string,
      defaultChecked: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.bool]),
      checked: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.bool]),
      disabled: VuePropTypes.bool,
      // onFocus: PropTypes.func,
      // onBlur: PropTypes.func,
      // onChange: PropTypes.func,
      // onClick: PropTypes.func,
      tabIndex: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      readOnly: VuePropTypes.bool,
      autoFocus: VuePropTypes.bool,
      value: VuePropTypes.any
    }, {
      prefixCls: 'rc-checkbox',
      type: 'checkbox',
      defaultChecked: false
    }),
    data: function data() {
      var checked = hasProp(this, 'checked') ? this.checked : this.defaultChecked;
      return {
        sChecked: checked
      };
    },

    watch: {
      checked: function checked(val) {
        this.sChecked = val;
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        if (_this.autoFocus) {
          _this.$refs.input && _this.$refs.input.focus();
        }
      });
    },

    methods: {
      focus: function focus() {
        this.$refs.input.focus();
      },
      blur: function blur() {
        this.$refs.input.blur();
      },
      handleChange: function handleChange(e) {
        var props = getOptionProps(this);
        if (props.disabled) {
          return;
        }
        if (!('checked' in props)) {
          this.sChecked = e.target.checked;
        }
        this.$forceUpdate(); // change前，维持现有状态
        e.shiftKey = this.eventShiftKey;
        this.__emit('change', {
          target: _extends$1({}, props, {
            checked: e.target.checked
          }),
          stopPropagation: function stopPropagation() {
            e.stopPropagation();
          },
          preventDefault: function preventDefault() {
            e.preventDefault();
          },

          nativeEvent: e
        });
        this.eventShiftKey = false;
      },
      onClick: function onClick(e) {
        this.__emit('click', e);
        // onChange没能获取到shiftKey，使用onClick hack
        this.eventShiftKey = e.shiftKey;
      }
    },

    render: function render() {
      var _classNames;

      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          prefixCls = _getOptionProps.prefixCls,
          name = _getOptionProps.name,
          id = _getOptionProps.id,
          type = _getOptionProps.type,
          disabled = _getOptionProps.disabled,
          readOnly = _getOptionProps.readOnly,
          tabIndex = _getOptionProps.tabIndex,
          autoFocus = _getOptionProps.autoFocus,
          value = _getOptionProps.value,
          others = _objectWithoutProperties(_getOptionProps, ['prefixCls', 'name', 'id', 'type', 'disabled', 'readOnly', 'tabIndex', 'autoFocus', 'value']);

      var attrs = getAttrs(this);
      var globalProps = Object.keys(_extends$1({}, others, attrs)).reduce(function (prev, key) {
        if (key.substr(0, 5) === 'aria-' || key.substr(0, 5) === 'data-' || key === 'role') {
          prev[key] = others[key];
        }
        return prev;
      }, {});

      var sChecked = this.sChecked;

      var classString = classnames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-checked', sChecked), _defineProperty(_classNames, prefixCls + '-disabled', disabled), _classNames));

      return h(
        'span',
        { 'class': classString },
        [h('input', babelHelperVueJsxMergeProps([{
          attrs: {
            name: name,
            id: id,
            type: type,
            readOnly: readOnly,
            disabled: disabled,
            tabIndex: tabIndex,

            autoFocus: autoFocus
          },
          'class': prefixCls + '-input',
          domProps: {
            'checked': !!sChecked,
            'value': value
          },
          ref: 'input'
        }, {
          attrs: globalProps,
          on: _extends$1({}, getListeners(this), {
            change: this.handleChange,
            click: this.onClick
          })
        }])), h('span', { 'class': prefixCls + '-inner' })]
      );
    }
  };

  function noop$d() {}

  var Radio = {
    name: 'ARadio',
    model: {
      prop: 'checked'
    },
    props: {
      prefixCls: VuePropTypes.string,
      defaultChecked: Boolean,
      checked: { type: Boolean, 'default': undefined },
      disabled: Boolean,
      isGroup: Boolean,
      value: VuePropTypes.any,
      name: String,
      id: String,
      autoFocus: Boolean,
      type: VuePropTypes.string.def('radio')
    },
    inject: {
      radioGroupContext: { 'default': undefined },
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      focus: function focus() {
        this.$refs.vcCheckbox.focus();
      },
      blur: function blur() {
        this.$refs.vcCheckbox.blur();
      },
      handleChange: function handleChange(event) {
        var targetChecked = event.target.checked;
        this.$emit('input', targetChecked);
        this.$emit('change', event);
      },
      onChange: function onChange(e) {
        this.$emit('change', e);
        if (this.radioGroupContext && this.radioGroupContext.onRadioChange) {
          this.radioGroupContext.onRadioChange(e);
        }
      }
    },

    render: function render() {
      var _classNames;

      var h = arguments[0];
      var $slots = this.$slots,
          radioGroup = this.radioGroupContext;

      var props = getOptionProps(this);
      var children = $slots['default'];

      var _getListeners = getListeners(this),
          _getListeners$mouseen = _getListeners.mouseenter,
          mouseenter = _getListeners$mouseen === undefined ? noop$d : _getListeners$mouseen,
          _getListeners$mousele = _getListeners.mouseleave,
          mouseleave = _getListeners$mousele === undefined ? noop$d : _getListeners$mousele,
          restListeners = _objectWithoutProperties(_getListeners, ['mouseenter', 'mouseleave']);

      var customizePrefixCls = props.prefixCls,
          restProps = _objectWithoutProperties(props, ['prefixCls']);

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('radio', customizePrefixCls);

      var radioProps = {
        props: _extends$1({}, restProps, { prefixCls: prefixCls }),
        on: restListeners,
        attrs: getAttrs(this)
      };

      if (radioGroup) {
        radioProps.props.name = radioGroup.name;
        radioProps.on.change = this.onChange;
        radioProps.props.checked = props.value === radioGroup.stateValue;
        radioProps.props.disabled = props.disabled || radioGroup.disabled;
      } else {
        radioProps.on.change = this.handleChange;
      }
      var wrapperClassString = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-wrapper', true), _defineProperty(_classNames, prefixCls + '-wrapper-checked', radioProps.props.checked), _defineProperty(_classNames, prefixCls + '-wrapper-disabled', radioProps.props.disabled), _classNames));

      return h(
        'label',
        { 'class': wrapperClassString, on: {
            'mouseenter': mouseenter,
            'mouseleave': mouseleave
          }
        },
        [h(Checkbox, babelHelperVueJsxMergeProps([radioProps, { ref: 'vcCheckbox' }])), children !== undefined ? h('span', [children]) : null]
      );
    }
  };

  function noop$e() {}

  var Group$1 = {
    name: 'ARadioGroup',
    model: {
      prop: 'value'
    },
    props: {
      prefixCls: VuePropTypes.string,
      defaultValue: VuePropTypes.any,
      value: VuePropTypes.any,
      size: {
        'default': 'default',
        validator: function validator(value) {
          return ['large', 'default', 'small'].includes(value);
        }
      },
      options: {
        'default': function _default() {
          return [];
        },
        type: Array
      },
      disabled: Boolean,
      name: String,
      buttonStyle: VuePropTypes.string.def('outline')
    },
    data: function data() {
      var value = this.value,
          defaultValue = this.defaultValue;

      this.updatingValue = false;
      return {
        stateValue: value === undefined ? defaultValue : value
      };
    },
    provide: function provide() {
      return {
        radioGroupContext: this
      };
    },

    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    computed: {
      radioOptions: function radioOptions() {
        var disabled = this.disabled;

        return this.options.map(function (option) {
          return typeof option === 'string' ? { label: option, value: option } : _extends$1({}, option, { disabled: option.disabled === undefined ? disabled : option.disabled });
        });
      },
      classes: function classes() {
        var _ref;

        var prefixCls = this.prefixCls,
            size = this.size;

        return _ref = {}, _defineProperty(_ref, '' + prefixCls, true), _defineProperty(_ref, prefixCls + '-' + size, size), _ref;
      }
    },
    watch: {
      value: function value(val) {
        this.updatingValue = false;
        this.stateValue = val;
      }
    },
    methods: {
      onRadioChange: function onRadioChange(ev) {
        var _this = this;

        var lastValue = this.stateValue;
        var value = ev.target.value;

        if (!hasProp(this, 'value')) {
          this.stateValue = value;
        }
        // nextTick for https://github.com/vueComponent/ant-design-vue/issues/1280
        if (!this.updatingValue && value !== lastValue) {
          this.updatingValue = true;
          this.$emit('input', value);
          this.$emit('change', ev);
        }
        this.$nextTick(function () {
          _this.updatingValue = false;
        });
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];

      var _getListeners = getListeners(this),
          _getListeners$mouseen = _getListeners.mouseenter,
          mouseenter = _getListeners$mouseen === undefined ? noop$e : _getListeners$mouseen,
          _getListeners$mousele = _getListeners.mouseleave,
          mouseleave = _getListeners$mousele === undefined ? noop$e : _getListeners$mousele;

      var props = getOptionProps(this);
      var customizePrefixCls = props.prefixCls,
          options = props.options,
          buttonStyle = props.buttonStyle;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('radio', customizePrefixCls);

      var groupPrefixCls = prefixCls + '-group';
      var classString = classnames(groupPrefixCls, groupPrefixCls + '-' + buttonStyle, _defineProperty({}, groupPrefixCls + '-' + props.size, props.size));

      var children = filterEmpty(this.$slots['default']);

      // 如果存在 options, 优先使用
      if (options && options.length > 0) {
        children = options.map(function (option) {
          if (typeof option === 'string') {
            return h(
              Radio,
              {
                key: option,
                attrs: { prefixCls: prefixCls,
                  disabled: props.disabled,
                  value: option,
                  checked: _this2.stateValue === option
                }
              },
              [option]
            );
          } else {
            return h(
              Radio,
              {
                key: 'radio-group-value-options-' + option.value,
                attrs: { prefixCls: prefixCls,
                  disabled: option.disabled || props.disabled,
                  value: option.value,
                  checked: _this2.stateValue === option.value
                }
              },
              [option.label]
            );
          }
        });
      }

      return h(
        'div',
        { 'class': classString, on: {
            'mouseenter': mouseenter,
            'mouseleave': mouseleave
          }
        },
        [children]
      );
    }
  };

  var Button$1 = {
    name: 'ARadioButton',
    props: _extends$1({}, Radio.props),
    inject: {
      radioGroupContext: { 'default': undefined },
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    render: function render() {
      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          customizePrefixCls = _getOptionProps.prefixCls,
          otherProps = _objectWithoutProperties(_getOptionProps, ['prefixCls']);

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('radio-button', customizePrefixCls);

      var radioProps = {
        props: _extends$1({}, otherProps, {
          prefixCls: prefixCls
        }),
        on: getListeners(this)
      };
      if (this.radioGroupContext) {
        radioProps.on.change = this.radioGroupContext.onRadioChange;
        radioProps.props.checked = this.$props.value === this.radioGroupContext.stateValue;
        radioProps.props.disabled = this.$props.disabled || this.radioGroupContext.disabled;
      }
      return h(
        Radio,
        radioProps,
        [this.$slots['default']]
      );
    }
  };

  Radio.Group = Group$1;
  Radio.Button = Button$1;

  /* istanbul ignore next */
  Radio.install = function (Vue) {
    Vue.use(base);
    Vue.component(Radio.name, Radio);
    Vue.component(Radio.Group.name, Radio.Group);
    Vue.component(Radio.Button.name, Radio.Button);
  };

  var Option$1 = Select$1.Option;


  function getMonthsLocale(value) {
    var current = value.clone();
    var localeData = value.localeData();
    var months = [];
    for (var i = 0; i < 12; i++) {
      current.month(i);
      months.push(localeData.monthsShort(current));
    }
    return months;
  }

  var HeaderProps = {
    prefixCls: VuePropTypes.string,
    locale: VuePropTypes.any,
    fullscreen: VuePropTypes.boolean,
    yearSelectOffset: VuePropTypes.number,
    yearSelectTotal: VuePropTypes.number,
    type: VuePropTypes.string,
    // onValueChange: PropTypes.(value: moment.Moment) => void,
    // onTypeChange: PropTypes.(type: string) => void,
    value: VuePropTypes.any,
    validRange: VuePropTypes.array,
    headerRender: VuePropTypes.func
  };

  var Header = {
    props: initDefaultProps(HeaderProps, {
      yearSelectOffset: 10,
      yearSelectTotal: 20
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    // private calenderHeaderNode: HTMLDivElement;
    methods: {
      getYearSelectElement: function getYearSelectElement(prefixCls, year) {
        var _this = this;

        var h = this.$createElement;
        var yearSelectOffset = this.yearSelectOffset,
            yearSelectTotal = this.yearSelectTotal,
            _locale = this.locale,
            locale = _locale === undefined ? {} : _locale,
            fullscreen = this.fullscreen,
            validRange = this.validRange;

        var start = year - yearSelectOffset;
        var end = start + yearSelectTotal;
        if (validRange) {
          start = validRange[0].get('year');
          end = validRange[1].get('year') + 1;
        }
        var suffix = locale.year === '年' ? '年' : '';

        var options = [];
        for (var index = start; index < end; index++) {
          options.push(h(
            Option$1,
            { key: '' + index },
            [index + suffix]
          ));
        }
        return h(
          Select$1,
          {
            attrs: {
              size: fullscreen ? 'default' : 'small',
              dropdownMatchSelectWidth: false,

              value: String(year),
              getPopupContainer: function getPopupContainer() {
                return _this.getCalenderHeaderNode();
              }
            },
            'class': prefixCls + '-year-select',
            on: {
              'change': this.onYearChange
            }
          },
          [options]
        );
      },
      getMonthSelectElement: function getMonthSelectElement(prefixCls, month, months) {
        var _this2 = this;

        var h = this.$createElement;
        var fullscreen = this.fullscreen,
            validRange = this.validRange,
            value = this.value;

        var options = [];
        var start = 0;
        var end = 12;
        if (validRange) {
          var _validRange = _slicedToArray(validRange, 2),
              rangeStart = _validRange[0],
              rangeEnd = _validRange[1];

          var currentYear = value.get('year');
          if (rangeEnd.get('year') === currentYear) {
            end = rangeEnd.get('month') + 1;
          }
          if (rangeStart.get('year') === currentYear) {
            start = rangeStart.get('month');
          }
        }
        for (var index = start; index < end; index++) {
          options.push(h(
            Option$1,
            { key: '' + index },
            [months[index]]
          ));
        }

        return h(
          Select$1,
          {
            attrs: {
              size: fullscreen ? 'default' : 'small',
              dropdownMatchSelectWidth: false,

              value: String(month),

              getPopupContainer: function getPopupContainer() {
                return _this2.getCalenderHeaderNode();
              }
            },
            'class': prefixCls + '-month-select', on: {
              'change': this.onMonthChange
            }
          },
          [options]
        );
      },
      onYearChange: function onYearChange(year) {
        var value = this.value,
            validRange = this.validRange;

        var newValue = value.clone();
        newValue.year(parseInt(year, 10));
        // switch the month so that it remains within range when year changes
        if (validRange) {
          var _validRange2 = _slicedToArray(validRange, 2),
              start = _validRange2[0],
              end = _validRange2[1];

          var newYear = newValue.get('year');
          var newMonth = newValue.get('month');
          if (newYear === end.get('year') && newMonth > end.get('month')) {
            newValue.month(end.get('month'));
          }
          if (newYear === start.get('year') && newMonth < start.get('month')) {
            newValue.month(start.get('month'));
          }
        }
        this.$emit('valueChange', newValue);
      },
      onMonthChange: function onMonthChange(month) {
        var newValue = this.value.clone();
        newValue.month(parseInt(month, 10));
        this.$emit('valueChange', newValue);
      },
      onInternalTypeChange: function onInternalTypeChange(e) {
        this.onTypeChange(e.target.value);
      },
      onTypeChange: function onTypeChange(val) {
        this.$emit('typeChange', val);
      },
      getCalenderHeaderNode: function getCalenderHeaderNode() {
        return this.$refs.calenderHeaderNode;
      },
      getMonthYearSelections: function getMonthYearSelections(getPrefixCls) {
        var _$props = this.$props,
            customizePrefixCls = _$props.prefixCls,
            type = _$props.type,
            value = _$props.value;


        var prefixCls = getPrefixCls('fullcalendar', customizePrefixCls);
        var yearReactNode = this.getYearSelectElement(prefixCls, value.year());
        var monthReactNode = type === 'month' ? this.getMonthSelectElement(prefixCls, value.month(), getMonthsLocale(value)) : null;
        return {
          yearReactNode: yearReactNode,
          monthReactNode: monthReactNode
        };
      },
      getTypeSwitch: function getTypeSwitch() {
        var h = this.$createElement;
        var _$props2 = this.$props,
            _$props2$locale = _$props2.locale,
            locale = _$props2$locale === undefined ? {} : _$props2$locale,
            type = _$props2.type,
            fullscreen = _$props2.fullscreen;

        var size = fullscreen ? 'default' : 'small';
        return h(
          Group$1,
          {
            on: {
              'change': this.onInternalTypeChange
            },
            attrs: { value: type, size: size }
          },
          [h(
            Button$1,
            {
              attrs: { value: 'month' }
            },
            [locale.month]
          ), h(
            Button$1,
            {
              attrs: { value: 'year' }
            },
            [locale.year]
          )]
        );
      },
      onValueChange: function onValueChange() {
        this.$emit.apply(this, ['valueChange'].concat(Array.prototype.slice.call(arguments)));
      },
      headerRenderCustom: function headerRenderCustom(headerRender) {
        var _$props3 = this.$props,
            type = _$props3.type,
            value = _$props3.value;

        return headerRender({
          value: value,
          type: type || 'month',
          onChange: this.onValueChange,
          onTypeChange: this.onTypeChange
        });
      }
    },

    render: function render() {
      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          headerRender = this.headerRender;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('fullcalendar', customizePrefixCls);
      var typeSwitch = this.getTypeSwitch();

      var _getMonthYearSelectio = this.getMonthYearSelections(getPrefixCls),
          yearReactNode = _getMonthYearSelectio.yearReactNode,
          monthReactNode = _getMonthYearSelectio.monthReactNode;

      return headerRender ? this.headerRenderCustom(headerRender) : h(
        'div',
        { 'class': prefixCls + '-header', ref: 'calenderHeaderNode' },
        [yearReactNode, monthReactNode, typeSwitch]
      );
    }
  };

  /**
   * Checks if `value` is `null` or `undefined`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
   * @example
   *
   * _.isNil(null);
   * // => true
   *
   * _.isNil(void 0);
   * // => true
   *
   * _.isNil(NaN);
   * // => false
   */
  function isNil(value) {
    return value == null;
  }

  var isNil_1 = isNil;

  var TimeType = {
    validator: function validator(value) {
      return typeof value === 'string' || isNil_1(value) || moment.isMoment(value);
    }
  };

  var TimesType = {
    validator: function validator(value) {
      if (Array.isArray(value)) {
        return value.length === 0 || value.findIndex(function (val) {
          return typeof val !== 'string';
        }) === -1 || value.findIndex(function (val) {
          return !isNil_1(val) && !moment.isMoment(val);
        }) === -1;
      }
      return false;
    }
  };

  var TimeOrTimesType = {
    validator: function validator(value) {
      if (Array.isArray(value)) {
        return value.length === 0 || value.findIndex(function (val) {
          return typeof val !== 'string';
        }) === -1 || value.findIndex(function (val) {
          return !isNil_1(val) && !moment.isMoment(val);
        }) === -1;
      } else {
        return typeof value === 'string' || isNil_1(value) || moment.isMoment(value);
      }
    }
  };

  function checkValidate(componentName, value, propName, valueFormat) {
    var values = Array.isArray(value) ? value : [value];
    values.forEach(function (val) {
      if (!val) return;
      valueFormat && warning$1(interopDefault(moment$1)(val, valueFormat).isValid(), componentName, 'When set `valueFormat`, `' + propName + '` should provides invalidate string time. ');
      !valueFormat && warning$1(interopDefault(moment$1).isMoment(val) && val.isValid(), componentName, '`' + propName + '` provides invalidate moment time. If you want to set empty value, use `null` instead.');
    });
  }
  var stringToMoment = function stringToMoment(value, valueFormat) {
    if (Array.isArray(value)) {
      return value.map(function (val) {
        return typeof val === 'string' && val ? interopDefault(moment$1)(val, valueFormat) : val || null;
      });
    } else {
      return typeof value === 'string' && value ? interopDefault(moment$1)(value, valueFormat) : value || null;
    }
  };

  var momentToString = function momentToString(value, valueFormat) {
    if (Array.isArray(value)) {
      return value.map(function (val) {
        return interopDefault(moment$1).isMoment(val) ? val.format(valueFormat) : val;
      });
    } else {
      return interopDefault(moment$1).isMoment(value) ? value.format(valueFormat) : value;
    }
  };

  function noop$f() {
    return null;
  }

  function zerofixed(v) {
    if (v < 10) {
      return '0' + v;
    }
    return '' + v;
  }
  function isMomentArray(value) {
    return Array.isArray(value) && !!value.find(function (val) {
      return moment.isMoment(val);
    });
  }
  var CalendarMode = VuePropTypes.oneOf(['month', 'year']);

  var CalendarProps = function CalendarProps() {
    return {
      prefixCls: VuePropTypes.string,
      value: TimeType,
      defaultValue: TimeType,
      mode: CalendarMode,
      fullscreen: VuePropTypes.bool,
      // dateCellRender: PropTypes.func,
      // monthCellRender: PropTypes.func,
      // dateFullCellRender: PropTypes.func,
      // monthFullCellRender: PropTypes.func,
      locale: VuePropTypes.object,
      // onPanelChange?: (date?: moment.Moment, mode?: CalendarMode) => void;
      // onSelect?: (date?: moment.Moment) => void;
      disabledDate: VuePropTypes.func,
      validRange: VuePropTypes.custom(isMomentArray),
      headerRender: VuePropTypes.func,
      valueFormat: VuePropTypes.string
    };
  };

  var Calendar = {
    name: 'ACalendar',
    mixins: [BaseMixin],
    props: initDefaultProps(CalendarProps(), {
      locale: {},
      fullscreen: true
    }),
    model: {
      prop: 'value',
      event: 'change'
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      var value = this.value,
          defaultValue = this.defaultValue,
          valueFormat = this.valueFormat;

      var sValue = value || defaultValue || interopDefault(moment$1)();
      checkValidate('Calendar', defaultValue, 'defaultValue', valueFormat);
      checkValidate('Calendar', value, 'value', valueFormat);
      this._sPrefixCls = undefined;
      return {
        sValue: stringToMoment(sValue, valueFormat),
        sMode: this.mode || 'month'
      };
    },

    watch: {
      value: function value(val) {
        checkValidate('Calendar', val, 'value', this.valueFormat);
        this.setState({
          sValue: stringToMoment(val, this.valueFormat)
        });
      },
      mode: function mode(val) {
        this.setState({
          sMode: val
        });
      }
    },
    methods: {
      onHeaderValueChange: function onHeaderValueChange(value) {
        this.setValue(value, 'changePanel');
      },
      onHeaderTypeChange: function onHeaderTypeChange(mode) {
        this.sMode = mode;
        this.onPanelChange(this.sValue, mode);
      },
      onPanelChange: function onPanelChange(value, mode) {
        var val = this.valueFormat ? momentToString(value, this.valueFormat) : value;
        this.$emit('panelChange', val, mode);
        if (value !== this.sValue) {
          this.$emit('change', val);
        }
      },
      onSelect: function onSelect(value) {
        this.setValue(value, 'select');
      },
      setValue: function setValue(value, way) {
        var prevValue = this.value ? stringToMoment(this.value, this.valueFormat) : this.sValue;
        var mode = this.sMode,
            valueFormat = this.valueFormat;

        if (!hasProp(this, 'value')) {
          this.setState({ sValue: value });
        }
        if (way === 'select') {
          if (prevValue && prevValue.month() !== value.month()) {
            this.onPanelChange(value, mode);
          }
          this.$emit('select', valueFormat ? momentToString(value, valueFormat) : value);
        } else if (way === 'changePanel') {
          this.onPanelChange(value, mode);
        }
      },
      getDateRange: function getDateRange(validRange, disabledDate) {
        return function (current) {
          if (!current) {
            return false;
          }

          var _validRange = _slicedToArray(validRange, 2),
              startDate = _validRange[0],
              endDate = _validRange[1];

          var inRange = !current.isBetween(startDate, endDate, 'days', '[]');
          if (disabledDate) {
            return disabledDate(current) || inRange;
          }
          return inRange;
        };
      },
      getDefaultLocale: function getDefaultLocale() {
        var result = _extends$1({}, locale$1, this.$props.locale);
        result.lang = _extends$1({}, result.lang, (this.$props.locale || {}).lang);
        return result;
      },
      monthCellRender2: function monthCellRender2(value) {
        var h = this.$createElement;
        var _sPrefixCls = this._sPrefixCls,
            $scopedSlots = this.$scopedSlots;

        var monthCellRender = this.monthCellRender || $scopedSlots.monthCellRender || noop$f;
        return h(
          'div',
          { 'class': _sPrefixCls + '-month' },
          [h(
            'div',
            { 'class': _sPrefixCls + '-value' },
            [value.localeData().monthsShort(value)]
          ), h(
            'div',
            { 'class': _sPrefixCls + '-content' },
            [monthCellRender(value)]
          )]
        );
      },
      dateCellRender2: function dateCellRender2(value) {
        var h = this.$createElement;
        var _sPrefixCls = this._sPrefixCls,
            $scopedSlots = this.$scopedSlots;

        var dateCellRender = this.dateCellRender || $scopedSlots.dateCellRender || noop$f;
        return h(
          'div',
          { 'class': _sPrefixCls + '-date' },
          [h(
            'div',
            { 'class': _sPrefixCls + '-value' },
            [zerofixed(value.date())]
          ), h(
            'div',
            { 'class': _sPrefixCls + '-content' },
            [dateCellRender(value)]
          )]
        );
      },
      renderCalendar: function renderCalendar(locale, localeCode) {
        var h = this.$createElement;

        var props = getOptionProps(this);
        var value = this.sValue,
            mode = this.sMode,
            $scopedSlots = this.$scopedSlots;

        if (value && localeCode) {
          value.locale(localeCode);
        }
        var customizePrefixCls = props.prefixCls,
            fullscreen = props.fullscreen,
            dateFullCellRender = props.dateFullCellRender,
            monthFullCellRender = props.monthFullCellRender;

        var headerRender = this.headerRender || $scopedSlots.headerRender;
        var getPrefixCls = this.configProvider.getPrefixCls;
        var prefixCls = getPrefixCls('fullcalendar', customizePrefixCls);

        // To support old version react.
        // Have to add prefixCls on the instance.
        // https://github.com/facebook/react/issues/12397
        this._sPrefixCls = prefixCls;

        var cls = '';
        if (fullscreen) {
          cls += ' ' + prefixCls + '-fullscreen';
        }

        var monthCellRender = monthFullCellRender || $scopedSlots.monthFullCellRender || this.monthCellRender2;
        var dateCellRender = dateFullCellRender || $scopedSlots.dateFullCellRender || this.dateCellRender2;

        var disabledDate = props.disabledDate;

        if (props.validRange) {
          disabledDate = this.getDateRange(props.validRange, disabledDate);
        }
        var fullCalendarProps = {
          props: _extends$1({}, props, {
            Select: {},
            locale: locale.lang,
            type: mode === 'year' ? 'month' : 'date',
            prefixCls: prefixCls,
            showHeader: false,
            value: value,
            monthCellRender: monthCellRender,
            dateCellRender: dateCellRender,
            disabledDate: disabledDate
          }),
          on: _extends$1({}, getListeners(this), {
            select: this.onSelect
          })
        };
        return h(
          'div',
          { 'class': cls },
          [h(Header, {
            attrs: {
              fullscreen: fullscreen,
              type: mode,
              headerRender: headerRender,
              value: value,
              locale: locale.lang,
              prefixCls: prefixCls,

              validRange: props.validRange
            },
            on: {
              'typeChange': this.onHeaderTypeChange,
              'valueChange': this.onHeaderValueChange
            }
          }), h(FullCalendar, fullCalendarProps)]
        );
      }
    },

    render: function render() {
      var h = arguments[0];

      return h(LocaleReceiver, {
        attrs: {
          componentName: 'Calendar',
          defaultLocale: this.getDefaultLocale
        },
        scopedSlots: { 'default': this.renderCalendar }
      });
    }
  };

  /* istanbul ignore next */
  Calendar.install = function (Vue) {
    Vue.use(base);
    Vue.component(Calendar.name, Calendar);
  };

  var KeyCode$1 = {
    /**
     * LEFT
     */
    LEFT: 37, // also NUM_WEST
    /**
     * UP
     */
    UP: 38, // also NUM_NORTH
    /**
     * RIGHT
     */
    RIGHT: 39, // also NUM_EAST
    /**
     * DOWN
     */
    DOWN: 40 // also NUM_SOUTH
  };

  var sentinelStyle = { width: 0, height: 0, overflow: 'hidden', position: 'absolute' };
  var Sentinel = {
    name: 'Sentinel',
    props: {
      setRef: VuePropTypes.func,
      prevElement: VuePropTypes.any,
      nextElement: VuePropTypes.any
    },
    methods: {
      onKeyDown: function onKeyDown(_ref) {
        var target = _ref.target,
            which = _ref.which,
            shiftKey = _ref.shiftKey;
        var _$props = this.$props,
            nextElement = _$props.nextElement,
            prevElement = _$props.prevElement;

        if (which !== KeyCode.TAB || document.activeElement !== target) return;

        // Tab next
        if (!shiftKey && nextElement) {
          nextElement.focus();
        }

        // Tab prev
        if (shiftKey && prevElement) {
          prevElement.focus();
        }
      }
    },
    render: function render() {
      var h = arguments[0];
      var setRef = this.$props.setRef;


      return h(
        'div',
        babelHelperVueJsxMergeProps([{
          attrs: {
            tabIndex: 0
          }
        }, {
          directives: [{
            name: 'ant-ref',
            value: setRef
          }]
        }, {
          style: sentinelStyle,
          on: {
            'keydown': this.onKeyDown
          },
          attrs: {
            role: 'presentation'
          }
        }]),
        [this.$slots['default']]
      );
    }
  };

  var isValid = function isValid(value) {
    return value !== undefined && value !== null && value !== '';
  };

  function getDefaultActiveKey(props) {
    var activeKey = void 0;
    var children = props.children;
    children.forEach(function (child) {
      if (child && !isValid(activeKey) && !child.disabled) {
        activeKey = child.key;
      }
    });
    return activeKey;
  }

  function activeKeyIsValid(props, key) {
    var children = props.children;
    var keys = children.map(function (child) {
      return child && child.key;
    });
    return keys.indexOf(key) >= 0;
  }

  var Tabs = {
    name: 'Tabs',
    mixins: [BaseMixin],
    model: {
      prop: 'activeKey',
      event: 'change'
    },
    props: {
      destroyInactiveTabPane: VuePropTypes.bool,
      renderTabBar: VuePropTypes.func.isRequired,
      renderTabContent: VuePropTypes.func.isRequired,
      navWrapper: VuePropTypes.func.def(function (arg) {
        return arg;
      }),
      children: VuePropTypes.any.def([]),
      prefixCls: VuePropTypes.string.def('ant-tabs'),
      tabBarPosition: VuePropTypes.string.def('top'),
      activeKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      defaultActiveKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      __propsSymbol__: VuePropTypes.any,
      direction: VuePropTypes.string.def('ltr'),
      tabBarGutter: VuePropTypes.number
    },
    data: function data() {
      var props = getOptionProps(this);
      var activeKey = void 0;
      if ('activeKey' in props) {
        activeKey = props.activeKey;
      } else if ('defaultActiveKey' in props) {
        activeKey = props.defaultActiveKey;
      } else {
        activeKey = getDefaultActiveKey(props);
      }
      return {
        _activeKey: activeKey
      };
    },
    provide: function provide() {
      return {
        sentinelContext: this
      };
    },

    watch: {
      __propsSymbol__: function __propsSymbol__() {
        var nextProps = getOptionProps(this);
        if ('activeKey' in nextProps) {
          this.setState({
            _activeKey: nextProps.activeKey
          });
        } else if (!activeKeyIsValid(nextProps, this.$data._activeKey)) {
          // https://github.com/ant-design/ant-design/issues/7093
          this.setState({
            _activeKey: getDefaultActiveKey(nextProps)
          });
        }
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.destroy = true;
      raf_1.cancel(this.sentinelId);
    },

    methods: {
      onTabClick: function onTabClick(activeKey, e) {
        if (this.tabBar.componentOptions && this.tabBar.componentOptions.listeners && this.tabBar.componentOptions.listeners.tabClick) {
          this.tabBar.componentOptions.listeners.tabClick(activeKey, e);
        }
        this.setActiveKey(activeKey);
      },
      onNavKeyDown: function onNavKeyDown(e) {
        var eventKeyCode = e.keyCode;
        if (eventKeyCode === KeyCode$1.RIGHT || eventKeyCode === KeyCode$1.DOWN) {
          e.preventDefault();
          var nextKey = this.getNextActiveKey(true);
          this.onTabClick(nextKey);
        } else if (eventKeyCode === KeyCode$1.LEFT || eventKeyCode === KeyCode$1.UP) {
          e.preventDefault();
          var previousKey = this.getNextActiveKey(false);
          this.onTabClick(previousKey);
        }
      },
      onScroll: function onScroll(_ref) {
        var target = _ref.target,
            currentTarget = _ref.currentTarget;

        if (target === currentTarget && target.scrollLeft > 0) {
          target.scrollLeft = 0;
        }
      },


      // Sentinel for tab index
      setSentinelStart: function setSentinelStart(node) {
        this.sentinelStart = node;
      },
      setSentinelEnd: function setSentinelEnd(node) {
        this.sentinelEnd = node;
      },
      setPanelSentinelStart: function setPanelSentinelStart(node) {
        if (node !== this.panelSentinelStart) {
          this.updateSentinelContext();
        }
        this.panelSentinelStart = node;
      },
      setPanelSentinelEnd: function setPanelSentinelEnd(node) {
        if (node !== this.panelSentinelEnd) {
          this.updateSentinelContext();
        }
        this.panelSentinelEnd = node;
      },
      setActiveKey: function setActiveKey(activeKey) {
        if (this.$data._activeKey !== activeKey) {
          var props = getOptionProps(this);
          if (!('activeKey' in props)) {
            this.setState({
              _activeKey: activeKey
            });
          }
          this.__emit('change', activeKey);
        }
      },
      getNextActiveKey: function getNextActiveKey(next) {
        var activeKey = this.$data._activeKey;
        var children = [];
        this.$props.children.forEach(function (c) {
          if (c && !c.disabled && c.disabled !== '') {
            if (next) {
              children.push(c);
            } else {
              children.unshift(c);
            }
          }
        });
        var length = children.length;
        var ret = length && children[0].key;
        children.forEach(function (child, i) {
          if (child.key === activeKey) {
            if (i === length - 1) {
              ret = children[0].key;
            } else {
              ret = children[i + 1].key;
            }
          }
        });
        return ret;
      },
      updateSentinelContext: function updateSentinelContext() {
        var _this = this;

        if (this.destroy) return;

        raf_1.cancel(this.sentinelId);
        this.sentinelId = raf_1(function () {
          if (_this.destroy) return;
          _this.$forceUpdate();
        });
      }
    },
    render: function render() {
      var _cls;

      var h = arguments[0];

      var props = this.$props;
      var prefixCls = props.prefixCls,
          navWrapper = props.navWrapper,
          tabBarPosition = props.tabBarPosition,
          renderTabContent = props.renderTabContent,
          renderTabBar = props.renderTabBar,
          destroyInactiveTabPane = props.destroyInactiveTabPane,
          direction = props.direction,
          tabBarGutter = props.tabBarGutter;

      var cls = (_cls = {}, _defineProperty(_cls, prefixCls, 1), _defineProperty(_cls, prefixCls + '-' + tabBarPosition, 1), _defineProperty(_cls, prefixCls + '-rtl', direction === 'rtl'), _cls);

      this.tabBar = renderTabBar();
      var tabBar = cloneElement(this.tabBar, {
        props: {
          prefixCls: prefixCls,
          navWrapper: navWrapper,
          tabBarPosition: tabBarPosition,
          panels: props.children,
          activeKey: this.$data._activeKey,
          direction: direction,
          tabBarGutter: tabBarGutter
        },
        on: {
          keydown: this.onNavKeyDown,
          tabClick: this.onTabClick
        },
        key: 'tabBar'
      });
      var tabContent = cloneElement(renderTabContent(), {
        props: {
          prefixCls: prefixCls,
          tabBarPosition: tabBarPosition,
          activeKey: this.$data._activeKey,
          destroyInactiveTabPane: destroyInactiveTabPane,
          direction: direction
        },
        on: {
          change: this.setActiveKey
        },
        children: props.children,
        key: 'tabContent'
      });

      var sentinelStart = h(Sentinel, {
        key: 'sentinelStart',
        attrs: { setRef: this.setSentinelStart,
          nextElement: this.panelSentinelStart
        }
      });
      var sentinelEnd = h(Sentinel, {
        key: 'sentinelEnd',
        attrs: { setRef: this.setSentinelEnd,
          prevElement: this.panelSentinelEnd
        }
      });

      var contents = [];

      if (tabBarPosition === 'bottom') {
        contents.push(sentinelStart, tabContent, sentinelEnd, tabBar);
      } else {
        contents.push(tabBar, sentinelStart, tabContent, sentinelEnd);
      }
      var listeners = _extends$1({}, omit(getListeners(this), ['change']), {
        scroll: this.onScroll
      });
      return h(
        'div',
        { on: listeners, 'class': cls },
        [contents]
      );
    }
  };

  var TabPane = {
    name: 'TabPane',
    props: {
      active: VuePropTypes.bool,
      destroyInactiveTabPane: VuePropTypes.bool,
      forceRender: VuePropTypes.bool,
      placeholder: VuePropTypes.any,
      rootPrefixCls: VuePropTypes.string,
      tab: VuePropTypes.any,
      closable: VuePropTypes.bool,
      disabled: VuePropTypes.bool
    },
    inject: {
      sentinelContext: { 'default': function _default() {
          return {};
        } }
    },
    render: function render() {
      var _cls;

      var h = arguments[0];
      var _$props = this.$props,
          destroyInactiveTabPane = _$props.destroyInactiveTabPane,
          active = _$props.active,
          forceRender = _$props.forceRender,
          rootPrefixCls = _$props.rootPrefixCls;

      var children = this.$slots['default'];
      var placeholder = getComponentFromProp(this, 'placeholder');
      this._isActived = this._isActived || active;
      var prefixCls = rootPrefixCls + '-tabpane';
      var cls = (_cls = {}, _defineProperty(_cls, prefixCls, 1), _defineProperty(_cls, prefixCls + '-inactive', !active), _defineProperty(_cls, prefixCls + '-active', active), _cls);
      var isRender = destroyInactiveTabPane ? active : this._isActived;
      var shouldRender = isRender || forceRender;
      var _sentinelContext = this.sentinelContext,
          sentinelStart = _sentinelContext.sentinelStart,
          sentinelEnd = _sentinelContext.sentinelEnd,
          setPanelSentinelStart = _sentinelContext.setPanelSentinelStart,
          setPanelSentinelEnd = _sentinelContext.setPanelSentinelEnd;

      var panelSentinelStart = void 0;
      var panelSentinelEnd = void 0;
      if (active && shouldRender) {
        panelSentinelStart = h(Sentinel, {
          attrs: { setRef: setPanelSentinelStart, prevElement: sentinelStart }
        });
        panelSentinelEnd = h(Sentinel, {
          attrs: { setRef: setPanelSentinelEnd, nextElement: sentinelEnd }
        });
      }
      return h(
        'div',
        { 'class': cls, attrs: { role: 'tabpanel', 'aria-hidden': active ? 'false' : 'true' }
        },
        [panelSentinelStart, shouldRender ? children : placeholder, panelSentinelEnd]
      );
    }
  };

  function toArray$2(children) {
    var c = [];
    children.forEach(function (child) {
      if (child.data) {
        c.push(child);
      }
    });
    return c;
  }

  function getActiveIndex(children, activeKey) {
    var c = toArray$2(children);
    for (var i = 0; i < c.length; i++) {
      if (c[i].key === activeKey) {
        return i;
      }
    }
    return -1;
  }

  function setTransform$2(style, v) {
    style.transform = v;
    style.webkitTransform = v;
    style.mozTransform = v;
  }

  function isTransform3dSupported(style) {
    return ('transform' in style || 'webkitTransform' in style || 'MozTransform' in style) && window.atob;
  }
  function getTransformPropValue(v) {
    return {
      transform: v,
      WebkitTransform: v,
      MozTransform: v
    };
  }

  function isVertical(tabBarPosition) {
    return tabBarPosition === 'left' || tabBarPosition === 'right';
  }

  function getTransformByIndex(index, tabBarPosition) {
    var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ltr';

    var translate = isVertical(tabBarPosition) ? 'translateY' : 'translateX';
    if (!isVertical(tabBarPosition) && direction === 'rtl') {
      return translate + '(' + index * 100 + '%) translateZ(0)';
    }
    return translate + '(' + -index * 100 + '%) translateZ(0)';
  }

  function getMarginStyle(index, tabBarPosition) {
    var marginDirection = isVertical(tabBarPosition) ? 'marginTop' : 'marginLeft';
    return _defineProperty({}, marginDirection, -index * 100 + '%');
  }

  function getStyle$2(el, property) {
    return +window.getComputedStyle(el).getPropertyValue(property).replace('px', '');
  }

  function toNum(style, property) {
    return +style.getPropertyValue(property).replace('px', '');
  }

  function getTypeValue(start, current, end, tabNode, wrapperNode) {
    var total = getStyle$2(wrapperNode, 'padding-' + start);
    if (!tabNode || !tabNode.parentNode) {
      return total;
    }

    var childNodes = tabNode.parentNode.childNodes;

    Array.prototype.some.call(childNodes, function (node) {
      var style = window.getComputedStyle(node);
      if (node !== tabNode) {
        total += toNum(style, 'margin-' + start);
        total += node[current];
        total += toNum(style, 'margin-' + end);

        if (style.boxSizing === 'content-box') {
          total += toNum(style, 'border-' + start + '-width') + toNum(style, 'border-' + end + '-width');
        }
        return false;
      }

      // We need count current node margin
      // ref: https://github.com/react-component/tabs/pull/139#issuecomment-431005262
      total += toNum(style, 'margin-' + start);

      return true;
    });

    return total;
  }

  function getLeft(tabNode, wrapperNode) {
    return getTypeValue('left', 'offsetWidth', 'right', tabNode, wrapperNode);
  }

  function getTop(tabNode, wrapperNode) {
    return getTypeValue('top', 'offsetHeight', 'bottom', tabNode, wrapperNode);
  }

  var TabContent = {
    name: 'TabContent',
    props: {
      animated: { type: Boolean, 'default': true },
      animatedWithMargin: { type: Boolean, 'default': true },
      prefixCls: {
        'default': 'ant-tabs',
        type: String
      },
      activeKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      tabBarPosition: String,
      direction: VuePropTypes.string,
      destroyInactiveTabPane: VuePropTypes.bool
    },
    computed: {
      classes: function classes() {
        var _ref;

        var animated = this.animated,
            prefixCls = this.prefixCls;

        return _ref = {}, _defineProperty(_ref, prefixCls + '-content', true), _defineProperty(_ref, animated ? prefixCls + '-content-animated' : prefixCls + '-content-no-animated', true), _ref;
      }
    },
    methods: {
      getTabPanes: function getTabPanes() {
        var props = this.$props;
        var activeKey = props.activeKey;
        var children = this.$slots['default'] || [];
        var newChildren = [];

        children.forEach(function (child) {
          if (!child) {
            return;
          }
          var key = child.key;
          var active = activeKey === key;
          newChildren.push(cloneElement(child, {
            props: {
              active: active,
              destroyInactiveTabPane: props.destroyInactiveTabPane,
              rootPrefixCls: props.prefixCls
            }
          }));
        });

        return newChildren;
      }
    },
    render: function render() {
      var h = arguments[0];
      var activeKey = this.activeKey,
          tabBarPosition = this.tabBarPosition,
          animated = this.animated,
          animatedWithMargin = this.animatedWithMargin,
          direction = this.direction,
          classes = this.classes;

      var style = {};
      if (animated && this.$slots['default']) {
        var activeIndex = getActiveIndex(this.$slots['default'], activeKey);
        if (activeIndex !== -1) {
          var animatedStyle = animatedWithMargin ? getMarginStyle(activeIndex, tabBarPosition) : getTransformPropValue(getTransformByIndex(activeIndex, tabBarPosition, direction));
          style = animatedStyle;
        } else {
          style = {
            display: 'none'
          };
        }
      }
      return h(
        'div',
        { 'class': classes, style: style },
        [this.getTabPanes()]
      );
    }
  };

  // based on rc-tabs 9.7.0

  Vue.use(ref$1, { name: 'ant-ref' });

  var isStyleSupport = function isStyleSupport(styleName) {
    if (typeof window !== 'undefined' && window.document && window.document.documentElement) {
      var styleNameList = Array.isArray(styleName) ? styleName : [styleName];
      var documentElement = window.document.documentElement;


      return styleNameList.some(function (name) {
        return name in documentElement.style;
      });
    }
    return false;
  };

  var isFlexSupported = isStyleSupport(['flex', 'webkitFlex', 'Flex', 'msFlex']);

  function componentDidUpdate(component, init) {
    var _component$$props = component.$props,
        _component$$props$sty = _component$$props.styles,
        styles = _component$$props$sty === undefined ? {} : _component$$props$sty,
        panels = _component$$props.panels,
        activeKey = _component$$props.activeKey,
        direction = _component$$props.direction;

    var rootNode = component.getRef('root');
    var wrapNode = component.getRef('nav') || rootNode;
    var inkBarNode = component.getRef('inkBar');
    var activeTab = component.getRef('activeTab');
    var inkBarNodeStyle = inkBarNode.style;
    var tabBarPosition = component.$props.tabBarPosition;
    var activeIndex = getActiveIndex(panels, activeKey);
    if (init) {
      // prevent mount animation
      inkBarNodeStyle.display = 'none';
    }
    if (activeTab) {
      var tabNode = activeTab;
      var transformSupported = isTransform3dSupported(inkBarNodeStyle);

      // Reset current style
      setTransform$2(inkBarNodeStyle, '');
      inkBarNodeStyle.width = '';
      inkBarNodeStyle.height = '';
      inkBarNodeStyle.left = '';
      inkBarNodeStyle.top = '';
      inkBarNodeStyle.bottom = '';
      inkBarNodeStyle.right = '';

      if (tabBarPosition === 'top' || tabBarPosition === 'bottom') {
        var left = getLeft(tabNode, wrapNode);
        var width = tabNode.offsetWidth;
        // If tabNode'width width equal to wrapNode'width when tabBarPosition is top or bottom
        // It means no css working, then ink bar should not have width until css is loaded
        // Fix https://github.com/ant-design/ant-design/issues/7564
        if (width === rootNode.offsetWidth) {
          width = 0;
        } else if (styles.inkBar && styles.inkBar.width !== undefined) {
          width = parseFloat(styles.inkBar.width, 10);
          if (width) {
            left += (tabNode.offsetWidth - width) / 2;
          }
        }
        if (direction === 'rtl') {
          left = getStyle$2(tabNode, 'margin-left') - left;
        }
        // use 3d gpu to optimize render
        if (transformSupported) {
          setTransform$2(inkBarNodeStyle, 'translate3d(' + left + 'px,0,0)');
        } else {
          inkBarNodeStyle.left = left + 'px';
        }
        inkBarNodeStyle.width = width + 'px';
      } else {
        var top = getTop(tabNode, wrapNode);
        var height = tabNode.offsetHeight;
        if (styles.inkBar && styles.inkBar.height !== undefined) {
          height = parseFloat(styles.inkBar.height, 10);
          if (height) {
            top += (tabNode.offsetHeight - height) / 2;
          }
        }
        if (transformSupported) {
          setTransform$2(inkBarNodeStyle, 'translate3d(0,' + top + 'px,0)');
          inkBarNodeStyle.top = '0';
        } else {
          inkBarNodeStyle.top = top + 'px';
        }
        inkBarNodeStyle.height = height + 'px';
      }
    }
    inkBarNodeStyle.display = activeIndex !== -1 ? 'block' : 'none';
  }

  var InkTabBarNode = {
    name: 'InkTabBarNode',
    mixins: [BaseMixin],
    props: {
      inkBarAnimated: {
        type: Boolean,
        'default': true
      },
      direction: VuePropTypes.string,
      prefixCls: String,
      styles: Object,
      tabBarPosition: String,
      saveRef: VuePropTypes.func.def(function () {}),
      getRef: VuePropTypes.func.def(function () {}),
      panels: VuePropTypes.array,
      activeKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number])
    },
    updated: function updated() {
      this.$nextTick(function () {
        componentDidUpdate(this);
      });
    },
    mounted: function mounted() {
      this.$nextTick(function () {
        componentDidUpdate(this, true);
      });
    },
    render: function render() {
      var _classes;

      var h = arguments[0];
      var prefixCls = this.prefixCls,
          _styles = this.styles,
          styles = _styles === undefined ? {} : _styles,
          inkBarAnimated = this.inkBarAnimated;

      var className = prefixCls + '-ink-bar';
      var classes = (_classes = {}, _defineProperty(_classes, className, true), _defineProperty(_classes, inkBarAnimated ? className + '-animated' : className + '-no-animated', true), _classes);
      return h('div', babelHelperVueJsxMergeProps([{
        style: styles.inkBar,
        'class': classes,
        key: 'inkBar'
      }, {
        directives: [{
          name: 'ant-ref',
          value: this.saveRef('inkBar')
        }]
      }]));
    }
  };

  function noop$g() {}
  var TabBarTabsNode = {
    name: 'TabBarTabsNode',
    mixins: [BaseMixin],
    props: {
      activeKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      panels: VuePropTypes.any.def([]),
      prefixCls: VuePropTypes.string.def(''),
      tabBarGutter: VuePropTypes.any.def(null),
      onTabClick: VuePropTypes.func,
      saveRef: VuePropTypes.func.def(noop$g),
      getRef: VuePropTypes.func.def(noop$g),
      renderTabBarNode: VuePropTypes.func,
      tabBarPosition: VuePropTypes.string,
      direction: VuePropTypes.string
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var _$props = this.$props,
          children = _$props.panels,
          activeKey = _$props.activeKey,
          prefixCls = _$props.prefixCls,
          tabBarGutter = _$props.tabBarGutter,
          saveRef = _$props.saveRef,
          tabBarPosition = _$props.tabBarPosition,
          direction = _$props.direction;

      var rst = [];
      var renderTabBarNode = this.renderTabBarNode || this.$scopedSlots.renderTabBarNode;
      children.forEach(function (child, index) {
        if (!child) {
          return;
        }
        var props = getOptionProps(child);
        var key = child.key;
        var cls = activeKey === key ? prefixCls + '-tab-active' : '';
        cls += ' ' + prefixCls + '-tab';
        var events = { on: {} };
        var disabled = props.disabled || props.disabled === '';
        if (disabled) {
          cls += ' ' + prefixCls + '-tab-disabled';
        } else {
          events.on.click = function () {
            _this.__emit('tabClick', key);
          };
        }
        var directives = [];
        if (activeKey === key) {
          directives.push({
            name: 'ant-ref',
            value: saveRef('activeTab')
          });
        }
        var tab = getComponentFromProp(child, 'tab');
        var gutter = tabBarGutter && index === children.length - 1 ? 0 : tabBarGutter;
        gutter = typeof gutter === 'number' ? gutter + 'px' : gutter;
        var marginProperty = direction === 'rtl' ? 'marginLeft' : 'marginRight';
        var style = _defineProperty({}, isVertical(tabBarPosition) ? 'marginBottom' : marginProperty, gutter);
        warning_1(tab !== undefined, 'There must be `tab` property or slot on children of Tabs.');
        var node = h(
          'div',
          babelHelperVueJsxMergeProps([{
            attrs: {
              role: 'tab',
              'aria-disabled': disabled ? 'true' : 'false',
              'aria-selected': activeKey === key ? 'true' : 'false'
            }
          }, events, {
            'class': cls,
            key: key,
            style: style
          }, { directives: directives }]),
          [tab]
        );
        if (renderTabBarNode) {
          node = renderTabBarNode(node);
        }

        rst.push(node);
      });

      return h(
        'div',
        {
          directives: [{
            name: 'ant-ref',
            value: this.saveRef('navTabsContainer')
          }]
        },
        [rst]
      );
    }
  };

  function noop$h() {}
  var TabBarRootNode = {
    name: 'TabBarRootNode',
    mixins: [BaseMixin],
    props: {
      saveRef: VuePropTypes.func.def(noop$h),
      getRef: VuePropTypes.func.def(noop$h),
      prefixCls: VuePropTypes.string.def(''),
      tabBarPosition: VuePropTypes.string.def('top'),
      extraContent: VuePropTypes.any
    },
    methods: {
      onKeyDown: function onKeyDown(e) {
        this.__emit('keydown', e);
      }
    },
    render: function render() {
      var h = arguments[0];
      var prefixCls = this.prefixCls,
          onKeyDown = this.onKeyDown,
          tabBarPosition = this.tabBarPosition,
          extraContent = this.extraContent;

      var cls = _defineProperty({}, prefixCls + '-bar', true);
      var topOrBottom = tabBarPosition === 'top' || tabBarPosition === 'bottom';
      var tabBarExtraContentStyle = topOrBottom ? { float: 'right' } : {};
      var children = this.$slots['default'];
      var newChildren = children;
      if (extraContent) {
        newChildren = [cloneElement(extraContent, {
          key: 'extra',
          style: _extends$1({}, tabBarExtraContentStyle)
        }), cloneElement(children, { key: 'content' })];
        newChildren = topOrBottom ? newChildren : newChildren.reverse();
      }

      return h(
        'div',
        babelHelperVueJsxMergeProps([{
          attrs: {
            role: 'tablist',

            tabIndex: '0'
          },
          'class': cls, on: {
            'keydown': onKeyDown
          }
        }, {
          directives: [{
            name: 'ant-ref',
            value: this.saveRef('root')
          }]
        }]),
        [newChildren]
      );
    }
  };

  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */
  var now = function() {
    return _root.Date.now();
  };

  var now_1 = now;

  /** `Object#toString` result references. */
  var symbolTag$2 = '[object Symbol]';

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol$1(value) {
    return typeof value == 'symbol' ||
      (isObjectLike_1(value) && _baseGetTag(value) == symbolTag$2);
  }

  var isSymbol_1 = isSymbol$1;

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber$1(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol_1(value)) {
      return NAN;
    }
    if (isObject_1(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject_1(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN : +value);
  }

  var toNumber_1 = toNumber$1;

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max,
      nativeMin = Math.min;

  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */
  function debounce(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber_1(wait) || 0;
    if (isObject_1(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax(toNumber_1(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;

      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time;
      // Start the timer for the trailing edge.
      timerId = setTimeout(timerExpired, wait);
      // Invoke the leading edge.
      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          timeWaiting = wait - timeSinceLastCall;

      return maxing
        ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
        : timeWaiting;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime;

      // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.
      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    }

    function timerExpired() {
      var time = now_1();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      // Restart the timer.
      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined;

      // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now_1());
    }

    function debounced() {
      var time = now_1(),
          isInvoking = shouldInvoke(time);

      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          // Handle invocations in a tight loop.
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  var debounce_1 = debounce;

  function noop$i() {}
  var ScrollableTabBarNode = {
    name: 'ScrollableTabBarNode',
    mixins: [BaseMixin],
    props: {
      activeKey: VuePropTypes.any,
      getRef: VuePropTypes.func.def(function () {}),
      saveRef: VuePropTypes.func.def(function () {}),
      tabBarPosition: VuePropTypes.oneOf(['left', 'right', 'top', 'bottom']).def('left'),
      prefixCls: VuePropTypes.string.def(''),
      scrollAnimated: VuePropTypes.bool.def(true),
      navWrapper: VuePropTypes.func.def(function (arg) {
        return arg;
      }),
      prevIcon: VuePropTypes.any,
      nextIcon: VuePropTypes.any,
      direction: VuePropTypes.string
    },

    data: function data() {
      this.offset = 0;
      this.prevProps = _extends$1({}, this.$props);
      return {
        next: false,
        prev: false
      };
    },

    watch: {
      tabBarPosition: function tabBarPosition() {
        var _this = this;

        this.tabBarPositionChange = true;
        this.$nextTick(function () {
          _this.setOffset(0);
        });
      }
    },

    mounted: function mounted() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.updatedCal();
        _this2.debouncedResize = debounce_1(function () {
          _this2.setNextPrev();
          _this2.scrollToActiveTab();
        }, 200);
        _this2.resizeObserver = new index(_this2.debouncedResize);
        _this2.resizeObserver.observe(_this2.$props.getRef('container'));
      });
    },
    updated: function updated() {
      var _this3 = this;

      this.$nextTick(function () {
        _this3.updatedCal(_this3.prevProps);
        _this3.prevProps = _extends$1({}, _this3.$props);
      });
    },
    beforeDestroy: function beforeDestroy() {
      if (this.resizeObserver) {
        this.resizeObserver.disconnect();
      }
      if (this.debouncedResize && this.debouncedResize.cancel) {
        this.debouncedResize.cancel();
      }
    },

    methods: {
      updatedCal: function updatedCal(prevProps) {
        var _this4 = this;

        var props = this.$props;
        if (prevProps && prevProps.tabBarPosition !== props.tabBarPosition) {
          this.setOffset(0);
          return;
        }
        // wait next, prev show hide
        if (this.isNextPrevShown(this.$data) !== this.isNextPrevShown(this.setNextPrev())) {
          this.$forceUpdate();
          this.$nextTick(function () {
            _this4.scrollToActiveTab();
          });
        } else if (!prevProps || props.activeKey !== prevProps.activeKey) {
          // can not use props.activeKey
          this.scrollToActiveTab();
        }
      },
      setNextPrev: function setNextPrev() {
        var navNode = this.$props.getRef('nav');
        var navTabsContainer = this.$props.getRef('navTabsContainer');
        var navNodeWH = this.getScrollWH(navTabsContainer || navNode);
        // Add 1px to fix `offsetWidth` with decimal in Chrome not correct handle
        // https://github.com/ant-design/ant-design/issues/13423
        var containerWH = this.getOffsetWH(this.$props.getRef('container')) + 1;
        var navWrapNodeWH = this.getOffsetWH(this.$props.getRef('navWrap'));
        var offset = this.offset;

        var minOffset = containerWH - navNodeWH;
        var next = this.next,
            prev = this.prev;

        if (minOffset >= 0) {
          next = false;
          this.setOffset(0, false);
          offset = 0;
        } else if (minOffset < offset) {
          next = true;
        } else {
          next = false;
          // Fix https://github.com/ant-design/ant-design/issues/8861
          // Test with container offset which is stable
          // and set the offset of the nav wrap node
          var realOffset = navWrapNodeWH - navNodeWH;
          this.setOffset(realOffset, false);
          offset = realOffset;
        }

        if (offset < 0) {
          prev = true;
        } else {
          prev = false;
        }

        this.setNext(next);
        this.setPrev(prev);
        return {
          next: next,
          prev: prev
        };
      },
      getOffsetWH: function getOffsetWH(node) {
        var tabBarPosition = this.$props.tabBarPosition;
        var prop = 'offsetWidth';
        if (tabBarPosition === 'left' || tabBarPosition === 'right') {
          prop = 'offsetHeight';
        }
        return node[prop];
      },
      getScrollWH: function getScrollWH(node) {
        var tabBarPosition = this.tabBarPosition;
        var prop = 'scrollWidth';
        if (tabBarPosition === 'left' || tabBarPosition === 'right') {
          prop = 'scrollHeight';
        }
        return node[prop];
      },
      getOffsetLT: function getOffsetLT(node) {
        var tabBarPosition = this.$props.tabBarPosition;
        var prop = 'left';
        if (tabBarPosition === 'left' || tabBarPosition === 'right') {
          prop = 'top';
        }
        return node.getBoundingClientRect()[prop];
      },
      setOffset: function setOffset(offset) {
        var checkNextPrev = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var target = Math.min(0, offset);
        if (this.offset !== target) {
          this.offset = target;
          var navOffset = {};
          var tabBarPosition = this.$props.tabBarPosition;
          var navStyle = this.$props.getRef('nav').style;
          var transformSupported = isTransform3dSupported(navStyle);
          if (tabBarPosition === 'left' || tabBarPosition === 'right') {
            if (transformSupported) {
              navOffset = {
                value: 'translate3d(0,' + target + 'px,0)'
              };
            } else {
              navOffset = {
                name: 'top',
                value: target + 'px'
              };
            }
          } else if (transformSupported) {
            if (this.$props.direction === 'rtl') {
              target = -target;
            }
            navOffset = {
              value: 'translate3d(' + target + 'px,0,0)'
            };
          } else {
            navOffset = {
              name: 'left',
              value: target + 'px'
            };
          }
          if (transformSupported) {
            setTransform$2(navStyle, navOffset.value);
          } else {
            navStyle[navOffset.name] = navOffset.value;
          }
          if (checkNextPrev) {
            this.setNextPrev();
          }
        }
      },
      setPrev: function setPrev(v) {
        if (this.prev !== v) {
          this.prev = v;
        }
      },
      setNext: function setNext(v) {
        if (this.next !== v) {
          this.next = v;
        }
      },
      isNextPrevShown: function isNextPrevShown(state) {
        if (state) {
          return state.next || state.prev;
        }
        return this.next || this.prev;
      },
      prevTransitionEnd: function prevTransitionEnd(e) {
        if (e.propertyName !== 'opacity') {
          return;
        }
        var container = this.$props.getRef('container');
        this.scrollToActiveTab({
          target: container,
          currentTarget: container
        });
      },
      scrollToActiveTab: function scrollToActiveTab(e) {
        var activeTab = this.$props.getRef('activeTab');
        var navWrap = this.$props.getRef('navWrap');
        if (e && e.target !== e.currentTarget || !activeTab) {
          return;
        }

        // when not scrollable or enter scrollable first time, don't emit scrolling
        var needToSroll = this.isNextPrevShown() && this.lastNextPrevShown;
        this.lastNextPrevShown = this.isNextPrevShown();
        if (!needToSroll) {
          return;
        }

        var activeTabWH = this.getScrollWH(activeTab);
        var navWrapNodeWH = this.getOffsetWH(navWrap);
        var offset = this.offset;

        var wrapOffset = this.getOffsetLT(navWrap);
        var activeTabOffset = this.getOffsetLT(activeTab);
        if (wrapOffset > activeTabOffset) {
          offset += wrapOffset - activeTabOffset;
          this.setOffset(offset);
        } else if (wrapOffset + navWrapNodeWH < activeTabOffset + activeTabWH) {
          offset -= activeTabOffset + activeTabWH - (wrapOffset + navWrapNodeWH);
          this.setOffset(offset);
        }
      },
      prevClick: function prevClick(e) {
        this.__emit('prevClick', e);
        var navWrapNode = this.$props.getRef('navWrap');
        var navWrapNodeWH = this.getOffsetWH(navWrapNode);
        var offset = this.offset;

        this.setOffset(offset + navWrapNodeWH);
      },
      nextClick: function nextClick(e) {
        this.__emit('nextClick', e);
        var navWrapNode = this.$props.getRef('navWrap');
        var navWrapNodeWH = this.getOffsetWH(navWrapNode);
        var offset = this.offset;

        this.setOffset(offset - navWrapNodeWH);
      }
    },
    render: function render() {
      var _ref, _ref2, _navClasses, _ref3;

      var h = arguments[0];
      var next = this.next,
          prev = this.prev;
      var _$props = this.$props,
          prefixCls = _$props.prefixCls,
          scrollAnimated = _$props.scrollAnimated,
          navWrapper = _$props.navWrapper;

      var prevIcon = getComponentFromProp(this, 'prevIcon');
      var nextIcon = getComponentFromProp(this, 'nextIcon');
      var showNextPrev = prev || next;

      var prevButton = h(
        'span',
        {
          on: {
            'click': prev ? this.prevClick : noop$i,
            'transitionend': this.prevTransitionEnd
          },
          attrs: {
            unselectable: 'unselectable'
          },
          'class': (_ref = {}, _defineProperty(_ref, prefixCls + '-tab-prev', 1), _defineProperty(_ref, prefixCls + '-tab-btn-disabled', !prev), _defineProperty(_ref, prefixCls + '-tab-arrow-show', showNextPrev), _ref)
        },
        [prevIcon || h('span', { 'class': prefixCls + '-tab-prev-icon' })]
      );

      var nextButton = h(
        'span',
        {
          on: {
            'click': next ? this.nextClick : noop$i
          },
          attrs: {
            unselectable: 'unselectable'
          },
          'class': (_ref2 = {}, _defineProperty(_ref2, prefixCls + '-tab-next', 1), _defineProperty(_ref2, prefixCls + '-tab-btn-disabled', !next), _defineProperty(_ref2, prefixCls + '-tab-arrow-show', showNextPrev), _ref2)
        },
        [nextIcon || h('span', { 'class': prefixCls + '-tab-next-icon' })]
      );

      var navClassName = prefixCls + '-nav';
      var navClasses = (_navClasses = {}, _defineProperty(_navClasses, navClassName, true), _defineProperty(_navClasses, scrollAnimated ? navClassName + '-animated' : navClassName + '-no-animated', true), _navClasses);

      return h(
        'div',
        babelHelperVueJsxMergeProps([{
          'class': (_ref3 = {}, _defineProperty(_ref3, prefixCls + '-nav-container', 1), _defineProperty(_ref3, prefixCls + '-nav-container-scrolling', showNextPrev), _ref3),
          key: 'container'
        }, {
          directives: [{
            name: 'ant-ref',
            value: this.saveRef('container')
          }]
        }]),
        [prevButton, nextButton, h(
          'div',
          babelHelperVueJsxMergeProps([{
            'class': prefixCls + '-nav-wrap'
          }, {
            directives: [{
              name: 'ant-ref',
              value: this.saveRef('navWrap')
            }]
          }]),
          [h(
            'div',
            { 'class': prefixCls + '-nav-scroll' },
            [h(
              'div',
              babelHelperVueJsxMergeProps([{
                'class': navClasses
              }, {
                directives: [{
                  name: 'ant-ref',
                  value: this.saveRef('nav')
                }]
              }]),
              [navWrapper(this.$slots['default'])]
            )]
          )]
        )]
      );
    }
  };

  var SaveRef = {
    props: {
      children: VuePropTypes.func.def(function () {
        return null;
      })
    },
    methods: {
      getRef: function getRef(name) {
        return this[name];
      },
      saveRef: function saveRef(name) {
        var _this = this;

        return function (node) {
          if (node) {
            _this[name] = node;
          }
        };
      }
    },

    render: function render() {
      var _this2 = this;

      // 每次都new一个新的function，避免子节点不能重新渲染
      var saveRef = function saveRef(name) {
        return _this2.saveRef(name);
      };
      var getRef = function getRef(name) {
        return _this2.getRef(name);
      };
      return this.children(saveRef, getRef);
    }
  };

  var ScrollableInkTabBar = {
    name: 'ScrollableInkTabBar',
    inheritAttrs: false,
    props: ['extraContent', 'inkBarAnimated', 'tabBarGutter', 'prefixCls', 'navWrapper', 'tabBarPosition', 'panels', 'activeKey', 'prevIcon', 'nextIcon'],
    render: function render() {
      var h = arguments[0];

      var props = _extends$1({}, this.$props);
      var listeners = getListeners(this);
      var renderTabBarNode = this.$scopedSlots['default'];

      return h(SaveRef, {
        attrs: {
          children: function children(saveRef, getRef) {
            return h(
              TabBarRootNode,
              babelHelperVueJsxMergeProps([{
                attrs: { saveRef: saveRef }
              }, { props: props, on: listeners }]),
              [h(
                ScrollableTabBarNode,
                babelHelperVueJsxMergeProps([{
                  attrs: { saveRef: saveRef, getRef: getRef }
                }, { props: props, on: listeners }]),
                [h(TabBarTabsNode, babelHelperVueJsxMergeProps([{
                  attrs: {
                    saveRef: saveRef
                  }
                }, { props: _extends$1({}, props, { renderTabBarNode: renderTabBarNode }), on: listeners }])), h(InkTabBarNode, babelHelperVueJsxMergeProps([{
                  attrs: { saveRef: saveRef, getRef: getRef }
                }, { props: props, on: listeners }]))]
              )]
            );
          }
        }
      });
    }
  };

  var TabBar = {
    name: 'TabBar',
    inheritAttrs: false,
    props: {
      prefixCls: VuePropTypes.string,
      tabBarStyle: VuePropTypes.object,
      tabBarExtraContent: VuePropTypes.any,
      type: VuePropTypes.oneOf(['line', 'card', 'editable-card']),
      tabPosition: VuePropTypes.oneOf(['top', 'right', 'bottom', 'left']).def('top'),
      tabBarPosition: VuePropTypes.oneOf(['top', 'right', 'bottom', 'left']),
      size: VuePropTypes.oneOf(['default', 'small', 'large']),
      animated: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.object]),
      renderTabBar: VuePropTypes.func,
      panels: VuePropTypes.array.def([]),
      activeKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      tabBarGutter: VuePropTypes.number
    },
    render: function render() {
      var _cls;

      var h = arguments[0];
      var _$props = this.$props,
          tabBarStyle = _$props.tabBarStyle,
          _$props$animated = _$props.animated,
          animated = _$props$animated === undefined ? true : _$props$animated,
          renderTabBar = _$props.renderTabBar,
          tabBarExtraContent = _$props.tabBarExtraContent,
          tabPosition = _$props.tabPosition,
          prefixCls = _$props.prefixCls,
          _$props$type = _$props.type,
          type = _$props$type === undefined ? 'line' : _$props$type,
          size = _$props.size;

      var inkBarAnimated = (typeof animated === 'undefined' ? 'undefined' : _typeof(animated)) === 'object' ? animated.inkBar : animated;

      var isVertical = tabPosition === 'left' || tabPosition === 'right';
      var prevIconType = isVertical ? 'up' : 'left';
      var nextIconType = isVertical ? 'down' : 'right';
      var prevIcon = h(
        'span',
        { 'class': prefixCls + '-tab-prev-icon' },
        [h(Icon$1, {
          attrs: { type: prevIconType },
          'class': prefixCls + '-tab-prev-icon-target' })]
      );
      var nextIcon = h(
        'span',
        { 'class': prefixCls + '-tab-next-icon' },
        [h(Icon$1, {
          attrs: { type: nextIconType },
          'class': prefixCls + '-tab-next-icon-target' })]
      );

      // Additional className for style usage
      var cls = (_cls = {}, _defineProperty(_cls, prefixCls + '-' + tabPosition + '-bar', true), _defineProperty(_cls, prefixCls + '-' + size + '-bar', !!size), _defineProperty(_cls, prefixCls + '-card-bar', type && type.indexOf('card') >= 0), _cls);

      var renderProps = {
        props: _extends$1({}, this.$props, this.$attrs, {
          inkBarAnimated: inkBarAnimated,
          extraContent: tabBarExtraContent,
          prevIcon: prevIcon,
          nextIcon: nextIcon
        }),
        style: tabBarStyle,
        on: getListeners(this),
        'class': cls
      };

      var RenderTabBar = void 0;

      if (renderTabBar) {
        RenderTabBar = renderTabBar(renderProps, ScrollableInkTabBar);
        // https://github.com/vueComponent/ant-design-vue/issues/2157
        return cloneElement(RenderTabBar, renderProps);
      } else {
        return h(ScrollableInkTabBar, renderProps);
      }
    }
  };

  var Tabs$1 = {
    TabPane: TabPane,
    name: 'ATabs',
    model: {
      prop: 'activeKey',
      event: 'change'
    },
    props: {
      prefixCls: VuePropTypes.string,
      activeKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      defaultActiveKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      hideAdd: VuePropTypes.bool.def(false),
      tabBarStyle: VuePropTypes.object,
      tabBarExtraContent: VuePropTypes.any,
      destroyInactiveTabPane: VuePropTypes.bool.def(false),
      type: VuePropTypes.oneOf(['line', 'card', 'editable-card']),
      tabPosition: VuePropTypes.oneOf(['top', 'right', 'bottom', 'left']).def('top'),
      size: VuePropTypes.oneOf(['default', 'small', 'large']),
      animated: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.object]),
      tabBarGutter: VuePropTypes.number,
      renderTabBar: VuePropTypes.func
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    mounted: function mounted() {
      var NO_FLEX = ' no-flex';
      var tabNode = this.$el;
      if (tabNode && !isFlexSupported && tabNode.className.indexOf(NO_FLEX) === -1) {
        tabNode.className += NO_FLEX;
      }
    },

    methods: {
      removeTab: function removeTab(targetKey, e) {
        e.stopPropagation();
        if (isValid(targetKey)) {
          this.$emit('edit', targetKey, 'remove');
        }
      },
      handleChange: function handleChange(activeKey) {
        this.$emit('change', activeKey);
      },
      createNewTab: function createNewTab(targetKey) {
        this.$emit('edit', targetKey, 'add');
      },
      onTabClick: function onTabClick(val) {
        this.$emit('tabClick', val);
      },
      onPrevClick: function onPrevClick(val) {
        this.$emit('prevClick', val);
      },
      onNextClick: function onNextClick(val) {
        this.$emit('nextClick', val);
      }
    },

    render: function render() {
      var _cls,
          _this = this,
          _contentCls;

      var h = arguments[0];

      var props = getOptionProps(this);
      var customizePrefixCls = props.prefixCls,
          size = props.size,
          _props$type = props.type,
          type = _props$type === undefined ? 'line' : _props$type,
          tabPosition = props.tabPosition,
          _props$animated = props.animated,
          animated = _props$animated === undefined ? true : _props$animated,
          hideAdd = props.hideAdd,
          renderTabBar = props.renderTabBar;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('tabs', customizePrefixCls);
      var children = filterEmpty(this.$slots['default']);

      var tabBarExtraContent = getComponentFromProp(this, 'tabBarExtraContent');
      var tabPaneAnimated = (typeof animated === 'undefined' ? 'undefined' : _typeof(animated)) === 'object' ? animated.tabPane : animated;

      // card tabs should not have animation
      if (type !== 'line') {
        tabPaneAnimated = 'animated' in props ? tabPaneAnimated : false;
      }
      var cls = (_cls = {}, _defineProperty(_cls, prefixCls + '-vertical', tabPosition === 'left' || tabPosition === 'right'), _defineProperty(_cls, prefixCls + '-' + size, !!size), _defineProperty(_cls, prefixCls + '-card', type.indexOf('card') >= 0), _defineProperty(_cls, prefixCls + '-' + type, true), _defineProperty(_cls, prefixCls + '-no-animation', !tabPaneAnimated), _cls);
      // only card type tabs can be added and closed
      var childrenWithClose = [];
      if (type === 'editable-card') {
        childrenWithClose = [];
        children.forEach(function (child, index) {
          var props = getOptionProps(child);
          var closable = props.closable;
          closable = typeof closable === 'undefined' ? true : closable;
          var closeIcon = closable ? h(Icon$1, {
            attrs: {
              type: 'close'
            },
            'class': prefixCls + '-close-x',
            on: {
              'click': function click(e) {
                return _this.removeTab(child.key, e);
              }
            }
          }) : null;
          childrenWithClose.push(cloneElement(child, {
            props: {
              tab: h(
                'div',
                { 'class': closable ? undefined : prefixCls + '-tab-unclosable' },
                [getComponentFromProp(child, 'tab'), closeIcon]
              )
            },
            key: child.key || index
          }));
        });
        // Add new tab handler
        if (!hideAdd) {
          tabBarExtraContent = h('span', [h(Icon$1, {
            attrs: { type: 'plus' },
            'class': prefixCls + '-new-tab', on: {
              'click': this.createNewTab
            }
          }), tabBarExtraContent]);
        }
      }

      tabBarExtraContent = tabBarExtraContent ? h(
        'div',
        { 'class': prefixCls + '-extra-content' },
        [tabBarExtraContent]
      ) : null;

      var renderTabBarSlot = renderTabBar || this.$scopedSlots.renderTabBar;
      var listeners = getListeners(this);
      var tabBarProps = {
        props: _extends$1({}, this.$props, {
          prefixCls: prefixCls,
          tabBarExtraContent: tabBarExtraContent,
          renderTabBar: renderTabBarSlot
        }),
        on: listeners
      };
      var contentCls = (_contentCls = {}, _defineProperty(_contentCls, prefixCls + '-' + tabPosition + '-content', true), _defineProperty(_contentCls, prefixCls + '-card-content', type.indexOf('card') >= 0), _contentCls);
      var tabsProps = {
        props: _extends$1({}, getOptionProps(this), {
          prefixCls: prefixCls,
          tabBarPosition: tabPosition,
          // https://github.com/vueComponent/ant-design-vue/issues/2030
          // 如仅传递 tabBarProps 会导致，第二次执行 renderTabBar 时，丢失 on 属性，
          // 添加key之后，会在babel jsx 插件中做一次merge，最终TabBar接收的是一个新的对象，而不是 tabBarProps
          renderTabBar: function renderTabBar() {
            return h(TabBar, babelHelperVueJsxMergeProps([{ key: 'tabBar' }, tabBarProps]));
          },
          renderTabContent: function renderTabContent() {
            return h(TabContent, { 'class': contentCls, attrs: { animated: tabPaneAnimated, animatedWithMargin: true }
            });
          },
          children: childrenWithClose.length > 0 ? childrenWithClose : children,
          __propsSymbol__: Symbol()
        }),
        on: _extends$1({}, listeners, {
          change: this.handleChange
        }),
        'class': cls
      };
      return h(Tabs, tabsProps);
    }
  };

  Tabs$1.TabPane = _extends$1({}, TabPane, { name: 'ATabPane', __ANT_TAB_PANE: true });
  Tabs$1.TabContent = _extends$1({}, TabContent, { name: 'ATabContent' });
  Vue.use(ref$1, { name: 'ant-ref' });

  /* istanbul ignore next */
  Tabs$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Tabs$1.name, Tabs$1);
    Vue.component(Tabs$1.TabPane.name, Tabs$1.TabPane);
    Vue.component(Tabs$1.TabContent.name, Tabs$1.TabContent);
  };

  // matchMedia polyfill for
  // https://github.com/WickyNilliams/enquire.js/issues/82
  var enquire = void 0;

  // TODO: Will be removed in antd 4.0 because we will no longer support ie9
  if (typeof window !== 'undefined') {
    var matchMediaPolyfill = function matchMediaPolyfill(mediaQuery) {
      return {
        media: mediaQuery,
        matches: false,
        addListener: function addListener() {},
        removeListener: function removeListener() {}
      };
    };
    // ref: https://github.com/ant-design/ant-design/issues/18774
    if (!window.matchMedia) window.matchMedia = matchMediaPolyfill;
    // eslint-disable-next-line global-require
    enquire = require('enquire.js');
  }

  var responsiveArray = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];

  var responsiveMap = {
    xs: '(max-width: 575px)',
    sm: '(min-width: 576px)',
    md: '(min-width: 768px)',
    lg: '(min-width: 992px)',
    xl: '(min-width: 1200px)',
    xxl: '(min-width: 1600px)'
  };

  var subscribers = [];
  var subUid = -1;
  var screens = {};

  var responsiveObserve = {
    dispatch: function dispatch(pointMap) {
      screens = pointMap;
      if (subscribers.length < 1) {
        return false;
      }

      subscribers.forEach(function (item) {
        item.func(screens);
      });

      return true;
    },
    subscribe: function subscribe(func) {
      if (subscribers.length === 0) {
        this.register();
      }
      var token = (++subUid).toString();
      subscribers.push({
        token: token,
        func: func
      });
      func(screens);
      return token;
    },
    unsubscribe: function unsubscribe(token) {
      subscribers = subscribers.filter(function (item) {
        return item.token !== token;
      });
      if (subscribers.length === 0) {
        this.unregister();
      }
    },
    unregister: function unregister() {
      Object.keys(responsiveMap).map(function (screen) {
        return enquire.unregister(responsiveMap[screen]);
      });
    },
    register: function register() {
      var _this = this;

      Object.keys(responsiveMap).map(function (screen) {
        return enquire.register(responsiveMap[screen], {
          match: function match() {
            var pointMap = _extends$1({}, screens, _defineProperty({}, screen, true));
            _this.dispatch(pointMap);
          },
          unmatch: function unmatch() {
            var pointMap = _extends$1({}, screens, _defineProperty({}, screen, false));
            _this.dispatch(pointMap);
          },
          // Keep a empty destroy to avoid triggering unmatch when unregister
          destroy: function destroy() {}
        });
      });
    }
  };

  var RowProps = {
    gutter: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.number, VuePropTypes.array]),
    type: VuePropTypes.oneOf(['flex']),
    align: VuePropTypes.oneOf(['top', 'middle', 'bottom', 'stretch']),
    justify: VuePropTypes.oneOf(['start', 'end', 'center', 'space-around', 'space-between']),
    prefixCls: VuePropTypes.string
  };

  var responsiveArray$1 = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];

  var Row = {
    name: 'ARow',
    mixins: [BaseMixin],
    props: _extends$1({}, RowProps, {
      gutter: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.number, VuePropTypes.array]).def(0)
    }),
    provide: function provide() {
      return {
        rowContext: this
      };
    },

    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      return {
        screens: {}
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        _this.token = responsiveObserve.subscribe(function (screens) {
          var gutter = _this.gutter;

          if ((typeof gutter === 'undefined' ? 'undefined' : _typeof(gutter)) === 'object' || Array.isArray(gutter) && (_typeof(gutter[0]) === 'object' || _typeof(gutter[1]) === 'object')) {
            _this.screens = screens;
          }
        });
      });
    },
    beforeDestroy: function beforeDestroy() {
      responsiveObserve.unsubscribe(this.token);
    },

    methods: {
      getGutter: function getGutter() {
        var results = [0, 0];
        var gutter = this.gutter,
            screens = this.screens;

        var normalizedGutter = Array.isArray(gutter) ? gutter : [gutter, 0];
        normalizedGutter.forEach(function (g, index) {
          if ((typeof g === 'undefined' ? 'undefined' : _typeof(g)) === 'object') {
            for (var i = 0; i < responsiveArray$1.length; i++) {
              var breakpoint = responsiveArray$1[i];
              if (screens[breakpoint] && g[breakpoint] !== undefined) {
                results[index] = g[breakpoint];
                break;
              }
            }
          } else {
            results[index] = g || 0;
          }
        });
        return results;
      }
    },

    render: function render() {
      var _classes;

      var h = arguments[0];
      var type = this.type,
          justify = this.justify,
          align = this.align,
          customizePrefixCls = this.prefixCls,
          $slots = this.$slots;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('row', customizePrefixCls);

      var gutter = this.getGutter();
      var classes = (_classes = {}, _defineProperty(_classes, prefixCls, !type), _defineProperty(_classes, prefixCls + '-' + type, type), _defineProperty(_classes, prefixCls + '-' + type + '-' + justify, type && justify), _defineProperty(_classes, prefixCls + '-' + type + '-' + align, type && align), _classes);
      var rowStyle = _extends$1({}, gutter[0] > 0 ? {
        marginLeft: gutter[0] / -2 + 'px',
        marginRight: gutter[0] / -2 + 'px'
      } : {}, gutter[1] > 0 ? {
        marginTop: gutter[1] / -2 + 'px',
        marginBottom: gutter[1] / -2 + 'px'
      } : {});
      return h(
        'div',
        { 'class': classes, style: rowStyle },
        [$slots['default']]
      );
    }
  };

  var stringOrNumber = VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]);

  var ColSize = VuePropTypes.shape({
    span: stringOrNumber,
    order: stringOrNumber,
    offset: stringOrNumber,
    push: stringOrNumber,
    pull: stringOrNumber
  }).loose;

  var objectOrNumber = VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number, ColSize]);

  var ColProps = {
    span: stringOrNumber,
    order: stringOrNumber,
    offset: stringOrNumber,
    push: stringOrNumber,
    pull: stringOrNumber,
    xs: objectOrNumber,
    sm: objectOrNumber,
    md: objectOrNumber,
    lg: objectOrNumber,
    xl: objectOrNumber,
    xxl: objectOrNumber,
    prefixCls: VuePropTypes.string,
    flex: stringOrNumber
  };

  var Col = {
    name: 'ACol',
    props: ColProps,
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } },
      rowContext: {
        'default': function _default() {
          return null;
        }
      }
    },
    methods: {
      parseFlex: function parseFlex(flex) {
        if (typeof flex === 'number') {
          return flex + ' ' + flex + ' auto';
        }
        if (/^\d+(\.\d+)?(px|em|rem|%)$/.test(flex)) {
          return '0 0 ' + flex;
        }
        return flex;
      }
    },
    render: function render() {
      var _this = this,
          _extends3;

      var h = arguments[0];
      var span = this.span,
          order = this.order,
          offset = this.offset,
          push = this.push,
          pull = this.pull,
          flex = this.flex,
          customizePrefixCls = this.prefixCls,
          $slots = this.$slots,
          rowContext = this.rowContext;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('col', customizePrefixCls);

      var sizeClassObj = {};
      ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'].forEach(function (size) {
        var _extends2;

        var sizeProps = {};
        var propSize = _this[size];
        if (typeof propSize === 'number') {
          sizeProps.span = propSize;
        } else if ((typeof propSize === 'undefined' ? 'undefined' : _typeof(propSize)) === 'object') {
          sizeProps = propSize || {};
        }

        sizeClassObj = _extends$1({}, sizeClassObj, (_extends2 = {}, _defineProperty(_extends2, prefixCls + '-' + size + '-' + sizeProps.span, sizeProps.span !== undefined), _defineProperty(_extends2, prefixCls + '-' + size + '-order-' + sizeProps.order, sizeProps.order || sizeProps.order === 0), _defineProperty(_extends2, prefixCls + '-' + size + '-offset-' + sizeProps.offset, sizeProps.offset || sizeProps.offset === 0), _defineProperty(_extends2, prefixCls + '-' + size + '-push-' + sizeProps.push, sizeProps.push || sizeProps.push === 0), _defineProperty(_extends2, prefixCls + '-' + size + '-pull-' + sizeProps.pull, sizeProps.pull || sizeProps.pull === 0), _extends2));
      });
      var classes = _extends$1((_extends3 = {}, _defineProperty(_extends3, '' + prefixCls, true), _defineProperty(_extends3, prefixCls + '-' + span, span !== undefined), _defineProperty(_extends3, prefixCls + '-order-' + order, order), _defineProperty(_extends3, prefixCls + '-offset-' + offset, offset), _defineProperty(_extends3, prefixCls + '-push-' + push, push), _defineProperty(_extends3, prefixCls + '-pull-' + pull, pull), _extends3), sizeClassObj);
      var divProps = {
        on: getListeners(this),
        'class': classes,
        style: {}
      };
      if (rowContext) {
        var gutter = rowContext.getGutter();
        if (gutter) {
          divProps.style = _extends$1({}, gutter[0] > 0 ? {
            paddingLeft: gutter[0] / 2 + 'px',
            paddingRight: gutter[0] / 2 + 'px'
          } : {}, gutter[1] > 0 ? {
            paddingTop: gutter[1] / 2 + 'px',
            paddingBottom: gutter[1] / 2 + 'px'
          } : {});
        }
      }

      if (flex) {
        divProps.style.flex = this.parseFlex(flex);
      }

      return h(
        'div',
        divProps,
        [$slots['default']]
      );
    }
  };

  /* istanbul ignore next */
  Row.install = function (Vue) {
    Vue.use(base);
    Vue.component(Row.name, Row);
  };

  /* istanbul ignore next */
  Col.install = function (Vue) {
    Vue.use(base);
    Vue.component(Col.name, Col);
  };

  var TabPane$1 = Tabs$1.TabPane;

  var Card = {
    name: 'ACard',
    mixins: [BaseMixin],
    props: {
      prefixCls: VuePropTypes.string,
      title: VuePropTypes.any,
      extra: VuePropTypes.any,
      bordered: VuePropTypes.bool.def(true),
      bodyStyle: VuePropTypes.object,
      headStyle: VuePropTypes.object,
      loading: VuePropTypes.bool.def(false),
      hoverable: VuePropTypes.bool.def(false),
      type: VuePropTypes.string,
      size: VuePropTypes.oneOf(['default', 'small']),
      actions: VuePropTypes.any,
      tabList: VuePropTypes.array,
      tabBarExtraContent: VuePropTypes.any,
      activeTabKey: VuePropTypes.string,
      defaultActiveTabKey: VuePropTypes.string
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      return {
        widerPadding: false
      };
    },

    methods: {
      getAction: function getAction(actions) {
        var h = this.$createElement;

        var actionList = actions.map(function (action, index) {
          return h(
            'li',
            { style: { width: 100 / actions.length + '%' }, key: 'action-' + index },
            [h('span', [action])]
          );
        });
        return actionList;
      },
      onTabChange: function onTabChange(key) {
        this.$emit('tabChange', key);
      },
      isContainGrid: function isContainGrid() {
        var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        var containGrid = void 0;
        obj.forEach(function (element) {
          if (element && getSlotOptions(element).__ANT_CARD_GRID) {
            containGrid = true;
          }
        });
        return containGrid;
      }
    },
    render: function render() {
      var _classString, _props;

      var h = arguments[0];
      var _$props = this.$props,
          customizePrefixCls = _$props.prefixCls,
          _$props$headStyle = _$props.headStyle,
          headStyle = _$props$headStyle === undefined ? {} : _$props$headStyle,
          _$props$bodyStyle = _$props.bodyStyle,
          bodyStyle = _$props$bodyStyle === undefined ? {} : _$props$bodyStyle,
          loading = _$props.loading,
          _$props$bordered = _$props.bordered,
          bordered = _$props$bordered === undefined ? true : _$props$bordered,
          _$props$size = _$props.size,
          size = _$props$size === undefined ? 'default' : _$props$size,
          type = _$props.type,
          tabList = _$props.tabList,
          hoverable = _$props.hoverable,
          activeTabKey = _$props.activeTabKey,
          defaultActiveTabKey = _$props.defaultActiveTabKey;


      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('card', customizePrefixCls);

      var $slots = this.$slots,
          $scopedSlots = this.$scopedSlots;

      var tabBarExtraContent = getComponentFromProp(this, 'tabBarExtraContent');
      var classString = (_classString = {}, _defineProperty(_classString, '' + prefixCls, true), _defineProperty(_classString, prefixCls + '-loading', loading), _defineProperty(_classString, prefixCls + '-bordered', bordered), _defineProperty(_classString, prefixCls + '-hoverable', !!hoverable), _defineProperty(_classString, prefixCls + '-contain-grid', this.isContainGrid($slots['default'])), _defineProperty(_classString, prefixCls + '-contain-tabs', tabList && tabList.length), _defineProperty(_classString, prefixCls + '-' + size, size !== 'default'), _defineProperty(_classString, prefixCls + '-type-' + type, !!type), _classString);

      var loadingBlockStyle = bodyStyle.padding === 0 || bodyStyle.padding === '0px' ? { padding: 24 } : undefined;

      var loadingBlock = h(
        'div',
        { 'class': prefixCls + '-loading-content', style: loadingBlockStyle },
        [h(
          Row,
          {
            attrs: { gutter: 8 }
          },
          [h(
            Col,
            {
              attrs: { span: 22 }
            },
            [h('div', { 'class': prefixCls + '-loading-block' })]
          )]
        ), h(
          Row,
          {
            attrs: { gutter: 8 }
          },
          [h(
            Col,
            {
              attrs: { span: 8 }
            },
            [h('div', { 'class': prefixCls + '-loading-block' })]
          ), h(
            Col,
            {
              attrs: { span: 15 }
            },
            [h('div', { 'class': prefixCls + '-loading-block' })]
          )]
        ), h(
          Row,
          {
            attrs: { gutter: 8 }
          },
          [h(
            Col,
            {
              attrs: { span: 6 }
            },
            [h('div', { 'class': prefixCls + '-loading-block' })]
          ), h(
            Col,
            {
              attrs: { span: 18 }
            },
            [h('div', { 'class': prefixCls + '-loading-block' })]
          )]
        ), h(
          Row,
          {
            attrs: { gutter: 8 }
          },
          [h(
            Col,
            {
              attrs: { span: 13 }
            },
            [h('div', { 'class': prefixCls + '-loading-block' })]
          ), h(
            Col,
            {
              attrs: { span: 9 }
            },
            [h('div', { 'class': prefixCls + '-loading-block' })]
          )]
        ), h(
          Row,
          {
            attrs: { gutter: 8 }
          },
          [h(
            Col,
            {
              attrs: { span: 4 }
            },
            [h('div', { 'class': prefixCls + '-loading-block' })]
          ), h(
            Col,
            {
              attrs: { span: 3 }
            },
            [h('div', { 'class': prefixCls + '-loading-block' })]
          ), h(
            Col,
            {
              attrs: { span: 16 }
            },
            [h('div', { 'class': prefixCls + '-loading-block' })]
          )]
        )]
      );

      var hasActiveTabKey = activeTabKey !== undefined;
      var tabsProps = {
        props: (_props = {
          size: 'large'
        }, _defineProperty(_props, hasActiveTabKey ? 'activeKey' : 'defaultActiveKey', hasActiveTabKey ? activeTabKey : defaultActiveTabKey), _defineProperty(_props, 'tabBarExtraContent', tabBarExtraContent), _props),
        on: {
          change: this.onTabChange
        },
        'class': prefixCls + '-head-tabs'
      };

      var head = void 0;
      var tabs = tabList && tabList.length ? h(
        Tabs$1,
        tabsProps,
        [tabList.map(function (item) {
          var temp = item.tab,
              _item$scopedSlots = item.scopedSlots,
              scopedSlots = _item$scopedSlots === undefined ? {} : _item$scopedSlots;

          var name = scopedSlots.tab;
          var tab = temp !== undefined ? temp : $scopedSlots[name] ? $scopedSlots[name](item) : null;
          return h(TabPane$1, {
            attrs: { tab: tab, disabled: item.disabled },
            key: item.key });
        })]
      ) : null;
      var titleDom = getComponentFromProp(this, 'title');
      var extraDom = getComponentFromProp(this, 'extra');
      if (titleDom || extraDom || tabs) {
        head = h(
          'div',
          { 'class': prefixCls + '-head', style: headStyle },
          [h(
            'div',
            { 'class': prefixCls + '-head-wrapper' },
            [titleDom && h(
              'div',
              { 'class': prefixCls + '-head-title' },
              [titleDom]
            ), extraDom && h(
              'div',
              { 'class': prefixCls + '-extra' },
              [extraDom]
            )]
          ), tabs]
        );
      }

      var children = $slots['default'];
      var cover = getComponentFromProp(this, 'cover');
      var coverDom = cover ? h(
        'div',
        { 'class': prefixCls + '-cover' },
        [cover]
      ) : null;
      var body = h(
        'div',
        { 'class': prefixCls + '-body', style: bodyStyle },
        [loading ? loadingBlock : children]
      );
      var actions = filterEmpty(this.$slots.actions);
      var actionDom = actions && actions.length ? h(
        'ul',
        { 'class': prefixCls + '-actions' },
        [this.getAction(actions)]
      ) : null;

      return h(
        'div',
        babelHelperVueJsxMergeProps([{
          'class': classString,
          ref: 'cardContainerRef'
        }, { on: omit(getListeners(this), ['tabChange', 'tab-change']) }]),
        [head, coverDom, children ? body : null, actionDom]
      );
    }
  };

  var Meta = {
    name: 'ACardMeta',
    props: {
      prefixCls: VuePropTypes.string,
      title: VuePropTypes.any,
      description: VuePropTypes.any
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    render: function render() {
      var h = arguments[0];
      var customizePrefixCls = this.$props.prefixCls;


      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('card', customizePrefixCls);

      var classString = _defineProperty({}, prefixCls + '-meta', true);

      var avatar = getComponentFromProp(this, 'avatar');
      var title = getComponentFromProp(this, 'title');
      var description = getComponentFromProp(this, 'description');

      var avatarDom = avatar ? h(
        'div',
        { 'class': prefixCls + '-meta-avatar' },
        [avatar]
      ) : null;
      var titleDom = title ? h(
        'div',
        { 'class': prefixCls + '-meta-title' },
        [title]
      ) : null;
      var descriptionDom = description ? h(
        'div',
        { 'class': prefixCls + '-meta-description' },
        [description]
      ) : null;
      var MetaDetail = titleDom || descriptionDom ? h(
        'div',
        { 'class': prefixCls + '-meta-detail' },
        [titleDom, descriptionDom]
      ) : null;
      return h(
        'div',
        babelHelperVueJsxMergeProps([{ on: getListeners(this) }, { 'class': classString }]),
        [avatarDom, MetaDetail]
      );
    }
  };

  var Grid = {
    name: 'ACardGrid',
    __ANT_CARD_GRID: true,
    props: {
      prefixCls: VuePropTypes.string,
      hoverable: VuePropTypes.bool
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    render: function render() {
      var _classString;

      var h = arguments[0];
      var _$props = this.$props,
          customizePrefixCls = _$props.prefixCls,
          _$props$hoverable = _$props.hoverable,
          hoverable = _$props$hoverable === undefined ? true : _$props$hoverable;


      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('card', customizePrefixCls);

      var classString = (_classString = {}, _defineProperty(_classString, prefixCls + '-grid', true), _defineProperty(_classString, prefixCls + '-grid-hoverable', hoverable), _classString);
      return h(
        'div',
        babelHelperVueJsxMergeProps([{ on: getListeners(this) }, { 'class': classString }]),
        [this.$slots['default']]
      );
    }
  };

  Card.Meta = Meta;
  Card.Grid = Grid;

  /* istanbul ignore next */
  Card.install = function (Vue) {
    Vue.use(base);
    Vue.component(Card.name, Card);
    Vue.component(Meta.name, Meta);
    Vue.component(Grid.name, Grid);
  };

  var PanelContent = {
    name: 'PanelContent',
    props: {
      prefixCls: VuePropTypes.string,
      isActive: VuePropTypes.bool,
      destroyInactivePanel: VuePropTypes.bool,
      forceRender: VuePropTypes.bool,
      role: VuePropTypes.any
    },
    data: function data() {
      return {
        _isActive: undefined
      };
    },
    render: function render() {
      var _contentCls;

      var h = arguments[0];

      this._isActive = this.forceRender || this._isActive || this.isActive;
      if (!this._isActive) {
        return null;
      }
      var _$props = this.$props,
          prefixCls = _$props.prefixCls,
          isActive = _$props.isActive,
          destroyInactivePanel = _$props.destroyInactivePanel,
          forceRender = _$props.forceRender,
          role = _$props.role;
      var $slots = this.$slots;

      var contentCls = (_contentCls = {}, _defineProperty(_contentCls, prefixCls + '-content', true), _defineProperty(_contentCls, prefixCls + '-content-active', isActive), _contentCls);
      var child = !forceRender && !isActive && destroyInactivePanel ? null : h(
        'div',
        { 'class': prefixCls + '-content-box' },
        [$slots['default']]
      );
      return h(
        'div',
        { 'class': contentCls, attrs: { role: role }
        },
        [child]
      );
    }
  };

  var collapseProps = function collapseProps() {
    return {
      prefixCls: VuePropTypes.string,
      activeKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number, VuePropTypes.arrayOf(VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]))]),
      defaultActiveKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number, VuePropTypes.arrayOf(VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]))]),
      accordion: VuePropTypes.bool,
      destroyInactivePanel: VuePropTypes.bool,
      bordered: VuePropTypes.bool,
      expandIcon: VuePropTypes.func,
      openAnimation: VuePropTypes.object,
      expandIconPosition: VuePropTypes.oneOf(['left', 'right'])
    };
  };

  var panelProps = function panelProps() {
    return {
      openAnimation: VuePropTypes.object,
      prefixCls: VuePropTypes.string,
      header: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number, VuePropTypes.node]),
      headerClass: VuePropTypes.string,
      showArrow: VuePropTypes.bool,
      isActive: VuePropTypes.bool,
      destroyInactivePanel: VuePropTypes.bool,
      disabled: VuePropTypes.bool,
      accordion: VuePropTypes.bool,
      forceRender: VuePropTypes.bool,
      expandIcon: VuePropTypes.func,
      extra: VuePropTypes.any,
      panelKey: VuePropTypes.any
    };
  };

  var CollapsePanel = {
    name: 'Panel',
    props: initDefaultProps(panelProps(), {
      showArrow: true,
      isActive: false,
      destroyInactivePanel: false,
      headerClass: '',
      forceRender: false
    }),
    methods: {
      handleItemClick: function handleItemClick() {
        this.$emit('itemClick', this.panelKey);
      },
      handleKeyPress: function handleKeyPress(e) {
        if (e.key === 'Enter' || e.keyCode === 13 || e.which === 13) {
          this.handleItemClick();
        }
      }
    },
    render: function render() {
      var _headerCls, _itemCls;

      var h = arguments[0];
      var _$props = this.$props,
          prefixCls = _$props.prefixCls,
          headerClass = _$props.headerClass,
          isActive = _$props.isActive,
          showArrow = _$props.showArrow,
          destroyInactivePanel = _$props.destroyInactivePanel,
          disabled = _$props.disabled,
          openAnimation = _$props.openAnimation,
          accordion = _$props.accordion,
          forceRender = _$props.forceRender,
          expandIcon = _$props.expandIcon,
          extra = _$props.extra;
      var $slots = this.$slots;


      var transitionProps = {
        props: _extends$1({
          appear: true,
          css: false
        }),
        on: _extends$1({}, openAnimation)
      };
      var headerCls = (_headerCls = {}, _defineProperty(_headerCls, prefixCls + '-header', true), _defineProperty(_headerCls, headerClass, headerClass), _headerCls);
      var header = getComponentFromProp(this, 'header');
      var itemCls = (_itemCls = {}, _defineProperty(_itemCls, prefixCls + '-item', true), _defineProperty(_itemCls, prefixCls + '-item-active', isActive), _defineProperty(_itemCls, prefixCls + '-item-disabled', disabled), _itemCls);
      var icon = h('i', { 'class': 'arrow' });
      if (showArrow && typeof expandIcon === 'function') {
        icon = expandIcon(this.$props);
      }
      return h(
        'div',
        { 'class': itemCls, attrs: { role: 'tablist' }
        },
        [h(
          'div',
          {
            'class': headerCls,
            on: {
              'click': this.handleItemClick.bind(this),
              'keypress': this.handleKeyPress
            },
            attrs: {
              role: accordion ? 'tab' : 'button',
              tabIndex: disabled ? -1 : 0,
              'aria-expanded': isActive
            }
          },
          [showArrow && icon, header, extra && h(
            'div',
            { 'class': prefixCls + '-extra' },
            [extra]
          )]
        ), h(
          'transition',
          transitionProps,
          [h(
            PanelContent,
            {
              directives: [{
                name: 'show',
                value: isActive
              }],
              attrs: {
                prefixCls: prefixCls,
                isActive: isActive,
                destroyInactivePanel: destroyInactivePanel,
                forceRender: forceRender,
                role: accordion ? 'tabpanel' : null
              }
            },
            [$slots['default']]
          )]
        )]
      );
    }
  };

  function animate$1(node, show, transitionName, done) {
    var height = void 0;
    return cssAnimation(node, transitionName, {
      start: function start() {
        if (!show) {
          node.style.height = node.offsetHeight + 'px';
        } else {
          height = node.offsetHeight;
          node.style.height = 0;
        }
      },
      active: function active() {
        node.style.height = (show ? height : 0) + 'px';
      },
      end: function end() {
        node.style.height = '';
        done();
      }
    });
  }

  function animation$1(prefixCls) {
    return {
      enter: function enter(node, done) {
        return animate$1(node, true, prefixCls + '-anim', done);
      },
      leave: function leave(node, done) {
        return animate$1(node, false, prefixCls + '-anim', done);
      }
    };
  }

  function _toArray(activeKey) {
    var currentActiveKey = activeKey;
    if (!Array.isArray(currentActiveKey)) {
      currentActiveKey = currentActiveKey ? [currentActiveKey] : [];
    }
    return currentActiveKey.map(function (key) {
      return String(key);
    });
  }
  var Collapse = {
    name: 'Collapse',
    mixins: [BaseMixin],
    model: {
      prop: 'activeKey',
      event: 'change'
    },
    props: initDefaultProps(collapseProps(), {
      prefixCls: 'rc-collapse',
      accordion: false,
      destroyInactivePanel: false
    }),
    data: function data() {
      var _$props = this.$props,
          activeKey = _$props.activeKey,
          defaultActiveKey = _$props.defaultActiveKey,
          openAnimation = _$props.openAnimation,
          prefixCls = _$props.prefixCls;

      var currentActiveKey = defaultActiveKey;
      if (hasProp(this, 'activeKey')) {
        currentActiveKey = activeKey;
      }
      var currentOpenAnimations = openAnimation || animation$1(prefixCls);
      return {
        currentOpenAnimations: currentOpenAnimations,
        stateActiveKey: _toArray(currentActiveKey)
      };
    },

    watch: {
      activeKey: function activeKey(val) {
        this.setState({
          stateActiveKey: _toArray(val)
        });
      },
      openAnimation: function openAnimation(val) {
        this.setState({
          currentOpenAnimations: val
        });
      }
    },
    methods: {
      onClickItem: function onClickItem(key) {
        var activeKey = this.stateActiveKey;
        if (this.accordion) {
          activeKey = activeKey[0] === key ? [] : [key];
        } else {
          activeKey = [].concat(_toConsumableArray(activeKey));
          var index = activeKey.indexOf(key);
          var isActive = index > -1;
          if (isActive) {
            // remove active state
            activeKey.splice(index, 1);
          } else {
            activeKey.push(key);
          }
        }
        this.setActiveKey(activeKey);
      },
      getNewChild: function getNewChild(child, index) {
        if (isEmptyElement(child)) return;
        var activeKey = this.stateActiveKey;
        var _$props2 = this.$props,
            prefixCls = _$props2.prefixCls,
            accordion = _$props2.accordion,
            destroyInactivePanel = _$props2.destroyInactivePanel,
            expandIcon = _$props2.expandIcon;

        // If there is no key provide, use the panel order as default key

        var key = child.key || String(index);

        var _getPropsData = getPropsData(child),
            header = _getPropsData.header,
            headerClass = _getPropsData.headerClass,
            disabled = _getPropsData.disabled;

        var isActive = false;

        if (accordion) {
          isActive = activeKey[0] === key;
        } else {
          isActive = activeKey.indexOf(key) > -1;
        }

        var panelEvents = {};
        if (!disabled && disabled !== '') {
          panelEvents = {
            itemClick: this.onClickItem
          };
        }

        var props = {
          key: key,
          props: {
            panelKey: key,
            header: header,
            headerClass: headerClass,
            isActive: isActive,
            prefixCls: prefixCls,
            destroyInactivePanel: destroyInactivePanel,
            openAnimation: this.currentOpenAnimations,
            accordion: accordion,
            expandIcon: expandIcon
          },
          on: panelEvents
        };

        return cloneElement(child, props);
      },
      getItems: function getItems() {
        var _this = this;

        var newChildren = [];
        this.$slots['default'] && this.$slots['default'].forEach(function (child, index) {
          newChildren.push(_this.getNewChild(child, index));
        });
        return newChildren;
      },
      setActiveKey: function setActiveKey(activeKey) {
        this.setState({ stateActiveKey: activeKey });
        this.$emit('change', this.accordion ? activeKey[0] : activeKey);
      }
    },
    render: function render() {
      var h = arguments[0];
      var _$props3 = this.$props,
          prefixCls = _$props3.prefixCls,
          accordion = _$props3.accordion;

      var collapseClassName = _defineProperty({}, prefixCls, true);
      return h(
        'div',
        { 'class': collapseClassName, attrs: { role: accordion ? 'tablist' : null }
        },
        [this.getItems()]
      );
    }
  };

  // based on rc-collapse 1.11.8

  Collapse.Panel = CollapsePanel;

  var Collapse$1 = {
    name: 'ACollapse',
    model: {
      prop: 'activeKey',
      event: 'change'
    },
    props: initDefaultProps(collapseProps(), {
      bordered: true,
      openAnimation: animation,
      expandIconPosition: 'left'
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      renderExpandIcon: function renderExpandIcon(panelProps, prefixCls) {
        var h = this.$createElement;

        var expandIcon = getComponentFromProp(this, 'expandIcon', panelProps);
        var icon = expandIcon || h(Icon$1, {
          attrs: { type: 'right', rotate: panelProps.isActive ? 90 : undefined }
        });
        return isValidElement(Array.isArray(expandIcon) ? icon[0] : icon) ? cloneElement(icon, {
          'class': prefixCls + '-arrow'
        }) : icon;
      }
    },
    render: function render() {
      var _collapseClassName,
          _this = this;

      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          bordered = this.bordered,
          expandIconPosition = this.expandIconPosition;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('collapse', customizePrefixCls);

      var collapseClassName = (_collapseClassName = {}, _defineProperty(_collapseClassName, prefixCls + '-borderless', !bordered), _defineProperty(_collapseClassName, prefixCls + '-icon-position-' + expandIconPosition, true), _collapseClassName);
      var rcCollapeProps = {
        props: _extends$1({}, getOptionProps(this), {
          prefixCls: prefixCls,
          expandIcon: function expandIcon(panelProps) {
            return _this.renderExpandIcon(panelProps, prefixCls);
          }
        }),
        'class': collapseClassName,
        on: getListeners(this)
      };
      return h(
        Collapse,
        rcCollapeProps,
        [this.$slots['default']]
      );
    }
  };

  var CollapsePanel$1 = {
    name: 'ACollapsePanel',
    props: _extends$1({}, panelProps()),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    render: function render() {
      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          _showArrow = this.showArrow,
          showArrow = _showArrow === undefined ? true : _showArrow;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('collapse', customizePrefixCls);

      var collapsePanelClassName = _defineProperty({}, prefixCls + '-no-arrow', !showArrow);
      var rcCollapePanelProps = {
        props: _extends$1({}, getOptionProps(this), {
          prefixCls: prefixCls,
          extra: getComponentFromProp(this, 'extra')
        }),
        'class': collapsePanelClassName,
        on: getListeners(this)
      };
      var header = getComponentFromProp(this, 'header');
      return h(
        Collapse.Panel,
        rcCollapePanelProps,
        [this.$slots['default'], header ? h(
          'template',
          { slot: 'header' },
          [header]
        ) : null]
      );
    }
  };

  Collapse$1.Panel = CollapsePanel$1;

  /* istanbul ignore next */
  Collapse$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Collapse$1.name, Collapse$1);
    Vue.component(CollapsePanel$1.name, CollapsePanel$1);
  };

  // matchMedia polyfill for
  // https://github.com/WickyNilliams/enquire.js/issues/82
  if (typeof window !== 'undefined') {
    var matchMediaPolyfill$1 = function matchMediaPolyfill(mediaQuery) {
      return {
        media: mediaQuery,
        matches: false,
        addListener: function addListener() {},
        removeListener: function removeListener() {}
      };
    };
    // ref: https://github.com/ant-design/ant-design/issues/18774
    if (!window.matchMedia) window.matchMedia = matchMediaPolyfill$1;
  }
  // Use require over import (will be lifted up)
  // make sure matchMedia polyfill run before require('vc-slick')
  // Fix https://github.com/ant-design/ant-design/issues/6560
  // Fix https://github.com/ant-design/ant-design/issues/3308
  var SlickCarousel = require('../vc-slick/src')['default'];

  var CarouselEffect = VuePropTypes.oneOf(['scrollx', 'fade']);
  // Carousel
  var CarouselProps = {
    effect: CarouselEffect,
    dots: VuePropTypes.bool,
    vertical: VuePropTypes.bool,
    autoplay: VuePropTypes.bool,
    easing: VuePropTypes.string,
    beforeChange: VuePropTypes.func,
    afterChange: VuePropTypes.func,
    // style: PropTypes.React.CSSProperties,
    prefixCls: VuePropTypes.string,
    accessibility: VuePropTypes.bool,
    nextArrow: VuePropTypes.any,
    prevArrow: VuePropTypes.any,
    pauseOnHover: VuePropTypes.bool,
    // className: PropTypes.string,
    adaptiveHeight: VuePropTypes.bool,
    arrows: VuePropTypes.bool,
    autoplaySpeed: VuePropTypes.number,
    centerMode: VuePropTypes.bool,
    centerPadding: VuePropTypes.string,
    cssEase: VuePropTypes.string,
    dotsClass: VuePropTypes.string,
    draggable: VuePropTypes.bool,
    fade: VuePropTypes.bool,
    focusOnSelect: VuePropTypes.bool,
    infinite: VuePropTypes.bool,
    initialSlide: VuePropTypes.number,
    lazyLoad: VuePropTypes.bool,
    rtl: VuePropTypes.bool,
    slide: VuePropTypes.string,
    slidesToShow: VuePropTypes.number,
    slidesToScroll: VuePropTypes.number,
    speed: VuePropTypes.number,
    swipe: VuePropTypes.bool,
    swipeToSlide: VuePropTypes.bool,
    touchMove: VuePropTypes.bool,
    touchThreshold: VuePropTypes.number,
    variableWidth: VuePropTypes.bool,
    useCSS: VuePropTypes.bool,
    slickGoTo: VuePropTypes.number,
    responsive: VuePropTypes.array,
    dotPosition: VuePropTypes.oneOf(['top', 'bottom', 'left', 'right'])
  };

  var Carousel = {
    name: 'ACarousel',
    props: initDefaultProps(CarouselProps, {
      dots: true,
      arrows: false,
      draggable: false
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },

    beforeMount: function beforeMount() {
      this.onWindowResized = debounce_1(this.onWindowResized, 500, {
        leading: false
      });
    },
    mounted: function mounted() {
      if (hasProp(this, 'vertical')) {
        warning$1(!this.vertical, 'Carousel', '`vertical` is deprecated, please use `dotPosition` instead.');
      }
      var autoplay = this.autoplay;

      if (autoplay) {
        window.addEventListener('resize', this.onWindowResized);
      }
      // https://github.com/ant-design/ant-design/issues/7191
      this.innerSlider = this.$refs.slick && this.$refs.slick.innerSlider;
    },
    beforeDestroy: function beforeDestroy() {
      var autoplay = this.autoplay;

      if (autoplay) {
        window.removeEventListener('resize', this.onWindowResized);
        this.onWindowResized.cancel();
      }
    },

    methods: {
      getDotPosition: function getDotPosition() {
        if (this.dotPosition) {
          return this.dotPosition;
        }
        if (hasProp(this, 'vertical')) {
          return this.vertical ? 'right' : 'bottom';
        }
        return 'bottom';
      },
      onWindowResized: function onWindowResized() {
        // Fix https://github.com/ant-design/ant-design/issues/2550
        var autoplay = this.autoplay;

        if (autoplay && this.$refs.slick && this.$refs.slick.innerSlider && this.$refs.slick.innerSlider.autoPlay) {
          this.$refs.slick.innerSlider.autoPlay();
        }
      },
      next: function next() {
        this.$refs.slick.slickNext();
      },
      prev: function prev() {
        this.$refs.slick.slickPrev();
      },
      goTo: function goTo(slide) {
        var dontAnimate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        this.$refs.slick.slickGoTo(slide, dontAnimate);
      }
    },

    render: function render() {
      var h = arguments[0];

      var props = _extends$1({}, this.$props);
      var $slots = this.$slots;


      if (props.effect === 'fade') {
        props.fade = true;
      }

      var getPrefixCls = this.configProvider.getPrefixCls;
      var className = getPrefixCls('carousel', props.prefixCls);
      var dotsClass = 'slick-dots';
      var dotPosition = this.getDotPosition();
      props.vertical = dotPosition === 'left' || dotPosition === 'right';
      props.dotsClass = classnames('' + dotsClass, dotsClass + '-' + (dotPosition || 'bottom'), _defineProperty({}, '' + props.dotsClass, !!props.dotsClass));
      if (props.vertical) {
        className = className + ' ' + className + '-vertical';
      }
      var SlickCarouselProps = {
        props: _extends$1({}, props, {
          nextArrow: getComponentFromProp(this, 'nextArrow'),
          prevArrow: getComponentFromProp(this, 'prevArrow')
        }),
        on: getListeners(this),
        scopedSlots: this.$scopedSlots
      };
      var children = filterEmpty($slots['default']);
      return h(
        'div',
        { 'class': className },
        [h(
          SlickCarousel,
          babelHelperVueJsxMergeProps([{ ref: 'slick' }, SlickCarouselProps]),
          [children]
        )]
      );
    }
  };

  /* istanbul ignore next */
  Carousel.install = function (Vue) {
    Vue.use(base);
    Vue.component(Carousel.name, Carousel);
  };

  var lib$2 = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
  	 module.exports = factory() ;
  }(commonjsGlobal, (function () {
  function arrayTreeFilter(data, filterFn, options) {
      options = options || {};
      options.childrenKeyName = options.childrenKeyName || "children";
      var children = data || [];
      var result = [];
      var level = 0;
      do {
          var foundItem = children.filter(function (item) {
              return filterFn(item, level);
          })[0];
          if (!foundItem) {
              break;
          }
          result.push(foundItem);
          children = foundItem[options.childrenKeyName] || [];
          level += 1;
      } while (children.length > 0);
      return result;
  }

  return arrayTreeFilter;

  })));
  });

  var Menus = {
    name: 'CascaderMenus',
    mixins: [BaseMixin],
    props: {
      value: VuePropTypes.array.def([]),
      activeValue: VuePropTypes.array.def([]),
      options: VuePropTypes.array,
      prefixCls: VuePropTypes.string.def('rc-cascader-menus'),
      expandTrigger: VuePropTypes.string.def('click'),
      // onSelect: PropTypes.func,
      visible: VuePropTypes.bool.def(false),
      dropdownMenuColumnStyle: VuePropTypes.object,
      defaultFieldNames: VuePropTypes.object,
      fieldNames: VuePropTypes.object,
      expandIcon: VuePropTypes.any,
      loadingIcon: VuePropTypes.any
    },
    data: function data() {
      this.menuItems = {};
      return {};
    },

    watch: {
      visible: function visible(val) {
        var _this = this;

        if (val) {
          this.$nextTick(function () {
            _this.scrollActiveItemToView();
          });
        }
      }
    },
    mounted: function mounted() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.scrollActiveItemToView();
      });
    },

    methods: {
      getFieldName: function getFieldName(name) {
        var _$props = this.$props,
            fieldNames = _$props.fieldNames,
            defaultFieldNames = _$props.defaultFieldNames;
        // 防止只设置单个属性的名字

        return fieldNames[name] || defaultFieldNames[name];
      },
      getOption: function getOption(option, menuIndex) {
        var _this3 = this;

        var h = this.$createElement;
        var prefixCls = this.prefixCls,
            expandTrigger = this.expandTrigger;

        var loadingIcon = getComponentFromProp(this, 'loadingIcon');
        var expandIcon = getComponentFromProp(this, 'expandIcon');
        var onSelect = function onSelect(e) {
          _this3.__emit('select', option, menuIndex, e);
        };
        var onItemDoubleClick = function onItemDoubleClick(e) {
          _this3.__emit('itemDoubleClick', option, menuIndex, e);
        };
        var key = option[this.getFieldName('value')];
        var expandProps = {
          attrs: {
            role: 'menuitem'
          },
          on: {
            click: onSelect,
            dblclick: onItemDoubleClick,
            mousedown: function mousedown(e) {
              return e.preventDefault();
            }
          },
          key: Array.isArray(key) ? key.join('__ant__') : key
        };
        var menuItemCls = prefixCls + '-menu-item';
        var expandIconNode = null;
        var hasChildren = option[this.getFieldName('children')] && option[this.getFieldName('children')].length > 0;
        if (hasChildren || option.isLeaf === false) {
          menuItemCls += ' ' + prefixCls + '-menu-item-expand';
          if (!option.loading) {
            expandIconNode = h(
              'span',
              { 'class': prefixCls + '-menu-item-expand-icon' },
              [expandIcon]
            );
          }
        }
        if (expandTrigger === 'hover' && (hasChildren || option.isLeaf === false)) {
          expandProps.on = {
            mouseenter: this.delayOnSelect.bind(this, onSelect),
            mouseleave: this.delayOnSelect.bind(this),
            click: onSelect
          };
        }
        if (this.isActiveOption(option, menuIndex)) {
          menuItemCls += ' ' + prefixCls + '-menu-item-active';
          expandProps.ref = this.getMenuItemRef(menuIndex);
        }
        if (option.disabled) {
          menuItemCls += ' ' + prefixCls + '-menu-item-disabled';
        }
        var loadingIconNode = null;
        if (option.loading) {
          menuItemCls += ' ' + prefixCls + '-menu-item-loading';
          loadingIconNode = loadingIcon || null;
        }
        var title = '';
        if (option.title) {
          title = option.title;
        } else if (typeof option[this.getFieldName('label')] === 'string') {
          title = option[this.getFieldName('label')];
        }
        expandProps.attrs.title = title;
        expandProps['class'] = menuItemCls;
        return h(
          'li',
          expandProps,
          [option[this.getFieldName('label')], expandIconNode, loadingIconNode]
        );
      },
      getActiveOptions: function getActiveOptions(values) {
        var _this4 = this;

        var activeValue = values || this.activeValue;
        var options = this.options;
        return lib$2(options, function (o, level) {
          return o[_this4.getFieldName('value')] === activeValue[level];
        }, { childrenKeyName: this.getFieldName('children') });
      },
      getShowOptions: function getShowOptions() {
        var _this5 = this;

        var options = this.options;

        var result = this.getActiveOptions().map(function (activeOption) {
          return activeOption[_this5.getFieldName('children')];
        }).filter(function (activeOption) {
          return !!activeOption;
        });
        result.unshift(options);
        return result;
      },
      delayOnSelect: function delayOnSelect(onSelect) {
        var _this6 = this;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        if (this.delayTimer) {
          clearTimeout(this.delayTimer);
          this.delayTimer = null;
        }
        if (typeof onSelect === 'function') {
          this.delayTimer = setTimeout(function () {
            onSelect(args);
            _this6.delayTimer = null;
          }, 150);
        }
      },
      scrollActiveItemToView: function scrollActiveItemToView() {
        // scroll into view
        var optionsLength = this.getShowOptions().length;
        for (var i = 0; i < optionsLength; i++) {
          var itemComponent = this.$refs['menuItems_' + i];
          if (itemComponent) {
            var target = itemComponent;
            target.parentNode.scrollTop = target.offsetTop;
          }
        }
      },
      isActiveOption: function isActiveOption(option, menuIndex) {
        var _activeValue = this.activeValue,
            activeValue = _activeValue === undefined ? [] : _activeValue;

        return activeValue[menuIndex] === option[this.getFieldName('value')];
      },
      getMenuItemRef: function getMenuItemRef(index) {
        return 'menuItems_' + index;
      }
    },

    render: function render() {
      var _this7 = this;

      var h = arguments[0];
      var prefixCls = this.prefixCls,
          dropdownMenuColumnStyle = this.dropdownMenuColumnStyle;

      return h('div', [this.getShowOptions().map(function (options, menuIndex) {
        return h(
          'ul',
          { 'class': prefixCls + '-menu', key: menuIndex, style: dropdownMenuColumnStyle },
          [options.map(function (option) {
            return _this7.getOption(option, menuIndex);
          })]
        );
      })]);
    }
  };

  function shallowEqualArrays(arrA, arrB) {
    if (arrA === arrB) {
      return true;
    }

    if (!arrA || !arrB) {
      return false;
    }

    var len = arrA.length;

    if (arrB.length !== len) {
      return false;
    }

    for (var i = 0; i < len; i++) {
      if (arrA[i] !== arrB[i]) {
        return false;
      }
    }

    return true;
  }

  var arrays = shallowEqualArrays;

  var BUILT_IN_PLACEMENTS$1 = {
    bottomLeft: {
      points: ['tl', 'bl'],
      offset: [0, 4],
      overflow: {
        adjustX: 1,
        adjustY: 1
      }
    },
    topLeft: {
      points: ['bl', 'tl'],
      offset: [0, -4],
      overflow: {
        adjustX: 1,
        adjustY: 1
      }
    },
    bottomRight: {
      points: ['tr', 'br'],
      offset: [0, 4],
      overflow: {
        adjustX: 1,
        adjustY: 1
      }
    },
    topRight: {
      points: ['br', 'tr'],
      offset: [0, -4],
      overflow: {
        adjustX: 1,
        adjustY: 1
      }
    }
  };

  var Cascader = {
    mixins: [BaseMixin],
    model: {
      prop: 'value',
      event: 'change'
    },
    props: {
      value: VuePropTypes.array,
      defaultValue: VuePropTypes.array,
      options: VuePropTypes.array,
      // onChange: PropTypes.func,
      // onPopupVisibleChange: PropTypes.func,
      popupVisible: VuePropTypes.bool,
      disabled: VuePropTypes.bool.def(false),
      transitionName: VuePropTypes.string.def(''),
      popupClassName: VuePropTypes.string.def(''),
      popupStyle: VuePropTypes.object.def(function () {
        return {};
      }),
      popupPlacement: VuePropTypes.string.def('bottomLeft'),
      prefixCls: VuePropTypes.string.def('rc-cascader'),
      dropdownMenuColumnStyle: VuePropTypes.object,
      builtinPlacements: VuePropTypes.object.def(BUILT_IN_PLACEMENTS$1),
      loadData: VuePropTypes.func,
      changeOnSelect: VuePropTypes.bool,
      // onKeyDown: PropTypes.func,
      expandTrigger: VuePropTypes.string.def('click'),
      fieldNames: VuePropTypes.object.def(function () {
        return {
          label: 'label',
          value: 'value',
          children: 'children'
        };
      }),
      expandIcon: VuePropTypes.any,
      loadingIcon: VuePropTypes.any,
      getPopupContainer: VuePropTypes.func
    },
    data: function data() {
      var initialValue = [];
      var value = this.value,
          defaultValue = this.defaultValue,
          popupVisible = this.popupVisible;

      if (hasProp(this, 'value')) {
        initialValue = value || [];
      } else if (hasProp(this, 'defaultValue')) {
        initialValue = defaultValue || [];
      }
      // warning(!('filedNames' in props),
      //   '`filedNames` of Cascader is a typo usage and deprecated, please use `fieldNames` instead.');

      return {
        sPopupVisible: popupVisible,
        sActiveValue: initialValue,
        sValue: initialValue
      };
    },

    watch: {
      value: function value(val, oldValue) {
        if (!arrays(val, oldValue)) {
          var newValues = {
            sValue: val || []
          };
          // allow activeValue diff from value
          // https://github.com/ant-design/ant-design/issues/2767
          if (!hasProp(this, 'loadData')) {
            newValues.sActiveValue = val || [];
          }
          this.setState(newValues);
        }
      },
      popupVisible: function popupVisible(val) {
        this.setState({
          sPopupVisible: val
        });
      }
    },
    methods: {
      getPopupDOMNode: function getPopupDOMNode() {
        return this.$refs.trigger.getPopupDomNode();
      },
      getFieldName: function getFieldName(name) {
        var defaultFieldNames = this.defaultFieldNames,
            fieldNames = this.fieldNames;

        return fieldNames[name] || defaultFieldNames[name];
      },
      getFieldNames: function getFieldNames() {
        return this.fieldNames;
      },
      getCurrentLevelOptions: function getCurrentLevelOptions() {
        var _this = this;

        var _options = this.options,
            options = _options === undefined ? [] : _options,
            _sActiveValue = this.sActiveValue,
            sActiveValue = _sActiveValue === undefined ? [] : _sActiveValue;

        var result = lib$2(options, function (o, level) {
          return o[_this.getFieldName('value')] === sActiveValue[level];
        }, { childrenKeyName: this.getFieldName('children') });
        if (result[result.length - 2]) {
          return result[result.length - 2][this.getFieldName('children')];
        }
        return [].concat(_toConsumableArray(options)).filter(function (o) {
          return !o.disabled;
        });
      },
      getActiveOptions: function getActiveOptions(activeValue) {
        var _this2 = this;

        return lib$2(this.options || [], function (o, level) {
          return o[_this2.getFieldName('value')] === activeValue[level];
        }, { childrenKeyName: this.getFieldName('children') });
      },
      setPopupVisible: function setPopupVisible(popupVisible) {
        if (!hasProp(this, 'popupVisible')) {
          this.setState({ sPopupVisible: popupVisible });
        }
        // sync activeValue with value when panel open
        if (popupVisible && !this.sPopupVisible) {
          this.setState({
            sActiveValue: this.sValue
          });
        }
        this.__emit('popupVisibleChange', popupVisible);
      },
      handleChange: function handleChange(options, setProps, e) {
        var _this3 = this;

        if (e.type !== 'keydown' || e.keyCode === KeyCode.ENTER) {
          this.__emit('change', options.map(function (o) {
            return o[_this3.getFieldName('value')];
          }), options);
          this.setPopupVisible(setProps.visible);
        }
      },
      handlePopupVisibleChange: function handlePopupVisibleChange(popupVisible) {
        this.setPopupVisible(popupVisible);
      },
      handleMenuSelect: function handleMenuSelect(targetOption, menuIndex, e) {
        // Keep focused state for keyboard support
        var triggerNode = this.$refs.trigger.getRootDomNode();
        if (triggerNode && triggerNode.focus) {
          triggerNode.focus();
        }
        var changeOnSelect = this.changeOnSelect,
            loadData = this.loadData,
            expandTrigger = this.expandTrigger;

        if (!targetOption || targetOption.disabled) {
          return;
        }
        var sActiveValue = this.sActiveValue;

        sActiveValue = sActiveValue.slice(0, menuIndex + 1);
        sActiveValue[menuIndex] = targetOption[this.getFieldName('value')];
        var activeOptions = this.getActiveOptions(sActiveValue);
        if (targetOption.isLeaf === false && !targetOption[this.getFieldName('children')] && loadData) {
          if (changeOnSelect) {
            this.handleChange(activeOptions, { visible: true }, e);
          }
          this.setState({ sActiveValue: sActiveValue });
          loadData(activeOptions);
          return;
        }
        var newState = {};
        if (!targetOption[this.getFieldName('children')] || !targetOption[this.getFieldName('children')].length) {
          this.handleChange(activeOptions, { visible: false }, e);
          // set value to activeValue when select leaf option
          newState.sValue = sActiveValue;
          // add e.type judgement to prevent `onChange` being triggered by mouseEnter
        } else if (changeOnSelect && (e.type === 'click' || e.type === 'keydown')) {
          if (expandTrigger === 'hover') {
            this.handleChange(activeOptions, { visible: false }, e);
          } else {
            this.handleChange(activeOptions, { visible: true }, e);
          }
          // set value to activeValue on every select
          newState.sValue = sActiveValue;
        }
        newState.sActiveValue = sActiveValue;
        //  not change the value by keyboard
        if (hasProp(this, 'value') || e.type === 'keydown' && e.keyCode !== KeyCode.ENTER) {
          delete newState.sValue;
        }
        this.setState(newState);
      },
      handleItemDoubleClick: function handleItemDoubleClick() {
        var changeOnSelect = this.$props.changeOnSelect;

        if (changeOnSelect) {
          this.setPopupVisible(false);
        }
      },
      handleKeyDown: function handleKeyDown(e) {
        var _this4 = this;

        var $slots = this.$slots;

        var children = $slots['default'] && $slots['default'][0];
        // https://github.com/ant-design/ant-design/issues/6717
        // Don't bind keyboard support when children specify the onKeyDown
        if (children) {
          var keydown = getEvents(children).keydown;
          if (keydown) {
            keydown(e);
            return;
          }
        }
        var activeValue = [].concat(_toConsumableArray(this.sActiveValue));
        var currentLevel = activeValue.length - 1 < 0 ? 0 : activeValue.length - 1;
        var currentOptions = this.getCurrentLevelOptions();
        var currentIndex = currentOptions.map(function (o) {
          return o[_this4.getFieldName('value')];
        }).indexOf(activeValue[currentLevel]);
        if (e.keyCode !== KeyCode.DOWN && e.keyCode !== KeyCode.UP && e.keyCode !== KeyCode.LEFT && e.keyCode !== KeyCode.RIGHT && e.keyCode !== KeyCode.ENTER && e.keyCode !== KeyCode.SPACE && e.keyCode !== KeyCode.BACKSPACE && e.keyCode !== KeyCode.ESC && e.keyCode !== KeyCode.TAB) {
          return;
        }
        // Press any keys above to reopen menu
        if (!this.sPopupVisible && e.keyCode !== KeyCode.BACKSPACE && e.keyCode !== KeyCode.LEFT && e.keyCode !== KeyCode.RIGHT && e.keyCode !== KeyCode.ESC && e.keyCode !== KeyCode.TAB) {
          this.setPopupVisible(true);
          return;
        }
        if (e.keyCode === KeyCode.DOWN || e.keyCode === KeyCode.UP) {
          e.preventDefault();
          var nextIndex = currentIndex;
          if (nextIndex !== -1) {
            if (e.keyCode === KeyCode.DOWN) {
              nextIndex += 1;
              nextIndex = nextIndex >= currentOptions.length ? 0 : nextIndex;
            } else {
              nextIndex -= 1;
              nextIndex = nextIndex < 0 ? currentOptions.length - 1 : nextIndex;
            }
          } else {
            nextIndex = 0;
          }
          activeValue[currentLevel] = currentOptions[nextIndex][this.getFieldName('value')];
        } else if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.BACKSPACE) {
          e.preventDefault();
          activeValue.splice(activeValue.length - 1, 1);
        } else if (e.keyCode === KeyCode.RIGHT) {
          e.preventDefault();
          if (currentOptions[currentIndex] && currentOptions[currentIndex][this.getFieldName('children')]) {
            activeValue.push(currentOptions[currentIndex][this.getFieldName('children')][0][this.getFieldName('value')]);
          }
        } else if (e.keyCode === KeyCode.ESC || e.keyCode === KeyCode.TAB) {
          this.setPopupVisible(false);
          return;
        }
        if (!activeValue || activeValue.length === 0) {
          this.setPopupVisible(false);
        }
        var activeOptions = this.getActiveOptions(activeValue);
        var targetOption = activeOptions[activeOptions.length - 1];
        this.handleMenuSelect(targetOption, activeOptions.length - 1, e);
        this.__emit('keydown', e);
      }
    },

    render: function render() {
      var h = arguments[0];
      var $props = this.$props,
          sActiveValue = this.sActiveValue,
          handleMenuSelect = this.handleMenuSelect,
          sPopupVisible = this.sPopupVisible,
          handlePopupVisibleChange = this.handlePopupVisibleChange,
          handleKeyDown = this.handleKeyDown;

      var listeners = getListeners(this);

      var prefixCls = $props.prefixCls,
          transitionName = $props.transitionName,
          popupClassName = $props.popupClassName,
          _$props$options = $props.options,
          options = _$props$options === undefined ? [] : _$props$options,
          disabled = $props.disabled,
          builtinPlacements = $props.builtinPlacements,
          popupPlacement = $props.popupPlacement,
          restProps = _objectWithoutProperties($props, ['prefixCls', 'transitionName', 'popupClassName', 'options', 'disabled', 'builtinPlacements', 'popupPlacement']);
      // Did not show popup when there is no options


      var menus = h('div');
      var emptyMenuClassName = '';
      if (options && options.length > 0) {
        var loadingIcon = getComponentFromProp(this, 'loadingIcon');
        var expandIcon = getComponentFromProp(this, 'expandIcon') || '>';
        var menusProps = {
          props: _extends$1({}, $props, {
            fieldNames: this.getFieldNames(),
            defaultFieldNames: this.defaultFieldNames,
            activeValue: sActiveValue,
            visible: sPopupVisible,
            loadingIcon: loadingIcon,
            expandIcon: expandIcon
          }),
          on: _extends$1({}, listeners, {
            select: handleMenuSelect,
            itemDoubleClick: this.handleItemDoubleClick
          })
        };
        menus = h(Menus, menusProps);
      } else {
        emptyMenuClassName = ' ' + prefixCls + '-menus-empty';
      }
      var triggerProps = {
        props: _extends$1({}, restProps, {
          disabled: disabled,
          popupPlacement: popupPlacement,
          builtinPlacements: builtinPlacements,
          popupTransitionName: transitionName,
          action: disabled ? [] : ['click'],
          popupVisible: disabled ? false : sPopupVisible,
          prefixCls: prefixCls + '-menus',
          popupClassName: popupClassName + emptyMenuClassName
        }),
        on: _extends$1({}, listeners, {
          popupVisibleChange: handlePopupVisibleChange
        }),
        ref: 'trigger'
      };
      var children = getSlot(this, 'default')[0];
      return h(
        Trigger,
        triggerProps,
        [children && cloneElement(children, {
          on: {
            keydown: handleKeyDown
          },
          attrs: {
            tabIndex: disabled ? undefined : 0
          }
        }), h(
          'template',
          { slot: 'popup' },
          [menus]
        )]
      );
    }
  };

  var CascaderOptionType = VuePropTypes.shape({
    value: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
    label: VuePropTypes.any,
    disabled: VuePropTypes.bool,
    children: VuePropTypes.array,
    key: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number])
  }).loose;

  var FieldNamesType = VuePropTypes.shape({
    value: VuePropTypes.string.isRequired,
    label: VuePropTypes.string.isRequired,
    children: VuePropTypes.string
  }).loose;

  var CascaderExpandTrigger = VuePropTypes.oneOf(['click', 'hover']);

  var ShowSearchType = VuePropTypes.shape({
    filter: VuePropTypes.func,
    render: VuePropTypes.func,
    sort: VuePropTypes.func,
    matchInputWidth: VuePropTypes.bool,
    limit: VuePropTypes.oneOfType([Boolean, Number])
  }).loose;
  function noop$j() {}

  var CascaderProps = {
    /** 可选项数据源 */
    options: VuePropTypes.arrayOf(CascaderOptionType).def([]),
    /** 默认的选中项 */
    defaultValue: VuePropTypes.array,
    /** 指定选中项 */
    value: VuePropTypes.array,
    /** 选择完成后的回调 */
    // onChange?: (value: string[], selectedOptions?: CascaderOptionType[]) => void;
    /** 选择后展示的渲染函数 */
    displayRender: VuePropTypes.func,
    transitionName: VuePropTypes.string.def('slide-up'),
    popupStyle: VuePropTypes.object.def(function () {
      return {};
    }),
    /** 自定义浮层类名 */
    popupClassName: VuePropTypes.string,
    /** 浮层预设位置：`bottomLeft` `bottomRight` `topLeft` `topRight` */
    popupPlacement: VuePropTypes.oneOf(['bottomLeft', 'bottomRight', 'topLeft', 'topRight']).def('bottomLeft'),
    /** 输入框占位文本*/
    placeholder: VuePropTypes.string.def('Please select'),
    /** 输入框大小，可选 `large` `default` `small` */
    size: VuePropTypes.oneOf(['large', 'default', 'small']),
    /** 禁用*/
    disabled: VuePropTypes.bool.def(false),
    /** 是否支持清除*/
    allowClear: VuePropTypes.bool.def(true),
    showSearch: VuePropTypes.oneOfType([Boolean, ShowSearchType]),
    notFoundContent: VuePropTypes.any,
    loadData: VuePropTypes.func,
    /** 次级菜单的展开方式，可选 'click' 和 'hover' */
    expandTrigger: CascaderExpandTrigger,
    /** 当此项为 true 时，点选每级菜单选项值都会发生变化 */
    changeOnSelect: VuePropTypes.bool,
    /** 浮层可见变化时回调 */
    // onPopupVisibleChange?: (popupVisible: boolean) => void;
    prefixCls: VuePropTypes.string,
    inputPrefixCls: VuePropTypes.string,
    getPopupContainer: VuePropTypes.func,
    popupVisible: VuePropTypes.bool,
    fieldNames: FieldNamesType,
    autoFocus: VuePropTypes.bool,
    suffixIcon: VuePropTypes.any
  };

  // We limit the filtered item count by default
  var defaultLimit = 50;

  function defaultFilterOption(inputValue, path, names) {
    return path.some(function (option) {
      return option[names.label].indexOf(inputValue) > -1;
    });
  }

  function defaultSortFilteredOption(a, b, inputValue, names) {
    function callback(elem) {
      return elem[names.label].indexOf(inputValue) > -1;
    }

    return a.findIndex(callback) - b.findIndex(callback);
  }

  function getFilledFieldNames(_ref) {
    var _ref$fieldNames = _ref.fieldNames,
        fieldNames = _ref$fieldNames === undefined ? {} : _ref$fieldNames;

    var names = {
      children: fieldNames.children || 'children',
      label: fieldNames.label || 'label',
      value: fieldNames.value || 'value'
    };
    return names;
  }

  function flattenTree() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var props = arguments[1];
    var ancestor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    var names = getFilledFieldNames(props);
    var flattenOptions = [];
    var childrenName = names.children;
    options.forEach(function (option) {
      var path = ancestor.concat(option);
      if (props.changeOnSelect || !option[childrenName] || !option[childrenName].length) {
        flattenOptions.push(path);
      }
      if (option[childrenName]) {
        flattenOptions = flattenOptions.concat(flattenTree(option[childrenName], props, path));
      }
    });
    return flattenOptions;
  }

  var defaultDisplayRender = function defaultDisplayRender(_ref2) {
    var labels = _ref2.labels;
    return labels.join(' / ');
  };

  var Cascader$1 = {
    inheritAttrs: false,
    name: 'ACascader',
    mixins: [BaseMixin],
    props: CascaderProps,
    model: {
      prop: 'value',
      event: 'change'
    },
    provide: function provide() {
      return {
        savePopupRef: this.savePopupRef
      };
    },

    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } },
      localeData: { 'default': function _default() {
          return {};
        } }
    },
    data: function data() {
      this.cachedOptions = [];
      var value = this.value,
          defaultValue = this.defaultValue,
          popupVisible = this.popupVisible,
          showSearch = this.showSearch,
          options = this.options;

      return {
        sValue: value || defaultValue || [],
        inputValue: '',
        inputFocused: false,
        sPopupVisible: popupVisible,
        flattenOptions: showSearch ? flattenTree(options, this.$props) : undefined
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        if (_this.autoFocus && !_this.showSearch && !_this.disabled) {
          _this.$refs.picker.focus();
        }
      });
    },

    watch: {
      value: function value(val) {
        this.setState({ sValue: val || [] });
      },
      popupVisible: function popupVisible(val) {
        this.setState({ sPopupVisible: val });
      },
      options: function options(val) {
        if (this.showSearch) {
          this.setState({ flattenOptions: flattenTree(val, this.$props) });
        }
      }
    },
    methods: {
      savePopupRef: function savePopupRef(ref) {
        this.popupRef = ref;
      },
      highlightKeyword: function highlightKeyword(str, keyword, prefixCls) {
        var h = this.$createElement;

        return str.split(keyword).map(function (node, index) {
          return index === 0 ? node : [h(
            'span',
            { 'class': prefixCls + '-menu-item-keyword' },
            [keyword]
          ), node];
        });
      },
      defaultRenderFilteredOption: function defaultRenderFilteredOption(_ref3) {
        var _this2 = this;

        var inputValue = _ref3.inputValue,
            path = _ref3.path,
            prefixCls = _ref3.prefixCls,
            names = _ref3.names;

        return path.map(function (option, index) {
          var label = option[names.label];
          var node = label.indexOf(inputValue) > -1 ? _this2.highlightKeyword(label, inputValue, prefixCls) : label;
          return index === 0 ? node : [' / ', node];
        });
      },
      handleChange: function handleChange(value, selectedOptions) {
        this.setState({ inputValue: '' });
        if (selectedOptions[0].__IS_FILTERED_OPTION) {
          var unwrappedValue = value[0];
          var unwrappedSelectedOptions = selectedOptions[0].path;
          this.setValue(unwrappedValue, unwrappedSelectedOptions);
          return;
        }
        this.setValue(value, selectedOptions);
      },
      handlePopupVisibleChange: function handlePopupVisibleChange(popupVisible) {
        if (!hasProp(this, 'popupVisible')) {
          this.setState(function (state) {
            return {
              sPopupVisible: popupVisible,
              inputFocused: popupVisible,
              inputValue: popupVisible ? state.inputValue : ''
            };
          });
        }
        this.$emit('popupVisibleChange', popupVisible);
      },
      handleInputFocus: function handleInputFocus(e) {
        this.$emit('focus', e);
      },
      handleInputBlur: function handleInputBlur(e) {
        this.setState({
          inputFocused: false
        });
        this.$emit('blur', e);
      },
      handleInputClick: function handleInputClick(e) {
        var inputFocused = this.inputFocused,
            sPopupVisible = this.sPopupVisible;
        // Prevent `Trigger` behaviour.

        if (inputFocused || sPopupVisible) {
          e.stopPropagation();
          if (e.nativeEvent && e.nativeEvent.stopImmediatePropagation) {
            e.nativeEvent.stopImmediatePropagation();
          }
        }
      },
      handleKeyDown: function handleKeyDown(e) {
        if (e.keyCode === KeyCode.BACKSPACE || e.keyCode === KeyCode.SPACE) {
          e.stopPropagation();
        }
      },
      handleInputChange: function handleInputChange(e) {
        var inputValue = e.target.value;
        this.setState({ inputValue: inputValue });
        this.$emit('search', inputValue);
      },
      setValue: function setValue(value, selectedOptions) {
        if (!hasProp(this, 'value')) {
          this.setState({ sValue: value });
        }
        this.$emit('change', value, selectedOptions);
      },
      getLabel: function getLabel() {
        var options = this.options,
            $scopedSlots = this.$scopedSlots;

        var names = getFilledFieldNames(this.$props);
        var displayRender = this.displayRender || $scopedSlots.displayRender || defaultDisplayRender;
        var value = this.sValue;
        var unwrappedValue = Array.isArray(value[0]) ? value[0] : value;
        var selectedOptions = lib$2(options, function (o, level) {
          return o[names.value] === unwrappedValue[level];
        }, { childrenKeyName: names.children });
        var labels = selectedOptions.map(function (o) {
          return o[names.label];
        });
        return displayRender({ labels: labels, selectedOptions: selectedOptions });
      },
      clearSelection: function clearSelection(e) {
        e.preventDefault();
        e.stopPropagation();
        if (!this.inputValue) {
          this.setValue([]);
          this.handlePopupVisibleChange(false);
        } else {
          this.setState({ inputValue: '' });
        }
      },
      generateFilteredOptions: function generateFilteredOptions(prefixCls, renderEmpty) {
        var _ref5;

        var h = this.$createElement;
        var showSearch = this.showSearch,
            notFoundContent = this.notFoundContent,
            $scopedSlots = this.$scopedSlots;

        var names = getFilledFieldNames(this.$props);
        var _showSearch$filter = showSearch.filter,
            filter = _showSearch$filter === undefined ? defaultFilterOption : _showSearch$filter,
            _showSearch$sort = showSearch.sort,
            sort = _showSearch$sort === undefined ? defaultSortFilteredOption : _showSearch$sort,
            _showSearch$limit = showSearch.limit,
            limit = _showSearch$limit === undefined ? defaultLimit : _showSearch$limit;

        var render = showSearch.render || $scopedSlots.showSearchRender || this.defaultRenderFilteredOption;
        var _$data = this.$data,
            _$data$flattenOptions = _$data.flattenOptions,
            flattenOptions = _$data$flattenOptions === undefined ? [] : _$data$flattenOptions,
            inputValue = _$data.inputValue;

        // Limit the filter if needed

        var filtered = void 0;
        if (limit > 0) {
          filtered = [];
          var matchCount = 0;

          // Perf optimization to filter items only below the limit
          flattenOptions.some(function (path) {
            var match = filter(inputValue, path, names);
            if (match) {
              filtered.push(path);
              matchCount += 1;
            }
            return matchCount >= limit;
          });
        } else {
          warning$1(typeof limit !== 'number', 'Cascader', "'limit' of showSearch in Cascader should be positive number or false.");
          filtered = flattenOptions.filter(function (path) {
            return filter(inputValue, path, names);
          });
        }

        filtered.sort(function (a, b) {
          return sort(a, b, inputValue, names);
        });

        if (filtered.length > 0) {
          return filtered.map(function (path) {
            var _ref4;

            return _ref4 = {
              __IS_FILTERED_OPTION: true,
              path: path
            }, _defineProperty(_ref4, names.label, render({ inputValue: inputValue, path: path, prefixCls: prefixCls, names: names })), _defineProperty(_ref4, names.value, path.map(function (o) {
              return o[names.value];
            })), _defineProperty(_ref4, 'disabled', path.some(function (o) {
              return !!o.disabled;
            })), _ref4;
          });
        }
        return [(_ref5 = {}, _defineProperty(_ref5, names.label, notFoundContent || renderEmpty(h, 'Cascader')), _defineProperty(_ref5, names.value, 'ANT_CASCADER_NOT_FOUND'), _defineProperty(_ref5, 'disabled', true), _ref5)];
      },
      focus: function focus() {
        if (this.showSearch) {
          this.$refs.input.focus();
        } else {
          this.$refs.picker.focus();
        }
      },
      blur: function blur() {
        if (this.showSearch) {
          this.$refs.input.blur();
        } else {
          this.$refs.picker.blur();
        }
      }
    },

    render: function render() {
      var _classNames, _classNames2, _classNames3;

      var h = arguments[0];
      var $slots = this.$slots,
          sPopupVisible = this.sPopupVisible,
          inputValue = this.inputValue,
          configProvider = this.configProvider,
          localeData = this.localeData;
      var _$data2 = this.$data,
          value = _$data2.sValue,
          inputFocused = _$data2.inputFocused;

      var props = getOptionProps(this);
      var suffixIcon = getComponentFromProp(this, 'suffixIcon');
      suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
      var getContextPopupContainer = configProvider.getPopupContainer;

      var customizePrefixCls = props.prefixCls,
          customizeInputPrefixCls = props.inputPrefixCls,
          _props$placeholder = props.placeholder,
          placeholder = _props$placeholder === undefined ? localeData.placeholder : _props$placeholder,
          size = props.size,
          disabled = props.disabled,
          allowClear = props.allowClear,
          _props$showSearch = props.showSearch,
          showSearch = _props$showSearch === undefined ? false : _props$showSearch,
          notFoundContent = props.notFoundContent,
          otherProps = _objectWithoutProperties(props, ['prefixCls', 'inputPrefixCls', 'placeholder', 'size', 'disabled', 'allowClear', 'showSearch', 'notFoundContent']);

      var getPrefixCls = this.configProvider.getPrefixCls;
      var renderEmpty = this.configProvider.renderEmpty;
      var prefixCls = getPrefixCls('cascader', customizePrefixCls);
      var inputPrefixCls = getPrefixCls('input', customizeInputPrefixCls);

      var sizeCls = classnames((_classNames = {}, _defineProperty(_classNames, inputPrefixCls + '-lg', size === 'large'), _defineProperty(_classNames, inputPrefixCls + '-sm', size === 'small'), _classNames));
      var clearIcon = allowClear && !disabled && value.length > 0 || inputValue ? h(Icon$1, {
        attrs: {
          type: 'close-circle',
          theme: 'filled'
        },
        'class': prefixCls + '-picker-clear',
        on: {
          'click': this.clearSelection
        },

        key: 'clear-icon'
      }) : null;
      var arrowCls = classnames((_classNames2 = {}, _defineProperty(_classNames2, prefixCls + '-picker-arrow', true), _defineProperty(_classNames2, prefixCls + '-picker-arrow-expand', sPopupVisible), _classNames2));
      var pickerCls = classnames(getClass(this), prefixCls + '-picker', (_classNames3 = {}, _defineProperty(_classNames3, prefixCls + '-picker-with-value', inputValue), _defineProperty(_classNames3, prefixCls + '-picker-disabled', disabled), _defineProperty(_classNames3, prefixCls + '-picker-' + size, !!size), _defineProperty(_classNames3, prefixCls + '-picker-show-search', !!showSearch), _defineProperty(_classNames3, prefixCls + '-picker-focused', inputFocused), _classNames3));

      // Fix bug of https://github.com/facebook/react/pull/5004
      // and https://fb.me/react-unknown-prop
      var tempInputProps = omit(otherProps, ['options', 'popupPlacement', 'transitionName', 'displayRender', 'changeOnSelect', 'expandTrigger', 'popupVisible', 'getPopupContainer', 'loadData', 'popupClassName', 'filterOption', 'renderFilteredOption', 'sortFilteredOption', 'notFoundContent', 'defaultValue', 'fieldNames']);

      var options = props.options;
      var names = getFilledFieldNames(this.$props);
      if (options && options.length > 0) {
        if (inputValue) {
          options = this.generateFilteredOptions(prefixCls, renderEmpty);
        }
      } else {
        var _ref6;

        options = [(_ref6 = {}, _defineProperty(_ref6, names.label, notFoundContent || renderEmpty(h, 'Cascader')), _defineProperty(_ref6, names.value, 'ANT_CASCADER_NOT_FOUND'), _defineProperty(_ref6, 'disabled', true), _ref6)];
      }

      // Dropdown menu should keep previous status until it is fully closed.
      if (!sPopupVisible) {
        options = this.cachedOptions;
      } else {
        this.cachedOptions = options;
      }

      var dropdownMenuColumnStyle = {};
      var isNotFound = (options || []).length === 1 && options[0].value === 'ANT_CASCADER_NOT_FOUND';
      if (isNotFound) {
        dropdownMenuColumnStyle.height = 'auto'; // Height of one row.
      }
      // The default value of `matchInputWidth` is `true`
      var resultListMatchInputWidth = showSearch.matchInputWidth !== false;
      if (resultListMatchInputWidth && (inputValue || isNotFound) && this.$refs.input) {
        dropdownMenuColumnStyle.width = this.$refs.input.$el.offsetWidth + 'px';
      }
      // showSearch时，focus、blur在input上触发，反之在ref='picker'上触发
      var inputProps = {
        props: _extends$1({}, tempInputProps, {
          prefixCls: inputPrefixCls,
          placeholder: value && value.length > 0 ? undefined : placeholder,
          value: inputValue,
          disabled: disabled,
          readOnly: !showSearch,
          autoComplete: 'off'
        }),
        'class': prefixCls + '-input ' + sizeCls,
        ref: 'input',
        on: {
          focus: showSearch ? this.handleInputFocus : noop$j,
          click: showSearch ? this.handleInputClick : noop$j,
          blur: showSearch ? this.handleInputBlur : noop$j,
          keydown: this.handleKeyDown,
          change: showSearch ? this.handleInputChange : noop$j
        },
        attrs: getAttrs(this)
      };
      var children = filterEmpty($slots['default']);
      var inputIcon = suffixIcon && (isValidElement(suffixIcon) ? cloneElement(suffixIcon, {
        'class': _defineProperty({}, prefixCls + '-picker-arrow', true)
      }) : h(
        'span',
        { 'class': prefixCls + '-picker-arrow' },
        [suffixIcon]
      )) || h(Icon$1, {
        attrs: { type: 'down' },
        'class': arrowCls });

      var input = children.length ? children : h(
        'span',
        { 'class': pickerCls, style: getStyle(this), ref: 'picker' },
        [showSearch ? h(
          'span',
          { 'class': prefixCls + '-picker-label' },
          [this.getLabel()]
        ) : null, h(Input, inputProps), !showSearch ? h(
          'span',
          { 'class': prefixCls + '-picker-label' },
          [this.getLabel()]
        ) : null, clearIcon, inputIcon]
      );

      var expandIcon = h(Icon$1, {
        attrs: { type: 'right' }
      });

      var loadingIcon = h(
        'span',
        { 'class': prefixCls + '-menu-item-loading-icon' },
        [h(Icon$1, {
          attrs: { type: 'redo', spin: true }
        })]
      );
      var getPopupContainer = props.getPopupContainer || getContextPopupContainer;
      var cascaderProps = {
        props: _extends$1({}, props, {
          getPopupContainer: getPopupContainer,
          options: options,
          prefixCls: prefixCls,
          value: value,
          popupVisible: sPopupVisible,
          dropdownMenuColumnStyle: dropdownMenuColumnStyle,
          expandIcon: expandIcon,
          loadingIcon: loadingIcon
        }),
        on: _extends$1({}, getListeners(this), {
          popupVisibleChange: this.handlePopupVisibleChange,
          change: this.handleChange
        })
      };
      return h(
        Cascader,
        cascaderProps,
        [input]
      );
    }
  };

  /* istanbul ignore next */
  Cascader$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Cascader$1.name, Cascader$1);
  };

  function noop$k() {}

  var Checkbox$1 = {
    name: 'ACheckbox',
    inheritAttrs: false,
    __ANT_CHECKBOX: true,
    model: {
      prop: 'checked'
    },
    props: {
      prefixCls: VuePropTypes.string,
      defaultChecked: VuePropTypes.bool,
      checked: VuePropTypes.bool,
      disabled: VuePropTypes.bool,
      isGroup: VuePropTypes.bool,
      value: VuePropTypes.any,
      name: VuePropTypes.string,
      id: VuePropTypes.string,
      indeterminate: VuePropTypes.bool,
      type: VuePropTypes.string.def('checkbox'),
      autoFocus: VuePropTypes.bool
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } },
      checkboxGroupContext: { 'default': function _default() {
          return undefined;
        } }
    },
    watch: {
      value: function value(_value, prevValue) {
        var _this = this;

        this.$nextTick(function () {
          var _checkboxGroupContext = _this.checkboxGroupContext,
              checkboxGroup = _checkboxGroupContext === undefined ? {} : _checkboxGroupContext;

          if (checkboxGroup.registerValue && checkboxGroup.cancelValue) {
            checkboxGroup.cancelValue(prevValue);
            checkboxGroup.registerValue(_value);
          }
        });
      }
    },
    mounted: function mounted() {
      var value = this.value,
          _checkboxGroupContext2 = this.checkboxGroupContext,
          checkboxGroup = _checkboxGroupContext2 === undefined ? {} : _checkboxGroupContext2;

      if (checkboxGroup.registerValue) {
        checkboxGroup.registerValue(value);
      }

      warning$1(hasProp(this, 'checked') || this.checkboxGroupContext || !hasProp(this, 'value'), 'Checkbox', '`value` is not validate prop, do you mean `checked`?');
    },
    beforeDestroy: function beforeDestroy() {
      var value = this.value,
          _checkboxGroupContext3 = this.checkboxGroupContext,
          checkboxGroup = _checkboxGroupContext3 === undefined ? {} : _checkboxGroupContext3;

      if (checkboxGroup.cancelValue) {
        checkboxGroup.cancelValue(value);
      }
    },

    methods: {
      handleChange: function handleChange(event) {
        var targetChecked = event.target.checked;
        this.$emit('input', targetChecked);
        this.$emit('change', event);
      },
      focus: function focus() {
        this.$refs.vcCheckbox.focus();
      },
      blur: function blur() {
        this.$refs.vcCheckbox.blur();
      }
    },

    render: function render() {
      var _this2 = this,
          _classNames;

      var h = arguments[0];
      var checkboxGroup = this.checkboxGroupContext,
          $slots = this.$slots;

      var props = getOptionProps(this);
      var children = $slots['default'];

      var _getListeners = getListeners(this),
          _getListeners$mouseen = _getListeners.mouseenter,
          mouseenter = _getListeners$mouseen === undefined ? noop$k : _getListeners$mouseen,
          _getListeners$mousele = _getListeners.mouseleave,
          mouseleave = _getListeners$mousele === undefined ? noop$k : _getListeners$mousele,
          input = _getListeners.input,
          restListeners = _objectWithoutProperties(_getListeners, ['mouseenter', 'mouseleave', 'input']);

      var customizePrefixCls = props.prefixCls,
          indeterminate = props.indeterminate,
          restProps = _objectWithoutProperties(props, ['prefixCls', 'indeterminate']);

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('checkbox', customizePrefixCls);

      var checkboxProps = {
        props: _extends$1({}, restProps, { prefixCls: prefixCls }),
        on: restListeners,
        attrs: getAttrs(this)
      };
      if (checkboxGroup) {
        checkboxProps.on.change = function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this2.$emit.apply(_this2, ['change'].concat(args));
          checkboxGroup.toggleOption({ label: children, value: props.value });
        };
        checkboxProps.props.name = checkboxGroup.name;
        checkboxProps.props.checked = checkboxGroup.sValue.indexOf(props.value) !== -1;
        checkboxProps.props.disabled = props.disabled || checkboxGroup.disabled;
        checkboxProps.props.indeterminate = indeterminate;
      } else {
        checkboxProps.on.change = this.handleChange;
      }
      var classString = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-wrapper', true), _defineProperty(_classNames, prefixCls + '-wrapper-checked', checkboxProps.props.checked), _defineProperty(_classNames, prefixCls + '-wrapper-disabled', checkboxProps.props.disabled), _classNames));
      var checkboxClass = classnames(_defineProperty({}, prefixCls + '-indeterminate', indeterminate));
      return h(
        'label',
        { 'class': classString, on: {
            'mouseenter': mouseenter,
            'mouseleave': mouseleave
          }
        },
        [h(Checkbox, babelHelperVueJsxMergeProps([checkboxProps, { 'class': checkboxClass, ref: 'vcCheckbox' }])), children !== undefined && h('span', [children])]
      );
    }
  };

  function noop$l() {}
  var CheckboxGroup = {
    name: 'ACheckboxGroup',
    model: {
      prop: 'value'
    },
    props: {
      name: VuePropTypes.string,
      prefixCls: VuePropTypes.string,
      defaultValue: VuePropTypes.array,
      value: VuePropTypes.array,
      options: VuePropTypes.array.def([]),
      disabled: VuePropTypes.bool
    },
    provide: function provide() {
      return {
        checkboxGroupContext: this
      };
    },

    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      var value = this.value,
          defaultValue = this.defaultValue;

      return {
        sValue: value || defaultValue || [],
        registeredValues: []
      };
    },

    watch: {
      value: function value(val) {
        this.sValue = val || [];
      }
    },
    methods: {
      getOptions: function getOptions() {
        var options = this.options,
            $scopedSlots = this.$scopedSlots;

        return options.map(function (option) {
          if (typeof option === 'string') {
            return {
              label: option,
              value: option
            };
          }
          var label = option.label;
          if (label === undefined && $scopedSlots.label) {
            label = $scopedSlots.label(option);
          }
          return _extends$1({}, option, { label: label });
        });
      },
      cancelValue: function cancelValue(value) {
        this.registeredValues = this.registeredValues.filter(function (val) {
          return val !== value;
        });
      },
      registerValue: function registerValue(value) {
        this.registeredValues = [].concat(_toConsumableArray(this.registeredValues), [value]);
      },
      toggleOption: function toggleOption(option) {
        var registeredValues = this.registeredValues;

        var optionIndex = this.sValue.indexOf(option.value);
        var value = [].concat(_toConsumableArray(this.sValue));
        if (optionIndex === -1) {
          value.push(option.value);
        } else {
          value.splice(optionIndex, 1);
        }
        if (!hasProp(this, 'value')) {
          this.sValue = value;
        }
        var options = this.getOptions();
        var val = value.filter(function (val) {
          return registeredValues.indexOf(val) !== -1;
        }).sort(function (a, b) {
          var indexA = options.findIndex(function (opt) {
            return opt.value === a;
          });
          var indexB = options.findIndex(function (opt) {
            return opt.value === b;
          });
          return indexA - indexB;
        });
        this.$emit('input', val);
        this.$emit('change', val);
      }
    },
    render: function render() {
      var h = arguments[0];
      var props = this.$props,
          state = this.$data,
          $slots = this.$slots;
      var customizePrefixCls = props.prefixCls,
          options = props.options;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('checkbox', customizePrefixCls);

      var children = $slots['default'];
      var groupPrefixCls = prefixCls + '-group';
      if (options && options.length > 0) {
        children = this.getOptions().map(function (option) {
          return h(
            Checkbox$1,
            {
              attrs: {
                prefixCls: prefixCls,

                disabled: 'disabled' in option ? option.disabled : props.disabled,
                indeterminate: option.indeterminate,
                value: option.value,
                checked: state.sValue.indexOf(option.value) !== -1
              },
              key: option.value.toString(), on: {
                'change': option.onChange || noop$l
              },

              'class': groupPrefixCls + '-item'
            },
            [option.label]
          );
        });
      }
      return h(
        'div',
        { 'class': groupPrefixCls },
        [children]
      );
    }
  };

  Checkbox$1.Group = CheckboxGroup;

  /* istanbul ignore next */
  Checkbox$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Checkbox$1.name, Checkbox$1);
    Vue.component(CheckboxGroup.name, CheckboxGroup);
  };

  function goYear(direction) {
    this.changeYear(direction);
  }

  function noop$m() {}

  var MonthPanel = {
    name: 'MonthPanel',
    mixins: [BaseMixin],
    props: {
      value: VuePropTypes.any,
      defaultValue: VuePropTypes.any,
      cellRender: VuePropTypes.any,
      contentRender: VuePropTypes.any,
      locale: VuePropTypes.any,
      rootPrefixCls: VuePropTypes.string,
      // onChange: PropTypes.func,
      disabledDate: VuePropTypes.func,
      // onSelect: PropTypes.func,
      renderFooter: VuePropTypes.func,
      changeYear: VuePropTypes.func.def(noop$m)
    },

    data: function data() {
      var value = this.value,
          defaultValue = this.defaultValue;
      // bind methods

      this.nextYear = goYear.bind(this, 1);
      this.previousYear = goYear.bind(this, -1);
      return {
        sValue: value || defaultValue
      };
    },

    watch: {
      value: function value(val) {
        this.setState({
          sValue: val
        });
      }
    },
    methods: {
      setAndSelectValue: function setAndSelectValue(value) {
        this.setValue(value);
        this.__emit('select', value);
      },
      setValue: function setValue(value) {
        if (hasProp(this, 'value')) {
          this.setState({
            sValue: value
          });
        }
      }
    },

    render: function render() {
      var h = arguments[0];
      var sValue = this.sValue,
          cellRender = this.cellRender,
          contentRender = this.contentRender,
          locale = this.locale,
          rootPrefixCls = this.rootPrefixCls,
          disabledDate = this.disabledDate,
          renderFooter = this.renderFooter;

      var year = sValue.year();
      var prefixCls = rootPrefixCls + '-month-panel';

      var footer = renderFooter && renderFooter('month');
      return h(
        'div',
        { 'class': prefixCls },
        [h('div', [h(
          'div',
          { 'class': prefixCls + '-header' },
          [h('a', {
            'class': prefixCls + '-prev-year-btn',
            attrs: { role: 'button',

              title: locale.previousYear
            },
            on: {
              'click': this.previousYear
            }
          }), h(
            'a',
            {
              'class': prefixCls + '-year-select',
              attrs: { role: 'button',

                title: locale.yearSelect
              },
              on: {
                'click': getListeners(this).yearPanelShow || noop$m
              }
            },
            [h(
              'span',
              { 'class': prefixCls + '-year-select-content' },
              [year]
            ), h(
              'span',
              { 'class': prefixCls + '-year-select-arrow' },
              ['x']
            )]
          ), h('a', {
            'class': prefixCls + '-next-year-btn',
            attrs: { role: 'button',

              title: locale.nextYear
            },
            on: {
              'click': this.nextYear
            }
          })]
        ), h(
          'div',
          { 'class': prefixCls + '-body' },
          [h(MonthTable, {
            attrs: {
              disabledDate: disabledDate,

              locale: locale,
              value: sValue,
              cellRender: cellRender,
              contentRender: contentRender,
              prefixCls: prefixCls
            },
            on: {
              'select': this.setAndSelectValue
            }
          })]
        ), footer && h(
          'div',
          { 'class': prefixCls + '-footer' },
          [footer]
        )])]
      );
    }
  };

  var ROW$1 = 4;
  var COL$1 = 3;
  function noop$n() {}
  function goYear$1(direction) {
    var value = this.sValue.clone();
    value.add(direction, 'year');
    this.setState({
      sValue: value
    });
  }

  function chooseYear(year) {
    var value = this.sValue.clone();
    value.year(year);
    value.month(this.sValue.month());
    this.sValue = value;
    this.__emit('select', value);
  }

  var YearPanel = {
    mixins: [BaseMixin],
    props: {
      rootPrefixCls: VuePropTypes.string,
      value: VuePropTypes.object,
      defaultValue: VuePropTypes.object,
      locale: VuePropTypes.object,
      renderFooter: VuePropTypes.func
    },
    data: function data() {
      this.nextDecade = goYear$1.bind(this, 10);
      this.previousDecade = goYear$1.bind(this, -10);
      return {
        sValue: this.value || this.defaultValue
      };
    },

    watch: {
      value: function value(val) {
        this.sValue = val;
      }
    },
    methods: {
      years: function years() {
        var value = this.sValue;
        var currentYear = value.year();
        var startYear = parseInt(currentYear / 10, 10) * 10;
        var previousYear = startYear - 1;
        var years = [];
        var index = 0;
        for (var rowIndex = 0; rowIndex < ROW$1; rowIndex++) {
          years[rowIndex] = [];
          for (var colIndex = 0; colIndex < COL$1; colIndex++) {
            var year = previousYear + index;
            var content = String(year);
            years[rowIndex][colIndex] = {
              content: content,
              year: year,
              title: content
            };
            index++;
          }
        }
        return years;
      }
    },

    render: function render() {
      var _this = this;

      var h = arguments[0];
      var value = this.sValue,
          locale = this.locale,
          renderFooter = this.renderFooter;

      var decadePanelShow = getListeners(this).decadePanelShow || noop$n;
      var years = this.years();
      var currentYear = value.year();
      var startYear = parseInt(currentYear / 10, 10) * 10;
      var endYear = startYear + 9;
      var prefixCls = this.rootPrefixCls + '-year-panel';

      var yeasEls = years.map(function (row, index) {
        var tds = row.map(function (yearData) {
          var _classNameMap;

          var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, prefixCls + '-cell', 1), _defineProperty(_classNameMap, prefixCls + '-selected-cell', yearData.year === currentYear), _defineProperty(_classNameMap, prefixCls + '-last-decade-cell', yearData.year < startYear), _defineProperty(_classNameMap, prefixCls + '-next-decade-cell', yearData.year > endYear), _classNameMap);
          var clickHandler = noop$n;
          if (yearData.year < startYear) {
            clickHandler = _this.previousDecade;
          } else if (yearData.year > endYear) {
            clickHandler = _this.nextDecade;
          } else {
            clickHandler = chooseYear.bind(_this, yearData.year);
          }
          return h(
            'td',
            {
              attrs: {
                role: 'gridcell',
                title: yearData.title
              },
              key: yearData.content,
              on: {
                'click': clickHandler
              },

              'class': classNameMap
            },
            [h(
              'a',
              { 'class': prefixCls + '-year' },
              [yearData.content]
            )]
          );
        });
        return h(
          'tr',
          { key: index, attrs: { role: 'row' }
          },
          [tds]
        );
      });
      var footer = renderFooter && renderFooter('year');
      return h(
        'div',
        { 'class': prefixCls },
        [h('div', [h(
          'div',
          { 'class': prefixCls + '-header' },
          [h('a', {
            'class': prefixCls + '-prev-decade-btn',
            attrs: { role: 'button',

              title: locale.previousDecade
            },
            on: {
              'click': this.previousDecade
            }
          }), h(
            'a',
            {
              'class': prefixCls + '-decade-select',
              attrs: { role: 'button',

                title: locale.decadeSelect
              },
              on: {
                'click': decadePanelShow
              }
            },
            [h(
              'span',
              { 'class': prefixCls + '-decade-select-content' },
              [startYear, '-', endYear]
            ), h(
              'span',
              { 'class': prefixCls + '-decade-select-arrow' },
              ['x']
            )]
          ), h('a', {
            'class': prefixCls + '-next-decade-btn',
            attrs: { role: 'button',

              title: locale.nextDecade
            },
            on: {
              'click': this.nextDecade
            }
          })]
        ), h(
          'div',
          { 'class': prefixCls + '-body' },
          [h(
            'table',
            { 'class': prefixCls + '-table', attrs: { cellSpacing: '0', role: 'grid' }
            },
            [h(
              'tbody',
              { 'class': prefixCls + '-tbody' },
              [yeasEls]
            )]
          )]
        ), footer && h(
          'div',
          { 'class': prefixCls + '-footer' },
          [footer]
        )])]
      );
    }
  };

  var ROW$2 = 4;
  var COL$2 = 3;
  function noop$o() {}
  function goYear$2(direction) {
    var next = this.sValue.clone();
    next.add(direction, 'years');
    this.setState({
      sValue: next
    });
  }

  function chooseDecade(year, event) {
    var next = this.sValue.clone();
    next.year(year);
    next.month(this.sValue.month());
    this.__emit('select', next);
    event.preventDefault();
  }

  var DecadePanel = {
    mixins: [BaseMixin],
    props: {
      locale: VuePropTypes.object,
      value: VuePropTypes.object,
      defaultValue: VuePropTypes.object,
      rootPrefixCls: VuePropTypes.string,
      renderFooter: VuePropTypes.func
    },
    data: function data() {
      this.nextCentury = goYear$2.bind(this, 100);
      this.previousCentury = goYear$2.bind(this, -100);
      return {
        sValue: this.value || this.defaultValue
      };
    },

    watch: {
      value: function value(val) {
        this.sValue = val;
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];

      var value = this.sValue;
      var _$props = this.$props,
          locale = _$props.locale,
          renderFooter = _$props.renderFooter;

      var currentYear = value.year();
      var startYear = parseInt(currentYear / 100, 10) * 100;
      var preYear = startYear - 10;
      var endYear = startYear + 99;
      var decades = [];
      var index = 0;
      var prefixCls = this.rootPrefixCls + '-decade-panel';

      for (var rowIndex = 0; rowIndex < ROW$2; rowIndex++) {
        decades[rowIndex] = [];
        for (var colIndex = 0; colIndex < COL$2; colIndex++) {
          var startDecade = preYear + index * 10;
          var endDecade = preYear + index * 10 + 9;
          decades[rowIndex][colIndex] = {
            startDecade: startDecade,
            endDecade: endDecade
          };
          index++;
        }
      }

      var footer = renderFooter && renderFooter('decade');
      var decadesEls = decades.map(function (row, decadeIndex) {
        var tds = row.map(function (decadeData) {
          var _classNameMap;

          var dStartDecade = decadeData.startDecade;
          var dEndDecade = decadeData.endDecade;
          var isLast = dStartDecade < startYear;
          var isNext = dEndDecade > endYear;
          var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, prefixCls + '-cell', 1), _defineProperty(_classNameMap, prefixCls + '-selected-cell', dStartDecade <= currentYear && currentYear <= dEndDecade), _defineProperty(_classNameMap, prefixCls + '-last-century-cell', isLast), _defineProperty(_classNameMap, prefixCls + '-next-century-cell', isNext), _classNameMap);
          var content = dStartDecade + '-' + dEndDecade;
          var clickHandler = noop$o;
          if (isLast) {
            clickHandler = _this.previousCentury;
          } else if (isNext) {
            clickHandler = _this.nextCentury;
          } else {
            clickHandler = chooseDecade.bind(_this, dStartDecade);
          }
          return h(
            'td',
            { key: dStartDecade, on: {
                'click': clickHandler
              },
              attrs: { role: 'gridcell' },
              'class': classNameMap },
            [h(
              'a',
              { 'class': prefixCls + '-decade' },
              [content]
            )]
          );
        });
        return h(
          'tr',
          { key: decadeIndex, attrs: { role: 'row' }
          },
          [tds]
        );
      });

      return h(
        'div',
        { 'class': prefixCls },
        [h(
          'div',
          { 'class': prefixCls + '-header' },
          [h('a', {
            'class': prefixCls + '-prev-century-btn',
            attrs: { role: 'button',

              title: locale.previousCentury
            },
            on: {
              'click': this.previousCentury
            }
          }), h(
            'div',
            { 'class': prefixCls + '-century' },
            [startYear, '-', endYear]
          ), h('a', {
            'class': prefixCls + '-next-century-btn',
            attrs: { role: 'button',

              title: locale.nextCentury
            },
            on: {
              'click': this.nextCentury
            }
          })]
        ), h(
          'div',
          { 'class': prefixCls + '-body' },
          [h(
            'table',
            { 'class': prefixCls + '-table', attrs: { cellSpacing: '0', role: 'grid' }
            },
            [h(
              'tbody',
              { 'class': prefixCls + '-tbody' },
              [decadesEls]
            )]
          )]
        ), footer && h(
          'div',
          { 'class': prefixCls + '-footer' },
          [footer]
        )]
      );
    }
  };

  function noop$p() {}
  function goMonth(direction) {
    var next = this.value.clone();
    next.add(direction, 'months');
    this.__emit('valueChange', next);
  }

  function goYear$3(direction) {
    var next = this.value.clone();
    next.add(direction, 'years');
    this.__emit('valueChange', next);
  }

  function showIf(condition, el) {
    return condition ? el : null;
  }

  var CalendarHeader$1 = {
    name: 'CalendarHeader',
    mixins: [BaseMixin],
    props: {
      prefixCls: VuePropTypes.string,
      value: VuePropTypes.object,
      // onValueChange: PropTypes.func,
      showTimePicker: VuePropTypes.bool,
      // onPanelChange: PropTypes.func,
      locale: VuePropTypes.object,
      enablePrev: VuePropTypes.any.def(1),
      enableNext: VuePropTypes.any.def(1),
      disabledMonth: VuePropTypes.func,
      mode: VuePropTypes.any,
      monthCellRender: VuePropTypes.func,
      monthCellContentRender: VuePropTypes.func,
      renderFooter: VuePropTypes.func
    },
    data: function data() {
      this.nextMonth = goMonth.bind(this, 1);
      this.previousMonth = goMonth.bind(this, -1);
      this.nextYear = goYear$3.bind(this, 1);
      this.previousYear = goYear$3.bind(this, -1);
      return {
        yearPanelReferer: null
      };
    },

    methods: {
      onMonthSelect: function onMonthSelect(value) {
        this.__emit('panelChange', value, 'date');
        if (getListeners(this).monthSelect) {
          this.__emit('monthSelect', value);
        } else {
          this.__emit('valueChange', value);
        }
      },
      onYearSelect: function onYearSelect(value) {
        var referer = this.yearPanelReferer;
        this.setState({ yearPanelReferer: null });
        this.__emit('panelChange', value, referer);
        this.__emit('valueChange', value);
      },
      onDecadeSelect: function onDecadeSelect(value) {
        this.__emit('panelChange', value, 'year');
        this.__emit('valueChange', value);
      },
      changeYear: function changeYear(direction) {
        if (direction > 0) {
          this.nextYear();
        } else {
          this.previousYear();
        }
      },
      monthYearElement: function monthYearElement(showTimePicker) {
        var _this = this;

        var h = this.$createElement;

        var props = this.$props;
        var prefixCls = props.prefixCls;
        var locale = props.locale;
        var value = props.value;
        var localeData = value.localeData();
        var monthBeforeYear = locale.monthBeforeYear;
        var selectClassName = prefixCls + '-' + (monthBeforeYear ? 'my-select' : 'ym-select');
        var timeClassName = showTimePicker ? ' ' + prefixCls + '-time-status' : '';
        var year = h(
          'a',
          {
            'class': prefixCls + '-year-select' + timeClassName,
            attrs: { role: 'button',

              title: showTimePicker ? null : locale.yearSelect
            },
            on: {
              'click': showTimePicker ? noop$p : function () {
                return _this.showYearPanel('date');
              }
            }
          },
          [value.format(locale.yearFormat)]
        );
        var month = h(
          'a',
          {
            'class': prefixCls + '-month-select' + timeClassName,
            attrs: { role: 'button',

              title: showTimePicker ? null : locale.monthSelect
            },
            on: {
              'click': showTimePicker ? noop$p : this.showMonthPanel
            }
          },
          [locale.monthFormat ? value.format(locale.monthFormat) : localeData.monthsShort(value)]
        );
        var day = void 0;
        if (showTimePicker) {
          day = h(
            'a',
            { 'class': prefixCls + '-day-select' + timeClassName, attrs: { role: 'button' }
            },
            [value.format(locale.dayFormat)]
          );
        }
        var my = [];
        if (monthBeforeYear) {
          my = [month, day, year];
        } else {
          my = [year, month, day];
        }
        return h(
          'span',
          { 'class': selectClassName },
          [my]
        );
      },
      showMonthPanel: function showMonthPanel() {
        // null means that users' interaction doesn't change value
        this.__emit('panelChange', null, 'month');
      },
      showYearPanel: function showYearPanel(referer) {
        this.setState({ yearPanelReferer: referer });
        this.__emit('panelChange', null, 'year');
      },
      showDecadePanel: function showDecadePanel() {
        this.__emit('panelChange', null, 'decade');
      }
    },

    render: function render() {
      var _this2 = this;

      var h = arguments[0];

      var props = getOptionProps(this);
      var prefixCls = props.prefixCls,
          locale = props.locale,
          mode = props.mode,
          value = props.value,
          showTimePicker = props.showTimePicker,
          enableNext = props.enableNext,
          enablePrev = props.enablePrev,
          disabledMonth = props.disabledMonth,
          renderFooter = props.renderFooter;


      var panel = null;
      if (mode === 'month') {
        panel = h(MonthPanel, {
          attrs: {
            locale: locale,
            value: value,
            rootPrefixCls: prefixCls,

            disabledDate: disabledMonth,
            cellRender: props.monthCellRender,
            contentRender: props.monthCellContentRender,
            renderFooter: renderFooter,
            changeYear: this.changeYear
          },
          on: {
            'select': this.onMonthSelect,
            'yearPanelShow': function yearPanelShow() {
              return _this2.showYearPanel('month');
            }
          }
        });
      }
      if (mode === 'year') {
        panel = h(YearPanel, {
          attrs: {
            locale: locale,
            value: value,
            rootPrefixCls: prefixCls,

            renderFooter: renderFooter
          },
          on: {
            'select': this.onYearSelect,
            'decadePanelShow': this.showDecadePanel
          }
        });
      }
      if (mode === 'decade') {
        panel = h(DecadePanel, {
          attrs: {
            locale: locale,
            value: value,
            rootPrefixCls: prefixCls,

            renderFooter: renderFooter
          },
          on: {
            'select': this.onDecadeSelect
          }
        });
      }

      return h(
        'div',
        { 'class': prefixCls + '-header' },
        [h(
          'div',
          { style: { position: 'relative' } },
          [showIf(enablePrev && !showTimePicker, h('a', {
            'class': prefixCls + '-prev-year-btn',
            attrs: { role: 'button',

              title: locale.previousYear
            },
            on: {
              'click': this.previousYear
            }
          })), showIf(enablePrev && !showTimePicker, h('a', {
            'class': prefixCls + '-prev-month-btn',
            attrs: { role: 'button',

              title: locale.previousMonth
            },
            on: {
              'click': this.previousMonth
            }
          })), this.monthYearElement(showTimePicker), showIf(enableNext && !showTimePicker, h('a', {
            'class': prefixCls + '-next-month-btn',
            on: {
              'click': this.nextMonth
            },
            attrs: {
              title: locale.nextMonth
            }
          })), showIf(enableNext && !showTimePicker, h('a', {
            'class': prefixCls + '-next-year-btn',
            on: {
              'click': this.nextYear
            },
            attrs: {
              title: locale.nextYear
            }
          }))]
        ), panel]
      );
    }
  };

  function noop$q() {}
  var TodayButton = {
    functional: true,
    render: function render(createElement, context) {
      var h = arguments[0];
      var props = context.props,
          _context$listeners = context.listeners,
          listeners = _context$listeners === undefined ? {} : _context$listeners;
      var prefixCls = props.prefixCls,
          locale = props.locale,
          value = props.value,
          timePicker = props.timePicker,
          disabled = props.disabled,
          disabledDate = props.disabledDate,
          text = props.text;
      var _listeners$today = listeners.today,
          today = _listeners$today === undefined ? noop$q : _listeners$today;

      var localeNow = (!text && timePicker ? locale.now : text) || locale.today;
      var disabledToday = disabledDate && !isAllowedDate(getTodayTime(value), disabledDate);
      var isDisabled = disabledToday || disabled;
      var disabledTodayClass = isDisabled ? prefixCls + '-today-btn-disabled' : '';
      return h(
        'a',
        {
          'class': prefixCls + '-today-btn ' + disabledTodayClass,
          attrs: { role: 'button',

            title: getTodayTimeStr(value)
          },
          on: {
            'click': isDisabled ? noop$q : today
          }
        },
        [localeNow]
      );
    }
  };

  function noop$r() {}
  var OkButton = {
    functional: true,
    render: function render(createElement, context) {
      var h = arguments[0];
      var props = context.props,
          _context$listeners = context.listeners,
          listeners = _context$listeners === undefined ? {} : _context$listeners;
      var prefixCls = props.prefixCls,
          locale = props.locale,
          okDisabled = props.okDisabled;
      var _listeners$ok = listeners.ok,
          ok = _listeners$ok === undefined ? noop$r : _listeners$ok;

      var className = prefixCls + "-ok-btn";
      if (okDisabled) {
        className += " " + prefixCls + "-ok-btn-disabled";
      }
      return h(
        "a",
        { "class": className, attrs: { role: "button" },
          on: {
            "click": okDisabled ? noop$r : ok
          }
        },
        [locale.ok]
      );
    }
  };

  function noop$s() {}
  var TimePickerButton = {
    functional: true,
    render: function render(h, context) {
      var _className;

      var props = context.props,
          _context$listeners = context.listeners,
          listeners = _context$listeners === undefined ? {} : _context$listeners;
      var prefixCls = props.prefixCls,
          locale = props.locale,
          showTimePicker = props.showTimePicker,
          timePickerDisabled = props.timePickerDisabled;
      var _listeners$closeTimeP = listeners.closeTimePicker,
          closeTimePicker = _listeners$closeTimeP === undefined ? noop$s : _listeners$closeTimeP,
          _listeners$openTimePi = listeners.openTimePicker,
          openTimePicker = _listeners$openTimePi === undefined ? noop$s : _listeners$openTimePi;

      var className = (_className = {}, _defineProperty(_className, prefixCls + "-time-picker-btn", true), _defineProperty(_className, prefixCls + "-time-picker-btn-disabled", timePickerDisabled), _className);
      var onClick = noop$s;
      if (!timePickerDisabled) {
        onClick = showTimePicker ? closeTimePicker : openTimePicker;
      }
      return h(
        "a",
        { "class": className, attrs: { role: "button" },
          on: {
            "click": onClick
          }
        },
        [showTimePicker ? locale.dateSelect : locale.timeSelect]
      );
    }
  };

  var CalendarFooter = {
    mixins: [BaseMixin],
    props: {
      prefixCls: VuePropTypes.string,
      showDateInput: VuePropTypes.bool,
      disabledTime: VuePropTypes.any,
      timePicker: VuePropTypes.any,
      selectedValue: VuePropTypes.any,
      showOk: VuePropTypes.bool,
      // onSelect: PropTypes.func,
      value: VuePropTypes.object,
      renderFooter: VuePropTypes.func,
      defaultValue: VuePropTypes.object,
      locale: VuePropTypes.object,
      showToday: VuePropTypes.bool,
      disabledDate: VuePropTypes.func,
      showTimePicker: VuePropTypes.bool,
      okDisabled: VuePropTypes.bool,
      mode: VuePropTypes.string
    },
    methods: {
      onSelect: function onSelect(value) {
        this.__emit('select', value);
      },
      getRootDOMNode: function getRootDOMNode() {
        return this.$el;
      }
    },

    render: function render() {
      var h = arguments[0];

      var props = getOptionProps(this);
      var value = props.value,
          prefixCls = props.prefixCls,
          showOk = props.showOk,
          timePicker = props.timePicker,
          renderFooter = props.renderFooter,
          showToday = props.showToday,
          mode = props.mode;

      var footerEl = null;
      var extraFooter = renderFooter && renderFooter(mode);
      if (showToday || timePicker || extraFooter) {
        var _cls;

        var btnProps = {
          props: _extends$1({}, props, {
            value: value
          }),
          on: getListeners(this)
        };
        var nowEl = null;
        if (showToday) {
          nowEl = h(TodayButton, babelHelperVueJsxMergeProps([{ key: 'todayButton' }, btnProps]));
        }
        delete btnProps.props.value;
        var okBtn = null;
        if (showOk === true || showOk !== false && !!timePicker) {
          okBtn = h(OkButton, babelHelperVueJsxMergeProps([{ key: 'okButton' }, btnProps]));
        }
        var timePickerBtn = null;
        if (timePicker) {
          timePickerBtn = h(TimePickerButton, babelHelperVueJsxMergeProps([{ key: 'timePickerButton' }, btnProps]));
        }

        var footerBtn = void 0;
        if (nowEl || timePickerBtn || okBtn || extraFooter) {
          footerBtn = h(
            'span',
            { 'class': prefixCls + '-footer-btn' },
            [extraFooter, nowEl, timePickerBtn, okBtn]
          );
        }
        var cls = (_cls = {}, _defineProperty(_cls, prefixCls + '-footer', true), _defineProperty(_cls, prefixCls + '-footer-show-ok', !!okBtn), _cls);
        footerEl = h(
          'div',
          { 'class': cls },
          [footerBtn]
        );
      }
      return footerEl;
    }
  };

  var cachedSelectionStart = void 0;
  var cachedSelectionEnd = void 0;
  var dateInputInstance = void 0;

  var DateInput = {
    mixins: [BaseMixin],
    props: {
      prefixCls: VuePropTypes.string,
      timePicker: VuePropTypes.object,
      value: VuePropTypes.object,
      disabledTime: VuePropTypes.any,
      format: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.arrayOf(VuePropTypes.string), VuePropTypes.func]),
      locale: VuePropTypes.object,
      disabledDate: VuePropTypes.func,
      // onChange: PropTypes.func,
      // onClear: PropTypes.func,
      placeholder: VuePropTypes.string,
      // onSelect: PropTypes.func,
      selectedValue: VuePropTypes.object,
      clearIcon: VuePropTypes.any,
      inputMode: VuePropTypes.string,
      inputReadOnly: VuePropTypes.bool
    },

    data: function data() {
      var selectedValue = this.selectedValue;
      return {
        str: formatDate(selectedValue, this.format),
        invalid: false,
        hasFocus: false
      };
    },

    watch: {
      selectedValue: function selectedValue() {
        this.setState();
      },
      format: function format() {
        this.setState();
      }
    },

    updated: function updated() {
      var _this = this;

      this.$nextTick(function () {
        if (dateInputInstance && _this.$data.hasFocus && !_this.invalid && !(cachedSelectionStart === 0 && cachedSelectionEnd === 0)) {
          dateInputInstance.setSelectionRange(cachedSelectionStart, cachedSelectionEnd);
        }
      });
    },
    getInstance: function getInstance() {
      return dateInputInstance;
    },

    methods: {
      getDerivedStateFromProps: function getDerivedStateFromProps(nextProps, state) {
        var newState = {};
        if (dateInputInstance) {
          cachedSelectionStart = dateInputInstance.selectionStart;
          cachedSelectionEnd = dateInputInstance.selectionEnd;
        }
        // when popup show, click body will call this, bug!
        var selectedValue = nextProps.selectedValue;
        if (!state.hasFocus) {
          newState = {
            str: formatDate(selectedValue, this.format),
            invalid: false
          };
        }
        return newState;
      },
      onClear: function onClear() {
        this.setState({
          str: ''
        });
        this.__emit('clear', null);
      },
      onInputChange: function onInputChange(e) {
        var _e$target = e.target,
            str = _e$target.value,
            composing = _e$target.composing;
        var _str = this.str,
            oldStr = _str === undefined ? '' : _str;

        if (e.isComposing || composing || oldStr === str) return;

        var _$props = this.$props,
            disabledDate = _$props.disabledDate,
            format = _$props.format,
            selectedValue = _$props.selectedValue;

        // 没有内容，合法并直接退出

        if (!str) {
          this.__emit('change', null);
          this.setState({
            invalid: false,
            str: str
          });
          return;
        }

        // 不合法直接退出
        var parsed = moment(str, format, true);
        if (!parsed.isValid()) {
          this.setState({
            invalid: true,
            str: str
          });
          return;
        }
        var value = this.value.clone();
        value.year(parsed.year()).month(parsed.month()).date(parsed.date()).hour(parsed.hour()).minute(parsed.minute()).second(parsed.second());

        if (!value || disabledDate && disabledDate(value)) {
          this.setState({
            invalid: true,
            str: str
          });
          return;
        }

        if (selectedValue !== value || selectedValue && value && !selectedValue.isSame(value)) {
          this.setState({
            invalid: false,
            str: str
          });
          this.__emit('change', value);
        }
      },
      onFocus: function onFocus() {
        this.setState({ hasFocus: true });
      },
      onBlur: function onBlur() {
        this.setState(function (prevState, prevProps) {
          return {
            hasFocus: false,
            str: formatDate(prevProps.value, prevProps.format)
          };
        });
      },
      onKeyDown: function onKeyDown(event) {
        var keyCode = event.keyCode;
        var _$props2 = this.$props,
            value = _$props2.value,
            disabledDate = _$props2.disabledDate;

        if (keyCode === KeyCode.ENTER) {
          var validateDate = !disabledDate || !disabledDate(value);
          if (validateDate) {
            this.__emit('select', value.clone());
          }
          event.preventDefault();
        }
      },
      getRootDOMNode: function getRootDOMNode() {
        return this.$el;
      },
      focus: function focus() {
        if (dateInputInstance) {
          dateInputInstance.focus();
        }
      },
      saveDateInput: function saveDateInput(dateInput) {
        dateInputInstance = dateInput;
      }
    },

    render: function render() {
      var h = arguments[0];
      var invalid = this.invalid,
          str = this.str,
          locale = this.locale,
          prefixCls = this.prefixCls,
          placeholder = this.placeholder,
          disabled = this.disabled,
          showClear = this.showClear,
          inputMode = this.inputMode,
          inputReadOnly = this.inputReadOnly;

      var clearIcon = getComponentFromProp(this, 'clearIcon');
      var invalidClass = invalid ? prefixCls + '-input-invalid' : '';
      return h(
        'div',
        { 'class': prefixCls + '-input-wrap' },
        [h(
          'div',
          { 'class': prefixCls + '-date-input-wrap' },
          [h('input', babelHelperVueJsxMergeProps([{
            directives: [{
              name: 'ant-ref',
              value: this.saveDateInput
            }, {
              name: 'ant-input'
            }]
          }, {
            'class': prefixCls + '-input ' + invalidClass,
            domProps: {
              'value': str
            },
            attrs: {
              disabled: disabled,
              placeholder: placeholder,

              inputMode: inputMode,
              readOnly: inputReadOnly
            },
            on: {
              'input': this.onInputChange,
              'keydown': this.onKeyDown,
              'focus': this.onFocus,
              'blur': this.onBlur
            }
          }]))]
        ), showClear ? h(
          'a',
          {
            attrs: { role: 'button', title: locale.clear },
            on: {
              'click': this.onClear
            }
          },
          [clearIcon || h('span', { 'class': prefixCls + '-clear-btn' })]
        ) : null]
      );
    }
  };

  function goStartMonth(time) {
    return time.clone().startOf('month');
  }

  function goEndMonth(time) {
    return time.clone().endOf('month');
  }

  function goTime(time, direction, unit) {
    return time.clone().add(direction, unit);
  }

  function includesTime() {
    var timeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var time = arguments[1];
    var unit = arguments[2];

    return timeList.some(function (t) {
      return t.isSame(time, unit);
    });
  }

  var getMomentObjectIfValid = function getMomentObjectIfValid(date) {
    if (moment.isMoment(date) && date.isValid()) {
      return date;
    }
    return false;
  };

  var Calendar$1 = {
    name: 'Calendar',
    props: {
      locale: VuePropTypes.object.def(enUs),
      format: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.arrayOf(VuePropTypes.string), VuePropTypes.func]),
      visible: VuePropTypes.bool.def(true),
      prefixCls: VuePropTypes.string.def('rc-calendar'),
      // prefixCls: PropTypes.string,
      defaultValue: VuePropTypes.object,
      value: VuePropTypes.object,
      selectedValue: VuePropTypes.object,
      defaultSelectedValue: VuePropTypes.object,
      mode: VuePropTypes.oneOf(['time', 'date', 'month', 'year', 'decade']),
      // locale: PropTypes.object,
      showDateInput: VuePropTypes.bool.def(true),
      showWeekNumber: VuePropTypes.bool,
      showToday: VuePropTypes.bool.def(true),
      showOk: VuePropTypes.bool,
      // onSelect: PropTypes.func,
      // onOk: PropTypes.func,
      // onKeyDown: PropTypes.func,
      timePicker: VuePropTypes.any,
      dateInputPlaceholder: VuePropTypes.any,
      // onClear: PropTypes.func,
      // onChange: PropTypes.func,
      // onPanelChange: PropTypes.func,
      disabledDate: VuePropTypes.func,
      disabledTime: VuePropTypes.any,
      dateRender: VuePropTypes.func,
      renderFooter: VuePropTypes.func.def(function () {
        return null;
      }),
      renderSidebar: VuePropTypes.func.def(function () {
        return null;
      }),
      clearIcon: VuePropTypes.any,
      focusablePanel: VuePropTypes.bool.def(true),
      inputMode: VuePropTypes.string,
      inputReadOnly: VuePropTypes.bool
    },

    mixins: [BaseMixin, CommonMixin, CalendarMixin],

    data: function data() {
      var props = this.$props;
      return {
        sMode: this.mode || 'date',
        sValue: getMomentObjectIfValid(props.value) || getMomentObjectIfValid(props.defaultValue) || moment(),
        sSelectedValue: props.selectedValue || props.defaultSelectedValue
      };
    },

    watch: {
      mode: function mode(val) {
        this.setState({ sMode: val });
      },
      value: function value(val) {
        this.setState({
          sValue: getMomentObjectIfValid(val) || getMomentObjectIfValid(this.defaultValue) || getNowByCurrentStateValue(this.sValue)
        });
      },
      selectedValue: function selectedValue(val) {
        this.setState({
          sSelectedValue: val
        });
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        _this.saveFocusElement(DateInput.getInstance());
      });
    },

    methods: {
      onPanelChange: function onPanelChange(value, mode) {
        var sValue = this.sValue;

        if (!hasProp(this, 'mode')) {
          this.setState({ sMode: mode });
        }
        this.__emit('panelChange', value || sValue, mode);
      },
      onKeyDown: function onKeyDown(event) {
        if (event.target.nodeName.toLowerCase() === 'input') {
          return undefined;
        }
        var keyCode = event.keyCode;
        // mac
        var ctrlKey = event.ctrlKey || event.metaKey;
        var disabledDate = this.disabledDate,
            value = this.sValue;

        switch (keyCode) {
          case KeyCode.DOWN:
            this.goTime(1, 'weeks');
            event.preventDefault();
            return 1;
          case KeyCode.UP:
            this.goTime(-1, 'weeks');
            event.preventDefault();
            return 1;
          case KeyCode.LEFT:
            if (ctrlKey) {
              this.goTime(-1, 'years');
            } else {
              this.goTime(-1, 'days');
            }
            event.preventDefault();
            return 1;
          case KeyCode.RIGHT:
            if (ctrlKey) {
              this.goTime(1, 'years');
            } else {
              this.goTime(1, 'days');
            }
            event.preventDefault();
            return 1;
          case KeyCode.HOME:
            this.setValue(goStartMonth(value));
            event.preventDefault();
            return 1;
          case KeyCode.END:
            this.setValue(goEndMonth(value));
            event.preventDefault();
            return 1;
          case KeyCode.PAGE_DOWN:
            this.goTime(1, 'month');
            event.preventDefault();
            return 1;
          case KeyCode.PAGE_UP:
            this.goTime(-1, 'month');
            event.preventDefault();
            return 1;
          case KeyCode.ENTER:
            if (!disabledDate || !disabledDate(value)) {
              this.onSelect(value, {
                source: 'keyboard'
              });
            }
            event.preventDefault();
            return 1;
          default:
            this.__emit('keydown', event);
            return 1;
        }
      },
      onClear: function onClear() {
        this.onSelect(null);
        this.__emit('clear');
      },
      onOk: function onOk() {
        var sSelectedValue = this.sSelectedValue;

        if (this.isAllowedDate(sSelectedValue)) {
          this.__emit('ok', sSelectedValue);
        }
      },
      onDateInputChange: function onDateInputChange(value) {
        this.onSelect(value, {
          source: 'dateInput'
        });
      },
      onDateInputSelect: function onDateInputSelect(value) {
        this.onSelect(value, {
          source: 'dateInputSelect'
        });
      },
      onDateTableSelect: function onDateTableSelect(value) {
        var timePicker = this.timePicker,
            sSelectedValue = this.sSelectedValue;

        if (!sSelectedValue && timePicker) {
          var timePickerProps = getOptionProps(timePicker);
          var timePickerDefaultValue = timePickerProps.defaultValue;
          if (timePickerDefaultValue) {
            syncTime(timePickerDefaultValue, value);
          }
        }
        this.onSelect(value);
      },
      onToday: function onToday() {
        var sValue = this.sValue;

        var now = getTodayTime(sValue);
        this.onSelect(now, {
          source: 'todayButton'
        });
      },
      onBlur: function onBlur(event) {
        var _this2 = this;

        setTimeout(function () {
          var dateInput = DateInput.getInstance();
          var rootInstance = _this2.rootInstance;

          if (!rootInstance || rootInstance.contains(document.activeElement) || dateInput && dateInput.contains(document.activeElement)) {
            // focused element is still part of Calendar
            return;
          }

          _this2.$emit('blur', event);
        }, 0);
      },
      getRootDOMNode: function getRootDOMNode() {
        return this.$el;
      },
      openTimePicker: function openTimePicker() {
        this.onPanelChange(null, 'time');
      },
      closeTimePicker: function closeTimePicker() {
        this.onPanelChange(null, 'date');
      },
      goTime: function goTime$1(direction, unit) {
        this.setValue(goTime(this.sValue, direction, unit));
      }
    },

    render: function render() {
      var h = arguments[0];
      var locale = this.locale,
          prefixCls = this.prefixCls,
          disabledDate = this.disabledDate,
          dateInputPlaceholder = this.dateInputPlaceholder,
          timePicker = this.timePicker,
          disabledTime = this.disabledTime,
          showDateInput = this.showDateInput,
          sValue = this.sValue,
          sSelectedValue = this.sSelectedValue,
          sMode = this.sMode,
          renderFooter = this.renderFooter,
          inputMode = this.inputMode,
          inputReadOnly = this.inputReadOnly,
          monthCellRender = this.monthCellRender,
          monthCellContentRender = this.monthCellContentRender,
          props = this.$props;

      var clearIcon = getComponentFromProp(this, 'clearIcon');
      var showTimePicker = sMode === 'time';
      var disabledTimeConfig = showTimePicker && disabledTime && timePicker ? getTimeConfig(sSelectedValue, disabledTime) : null;

      var timePickerEle = null;

      if (timePicker && showTimePicker) {
        var timePickerOriginProps = getOptionProps(timePicker);
        var timePickerProps = {
          props: _extends$1({
            showHour: true,
            showSecond: true,
            showMinute: true
          }, timePickerOriginProps, disabledTimeConfig, {
            value: sSelectedValue,
            disabledTime: disabledTime
          }),
          on: {
            change: this.onDateInputChange
          }
        };

        if (timePickerOriginProps.defaultValue !== undefined) {
          timePickerProps.props.defaultOpenValue = timePickerOriginProps.defaultValue;
        }
        timePickerEle = cloneElement(timePicker, timePickerProps);
      }

      var dateInputElement = showDateInput ? h(DateInput, {
        attrs: {
          format: this.getFormat(),

          value: sValue,
          locale: locale,
          placeholder: dateInputPlaceholder,
          showClear: true,
          disabledTime: disabledTime,
          disabledDate: disabledDate,

          prefixCls: prefixCls,
          selectedValue: sSelectedValue,

          clearIcon: clearIcon,

          inputMode: inputMode,
          inputReadOnly: inputReadOnly
        },
        key: 'date-input', on: {
          'clear': this.onClear,
          'change': this.onDateInputChange,
          'select': this.onDateInputSelect
        }
      }) : null;
      var children = [];
      if (props.renderSidebar) {
        children.push(props.renderSidebar());
      }
      children.push(h(
        'div',
        { 'class': prefixCls + '-panel', key: 'panel' },
        [dateInputElement, h(
          'div',
          {
            attrs: { tabIndex: props.focusablePanel ? 0 : undefined },
            'class': prefixCls + '-date-panel' },
          [h(CalendarHeader$1, {
            attrs: {
              locale: locale,
              mode: sMode,
              value: sValue,

              renderFooter: renderFooter,
              showTimePicker: showTimePicker,
              prefixCls: prefixCls,
              monthCellRender: monthCellRender,
              monthCellContentRender: monthCellContentRender
            },
            on: {
              'valueChange': this.setValue,
              'panelChange': this.onPanelChange
            }
          }), timePicker && showTimePicker ? h(
            'div',
            { 'class': prefixCls + '-time-picker' },
            [h(
              'div',
              { 'class': prefixCls + '-time-picker-panel' },
              [timePickerEle]
            )]
          ) : null, h(
            'div',
            { 'class': prefixCls + '-body' },
            [h(DateTable, {
              attrs: {
                locale: locale,
                value: sValue,
                selectedValue: sSelectedValue,
                prefixCls: prefixCls,
                dateRender: props.dateRender,

                disabledDate: disabledDate,
                showWeekNumber: props.showWeekNumber
              },
              on: {
                'select': this.onDateTableSelect
              }
            })]
          ), h(CalendarFooter, {
            attrs: {
              showOk: props.showOk,
              mode: sMode,
              renderFooter: props.renderFooter,
              locale: locale,
              prefixCls: prefixCls,
              showToday: props.showToday,
              disabledTime: disabledTime,
              showTimePicker: showTimePicker,
              showDateInput: props.showDateInput,
              timePicker: timePicker,
              selectedValue: sSelectedValue,
              timePickerDisabled: !sSelectedValue,
              value: sValue,
              disabledDate: disabledDate,
              okDisabled: props.showOk !== false && (!sSelectedValue || !this.isAllowedDate(sSelectedValue))
            },
            on: {
              'ok': this.onOk,
              'select': this.onSelect,
              'today': this.onToday,
              'openTimePicker': this.openTimePicker,
              'closeTimePicker': this.closeTimePicker
            }
          })]
        )]
      ));

      return this.renderRoot({
        children: children,
        'class': props.showWeekNumber ? prefixCls + '-week-number' : ''
      });
    }
  };

  // based on rc-calendar 9.15.10

  Vue.use(ref$1, { name: 'ant-ref' });

  var MonthCalendar = {
    name: 'MonthCalendar',
    props: {
      locale: VuePropTypes.object.def(enUs),
      format: VuePropTypes.string,
      visible: VuePropTypes.bool.def(true),
      prefixCls: VuePropTypes.string.def('rc-calendar'),
      monthCellRender: VuePropTypes.func,
      value: VuePropTypes.object,
      defaultValue: VuePropTypes.object,
      selectedValue: VuePropTypes.object,
      defaultSelectedValue: VuePropTypes.object,
      disabledDate: VuePropTypes.func,
      monthCellContentRender: VuePropTypes.func,
      renderFooter: VuePropTypes.func.def(function () {
        return null;
      }),
      renderSidebar: VuePropTypes.func.def(function () {
        return null;
      })
    },
    mixins: [BaseMixin, CommonMixin, CalendarMixin],

    data: function data() {
      var props = this.$props;
      return {
        mode: 'month',
        sValue: props.value || props.defaultValue || moment(),
        sSelectedValue: props.selectedValue || props.defaultSelectedValue
      };
    },

    methods: {
      onKeyDown: function onKeyDown(event) {
        var keyCode = event.keyCode;
        var ctrlKey = event.ctrlKey || event.metaKey;
        var stateValue = this.sValue;
        var disabledDate = this.disabledDate;

        var value = stateValue;
        switch (keyCode) {
          case KeyCode.DOWN:
            value = stateValue.clone();
            value.add(3, 'months');
            break;
          case KeyCode.UP:
            value = stateValue.clone();
            value.add(-3, 'months');
            break;
          case KeyCode.LEFT:
            value = stateValue.clone();
            if (ctrlKey) {
              value.add(-1, 'years');
            } else {
              value.add(-1, 'months');
            }
            break;
          case KeyCode.RIGHT:
            value = stateValue.clone();
            if (ctrlKey) {
              value.add(1, 'years');
            } else {
              value.add(1, 'months');
            }
            break;
          case KeyCode.ENTER:
            if (!disabledDate || !disabledDate(stateValue)) {
              this.onSelect(stateValue);
            }
            event.preventDefault();
            return 1;
          default:
            return undefined;
        }
        if (value !== stateValue) {
          this.setValue(value);
          event.preventDefault();
          return 1;
        }
      },
      handlePanelChange: function handlePanelChange(_, mode) {
        if (mode !== 'date') {
          this.setState({ mode: mode });
        }
      }
    },

    render: function render() {
      var h = arguments[0];
      var mode = this.mode,
          value = this.sValue,
          props = this.$props,
          $scopedSlots = this.$scopedSlots;
      var prefixCls = props.prefixCls,
          locale = props.locale,
          disabledDate = props.disabledDate;

      var monthCellRender = this.monthCellRender || $scopedSlots.monthCellRender;
      var monthCellContentRender = this.monthCellContentRender || $scopedSlots.monthCellContentRender;
      var renderFooter = this.renderFooter || $scopedSlots.renderFooter;
      var children = h(
        'div',
        { 'class': prefixCls + '-month-calendar-content' },
        [h(
          'div',
          { 'class': prefixCls + '-month-header-wrap' },
          [h(CalendarHeader$1, {
            attrs: {
              prefixCls: prefixCls,
              mode: mode,
              value: value,
              locale: locale,
              disabledMonth: disabledDate,
              monthCellRender: monthCellRender,
              monthCellContentRender: monthCellContentRender
            },
            on: {
              'monthSelect': this.onSelect,
              'valueChange': this.setValue,
              'panelChange': this.handlePanelChange
            }
          })]
        ), h(CalendarFooter, {
          attrs: { prefixCls: prefixCls, renderFooter: renderFooter }
        })]
      );
      return this.renderRoot({
        'class': props.prefixCls + '-month-calendar',
        children: children
      });
    }
  };

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  var _arrayMap = arrayMap;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    if (isArray_1(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
        value == null || isSymbol_1(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
      (object != null && value in Object(object));
  }

  var _isKey = isKey;

  /** Error message constants. */
  var FUNC_ERROR_TEXT$1 = 'Expected a function';

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize(func, resolver) {
    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }
    var memoized = function() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize.Cache || _MapCache);
    return memoized;
  }

  // Expose `MapCache`.
  memoize.Cache = _MapCache;

  var memoize_1 = memoize;

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */
  function memoizeCapped(func) {
    var result = memoize_1(func, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });

    var cache = result.cache;
    return result;
  }

  var _memoizeCapped = memoizeCapped;

  /** Used to match property names within property paths. */
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath = _memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */) {
      result.push('');
    }
    string.replace(rePropName, function(match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
    });
    return result;
  });

  var _stringToPath = stringToPath;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
      symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray_1(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return _arrayMap(value, baseToString) + '';
    }
    if (isSymbol_1(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }

  var _baseToString = baseToString;

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString$5(value) {
    return value == null ? '' : _baseToString(value);
  }

  var toString_1 = toString$5;

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath(value, object) {
    if (isArray_1(value)) {
      return value;
    }
    return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
  }

  var _castPath = castPath;

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */
  function last$1(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  var last_1 = last$1;

  /** Used as references for various `Number` constants. */
  var INFINITY$1 = 1 / 0;

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey(value) {
    if (typeof value == 'string' || isSymbol_1(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
  }

  var _toKey = toKey;

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path) {
    path = _castPath(path, object);

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[_toKey(path[index++])];
    }
    return (index && index == length) ? object : undefined;
  }

  var _baseGet = baseGet;

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : ((end - start) >>> 0);
    start >>>= 0;

    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }

  var _baseSlice = baseSlice;

  /**
   * Gets the parent value at `path` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path to get the parent value of.
   * @returns {*} Returns the parent value.
   */
  function parent(object, path) {
    return path.length < 2 ? object : _baseGet(object, _baseSlice(path, 0, -1));
  }

  var _parent = parent;

  /**
   * The base implementation of `_.unset`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The property path to unset.
   * @returns {boolean} Returns `true` if the property is deleted, else `false`.
   */
  function baseUnset(object, path) {
    path = _castPath(path, object);
    object = _parent(object, path);
    return object == null || delete object[_toKey(last_1(path))];
  }

  var _baseUnset = baseUnset;

  /**
   * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
   * objects.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {string} key The key of the property to inspect.
   * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
   */
  function customOmitClone(value) {
    return isPlainObject_1(value) ? undefined : value;
  }

  var _customOmitClone = customOmitClone;

  /** Built-in value references. */
  var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;

  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */
  function isFlattenable(value) {
    return isArray_1(value) || isArguments_1(value) ||
      !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  var _isFlattenable = isFlattenable;

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;

    predicate || (predicate = _isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          _arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }

  var _baseFlatten = baseFlatten;

  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */
  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? _baseFlatten(array, 1) : [];
  }

  var flatten_1 = flatten;

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  var _apply = apply;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$1 = Math.max;

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest(func, start, transform) {
    start = nativeMax$1(start === undefined ? (func.length - 1) : start, 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax$1(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return _apply(func, this, otherArgs);
    };
  }

  var _overRest = overRest;

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant(value) {
    return function() {
      return value;
    };
  }

  var constant_1 = constant;

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity$1(value) {
    return value;
  }

  var identity_1 = identity$1;

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString = !_defineProperty$2 ? identity_1 : function(func, string) {
    return _defineProperty$2(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant_1(string),
      'writable': true
    });
  };

  var _baseSetToString = baseSetToString;

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeNow = Date.now;

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut(func) {
    var count = 0,
        lastCalled = 0;

    return function() {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);

      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }

  var _shortOut = shortOut;

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString = _shortOut(_baseSetToString);

  var _setToString = setToString;

  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */
  function flatRest(func) {
    return _setToString(_overRest(func, undefined, flatten_1), func + '');
  }

  var _flatRest = flatRest;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$2 = 1,
      CLONE_FLAT_FLAG$1 = 2,
      CLONE_SYMBOLS_FLAG$2 = 4;

  /**
   * The opposite of `_.pick`; this method creates an object composed of the
   * own and inherited enumerable property paths of `object` that are not omitted.
   *
   * **Note:** This method is considerably slower than `_.pick`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to omit.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.omit(object, ['a', 'c']);
   * // => { 'b': '2' }
   */
  var omit$1 = _flatRest(function(object, paths) {
    var result = {};
    if (object == null) {
      return result;
    }
    var isDeep = false;
    paths = _arrayMap(paths, function(path) {
      path = _castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    _copyObject(object, _getAllKeysIn(object), result);
    if (isDeep) {
      result = _baseClone(result, CLONE_DEEP_FLAG$2 | CLONE_FLAT_FLAG$1 | CLONE_SYMBOLS_FLAG$2, _customOmitClone);
    }
    var length = paths.length;
    while (length--) {
      _baseUnset(result, paths[length]);
    }
    return result;
  });

  var omit_1 = omit$1;

  /**
   * Safe chained function
   *
   * Will only create a new function if needed,
   * otherwise will pass back existing functions or null.
   *
   * @returns {function|null}
   */
  function createChainedFunction() {
    var args = [].slice.call(arguments, 0);
    if (args.length === 1) {
      return args[0];
    }

    return function chainedFunction() {
      for (var i = 0; i < args.length; i++) {
        if (args[i] && args[i].apply) {
          args[i].apply(this, arguments);
        }
      }
    };
  }

  var autoAdjustOverflow$3 = {
    adjustX: 1,
    adjustY: 1
  };

  var targetOffset$3 = [0, 0];

  var placements$3 = {
    bottomLeft: {
      points: ['tl', 'tl'],
      overflow: autoAdjustOverflow$3,
      offset: [0, -3],
      targetOffset: targetOffset$3
    },
    bottomRight: {
      points: ['tr', 'tr'],
      overflow: autoAdjustOverflow$3,
      offset: [0, -3],
      targetOffset: targetOffset$3
    },
    topRight: {
      points: ['br', 'br'],
      overflow: autoAdjustOverflow$3,
      offset: [0, 3],
      targetOffset: targetOffset$3
    },
    topLeft: {
      points: ['bl', 'bl'],
      overflow: autoAdjustOverflow$3,
      offset: [0, 3],
      targetOffset: targetOffset$3
    }
  };

  var TimeType$1 = {
    validator: function validator(value) {
      if (Array.isArray(value)) {
        return value.length === 0 || value.findIndex(function (val) {
          return !isNil_1(val) && !moment.isMoment(val);
        }) === -1;
      } else {
        return isNil_1(value) || moment.isMoment(value);
      }
    }
  };
  var Picker = {
    name: 'Picker',
    props: {
      animation: VuePropTypes.oneOfType([VuePropTypes.func, VuePropTypes.string]),
      disabled: VuePropTypes.bool,
      transitionName: VuePropTypes.string,
      format: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.array, VuePropTypes.func]),
      // onChange: PropTypes.func,
      // onOpenChange: PropTypes.func,
      children: VuePropTypes.func,
      getCalendarContainer: VuePropTypes.func,
      calendar: VuePropTypes.any,
      open: VuePropTypes.bool,
      defaultOpen: VuePropTypes.bool.def(false),
      prefixCls: VuePropTypes.string.def('rc-calendar-picker'),
      placement: VuePropTypes.any.def('bottomLeft'),
      value: TimeType$1,
      defaultValue: TimeType$1,
      align: VuePropTypes.object.def(function () {
        return {};
      }),
      dropdownClassName: VuePropTypes.string,
      dateRender: VuePropTypes.func
    },
    mixins: [BaseMixin],

    data: function data() {
      var props = this.$props;
      var open = void 0;
      if (hasProp(this, 'open')) {
        open = props.open;
      } else {
        open = props.defaultOpen;
      }
      var value = props.value || props.defaultValue;
      return {
        sOpen: open,
        sValue: value
      };
    },

    watch: {
      value: function value(val) {
        this.setState({
          sValue: val
        });
      },
      open: function open(val) {
        this.setState({
          sOpen: val
        });
      }
    },
    mounted: function mounted() {
      this.preSOpen = this.sOpen;
    },
    updated: function updated() {
      if (!this.preSOpen && this.sOpen) {
        // setTimeout is for making sure saveCalendarRef happen before focusCalendar
        this.focusTimeout = setTimeout(this.focusCalendar, 0);
      }
      this.preSOpen = this.sOpen;
    },
    beforeDestroy: function beforeDestroy() {
      clearTimeout(this.focusTimeout);
    },

    methods: {
      onCalendarKeyDown: function onCalendarKeyDown(event) {
        if (event.keyCode === KeyCode.ESC) {
          event.stopPropagation();
          this.closeCalendar(this.focus);
        }
      },
      onCalendarSelect: function onCalendarSelect(value) {
        var cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var props = this.$props;
        if (!hasProp(this, 'value')) {
          this.setState({
            sValue: value
          });
        }
        var calendarProps = getOptionProps(props.calendar);
        if (cause.source === 'keyboard' || cause.source === 'dateInputSelect' || !calendarProps.timePicker && cause.source !== 'dateInput' || cause.source === 'todayButton') {
          this.closeCalendar(this.focus);
        }
        this.__emit('change', value);
      },
      onKeyDown: function onKeyDown(event) {
        if (!this.sOpen && (event.keyCode === KeyCode.DOWN || event.keyCode === KeyCode.ENTER)) {
          this.openCalendar();
          event.preventDefault();
        }
      },
      onCalendarOk: function onCalendarOk() {
        this.closeCalendar(this.focus);
      },
      onCalendarClear: function onCalendarClear() {
        this.closeCalendar(this.focus);
      },
      onCalendarBlur: function onCalendarBlur() {
        this.setOpen(false);
      },
      onVisibleChange: function onVisibleChange(open) {
        this.setOpen(open);
      },
      getCalendarElement: function getCalendarElement() {
        var props = this.$props;
        var calendarProps = getOptionProps(props.calendar);
        var calendarEvents = getEvents(props.calendar);
        var value = this.sValue;

        var defaultValue = value;
        var extraProps = {
          ref: 'calendarInstance',
          props: {
            defaultValue: defaultValue || calendarProps.defaultValue,
            selectedValue: value
          },
          on: {
            keydown: this.onCalendarKeyDown,
            ok: createChainedFunction(calendarEvents.ok, this.onCalendarOk),
            select: createChainedFunction(calendarEvents.select, this.onCalendarSelect),
            clear: createChainedFunction(calendarEvents.clear, this.onCalendarClear),
            blur: createChainedFunction(calendarEvents.blur, this.onCalendarBlur)
          }
        };

        return cloneElement(props.calendar, extraProps);
      },
      setOpen: function setOpen(open, callback) {
        if (this.sOpen !== open) {
          if (!hasProp(this, 'open')) {
            this.setState({
              sOpen: open
            }, callback);
          }
          this.__emit('openChange', open);
        }
      },
      openCalendar: function openCalendar(callback) {
        this.setOpen(true, callback);
      },
      closeCalendar: function closeCalendar(callback) {
        this.setOpen(false, callback);
      },
      focus: function focus() {
        if (!this.sOpen) {
          this.$el.focus();
        }
      },
      focusCalendar: function focusCalendar() {
        if (this.sOpen && this.calendarInstance && this.calendarInstance.componentInstance) {
          this.calendarInstance.componentInstance.focus();
        }
      }
    },

    render: function render() {
      var h = arguments[0];

      var props = getOptionProps(this);
      var style = getStyle(this);
      var prefixCls = props.prefixCls,
          placement = props.placement,
          getCalendarContainer = props.getCalendarContainer,
          align = props.align,
          animation = props.animation,
          disabled = props.disabled,
          dropdownClassName = props.dropdownClassName,
          transitionName = props.transitionName;
      var sValue = this.sValue,
          sOpen = this.sOpen;

      var children = this.$scopedSlots['default'];
      var childrenState = {
        value: sValue,
        open: sOpen
      };
      if (this.sOpen || !this.calendarInstance) {
        this.calendarInstance = this.getCalendarElement();
      }

      return h(
        Trigger,
        {
          attrs: {
            popupAlign: align,
            builtinPlacements: placements$3,
            popupPlacement: placement,
            action: disabled && !sOpen ? [] : ['click'],
            destroyPopupOnHide: true,
            getPopupContainer: getCalendarContainer,
            popupStyle: style,
            popupAnimation: animation,
            popupTransitionName: transitionName,
            popupVisible: sOpen,

            prefixCls: prefixCls,
            popupClassName: dropdownClassName
          },
          on: {
            'popupVisibleChange': this.onVisibleChange
          }
        },
        [h(
          'template',
          { slot: 'popup' },
          [this.calendarInstance]
        ), cloneElement(children(childrenState, props), { on: { keydown: this.onKeyDown } })]
      );
    }
  };

  function formatDate$1(value, format) {
    if (!value) {
      return '';
    }
    if (Array.isArray(format)) {
      format = format[0];
    }
    if (typeof format === 'function') {
      var result = format(value);
      if (typeof result === 'string') {
        return result;
      } else {
        throw new Error('The function of format does not return a string');
      }
    }
    return value.format(format);
  }

  // export const PickerProps = {
  //   value?: moment.Moment;
  //   prefixCls: string;
  // }
  function noop$t() {}
  function createPicker(TheCalendar, props) {
    return {
      props: initDefaultProps(props, {
        allowClear: true,
        showToday: true
      }),
      mixins: [BaseMixin],
      model: {
        prop: 'value',
        event: 'change'
      },
      inject: {
        configProvider: { 'default': function _default() {
            return ConfigConsumerProps;
          } }
      },
      data: function data() {
        var value = this.value || this.defaultValue;
        if (value && !interopDefault(moment$1).isMoment(value)) {
          throw new Error('The value/defaultValue of DatePicker or MonthPicker must be ' + 'a moment object');
        }
        return {
          sValue: value,
          showDate: value,
          _open: !!this.open
        };
      },

      watch: {
        open: function open(val) {
          var props = getOptionProps(this);
          var state = {};
          state._open = val;
          if ('value' in props && !val && props.value !== this.showDate) {
            state.showDate = props.value;
          }
          this.setState(state);
        },
        value: function value(val) {
          var state = {};
          state.sValue = val;
          if (val !== this.sValue) {
            state.showDate = val;
          }
          this.setState(state);
        },
        _open: function _open(val, oldVal) {
          var _this = this;

          this.$nextTick(function () {
            if (!hasProp(_this, 'open') && oldVal && !val) {
              _this.focus();
            }
          });
        }
      },
      methods: {
        clearSelection: function clearSelection(e) {
          e.preventDefault();
          e.stopPropagation();
          this.handleChange(null);
        },
        handleChange: function handleChange(value) {
          if (!hasProp(this, 'value')) {
            this.setState({
              sValue: value,
              showDate: value
            });
          }
          this.$emit('change', value, formatDate$1(value, this.format));
        },
        handleCalendarChange: function handleCalendarChange(value) {
          this.setState({ showDate: value });
        },
        handleOpenChange: function handleOpenChange(open) {
          var props = getOptionProps(this);
          if (!('open' in props)) {
            this.setState({ _open: open });
          }
          this.$emit('openChange', open);
        },
        focus: function focus() {
          this.$refs.input.focus();
        },
        blur: function blur() {
          this.$refs.input.blur();
        },
        renderFooter: function renderFooter() {
          var h = this.$createElement;
          var $scopedSlots = this.$scopedSlots,
              $slots = this.$slots,
              prefixCls = this._prefixCls;

          var renderExtraFooter = this.renderExtraFooter || $scopedSlots.renderExtraFooter || $slots.renderExtraFooter;
          return renderExtraFooter ? h(
            'div',
            { 'class': prefixCls + '-footer-extra' },
            [typeof renderExtraFooter === 'function' ? renderExtraFooter.apply(undefined, arguments) : renderExtraFooter]
          ) : null;
        },
        onMouseEnter: function onMouseEnter(e) {
          this.$emit('mouseenter', e);
        },
        onMouseLeave: function onMouseLeave(e) {
          this.$emit('mouseleave', e);
        }
      },

      render: function render() {
        var _classNames,
            _this2 = this;

        var h = arguments[0];
        var $scopedSlots = this.$scopedSlots;
        var _$data = this.$data,
            value = _$data.sValue,
            showDate = _$data.showDate,
            open = _$data._open;

        var suffixIcon = getComponentFromProp(this, 'suffixIcon');
        suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
        var listeners = getListeners(this);
        var _listeners$panelChang = listeners.panelChange,
            panelChange = _listeners$panelChang === undefined ? noop$t : _listeners$panelChang,
            _listeners$focus = listeners.focus,
            focus = _listeners$focus === undefined ? noop$t : _listeners$focus,
            _listeners$blur = listeners.blur,
            blur = _listeners$blur === undefined ? noop$t : _listeners$blur,
            _listeners$ok = listeners.ok,
            ok = _listeners$ok === undefined ? noop$t : _listeners$ok;

        var props = getOptionProps(this);

        var customizePrefixCls = props.prefixCls,
            locale = props.locale,
            localeCode = props.localeCode,
            inputReadOnly = props.inputReadOnly;

        var getPrefixCls = this.configProvider.getPrefixCls;
        var prefixCls = getPrefixCls('calendar', customizePrefixCls);
        this._prefixCls = prefixCls;

        var dateRender = props.dateRender || $scopedSlots.dateRender;
        var monthCellContentRender = props.monthCellContentRender || $scopedSlots.monthCellContentRender;
        var placeholder = 'placeholder' in props ? props.placeholder : locale.lang.placeholder;

        var disabledTime = props.showTime ? props.disabledTime : null;

        var calendarClassName = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-time', props.showTime), _defineProperty(_classNames, prefixCls + '-month', MonthCalendar === TheCalendar), _classNames));

        if (value && localeCode) {
          value.locale(localeCode);
        }

        var pickerProps = { props: {}, on: {} };
        var calendarProps = { props: {}, on: {} };
        var pickerStyle = {};
        if (props.showTime) {
          // fix https://github.com/ant-design/ant-design/issues/1902
          calendarProps.on.select = this.handleChange;
          pickerStyle.minWidth = '195px';
        } else {
          pickerProps.on.change = this.handleChange;
        }
        if ('mode' in props) {
          calendarProps.props.mode = props.mode;
        }
        var theCalendarProps = mergeProps(calendarProps, {
          props: {
            disabledDate: props.disabledDate,
            disabledTime: disabledTime,
            locale: locale.lang,
            timePicker: props.timePicker,
            defaultValue: props.defaultPickerValue || interopDefault(moment$1)(),
            dateInputPlaceholder: placeholder,
            prefixCls: prefixCls,
            dateRender: dateRender,
            format: props.format,
            showToday: props.showToday,
            monthCellContentRender: monthCellContentRender,
            renderFooter: this.renderFooter,
            value: showDate,
            inputReadOnly: inputReadOnly
          },
          on: {
            ok: ok,
            panelChange: panelChange,
            change: this.handleCalendarChange
          },
          'class': calendarClassName,
          scopedSlots: $scopedSlots
        });
        var calendar = h(TheCalendar, theCalendarProps);

        var clearIcon = !props.disabled && props.allowClear && value ? h(Icon$1, {
          attrs: {
            type: 'close-circle',

            theme: 'filled'
          },
          'class': prefixCls + '-picker-clear',
          on: {
            'click': this.clearSelection
          }
        }) : null;

        var inputIcon = suffixIcon && (isValidElement(suffixIcon) ? cloneElement(suffixIcon, {
          'class': prefixCls + '-picker-icon'
        }) : h(
          'span',
          { 'class': prefixCls + '-picker-icon' },
          [suffixIcon]
        )) || h(Icon$1, {
          attrs: { type: 'calendar' },
          'class': prefixCls + '-picker-icon' });

        var input = function input(_ref) {
          var inputValue = _ref.value;
          return h('div', [h('input', {
            ref: 'input',
            attrs: { disabled: props.disabled,

              readOnly: true,

              placeholder: placeholder,

              tabIndex: props.tabIndex,
              name: _this2.name
            },
            on: {
              'focus': focus,
              'blur': blur
            },
            domProps: {
              'value': formatDate$1(inputValue, _this2.format)
            },
            'class': props.pickerInputClass }), clearIcon, inputIcon]);
        };
        var vcDatePickerProps = {
          props: _extends$1({}, props, pickerProps.props, {
            calendar: calendar,
            value: value,
            prefixCls: prefixCls + '-picker-container'
          }),
          on: _extends$1({}, omit_1(listeners, 'change'), pickerProps.on, {
            open: open,
            onOpenChange: this.handleOpenChange
          }),
          style: props.popupStyle,
          scopedSlots: _extends$1({ 'default': input }, $scopedSlots)
        };
        return h(
          'span',
          {
            'class': props.pickerClass,
            style: pickerStyle
            // tabIndex={props.disabled ? -1 : 0}
            // onFocus={focus}
            // onBlur={blur}
            , on: {
              'mouseenter': this.onMouseEnter,
              'mouseleave': this.onMouseLeave
            }
          },
          [h(Picker, vcDatePickerProps)]
        );
      }
    };
  }

  var Header$1 = {
    mixins: [BaseMixin],
    props: {
      format: VuePropTypes.string,
      prefixCls: VuePropTypes.string,
      disabledDate: VuePropTypes.func,
      placeholder: VuePropTypes.string,
      clearText: VuePropTypes.string,
      value: VuePropTypes.object,
      inputReadOnly: VuePropTypes.bool.def(false),
      hourOptions: VuePropTypes.array,
      minuteOptions: VuePropTypes.array,
      secondOptions: VuePropTypes.array,
      disabledHours: VuePropTypes.func,
      disabledMinutes: VuePropTypes.func,
      disabledSeconds: VuePropTypes.func,
      // onChange: PropTypes.func,
      // onClear: PropTypes.func,
      // onEsc: PropTypes.func,
      allowEmpty: VuePropTypes.bool,
      defaultOpenValue: VuePropTypes.object,
      currentSelectPanel: VuePropTypes.string,
      focusOnOpen: VuePropTypes.bool,
      // onKeyDown: PropTypes.func,
      clearIcon: VuePropTypes.any
    },
    data: function data() {
      var value = this.value,
          format = this.format;

      return {
        str: value && value.format(format) || '',
        invalid: false
      };
    },
    mounted: function mounted() {
      var _this = this;

      if (this.focusOnOpen) {
        // Wait one frame for the panel to be positioned before focusing
        var requestAnimationFrame = window.requestAnimationFrame || window.setTimeout;
        requestAnimationFrame(function () {
          _this.$refs.input.focus();
          _this.$refs.input.select();
        });
      }
    },

    watch: {
      value: function value(val) {
        var _this2 = this;

        this.$nextTick(function () {
          _this2.setState({
            str: val && val.format(_this2.format) || '',
            invalid: false
          });
        });
      }
    },

    methods: {
      onInputChange: function onInputChange(e) {
        var _e$target = e.target,
            str = _e$target.value,
            composing = _e$target.composing;
        var _str = this.str,
            oldStr = _str === undefined ? '' : _str;

        if (e.isComposing || composing || oldStr === str) return;

        this.setState({
          str: str
        });
        var format = this.format,
            hourOptions = this.hourOptions,
            minuteOptions = this.minuteOptions,
            secondOptions = this.secondOptions,
            disabledHours = this.disabledHours,
            disabledMinutes = this.disabledMinutes,
            disabledSeconds = this.disabledSeconds,
            originalValue = this.value;


        if (str) {
          var value = this.getProtoValue().clone();
          var parsed = moment(str, format, true);
          if (!parsed.isValid()) {
            this.setState({
              invalid: true
            });
            return;
          }
          value.hour(parsed.hour()).minute(parsed.minute()).second(parsed.second());

          // if time value not allowed, response warning.
          if (hourOptions.indexOf(value.hour()) < 0 || minuteOptions.indexOf(value.minute()) < 0 || secondOptions.indexOf(value.second()) < 0) {
            this.setState({
              invalid: true
            });
            return;
          }

          // if time value is disabled, response warning.
          var disabledHourOptions = disabledHours();
          var disabledMinuteOptions = disabledMinutes(value.hour());
          var disabledSecondOptions = disabledSeconds(value.hour(), value.minute());
          if (disabledHourOptions && disabledHourOptions.indexOf(value.hour()) >= 0 || disabledMinuteOptions && disabledMinuteOptions.indexOf(value.minute()) >= 0 || disabledSecondOptions && disabledSecondOptions.indexOf(value.second()) >= 0) {
            this.setState({
              invalid: true
            });
            return;
          }

          if (originalValue) {
            if (originalValue.hour() !== value.hour() || originalValue.minute() !== value.minute() || originalValue.second() !== value.second()) {
              // keep other fields for rc-calendar
              var changedValue = originalValue.clone();
              changedValue.hour(value.hour());
              changedValue.minute(value.minute());
              changedValue.second(value.second());
              this.__emit('change', changedValue);
            }
          } else if (originalValue !== value) {
            this.__emit('change', value);
          }
        } else {
          this.__emit('change', null);
        }

        this.setState({
          invalid: false
        });
      },
      onKeyDown: function onKeyDown(e) {
        if (e.keyCode === 27) {
          this.__emit('esc');
        }
        this.__emit('keydown', e);
      },
      getProtoValue: function getProtoValue() {
        return this.value || this.defaultOpenValue;
      },
      getInput: function getInput() {
        var h = this.$createElement;
        var prefixCls = this.prefixCls,
            placeholder = this.placeholder,
            inputReadOnly = this.inputReadOnly,
            invalid = this.invalid,
            str = this.str;

        var invalidClass = invalid ? prefixCls + '-input-invalid' : '';
        return h('input', babelHelperVueJsxMergeProps([{
          'class': prefixCls + '-input ' + invalidClass,
          ref: 'input',
          on: {
            'keydown': this.onKeyDown,
            'input': this.onInputChange
          },
          domProps: {
            'value': str
          },
          attrs: {
            placeholder: placeholder,

            readOnly: !!inputReadOnly
          }
        }, {
          directives: [{
            name: 'ant-input'
          }]
        }]));
      }
    },

    render: function render() {
      var h = arguments[0];
      var prefixCls = this.prefixCls;

      return h(
        'div',
        { 'class': prefixCls + '-input-wrap' },
        [this.getInput()]
      );
    }
  };

  function noop$u() {}
  var scrollTo$1 = function scrollTo(element, to, duration) {
    // jump to target if duration zero
    if (duration <= 0) {
      raf_1(function () {
        element.scrollTop = to;
      });
      return;
    }
    var difference = to - element.scrollTop;
    var perTick = difference / duration * 10;

    raf_1(function () {
      element.scrollTop += perTick;
      if (element.scrollTop === to) return;
      scrollTo(element, to, duration - 10);
    });
  };

  var Select$2 = {
    mixins: [BaseMixin],
    props: {
      prefixCls: VuePropTypes.string,
      options: VuePropTypes.array,
      selectedIndex: VuePropTypes.number,
      type: VuePropTypes.string
      // onSelect: PropTypes.func,
      // onMouseEnter: PropTypes.func,
    },
    data: function data() {
      return {
        active: false
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        // jump to selected option
        _this.scrollToSelected(0);
      });
    },

    watch: {
      selectedIndex: function selectedIndex() {
        var _this2 = this;

        this.$nextTick(function () {
          // smooth scroll to selected option
          _this2.scrollToSelected(120);
        });
      }
    },
    methods: {
      onSelect: function onSelect(value) {
        var type = this.type;

        this.__emit('select', type, value);
      },
      onEsc: function onEsc(e) {
        this.__emit('esc', e);
      },
      getOptions: function getOptions() {
        var _this3 = this;

        var h = this.$createElement;
        var options = this.options,
            selectedIndex = this.selectedIndex,
            prefixCls = this.prefixCls;

        return options.map(function (item, index) {
          var _classnames;

          var cls = classnames((_classnames = {}, _defineProperty(_classnames, prefixCls + '-select-option-selected', selectedIndex === index), _defineProperty(_classnames, prefixCls + '-select-option-disabled', item.disabled), _classnames));
          var onClick = item.disabled ? noop$u : function () {
            _this3.onSelect(item.value);
          };
          var onKeyDown = function onKeyDown(e) {
            if (e.keyCode === 13) onClick();else if (e.keyCode === 27) _this3.onEsc();
          };
          return h(
            'li',
            {
              attrs: {
                role: 'button',

                disabled: item.disabled,
                tabIndex: '0'
              },
              on: {
                'click': onClick,
                'keydown': onKeyDown
              },

              'class': cls,
              key: index },
            [item.value]
          );
        });
      },
      handleMouseEnter: function handleMouseEnter(e) {
        this.setState({ active: true });
        this.__emit('mouseenter', e);
      },
      handleMouseLeave: function handleMouseLeave() {
        this.setState({ active: false });
      },
      scrollToSelected: function scrollToSelected(duration) {
        // move to selected item
        var select = this.$el;
        var list = this.$refs.list;
        if (!list) {
          return;
        }
        var index = this.selectedIndex;
        if (index < 0) {
          index = 0;
        }
        var topOption = list.children[index];
        var to = topOption.offsetTop;
        scrollTo$1(select, to, duration);
      }
    },

    render: function render() {
      var _cls;

      var h = arguments[0];
      var prefixCls = this.prefixCls,
          options = this.options,
          active = this.active;

      if (options.length === 0) {
        return null;
      }

      var cls = (_cls = {}, _defineProperty(_cls, prefixCls + '-select', 1), _defineProperty(_cls, prefixCls + '-select-active', active), _cls);

      return h(
        'div',
        { 'class': cls, on: {
            'mouseenter': this.handleMouseEnter,
            'mouseleave': this.handleMouseLeave
          }
        },
        [h(
          'ul',
          { ref: 'list' },
          [this.getOptions()]
        )]
      );
    }
  };

  var formatOption = function formatOption(option, disabledOptions) {
    var value = '' + option;
    if (option < 10) {
      value = '0' + option;
    }

    var disabled = false;
    if (disabledOptions && disabledOptions.indexOf(option) >= 0) {
      disabled = true;
    }

    return {
      value: value,
      disabled: disabled
    };
  };

  var Combobox = {
    mixins: [BaseMixin],
    name: 'Combobox',
    props: {
      format: VuePropTypes.string,
      defaultOpenValue: VuePropTypes.object,
      prefixCls: VuePropTypes.string,
      value: VuePropTypes.object,
      // onChange: PropTypes.func,
      // onAmPmChange: PropTypes.func,
      showHour: VuePropTypes.bool,
      showMinute: VuePropTypes.bool,
      showSecond: VuePropTypes.bool,
      hourOptions: VuePropTypes.array,
      minuteOptions: VuePropTypes.array,
      secondOptions: VuePropTypes.array,
      disabledHours: VuePropTypes.func,
      disabledMinutes: VuePropTypes.func,
      disabledSeconds: VuePropTypes.func,
      // onCurrentSelectPanelChange: PropTypes.func,
      use12Hours: VuePropTypes.bool,
      isAM: VuePropTypes.bool
    },
    methods: {
      onItemChange: function onItemChange(type, itemValue) {
        var defaultOpenValue = this.defaultOpenValue,
            use12Hours = this.use12Hours,
            propValue = this.value,
            isAM = this.isAM;

        var value = (propValue || defaultOpenValue).clone();

        if (type === 'hour') {
          if (use12Hours) {
            if (isAM) {
              value.hour(+itemValue % 12);
            } else {
              value.hour(+itemValue % 12 + 12);
            }
          } else {
            value.hour(+itemValue);
          }
        } else if (type === 'minute') {
          value.minute(+itemValue);
        } else if (type === 'ampm') {
          var ampm = itemValue.toUpperCase();
          if (use12Hours) {
            if (ampm === 'PM' && value.hour() < 12) {
              value.hour(value.hour() % 12 + 12);
            }

            if (ampm === 'AM') {
              if (value.hour() >= 12) {
                value.hour(value.hour() - 12);
              }
            }
          }
          this.__emit('amPmChange', ampm);
        } else {
          value.second(+itemValue);
        }
        this.__emit('change', value);
      },
      onEnterSelectPanel: function onEnterSelectPanel(range) {
        this.__emit('currentSelectPanelChange', range);
      },
      onEsc: function onEsc(e) {
        this.__emit('esc', e);
      },
      getHourSelect: function getHourSelect(hour) {
        var _this = this;

        var h = this.$createElement;
        var prefixCls = this.prefixCls,
            hourOptions = this.hourOptions,
            disabledHours = this.disabledHours,
            showHour = this.showHour,
            use12Hours = this.use12Hours;

        if (!showHour) {
          return null;
        }
        var disabledOptions = disabledHours();
        var hourOptionsAdj = void 0;
        var hourAdj = void 0;
        if (use12Hours) {
          hourOptionsAdj = [12].concat(hourOptions.filter(function (h) {
            return h < 12 && h > 0;
          }));
          hourAdj = hour % 12 || 12;
        } else {
          hourOptionsAdj = hourOptions;
          hourAdj = hour;
        }

        return h(Select$2, {
          attrs: {
            prefixCls: prefixCls,
            options: hourOptionsAdj.map(function (option) {
              return formatOption(option, disabledOptions);
            }),
            selectedIndex: hourOptionsAdj.indexOf(hourAdj),
            type: 'hour'
          },
          on: {
            'select': this.onItemChange,
            'mouseenter': function mouseenter() {
              return _this.onEnterSelectPanel('hour');
            },
            'esc': this.onEsc
          }
        });
      },
      getMinuteSelect: function getMinuteSelect(minute) {
        var _this2 = this;

        var h = this.$createElement;
        var prefixCls = this.prefixCls,
            minuteOptions = this.minuteOptions,
            disabledMinutes = this.disabledMinutes,
            defaultOpenValue = this.defaultOpenValue,
            showMinute = this.showMinute,
            propValue = this.value;

        if (!showMinute) {
          return null;
        }
        var value = propValue || defaultOpenValue;
        var disabledOptions = disabledMinutes(value.hour());

        return h(Select$2, {
          attrs: {
            prefixCls: prefixCls,
            options: minuteOptions.map(function (option) {
              return formatOption(option, disabledOptions);
            }),
            selectedIndex: minuteOptions.indexOf(minute),
            type: 'minute'
          },
          on: {
            'select': this.onItemChange,
            'mouseenter': function mouseenter() {
              return _this2.onEnterSelectPanel('minute');
            },
            'esc': this.onEsc
          }
        });
      },
      getSecondSelect: function getSecondSelect(second) {
        var _this3 = this;

        var h = this.$createElement;
        var prefixCls = this.prefixCls,
            secondOptions = this.secondOptions,
            disabledSeconds = this.disabledSeconds,
            showSecond = this.showSecond,
            defaultOpenValue = this.defaultOpenValue,
            propValue = this.value;

        if (!showSecond) {
          return null;
        }
        var value = propValue || defaultOpenValue;
        var disabledOptions = disabledSeconds(value.hour(), value.minute());

        return h(Select$2, {
          attrs: {
            prefixCls: prefixCls,
            options: secondOptions.map(function (option) {
              return formatOption(option, disabledOptions);
            }),
            selectedIndex: secondOptions.indexOf(second),
            type: 'second'
          },
          on: {
            'select': this.onItemChange,
            'mouseenter': function mouseenter() {
              return _this3.onEnterSelectPanel('second');
            },
            'esc': this.onEsc
          }
        });
      },
      getAMPMSelect: function getAMPMSelect() {
        var _this4 = this;

        var h = this.$createElement;
        var prefixCls = this.prefixCls,
            use12Hours = this.use12Hours,
            format = this.format,
            isAM = this.isAM;

        if (!use12Hours) {
          return null;
        }

        var AMPMOptions = ['am', 'pm'] // If format has A char, then we should uppercase AM/PM
        .map(function (c) {
          return format.match(/\sA/) ? c.toUpperCase() : c;
        }).map(function (c) {
          return { value: c };
        });

        var selected = isAM ? 0 : 1;

        return h(Select$2, {
          attrs: {
            prefixCls: prefixCls,
            options: AMPMOptions,
            selectedIndex: selected,
            type: 'ampm'
          },
          on: {
            'select': this.onItemChange,
            'mouseenter': function mouseenter() {
              return _this4.onEnterSelectPanel('ampm');
            },
            'esc': this.onEsc
          }
        });
      }
    },

    render: function render() {
      var h = arguments[0];
      var prefixCls = this.prefixCls,
          defaultOpenValue = this.defaultOpenValue,
          propValue = this.value;

      var value = propValue || defaultOpenValue;
      return h(
        'div',
        { 'class': prefixCls + '-combobox' },
        [this.getHourSelect(value.hour()), this.getMinuteSelect(value.minute()), this.getSecondSelect(value.second()), this.getAMPMSelect(value.hour())]
      );
    }
  };

  function noop$v() {}

  function generateOptions(length, disabledOptions, hideDisabledOptions) {
    var step = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

    var arr = [];
    for (var value = 0; value < length; value += step) {
      if (!disabledOptions || disabledOptions.indexOf(value) < 0 || !hideDisabledOptions) {
        arr.push(value);
      }
    }
    return arr;
  }

  function toNearestValidTime(time, hourOptions, minuteOptions, secondOptions) {
    var hour = hourOptions.slice().sort(function (a, b) {
      return Math.abs(time.hour() - a) - Math.abs(time.hour() - b);
    })[0];
    var minute = minuteOptions.slice().sort(function (a, b) {
      return Math.abs(time.minute() - a) - Math.abs(time.minute() - b);
    })[0];
    var second = secondOptions.slice().sort(function (a, b) {
      return Math.abs(time.second() - a) - Math.abs(time.second() - b);
    })[0];
    return moment(hour + ':' + minute + ':' + second, 'HH:mm:ss');
  }

  var Panel = {
    mixins: [BaseMixin],
    props: {
      clearText: VuePropTypes.string,
      prefixCls: VuePropTypes.string.def('rc-time-picker-panel'),
      defaultOpenValue: {
        type: Object,
        'default': function _default() {
          return moment();
        }
      },
      value: VuePropTypes.any,
      defaultValue: VuePropTypes.any,
      placeholder: VuePropTypes.string,
      format: VuePropTypes.string,
      inputReadOnly: VuePropTypes.bool.def(false),
      disabledHours: VuePropTypes.func.def(noop$v),
      disabledMinutes: VuePropTypes.func.def(noop$v),
      disabledSeconds: VuePropTypes.func.def(noop$v),
      hideDisabledOptions: VuePropTypes.bool,
      // onChange: PropTypes.func,
      // onEsc: PropTypes.func,
      allowEmpty: VuePropTypes.bool,
      showHour: VuePropTypes.bool,
      showMinute: VuePropTypes.bool,
      showSecond: VuePropTypes.bool,
      // onClear: PropTypes.func,
      use12Hours: VuePropTypes.bool.def(false),
      hourStep: VuePropTypes.number,
      minuteStep: VuePropTypes.number,
      secondStep: VuePropTypes.number,
      addon: VuePropTypes.func.def(noop$v),
      focusOnOpen: VuePropTypes.bool,
      // onKeydown: PropTypes.func,
      clearIcon: VuePropTypes.any
    },
    data: function data() {
      return {
        sValue: this.value,
        selectionRange: [],
        currentSelectPanel: ''
      };
    },

    watch: {
      value: function value(val) {
        this.setState({
          sValue: val
        });
      }
    },

    methods: {
      onChange: function onChange(newValue) {
        this.setState({ sValue: newValue });
        this.__emit('change', newValue);
      },
      onAmPmChange: function onAmPmChange(ampm) {
        this.__emit('amPmChange', ampm);
      },
      onCurrentSelectPanelChange: function onCurrentSelectPanelChange(currentSelectPanel) {
        this.setState({ currentSelectPanel: currentSelectPanel });
      },


      // https://github.com/ant-design/ant-design/issues/5829
      close: function close() {
        this.__emit('esc');
      },
      onEsc: function onEsc(e) {
        this.__emit('esc', e);
      },
      disabledHours2: function disabledHours2() {
        var use12Hours = this.use12Hours,
            disabledHours = this.disabledHours;

        var disabledOptions = disabledHours();
        if (use12Hours && Array.isArray(disabledOptions)) {
          if (this.isAM()) {
            disabledOptions = disabledOptions.filter(function (h) {
              return h < 12;
            }).map(function (h) {
              return h === 0 ? 12 : h;
            });
          } else {
            disabledOptions = disabledOptions.map(function (h) {
              return h === 12 ? 12 : h - 12;
            });
          }
        }
        return disabledOptions;
      },
      isAM: function isAM() {
        var value = this.sValue || this.defaultOpenValue;
        return value.hour() >= 0 && value.hour() < 12;
      }
    },

    render: function render() {
      var h = arguments[0];
      var prefixCls = this.prefixCls,
          placeholder = this.placeholder,
          disabledMinutes = this.disabledMinutes,
          addon = this.addon,
          disabledSeconds = this.disabledSeconds,
          hideDisabledOptions = this.hideDisabledOptions,
          showHour = this.showHour,
          showMinute = this.showMinute,
          showSecond = this.showSecond,
          format = this.format,
          defaultOpenValue = this.defaultOpenValue,
          clearText = this.clearText,
          use12Hours = this.use12Hours,
          focusOnOpen = this.focusOnOpen,
          hourStep = this.hourStep,
          minuteStep = this.minuteStep,
          secondStep = this.secondStep,
          inputReadOnly = this.inputReadOnly,
          sValue = this.sValue,
          currentSelectPanel = this.currentSelectPanel;

      var clearIcon = getComponentFromProp(this, 'clearIcon');

      var _getListeners = getListeners(this),
          _getListeners$esc = _getListeners.esc,
          esc = _getListeners$esc === undefined ? noop$v : _getListeners$esc,
          _getListeners$keydown = _getListeners.keydown,
          keydown = _getListeners$keydown === undefined ? noop$v : _getListeners$keydown;

      var disabledHourOptions = this.disabledHours2();
      var disabledMinuteOptions = disabledMinutes(sValue ? sValue.hour() : null);
      var disabledSecondOptions = disabledSeconds(sValue ? sValue.hour() : null, sValue ? sValue.minute() : null);
      var hourOptions = generateOptions(24, disabledHourOptions, hideDisabledOptions, hourStep);
      var minuteOptions = generateOptions(60, disabledMinuteOptions, hideDisabledOptions, minuteStep);
      var secondOptions = generateOptions(60, disabledSecondOptions, hideDisabledOptions, secondStep);
      var validDefaultOpenValue = toNearestValidTime(defaultOpenValue, hourOptions, minuteOptions, secondOptions);
      return h(
        'div',
        { 'class': prefixCls + '-inner' },
        [h(Header$1, {
          attrs: {
            clearText: clearText,
            prefixCls: prefixCls,
            defaultOpenValue: validDefaultOpenValue,
            value: sValue,
            currentSelectPanel: currentSelectPanel,

            format: format,
            placeholder: placeholder,
            hourOptions: hourOptions,
            minuteOptions: minuteOptions,
            secondOptions: secondOptions,
            disabledHours: this.disabledHours2,
            disabledMinutes: disabledMinutes,
            disabledSeconds: disabledSeconds,

            focusOnOpen: focusOnOpen,

            inputReadOnly: inputReadOnly,
            clearIcon: clearIcon
          },
          on: {
            'esc': esc,
            'change': this.onChange,
            'keydown': keydown
          }
        }), h(Combobox, {
          attrs: {
            prefixCls: prefixCls,
            value: sValue,
            defaultOpenValue: validDefaultOpenValue,
            format: format,

            showHour: showHour,
            showMinute: showMinute,
            showSecond: showSecond,
            hourOptions: hourOptions,
            minuteOptions: minuteOptions,
            secondOptions: secondOptions,
            disabledHours: this.disabledHours2,
            disabledMinutes: disabledMinutes,
            disabledSeconds: disabledSeconds,

            use12Hours: use12Hours,

            isAM: this.isAM()
          },
          on: {
            'change': this.onChange,
            'amPmChange': this.onAmPmChange,
            'currentSelectPanelChange': this.onCurrentSelectPanelChange,
            'esc': this.onEsc
          }
        }), addon(this)]
      );
    }
  };

  var autoAdjustOverflow$4 = {
    adjustX: 1,
    adjustY: 1
  };

  var targetOffset$4 = [0, 0];

  var placements$4 = {
    bottomLeft: {
      points: ['tl', 'tl'],
      overflow: autoAdjustOverflow$4,
      offset: [0, -3],
      targetOffset: targetOffset$4
    },
    bottomRight: {
      points: ['tr', 'tr'],
      overflow: autoAdjustOverflow$4,
      offset: [0, -3],
      targetOffset: targetOffset$4
    },
    topRight: {
      points: ['br', 'br'],
      overflow: autoAdjustOverflow$4,
      offset: [0, 3],
      targetOffset: targetOffset$4
    },
    topLeft: {
      points: ['bl', 'bl'],
      overflow: autoAdjustOverflow$4,
      offset: [0, 3],
      targetOffset: targetOffset$4
    }
  };

  function noop$w() {}

  var VcTimePicker = {
    name: 'VcTimePicker',
    mixins: [BaseMixin],
    props: initDefaultProps({
      prefixCls: VuePropTypes.string,
      clearText: VuePropTypes.string,
      value: VuePropTypes.any,
      defaultOpenValue: {
        type: Object,
        'default': function _default() {
          return moment();
        }
      },
      inputReadOnly: VuePropTypes.bool,
      disabled: VuePropTypes.bool,
      allowEmpty: VuePropTypes.bool,
      defaultValue: VuePropTypes.any,
      open: VuePropTypes.bool,
      defaultOpen: VuePropTypes.bool,
      align: VuePropTypes.object,
      placement: VuePropTypes.any,
      transitionName: VuePropTypes.string,
      getPopupContainer: VuePropTypes.func,
      placeholder: VuePropTypes.string,
      format: VuePropTypes.string,
      showHour: VuePropTypes.bool,
      showMinute: VuePropTypes.bool,
      showSecond: VuePropTypes.bool,
      popupClassName: VuePropTypes.string,
      popupStyle: VuePropTypes.object,
      disabledHours: VuePropTypes.func,
      disabledMinutes: VuePropTypes.func,
      disabledSeconds: VuePropTypes.func,
      hideDisabledOptions: VuePropTypes.bool,
      // onChange: PropTypes.func,
      // onAmPmChange: PropTypes.func,
      // onOpen: PropTypes.func,
      // onClose: PropTypes.func,
      // onFocus: PropTypes.func,
      // onBlur: PropTypes.func,
      name: VuePropTypes.string,
      autoComplete: VuePropTypes.string,
      use12Hours: VuePropTypes.bool,
      hourStep: VuePropTypes.number,
      minuteStep: VuePropTypes.number,
      secondStep: VuePropTypes.number,
      focusOnOpen: VuePropTypes.bool,
      // onKeyDown: PropTypes.func,
      autoFocus: VuePropTypes.bool,
      id: VuePropTypes.string,
      inputIcon: VuePropTypes.any,
      clearIcon: VuePropTypes.any,
      addon: VuePropTypes.func
    }, {
      clearText: 'clear',
      prefixCls: 'rc-time-picker',
      defaultOpen: false,
      inputReadOnly: false,
      popupClassName: '',
      popupStyle: {},
      align: {},
      allowEmpty: true,
      showHour: true,
      showMinute: true,
      showSecond: true,
      disabledHours: noop$w,
      disabledMinutes: noop$w,
      disabledSeconds: noop$w,
      hideDisabledOptions: false,
      placement: 'bottomLeft',
      use12Hours: false,
      focusOnOpen: false
    }),
    data: function data() {
      var defaultOpen = this.defaultOpen,
          defaultValue = this.defaultValue,
          _open = this.open,
          open = _open === undefined ? defaultOpen : _open,
          _value = this.value,
          value = _value === undefined ? defaultValue : _value;

      return {
        sOpen: open,
        sValue: value
      };
    },


    watch: {
      value: function value(val) {
        this.setState({
          sValue: val
        });
      },
      open: function open(val) {
        if (val !== undefined) {
          this.setState({
            sOpen: val
          });
        }
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        if (_this.autoFocus) {
          _this.focus();
        }
      });
    },

    methods: {
      onPanelChange: function onPanelChange(value) {
        this.setValue(value);
      },
      onAmPmChange: function onAmPmChange(ampm) {
        this.__emit('amPmChange', ampm);
      },
      onClear: function onClear(event) {
        event.stopPropagation();
        this.setValue(null);
        this.setOpen(false);
      },
      onVisibleChange: function onVisibleChange(open) {
        this.setOpen(open);
      },
      onEsc: function onEsc() {
        this.setOpen(false);
        this.focus();
      },
      onKeyDown: function onKeyDown(e) {
        if (e.keyCode === 40) {
          this.setOpen(true);
        }
      },
      onKeyDown2: function onKeyDown2(e) {
        this.__emit('keydown', e);
      },
      setValue: function setValue(value) {
        if (!hasProp(this, 'value')) {
          this.setState({
            sValue: value
          });
        }
        this.__emit('change', value);
      },
      getFormat: function getFormat() {
        var format = this.format,
            showHour = this.showHour,
            showMinute = this.showMinute,
            showSecond = this.showSecond,
            use12Hours = this.use12Hours;

        if (format) {
          return format;
        }

        if (use12Hours) {
          var fmtString = [showHour ? 'h' : '', showMinute ? 'mm' : '', showSecond ? 'ss' : ''].filter(function (item) {
            return !!item;
          }).join(':');

          return fmtString.concat(' a');
        }

        return [showHour ? 'HH' : '', showMinute ? 'mm' : '', showSecond ? 'ss' : ''].filter(function (item) {
          return !!item;
        }).join(':');
      },
      getPanelElement: function getPanelElement() {
        var h = this.$createElement;
        var prefixCls = this.prefixCls,
            placeholder = this.placeholder,
            disabledHours = this.disabledHours,
            addon = this.addon,
            disabledMinutes = this.disabledMinutes,
            disabledSeconds = this.disabledSeconds,
            hideDisabledOptions = this.hideDisabledOptions,
            inputReadOnly = this.inputReadOnly,
            showHour = this.showHour,
            showMinute = this.showMinute,
            showSecond = this.showSecond,
            defaultOpenValue = this.defaultOpenValue,
            clearText = this.clearText,
            use12Hours = this.use12Hours,
            focusOnOpen = this.focusOnOpen,
            onKeyDown2 = this.onKeyDown2,
            hourStep = this.hourStep,
            minuteStep = this.minuteStep,
            secondStep = this.secondStep,
            sValue = this.sValue;

        var clearIcon = getComponentFromProp(this, 'clearIcon');
        return h(Panel, {
          attrs: {
            clearText: clearText,
            prefixCls: prefixCls + '-panel',

            value: sValue,
            inputReadOnly: inputReadOnly,

            defaultOpenValue: defaultOpenValue,
            showHour: showHour,
            showMinute: showMinute,
            showSecond: showSecond,

            format: this.getFormat(),
            placeholder: placeholder,
            disabledHours: disabledHours,
            disabledMinutes: disabledMinutes,
            disabledSeconds: disabledSeconds,
            hideDisabledOptions: hideDisabledOptions,
            use12Hours: use12Hours,
            hourStep: hourStep,
            minuteStep: minuteStep,
            secondStep: secondStep,
            focusOnOpen: focusOnOpen,

            clearIcon: clearIcon,
            addon: addon
          },
          ref: 'panel', on: {
            'change': this.onPanelChange,
            'amPmChange': this.onAmPmChange,
            'esc': this.onEsc,
            'keydown': onKeyDown2
          }
        });
      },
      getPopupClassName: function getPopupClassName() {
        var showHour = this.showHour,
            showMinute = this.showMinute,
            showSecond = this.showSecond,
            use12Hours = this.use12Hours,
            prefixCls = this.prefixCls,
            popupClassName = this.popupClassName;


        var selectColumnCount = 0;
        if (showHour) {
          selectColumnCount += 1;
        }
        if (showMinute) {
          selectColumnCount += 1;
        }
        if (showSecond) {
          selectColumnCount += 1;
        }
        if (use12Hours) {
          selectColumnCount += 1;
        }
        // Keep it for old compatibility
        return classnames(popupClassName, _defineProperty({}, prefixCls + '-panel-narrow', (!showHour || !showMinute || !showSecond) && !use12Hours), prefixCls + '-panel-column-' + selectColumnCount);
      },
      setOpen: function setOpen(open) {
        if (this.sOpen !== open) {
          if (!hasProp(this, 'open')) {
            this.setState({ sOpen: open });
          }
          if (open) {
            this.__emit('open', { open: open });
          } else {
            this.__emit('close', { open: open });
          }
        }
      },
      focus: function focus() {
        this.$refs.picker.focus();
      },
      blur: function blur() {
        this.$refs.picker.blur();
      },
      onFocus: function onFocus(e) {
        this.__emit('focus', e);
      },
      onBlur: function onBlur(e) {
        this.__emit('blur', e);
      },
      renderClearButton: function renderClearButton() {
        var _this2 = this;

        var h = this.$createElement;
        var sValue = this.sValue;
        var _$props = this.$props,
            prefixCls = _$props.prefixCls,
            allowEmpty = _$props.allowEmpty,
            clearText = _$props.clearText,
            disabled = _$props.disabled;

        if (!allowEmpty || !sValue || disabled) {
          return null;
        }
        var clearIcon = getComponentFromProp(this, 'clearIcon');
        if (isValidElement(clearIcon)) {
          var _ref = getEvents(clearIcon) || {},
              _click = _ref.click;

          return cloneElement(clearIcon, {
            on: {
              click: function click() {
                if (_click) _click.apply(undefined, arguments);
                _this2.onClear.apply(_this2, arguments);
              }
            }
          });
        }

        return h(
          'a',
          {
            attrs: {
              role: 'button',

              title: clearText,

              tabIndex: 0
            },
            'class': prefixCls + '-clear', on: {
              'click': this.onClear
            }
          },
          [clearIcon || h('i', { 'class': prefixCls + '-clear-icon' })]
        );
      }
    },

    render: function render() {
      var h = arguments[0];
      var prefixCls = this.prefixCls,
          placeholder = this.placeholder,
          placement = this.placement,
          align = this.align,
          id = this.id,
          disabled = this.disabled,
          transitionName = this.transitionName,
          getPopupContainer = this.getPopupContainer,
          name = this.name,
          autoComplete = this.autoComplete,
          autoFocus = this.autoFocus,
          inputReadOnly = this.inputReadOnly,
          sOpen = this.sOpen,
          sValue = this.sValue,
          onFocus = this.onFocus,
          onBlur = this.onBlur,
          popupStyle = this.popupStyle;

      var popupClassName = this.getPopupClassName();
      var inputIcon = getComponentFromProp(this, 'inputIcon');
      return h(
        Trigger,
        {
          attrs: {
            prefixCls: prefixCls + '-panel',
            popupClassName: popupClassName,
            popupStyle: popupStyle,
            popupAlign: align,
            builtinPlacements: placements$4,
            popupPlacement: placement,
            action: disabled ? [] : ['click'],
            destroyPopupOnHide: true,
            getPopupContainer: getPopupContainer,
            popupTransitionName: transitionName,
            popupVisible: sOpen
          },
          on: {
            'popupVisibleChange': this.onVisibleChange
          }
        },
        [h(
          'template',
          { slot: 'popup' },
          [this.getPanelElement()]
        ), h(
          'span',
          { 'class': '' + prefixCls },
          [h('input', {
            'class': prefixCls + '-input',
            ref: 'picker',
            attrs: { type: 'text',
              placeholder: placeholder,
              name: name,

              disabled: disabled,

              autoComplete: autoComplete,

              autoFocus: autoFocus,
              readOnly: !!inputReadOnly,
              id: id
            },
            on: {
              'keydown': this.onKeyDown,
              'focus': onFocus,
              'blur': onBlur
            },
            domProps: {
              'value': sValue && sValue.format(this.getFormat()) || ''
            }
          }), inputIcon || h('span', { 'class': prefixCls + '-icon' }), this.renderClearButton()]
        )]
      );
    }
  };

  function generateShowHourMinuteSecond(format) {
    // Ref: http://momentjs.com/docs/#/parsing/string-format/
    return {
      showHour: format.indexOf('H') > -1 || format.indexOf('h') > -1 || format.indexOf('k') > -1,
      showMinute: format.indexOf('m') > -1,
      showSecond: format.indexOf('s') > -1
    };
  }

  var TimePickerProps = function TimePickerProps() {
    return {
      size: VuePropTypes.oneOf(['large', 'default', 'small']),
      value: TimeOrTimesType,
      defaultValue: TimeOrTimesType,
      open: VuePropTypes.bool,
      format: VuePropTypes.string,
      disabled: VuePropTypes.bool,
      placeholder: VuePropTypes.string,
      prefixCls: VuePropTypes.string,
      hideDisabledOptions: VuePropTypes.bool,
      disabledHours: VuePropTypes.func,
      disabledMinutes: VuePropTypes.func,
      disabledSeconds: VuePropTypes.func,
      getPopupContainer: VuePropTypes.func,
      use12Hours: VuePropTypes.bool,
      focusOnOpen: VuePropTypes.bool,
      hourStep: VuePropTypes.number,
      minuteStep: VuePropTypes.number,
      secondStep: VuePropTypes.number,
      allowEmpty: VuePropTypes.bool,
      allowClear: VuePropTypes.bool,
      inputReadOnly: VuePropTypes.bool,
      clearText: VuePropTypes.string,
      defaultOpenValue: VuePropTypes.object,
      popupClassName: VuePropTypes.string,
      popupStyle: VuePropTypes.object,
      suffixIcon: VuePropTypes.any,
      align: VuePropTypes.object,
      placement: VuePropTypes.any,
      transitionName: VuePropTypes.string,
      autoFocus: VuePropTypes.bool,
      addon: VuePropTypes.any,
      clearIcon: VuePropTypes.any,
      locale: VuePropTypes.object,
      valueFormat: VuePropTypes.string
    };
  };

  var TimePicker = {
    name: 'ATimePicker',
    mixins: [BaseMixin],
    props: initDefaultProps(TimePickerProps(), {
      align: {
        offset: [0, -2]
      },
      disabled: false,
      disabledHours: undefined,
      disabledMinutes: undefined,
      disabledSeconds: undefined,
      hideDisabledOptions: false,
      placement: 'bottomLeft',
      transitionName: 'slide-up',
      focusOnOpen: true,
      allowClear: true
    }),
    model: {
      prop: 'value',
      event: 'change'
    },
    provide: function provide() {
      return {
        savePopupRef: this.savePopupRef
      };
    },

    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      var value = this.value,
          defaultValue = this.defaultValue,
          valueFormat = this.valueFormat;


      checkValidate('TimePicker', defaultValue, 'defaultValue', valueFormat);
      checkValidate('TimePicker', value, 'value', valueFormat);
      warning$1(!hasProp(this, 'allowEmpty'), 'TimePicker', '`allowEmpty` is deprecated. Please use `allowClear` instead.');
      return {
        sValue: stringToMoment(value || defaultValue, valueFormat)
      };
    },

    watch: {
      value: function value(val) {
        checkValidate('TimePicker', val, 'value', this.valueFormat);
        this.setState({ sValue: stringToMoment(val, this.valueFormat) });
      }
    },
    methods: {
      getDefaultFormat: function getDefaultFormat() {
        var format = this.format,
            use12Hours = this.use12Hours;

        if (format) {
          return format;
        } else if (use12Hours) {
          return 'h:mm:ss a';
        }
        return 'HH:mm:ss';
      },
      getAllowClear: function getAllowClear() {
        var _$props = this.$props,
            allowClear = _$props.allowClear,
            allowEmpty = _$props.allowEmpty;

        if (hasProp(this, 'allowClear')) {
          return allowClear;
        }
        return allowEmpty;
      },
      getDefaultLocale: function getDefaultLocale() {
        var defaultLocale = _extends$1({}, locale, this.$props.locale);
        return defaultLocale;
      },
      savePopupRef: function savePopupRef(ref) {
        this.popupRef = ref;
      },
      handleChange: function handleChange(value) {
        if (!hasProp(this, 'value')) {
          this.setState({ sValue: value });
        }
        var _format = this.format,
            format = _format === undefined ? 'HH:mm:ss' : _format;

        this.$emit('change', this.valueFormat ? momentToString(value, this.valueFormat) : value, value && value.format(format) || '');
      },
      handleOpenClose: function handleOpenClose(_ref) {
        var open = _ref.open;

        this.$emit('openChange', open);
        this.$emit('update:open', open);
      },
      focus: function focus() {
        this.$refs.timePicker.focus();
      },
      blur: function blur() {
        this.$refs.timePicker.blur();
      },
      renderInputIcon: function renderInputIcon(prefixCls) {
        var h = this.$createElement;

        var suffixIcon = getComponentFromProp(this, 'suffixIcon');
        suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
        var clockIcon = suffixIcon && isValidElement(suffixIcon) && cloneElement(suffixIcon, {
          'class': prefixCls + '-clock-icon'
        }) || h(Icon$1, {
          attrs: { type: 'clock-circle' },
          'class': prefixCls + '-clock-icon' });

        return h(
          'span',
          { 'class': prefixCls + '-icon' },
          [clockIcon]
        );
      },
      renderClearIcon: function renderClearIcon(prefixCls) {
        var h = this.$createElement;

        var clearIcon = getComponentFromProp(this, 'clearIcon');
        var clearIconPrefixCls = prefixCls + '-clear';

        if (clearIcon && isValidElement(clearIcon)) {
          return cloneElement(clearIcon, {
            'class': clearIconPrefixCls
          });
        }

        return h(Icon$1, {
          attrs: { type: 'close-circle', theme: 'filled' },
          'class': clearIconPrefixCls });
      },
      renderTimePicker: function renderTimePicker(locale) {
        var h = this.$createElement;

        var props = getOptionProps(this);
        props = omit(props, ['defaultValue', 'suffixIcon', 'allowEmpty', 'allowClear']);

        var _props = props,
            customizePrefixCls = _props.prefixCls,
            getPopupContainer = _props.getPopupContainer,
            placeholder = _props.placeholder,
            size = _props.size;

        var getPrefixCls = this.configProvider.getPrefixCls;
        var prefixCls = getPrefixCls('time-picker', customizePrefixCls);

        var format = this.getDefaultFormat();
        var pickerClassName = _defineProperty({}, prefixCls + '-' + size, !!size);
        var tempAddon = getComponentFromProp(this, 'addon', {}, false);
        var pickerAddon = function pickerAddon(panel) {
          return tempAddon ? h(
            'div',
            { 'class': prefixCls + '-panel-addon' },
            [typeof tempAddon === 'function' ? tempAddon(panel) : tempAddon]
          ) : null;
        };
        var inputIcon = this.renderInputIcon(prefixCls);
        var clearIcon = this.renderClearIcon(prefixCls);
        var getContextPopupContainer = this.configProvider.getPopupContainer;

        var timeProps = {
          props: _extends$1({}, generateShowHourMinuteSecond(format), props, {
            allowEmpty: this.getAllowClear(),
            prefixCls: prefixCls,
            getPopupContainer: getPopupContainer || getContextPopupContainer,
            format: format,
            value: this.sValue,
            placeholder: placeholder === undefined ? locale.placeholder : placeholder,
            addon: pickerAddon,
            inputIcon: inputIcon,
            clearIcon: clearIcon
          }),
          'class': pickerClassName,
          ref: 'timePicker',
          on: _extends$1({}, getListeners(this), {
            change: this.handleChange,
            open: this.handleOpenClose,
            close: this.handleOpenClose
          })
        };
        return h(VcTimePicker, timeProps);
      }
    },

    render: function render() {
      var h = arguments[0];

      return h(LocaleReceiver, {
        attrs: {
          componentName: 'TimePicker',
          defaultLocale: this.getDefaultLocale()
        },
        scopedSlots: { 'default': this.renderTimePicker }
      });
    }
  };

  /* istanbul ignore next */
  TimePicker.install = function (Vue) {
    Vue.use(base);
    Vue.component(TimePicker.name, TimePicker);
  };

  var DEFAULT_FORMAT = {
    date: 'YYYY-MM-DD',
    dateTime: 'YYYY-MM-DD HH:mm:ss',
    week: 'gggg-wo',
    month: 'YYYY-MM'
  };

  var LOCALE_FORMAT_MAPPING = {
    date: 'dateFormat',
    dateTime: 'dateTimeFormat',
    week: 'weekFormat',
    month: 'monthFormat'
  };

  function getColumns(_ref) {
    var showHour = _ref.showHour,
        showMinute = _ref.showMinute,
        showSecond = _ref.showSecond,
        use12Hours = _ref.use12Hours;

    var column = 0;
    if (showHour) {
      column += 1;
    }
    if (showMinute) {
      column += 1;
    }
    if (showSecond) {
      column += 1;
    }
    if (use12Hours) {
      column += 1;
    }
    return column;
  }

  function wrapPicker(Picker, props, pickerType) {
    return {
      name: Picker.name,
      props: initDefaultProps(props, {
        transitionName: 'slide-up',
        popupStyle: {},
        locale: {}
      }),
      model: {
        prop: 'value',
        event: 'change'
      },
      inject: {
        configProvider: { 'default': function _default() {
            return ConfigConsumerProps;
          } }
      },
      provide: function provide() {
        return {
          savePopupRef: this.savePopupRef
        };
      },
      mounted: function mounted() {
        var _this = this;

        var autoFocus = this.autoFocus,
            disabled = this.disabled,
            value = this.value,
            defaultValue = this.defaultValue,
            valueFormat = this.valueFormat;

        checkValidate('DatePicker', defaultValue, 'defaultValue', valueFormat);
        checkValidate('DatePicker', value, 'value', valueFormat);
        if (autoFocus && !disabled) {
          this.$nextTick(function () {
            _this.focus();
          });
        }
      },

      watch: {
        value: function value(val) {
          checkValidate('DatePicker', val, 'value', this.valueFormat);
        }
      },
      methods: {
        getDefaultLocale: function getDefaultLocale() {
          var result = _extends$1({}, locale$1, this.locale);
          result.lang = _extends$1({}, result.lang, (this.locale || {}).lang);
          return result;
        },
        savePopupRef: function savePopupRef(ref) {
          this.popupRef = ref;
        },
        handleOpenChange: function handleOpenChange(open) {
          this.$emit('openChange', open);
        },
        handleFocus: function handleFocus(e) {
          this.$emit('focus', e);
        },
        handleBlur: function handleBlur(e) {
          this.$emit('blur', e);
        },
        handleMouseEnter: function handleMouseEnter(e) {
          this.$emit('mouseenter', e);
        },
        handleMouseLeave: function handleMouseLeave(e) {
          this.$emit('mouseleave', e);
        },
        handleChange: function handleChange(date, dateString) {
          this.$emit('change', this.valueFormat ? momentToString(date, this.valueFormat) : date, dateString);
        },
        handleOk: function handleOk(val) {
          this.$emit('ok', this.valueFormat ? momentToString(val, this.valueFormat) : val);
        },
        handleCalendarChange: function handleCalendarChange(date, dateString) {
          this.$emit('calendarChange', this.valueFormat ? momentToString(date, this.valueFormat) : date, dateString);
        },
        focus: function focus() {
          this.$refs.picker.focus();
        },
        blur: function blur() {
          this.$refs.picker.blur();
        },
        transformValue: function transformValue(props) {
          if ('value' in props) {
            props.value = stringToMoment(props.value, this.valueFormat);
          }
          if ('defaultValue' in props) {
            props.defaultValue = stringToMoment(props.defaultValue, this.valueFormat);
          }
          if ('defaultPickerValue' in props) {
            props.defaultPickerValue = stringToMoment(props.defaultPickerValue, this.valueFormat);
          }
        },
        renderPicker: function renderPicker(locale, localeCode) {
          var _classNames2,
              _this2 = this;

          var h = this.$createElement;

          var props = getOptionProps(this);
          this.transformValue(props);
          var customizePrefixCls = props.prefixCls,
              customizeInputPrefixCls = props.inputPrefixCls,
              getCalendarContainer = props.getCalendarContainer,
              size = props.size,
              showTime = props.showTime,
              disabled = props.disabled,
              format = props.format;

          var mergedPickerType = showTime ? pickerType + 'Time' : pickerType;
          var mergedFormat = format || locale[LOCALE_FORMAT_MAPPING[mergedPickerType]] || DEFAULT_FORMAT[mergedPickerType];

          var _configProvider = this.configProvider,
              getPrefixCls = _configProvider.getPrefixCls,
              getContextPopupContainer = _configProvider.getPopupContainer;

          var getPopupContainer = getCalendarContainer || getContextPopupContainer;
          var prefixCls = getPrefixCls('calendar', customizePrefixCls);
          var inputPrefixCls = getPrefixCls('input', customizeInputPrefixCls);

          var pickerClass = classnames(prefixCls + '-picker', _defineProperty({}, prefixCls + '-picker-' + size, !!size));
          var pickerInputClass = classnames(prefixCls + '-picker-input', inputPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, inputPrefixCls + '-lg', size === 'large'), _defineProperty(_classNames2, inputPrefixCls + '-sm', size === 'small'), _defineProperty(_classNames2, inputPrefixCls + '-disabled', disabled), _classNames2));

          var timeFormat = showTime && showTime.format || 'HH:mm:ss';
          var vcTimePickerProps = _extends$1({}, generateShowHourMinuteSecond(timeFormat), {
            format: timeFormat,
            use12Hours: showTime && showTime.use12Hours
          });
          var columns = getColumns(vcTimePickerProps);
          var timePickerCls = prefixCls + '-time-picker-column-' + columns;
          var timePickerPanelProps = {
            props: _extends$1({}, vcTimePickerProps, showTime, {
              prefixCls: prefixCls + '-time-picker',
              placeholder: locale.timePickerLocale.placeholder,
              transitionName: 'slide-up'
            }),
            'class': timePickerCls,
            on: {
              esc: function esc() {}
            }
          };
          var timePicker = showTime ? h(Panel, timePickerPanelProps) : null;
          var pickerProps = {
            props: _extends$1({}, props, {
              getCalendarContainer: getPopupContainer,
              format: mergedFormat,
              pickerClass: pickerClass,
              pickerInputClass: pickerInputClass,
              locale: locale,
              localeCode: localeCode,
              timePicker: timePicker
            }),
            on: _extends$1({}, getListeners(this), {
              openChange: this.handleOpenChange,
              focus: this.handleFocus,
              blur: this.handleBlur,
              mouseenter: this.handleMouseEnter,
              mouseleave: this.handleMouseLeave,
              change: this.handleChange,
              ok: this.handleOk,
              calendarChange: this.handleCalendarChange
            }),
            ref: 'picker',
            scopedSlots: this.$scopedSlots || {}
          };
          return h(
            Picker,
            pickerProps,
            [this.$slots && Object.keys(this.$slots).map(function (key) {
              return h(
                'template',
                { slot: key, key: key },
                [_this2.$slots[key]]
              );
            })]
          );
        }
      },

      render: function render() {
        var h = arguments[0];

        return h(LocaleReceiver, {
          attrs: {
            componentName: 'DatePicker',
            defaultLocale: this.getDefaultLocale
          },
          scopedSlots: { 'default': this.renderPicker }
        });
      }
    };
  }

  function noop$x() {}
  var CalendarPart = {
    mixins: [BaseMixin],
    props: {
      prefixCls: VuePropTypes.string,
      value: VuePropTypes.any,
      hoverValue: VuePropTypes.any,
      selectedValue: VuePropTypes.any,
      direction: VuePropTypes.any,
      locale: VuePropTypes.any,
      showDateInput: VuePropTypes.bool,
      showTimePicker: VuePropTypes.bool,
      showWeekNumber: VuePropTypes.bool,
      format: VuePropTypes.any,
      placeholder: VuePropTypes.any,
      disabledDate: VuePropTypes.any,
      timePicker: VuePropTypes.any,
      disabledTime: VuePropTypes.any,
      disabledMonth: VuePropTypes.any,
      mode: VuePropTypes.any,
      // onInputSelect: PropTypes.func,
      timePickerDisabledTime: VuePropTypes.object,
      enableNext: VuePropTypes.any,
      enablePrev: VuePropTypes.any,
      clearIcon: VuePropTypes.any,
      dateRender: VuePropTypes.func,
      inputMode: VuePropTypes.string,
      inputReadOnly: VuePropTypes.bool
    },
    render: function render() {
      var h = arguments[0];
      var props = this.$props;
      var prefixCls = props.prefixCls,
          value = props.value,
          hoverValue = props.hoverValue,
          selectedValue = props.selectedValue,
          mode = props.mode,
          direction = props.direction,
          locale = props.locale,
          format = props.format,
          placeholder = props.placeholder,
          disabledDate = props.disabledDate,
          timePicker = props.timePicker,
          disabledTime = props.disabledTime,
          timePickerDisabledTime = props.timePickerDisabledTime,
          showTimePicker = props.showTimePicker,
          enablePrev = props.enablePrev,
          enableNext = props.enableNext,
          disabledMonth = props.disabledMonth,
          showDateInput = props.showDateInput,
          dateRender = props.dateRender,
          showWeekNumber = props.showWeekNumber,
          showClear = props.showClear,
          inputMode = props.inputMode,
          inputReadOnly = props.inputReadOnly;

      var clearIcon = getComponentFromProp(this, 'clearIcon');

      var _getListeners = getListeners(this),
          _getListeners$inputCh = _getListeners.inputChange,
          inputChange = _getListeners$inputCh === undefined ? noop$x : _getListeners$inputCh,
          _getListeners$inputSe = _getListeners.inputSelect,
          inputSelect = _getListeners$inputSe === undefined ? noop$x : _getListeners$inputSe,
          _getListeners$valueCh = _getListeners.valueChange,
          valueChange = _getListeners$valueCh === undefined ? noop$x : _getListeners$valueCh,
          _getListeners$panelCh = _getListeners.panelChange,
          panelChange = _getListeners$panelCh === undefined ? noop$x : _getListeners$panelCh,
          _getListeners$select = _getListeners.select,
          select = _getListeners$select === undefined ? noop$x : _getListeners$select,
          _getListeners$dayHove = _getListeners.dayHover,
          dayHover = _getListeners$dayHove === undefined ? noop$x : _getListeners$dayHove;

      var shouldShowTimePicker = showTimePicker && timePicker;
      var disabledTimeConfig = shouldShowTimePicker && disabledTime ? getTimeConfig(selectedValue, disabledTime) : null;
      var rangeClassName = prefixCls + '-range';
      var newProps = {
        locale: locale,
        value: value,
        prefixCls: prefixCls,
        showTimePicker: showTimePicker
      };
      var index = direction === 'left' ? 0 : 1;
      var timePickerEle = null;
      if (shouldShowTimePicker) {
        var timePickerProps = getOptionProps(timePicker);
        timePickerEle = cloneElement(timePicker, {
          props: _extends$1({
            showHour: true,
            showMinute: true,
            showSecond: true
          }, timePickerProps, disabledTimeConfig, timePickerDisabledTime, {
            defaultOpenValue: value,
            value: selectedValue[index]
          }),
          on: {
            change: inputChange
          }
        });
      }

      var dateInputElement = showDateInput && h(DateInput, {
        attrs: {
          format: format,
          locale: locale,
          prefixCls: prefixCls,
          timePicker: timePicker,
          disabledDate: disabledDate,
          placeholder: placeholder,
          disabledTime: disabledTime,
          value: value,
          showClear: showClear || false,
          selectedValue: selectedValue[index],

          clearIcon: clearIcon,
          inputMode: inputMode,
          inputReadOnly: inputReadOnly
        },
        on: {
          'change': inputChange,
          'select': inputSelect
        }
      });
      var headerProps = {
        props: _extends$1({}, newProps, {
          mode: mode,
          enableNext: enableNext,
          enablePrev: enablePrev,
          disabledMonth: disabledMonth
        }),
        on: {
          valueChange: valueChange,
          panelChange: panelChange
        }
      };
      var tableProps = {
        props: _extends$1({}, newProps, {
          hoverValue: hoverValue,
          selectedValue: selectedValue,
          dateRender: dateRender,
          disabledDate: disabledDate,
          showWeekNumber: showWeekNumber
        }),
        on: {
          select: select,
          dayHover: dayHover
        }
      };
      return h(
        'div',
        { 'class': rangeClassName + '-part ' + rangeClassName + '-' + direction },
        [dateInputElement, h(
          'div',
          { style: { outline: 'none' } },
          [h(CalendarHeader$1, headerProps), showTimePicker ? h(
            'div',
            { 'class': prefixCls + '-time-picker' },
            [h(
              'div',
              { 'class': prefixCls + '-time-picker-panel' },
              [timePickerEle]
            )]
          ) : null, h(
            'div',
            { 'class': prefixCls + '-body' },
            [h(DateTable, tableProps)]
          )]
        )]
      );
    }
  };

  function noop$y() {}

  function isEmptyArray(arr) {
    return Array.isArray(arr) && (arr.length === 0 || arr.every(function (i) {
      return !i;
    }));
  }

  function isArraysEqual(a, b) {
    if (a === b) return true;
    if (a === null || typeof a === 'undefined' || b === null || typeof b === 'undefined') {
      return false;
    }
    if (a.length !== b.length) return false;

    for (var i = 0; i < a.length; ++i) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }

  function getValueFromSelectedValue(selectedValue) {
    var _selectedValue = _slicedToArray(selectedValue, 2),
        start = _selectedValue[0],
        end = _selectedValue[1];

    if (end && (start === undefined || start === null)) {
      start = end.clone().subtract(1, 'month');
    }

    if (start && (end === undefined || end === null)) {
      end = start.clone().add(1, 'month');
    }
    return [start, end];
  }

  function normalizeAnchor(props, init) {
    var selectedValue = props.selectedValue || init && props.defaultSelectedValue;
    var value = props.value || init && props.defaultValue;
    var normalizedValue = value ? getValueFromSelectedValue(value) : getValueFromSelectedValue(selectedValue);
    return !isEmptyArray(normalizedValue) ? normalizedValue : init && [moment(), moment().add(1, 'months')];
  }

  function generateOptions$1(length, extraOptionGen) {
    var arr = extraOptionGen ? extraOptionGen().concat() : [];
    for (var value = 0; value < length; value++) {
      if (arr.indexOf(value) === -1) {
        arr.push(value);
      }
    }
    return arr;
  }

  function onInputSelect(direction, value, cause) {
    if (!value) {
      return;
    }
    var originalValue = this.sSelectedValue;
    var selectedValue = originalValue.concat();
    var index = direction === 'left' ? 0 : 1;
    selectedValue[index] = value;
    if (selectedValue[0] && this.compare(selectedValue[0], selectedValue[1]) > 0) {
      selectedValue[1 - index] = this.sShowTimePicker ? selectedValue[index] : undefined;
    }
    this.__emit('inputSelect', selectedValue);
    this.fireSelectValueChange(selectedValue, null, cause || { source: 'dateInput' });
  }

  var RangeCalendar = {
    props: {
      locale: VuePropTypes.object.def(enUs),
      visible: VuePropTypes.bool.def(true),
      prefixCls: VuePropTypes.string.def('rc-calendar'),
      dateInputPlaceholder: VuePropTypes.any,
      seperator: VuePropTypes.string.def('~'),
      defaultValue: VuePropTypes.any,
      value: VuePropTypes.any,
      hoverValue: VuePropTypes.any,
      mode: VuePropTypes.arrayOf(VuePropTypes.oneOf(['time', 'date', 'month', 'year', 'decade'])),
      showDateInput: VuePropTypes.bool.def(true),
      timePicker: VuePropTypes.any,
      showOk: VuePropTypes.bool,
      showToday: VuePropTypes.bool.def(true),
      defaultSelectedValue: VuePropTypes.array.def([]),
      selectedValue: VuePropTypes.array,
      showClear: VuePropTypes.bool,
      showWeekNumber: VuePropTypes.bool,
      // locale: PropTypes.object,
      // onChange: PropTypes.func,
      // onSelect: PropTypes.func,
      // onValueChange: PropTypes.func,
      // onHoverChange: PropTypes.func,
      // onPanelChange: PropTypes.func,
      format: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.arrayOf(VuePropTypes.string), VuePropTypes.func]),
      // onClear: PropTypes.func,
      type: VuePropTypes.any.def('both'),
      disabledDate: VuePropTypes.func,
      disabledTime: VuePropTypes.func.def(noop$y),
      renderFooter: VuePropTypes.func.def(function () {
        return null;
      }),
      renderSidebar: VuePropTypes.func.def(function () {
        return null;
      }),
      dateRender: VuePropTypes.func,
      clearIcon: VuePropTypes.any,
      inputReadOnly: VuePropTypes.bool
    },

    mixins: [BaseMixin, CommonMixin],

    data: function data() {
      var props = this.$props;
      var selectedValue = props.selectedValue || props.defaultSelectedValue;
      var value = normalizeAnchor(props, 1);
      return {
        sSelectedValue: selectedValue,
        prevSelectedValue: selectedValue,
        firstSelectedValue: null,
        sHoverValue: props.hoverValue || [],
        sValue: value,
        sShowTimePicker: false,
        sMode: props.mode || ['date', 'date'],
        sPanelTriggerSource: '' // Trigger by which picker panel: 'start' & 'end'
      };
    },

    watch: {
      value: function value() {
        var newState = {};
        newState.sValue = normalizeAnchor(this.$props, 0);
        this.setState(newState);
      },
      hoverValue: function hoverValue(val) {
        if (!isArraysEqual(this.sHoverValue, val)) {
          this.setState({ sHoverValue: val });
        }
      },
      selectedValue: function selectedValue(val) {
        var newState = {};
        newState.sSelectedValue = val;
        newState.prevSelectedValue = val;
        this.setState(newState);
      },
      mode: function mode(val) {
        if (!isArraysEqual(this.sMode, val)) {
          this.setState({ sMode: val });
        }
      }
    },

    methods: {
      onDatePanelEnter: function onDatePanelEnter() {
        if (this.hasSelectedValue()) {
          this.fireHoverValueChange(this.sSelectedValue.concat());
        }
      },
      onDatePanelLeave: function onDatePanelLeave() {
        if (this.hasSelectedValue()) {
          this.fireHoverValueChange([]);
        }
      },
      onSelect: function onSelect(value) {
        var type = this.type,
            sSelectedValue = this.sSelectedValue,
            prevSelectedValue = this.prevSelectedValue,
            firstSelectedValue = this.firstSelectedValue;

        var nextSelectedValue = void 0;
        if (type === 'both') {
          if (!firstSelectedValue) {
            syncTime(prevSelectedValue[0], value);
            nextSelectedValue = [value];
          } else if (this.compare(firstSelectedValue, value) < 0) {
            syncTime(prevSelectedValue[1], value);
            nextSelectedValue = [firstSelectedValue, value];
          } else {
            syncTime(prevSelectedValue[0], value);
            syncTime(prevSelectedValue[1], firstSelectedValue);
            nextSelectedValue = [value, firstSelectedValue];
          }
        } else if (type === 'start') {
          syncTime(prevSelectedValue[0], value);
          var endValue = sSelectedValue[1];
          nextSelectedValue = endValue && this.compare(endValue, value) > 0 ? [value, endValue] : [value];
        } else {
          // type === 'end'
          var startValue = sSelectedValue[0];
          if (startValue && this.compare(startValue, value) <= 0) {
            syncTime(prevSelectedValue[1], value);
            nextSelectedValue = [startValue, value];
          } else {
            syncTime(prevSelectedValue[0], value);
            nextSelectedValue = [value];
          }
        }

        this.fireSelectValueChange(nextSelectedValue);
      },
      onKeyDown: function onKeyDown(event) {
        var _this = this;

        if (event.target.nodeName.toLowerCase() === 'input') {
          return;
        }

        var keyCode = event.keyCode;

        var ctrlKey = event.ctrlKey || event.metaKey;

        var _$data = this.$data,
            selectedValue = _$data.sSelectedValue,
            hoverValue = _$data.sHoverValue,
            firstSelectedValue = _$data.firstSelectedValue,
            value = _$data.sValue;
        var disabledDate = this.$props.disabledDate;

        // Update last time of the picker

        var updateHoverPoint = function updateHoverPoint(func) {
          // Change hover to make focus in UI
          var currentHoverTime = void 0;
          var nextHoverTime = void 0;
          var nextHoverValue = void 0;

          if (!firstSelectedValue) {
            currentHoverTime = hoverValue[0] || selectedValue[0] || value[0] || moment();
            nextHoverTime = func(currentHoverTime);
            nextHoverValue = [nextHoverTime];
            _this.fireHoverValueChange(nextHoverValue);
          } else {
            if (hoverValue.length === 1) {
              currentHoverTime = hoverValue[0].clone();
              nextHoverTime = func(currentHoverTime);
              nextHoverValue = _this.onDayHover(nextHoverTime);
            } else {
              currentHoverTime = hoverValue[0].isSame(firstSelectedValue, 'day') ? hoverValue[1] : hoverValue[0];
              nextHoverTime = func(currentHoverTime);
              nextHoverValue = _this.onDayHover(nextHoverTime);
            }
          }

          // Find origin hover time on value index
          if (nextHoverValue.length >= 2) {
            var miss = nextHoverValue.some(function (ht) {
              return !includesTime(value, ht, 'month');
            });
            if (miss) {
              var newValue = nextHoverValue.slice().sort(function (t1, t2) {
                return t1.valueOf() - t2.valueOf();
              });
              if (newValue[0].isSame(newValue[1], 'month')) {
                newValue[1] = newValue[0].clone().add(1, 'month');
              }
              _this.fireValueChange(newValue);
            }
          } else if (nextHoverValue.length === 1) {
            // If only one value, let's keep the origin panel
            var oriValueIndex = value.findIndex(function (time) {
              return time.isSame(currentHoverTime, 'month');
            });
            if (oriValueIndex === -1) oriValueIndex = 0;

            if (value.every(function (time) {
              return !time.isSame(nextHoverTime, 'month');
            })) {
              var _newValue = value.slice();
              _newValue[oriValueIndex] = nextHoverTime.clone();
              _this.fireValueChange(_newValue);
            }
          }

          event.preventDefault();

          return nextHoverTime;
        };

        switch (keyCode) {
          case KeyCode.DOWN:
            updateHoverPoint(function (time) {
              return goTime(time, 1, 'weeks');
            });
            return;
          case KeyCode.UP:
            updateHoverPoint(function (time) {
              return goTime(time, -1, 'weeks');
            });
            return;
          case KeyCode.LEFT:
            if (ctrlKey) {
              updateHoverPoint(function (time) {
                return goTime(time, -1, 'years');
              });
            } else {
              updateHoverPoint(function (time) {
                return goTime(time, -1, 'days');
              });
            }
            return;
          case KeyCode.RIGHT:
            if (ctrlKey) {
              updateHoverPoint(function (time) {
                return goTime(time, 1, 'years');
              });
            } else {
              updateHoverPoint(function (time) {
                return goTime(time, 1, 'days');
              });
            }
            return;
          case KeyCode.HOME:
            updateHoverPoint(function (time) {
              return goStartMonth(time);
            });
            return;
          case KeyCode.END:
            updateHoverPoint(function (time) {
              return goEndMonth(time);
            });
            return;
          case KeyCode.PAGE_DOWN:
            updateHoverPoint(function (time) {
              return goTime(time, 1, 'month');
            });
            return;
          case KeyCode.PAGE_UP:
            updateHoverPoint(function (time) {
              return goTime(time, -1, 'month');
            });
            return;
          case KeyCode.ENTER:
            {
              var lastValue = void 0;
              if (hoverValue.length === 0) {
                lastValue = updateHoverPoint(function (time) {
                  return time;
                });
              } else if (hoverValue.length === 1) {
                lastValue = hoverValue[0];
              } else {
                lastValue = hoverValue[0].isSame(firstSelectedValue, 'day') ? hoverValue[1] : hoverValue[0];
              }
              if (lastValue && (!disabledDate || !disabledDate(lastValue))) {
                this.onSelect(lastValue);
              }
              event.preventDefault();
              return;
            }
          default:
            this.__emit('keydown', event);
        }
      },
      onDayHover: function onDayHover(value) {
        var hoverValue = [];
        var sSelectedValue = this.sSelectedValue,
            firstSelectedValue = this.firstSelectedValue,
            type = this.type;

        if (type === 'start' && sSelectedValue[1]) {
          hoverValue = this.compare(value, sSelectedValue[1]) < 0 ? [value, sSelectedValue[1]] : [value];
        } else if (type === 'end' && sSelectedValue[0]) {
          hoverValue = this.compare(value, sSelectedValue[0]) > 0 ? [sSelectedValue[0], value] : [];
        } else {
          if (!firstSelectedValue) {
            if (this.sHoverValue.length) {
              this.setState({ sHoverValue: [] });
            }
            return hoverValue;
          }
          hoverValue = this.compare(value, firstSelectedValue) < 0 ? [value, firstSelectedValue] : [firstSelectedValue, value];
        }
        this.fireHoverValueChange(hoverValue);
        return hoverValue;
      },
      onToday: function onToday() {
        var startValue = getTodayTime(this.sValue[0]);
        var endValue = startValue.clone().add(1, 'months');
        this.setState({ sValue: [startValue, endValue] });
      },
      onOpenTimePicker: function onOpenTimePicker() {
        this.setState({
          sShowTimePicker: true
        });
      },
      onCloseTimePicker: function onCloseTimePicker() {
        this.setState({
          sShowTimePicker: false
        });
      },
      onOk: function onOk() {
        var sSelectedValue = this.sSelectedValue;

        if (this.isAllowedDateAndTime(sSelectedValue)) {
          this.__emit('ok', sSelectedValue);
        }
      },
      onStartInputChange: function onStartInputChange() {
        for (var _len = arguments.length, oargs = Array(_len), _key = 0; _key < _len; _key++) {
          oargs[_key] = arguments[_key];
        }

        var args = ['left'].concat(oargs);
        return onInputSelect.apply(this, args);
      },
      onEndInputChange: function onEndInputChange() {
        for (var _len2 = arguments.length, oargs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          oargs[_key2] = arguments[_key2];
        }

        var args = ['right'].concat(oargs);
        return onInputSelect.apply(this, args);
      },
      onStartInputSelect: function onStartInputSelect(value) {
        var args = ['left', value, { source: 'dateInputSelect' }];
        return onInputSelect.apply(this, args);
      },
      onEndInputSelect: function onEndInputSelect(value) {
        var args = ['right', value, { source: 'dateInputSelect' }];
        return onInputSelect.apply(this, args);
      },
      onStartValueChange: function onStartValueChange(leftValue) {
        var value = [].concat(_toConsumableArray(this.sValue));
        value[0] = leftValue;
        return this.fireValueChange(value);
      },
      onEndValueChange: function onEndValueChange(rightValue) {
        var value = [].concat(_toConsumableArray(this.sValue));
        value[1] = rightValue;
        return this.fireValueChange(value);
      },
      onStartPanelChange: function onStartPanelChange(value, mode) {
        var sMode = this.sMode,
            sValue = this.sValue;

        var newMode = [mode, sMode[1]];
        var newValue = [value || sValue[0], sValue[1]];
        this.__emit('panelChange', newValue, newMode);
        var newState = {
          sPanelTriggerSource: 'start'
        };
        if (!hasProp(this, 'mode')) {
          newState.sMode = newMode;
        }
        this.setState(newState);
      },
      onEndPanelChange: function onEndPanelChange(value, mode) {
        var sMode = this.sMode,
            sValue = this.sValue;

        var newMode = [sMode[0], mode];
        var newValue = [sValue[0], value || sValue[1]];
        this.__emit('panelChange', newValue, newMode);
        var newState = {
          sPanelTriggerSource: 'end'
        };
        if (!hasProp(this, 'mode')) {
          newState.sMode = newMode;
        }
        this.setState(newState);
      },
      getStartValue: function getStartValue() {
        var _$data2 = this.$data,
            selectedValue = _$data2.sSelectedValue,
            showTimePicker = _$data2.sShowTimePicker,
            value = _$data2.sValue,
            mode = _$data2.sMode,
            panelTriggerSource = _$data2.sPanelTriggerSource;

        var startValue = value[0];
        // keep selectedTime when select date
        if (selectedValue[0] && this.$props.timePicker) {
          startValue = startValue.clone();
          syncTime(selectedValue[0], startValue);
        }
        if (showTimePicker && selectedValue[0]) {
          startValue = selectedValue[0];
        }

        // Adjust month if date not align
        if (panelTriggerSource === 'end' && mode[0] === 'date' && mode[1] === 'date' && startValue.isSame(value[1], 'month')) {
          startValue = startValue.clone().subtract(1, 'month');
        }

        return startValue;
      },
      getEndValue: function getEndValue() {
        var _$data3 = this.$data,
            selectedValue = _$data3.sSelectedValue,
            showTimePicker = _$data3.sShowTimePicker,
            value = _$data3.sValue,
            mode = _$data3.sMode,
            panelTriggerSource = _$data3.sPanelTriggerSource;

        var endValue = value[1] ? value[1].clone() : value[0].clone().add(1, 'month');
        // keep selectedTime when select date
        if (selectedValue[1] && this.$props.timePicker) {
          syncTime(selectedValue[1], endValue);
        }
        if (showTimePicker) {
          endValue = selectedValue[1] ? selectedValue[1] : this.getStartValue();
        }

        // Adjust month if date not align
        if (!showTimePicker && panelTriggerSource !== 'end' && mode[0] === 'date' && mode[1] === 'date' && endValue.isSame(value[0], 'month')) {
          endValue = endValue.clone().add(1, 'month');
        }

        return endValue;
      },

      // get disabled hours for second picker
      getEndDisableTime: function getEndDisableTime() {
        var sSelectedValue = this.sSelectedValue,
            sValue = this.sValue,
            disabledTime = this.disabledTime;

        var userSettingDisabledTime = disabledTime(sSelectedValue, 'end') || {};
        var startValue = sSelectedValue && sSelectedValue[0] || sValue[0].clone();
        // if startTime and endTime is same day..
        // the second time picker will not able to pick time before first time picker
        if (!sSelectedValue[1] || startValue.isSame(sSelectedValue[1], 'day')) {
          var hours = startValue.hour();
          var minutes = startValue.minute();
          var second = startValue.second();
          var _disabledHours = userSettingDisabledTime.disabledHours,
              _disabledMinutes = userSettingDisabledTime.disabledMinutes,
              _disabledSeconds = userSettingDisabledTime.disabledSeconds;

          var oldDisabledMinutes = _disabledMinutes ? _disabledMinutes() : [];
          var olddisabledSeconds = _disabledSeconds ? _disabledSeconds() : [];
          _disabledHours = generateOptions$1(hours, _disabledHours);
          _disabledMinutes = generateOptions$1(minutes, _disabledMinutes);
          _disabledSeconds = generateOptions$1(second, _disabledSeconds);
          return {
            disabledHours: function disabledHours() {
              return _disabledHours;
            },
            disabledMinutes: function disabledMinutes(hour) {
              if (hour === hours) {
                return _disabledMinutes;
              }
              return oldDisabledMinutes;
            },
            disabledSeconds: function disabledSeconds(hour, minute) {
              if (hour === hours && minute === minutes) {
                return _disabledSeconds;
              }
              return olddisabledSeconds;
            }
          };
        }
        return userSettingDisabledTime;
      },
      isAllowedDateAndTime: function isAllowedDateAndTime(selectedValue) {
        return isAllowedDate(selectedValue[0], this.disabledDate, this.disabledStartTime) && isAllowedDate(selectedValue[1], this.disabledDate, this.disabledEndTime);
      },
      isMonthYearPanelShow: function isMonthYearPanelShow(mode) {
        return ['month', 'year', 'decade'].indexOf(mode) > -1;
      },
      hasSelectedValue: function hasSelectedValue() {
        var sSelectedValue = this.sSelectedValue;

        return !!sSelectedValue[1] && !!sSelectedValue[0];
      },
      compare: function compare(v1, v2) {
        if (this.timePicker) {
          return v1.diff(v2);
        }
        return v1.diff(v2, 'days');
      },
      fireSelectValueChange: function fireSelectValueChange(selectedValue, direct, cause) {
        var timePicker = this.timePicker,
            prevSelectedValue = this.prevSelectedValue;

        if (timePicker) {
          var timePickerProps = getOptionProps(timePicker);
          if (timePickerProps.defaultValue) {
            var timePickerDefaultValue = timePickerProps.defaultValue;
            if (!prevSelectedValue[0] && selectedValue[0]) {
              syncTime(timePickerDefaultValue[0], selectedValue[0]);
            }
            if (!prevSelectedValue[1] && selectedValue[1]) {
              syncTime(timePickerDefaultValue[1], selectedValue[1]);
            }
          }
        }
        // 尚未选择过时间，直接输入的话
        if (!this.sSelectedValue[0] || !this.sSelectedValue[1]) {
          var startValue = selectedValue[0] || moment();
          var endValue = selectedValue[1] || startValue.clone().add(1, 'months');
          this.setState({
            sSelectedValue: selectedValue,
            sValue: selectedValue && selectedValue.length === 2 ? getValueFromSelectedValue([startValue, endValue]) : this.sValue
          });
        }

        if (selectedValue[0] && !selectedValue[1]) {
          this.setState({ firstSelectedValue: selectedValue[0] });
          this.fireHoverValueChange(selectedValue.concat());
        }
        this.__emit('change', selectedValue);
        if (direct || selectedValue[0] && selectedValue[1]) {
          this.setState({
            prevSelectedValue: selectedValue,
            firstSelectedValue: null
          });
          this.fireHoverValueChange([]);
          this.__emit('select', selectedValue, cause);
        }
        if (!hasProp(this, 'selectedValue')) {
          this.setState({
            sSelectedValue: selectedValue
          });
        }
      },
      fireValueChange: function fireValueChange(value) {
        if (!hasProp(this, 'value')) {
          this.setState({
            sValue: value
          });
        }
        this.__emit('valueChange', value);
      },
      fireHoverValueChange: function fireHoverValueChange(hoverValue) {
        if (!hasProp(this, 'hoverValue')) {
          this.setState({ sHoverValue: hoverValue });
        }
        this.__emit('hoverChange', hoverValue);
      },
      clear: function clear() {
        this.fireSelectValueChange([], true);
        this.__emit('clear');
      },
      disabledStartTime: function disabledStartTime(time) {
        return this.disabledTime(time, 'start');
      },
      disabledEndTime: function disabledEndTime(time) {
        return this.disabledTime(time, 'end');
      },
      disabledStartMonth: function disabledStartMonth(month) {
        var sValue = this.sValue;

        return month.isAfter(sValue[1], 'month');
      },
      disabledEndMonth: function disabledEndMonth(month) {
        var sValue = this.sValue;

        return month.isBefore(sValue[0], 'month');
      }
    },

    render: function render() {
      var _className, _cls;

      var h = arguments[0];

      var props = getOptionProps(this);
      var prefixCls = props.prefixCls,
          dateInputPlaceholder = props.dateInputPlaceholder,
          timePicker = props.timePicker,
          showOk = props.showOk,
          locale = props.locale,
          showClear = props.showClear,
          showToday = props.showToday,
          type = props.type,
          seperator = props.seperator;

      var clearIcon = getComponentFromProp(this, 'clearIcon');
      var sHoverValue = this.sHoverValue,
          sSelectedValue = this.sSelectedValue,
          mode = this.sMode,
          sShowTimePicker = this.sShowTimePicker,
          sValue = this.sValue;

      var className = (_className = {}, _defineProperty(_className, prefixCls, 1), _defineProperty(_className, prefixCls + '-hidden', !props.visible), _defineProperty(_className, prefixCls + '-range', 1), _defineProperty(_className, prefixCls + '-show-time-picker', sShowTimePicker), _defineProperty(_className, prefixCls + '-week-number', props.showWeekNumber), _className);
      var baseProps = {
        props: props,
        on: getListeners(this)
      };
      var newProps = {
        props: {
          selectedValue: sSelectedValue
        },
        on: {
          select: this.onSelect,
          dayHover: type === 'start' && sSelectedValue[1] || type === 'end' && sSelectedValue[0] || !!sHoverValue.length ? this.onDayHover : noop$y
        }
      };

      var placeholder1 = void 0;
      var placeholder2 = void 0;

      if (dateInputPlaceholder) {
        if (Array.isArray(dateInputPlaceholder)) {
          var _dateInputPlaceholder = _slicedToArray(dateInputPlaceholder, 2);

          placeholder1 = _dateInputPlaceholder[0];
          placeholder2 = _dateInputPlaceholder[1];
        } else {
          placeholder1 = placeholder2 = dateInputPlaceholder;
        }
      }
      var showOkButton = showOk === true || showOk !== false && !!timePicker;
      var cls = (_cls = {}, _defineProperty(_cls, prefixCls + '-footer', true), _defineProperty(_cls, prefixCls + '-range-bottom', true), _defineProperty(_cls, prefixCls + '-footer-show-ok', showOkButton), _cls);

      var startValue = this.getStartValue();
      var endValue = this.getEndValue();
      var todayTime = getTodayTime(startValue);
      var thisMonth = todayTime.month();
      var thisYear = todayTime.year();
      var isTodayInView = startValue.year() === thisYear && startValue.month() === thisMonth || endValue.year() === thisYear && endValue.month() === thisMonth;
      var nextMonthOfStart = startValue.clone().add(1, 'months');
      var isClosestMonths = nextMonthOfStart.year() === endValue.year() && nextMonthOfStart.month() === endValue.month();
      var leftPartProps = mergeProps(baseProps, newProps, {
        props: {
          hoverValue: sHoverValue,
          direction: 'left',
          disabledTime: this.disabledStartTime,
          disabledMonth: this.disabledStartMonth,
          format: this.getFormat(),
          value: startValue,
          mode: mode[0],
          placeholder: placeholder1,
          showDateInput: this.showDateInput,
          timePicker: timePicker,
          showTimePicker: sShowTimePicker || mode[0] === 'time',
          enablePrev: true,
          enableNext: !isClosestMonths || this.isMonthYearPanelShow(mode[1]),
          clearIcon: clearIcon
        },
        on: {
          inputChange: this.onStartInputChange,
          inputSelect: this.onStartInputSelect,
          valueChange: this.onStartValueChange,
          panelChange: this.onStartPanelChange
        }
      });
      var rightPartProps = mergeProps(baseProps, newProps, {
        props: {
          hoverValue: sHoverValue,
          direction: 'right',
          format: this.getFormat(),
          timePickerDisabledTime: this.getEndDisableTime(),
          placeholder: placeholder2,
          value: endValue,
          mode: mode[1],
          showDateInput: this.showDateInput,
          timePicker: timePicker,
          showTimePicker: sShowTimePicker || mode[1] === 'time',
          disabledTime: this.disabledEndTime,
          disabledMonth: this.disabledEndMonth,
          enablePrev: !isClosestMonths || this.isMonthYearPanelShow(mode[0]),
          enableNext: true,
          clearIcon: clearIcon
        },
        on: {
          inputChange: this.onEndInputChange,
          inputSelect: this.onEndInputSelect,
          valueChange: this.onEndValueChange,
          panelChange: this.onEndPanelChange
        }
      });
      var TodayButtonNode = null;
      if (showToday) {
        var todayButtonProps = mergeProps(baseProps, {
          props: {
            disabled: isTodayInView,
            value: sValue[0],
            text: locale.backToToday
          },
          on: {
            today: this.onToday
          }
        });
        TodayButtonNode = h(TodayButton, babelHelperVueJsxMergeProps([{ key: 'todayButton' }, todayButtonProps]));
      }

      var TimePickerButtonNode = null;
      if (props.timePicker) {
        var timePickerButtonProps = mergeProps(baseProps, {
          props: {
            showTimePicker: sShowTimePicker || mode[0] === 'time' && mode[1] === 'time',
            timePickerDisabled: !this.hasSelectedValue() || sHoverValue.length
          },
          on: {
            openTimePicker: this.onOpenTimePicker,
            closeTimePicker: this.onCloseTimePicker
          }
        });
        TimePickerButtonNode = h(TimePickerButton, babelHelperVueJsxMergeProps([{ key: 'timePickerButton' }, timePickerButtonProps]));
      }

      var OkButtonNode = null;
      if (showOkButton) {
        var okButtonProps = mergeProps(baseProps, {
          props: {
            okDisabled: !this.isAllowedDateAndTime(sSelectedValue) || !this.hasSelectedValue() || sHoverValue.length
          },
          on: {
            ok: this.onOk
          }
        });
        OkButtonNode = h(OkButton, babelHelperVueJsxMergeProps([{ key: 'okButtonNode' }, okButtonProps]));
      }
      var extraFooter = this.renderFooter(mode);
      return h(
        'div',
        { ref: 'rootInstance', 'class': className, attrs: { tabIndex: '0' },
          on: {
            'keydown': this.onKeyDown
          }
        },
        [props.renderSidebar(), h(
          'div',
          { 'class': prefixCls + '-panel' },
          [showClear && sSelectedValue[0] && sSelectedValue[1] ? h(
            'a',
            {
              attrs: { role: 'button', title: locale.clear },
              on: {
                'click': this.clear
              }
            },
            [clearIcon || h('span', { 'class': prefixCls + '-clear-btn' })]
          ) : null, h(
            'div',
            {
              'class': prefixCls + '-date-panel',
              on: {
                'mouseleave': type !== 'both' ? this.onDatePanelLeave : noop$y,
                'mouseenter': type !== 'both' ? this.onDatePanelEnter : noop$y
              }
            },
            [h(CalendarPart, leftPartProps), h(
              'span',
              { 'class': prefixCls + '-range-middle' },
              [seperator]
            ), h(CalendarPart, rightPartProps)]
          ), h(
            'div',
            { 'class': cls },
            [showToday || props.timePicker || showOkButton || extraFooter ? h(
              'div',
              { 'class': prefixCls + '-footer-btn' },
              [extraFooter, TodayButtonNode, TimePickerButtonNode, OkButtonNode]
            ) : null]
          )]
        )]
      );
    }
  };

  var PresetColorTypes$1 = ['pink', 'red', 'yellow', 'orange', 'cyan', 'green', 'blue', 'purple', 'geekblue', 'magenta', 'volcano', 'gold', 'lime'];
  var PresetColorRegex = new RegExp('^(' + PresetColorTypes$1.join('|') + ')(-inverse)?$');

  var Tag = {
    name: 'ATag',
    mixins: [BaseMixin],
    model: {
      prop: 'visible',
      event: 'close.visible'
    },
    props: {
      prefixCls: VuePropTypes.string,
      color: VuePropTypes.string,
      closable: VuePropTypes.bool.def(false),
      visible: VuePropTypes.bool,
      afterClose: VuePropTypes.func
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      var _visible = true;
      var props = getOptionProps(this);
      if ('visible' in props) {
        _visible = this.visible;
      }
      warning$1(!('afterClose' in props), 'Tag', "'afterClose' will be deprecated, please use 'close' event, we will remove this in the next version.");
      return {
        _visible: _visible
      };
    },

    watch: {
      visible: function visible(val) {
        this.setState({
          _visible: val
        });
      }
    },
    methods: {
      setVisible: function setVisible(visible, e) {
        this.$emit('close', e);
        this.$emit('close.visible', false);
        var afterClose = this.afterClose;
        if (afterClose) {
          // next version remove.
          afterClose();
        }
        if (e.defaultPrevented) {
          return;
        }
        if (!hasProp(this, 'visible')) {
          this.setState({ _visible: visible });
        }
      },
      handleIconClick: function handleIconClick(e) {
        e.stopPropagation();
        this.setVisible(false, e);
      },
      isPresetColor: function isPresetColor() {
        var color = this.$props.color;

        if (!color) {
          return false;
        }
        return PresetColorRegex.test(color);
      },
      getTagStyle: function getTagStyle() {
        var color = this.$props.color;

        var isPresetColor = this.isPresetColor();
        return {
          backgroundColor: color && !isPresetColor ? color : undefined
        };
      },
      getTagClassName: function getTagClassName(prefixCls) {
        var _ref;

        var color = this.$props.color;

        var isPresetColor = this.isPresetColor();
        return _ref = {}, _defineProperty(_ref, prefixCls, true), _defineProperty(_ref, prefixCls + '-' + color, isPresetColor), _defineProperty(_ref, prefixCls + '-has-color', color && !isPresetColor), _ref;
      },
      renderCloseIcon: function renderCloseIcon() {
        var h = this.$createElement;
        var closable = this.$props.closable;

        return closable ? h(Icon$1, {
          attrs: { type: 'close' },
          on: {
            'click': this.handleIconClick
          }
        }) : null;
      }
    },

    render: function render() {
      var h = arguments[0];
      var customizePrefixCls = this.$props.prefixCls;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('tag', customizePrefixCls);
      var visible = this.$data._visible;

      var tag = h(
        'span',
        babelHelperVueJsxMergeProps([{
          directives: [{
            name: 'show',
            value: visible
          }]
        }, { on: omit(getListeners(this), ['close']) }, {
          'class': this.getTagClassName(prefixCls),
          style: this.getTagStyle()
        }]),
        [this.$slots['default'], this.renderCloseIcon()]
      );
      var transitionProps = getTransitionProps(prefixCls + '-zoom', {
        appear: false
      });
      return h(Wave, [h(
        'transition',
        transitionProps,
        [tag]
      )]);
    }
  };

  var CheckableTag = {
    name: 'ACheckableTag',
    model: {
      prop: 'checked'
    },
    props: {
      prefixCls: VuePropTypes.string,
      checked: Boolean
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    computed: {
      classes: function classes() {
        var _ref;

        var checked = this.checked,
            customizePrefixCls = this.prefixCls;

        var getPrefixCls = this.configProvider.getPrefixCls;
        var prefixCls = getPrefixCls('tag', customizePrefixCls);
        return _ref = {}, _defineProperty(_ref, '' + prefixCls, true), _defineProperty(_ref, prefixCls + '-checkable', true), _defineProperty(_ref, prefixCls + '-checkable-checked', checked), _ref;
      }
    },
    methods: {
      handleClick: function handleClick() {
        var checked = this.checked;

        this.$emit('input', !checked);
        this.$emit('change', !checked);
      }
    },
    render: function render() {
      var h = arguments[0];
      var classes = this.classes,
          handleClick = this.handleClick,
          $slots = this.$slots;

      return h(
        'div',
        { 'class': classes, on: {
            'click': handleClick
          }
        },
        [$slots['default']]
      );
    }
  };

  Tag.CheckableTag = CheckableTag;

  /* istanbul ignore next */
  Tag.install = function (Vue) {
    Vue.use(base);
    Vue.component(Tag.name, Tag);
    Vue.component(Tag.CheckableTag.name, Tag.CheckableTag);
  };

  var PickerProps = function PickerProps() {
    return {
      name: VuePropTypes.string,
      transitionName: VuePropTypes.string,
      prefixCls: VuePropTypes.string,
      inputPrefixCls: VuePropTypes.string,
      format: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.array, VuePropTypes.func]),
      disabled: VuePropTypes.bool,
      allowClear: VuePropTypes.bool,
      suffixIcon: VuePropTypes.any,
      popupStyle: VuePropTypes.object,
      dropdownClassName: VuePropTypes.string,
      locale: VuePropTypes.any,
      localeCode: VuePropTypes.string,
      size: VuePropTypes.oneOf(['large', 'small', 'default']),
      getCalendarContainer: VuePropTypes.func,
      open: VuePropTypes.bool,
      // onOpenChange: PropTypes.(status: bool) => void,
      disabledDate: VuePropTypes.func,
      showToday: VuePropTypes.bool,
      dateRender: VuePropTypes.any, // (current: moment.Moment, today: moment.Moment) => React.ReactNode,
      pickerClass: VuePropTypes.string,
      pickerInputClass: VuePropTypes.string,
      timePicker: VuePropTypes.any,
      autoFocus: VuePropTypes.bool,
      tagPrefixCls: VuePropTypes.string,
      tabIndex: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      align: VuePropTypes.object.def(function () {
        return {};
      }),
      inputReadOnly: VuePropTypes.bool,
      valueFormat: VuePropTypes.string
    };
  };

  var SinglePickerProps = function SinglePickerProps() {
    return {
      value: TimeType,
      defaultValue: TimeType,
      defaultPickerValue: TimeType,
      renderExtraFooter: VuePropTypes.any,
      placeholder: VuePropTypes.string
      // onChange?: (date: moment.Moment, dateString: string) => void;
    };
  };

  var DatePickerProps = function DatePickerProps() {
    return _extends$1({}, PickerProps(), SinglePickerProps(), {
      showTime: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.bool]),
      open: VuePropTypes.bool,
      disabledTime: VuePropTypes.func,
      // onOpenChange?: (status: bool) => void;
      // onOk?: (selectedTime: moment.Moment) => void;
      mode: VuePropTypes.oneOf(['time', 'date', 'month', 'year'])
    });
  };

  var MonthPickerProps = function MonthPickerProps() {
    return _extends$1({}, PickerProps(), SinglePickerProps(), {
      placeholder: VuePropTypes.string,
      monthCellContentRender: VuePropTypes.func
    });
  };
  // export const RangePickerPresetRange = PropTypes.oneOfType([TimesType, PropTypes.func])

  var RangePickerProps = function RangePickerProps() {
    return _extends$1({}, PickerProps(), {
      tagPrefixCls: VuePropTypes.string,
      value: TimesType,
      defaultValue: TimesType,
      defaultPickerValue: TimesType,
      timePicker: VuePropTypes.any,
      // onChange?: (dates: TimesType, dateStrings: [string, string]) => void;
      // onCalendarChange?: (dates: TimesType, dateStrings: [string, string]) => void;
      // onOk?: (selectedTime: moment.Moment) => void;
      showTime: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.bool]),
      ranges: VuePropTypes.object,
      placeholder: VuePropTypes.arrayOf(String),
      mode: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.arrayOf(String)]),
      separator: VuePropTypes.any,
      disabledTime: VuePropTypes.func,
      showToday: VuePropTypes.bool,
      renderExtraFooter: VuePropTypes.any
      // onPanelChange?: (value?: TimesType, mode?: string | string[]) => void;
    });
  };

  var WeekPickerProps = function WeekPickerProps() {
    return _extends$1({}, PickerProps(), SinglePickerProps(), {
      placeholder: VuePropTypes.string
    });
  };

  // export interface DatePickerDecorator extends React.ClassicComponentClass<DatePickerProps> {
  //   RangePicker: React.ClassicComponentClass<RangePickerProps>;
  //   MonthPicker: React.ClassicComponentClass<MonthPickerProps>;
  //   WeekPicker: React.ClassicComponentClass<WeexPickerProps>;
  // }

  var InputIcon = {
    functional: true,
    render: function render(h, context) {
      var props = context.props;
      var suffixIcon = props.suffixIcon,
          prefixCls = props.prefixCls;

      return (suffixIcon && isValidElement(suffixIcon) ? cloneElement(suffixIcon, {
        'class': prefixCls + '-picker-icon'
      }) : h(
        'span',
        { 'class': prefixCls + '-picker-icon' },
        [suffixIcon]
      )) || h(Icon$1, {
        attrs: { type: 'calendar' },
        'class': prefixCls + '-picker-icon' });
    }
  };

  function noop$z() {}
  function getShowDateFromValue(value, mode) {
    var _value = _slicedToArray(value, 2),
        start = _value[0],
        end = _value[1];
    // value could be an empty array, then we should not reset showDate


    if (!start && !end) {
      return;
    }
    if (mode && mode[0] === 'month') {
      return [start, end];
    }
    var newEnd = end && end.isSame(start, 'month') ? end.clone().add(1, 'month') : end;
    return [start, newEnd];
  }

  function pickerValueAdapter(value) {
    if (!value) {
      return;
    }
    if (Array.isArray(value)) {
      return value;
    }
    return [value, value.clone().add(1, 'month')];
  }

  function isEmptyArray$1(arr) {
    if (Array.isArray(arr)) {
      return arr.length === 0 || arr.every(function (i) {
        return !i;
      });
    }
    return false;
  }

  function fixLocale(value, localeCode) {
    if (!localeCode) {
      return;
    }
    if (!value || value.length === 0) {
      return;
    }

    var _value2 = _slicedToArray(value, 2),
        start = _value2[0],
        end = _value2[1];

    if (start) {
      start.locale(localeCode);
    }
    if (end) {
      end.locale(localeCode);
    }
  }

  var RangePicker = {
    name: 'ARangePicker',
    mixins: [BaseMixin],
    model: {
      prop: 'value',
      event: 'change'
    },
    props: initDefaultProps(RangePickerProps(), {
      allowClear: true,
      showToday: false,
      separator: '~'
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      var value = this.value || this.defaultValue || [];

      var _value3 = _slicedToArray(value, 2),
          start = _value3[0],
          end = _value3[1];

      if (start && !interopDefault(moment$1).isMoment(start) || end && !interopDefault(moment$1).isMoment(end)) {
        throw new Error('The value/defaultValue of RangePicker must be a moment object array after `antd@2.0`, ' + 'see: https://u.ant.design/date-picker-value');
      }
      var pickerValue = !value || isEmptyArray$1(value) ? this.defaultPickerValue : value;
      return {
        sValue: value,
        sShowDate: pickerValueAdapter(pickerValue || interopDefault(moment$1)()),
        sOpen: this.open,
        sHoverValue: []
      };
    },

    watch: {
      value: function value(val) {
        var value = val || [];
        var state = { sValue: value };
        if (!shallowequal(val, this.sValue)) {
          state = _extends$1({}, state, {
            sShowDate: getShowDateFromValue(value, this.mode) || this.sShowDate
          });
        }
        this.setState(state);
      },
      open: function open(val) {
        var state = { sOpen: val };
        this.setState(state);
      },
      sOpen: function sOpen(val, oldVal) {
        var _this = this;

        this.$nextTick(function () {
          if (!hasProp(_this, 'open') && oldVal && !val) {
            _this.focus();
          }
        });
      }
    },
    methods: {
      setValue: function setValue(value, hidePanel) {
        this.handleChange(value);
        if ((hidePanel || !this.showTime) && !hasProp(this, 'open')) {
          this.setState({ sOpen: false });
        }
      },
      clearSelection: function clearSelection(e) {
        e.preventDefault();
        e.stopPropagation();
        this.setState({ sValue: [] });
        this.handleChange([]);
      },
      clearHoverValue: function clearHoverValue() {
        this.setState({ sHoverValue: [] });
      },
      handleChange: function handleChange(value) {
        if (!hasProp(this, 'value')) {
          this.setState(function (_ref) {
            var sShowDate = _ref.sShowDate;
            return {
              sValue: value,
              sShowDate: getShowDateFromValue(value) || sShowDate
            };
          });
        }
        if (value[0] && value[1] && value[0].diff(value[1]) > 0) {
          value[1] = undefined;
        }

        var _value4 = _slicedToArray(value, 2),
            start = _value4[0],
            end = _value4[1];

        this.$emit('change', value, [formatDate$1(start, this.format), formatDate$1(end, this.format)]);
      },
      handleOpenChange: function handleOpenChange(open) {
        if (!hasProp(this, 'open')) {
          this.setState({ sOpen: open });
        }

        if (open === false) {
          this.clearHoverValue();
        }
        this.$emit('openChange', open);
      },
      handleShowDateChange: function handleShowDateChange(showDate) {
        this.setState({ sShowDate: showDate });
      },
      handleHoverChange: function handleHoverChange(hoverValue) {
        this.setState({ sHoverValue: hoverValue });
      },
      handleRangeMouseLeave: function handleRangeMouseLeave() {
        if (this.sOpen) {
          this.clearHoverValue();
        }
      },
      handleCalendarInputSelect: function handleCalendarInputSelect(value) {
        var _value5 = _slicedToArray(value, 1),
            start = _value5[0];

        if (!start) {
          return;
        }
        this.setState(function (_ref2) {
          var sShowDate = _ref2.sShowDate;
          return {
            sValue: value,
            sShowDate: getShowDateFromValue(value) || sShowDate
          };
        });
      },
      handleRangeClick: function handleRangeClick(value) {
        if (typeof value === 'function') {
          value = value();
        }

        this.setValue(value, true);
        this.$emit('ok', value);
        this.$emit('openChange', false);
      },
      onMouseEnter: function onMouseEnter(e) {
        this.$emit('mouseenter', e);
      },
      onMouseLeave: function onMouseLeave(e) {
        this.$emit('mouseleave', e);
      },
      focus: function focus() {
        this.$refs.picker.focus();
      },
      blur: function blur() {
        this.$refs.picker.blur();
      },
      renderFooter: function renderFooter() {
        var _this2 = this;

        var h = this.$createElement;
        var ranges = this.ranges,
            $scopedSlots = this.$scopedSlots,
            $slots = this.$slots;
        var prefixCls = this._prefixCls,
            tagPrefixCls = this._tagPrefixCls;

        var renderExtraFooter = this.renderExtraFooter || $scopedSlots.renderExtraFooter || $slots.renderExtraFooter;
        if (!ranges && !renderExtraFooter) {
          return null;
        }
        var customFooter = renderExtraFooter ? h(
          'div',
          { 'class': prefixCls + '-footer-extra', key: 'extra' },
          [typeof renderExtraFooter === 'function' ? renderExtraFooter() : renderExtraFooter]
        ) : null;
        var operations = ranges && Object.keys(ranges).map(function (range) {
          var value = ranges[range];
          var hoverValue = typeof value === 'function' ? value.call(_this2) : value;
          return h(
            Tag,
            {
              key: range,
              attrs: { prefixCls: tagPrefixCls,
                color: 'blue'
              },
              on: {
                'click': function click() {
                  return _this2.handleRangeClick(value);
                },
                'mouseenter': function mouseenter() {
                  return _this2.setState({ sHoverValue: hoverValue });
                },
                'mouseleave': _this2.handleRangeMouseLeave
              }
            },
            [range]
          );
        });
        var rangeNode = operations && operations.length > 0 ? h(
          'div',
          { 'class': prefixCls + '-footer-extra ' + prefixCls + '-range-quick-selector', key: 'range' },
          [operations]
        ) : null;
        return [rangeNode, customFooter];
      }
    },

    render: function render() {
      var _classNames,
          _this3 = this;

      var h = arguments[0];

      var props = getOptionProps(this);
      var suffixIcon = getComponentFromProp(this, 'suffixIcon');
      suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
      var value = this.sValue,
          showDate = this.sShowDate,
          hoverValue = this.sHoverValue,
          open = this.sOpen,
          $scopedSlots = this.$scopedSlots;

      var listeners = getListeners(this);
      var _listeners$calendarCh = listeners.calendarChange,
          calendarChange = _listeners$calendarCh === undefined ? noop$z : _listeners$calendarCh,
          _listeners$ok = listeners.ok,
          ok = _listeners$ok === undefined ? noop$z : _listeners$ok,
          _listeners$focus = listeners.focus,
          focus = _listeners$focus === undefined ? noop$z : _listeners$focus,
          _listeners$blur = listeners.blur,
          blur = _listeners$blur === undefined ? noop$z : _listeners$blur,
          _listeners$panelChang = listeners.panelChange,
          panelChange = _listeners$panelChang === undefined ? noop$z : _listeners$panelChang;
      var customizePrefixCls = props.prefixCls,
          customizeTagPrefixCls = props.tagPrefixCls,
          popupStyle = props.popupStyle,
          disabledDate = props.disabledDate,
          disabledTime = props.disabledTime,
          showTime = props.showTime,
          showToday = props.showToday,
          ranges = props.ranges,
          locale = props.locale,
          localeCode = props.localeCode,
          format = props.format,
          separator = props.separator,
          inputReadOnly = props.inputReadOnly;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('calendar', customizePrefixCls);
      var tagPrefixCls = getPrefixCls('tag', customizeTagPrefixCls);
      this._prefixCls = prefixCls;
      this._tagPrefixCls = tagPrefixCls;

      var dateRender = props.dateRender || $scopedSlots.dateRender;
      fixLocale(value, localeCode);
      fixLocale(showDate, localeCode);

      var calendarClassName = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-time', showTime), _defineProperty(_classNames, prefixCls + '-range-with-ranges', ranges), _classNames));

      // 需要选择时间时，点击 ok 时才触发 onChange
      var pickerChangeHandler = {
        on: {
          change: this.handleChange
        }
      };
      var calendarProps = {
        on: {
          ok: this.handleChange
        },
        props: {}
      };
      if (props.timePicker) {
        pickerChangeHandler.on.change = function (changedValue) {
          return _this3.handleChange(changedValue);
        };
      } else {
        calendarProps = { on: {}, props: {} };
      }
      if ('mode' in props) {
        calendarProps.props.mode = props.mode;
      }

      var startPlaceholder = Array.isArray(props.placeholder) ? props.placeholder[0] : locale.lang.rangePlaceholder[0];
      var endPlaceholder = Array.isArray(props.placeholder) ? props.placeholder[1] : locale.lang.rangePlaceholder[1];

      var rangeCalendarProps = mergeProps(calendarProps, {
        props: {
          separator: separator,
          format: format,
          prefixCls: prefixCls,
          renderFooter: this.renderFooter,
          timePicker: props.timePicker,
          disabledDate: disabledDate,
          disabledTime: disabledTime,
          dateInputPlaceholder: [startPlaceholder, endPlaceholder],
          locale: locale.lang,
          dateRender: dateRender,
          value: showDate,
          hoverValue: hoverValue,
          showToday: showToday,
          inputReadOnly: inputReadOnly
        },
        on: {
          change: calendarChange,
          ok: ok,
          valueChange: this.handleShowDateChange,
          hoverChange: this.handleHoverChange,
          panelChange: panelChange,
          inputSelect: this.handleCalendarInputSelect
        },
        'class': calendarClassName,
        scopedSlots: $scopedSlots
      });
      var calendar = h(RangeCalendar, rangeCalendarProps);

      // default width for showTime
      var pickerStyle = {};
      if (props.showTime) {
        pickerStyle.width = '350px';
      }

      var _value6 = _slicedToArray(value, 2),
          startValue = _value6[0],
          endValue = _value6[1];

      var clearIcon = !props.disabled && props.allowClear && value && (startValue || endValue) ? h(Icon$1, {
        attrs: {
          type: 'close-circle',

          theme: 'filled'
        },
        'class': prefixCls + '-picker-clear',
        on: {
          'click': this.clearSelection
        }
      }) : null;

      var inputIcon = h(InputIcon, {
        attrs: { suffixIcon: suffixIcon, prefixCls: prefixCls }
      });

      var input = function input(_ref3) {
        var inputValue = _ref3.value;

        var _inputValue = _slicedToArray(inputValue, 2),
            start = _inputValue[0],
            end = _inputValue[1];

        return h(
          'span',
          { 'class': props.pickerInputClass },
          [h('input', {
            attrs: {
              disabled: props.disabled,
              readOnly: true,

              placeholder: startPlaceholder,

              tabIndex: -1
            },
            domProps: {
              'value': formatDate$1(start, props.format)
            },
            'class': prefixCls + '-range-picker-input' }), h(
            'span',
            { 'class': prefixCls + '-range-picker-separator' },
            [' ', separator, ' ']
          ), h('input', {
            attrs: {
              disabled: props.disabled,
              readOnly: true,

              placeholder: endPlaceholder,

              tabIndex: -1
            },
            domProps: {
              'value': formatDate$1(end, props.format)
            },
            'class': prefixCls + '-range-picker-input' }), clearIcon, inputIcon]
        );
      };
      var vcDatePickerProps = mergeProps({
        props: props,
        on: listeners
      }, pickerChangeHandler, {
        props: {
          calendar: calendar,
          value: value,
          open: open,
          prefixCls: prefixCls + '-picker-container'
        },
        on: {
          openChange: this.handleOpenChange
        },
        style: popupStyle,
        scopedSlots: _extends$1({ 'default': input }, $scopedSlots)
      });
      return h(
        'span',
        {
          ref: 'picker',
          'class': props.pickerClass,
          style: pickerStyle,
          attrs: { tabIndex: props.disabled ? -1 : 0
          },
          on: {
            'focus': focus,
            'blur': blur,
            'mouseenter': this.onMouseEnter,
            'mouseleave': this.onMouseLeave
          }
        },
        [h(Picker, vcDatePickerProps)]
      );
    }
  };

  function formatValue(value, format) {
    return value && value.format(format) || '';
  }
  function noop$A() {}

  var WeekPicker = {
    // static defaultProps = {
    //   format: 'YYYY-wo',
    //   allowClear: true,
    // };

    // private input: any;
    name: 'AWeekPicker',
    mixins: [BaseMixin],
    model: {
      prop: 'value',
      event: 'change'
    },
    props: initDefaultProps(WeekPickerProps(), {
      format: 'gggg-wo',
      allowClear: true
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      var value = this.value || this.defaultValue;
      if (value && !interopDefault(moment$1).isMoment(value)) {
        throw new Error('The value/defaultValue of WeekPicker or MonthPicker must be ' + 'a moment object');
      }
      return {
        _value: value,
        _open: this.open
      };
    },

    watch: {
      value: function value(val) {
        var state = { _value: val };
        this.setState(state);
        this.prevState = _extends$1({}, this.$data, state);
      },
      open: function open(val) {
        var state = { _open: val };
        this.setState(state);
        this.prevState = _extends$1({}, this.$data, state);
      },
      _open: function _open(val, oldVal) {
        var _this = this;

        this.$nextTick(function () {
          if (!hasProp(_this, 'open') && oldVal && !val) {
            _this.focus();
          }
        });
      }
    },
    mounted: function mounted() {
      this.prevState = _extends$1({}, this.$data);
    },
    updated: function updated() {
      var _this2 = this;

      this.$nextTick(function () {
        if (!hasProp(_this2, 'open') && _this2.prevState._open && !_this2._open) {
          _this2.focus();
        }
      });
    },

    methods: {
      weekDateRender: function weekDateRender(current) {
        var h = this.$createElement;

        var selectedValue = this.$data._value;
        var prefixCls = this._prefixCls,
            $scopedSlots = this.$scopedSlots;

        var dateRender = this.dateRender || $scopedSlots.dateRender;
        var dateNode = dateRender ? dateRender(current) : current.date();
        if (selectedValue && current.year() === selectedValue.year() && current.week() === selectedValue.week()) {
          return h(
            'div',
            { 'class': prefixCls + '-selected-day' },
            [h(
              'div',
              { 'class': prefixCls + '-date' },
              [dateNode]
            )]
          );
        }
        return h(
          'div',
          { 'class': prefixCls + '-date' },
          [dateNode]
        );
      },
      handleChange: function handleChange(value) {
        if (!hasProp(this, 'value')) {
          this.setState({ _value: value });
        }
        this.$emit('change', value, formatValue(value, this.format));
      },
      handleOpenChange: function handleOpenChange(open) {
        if (!hasProp(this, 'open')) {
          this.setState({ _open: open });
        }
        this.$emit('openChange', open);
      },
      clearSelection: function clearSelection(e) {
        e.preventDefault();
        e.stopPropagation();
        this.handleChange(null);
      },
      focus: function focus() {
        this.$refs.input.focus();
      },
      blur: function blur() {
        this.$refs.input.blur();
      },
      renderFooter: function renderFooter() {
        var h = this.$createElement;
        var prefixCls = this._prefixCls,
            $scopedSlots = this.$scopedSlots;

        var renderExtraFooter = this.renderExtraFooter || $scopedSlots.renderExtraFooter;
        return renderExtraFooter ? h(
          'div',
          { 'class': prefixCls + '-footer-extra' },
          [renderExtraFooter.apply(undefined, arguments)]
        ) : null;
      }
    },

    render: function render() {
      var h = arguments[0];

      var props = getOptionProps(this);
      var suffixIcon = getComponentFromProp(this, 'suffixIcon');
      suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
      var customizePrefixCls = this.prefixCls,
          disabled = this.disabled,
          pickerClass = this.pickerClass,
          popupStyle = this.popupStyle,
          pickerInputClass = this.pickerInputClass,
          format = this.format,
          allowClear = this.allowClear,
          locale = this.locale,
          localeCode = this.localeCode,
          disabledDate = this.disabledDate,
          defaultPickerValue = this.defaultPickerValue,
          $data = this.$data,
          $scopedSlots = this.$scopedSlots;

      var listeners = getListeners(this);
      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('calendar', customizePrefixCls);
      this._prefixCls = prefixCls;

      var pickerValue = $data._value,
          open = $data._open;
      var _listeners$focus = listeners.focus,
          focus = _listeners$focus === undefined ? noop$A : _listeners$focus,
          _listeners$blur = listeners.blur,
          blur = _listeners$blur === undefined ? noop$A : _listeners$blur;


      if (pickerValue && localeCode) {
        pickerValue.locale(localeCode);
      }

      var placeholder = hasProp(this, 'placeholder') ? this.placeholder : locale.lang.placeholder;
      var weekDateRender = this.dateRender || $scopedSlots.dateRender || this.weekDateRender;
      var calendar = h(Calendar$1, {
        attrs: {
          showWeekNumber: true,
          dateRender: weekDateRender,
          prefixCls: prefixCls,
          format: format,
          locale: locale.lang,
          showDateInput: false,
          showToday: false,
          disabledDate: disabledDate,
          renderFooter: this.renderFooter,
          defaultValue: defaultPickerValue
        }
      });
      var clearIcon = !disabled && allowClear && $data._value ? h(Icon$1, {
        attrs: {
          type: 'close-circle',

          theme: 'filled'
        },
        'class': prefixCls + '-picker-clear',
        on: {
          'click': this.clearSelection
        }
      }) : null;

      var inputIcon = h(InputIcon, {
        attrs: { suffixIcon: suffixIcon, prefixCls: prefixCls }
      });

      var input = function input(_ref) {
        var value = _ref.value;

        return h(
          'span',
          { style: { display: 'inline-block', width: '100%' } },
          [h('input', {
            ref: 'input',
            attrs: { disabled: disabled,
              readOnly: true,

              placeholder: placeholder
            },
            domProps: {
              'value': value && value.format(format) || ''
            },
            'class': pickerInputClass,
            on: {
              'focus': focus,
              'blur': blur
            }
          }), clearIcon, inputIcon]
        );
      };
      var vcDatePickerProps = {
        props: _extends$1({}, props, {
          calendar: calendar,
          prefixCls: prefixCls + '-picker-container',
          value: pickerValue,
          open: open
        }),
        on: _extends$1({}, listeners, {
          change: this.handleChange,
          openChange: this.handleOpenChange
        }),
        style: popupStyle,
        scopedSlots: _extends$1({ 'default': input }, $scopedSlots)
      };
      return h(
        'span',
        { 'class': pickerClass },
        [h(Picker, vcDatePickerProps)]
      );
    }
  };

  var DatePicker = wrapPicker(_extends$1({}, createPicker(Calendar$1, DatePickerProps()), { name: 'ADatePicker' }), DatePickerProps(), 'date');

  var MonthPicker = wrapPicker(_extends$1({}, createPicker(MonthCalendar, MonthPickerProps()), { name: 'AMonthPicker' }), MonthPickerProps(), 'month');

  _extends$1(DatePicker, {
    RangePicker: wrapPicker(RangePicker, RangePickerProps(), 'date'),
    MonthPicker: MonthPicker,
    WeekPicker: wrapPicker(WeekPicker, WeekPickerProps(), 'week')
  });

  /* istanbul ignore next */
  DatePicker.install = function (Vue) {
    Vue.use(base);
    Vue.component(DatePicker.name, DatePicker);
    Vue.component(DatePicker.RangePicker.name, DatePicker.RangePicker);
    Vue.component(DatePicker.MonthPicker.name, DatePicker.MonthPicker);
    Vue.component(DatePicker.WeekPicker.name, DatePicker.WeekPicker);
  };

  var Divider$1 = {
    name: 'ADivider',
    props: {
      prefixCls: VuePropTypes.string,
      type: VuePropTypes.oneOf(['horizontal', 'vertical', '']).def('horizontal'),
      dashed: VuePropTypes.bool,
      orientation: VuePropTypes.oneOf(['left', 'right', 'center'])
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    render: function render() {
      var _classString;

      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          type = this.type,
          $slots = this.$slots,
          dashed = this.dashed,
          _orientation = this.orientation,
          orientation = _orientation === undefined ? 'center' : _orientation;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('divider', customizePrefixCls);
      var orientationPrefix = orientation.length > 0 ? '-' + orientation : orientation;

      var classString = (_classString = {}, _defineProperty(_classString, prefixCls, true), _defineProperty(_classString, prefixCls + '-' + type, true), _defineProperty(_classString, prefixCls + '-with-text' + orientationPrefix, $slots['default']), _defineProperty(_classString, prefixCls + '-dashed', !!dashed), _classString);

      return h(
        'div',
        { 'class': classString, attrs: { role: 'separator' }
        },
        [$slots['default'] && h(
          'span',
          { 'class': prefixCls + '-inner-text' },
          [$slots['default']]
        )]
      );
    }
  };

  /* istanbul ignore next */
  Divider$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Divider$1.name, Divider$1);
  };

  Dropdown$1.Button = DropdownButton;

  /* istanbul ignore next */
  Dropdown$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Dropdown$1.name, Dropdown$1);
    Vue.component(DropdownButton.name, DropdownButton);
  };

  /** `Object#toString` result references. */
  var regexpTag$3 = '[object RegExp]';

  /**
   * The base implementation of `_.isRegExp` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
   */
  function baseIsRegExp(value) {
    return isObjectLike_1(value) && _baseGetTag(value) == regexpTag$3;
  }

  var _baseIsRegExp = baseIsRegExp;

  /* Node.js helper references. */
  var nodeIsRegExp = _nodeUtil && _nodeUtil.isRegExp;

  /**
   * Checks if `value` is classified as a `RegExp` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
   * @example
   *
   * _.isRegExp(/abc/);
   * // => true
   *
   * _.isRegExp('/abc/');
   * // => false
   */
  var isRegExp$1 = nodeIsRegExp ? _baseUnary(nodeIsRegExp) : _baseIsRegExp;

  var isRegExp_1 = isRegExp$1;

  /** Used for built-in method references. */
  var objectProto$e = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$e = objectProto$e.hasOwnProperty;

  /**
   * The base implementation of `_.has` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHas(object, key) {
    return object != null && hasOwnProperty$e.call(object, key);
  }

  var _baseHas = baseHas;

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath(object, path, hasFunc) {
    path = _castPath(path, object);

    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = _toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength_1(length) && _isIndex(key, length) &&
      (isArray_1(object) || isArguments_1(object));
  }

  var _hasPath = hasPath;

  /**
   * Checks if `path` is a direct property of `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = { 'a': { 'b': 2 } };
   * var other = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.has(object, 'a');
   * // => true
   *
   * _.has(object, 'a.b');
   * // => true
   *
   * _.has(object, ['a', 'b']);
   * // => true
   *
   * _.has(other, 'a');
   * // => false
   */
  function has$1(object, path) {
    return object != null && _hasPath(object, path, _baseHas);
  }

  var has_1 = has$1;

  function _extends$2() {
    _extends$2 = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends$2.apply(this, arguments);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  /* eslint no-console:0 */
  var formatRegExp = /%[sdj%]/g;
  var warning$3 = function warning() {}; // don't print warning message when in production env or node runtime

  if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && typeof document !== 'undefined') {
    warning$3 = function warning(type, errors) {
      if (typeof console !== 'undefined' && console.warn) {
        if (errors.every(function (e) {
          return typeof e === 'string';
        })) {
          console.warn(type, errors);
        }
      }
    };
  }

  function convertFieldsError(errors) {
    if (!errors || !errors.length) return null;
    var fields = {};
    errors.forEach(function (error) {
      var field = error.field;
      fields[field] = fields[field] || [];
      fields[field].push(error);
    });
    return fields;
  }
  function format() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var i = 1;
    var f = args[0];
    var len = args.length;

    if (typeof f === 'function') {
      return f.apply(null, args.slice(1));
    }

    if (typeof f === 'string') {
      var str = String(f).replace(formatRegExp, function (x) {
        if (x === '%%') {
          return '%';
        }

        if (i >= len) {
          return x;
        }

        switch (x) {
          case '%s':
            return String(args[i++]);

          case '%d':
            return Number(args[i++]);

          case '%j':
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return '[Circular]';
            }

            break;

          default:
            return x;
        }
      });
      return str;
    }

    return f;
  }

  function isNativeStringType(type) {
    return type === 'string' || type === 'url' || type === 'hex' || type === 'email' || type === 'date' || type === 'pattern';
  }

  function isEmptyValue(value, type) {
    if (value === undefined || value === null) {
      return true;
    }

    if (type === 'array' && Array.isArray(value) && !value.length) {
      return true;
    }

    if (isNativeStringType(type) && typeof value === 'string' && !value) {
      return true;
    }

    return false;
  }

  function asyncParallelArray(arr, func, callback) {
    var results = [];
    var total = 0;
    var arrLength = arr.length;

    function count(errors) {
      results.push.apply(results, errors);
      total++;

      if (total === arrLength) {
        callback(results);
      }
    }

    arr.forEach(function (a) {
      func(a, count);
    });
  }

  function asyncSerialArray(arr, func, callback) {
    var index = 0;
    var arrLength = arr.length;

    function next(errors) {
      if (errors && errors.length) {
        callback(errors);
        return;
      }

      var original = index;
      index = index + 1;

      if (original < arrLength) {
        func(arr[original], next);
      } else {
        callback([]);
      }
    }

    next([]);
  }

  function flattenObjArr(objArr) {
    var ret = [];
    Object.keys(objArr).forEach(function (k) {
      ret.push.apply(ret, objArr[k]);
    });
    return ret;
  }

  var AsyncValidationError = /*#__PURE__*/function (_Error) {
    _inheritsLoose(AsyncValidationError, _Error);

    function AsyncValidationError(errors, fields) {
      var _this;

      _this = _Error.call(this, 'Async Validation Error') || this;
      _this.errors = errors;
      _this.fields = fields;
      return _this;
    }

    return AsyncValidationError;
  }( /*#__PURE__*/_wrapNativeSuper(Error));
  function asyncMap(objArr, option, func, callback) {
    if (option.first) {
      var _pending = new Promise(function (resolve, reject) {
        var next = function next(errors) {
          callback(errors);
          return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve();
        };

        var flattenArr = flattenObjArr(objArr);
        asyncSerialArray(flattenArr, func, next);
      });

      _pending["catch"](function (e) {
        return e;
      });

      return _pending;
    }

    var firstFields = option.firstFields || [];

    if (firstFields === true) {
      firstFields = Object.keys(objArr);
    }

    var objArrKeys = Object.keys(objArr);
    var objArrLength = objArrKeys.length;
    var total = 0;
    var results = [];
    var pending = new Promise(function (resolve, reject) {
      var next = function next(errors) {
        results.push.apply(results, errors);
        total++;

        if (total === objArrLength) {
          callback(results);
          return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve();
        }
      };

      if (!objArrKeys.length) {
        callback(results);
        resolve();
      }

      objArrKeys.forEach(function (key) {
        var arr = objArr[key];

        if (firstFields.indexOf(key) !== -1) {
          asyncSerialArray(arr, func, next);
        } else {
          asyncParallelArray(arr, func, next);
        }
      });
    });
    pending["catch"](function (e) {
      return e;
    });
    return pending;
  }
  function complementError(rule) {
    return function (oe) {
      if (oe && oe.message) {
        oe.field = oe.field || rule.fullField;
        return oe;
      }

      return {
        message: typeof oe === 'function' ? oe() : oe,
        field: oe.field || rule.fullField
      };
    };
  }
  function deepMerge(target, source) {
    if (source) {
      for (var s in source) {
        if (source.hasOwnProperty(s)) {
          var value = source[s];

          if (typeof value === 'object' && typeof target[s] === 'object') {
            target[s] = _extends$2(_extends$2({}, target[s]), value);
          } else {
            target[s] = value;
          }
        }
      }
    }

    return target;
  }

  /**
   *  Rule for validating required fields.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param source The source object being validated.
   *  @param errors An array of errors that this rule may add
   *  validation errors to.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function required(rule, value, source, errors, options, type) {
    if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type || rule.type))) {
      errors.push(format(options.messages.required, rule.fullField));
    }
  }

  /**
   *  Rule for validating whitespace.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param source The source object being validated.
   *  @param errors An array of errors that this rule may add
   *  validation errors to.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function whitespace(rule, value, source, errors, options) {
    if (/^\s+$/.test(value) || value === '') {
      errors.push(format(options.messages.whitespace, rule.fullField));
    }
  }

  /* eslint max-len:0 */

  var pattern = {
    // http://emailregex.com/
    email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    url: new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$", 'i'),
    hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
  };
  var types = {
    integer: function integer(value) {
      return types.number(value) && parseInt(value, 10) === value;
    },
    "float": function float(value) {
      return types.number(value) && !types.integer(value);
    },
    array: function array(value) {
      return Array.isArray(value);
    },
    regexp: function regexp(value) {
      if (value instanceof RegExp) {
        return true;
      }

      try {
        return !!new RegExp(value);
      } catch (e) {
        return false;
      }
    },
    date: function date(value) {
      return typeof value.getTime === 'function' && typeof value.getMonth === 'function' && typeof value.getYear === 'function' && !isNaN(value.getTime());
    },
    number: function number(value) {
      if (isNaN(value)) {
        return false;
      }

      return typeof value === 'number';
    },
    object: function object(value) {
      return typeof value === 'object' && !types.array(value);
    },
    method: function method(value) {
      return typeof value === 'function';
    },
    email: function email(value) {
      return typeof value === 'string' && !!value.match(pattern.email) && value.length < 255;
    },
    url: function url(value) {
      return typeof value === 'string' && !!value.match(pattern.url);
    },
    hex: function hex(value) {
      return typeof value === 'string' && !!value.match(pattern.hex);
    }
  };
  /**
   *  Rule for validating the type of a value.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param source The source object being validated.
   *  @param errors An array of errors that this rule may add
   *  validation errors to.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function type(rule, value, source, errors, options) {
    if (rule.required && value === undefined) {
      required(rule, value, source, errors, options);
      return;
    }

    var custom = ['integer', 'float', 'array', 'regexp', 'object', 'method', 'email', 'number', 'date', 'url', 'hex'];
    var ruleType = rule.type;

    if (custom.indexOf(ruleType) > -1) {
      if (!types[ruleType](value)) {
        errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
      } // straight typeof check

    } else if (ruleType && typeof value !== rule.type) {
      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  }

  /**
   *  Rule for validating minimum and maximum allowed values.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param source The source object being validated.
   *  @param errors An array of errors that this rule may add
   *  validation errors to.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function range(rule, value, source, errors, options) {
    var len = typeof rule.len === 'number';
    var min = typeof rule.min === 'number';
    var max = typeof rule.max === 'number'; // 正则匹配码点范围从U+010000一直到U+10FFFF的文字（补充平面Supplementary Plane）

    var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    var val = value;
    var key = null;
    var num = typeof value === 'number';
    var str = typeof value === 'string';
    var arr = Array.isArray(value);

    if (num) {
      key = 'number';
    } else if (str) {
      key = 'string';
    } else if (arr) {
      key = 'array';
    } // if the value is not of a supported type for range validation
    // the validation rule rule should use the
    // type property to also test for a particular type


    if (!key) {
      return false;
    }

    if (arr) {
      val = value.length;
    }

    if (str) {
      // 处理码点大于U+010000的文字length属性不准确的bug，如"𠮷𠮷𠮷".lenght !== 3
      val = value.replace(spRegexp, '_').length;
    }

    if (len) {
      if (val !== rule.len) {
        errors.push(format(options.messages[key].len, rule.fullField, rule.len));
      }
    } else if (min && !max && val < rule.min) {
      errors.push(format(options.messages[key].min, rule.fullField, rule.min));
    } else if (max && !min && val > rule.max) {
      errors.push(format(options.messages[key].max, rule.fullField, rule.max));
    } else if (min && max && (val < rule.min || val > rule.max)) {
      errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
    }
  }

  var ENUM = 'enum';
  /**
   *  Rule for validating a value exists in an enumerable list.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param source The source object being validated.
   *  @param errors An array of errors that this rule may add
   *  validation errors to.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function enumerable(rule, value, source, errors, options) {
    rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];

    if (rule[ENUM].indexOf(value) === -1) {
      errors.push(format(options.messages[ENUM], rule.fullField, rule[ENUM].join(', ')));
    }
  }

  /**
   *  Rule for validating a regular expression pattern.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param source The source object being validated.
   *  @param errors An array of errors that this rule may add
   *  validation errors to.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function pattern$1(rule, value, source, errors, options) {
    if (rule.pattern) {
      if (rule.pattern instanceof RegExp) {
        // if a RegExp instance is passed, reset `lastIndex` in case its `global`
        // flag is accidentally set to `true`, which in a validation scenario
        // is not necessary and the result might be misleading
        rule.pattern.lastIndex = 0;

        if (!rule.pattern.test(value)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      } else if (typeof rule.pattern === 'string') {
        var _pattern = new RegExp(rule.pattern);

        if (!_pattern.test(value)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      }
    }
  }

  var rules = {
    required: required,
    whitespace: whitespace,
    type: type,
    range: range,
    "enum": enumerable,
    pattern: pattern$1
  };

  /**
   *  Performs validation for string types.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param callback The callback function.
   *  @param source The source object being validated.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function string(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value, 'string') && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options, 'string');

      if (!isEmptyValue(value, 'string')) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
        rules.pattern(rule, value, source, errors, options);

        if (rule.whitespace === true) {
          rules.whitespace(rule, value, source, errors, options);
        }
      }
    }

    callback(errors);
  }

  /**
   *  Validates a function.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param callback The callback function.
   *  @param source The source object being validated.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function method(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (value !== undefined) {
        rules.type(rule, value, source, errors, options);
      }
    }

    callback(errors);
  }

  /**
   *  Validates a number.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param callback The callback function.
   *  @param source The source object being validated.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function number(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (value === '') {
        value = undefined;
      }

      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (value !== undefined) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }

    callback(errors);
  }

  /**
   *  Validates a boolean.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param callback The callback function.
   *  @param source The source object being validated.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function _boolean(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (value !== undefined) {
        rules.type(rule, value, source, errors, options);
      }
    }

    callback(errors);
  }

  /**
   *  Validates the regular expression type.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param callback The callback function.
   *  @param source The source object being validated.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function regexp(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (!isEmptyValue(value)) {
        rules.type(rule, value, source, errors, options);
      }
    }

    callback(errors);
  }

  /**
   *  Validates a number is an integer.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param callback The callback function.
   *  @param source The source object being validated.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function integer(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (value !== undefined) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }

    callback(errors);
  }

  /**
   *  Validates a number is a floating point number.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param callback The callback function.
   *  @param source The source object being validated.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function floatFn(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (value !== undefined) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }

    callback(errors);
  }

  /**
   *  Validates an array.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param callback The callback function.
   *  @param source The source object being validated.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function array(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value, 'array') && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options, 'array');

      if (!isEmptyValue(value, 'array')) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }

    callback(errors);
  }

  /**
   *  Validates an object.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param callback The callback function.
   *  @param source The source object being validated.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function object(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (value !== undefined) {
        rules.type(rule, value, source, errors, options);
      }
    }

    callback(errors);
  }

  var ENUM$1 = 'enum';
  /**
   *  Validates an enumerable list.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param callback The callback function.
   *  @param source The source object being validated.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function enumerable$1(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (value !== undefined) {
        rules[ENUM$1](rule, value, source, errors, options);
      }
    }

    callback(errors);
  }

  /**
   *  Validates a regular expression pattern.
   *
   *  Performs validation when a rule only contains
   *  a pattern property but is not declared as a string type.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param callback The callback function.
   *  @param source The source object being validated.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function pattern$2(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value, 'string') && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (!isEmptyValue(value, 'string')) {
        rules.pattern(rule, value, source, errors, options);
      }
    }

    callback(errors);
  }

  function date(rule, value, callback, source, options) {
    // console.log('integer rule called %j', rule);
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field); // console.log('validate on %s value', value);

    if (validate) {
      if (isEmptyValue(value, 'date') && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (!isEmptyValue(value, 'date')) {
        var dateObject;

        if (value instanceof Date) {
          dateObject = value;
        } else {
          dateObject = new Date(value);
        }

        rules.type(rule, dateObject, source, errors, options);

        if (dateObject) {
          rules.range(rule, dateObject.getTime(), source, errors, options);
        }
      }
    }

    callback(errors);
  }

  function required$1(rule, value, callback, source, options) {
    var errors = [];
    var type = Array.isArray(value) ? 'array' : typeof value;
    rules.required(rule, value, source, errors, options, type);
    callback(errors);
  }

  function type$1(rule, value, callback, source, options) {
    var ruleType = rule.type;
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value, ruleType) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options, ruleType);

      if (!isEmptyValue(value, ruleType)) {
        rules.type(rule, value, source, errors, options);
      }
    }

    callback(errors);
  }

  /**
   *  Performs validation for any type.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param callback The callback function.
   *  @param source The source object being validated.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  function any(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);
    }

    callback(errors);
  }

  var validators = {
    string: string,
    method: method,
    number: number,
    "boolean": _boolean,
    regexp: regexp,
    integer: integer,
    "float": floatFn,
    array: array,
    object: object,
    "enum": enumerable$1,
    pattern: pattern$2,
    date: date,
    url: type$1,
    hex: type$1,
    email: type$1,
    required: required$1,
    any: any
  };

  function newMessages() {
    return {
      "default": 'Validation error on field %s',
      required: '%s is required',
      "enum": '%s must be one of %s',
      whitespace: '%s cannot be empty',
      date: {
        format: '%s date %s is invalid for format %s',
        parse: '%s date could not be parsed, %s is invalid ',
        invalid: '%s date %s is invalid'
      },
      types: {
        string: '%s is not a %s',
        method: '%s is not a %s (function)',
        array: '%s is not an %s',
        object: '%s is not an %s',
        number: '%s is not a %s',
        date: '%s is not a %s',
        "boolean": '%s is not a %s',
        integer: '%s is not an %s',
        "float": '%s is not a %s',
        regexp: '%s is not a valid %s',
        email: '%s is not a valid %s',
        url: '%s is not a valid %s',
        hex: '%s is not a valid %s'
      },
      string: {
        len: '%s must be exactly %s characters',
        min: '%s must be at least %s characters',
        max: '%s cannot be longer than %s characters',
        range: '%s must be between %s and %s characters'
      },
      number: {
        len: '%s must equal %s',
        min: '%s cannot be less than %s',
        max: '%s cannot be greater than %s',
        range: '%s must be between %s and %s'
      },
      array: {
        len: '%s must be exactly %s in length',
        min: '%s cannot be less than %s in length',
        max: '%s cannot be greater than %s in length',
        range: '%s must be between %s and %s in length'
      },
      pattern: {
        mismatch: '%s value %s does not match pattern %s'
      },
      clone: function clone() {
        var cloned = JSON.parse(JSON.stringify(this));
        cloned.clone = this.clone;
        return cloned;
      }
    };
  }
  var messages = newMessages();

  /**
   *  Encapsulates a validation schema.
   *
   *  @param descriptor An object declaring validation rules
   *  for this schema.
   */

  function Schema(descriptor) {
    this.rules = null;
    this._messages = messages;
    this.define(descriptor);
  }

  Schema.prototype = {
    messages: function messages(_messages) {
      if (_messages) {
        this._messages = deepMerge(newMessages(), _messages);
      }

      return this._messages;
    },
    define: function define(rules) {
      if (!rules) {
        throw new Error('Cannot configure a schema with no rules');
      }

      if (typeof rules !== 'object' || Array.isArray(rules)) {
        throw new Error('Rules must be an object');
      }

      this.rules = {};
      var z;
      var item;

      for (z in rules) {
        if (rules.hasOwnProperty(z)) {
          item = rules[z];
          this.rules[z] = Array.isArray(item) ? item : [item];
        }
      }
    },
    validate: function validate(source_, o, oc) {
      var _this = this;

      if (o === void 0) {
        o = {};
      }

      if (oc === void 0) {
        oc = function oc() {};
      }

      var source = source_;
      var options = o;
      var callback = oc;

      if (typeof options === 'function') {
        callback = options;
        options = {};
      }

      if (!this.rules || Object.keys(this.rules).length === 0) {
        if (callback) {
          callback();
        }

        return Promise.resolve();
      }

      function complete(results) {
        var i;
        var errors = [];
        var fields = {};

        function add(e) {
          if (Array.isArray(e)) {
            var _errors;

            errors = (_errors = errors).concat.apply(_errors, e);
          } else {
            errors.push(e);
          }
        }

        for (i = 0; i < results.length; i++) {
          add(results[i]);
        }

        if (!errors.length) {
          errors = null;
          fields = null;
        } else {
          fields = convertFieldsError(errors);
        }

        callback(errors, fields);
      }

      if (options.messages) {
        var messages$1 = this.messages();

        if (messages$1 === messages) {
          messages$1 = newMessages();
        }

        deepMerge(messages$1, options.messages);
        options.messages = messages$1;
      } else {
        options.messages = this.messages();
      }

      var arr;
      var value;
      var series = {};
      var keys = options.keys || Object.keys(this.rules);
      keys.forEach(function (z) {
        arr = _this.rules[z];
        value = source[z];
        arr.forEach(function (r) {
          var rule = r;

          if (typeof rule.transform === 'function') {
            if (source === source_) {
              source = _extends$2({}, source);
            }

            value = source[z] = rule.transform(value);
          }

          if (typeof rule === 'function') {
            rule = {
              validator: rule
            };
          } else {
            rule = _extends$2({}, rule);
          }

          rule.validator = _this.getValidationMethod(rule);
          rule.field = z;
          rule.fullField = rule.fullField || z;
          rule.type = _this.getType(rule);

          if (!rule.validator) {
            return;
          }

          series[z] = series[z] || [];
          series[z].push({
            rule: rule,
            value: value,
            source: source,
            field: z
          });
        });
      });
      var errorFields = {};
      return asyncMap(series, options, function (data, doIt) {
        var rule = data.rule;
        var deep = (rule.type === 'object' || rule.type === 'array') && (typeof rule.fields === 'object' || typeof rule.defaultField === 'object');
        deep = deep && (rule.required || !rule.required && data.value);
        rule.field = data.field;

        function addFullfield(key, schema) {
          return _extends$2(_extends$2({}, schema), {}, {
            fullField: rule.fullField + "." + key
          });
        }

        function cb(e) {
          if (e === void 0) {
            e = [];
          }

          var errors = e;

          if (!Array.isArray(errors)) {
            errors = [errors];
          }

          if (!options.suppressWarning && errors.length) {
            Schema.warning('async-validator:', errors);
          }

          if (errors.length && rule.message) {
            errors = [].concat(rule.message);
          }

          errors = errors.map(complementError(rule));

          if (options.first && errors.length) {
            errorFields[rule.field] = 1;
            return doIt(errors);
          }

          if (!deep) {
            doIt(errors);
          } else {
            // if rule is required but the target object
            // does not exist fail at the rule level and don't
            // go deeper
            if (rule.required && !data.value) {
              if (rule.message) {
                errors = [].concat(rule.message).map(complementError(rule));
              } else if (options.error) {
                errors = [options.error(rule, format(options.messages.required, rule.field))];
              }

              return doIt(errors);
            }

            var fieldsSchema = {};

            if (rule.defaultField) {
              for (var k in data.value) {
                if (data.value.hasOwnProperty(k)) {
                  fieldsSchema[k] = rule.defaultField;
                }
              }
            }

            fieldsSchema = _extends$2(_extends$2({}, fieldsSchema), data.rule.fields);

            for (var f in fieldsSchema) {
              if (fieldsSchema.hasOwnProperty(f)) {
                var fieldSchema = Array.isArray(fieldsSchema[f]) ? fieldsSchema[f] : [fieldsSchema[f]];
                fieldsSchema[f] = fieldSchema.map(addFullfield.bind(null, f));
              }
            }

            var schema = new Schema(fieldsSchema);
            schema.messages(options.messages);

            if (data.rule.options) {
              data.rule.options.messages = options.messages;
              data.rule.options.error = options.error;
            }

            schema.validate(data.value, data.rule.options || options, function (errs) {
              var finalErrors = [];

              if (errors && errors.length) {
                finalErrors.push.apply(finalErrors, errors);
              }

              if (errs && errs.length) {
                finalErrors.push.apply(finalErrors, errs);
              }

              doIt(finalErrors.length ? finalErrors : null);
            });
          }
        }

        var res;

        if (rule.asyncValidator) {
          res = rule.asyncValidator(rule, data.value, cb, data.source, options);
        } else if (rule.validator) {
          res = rule.validator(rule, data.value, cb, data.source, options);

          if (res === true) {
            cb();
          } else if (res === false) {
            cb(rule.message || rule.field + " fails");
          } else if (res instanceof Array) {
            cb(res);
          } else if (res instanceof Error) {
            cb(res.message);
          }
        }

        if (res && res.then) {
          res.then(function () {
            return cb();
          }, function (e) {
            return cb(e);
          });
        }
      }, function (results) {
        complete(results);
      });
    },
    getType: function getType(rule) {
      if (rule.type === undefined && rule.pattern instanceof RegExp) {
        rule.type = 'pattern';
      }

      if (typeof rule.validator !== 'function' && rule.type && !validators.hasOwnProperty(rule.type)) {
        throw new Error(format('Unknown rule type %s', rule.type));
      }

      return rule.type || 'string';
    },
    getValidationMethod: function getValidationMethod(rule) {
      if (typeof rule.validator === 'function') {
        return rule.validator;
      }

      var keys = Object.keys(rule);
      var messageIndex = keys.indexOf('message');

      if (messageIndex !== -1) {
        keys.splice(messageIndex, 1);
      }

      if (keys.length === 1 && keys[0] === 'required') {
        return validators.required;
      }

      return validators[this.getType(rule)] || false;
    }
  };

  Schema.register = function register(type, validator) {
    if (typeof validator !== 'function') {
      throw new Error('Cannot register a validator by type, validator is not a function');
    }

    validators[type] = validator;
  };

  Schema.warning = warning$3;
  Schema.messages = messages;
  Schema.validators = validators;

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get(object, path, defaultValue) {
    var result = object == null ? undefined : _baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  var get_1 = get;

  /**
   * The base implementation of `_.set`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @param {Function} [customizer] The function to customize path creation.
   * @returns {Object} Returns `object`.
   */
  function baseSet(object, path, value, customizer) {
    if (!isObject_1(object)) {
      return object;
    }
    path = _castPath(path, object);

    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = _toKey(path[index]),
          newValue = value;

      if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
        return object;
      }

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;
        if (newValue === undefined) {
          newValue = isObject_1(objValue)
            ? objValue
            : (_isIndex(path[index + 1]) ? [] : {});
        }
      }
      _assignValue(nested, key, newValue);
      nested = nested[key];
    }
    return object;
  }

  var _baseSet = baseSet;

  /**
   * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
   * it's created. Arrays are created for missing index properties while objects
   * are created for all other missing properties. Use `_.setWith` to customize
   * `path` creation.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.set(object, 'a[0].b.c', 4);
   * console.log(object.a[0].b.c);
   * // => 4
   *
   * _.set(object, ['x', '0', 'y', 'z'], 5);
   * console.log(object.x[0].y.z);
   * // => 5
   */
  function set$1(object, path, value) {
    return object == null ? object : _baseSet(object, path, value);
  }

  var set_1 = set$1;

  var Field = function Field(fields) {
    _classCallCheck(this, Field);

    _extends$1(this, fields);
  };

  function isFormField(obj) {
    return obj instanceof Field;
  }

  function createFormField(field) {
    if (isFormField(field)) {
      return field;
    }
    return new Field(field);
  }

  function getDisplayName$2(WrappedComponent) {
    return WrappedComponent.name || 'WrappedComponent';
  }

  function argumentContainer(Container, WrappedComponent) {
    /* eslint no-param-reassign:0 */
    Container.name = 'Form_' + getDisplayName$2(WrappedComponent);
    Container.WrappedComponent = WrappedComponent;
    Container.props = _extends$1({}, Container.props, WrappedComponent.props);
    return Container;
  }

  function identity$2(obj) {
    return obj;
  }

  function flattenArray(arr) {
    return Array.prototype.concat.apply([], arr);
  }

  function treeTraverse() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var tree = arguments[1];
    var isLeafNode = arguments[2];
    var errorMessage = arguments[3];
    var callback = arguments[4];

    if (isLeafNode(path, tree)) {
      callback(path, tree);
    } else if (tree === undefined || tree === null) ; else if (Array.isArray(tree)) {
      tree.forEach(function (subTree, index) {
        return treeTraverse(path + '[' + index + ']', subTree, isLeafNode, errorMessage, callback);
      });
    } else {
      // It's object and not a leaf node
      if ((typeof tree === 'undefined' ? 'undefined' : _typeof(tree)) !== 'object') {
        warning_1(false, errorMessage);
        return;
      }
      Object.keys(tree).forEach(function (subTreeKey) {
        var subTree = tree[subTreeKey];
        treeTraverse('' + path + (path ? '.' : '') + subTreeKey, subTree, isLeafNode, errorMessage, callback);
      });
    }
  }

  function flattenFields(maybeNestedFields, isLeafNode, errorMessage) {
    var fields = {};
    treeTraverse(undefined, maybeNestedFields, isLeafNode, errorMessage, function (path, node) {
      fields[path] = node;
    });
    return fields;
  }

  function normalizeValidateRules(validate, rules, validateTrigger) {
    var validateRules = validate.map(function (item) {
      var newItem = _extends$1({}, item, {
        trigger: item.trigger || []
      });
      if (typeof newItem.trigger === 'string') {
        newItem.trigger = [newItem.trigger];
      }
      return newItem;
    });
    if (rules) {
      validateRules.push({
        trigger: validateTrigger ? [].concat(validateTrigger) : [],
        rules: rules
      });
    }
    return validateRules;
  }

  function getValidateTriggers(validateRules) {
    return validateRules.filter(function (item) {
      return !!item.rules && item.rules.length;
    }).map(function (item) {
      return item.trigger;
    }).reduce(function (pre, curr) {
      return pre.concat(curr);
    }, []);
  }

  function getValueFromEvent(e) {
    // To support custom element
    if (!e || !e.target) {
      return e;
    }
    var target = e.target;

    return target.type === 'checkbox' ? target.checked : target.value;
  }

  function getErrorStrs(errors) {
    if (errors) {
      return errors.map(function (e) {
        if (e && e.message) {
          return e.message;
        }
        return e;
      });
    }
    return errors;
  }

  function getParams(ns, opt, cb) {
    var names = ns;
    var options = opt;
    var callback = cb;
    if (cb === undefined) {
      if (typeof names === 'function') {
        callback = names;
        options = {};
        names = undefined;
      } else if (Array.isArray(names)) {
        if (typeof options === 'function') {
          callback = options;
          options = {};
        } else {
          options = options || {};
        }
      } else {
        callback = options;
        options = names || {};
        names = undefined;
      }
    }
    return {
      names: names,
      options: options,
      callback: callback
    };
  }

  function isEmptyObject(obj) {
    return Object.keys(obj).length === 0;
  }

  function hasRules(validate) {
    if (validate) {
      return validate.some(function (item) {
        return item.rules && item.rules.length;
      });
    }
    return false;
  }

  function startsWith(str, prefix) {
    return str.lastIndexOf(prefix, 0) === 0;
  }

  function partOf(a, b) {
    return b.indexOf(a) === 0 && ['.', '['].indexOf(b[a.length]) !== -1;
  }

  function internalFlattenFields(fields) {
    return flattenFields(fields, function (_, node) {
      return isFormField(node);
    }, 'You must wrap field data with `createFormField`.');
  }

  var FieldsStore = function () {
    function FieldsStore(fields) {
      _classCallCheck(this, FieldsStore);

      _initialiseProps.call(this);

      this.fields = internalFlattenFields(fields);
      this.fieldsMeta = {};
    }

    _createClass(FieldsStore, [{
      key: 'updateFields',
      value: function updateFields(fields) {
        this.fields = internalFlattenFields(fields);
      }
    }, {
      key: 'flattenRegisteredFields',
      value: function flattenRegisteredFields(fields) {
        var validFieldsName = this.getAllFieldsName();
        return flattenFields(fields, function (path) {
          return validFieldsName.indexOf(path) >= 0;
        }, 'You cannot set a form field before rendering a field associated with the value. You can use `getFieldDecorator(id, options)` instead `v-decorator="[id, options]"` to register it before render.');
      }
    }, {
      key: 'setFields',
      value: function setFields(fields) {
        var _this = this;

        var fieldsMeta = this.fieldsMeta;
        var nowFields = _extends$1({}, this.fields, fields);
        var nowValues = {};
        Object.keys(fieldsMeta).forEach(function (f) {
          nowValues[f] = _this.getValueFromFields(f, nowFields);
        });
        Object.keys(nowValues).forEach(function (f) {
          var value = nowValues[f];
          var fieldMeta = _this.getFieldMeta(f);
          if (fieldMeta && fieldMeta.normalize) {
            var nowValue = fieldMeta.normalize(value, _this.getValueFromFields(f, _this.fields), nowValues);
            if (nowValue !== value) {
              nowFields[f] = _extends$1({}, nowFields[f], {
                value: nowValue
              });
            }
          }
        });
        this.fields = nowFields;
      }
    }, {
      key: 'resetFields',
      value: function resetFields(ns) {
        var fields = this.fields;

        var names = ns ? this.getValidFieldsFullName(ns) : this.getAllFieldsName();
        return names.reduce(function (acc, name) {
          var field = fields[name];
          if (field && 'value' in field) {
            acc[name] = {};
          }
          return acc;
        }, {});
      }
    }, {
      key: 'setFieldMeta',
      value: function setFieldMeta(name, meta) {
        this.fieldsMeta[name] = meta;
      }
    }, {
      key: 'setFieldsAsDirty',
      value: function setFieldsAsDirty() {
        var _this2 = this;

        Object.keys(this.fields).forEach(function (name) {
          var field = _this2.fields[name];
          var fieldMeta = _this2.fieldsMeta[name];
          if (field && fieldMeta && hasRules(fieldMeta.validate)) {
            _this2.fields[name] = _extends$1({}, field, {
              dirty: true
            });
          }
        });
      }
    }, {
      key: 'getFieldMeta',
      value: function getFieldMeta(name) {
        this.fieldsMeta[name] = this.fieldsMeta[name] || {};
        return this.fieldsMeta[name];
      }
    }, {
      key: 'getValueFromFields',
      value: function getValueFromFields(name, fields) {
        var field = fields[name];
        if (field && 'value' in field) {
          return field.value;
        }
        var fieldMeta = this.getFieldMeta(name);
        return fieldMeta && fieldMeta.initialValue;
      }
    }, {
      key: 'getValidFieldsName',
      value: function getValidFieldsName() {
        var _this3 = this;

        var fieldsMeta = this.fieldsMeta;

        return fieldsMeta ? Object.keys(fieldsMeta).filter(function (name) {
          return !_this3.getFieldMeta(name).hidden;
        }) : [];
      }
    }, {
      key: 'getAllFieldsName',
      value: function getAllFieldsName() {
        var fieldsMeta = this.fieldsMeta;

        return fieldsMeta ? Object.keys(fieldsMeta) : [];
      }
    }, {
      key: 'getValidFieldsFullName',
      value: function getValidFieldsFullName(maybePartialName) {
        var maybePartialNames = Array.isArray(maybePartialName) ? maybePartialName : [maybePartialName];
        return this.getValidFieldsName().filter(function (fullName) {
          return maybePartialNames.some(function (partialName) {
            return fullName === partialName || startsWith(fullName, partialName) && ['.', '['].indexOf(fullName[partialName.length]) >= 0;
          });
        });
      }
    }, {
      key: 'getFieldValuePropValue',
      value: function getFieldValuePropValue(fieldMeta) {
        var name = fieldMeta.name,
            getValueProps = fieldMeta.getValueProps,
            valuePropName = fieldMeta.valuePropName;

        var field = this.getField(name);
        var fieldValue = 'value' in field ? field.value : fieldMeta.initialValue;
        if (getValueProps) {
          return getValueProps(fieldValue);
        }
        return _defineProperty({}, valuePropName, fieldValue);
      }
    }, {
      key: 'getField',
      value: function getField(name) {
        return _extends$1({}, this.fields[name], {
          name: name
        });
      }
    }, {
      key: 'getNotCollectedFields',
      value: function getNotCollectedFields() {
        var _this4 = this;

        var fieldsName = this.getValidFieldsName();
        return fieldsName.filter(function (name) {
          return !_this4.fields[name];
        }).map(function (name) {
          return {
            name: name,
            dirty: false,
            value: _this4.getFieldMeta(name).initialValue
          };
        }).reduce(function (acc, field) {
          return set_1(acc, field.name, createFormField(field));
        }, {});
      }
    }, {
      key: 'getNestedAllFields',
      value: function getNestedAllFields() {
        var _this5 = this;

        return Object.keys(this.fields).reduce(function (acc, name) {
          return set_1(acc, name, createFormField(_this5.fields[name]));
        }, this.getNotCollectedFields());
      }
    }, {
      key: 'getFieldMember',
      value: function getFieldMember(name, member) {
        return this.getField(name)[member];
      }
    }, {
      key: 'getNestedFields',
      value: function getNestedFields(names, getter) {
        var fields = names || this.getValidFieldsName();
        return fields.reduce(function (acc, f) {
          return set_1(acc, f, getter(f));
        }, {});
      }
    }, {
      key: 'getNestedField',
      value: function getNestedField(name, getter) {
        var fullNames = this.getValidFieldsFullName(name);
        if (fullNames.length === 0 || // Not registered
        fullNames.length === 1 && fullNames[0] === name // Name already is full name.
        ) {
            return getter(name);
          }
        var isArrayValue = fullNames[0][name.length] === '[';
        var suffixNameStartIndex = isArrayValue ? name.length : name.length + 1;
        return fullNames.reduce(function (acc, fullName) {
          return set_1(acc, fullName.slice(suffixNameStartIndex), getter(fullName));
        }, isArrayValue ? [] : {});
      }
    }, {
      key: 'isValidNestedFieldName',


      // @private
      // BG: `a` and `a.b` cannot be use in the same form
      value: function isValidNestedFieldName(name) {
        var names = this.getAllFieldsName();
        return names.every(function (n) {
          return !partOf(n, name) && !partOf(name, n);
        });
      }
    }, {
      key: 'clearField',
      value: function clearField(name) {
        delete this.fields[name];
        delete this.fieldsMeta[name];
      }
    }]);

    return FieldsStore;
  }();

  var _initialiseProps = function _initialiseProps() {
    var _this6 = this;

    this.setFieldsInitialValue = function (initialValues) {
      var flattenedInitialValues = _this6.flattenRegisteredFields(initialValues);
      var fieldsMeta = _this6.fieldsMeta;
      Object.keys(flattenedInitialValues).forEach(function (name) {
        if (fieldsMeta[name]) {
          _this6.setFieldMeta(name, _extends$1({}, _this6.getFieldMeta(name), {
            initialValue: flattenedInitialValues[name]
          }));
        }
      });
    };

    this.getAllValues = function () {
      var fieldsMeta = _this6.fieldsMeta,
          fields = _this6.fields;

      return Object.keys(fieldsMeta).reduce(function (acc, name) {
        return set_1(acc, name, _this6.getValueFromFields(name, fields));
      }, {});
    };

    this.getFieldsValue = function (names) {
      return _this6.getNestedFields(names, _this6.getFieldValue);
    };

    this.getFieldValue = function (name) {
      var fields = _this6.fields;

      return _this6.getNestedField(name, function (fullName) {
        return _this6.getValueFromFields(fullName, fields);
      });
    };

    this.getFieldsError = function (names) {
      return _this6.getNestedFields(names, _this6.getFieldError);
    };

    this.getFieldError = function (name) {
      return _this6.getNestedField(name, function (fullName) {
        return getErrorStrs(_this6.getFieldMember(fullName, 'errors'));
      });
    };

    this.isFieldValidating = function (name) {
      return _this6.getFieldMember(name, 'validating');
    };

    this.isFieldsValidating = function (ns) {
      var names = ns || _this6.getValidFieldsName();
      return names.some(function (n) {
        return _this6.isFieldValidating(n);
      });
    };

    this.isFieldTouched = function (name) {
      return _this6.getFieldMember(name, 'touched');
    };

    this.isFieldsTouched = function (ns) {
      var names = ns || _this6.getValidFieldsName();
      return names.some(function (n) {
        return _this6.isFieldTouched(n);
      });
    };
  };

  function createFieldsStore(fields) {
    return new FieldsStore(fields);
  }

  var DEFAULT_TRIGGER = 'change';

  function createBaseForm() {
    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var mixins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var validateMessages = option.validateMessages,
        onFieldsChange = option.onFieldsChange,
        onValuesChange = option.onValuesChange,
        _option$mapProps = option.mapProps,
        mapProps = _option$mapProps === undefined ? identity$2 : _option$mapProps,
        mapPropsToFields = option.mapPropsToFields,
        fieldNameProp = option.fieldNameProp,
        fieldMetaProp = option.fieldMetaProp,
        fieldDataProp = option.fieldDataProp,
        _option$formPropName = option.formPropName,
        formPropName = _option$formPropName === undefined ? 'form' : _option$formPropName,
        formName = option.name,
        _option$props = option.props,
        props = _option$props === undefined ? {} : _option$props,
        templateContext = option.templateContext;

    return function decorate(WrappedComponent) {
      var formProps = {};
      if (Array.isArray(props)) {
        props.forEach(function (prop) {
          formProps[prop] = VuePropTypes.any;
        });
      } else {
        formProps = props;
      }
      var Form = {
        mixins: [BaseMixin].concat(_toConsumableArray(mixins)),
        props: _extends$1({}, formProps, {
          wrappedComponentRef: VuePropTypes.func.def(function () {})
        }),
        data: function data() {
          var _this = this;

          var fields = mapPropsToFields && mapPropsToFields(this.$props);
          this.fieldsStore = createFieldsStore(fields || {});
          this.templateContext = templateContext;
          this.instances = {};
          this.cachedBind = {};
          this.clearedFieldMetaCache = {};
          this.formItems = {};
          this.renderFields = {};
          this.domFields = {};

          // HACK: https://github.com/ant-design/ant-design/issues/6406
          ['getFieldsValue', 'getFieldValue', 'setFieldsInitialValue', 'getFieldsError', 'getFieldError', 'isFieldValidating', 'isFieldsValidating', 'isFieldsTouched', 'isFieldTouched'].forEach(function (key) {
            _this[key] = function () {
              var _fieldsStore;

              return (_fieldsStore = _this.fieldsStore)[key].apply(_fieldsStore, arguments);
            };
          });

          return {
            submitting: false
          };
        },

        watch: templateContext ? {} : {
          $props: {
            handler: function handler(nextProps) {
              if (mapPropsToFields) {
                this.fieldsStore.updateFields(mapPropsToFields(nextProps));
              }
            },

            deep: true
          }
        },
        mounted: function mounted() {
          this.cleanUpUselessFields();
        },
        updated: function updated() {
          // form updated add for template v-decorator
          this.cleanUpUselessFields();
        },

        methods: {
          updateFields: function updateFields() {
            var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            this.fieldsStore.updateFields(mapPropsToFields(fields));
            if (templateContext) {
              templateContext.$forceUpdate();
            }
          },
          onCollectCommon: function onCollectCommon(name, action, args) {
            var fieldMeta = this.fieldsStore.getFieldMeta(name);
            if (fieldMeta[action]) {
              fieldMeta[action].apply(fieldMeta, _toConsumableArray(args));
            } else if (fieldMeta.originalProps && fieldMeta.originalProps[action]) {
              var _fieldMeta$originalPr;

              (_fieldMeta$originalPr = fieldMeta.originalProps)[action].apply(_fieldMeta$originalPr, _toConsumableArray(args));
            }
            var value = fieldMeta.getValueFromEvent ? fieldMeta.getValueFromEvent.apply(fieldMeta, _toConsumableArray(args)) : getValueFromEvent.apply(undefined, _toConsumableArray(args));
            if (onValuesChange && value !== this.fieldsStore.getFieldValue(name)) {
              var valuesAll = this.fieldsStore.getAllValues();
              var valuesAllSet = {};
              valuesAll[name] = value;
              Object.keys(valuesAll).forEach(function (key) {
                return set_1(valuesAllSet, key, valuesAll[key]);
              });
              onValuesChange(_extends$1(_defineProperty({}, formPropName, this.getForm()), this.$props), set_1({}, name, value), valuesAllSet);
            }
            var field = this.fieldsStore.getField(name);
            return { name: name, field: _extends$1({}, field, { value: value, touched: true }), fieldMeta: fieldMeta };
          },
          onCollect: function onCollect(name_, action) {
            for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
              args[_key - 2] = arguments[_key];
            }

            var _onCollectCommon = this.onCollectCommon(name_, action, args),
                name = _onCollectCommon.name,
                field = _onCollectCommon.field,
                fieldMeta = _onCollectCommon.fieldMeta;

            var validate = fieldMeta.validate;

            this.fieldsStore.setFieldsAsDirty();
            var newField = _extends$1({}, field, {
              dirty: hasRules(validate)
            });
            this.setFields(_defineProperty({}, name, newField));
          },
          onCollectValidate: function onCollectValidate(name_, action) {
            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
              args[_key2 - 2] = arguments[_key2];
            }

            var _onCollectCommon2 = this.onCollectCommon(name_, action, args),
                field = _onCollectCommon2.field,
                fieldMeta = _onCollectCommon2.fieldMeta;

            var newField = _extends$1({}, field, {
              dirty: true
            });
            this.fieldsStore.setFieldsAsDirty();
            this.validateFieldsInternal([newField], {
              action: action,
              options: {
                firstFields: !!fieldMeta.validateFirst
              }
            });
          },
          getCacheBind: function getCacheBind(name, action, fn) {
            if (!this.cachedBind[name]) {
              this.cachedBind[name] = {};
            }
            var cache = this.cachedBind[name];
            if (!cache[action] || cache[action].oriFn !== fn) {
              cache[action] = {
                fn: fn.bind(this, name, action),
                oriFn: fn
              };
            }
            return cache[action].fn;
          },
          getFieldDecorator: function getFieldDecorator(name, fieldOption, formItem) {
            var _this2 = this;

            var _getFieldProps = this.getFieldProps(name, fieldOption),
                props = _getFieldProps.props,
                restProps = _objectWithoutProperties(_getFieldProps, ['props']);

            this.formItems[name] = formItem;
            return function (fieldElem) {
              // We should put field in record if it is rendered
              _this2.renderFields[name] = true;

              var fieldMeta = _this2.fieldsStore.getFieldMeta(name);
              var originalProps = getOptionProps(fieldElem);
              var originalEvents = getEvents(fieldElem);
              if (process.env.NODE_ENV !== 'production') {
                var valuePropName = fieldMeta.valuePropName;
                warning_1(!slotHasProp(fieldElem, valuePropName), '`getFieldDecorator` will override `' + valuePropName + '`, ' + ('so please don\'t set `' + valuePropName + ' and v-model` directly ') + 'and use `setFieldsValue` to set it.');
                warning_1(!(!slotHasProp(fieldElem, valuePropName) && valuePropName in originalProps && !(fieldOption && 'initialValue' in fieldOption)), getComponentName(fieldElem.componentOptions) + ' `default value` can not collect, ' + ' please use `option.initialValue` to set default value.');
                var defaultValuePropName = 'default' + valuePropName[0].toUpperCase() + valuePropName.slice(1);
                warning_1(!slotHasProp(fieldElem, defaultValuePropName), '`' + defaultValuePropName + '` is invalid ' + ('for `getFieldDecorator` will set `' + valuePropName + '`,') + ' please use `option.initialValue` instead.');
              }
              fieldMeta.originalProps = originalProps;
              // fieldMeta.ref = fieldElem.data && fieldElem.data.ref
              var newProps = _extends$1({
                props: _extends$1({}, props, _this2.fieldsStore.getFieldValuePropValue(fieldMeta))
              }, restProps);
              newProps.domProps.value = newProps.props.value;
              var newEvents = {};
              Object.keys(newProps.on).forEach(function (key) {
                if (originalEvents[key]) {
                  var triggerEvents = newProps.on[key];
                  newEvents[key] = function () {
                    originalEvents[key].apply(originalEvents, arguments);
                    triggerEvents.apply(undefined, arguments);
                  };
                } else {
                  newEvents[key] = newProps.on[key];
                }
              });
              return cloneElement(fieldElem, _extends$1({}, newProps, { on: newEvents }));
            };
          },
          getFieldProps: function getFieldProps(name) {
            var _this3 = this;

            var usersFieldOption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (!name) {
              throw new Error('Must call `getFieldProps` with valid name string!');
            }
            if (process.env.NODE_ENV !== 'production') {
              warning_1(this.fieldsStore.isValidNestedFieldName(name), 'One field name cannot be part of another, e.g. `a` and `a.b`. Check field: ' + name);
              warning_1(!('exclusive' in usersFieldOption), '`option.exclusive` of `getFieldProps`|`getFieldDecorator` had been remove.');
            }

            delete this.clearedFieldMetaCache[name];

            var fieldOption = _extends$1({
              name: name,
              trigger: DEFAULT_TRIGGER,
              valuePropName: 'value',
              validate: []
            }, usersFieldOption);

            var rules = fieldOption.rules,
                trigger = fieldOption.trigger,
                _fieldOption$validate = fieldOption.validateTrigger,
                validateTrigger = _fieldOption$validate === undefined ? trigger : _fieldOption$validate,
                validate = fieldOption.validate;


            var fieldMeta = this.fieldsStore.getFieldMeta(name);
            if ('initialValue' in fieldOption) {
              fieldMeta.initialValue = fieldOption.initialValue;
            }

            var inputProps = _extends$1({}, this.fieldsStore.getFieldValuePropValue(fieldOption));
            var inputListeners = {};
            var inputAttrs = {};
            if (fieldNameProp) {
              inputProps[fieldNameProp] = formName ? formName + '_' + name : name;
            }

            var validateRules = normalizeValidateRules(validate, rules, validateTrigger);
            var validateTriggers = getValidateTriggers(validateRules);
            validateTriggers.forEach(function (action) {
              if (inputListeners[action]) return;
              inputListeners[action] = _this3.getCacheBind(name, action, _this3.onCollectValidate);
            });

            // make sure that the value will be collect
            if (trigger && validateTriggers.indexOf(trigger) === -1) {
              inputListeners[trigger] = this.getCacheBind(name, trigger, this.onCollect);
            }

            var meta = _extends$1({}, fieldMeta, fieldOption, {
              validate: validateRules
            });
            this.fieldsStore.setFieldMeta(name, meta);
            if (fieldMetaProp) {
              inputAttrs[fieldMetaProp] = meta;
            }

            if (fieldDataProp) {
              inputAttrs[fieldDataProp] = this.fieldsStore.getField(name);
            }
            // This field is rendered, record it
            this.renderFields[name] = true;
            return {
              props: omit_1(inputProps, ['id']),
              // id: inputProps.id,
              domProps: {
                value: inputProps.value
              },
              attrs: _extends$1({}, inputAttrs, {
                id: inputProps.id
              }),
              directives: [{
                name: 'ant-ref',
                value: this.getCacheBind(name, name + '__ref', this.saveRef)
              }],
              on: inputListeners
            };
          },
          getFieldInstance: function getFieldInstance(name) {
            return this.instances[name];
          },
          getRules: function getRules(fieldMeta, action) {
            var actionRules = fieldMeta.validate.filter(function (item) {
              return !action || item.trigger.indexOf(action) >= 0;
            }).map(function (item) {
              return item.rules;
            });
            return flattenArray(actionRules);
          },
          setFields: function setFields(maybeNestedFields, callback) {
            var _this4 = this;

            var fields = this.fieldsStore.flattenRegisteredFields(maybeNestedFields);
            this.fieldsStore.setFields(fields);
            var changedFields = Object.keys(fields).reduce(function (acc, name) {
              return set_1(acc, name, _this4.fieldsStore.getField(name));
            }, {});
            if (onFieldsChange) {
              var _changedFields = Object.keys(fields).reduce(function (acc, name) {
                return set_1(acc, name, _this4.fieldsStore.getField(name));
              }, {});
              onFieldsChange(this, _changedFields, this.fieldsStore.getNestedAllFields());
            }
            var formContext = templateContext || this;
            var allUpdate = false;
            Object.keys(changedFields).forEach(function (key) {
              var formItem = _this4.formItems[key];
              formItem = typeof formItem === 'function' ? formItem() : formItem;
              if (formItem && formItem.itemSelfUpdate) {
                formItem.$forceUpdate();
              } else {
                allUpdate = true;
              }
            });
            if (allUpdate) {
              formContext.$forceUpdate();
            }
            this.$nextTick(function () {
              callback && callback();
            });
          },
          setFieldsValue: function setFieldsValue(changedValues, callback) {
            var fieldsMeta = this.fieldsStore.fieldsMeta;

            var values = this.fieldsStore.flattenRegisteredFields(changedValues);
            var newFields = Object.keys(values).reduce(function (acc, name) {
              var isRegistered = fieldsMeta[name];
              if (process.env.NODE_ENV !== 'production') {
                warning_1(isRegistered, 'Cannot use `setFieldsValue` until ' + 'you use `getFieldDecorator` or `getFieldProps` to register it.');
              }
              if (isRegistered) {
                var value = values[name];
                acc[name] = {
                  value: value
                };
              }
              return acc;
            }, {});
            this.setFields(newFields, callback);
            if (onValuesChange) {
              var allValues = this.fieldsStore.getAllValues();
              onValuesChange(_extends$1(_defineProperty({}, formPropName, this.getForm()), this.$props), changedValues, allValues);
            }
          },
          saveRef: function saveRef(name, _, component) {
            if (!component) {
              var fieldMeta = this.fieldsStore.getFieldMeta(name);
              if (!fieldMeta.preserve) {
                // after destroy, delete data
                this.clearedFieldMetaCache[name] = {
                  field: this.fieldsStore.getField(name),
                  meta: fieldMeta
                };
                this.clearField(name);
              }
              delete this.domFields[name];
              return;
            }
            this.domFields[name] = true;
            this.recoverClearedField(name);
            // const fieldMeta = this.fieldsStore.getFieldMeta(name)
            // if (fieldMeta) {
            //   const ref = fieldMeta.ref
            //   if (ref) {
            //     if (typeof ref === 'string') {
            //       throw new Error(`can not set ref string for ${name}`)
            //     }
            //     ref(component)
            //   }
            // }
            this.instances[name] = component;
          },
          cleanUpUselessFields: function cleanUpUselessFields() {
            var _this5 = this;

            var fieldList = this.fieldsStore.getAllFieldsName();
            var removedList = fieldList.filter(function (field) {
              var fieldMeta = _this5.fieldsStore.getFieldMeta(field);
              return !_this5.renderFields[field] && !_this5.domFields[field] && !fieldMeta.preserve;
            });
            if (removedList.length) {
              removedList.forEach(this.clearField);
            }
            this.renderFields = {};
          },
          clearField: function clearField(name) {
            this.fieldsStore.clearField(name);
            delete this.instances[name];
            delete this.cachedBind[name];
          },
          resetFields: function resetFields(ns) {
            var _this6 = this;

            var newFields = this.fieldsStore.resetFields(ns);
            if (Object.keys(newFields).length > 0) {
              this.setFields(newFields);
            }
            if (ns) {
              var names = Array.isArray(ns) ? ns : [ns];
              names.forEach(function (name) {
                return delete _this6.clearedFieldMetaCache[name];
              });
            } else {
              this.clearedFieldMetaCache = {};
            }
          },
          recoverClearedField: function recoverClearedField(name) {
            if (this.clearedFieldMetaCache[name]) {
              this.fieldsStore.setFields(_defineProperty({}, name, this.clearedFieldMetaCache[name].field));
              this.fieldsStore.setFieldMeta(name, this.clearedFieldMetaCache[name].meta);
              delete this.clearedFieldMetaCache[name];
            }
          },
          validateFieldsInternal: function validateFieldsInternal(fields, _ref, callback) {
            var _this7 = this;

            var fieldNames = _ref.fieldNames,
                action = _ref.action,
                _ref$options = _ref.options,
                options = _ref$options === undefined ? {} : _ref$options;

            var allRules = {};
            var allValues = {};
            var allFields = {};
            var alreadyErrors = {};
            fields.forEach(function (field) {
              var name = field.name;
              if (options.force !== true && field.dirty === false) {
                if (field.errors) {
                  set_1(alreadyErrors, name, { errors: field.errors });
                }
                return;
              }
              var fieldMeta = _this7.fieldsStore.getFieldMeta(name);
              var newField = _extends$1({}, field);
              newField.errors = undefined;
              newField.validating = true;
              newField.dirty = true;
              allRules[name] = _this7.getRules(fieldMeta, action);
              allValues[name] = newField.value;
              allFields[name] = newField;
            });
            this.setFields(allFields);
            // in case normalize
            Object.keys(allValues).forEach(function (f) {
              allValues[f] = _this7.fieldsStore.getFieldValue(f);
            });
            if (callback && isEmptyObject(allFields)) {
              callback(isEmptyObject(alreadyErrors) ? null : alreadyErrors, this.fieldsStore.getFieldsValue(fieldNames));
              return;
            }
            var validator = new Schema(allRules);
            if (validateMessages) {
              validator.messages(validateMessages);
            }
            validator.validate(allValues, options, function (errors) {
              var errorsGroup = _extends$1({}, alreadyErrors);
              if (errors && errors.length) {
                errors.forEach(function (e) {
                  var errorFieldName = e.field;
                  var fieldName = errorFieldName;

                  // Handle using array validation rule.
                  // ref: https://github.com/ant-design/ant-design/issues/14275
                  Object.keys(allRules).some(function (ruleFieldName) {
                    var rules = allRules[ruleFieldName] || [];

                    // Exist if match rule
                    if (ruleFieldName === errorFieldName) {
                      fieldName = ruleFieldName;
                      return true;
                    }

                    // Skip if not match array type
                    if (rules.every(function (_ref2) {
                      var type = _ref2.type;
                      return type !== 'array';
                    }) && errorFieldName.indexOf(ruleFieldName) !== 0) {
                      return false;
                    }

                    // Exist if match the field name
                    var restPath = errorFieldName.slice(ruleFieldName.length + 1);
                    if (/^\d+$/.test(restPath)) {
                      fieldName = ruleFieldName;
                      return true;
                    }

                    return false;
                  });

                  var field = get_1(errorsGroup, fieldName);
                  if ((typeof field === 'undefined' ? 'undefined' : _typeof(field)) !== 'object' || Array.isArray(field)) {
                    set_1(errorsGroup, fieldName, { errors: [] });
                  }
                  var fieldErrors = get_1(errorsGroup, fieldName.concat('.errors'));
                  fieldErrors.push(e);
                });
              }
              var expired = [];
              var nowAllFields = {};
              Object.keys(allRules).forEach(function (name) {
                var fieldErrors = get_1(errorsGroup, name);
                var nowField = _this7.fieldsStore.getField(name);
                // avoid concurrency problems
                if (!eq_1(nowField.value, allValues[name])) {
                  expired.push({
                    name: name
                  });
                } else {
                  nowField.errors = fieldErrors && fieldErrors.errors;
                  nowField.value = allValues[name];
                  nowField.validating = false;
                  nowField.dirty = false;
                  nowAllFields[name] = nowField;
                }
              });
              _this7.setFields(nowAllFields);
              if (callback) {
                if (expired.length) {
                  expired.forEach(function (_ref3) {
                    var name = _ref3.name;

                    var fieldErrors = [{
                      message: name + ' need to revalidate',
                      field: name
                    }];
                    set_1(errorsGroup, name, {
                      expired: true,
                      errors: fieldErrors
                    });
                  });
                }

                callback(isEmptyObject(errorsGroup) ? null : errorsGroup, _this7.fieldsStore.getFieldsValue(fieldNames));
              }
            });
          },
          validateFields: function validateFields(ns, opt, cb) {
            var _this8 = this;

            var pending = new Promise(function (resolve, reject) {
              var _getParams = getParams(ns, opt, cb),
                  names = _getParams.names,
                  options = _getParams.options;

              var _getParams2 = getParams(ns, opt, cb),
                  callback = _getParams2.callback;

              if (!callback || typeof callback === 'function') {
                var oldCb = callback;
                callback = function callback(errors, values) {
                  if (oldCb) {
                    oldCb(errors, values);
                  } else if (errors) {
                    reject({ errors: errors, values: values });
                  } else {
                    resolve(values);
                  }
                };
              }
              var fieldNames = names ? _this8.fieldsStore.getValidFieldsFullName(names) : _this8.fieldsStore.getValidFieldsName();
              var fields = fieldNames.filter(function (name) {
                var fieldMeta = _this8.fieldsStore.getFieldMeta(name);
                return hasRules(fieldMeta.validate);
              }).map(function (name) {
                var field = _this8.fieldsStore.getField(name);
                field.value = _this8.fieldsStore.getFieldValue(name);
                return field;
              });
              if (!fields.length) {
                callback(null, _this8.fieldsStore.getFieldsValue(fieldNames));
                return;
              }
              if (!('firstFields' in options)) {
                options.firstFields = fieldNames.filter(function (name) {
                  var fieldMeta = _this8.fieldsStore.getFieldMeta(name);
                  return !!fieldMeta.validateFirst;
                });
              }
              _this8.validateFieldsInternal(fields, {
                fieldNames: fieldNames,
                options: options
              }, callback);
            });
            pending['catch'](function (e) {
              if (console.error && process.env.NODE_ENV !== 'production') {
                console.error(e);
              }
              return e;
            });
            return pending;
          },
          isSubmitting: function isSubmitting() {
            if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {
              warning_1(false, '`isSubmitting` is deprecated. ' + "Actually, it's more convenient to handle submitting status by yourself.");
            }
            return this.submitting;
          },
          submit: function submit(callback) {
            var _this9 = this;

            if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {
              warning_1(false, '`submit` is deprecated. ' + "Actually, it's more convenient to handle submitting status by yourself.");
            }
            var fn = function fn() {
              _this9.setState({
                submitting: false
              });
            };
            this.setState({
              submitting: true
            });
            callback(fn);
          }
        },

        render: function render() {
          var h = arguments[0];
          var $slots = this.$slots,
              $scopedSlots = this.$scopedSlots;

          var formProps = _defineProperty({}, formPropName, this.getForm());

          var _getOptionProps = getOptionProps(this),
              wrappedComponentRef = _getOptionProps.wrappedComponentRef,
              restProps = _objectWithoutProperties(_getOptionProps, ['wrappedComponentRef']);

          var wrappedComponentProps = {
            props: mapProps.call(this, _extends$1({}, formProps, restProps)),
            on: getListeners(this),
            ref: 'WrappedComponent',
            directives: [{
              name: 'ant-ref',
              value: wrappedComponentRef
            }]
          };
          if (Object.keys($scopedSlots).length) {
            wrappedComponentProps.scopedSlots = $scopedSlots;
          }
          var slotsKey = Object.keys($slots);
          return WrappedComponent ? h(
            WrappedComponent,
            wrappedComponentProps,
            [slotsKey.length ? slotsKey.map(function (name) {
              return h(
                'template',
                { slot: name },
                [$slots[name]]
              );
            }) : null]
          ) : null;
        }
      };
      if (!WrappedComponent) return Form;
      if (Array.isArray(WrappedComponent.props)) {
        var newProps = {};
        WrappedComponent.props.forEach(function (prop) {
          newProps[prop] = VuePropTypes.any;
        });
        newProps[formPropName] = Object;
        WrappedComponent.props = newProps;
      } else {
        WrappedComponent.props = WrappedComponent.props || {};
        if (!(formPropName in WrappedComponent.props)) {
          WrappedComponent.props[formPropName] = Object;
        }
      }
      return argumentContainer(Form, WrappedComponent);
    };
  }

  var mixin = {
    methods: {
      getForm: function getForm() {
        return {
          getFieldsValue: this.fieldsStore.getFieldsValue,
          getFieldValue: this.fieldsStore.getFieldValue,
          getFieldInstance: this.getFieldInstance,
          setFieldsValue: this.setFieldsValue,
          setFields: this.setFields,
          setFieldsInitialValue: this.fieldsStore.setFieldsInitialValue,
          getFieldDecorator: this.getFieldDecorator,
          getFieldProps: this.getFieldProps,
          getFieldsError: this.fieldsStore.getFieldsError,
          getFieldError: this.fieldsStore.getFieldError,
          isFieldValidating: this.fieldsStore.isFieldValidating,
          isFieldsValidating: this.fieldsStore.isFieldsValidating,
          isFieldsTouched: this.fieldsStore.isFieldsTouched,
          isFieldTouched: this.fieldsStore.isFieldTouched,
          isSubmitting: this.isSubmitting,
          submit: this.submit,
          validateFields: this.validateFields,
          resetFields: this.resetFields
        };
      }
    }
  };

  function computedStyle(el, prop) {
    var getComputedStyle = window.getComputedStyle;
    var style =
    // If we have getComputedStyle
    getComputedStyle ? // Query it
    // TODO: From CSS-Query notes, we might need (node, null) for FF
    getComputedStyle(el) : // Otherwise, we are in IE and use currentStyle
    el.currentStyle;
    if (style) {
      return style[
      // Switch to camelCase for CSSOM
      // DEV: Grabbed from jQuery
      // https://github.com/jquery/jquery/blob/1.9-stable/src/css.js#L191-L194
      // https://github.com/jquery/jquery/blob/1.9-stable/src/core.js#L593-L597
      prop.replace(/-(\w)/gi, function (word, letter) {
        return letter.toUpperCase();
      })];
    }
    return undefined;
  }

  function getScrollableContainer(n) {
    var node = n;
    var nodeName = void 0;
    /* eslint no-cond-assign:0 */
    while ((nodeName = node.nodeName.toLowerCase()) !== 'body') {
      var overflowY = computedStyle(node, 'overflowY');
      // https://stackoverflow.com/a/36900407/3040605
      if (node !== n && (overflowY === 'auto' || overflowY === 'scroll') && node.scrollHeight > node.clientHeight) {
        return node;
      }
      node = node.parentNode;
    }
    return nodeName === 'body' ? node.ownerDocument : node;
  }

  var mixin$1 = {
    methods: {
      getForm: function getForm() {
        return _extends$1({}, mixin.methods.getForm.call(this), {
          validateFieldsAndScroll: this.validateFieldsAndScroll
        });
      },
      validateFieldsAndScroll: function validateFieldsAndScroll(ns, opt, cb) {
        var _this = this;

        var _getParams = getParams(ns, opt, cb),
            names = _getParams.names,
            callback = _getParams.callback,
            options = _getParams.options;

        var newCb = function newCb(error, values) {
          if (error) {
            var validNames = _this.fieldsStore.getValidFieldsName();
            var firstNode = void 0;
            var firstTop = void 0;
            validNames.forEach(function (name) {
              if (has_1(error, name)) {
                var instance = _this.getFieldInstance(name);
                if (instance) {
                  var node = instance.$el || instance.elm;
                  var top = node.getBoundingClientRect().top;
                  if (node.type !== 'hidden' && (firstTop === undefined || firstTop > top)) {
                    firstTop = top;
                    firstNode = node;
                  }
                }
              }
            });

            if (firstNode) {
              var c = options.container || getScrollableContainer(firstNode);
              scrollIntoView(firstNode, c, _extends$1({
                onlyScrollIfNeeded: true
              }, options.scroll));
            }
          }

          if (typeof callback === 'function') {
            callback(error, values);
          }
        };

        return this.validateFields(names, options, newCb);
      }
    }
  };

  function createDOMForm(option) {
    return createBaseForm(_extends$1({}, option), [mixin$1]);
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED$2);
    return this;
  }

  var _setCacheAdd = setCacheAdd;

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  var _setCacheHas = setCacheHas;

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new _MapCache;
    while (++index < length) {
      this.add(values[index]);
    }
  }

  // Add methods to `SetCache`.
  SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
  SetCache.prototype.has = _setCacheHas;

  var _SetCache = SetCache;

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  var _arraySome = arraySome;

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  var _cacheHas = cacheHas;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1,
        result = true,
        seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new _SetCache : undefined;

    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, arrValue, index, other, array, stack)
          : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!_arraySome(other, function(othValue, othIndex) {
              if (!_cacheHas(seen, othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
          result = false;
          break;
        }
      } else if (!(
            arrValue === othValue ||
              equalFunc(arrValue, othValue, bitmask, customizer, stack)
          )) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  var _equalArrays = equalArrays;

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  var _mapToArray = mapToArray;

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  var _setToArray = setToArray;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$1 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;

  /** `Object#toString` result references. */
  var boolTag$3 = '[object Boolean]',
      dateTag$3 = '[object Date]',
      errorTag$2 = '[object Error]',
      mapTag$5 = '[object Map]',
      numberTag$3 = '[object Number]',
      regexpTag$4 = '[object RegExp]',
      setTag$5 = '[object Set]',
      stringTag$3 = '[object String]',
      symbolTag$3 = '[object Symbol]';

  var arrayBufferTag$3 = '[object ArrayBuffer]',
      dataViewTag$4 = '[object DataView]';

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag$4:
        if ((object.byteLength != other.byteLength) ||
            (object.byteOffset != other.byteOffset)) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag$3:
        if ((object.byteLength != other.byteLength) ||
            !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
          return false;
        }
        return true;

      case boolTag$3:
      case dateTag$3:
      case numberTag$3:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq_1(+object, +other);

      case errorTag$2:
        return object.name == other.name && object.message == other.message;

      case regexpTag$4:
      case stringTag$3:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == (other + '');

      case mapTag$5:
        var convert = _mapToArray;

      case setTag$5:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
        convert || (convert = _setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG$1;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag$3:
        if (symbolValueOf$1) {
          return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
        }
    }
    return false;
  }

  var _equalByTag = equalByTag;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$2 = 1;

  /** Used for built-in method references. */
  var objectProto$f = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$f = objectProto$f.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
        objProps = _getAllKeys(object),
        objLength = objProps.length,
        othProps = _getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$f.call(other, key))) {
        return false;
      }
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, objValue, key, other, object, stack)
          : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  var _equalObjects = equalObjects;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$3 = 1;

  /** `Object#toString` result references. */
  var argsTag$3 = '[object Arguments]',
      arrayTag$2 = '[object Array]',
      objectTag$4 = '[object Object]';

  /** Used for built-in method references. */
  var objectProto$g = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$g = objectProto$g.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray_1(object),
        othIsArr = isArray_1(other),
        objTag = objIsArr ? arrayTag$2 : _getTag(object),
        othTag = othIsArr ? arrayTag$2 : _getTag(other);

    objTag = objTag == argsTag$3 ? objectTag$4 : objTag;
    othTag = othTag == argsTag$3 ? objectTag$4 : othTag;

    var objIsObj = objTag == objectTag$4,
        othIsObj = othTag == objectTag$4,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer_1(object)) {
      if (!isBuffer_1(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new _Stack);
      return (objIsArr || isTypedArray_1(object))
        ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack)
        : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
      var objIsWrapped = objIsObj && hasOwnProperty$g.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty$g.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        stack || (stack = new _Stack);
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new _Stack);
    return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  var _baseIsEqualDeep = baseIsEqualDeep;

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObjectLike_1(value) && !isObjectLike_1(other))) {
      return value !== value && other !== other;
    }
    return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  var _baseIsEqual = baseIsEqual;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$4 = 1,
      COMPARE_UNORDERED_FLAG$2 = 2;

  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if ((noCustomizer && data[2])
            ? data[1] !== object[data[0]]
            : !(data[0] in object)
          ) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new _Stack;
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === undefined
              ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$4 | COMPARE_UNORDERED_FLAG$2, customizer, stack)
              : result
            )) {
          return false;
        }
      }
    }
    return true;
  }

  var _baseIsMatch = baseIsMatch;

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable(value) {
    return value === value && !isObject_1(value);
  }

  var _isStrictComparable = isStrictComparable;

  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */
  function getMatchData(object) {
    var result = keys_1(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];

      result[length] = [key, value, _isStrictComparable(value)];
    }
    return result;
  }

  var _getMatchData = getMatchData;

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue &&
        (srcValue !== undefined || (key in Object(object)));
    };
  }

  var _matchesStrictComparable = matchesStrictComparable;

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatches(source) {
    var matchData = _getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return _matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || _baseIsMatch(object, source, matchData);
    };
  }

  var _baseMatches = baseMatches;

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  var _baseHasIn = baseHasIn;

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */
  function hasIn(object, path) {
    return object != null && _hasPath(object, path, _baseHasIn);
  }

  var hasIn_1 = hasIn;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$5 = 1,
      COMPARE_UNORDERED_FLAG$3 = 2;

  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatchesProperty(path, srcValue) {
    if (_isKey(path) && _isStrictComparable(srcValue)) {
      return _matchesStrictComparable(_toKey(path), srcValue);
    }
    return function(object) {
      var objValue = get_1(object, path);
      return (objValue === undefined && objValue === srcValue)
        ? hasIn_1(object, path)
        : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$5 | COMPARE_UNORDERED_FLAG$3);
    };
  }

  var _baseMatchesProperty = baseMatchesProperty;

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  var _baseProperty = baseProperty;

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyDeep(path) {
    return function(object) {
      return _baseGet(object, path);
    };
  }

  var _basePropertyDeep = basePropertyDeep;

  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */
  function property(path) {
    return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);
  }

  var property_1 = property;

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */
  function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }
    if (value == null) {
      return identity_1;
    }
    if (typeof value == 'object') {
      return isArray_1(value)
        ? _baseMatchesProperty(value[0], value[1])
        : _baseMatches(value);
    }
    return property_1(value);
  }

  var _baseIteratee = baseIteratee;

  /**
   * Creates a `_.find` or `_.findLast` function.
   *
   * @private
   * @param {Function} findIndexFunc The function to find the collection index.
   * @returns {Function} Returns the new find function.
   */
  function createFind(findIndexFunc) {
    return function(collection, predicate, fromIndex) {
      var iterable = Object(collection);
      if (!isArrayLike_1(collection)) {
        var iteratee = _baseIteratee(predicate);
        collection = keys_1(collection);
        predicate = function(key) { return iteratee(iterable[key], key, iterable); };
      }
      var index = findIndexFunc(collection, predicate, fromIndex);
      return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
    };
  }

  var _createFind = createFind;

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  var _baseFindIndex = baseFindIndex;

  /** Used as references for various `Number` constants. */
  var INFINITY$2 = 1 / 0,
      MAX_INTEGER = 1.7976931348623157e+308;

  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber_1(value);
    if (value === INFINITY$2 || value === -INFINITY$2) {
      var sign = (value < 0 ? -1 : 1);
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }

  var toFinite_1 = toFinite;

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */
  function toInteger(value) {
    var result = toFinite_1(value),
        remainder = result % 1;

    return result === result ? (remainder ? result - remainder : result) : 0;
  }

  var toInteger_1 = toInteger;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$2 = Math.max;

  /**
   * This method is like `_.find` except that it returns the index of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.findIndex(users, function(o) { return o.user == 'barney'; });
   * // => 0
   *
   * // The `_.matches` iteratee shorthand.
   * _.findIndex(users, { 'user': 'fred', 'active': false });
   * // => 1
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findIndex(users, ['active', false]);
   * // => 0
   *
   * // The `_.property` iteratee shorthand.
   * _.findIndex(users, 'active');
   * // => 2
   */
  function findIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return -1;
    }
    var index = fromIndex == null ? 0 : toInteger_1(fromIndex);
    if (index < 0) {
      index = nativeMax$2(length + index, 0);
    }
    return _baseFindIndex(array, _baseIteratee(predicate), index);
  }

  var findIndex_1 = findIndex;

  /**
   * Iterates over elements of `collection`, returning the first element
   * `predicate` returns truthy for. The predicate is invoked with three
   * arguments: (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {*} Returns the matched element, else `undefined`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36, 'active': true },
   *   { 'user': 'fred',    'age': 40, 'active': false },
   *   { 'user': 'pebbles', 'age': 1,  'active': true }
   * ];
   *
   * _.find(users, function(o) { return o.age < 40; });
   * // => object for 'barney'
   *
   * // The `_.matches` iteratee shorthand.
   * _.find(users, { 'age': 1, 'active': true });
   * // => object for 'pebbles'
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.find(users, ['active', false]);
   * // => object for 'fred'
   *
   * // The `_.property` iteratee shorthand.
   * _.find(users, 'active');
   * // => object for 'barney'
   */
  var find = _createFind(findIndex_1);

  var find_1 = find;

  var FIELD_META_PROP = 'data-__meta';
  var FIELD_DATA_PROP = 'data-__field';

  function noop$B() {}

  function intersperseSpace(list) {
    return list.reduce(function (current, item) {
      return [].concat(_toConsumableArray(current), [' ', item]);
    }, []).slice(1);
  }
  var FormItemProps = {
    id: VuePropTypes.string,
    htmlFor: VuePropTypes.string,
    prefixCls: VuePropTypes.string,
    label: VuePropTypes.any,
    labelCol: VuePropTypes.shape(ColProps).loose,
    wrapperCol: VuePropTypes.shape(ColProps).loose,
    help: VuePropTypes.any,
    extra: VuePropTypes.any,
    validateStatus: VuePropTypes.oneOf(['', 'success', 'warning', 'error', 'validating']),
    hasFeedback: VuePropTypes.bool,
    required: VuePropTypes.bool,
    colon: VuePropTypes.bool,
    fieldDecoratorId: VuePropTypes.string,
    fieldDecoratorOptions: VuePropTypes.object,
    selfUpdate: VuePropTypes.bool,
    labelAlign: VuePropTypes.oneOf(['left', 'right'])
  };
  function comeFromSlot() {
    var vnodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var itemVnode = arguments[1];

    var isSlot = false;
    for (var i = 0, len = vnodes.length; i < len; i++) {
      var vnode = vnodes[i];
      if (vnode && (vnode === itemVnode || vnode.$vnode === itemVnode)) {
        isSlot = true;
      } else {
        var componentOptions = vnode.componentOptions || vnode.$vnode && vnode.$vnode.componentOptions;
        var children = componentOptions ? componentOptions.children : vnode.$children;
        isSlot = comeFromSlot(children, itemVnode);
      }
      if (isSlot) {
        break;
      }
    }
    return isSlot;
  }

  var FormItem = {
    name: 'AFormItem',
    __ANT_FORM_ITEM: true,
    mixins: [BaseMixin],
    props: initDefaultProps(FormItemProps, {
      hasFeedback: false
    }),
    provide: function provide() {
      return {
        isFormItemChildren: true
      };
    },

    inject: {
      isFormItemChildren: { 'default': false },
      FormContext: { 'default': function _default() {
          return {};
        } },
      decoratorFormProps: { 'default': function _default() {
          return {};
        } },
      collectFormItemContext: { 'default': function _default() {
          return noop$B;
        } },
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      return { helpShow: false };
    },

    computed: {
      itemSelfUpdate: function itemSelfUpdate() {
        return !!(this.selfUpdate === undefined ? this.FormContext.selfUpdate : this.selfUpdate);
      }
    },
    created: function created() {
      this.collectContext();
    },
    beforeUpdate: function beforeUpdate() {
      if (process.env.NODE_ENV !== 'production') {
        this.collectContext();
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.collectFormItemContext(this.$vnode && this.$vnode.context, 'delete');
    },
    mounted: function mounted() {
      var _$props = this.$props,
          help = _$props.help,
          validateStatus = _$props.validateStatus;

      warning$1(this.getControls(this.slotDefault, true).length <= 1 || help !== undefined || validateStatus !== undefined, 'Form.Item', 'Cannot generate `validateStatus` and `help` automatically, ' + 'while there are more than one `getFieldDecorator` in it.');
      warning$1(!this.fieldDecoratorId, 'Form.Item', '`fieldDecoratorId` is deprecated. please use `v-decorator={id, options}` instead.');
    },

    methods: {
      collectContext: function collectContext() {
        if (this.FormContext.form && this.FormContext.form.templateContext) {
          var templateContext = this.FormContext.form.templateContext;

          var vnodes = Object.values(templateContext.$slots || {}).reduce(function (a, b) {
            return [].concat(_toConsumableArray(a), _toConsumableArray(b));
          }, []);
          var isSlot = comeFromSlot(vnodes, this.$vnode);
          warning$1(!isSlot, 'You can not set FormItem from slot, please use slot-scope instead slot');
          var isSlotScope = false;
          // 进一步判断是否是通过slot-scope传递
          if (!isSlot && this.$vnode.context !== templateContext) {
            isSlotScope = comeFromSlot(this.$vnode.context.$children, templateContext.$vnode);
          }
          if (!isSlotScope && !isSlot) {
            this.collectFormItemContext(this.$vnode.context);
          }
        }
      },
      getHelpMessage: function getHelpMessage() {
        var help = getComponentFromProp(this, 'help');
        var onlyControl = this.getOnlyControl();
        if (help === undefined && onlyControl) {
          var errors = this.getField().errors;
          if (errors) {
            return intersperseSpace(errors.map(function (e, index) {
              var node = null;
              if (isValidElement(e)) {
                node = e;
              } else if (isValidElement(e.message)) {
                node = e.message;
              }
              return node ? cloneElement(node, { key: index }) : e.message;
            }));
          } else {
            return '';
          }
        }

        return help;
      },
      getControls: function getControls() {
        var childrenArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var recursively = arguments[1];

        var controls = [];
        for (var i = 0; i < childrenArray.length; i++) {
          if (!recursively && controls.length > 0) {
            break;
          }

          var child = childrenArray[i];
          if (!child.tag && child.text.trim() === '') {
            continue;
          }

          if (getSlotOptions(child).__ANT_FORM_ITEM) {
            continue;
          }
          var children = getAllChildren(child);
          var attrs = child.data && child.data.attrs || {};
          if (FIELD_META_PROP in attrs) {
            // And means FIELD_DATA_PROP in child.props, too.
            controls.push(child);
          } else if (children) {
            controls = controls.concat(this.getControls(children, recursively));
          }
        }
        return controls;
      },
      getOnlyControl: function getOnlyControl() {
        var child = this.getControls(this.slotDefault, false)[0];
        return child !== undefined ? child : null;
      },
      getChildAttr: function getChildAttr(prop) {
        var child = this.getOnlyControl();
        var data = {};
        if (!child) {
          return undefined;
        }
        if (child.data) {
          data = child.data;
        } else if (child.$vnode && child.$vnode.data) {
          data = child.$vnode.data;
        }
        return data[prop] || data.attrs[prop];
      },
      getId: function getId() {
        return this.getChildAttr('id');
      },
      getMeta: function getMeta() {
        return this.getChildAttr(FIELD_META_PROP);
      },
      getField: function getField() {
        return this.getChildAttr(FIELD_DATA_PROP);
      },
      getValidateStatus: function getValidateStatus() {
        var onlyControl = this.getOnlyControl();
        if (!onlyControl) {
          return '';
        }
        var field = this.getField();
        if (field.validating) {
          return 'validating';
        }
        if (field.errors) {
          return 'error';
        }
        var fieldValue = 'value' in field ? field.value : this.getMeta().initialValue;
        if (fieldValue !== undefined && fieldValue !== null && fieldValue !== '') {
          return 'success';
        }
        return '';
      },


      // Resolve duplicated ids bug between different forms
      // https://github.com/ant-design/ant-design/issues/7351
      onLabelClick: function onLabelClick() {
        var id = this.id || this.getId();
        if (!id) {
          return;
        }
        var formItemNode = this.$el;
        var control = formItemNode.querySelector('[id="' + id + '"]');
        if (control && control.focus) {
          control.focus();
        }
      },
      onHelpAnimEnd: function onHelpAnimEnd(_key, helpShow) {
        this.helpShow = helpShow;
        if (!helpShow) {
          this.$forceUpdate();
        }
      },
      isRequired: function isRequired() {
        var required = this.required;

        if (required !== undefined) {
          return required;
        }
        if (this.getOnlyControl()) {
          var meta = this.getMeta() || {};
          var validate = meta.validate || [];

          return validate.filter(function (item) {
            return !!item.rules;
          }).some(function (item) {
            return item.rules.some(function (rule) {
              return rule.required;
            });
          });
        }
        return false;
      },
      renderHelp: function renderHelp(prefixCls) {
        var _this = this;

        var h = this.$createElement;

        var help = this.getHelpMessage();
        var children = help ? h(
          'div',
          { 'class': prefixCls + '-explain', key: 'help' },
          [help]
        ) : null;
        if (children) {
          this.helpShow = !!children;
        }
        var transitionProps = getTransitionProps('show-help', {
          afterEnter: function afterEnter() {
            return _this.onHelpAnimEnd('help', true);
          },
          afterLeave: function afterLeave() {
            return _this.onHelpAnimEnd('help', false);
          }
        });
        return h(
          'transition',
          babelHelperVueJsxMergeProps([transitionProps, { key: 'help' }]),
          [children]
        );
      },
      renderExtra: function renderExtra(prefixCls) {
        var h = this.$createElement;

        var extra = getComponentFromProp(this, 'extra');
        return extra ? h(
          'div',
          { 'class': prefixCls + '-extra' },
          [extra]
        ) : null;
      },
      renderValidateWrapper: function renderValidateWrapper(prefixCls, c1, c2, c3) {
        var h = this.$createElement;

        var props = this.$props;
        var onlyControl = this.getOnlyControl;
        var validateStatus = props.validateStatus === undefined && onlyControl ? this.getValidateStatus() : props.validateStatus;

        var classes = prefixCls + '-item-control';
        if (validateStatus) {
          classes = classnames(prefixCls + '-item-control', {
            'has-feedback': validateStatus && props.hasFeedback,
            'has-success': validateStatus === 'success',
            'has-warning': validateStatus === 'warning',
            'has-error': validateStatus === 'error',
            'is-validating': validateStatus === 'validating'
          });
        }
        var iconType = '';
        switch (validateStatus) {
          case 'success':
            iconType = 'check-circle';
            break;
          case 'warning':
            iconType = 'exclamation-circle';
            break;
          case 'error':
            iconType = 'close-circle';
            break;
          case 'validating':
            iconType = 'loading';
            break;
          default:
            iconType = '';
            break;
        }
        var icon = props.hasFeedback && iconType ? h(
          'span',
          { 'class': prefixCls + '-item-children-icon' },
          [h(Icon$1, {
            attrs: { type: iconType, theme: iconType === 'loading' ? 'outlined' : 'filled' }
          })]
        ) : null;
        return h(
          'div',
          { 'class': classes },
          [h(
            'span',
            { 'class': prefixCls + '-item-children' },
            [c1, icon]
          ), c2, c3]
        );
      },
      renderWrapper: function renderWrapper(prefixCls, children) {
        var h = this.$createElement;

        var _ref = this.isFormItemChildren ? {} : this.FormContext,
            contextWrapperCol = _ref.wrapperCol;

        var wrapperCol = this.wrapperCol;

        var mergedWrapperCol = wrapperCol || contextWrapperCol || {};

        var style = mergedWrapperCol.style,
            id = mergedWrapperCol.id,
            on = mergedWrapperCol.on,
            restProps = _objectWithoutProperties(mergedWrapperCol, ['style', 'id', 'on']);

        var className = classnames(prefixCls + '-item-control-wrapper', mergedWrapperCol['class']);
        var colProps = {
          props: restProps,
          'class': className,
          key: 'wrapper',
          style: style,
          id: id,
          on: on
        };
        return h(
          Col,
          colProps,
          [children]
        );
      },
      renderLabel: function renderLabel(prefixCls) {
        var _classNames;

        var h = this.$createElement;
        var _FormContext = this.FormContext,
            vertical = _FormContext.vertical,
            contextLabelAlign = _FormContext.labelAlign,
            contextLabelCol = _FormContext.labelCol,
            contextColon = _FormContext.colon;
        var labelAlign = this.labelAlign,
            labelCol = this.labelCol,
            colon = this.colon,
            id = this.id,
            htmlFor = this.htmlFor;

        var label = getComponentFromProp(this, 'label');
        var required = this.isRequired();
        var mergedLabelCol = labelCol || contextLabelCol || {};

        var mergedLabelAlign = labelAlign || contextLabelAlign;
        var labelClsBasic = prefixCls + '-item-label';
        var labelColClassName = classnames(labelClsBasic, mergedLabelAlign === 'left' && labelClsBasic + '-left', mergedLabelCol['class']);

        var labelColClass = mergedLabelCol['class'],
            labelColStyle = mergedLabelCol.style,
            labelColId = mergedLabelCol.id,
            on = mergedLabelCol.on,
            restProps = _objectWithoutProperties(mergedLabelCol, ['class', 'style', 'id', 'on']);

        var labelChildren = label;
        // Keep label is original where there should have no colon
        var computedColon = colon === true || contextColon !== false && colon !== false;
        var haveColon = computedColon && !vertical;
        // Remove duplicated user input colon
        if (haveColon && typeof label === 'string' && label.trim() !== '') {
          labelChildren = label.replace(/[：:]\s*$/, '');
        }

        var labelClassName = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-item-required', required), _defineProperty(_classNames, prefixCls + '-item-no-colon', !computedColon), _classNames));
        var colProps = {
          props: restProps,
          'class': labelColClassName,
          key: 'label',
          style: labelColStyle,
          id: labelColId,
          on: on
        };

        return label ? h(
          Col,
          colProps,
          [h(
            'label',
            {
              attrs: {
                'for': htmlFor || id || this.getId(),

                title: typeof label === 'string' ? label : ''
              },
              'class': labelClassName, on: {
                'click': this.onLabelClick
              }
            },
            [labelChildren]
          )]
        ) : null;
      },
      renderChildren: function renderChildren(prefixCls) {
        return [this.renderLabel(prefixCls), this.renderWrapper(prefixCls, this.renderValidateWrapper(prefixCls, this.slotDefault, this.renderHelp(prefixCls), this.renderExtra(prefixCls)))];
      },
      renderFormItem: function renderFormItem() {
        var _itemClassName;

        var h = this.$createElement;
        var customizePrefixCls = this.$props.prefixCls;

        var getPrefixCls = this.configProvider.getPrefixCls;
        var prefixCls = getPrefixCls('form', customizePrefixCls);
        var children = this.renderChildren(prefixCls);
        var itemClassName = (_itemClassName = {}, _defineProperty(_itemClassName, prefixCls + '-item', true), _defineProperty(_itemClassName, prefixCls + '-item-with-help', this.helpShow), _itemClassName);

        return h(
          Row,
          { 'class': classnames(itemClassName), key: 'row' },
          [children]
        );
      },
      decoratorOption: function decoratorOption(vnode) {
        if (vnode.data && vnode.data.directives) {
          var directive = find_1(vnode.data.directives, ['name', 'decorator']);
          warning$1(!directive || directive && Array.isArray(directive.value), 'Form', 'Invalid directive: type check failed for directive "decorator". Expected Array, got ' + _typeof(directive ? directive.value : directive) + '. At ' + vnode.tag + '.');
          return directive ? directive.value : null;
        } else {
          return null;
        }
      },
      decoratorChildren: function decoratorChildren(vnodes) {
        var FormContext = this.FormContext;

        var getFieldDecorator = FormContext.form.getFieldDecorator;
        for (var i = 0, len = vnodes.length; i < len; i++) {
          var vnode = vnodes[i];
          if (getSlotOptions(vnode).__ANT_FORM_ITEM) {
            break;
          }
          if (vnode.children) {
            vnode.children = this.decoratorChildren(cloneVNodes(vnode.children));
          } else if (vnode.componentOptions && vnode.componentOptions.children) {
            vnode.componentOptions.children = this.decoratorChildren(cloneVNodes(vnode.componentOptions.children));
          }
          var option = this.decoratorOption(vnode);
          if (option && option[0]) {
            vnodes[i] = getFieldDecorator(option[0], option[1], this)(vnode);
          }
        }
        return vnodes;
      }
    },

    render: function render() {
      var $slots = this.$slots,
          decoratorFormProps = this.decoratorFormProps,
          fieldDecoratorId = this.fieldDecoratorId,
          _fieldDecoratorOption = this.fieldDecoratorOptions,
          fieldDecoratorOptions = _fieldDecoratorOption === undefined ? {} : _fieldDecoratorOption,
          FormContext = this.FormContext;

      var child = filterEmpty($slots['default'] || []);
      if (decoratorFormProps.form && fieldDecoratorId && child.length) {
        var getFieldDecorator = decoratorFormProps.form.getFieldDecorator;
        child[0] = getFieldDecorator(fieldDecoratorId, fieldDecoratorOptions, this)(child[0]);
        warning$1(!(child.length > 1), 'Form', '`autoFormCreate` just `decorator` then first children. but you can use JSX to support multiple children');
        this.slotDefault = child;
      } else if (FormContext.form) {
        child = cloneVNodes(child);
        this.slotDefault = this.decoratorChildren(child);
      } else {
        this.slotDefault = child;
      }
      return this.renderFormItem();
    }
  };

  var FormCreateOption = {
    onFieldsChange: VuePropTypes.func,
    onValuesChange: VuePropTypes.func,
    mapPropsToFields: VuePropTypes.func,
    validateMessages: VuePropTypes.any,
    withRef: VuePropTypes.bool,
    name: VuePropTypes.string
  };

  // function create
  var WrappedFormUtils = {
    /** 获取一组输入控件的值，如不传入参数，则获取全部组件的值 */
    getFieldsValue: VuePropTypes.func,
    /** 获取一个输入控件的值*/
    getFieldValue: VuePropTypes.func,
    /** 设置一组输入控件的值*/
    setFieldsValue: VuePropTypes.func,
    /** 设置一组输入控件的值*/
    setFields: VuePropTypes.func,
    /** 校验并获取一组输入域的值与 Error */
    validateFields: VuePropTypes.func,
    // validateFields(fieldNames: Array<string>, options: Object, callback: ValidateCallback): void;
    // validateFields(fieldNames: Array<string>, callback: ValidateCallback): void;
    // validateFields(options: Object, callback: ValidateCallback): void;
    // validateFields(callback: ValidateCallback): void;
    // validateFields(): void;
    /** 与 `validateFields` 相似，但校验完后，如果校验不通过的菜单域不在可见范围内，则自动滚动进可见范围 */
    validateFieldsAndScroll: VuePropTypes.func,
    // validateFieldsAndScroll(fieldNames?: Array<string>, options?: Object, callback?: ValidateCallback): void;
    // validateFieldsAndScroll(fieldNames?: Array<string>, callback?: ValidateCallback): void;
    // validateFieldsAndScroll(options?: Object, callback?: ValidateCallback): void;
    // validateFieldsAndScroll(callback?: ValidateCallback): void;
    // validateFieldsAndScroll(): void;
    /** 获取某个输入控件的 Error */
    getFieldError: VuePropTypes.func,
    getFieldsError: VuePropTypes.func,
    /** 判断一个输入控件是否在校验状态*/
    isFieldValidating: VuePropTypes.func,
    isFieldTouched: VuePropTypes.func,
    isFieldsTouched: VuePropTypes.func,
    /** 重置一组输入控件的值与状态，如不传入参数，则重置所有组件 */
    resetFields: VuePropTypes.func,

    getFieldDecorator: VuePropTypes.func
  };

  var FormProps = {
    layout: VuePropTypes.oneOf(['horizontal', 'inline', 'vertical']),
    labelCol: VuePropTypes.shape(ColProps).loose,
    wrapperCol: VuePropTypes.shape(ColProps).loose,
    colon: VuePropTypes.bool,
    labelAlign: VuePropTypes.oneOf(['left', 'right']),
    form: VuePropTypes.object,
    // onSubmit: React.FormEventHandler<any>;
    prefixCls: VuePropTypes.string,
    hideRequiredMark: VuePropTypes.bool,
    autoFormCreate: VuePropTypes.func,
    options: VuePropTypes.object,
    selfUpdate: VuePropTypes.bool
  };

  var ValidationRule = {
    /** validation error message */
    message: VuePropTypes.string,
    /** built-in validation type, available options: https://github.com/yiminghe/async-validator#type */
    type: VuePropTypes.string,
    /** indicates whether field is required */
    required: VuePropTypes.boolean,
    /** treat required fields that only contain whitespace as errors */
    whitespace: VuePropTypes.boolean,
    /** validate the exact length of a field */
    len: VuePropTypes.number,
    /** validate the min length of a field */
    min: VuePropTypes.number,
    /** validate the max length of a field */
    max: VuePropTypes.number,
    /** validate the value from a list of possible values */
    'enum': VuePropTypes.oneOfType([String, VuePropTypes.arrayOf(String)]),
    /** validate from a regular expression */
    pattern: VuePropTypes.custom(isRegExp_1),
    /** transform a value before validation */
    transform: VuePropTypes.func,
    /** custom validate function (Note: callback must be called) */
    validator: VuePropTypes.func
  };

  // export type ValidateCallback = (errors: any, values: any) => void;

  // export type GetFieldDecoratorOptions = {
  //   /** 子节点的值的属性，如 Checkbox 的是 'checked' */
  //   valuePropName?: string;
  //   /** 子节点的初始值，类型、可选值均由子节点决定 */
  //   initialValue?: any;
  //   /** 收集子节点的值的时机 */
  //   trigger?: string;
  //   /** 可以把 onChange 的参数转化为控件的值，例如 DatePicker 可设为：(date, dateString) => dateString */
  //   getValueFromEvent?: (...args: any[]) => any;
  //   /** Get the component props according to field value. */
  //   getValueProps?: (value: any) => any;
  //   /** 校验子节点值的时机 */
  //   validateTrigger?: string | string[];
  //   /** 校验规则，参见 [async-validator](https://github.com/yiminghe/async-validator) */
  //   rules?: ValidationRule[];
  //   /** 是否和其他控件互斥，特别用于 Radio 单选控件 */
  //   exclusive?: boolean;
  //   /** Normalize value to form component */
  //   normalize?: (value: any, prevValue: any, allValues: any) => any;
  //   /** Whether stop validate on first rule of error for this field.  */
  //   validateFirst?: boolean;
  //   /** 是否一直保留子节点的信息 */
  //   preserve?: boolean;
  // };

  var Form = {
    name: 'AForm',
    props: initDefaultProps(FormProps, {
      layout: 'horizontal',
      hideRequiredMark: false,
      colon: true
    }),
    Item: FormItem,
    createFormField: createFormField,
    create: function create() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return createDOMForm(_extends$1({
        fieldNameProp: 'id'
      }, options, {
        fieldMetaProp: FIELD_META_PROP,
        fieldDataProp: FIELD_DATA_PROP
      }));
    },
    createForm: function createForm(context) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var V = base.Vue || Vue;
      return new V(Form.create(_extends$1({}, options, { templateContext: context }))());
    },
    created: function created() {
      this.formItemContexts = new Map();
    },
    provide: function provide() {
      var _this = this;

      return {
        FormContext: this,
        // https://github.com/vueComponent/ant-design-vue/issues/446
        collectFormItemContext: this.form && this.form.templateContext ? function (c) {
          var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'add';

          var formItemContexts = _this.formItemContexts;
          var number = formItemContexts.get(c) || 0;
          if (type === 'delete') {
            if (number <= 1) {
              formItemContexts['delete'](c);
            } else {
              formItemContexts.set(c, number - 1);
            }
          } else {
            if (c !== _this.form.templateContext) {
              formItemContexts.set(c, number + 1);
            }
          }
        } : function () {}
      };
    },

    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    watch: {
      form: function form() {
        this.$forceUpdate();
      }
    },
    computed: {
      vertical: function vertical() {
        return this.layout === 'vertical';
      }
    },
    beforeUpdate: function beforeUpdate() {
      this.formItemContexts.forEach(function (number, c) {
        if (c.$forceUpdate) {
          c.$forceUpdate();
        }
      });
    },
    updated: function updated() {
      if (this.form && this.form.cleanUpUselessFields) {
        this.form.cleanUpUselessFields();
      }
    },

    methods: {
      onSubmit: function onSubmit(e) {
        if (!getListeners(this).submit) {
          e.preventDefault();
        } else {
          this.$emit('submit', e);
        }
      }
    },

    render: function render() {
      var _classNames,
          _this2 = this;

      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          hideRequiredMark = this.hideRequiredMark,
          layout = this.layout,
          onSubmit = this.onSubmit,
          $slots = this.$slots,
          autoFormCreate = this.autoFormCreate,
          _options = this.options,
          options = _options === undefined ? {} : _options;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('form', customizePrefixCls);

      var formClassName = classnames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-horizontal', layout === 'horizontal'), _defineProperty(_classNames, prefixCls + '-vertical', layout === 'vertical'), _defineProperty(_classNames, prefixCls + '-inline', layout === 'inline'), _defineProperty(_classNames, prefixCls + '-hide-required-mark', hideRequiredMark), _classNames));
      if (autoFormCreate) {
        warning$1(false, 'Form', '`autoFormCreate` is deprecated. please use `form` instead.');
        var DomForm = this.DomForm || createDOMForm(_extends$1({
          fieldNameProp: 'id'
        }, options, {
          fieldMetaProp: FIELD_META_PROP,
          fieldDataProp: FIELD_DATA_PROP,
          templateContext: this.$vnode.context
        }))({
          provide: function provide() {
            return {
              decoratorFormProps: this.$props
            };
          },
          data: function data() {
            return {
              children: $slots['default'],
              formClassName: formClassName,
              submit: onSubmit
            };
          },
          created: function created() {
            autoFormCreate(this.form);
          },
          render: function render() {
            var h = arguments[0];
            var children = this.children,
                formClassName = this.formClassName,
                submit = this.submit;

            return h(
              'form',
              {
                on: {
                  'submit': submit
                },
                'class': formClassName },
              [children]
            );
          }
        });
        if (this.domForm) {
          this.domForm.children = $slots['default'];
          this.domForm.submit = onSubmit;
          this.domForm.formClassName = formClassName;
        }
        this.DomForm = DomForm;

        return h(DomForm, {
          attrs: {
            wrappedComponentRef: function wrappedComponentRef(inst) {
              _this2.domForm = inst;
            }
          }
        });
      }
      return h(
        'form',
        {
          on: {
            'submit': onSubmit
          },
          'class': formClassName },
        [$slots['default']]
      );
    }
  };

  Vue.use(ref$1, { name: 'ant-ref' });
  Vue.use(FormDecoratorDirective);
  Vue.prototype.$form = Form;

  /* istanbul ignore next */
  Form.install = function (Vue) {
    Vue.use(base);
    Vue.component(Form.name, Form);
    Vue.component(Form.Item.name, Form.Item);
    Vue.prototype.$form = Form;
  };

  function noop$C() {}

  function getPropByPath(obj, path, strict) {
    var tempObj = obj;
    path = path.replace(/\[(\w+)\]/g, '.$1');
    path = path.replace(/^\./, '');

    var keyArr = path.split('.');
    var i = 0;
    for (var len = keyArr.length; i < len - 1; ++i) {
      if (!tempObj && !strict) break;
      var key = keyArr[i];
      if (key in tempObj) {
        tempObj = tempObj[key];
      } else {
        if (strict) {
          throw new Error('please transfer a valid prop path to form item!');
        }
        break;
      }
    }
    return {
      o: tempObj,
      k: keyArr[i],
      v: tempObj ? tempObj[keyArr[i]] : null
    };
  }
  var FormItemProps$1 = {
    id: VuePropTypes.string,
    htmlFor: VuePropTypes.string,
    prefixCls: VuePropTypes.string,
    label: VuePropTypes.any,
    help: VuePropTypes.any,
    extra: VuePropTypes.any,
    labelCol: VuePropTypes.shape(ColProps).loose,
    wrapperCol: VuePropTypes.shape(ColProps).loose,
    hasFeedback: VuePropTypes.bool,
    colon: VuePropTypes.bool,
    labelAlign: VuePropTypes.oneOf(['left', 'right']),
    prop: VuePropTypes.string,
    rules: VuePropTypes.oneOfType([Array, Object]),
    autoLink: VuePropTypes.bool,
    required: VuePropTypes.bool,
    validateStatus: VuePropTypes.oneOf(['', 'success', 'warning', 'error', 'validating'])
  };

  var FormItem$1 = {
    name: 'AFormModelItem',
    __ANT_NEW_FORM_ITEM: true,
    mixins: [BaseMixin],
    props: initDefaultProps(FormItemProps$1, {
      hasFeedback: false,
      autoLink: true
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } },
      FormContext: { 'default': function _default() {
          return {};
        } }
    },
    data: function data() {
      return {
        validateState: this.validateStatus,
        validateMessage: '',
        validateDisabled: false,
        validator: {}
      };
    },


    computed: {
      fieldValue: function fieldValue() {
        var model = this.FormContext.model;
        if (!model || !this.prop) {
          return;
        }
        var path = this.prop;
        if (path.indexOf(':') !== -1) {
          path = path.replace(/:/g, '.');
        }
        return getPropByPath(model, path, true).v;
      },
      isRequired: function isRequired() {
        var rules = this.getRules();
        var isRequired = false;
        if (rules && rules.length) {
          rules.every(function (rule) {
            if (rule.required) {
              isRequired = true;
              return false;
            }
            return true;
          });
        }
        return isRequired;
      }
    },
    watch: {
      validateStatus: function validateStatus(val) {
        this.validateState = val;
      }
    },
    mounted: function mounted() {
      if (this.prop) {
        var addField = this.FormContext.addField;

        addField && addField(this);
        this.initialValue = cloneDeep_1(this.fieldValue);
      }
    },
    beforeDestroy: function beforeDestroy() {
      var removeField = this.FormContext.removeField;

      removeField && removeField(this);
    },

    methods: {
      validate: function validate(trigger) {
        var _this = this;

        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$C;

        this.validateDisabled = false;
        var rules = this.getFilteredRule(trigger);
        if (!rules || rules.length === 0) {
          callback();
          return true;
        }
        this.validateState = 'validating';
        var descriptor = {};
        if (rules && rules.length > 0) {
          rules.forEach(function (rule) {
            delete rule.trigger;
          });
        }
        descriptor[this.prop] = rules;
        var validator = new Schema(descriptor);
        if (this.FormContext && this.FormContext.validateMessages) {
          validator.messages(this.FormContext.validateMessages);
        }
        var model = {};
        model[this.prop] = this.fieldValue;
        validator.validate(model, { firstFields: true }, function (errors, invalidFields) {
          _this.validateState = errors ? 'error' : 'success';
          _this.validateMessage = errors ? errors[0].message : '';
          callback(_this.validateMessage, invalidFields);
          _this.FormContext && _this.FormContext.$emit && _this.FormContext.$emit('validate', _this.prop, !errors, _this.validateMessage || null);
        });
      },
      getRules: function getRules() {
        var formRules = this.FormContext.rules;
        var selfRules = this.rules;
        var requiredRule = this.required !== undefined ? { required: !!this.required, trigger: 'change' } : [];
        var prop = getPropByPath(formRules, this.prop || '');
        formRules = formRules ? prop.o[this.prop || ''] || prop.v : [];
        return [].concat(selfRules || formRules || []).concat(requiredRule);
      },
      getFilteredRule: function getFilteredRule(trigger) {
        var rules = this.getRules();
        return rules.filter(function (rule) {
          if (!rule.trigger || trigger === '') return true;
          if (Array.isArray(rule.trigger)) {
            return rule.trigger.indexOf(trigger) > -1;
          } else {
            return rule.trigger === trigger;
          }
        }).map(function (rule) {
          return _extends$1({}, rule);
        });
      },
      onFieldBlur: function onFieldBlur() {
        this.validate('blur');
      },
      onFieldChange: function onFieldChange() {
        if (this.validateDisabled) {
          this.validateDisabled = false;
          return;
        }
        this.validate('change');
      },
      clearValidate: function clearValidate() {
        this.validateState = '';
        this.validateMessage = '';
        this.validateDisabled = false;
      },
      resetField: function resetField() {
        var _this2 = this;

        this.validateState = '';
        this.validateMessage = '';
        var model = this.FormContext.model || {};
        var value = this.fieldValue;
        var path = this.prop;
        if (path.indexOf(':') !== -1) {
          path = path.replace(/:/, '.');
        }
        var prop = getPropByPath(model, path, true);
        this.validateDisabled = true;
        if (Array.isArray(value)) {
          prop.o[prop.k] = [].concat(this.initialValue);
        } else {
          prop.o[prop.k] = this.initialValue;
        }
        // reset validateDisabled after onFieldChange triggered
        this.$nextTick(function () {
          _this2.validateDisabled = false;
        });
      }
    },
    render: function render() {
      var _this3 = this;

      var h = arguments[0];
      var $slots = this.$slots,
          $scopedSlots = this.$scopedSlots;

      var props = getOptionProps(this);
      var label = getComponentFromProp(this, 'label');
      var extra = getComponentFromProp(this, 'extra');
      var help = getComponentFromProp(this, 'help');
      var formProps = {
        props: _extends$1({}, props, {
          label: label,
          extra: extra,
          validateStatus: this.validateState,
          help: this.validateMessage || help,
          required: this.isRequired || props.required
        })
      };
      var children = filterEmpty($scopedSlots['default'] ? $scopedSlots['default']() : $slots['default']);
      var firstChildren = children[0];
      if (this.prop && this.autoLink && isValidElement(firstChildren)) {
        var originalEvents = getEvents(firstChildren);
        var originalBlur = originalEvents.blur;
        var originalChange = originalEvents.change;
        firstChildren = cloneElement(firstChildren, {
          on: {
            blur: function blur() {
              originalBlur && originalBlur.apply(undefined, arguments);
              _this3.onFieldBlur();
            },
            change: function change() {
              if (Array.isArray(originalChange)) {
                for (var i = 0, l = originalChange.length; i < l; i++) {
                  originalChange[i].apply(originalChange, arguments);
                }
              } else if (originalChange) {
                originalChange.apply(undefined, arguments);
              }
              _this3.onFieldChange();
            }
          }
        });
      }
      return h(
        FormItem,
        formProps,
        [firstChildren, children.slice(1)]
      );
    }
  };

  var FormProps$1 = {
    layout: VuePropTypes.oneOf(['horizontal', 'inline', 'vertical']),
    labelCol: VuePropTypes.shape(ColProps).loose,
    wrapperCol: VuePropTypes.shape(ColProps).loose,
    colon: VuePropTypes.bool,
    labelAlign: VuePropTypes.oneOf(['left', 'right']),
    prefixCls: VuePropTypes.string,
    hideRequiredMark: VuePropTypes.bool,
    model: VuePropTypes.object,
    rules: VuePropTypes.object,
    validateMessages: VuePropTypes.any,
    validateOnRuleChange: VuePropTypes.bool
  };

  var ValidationRule$1 = {
    /** validation error message */
    message: VuePropTypes.string,
    /** built-in validation type, available options: https://github.com/yiminghe/async-validator#type */
    type: VuePropTypes.string,
    /** indicates whether field is required */
    required: VuePropTypes.boolean,
    /** treat required fields that only contain whitespace as errors */
    whitespace: VuePropTypes.boolean,
    /** validate the exact length of a field */
    len: VuePropTypes.number,
    /** validate the min length of a field */
    min: VuePropTypes.number,
    /** validate the max length of a field */
    max: VuePropTypes.number,
    /** validate the value from a list of possible values */
    'enum': VuePropTypes.oneOfType([String, VuePropTypes.arrayOf(String)]),
    /** validate from a regular expression */
    pattern: VuePropTypes.custom(isRegExp_1),
    /** transform a value before validation */
    transform: VuePropTypes.func,
    /** custom validate function (Note: callback must be called) */
    validator: VuePropTypes.func
  };

  var Form$1 = {
    name: 'AFormModel',
    props: initDefaultProps(FormProps$1, {
      layout: 'horizontal',
      hideRequiredMark: false,
      colon: true
    }),
    Item: FormItem$1,
    created: function created() {
      this.fields = [];
    },
    provide: function provide() {
      return {
        FormContext: this
      };
    },

    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    watch: {
      rules: function rules() {
        if (this.validateOnRuleChange) {
          this.validate(function () {});
        }
      }
    },
    computed: {
      vertical: function vertical() {
        return this.layout === 'vertical';
      }
    },
    methods: {
      addField: function addField(field) {
        if (field) {
          this.fields.push(field);
        }
      },
      removeField: function removeField(field) {
        if (field.prop) {
          this.fields.splice(this.fields.indexOf(field), 1);
        }
      },
      onSubmit: function onSubmit(e) {
        if (!getListeners(this).submit) {
          e.preventDefault();
        } else {
          this.$emit('submit', e);
        }
      },
      resetFields: function resetFields() {
        if (!this.model) {
          warning$1(false, 'FormModel', 'model is required for resetFields to work.');
          return;
        }
        this.fields.forEach(function (field) {
          field.resetField();
        });
      },
      clearValidate: function clearValidate() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        var fields = props.length ? typeof props === 'string' ? this.fields.filter(function (field) {
          return props === field.prop;
        }) : this.fields.filter(function (field) {
          return props.indexOf(field.prop) > -1;
        }) : this.fields;
        fields.forEach(function (field) {
          field.clearValidate();
        });
      },
      validate: function validate(callback) {
        var _this = this;

        if (!this.model) {
          warning$1(false, 'FormModel', 'model is required for resetFields to work.');
          return;
        }
        var promise = void 0;
        // if no callback, return promise
        if (typeof callback !== 'function' && window.Promise) {
          promise = new window.Promise(function (resolve, reject) {
            callback = function callback(valid) {
              valid ? resolve(valid) : reject(valid);
            };
          });
        }
        var valid = true;
        var count = 0;
        // 如果需要验证的fields为空，调用验证时立刻返回callback
        if (this.fields.length === 0 && callback) {
          callback(true);
        }
        var invalidFields = {};
        this.fields.forEach(function (field) {
          field.validate('', function (message, field) {
            if (message) {
              valid = false;
            }
            invalidFields = _extends$1({}, invalidFields, field);
            if (typeof callback === 'function' && ++count === _this.fields.length) {
              callback(valid, invalidFields);
            }
          });
        });
        if (promise) {
          return promise;
        }
      },
      validateField: function validateField(props, cb) {
        props = [].concat(props);
        var fields = this.fields.filter(function (field) {
          return props.indexOf(field.prop) !== -1;
        });
        if (!fields.length) {
          warning$1(false, 'FormModel', 'please pass correct props!');
          return;
        }
        fields.forEach(function (field) {
          field.validate('', cb);
        });
      }
    },

    render: function render() {
      var _classNames;

      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          hideRequiredMark = this.hideRequiredMark,
          layout = this.layout,
          onSubmit = this.onSubmit,
          $slots = this.$slots;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('form', customizePrefixCls);

      var formClassName = classnames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-horizontal', layout === 'horizontal'), _defineProperty(_classNames, prefixCls + '-vertical', layout === 'vertical'), _defineProperty(_classNames, prefixCls + '-inline', layout === 'inline'), _defineProperty(_classNames, prefixCls + '-hide-required-mark', hideRequiredMark), _classNames));
      return h(
        'form',
        {
          on: {
            'submit': onSubmit
          },
          'class': formClassName },
        [$slots['default']]
      );
    }
  };

  Vue.use(ref$1, { name: 'ant-ref' });
  Vue.use(FormDecoratorDirective);

  /* istanbul ignore next */
  Form$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Form$1.name, Form$1);
    Vue.component(Form$1.Item.name, Form$1.Item);
  };

  var ITouchProps = {
    disabled: VuePropTypes.bool,
    activeClassName: VuePropTypes.string,
    activeStyle: VuePropTypes.any
    // onTouchStart: PropTypes.func,
    // onTouchEnd: PropTypes.func,
    // onTouchCancel: PropTypes.func,
    // onMouseDown: PropTypes.func,
    // onMouseUp: PropTypes.func,
    // onMouseLeave: PropTypes.func,
  };

  var TouchFeedback = {
    name: 'TouchFeedback',
    mixins: [BaseMixin],
    props: initDefaultProps(ITouchProps, {
      disabled: false
    }),
    data: function data() {
      return {
        active: false
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        if (_this.disabled && _this.active) {
          _this.setState({
            active: false
          });
        }
      });
    },

    methods: {
      triggerEvent: function triggerEvent(type, isActive, ev) {
        // 暂时仅有input-number用到，事件直接到挂载到Touchable上，不需要像antd那样从子组件触发
        this.$emit(type, ev);
        if (isActive !== this.active) {
          this.setState({
            active: isActive
          });
        }
      },
      onTouchStart: function onTouchStart(e) {
        this.triggerEvent('touchstart', true, e);
      },
      onTouchMove: function onTouchMove(e) {
        this.triggerEvent('touchmove', false, e);
      },
      onTouchEnd: function onTouchEnd(e) {
        this.triggerEvent('touchend', false, e);
      },
      onTouchCancel: function onTouchCancel(e) {
        this.triggerEvent('touchcancel', false, e);
      },
      onMouseDown: function onMouseDown(e) {
        // pc simulate mobile
        this.triggerEvent('mousedown', true, e);
      },
      onMouseUp: function onMouseUp(e) {
        this.triggerEvent('mouseup', false, e);
      },
      onMouseLeave: function onMouseLeave(e) {
        this.triggerEvent('mouseleave', false, e);
      }
    },
    render: function render() {
      var _$props = this.$props,
          disabled = _$props.disabled,
          _$props$activeClassNa = _$props.activeClassName,
          activeClassName = _$props$activeClassNa === undefined ? '' : _$props$activeClassNa,
          _$props$activeStyle = _$props.activeStyle,
          activeStyle = _$props$activeStyle === undefined ? {} : _$props$activeStyle;


      var child = this.$slots['default'];
      if (child.length !== 1) {
        warning$1(false, 'm-feedback组件只能包含一个子元素');
        return null;
      }
      var childProps = {
        on: disabled ? {} : {
          touchstart: this.onTouchStart,
          touchmove: this.onTouchMove,
          touchend: this.onTouchEnd,
          touchcancel: this.onTouchCancel,
          mousedown: this.onMouseDown,
          mouseup: this.onMouseUp,
          mouseleave: this.onMouseLeave
        }
      };

      if (!disabled && this.active) {
        childProps = _extends$1({}, childProps, {
          style: activeStyle,
          'class': activeClassName
        });
      }

      return cloneElement(child, childProps);
    }
  };

  var InputHandler = {
    name: 'InputHandler',
    props: {
      prefixCls: VuePropTypes.string,
      disabled: VuePropTypes.bool
    },
    render: function render() {
      var h = arguments[0];
      var _$props = this.$props,
          prefixCls = _$props.prefixCls,
          disabled = _$props.disabled;

      var touchableProps = {
        props: {
          disabled: disabled,
          activeClassName: prefixCls + '-handler-active'
        },
        on: getListeners(this)
      };
      return h(
        TouchFeedback,
        touchableProps,
        [h('span', [this.$slots['default']])]
      );
    }
  };

  function noop$D() {}

  function preventDefault(e) {
    e.preventDefault();
  }

  function defaultParser(input) {
    return input.replace(/[^\w\.-]+/g, '');
  }

  /**
   * When click and hold on a button - the speed of auto changin the value.
   */
  var SPEED = 200;

  /**
   * When click and hold on a button - the delay before auto changin the value.
   */
  var DELAY = 600;

  /**
   * Max Safe Integer -- on IE this is not available, so manually set the number in that case.
   * The reason this is used, instead of Infinity is because numbers above the MSI are unstable
   */
  var MAX_SAFE_INTEGER$2 = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;

  var isValidProps = function isValidProps(value) {
    return value !== undefined && value !== null;
  };

  var isEqual = function isEqual(oldValue, newValue) {
    return newValue === oldValue || typeof newValue === 'number' && typeof oldValue === 'number' && isNaN(newValue) && isNaN(oldValue);
  };

  var inputNumberProps = {
    value: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string]),
    defaultValue: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string]),
    focusOnUpDown: VuePropTypes.bool,
    autoFocus: VuePropTypes.bool,
    // onChange: PropTypes.func,
    // onKeyDown: PropTypes.func,
    // onKeyUp: PropTypes.func,
    prefixCls: VuePropTypes.string,
    tabIndex: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
    placeholder: VuePropTypes.string,
    disabled: VuePropTypes.bool,
    // onFocus: PropTypes.func,
    // onBlur: PropTypes.func,
    readOnly: VuePropTypes.bool,
    max: VuePropTypes.number,
    min: VuePropTypes.number,
    step: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string]),
    upHandler: VuePropTypes.any,
    downHandler: VuePropTypes.any,
    useTouch: VuePropTypes.bool,
    formatter: VuePropTypes.func,
    parser: VuePropTypes.func,
    // onMouseEnter: PropTypes.func,
    // onMouseLeave: PropTypes.func,
    // onMouseOver: PropTypes.func,
    // onMouseOut: PropTypes.func,
    precision: VuePropTypes.number,
    required: VuePropTypes.bool,
    pattern: VuePropTypes.string,
    decimalSeparator: VuePropTypes.string,
    autoComplete: VuePropTypes.string,
    title: VuePropTypes.string,
    name: VuePropTypes.string,
    id: VuePropTypes.string
  };

  var VcInputNumber = {
    name: 'VCInputNumber',
    mixins: [BaseMixin],
    model: {
      prop: 'value',
      event: 'change'
    },
    props: initDefaultProps(inputNumberProps, {
      focusOnUpDown: true,
      useTouch: false,
      prefixCls: 'rc-input-number',
      min: -MAX_SAFE_INTEGER$2,
      step: 1,
      parser: defaultParser,
      required: false,
      autoComplete: 'off'
    }),
    data: function data() {
      var props = getOptionProps(this);
      this.prevProps = _extends$1({}, props);
      var value = void 0;
      if ('value' in props) {
        value = this.value;
      } else {
        value = this.defaultValue;
      }
      var validValue = this.getValidValue(this.toNumber(value));
      return {
        inputValue: this.toPrecisionAsStep(validValue),
        sValue: validValue,
        focused: this.autoFocus
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        if (_this.autoFocus && !_this.disabled) {
          _this.focus();
        }
        _this.updatedFunc();
      });
    },
    updated: function updated() {
      var _this2 = this;

      var _$props = this.$props,
          value = _$props.value,
          max = _$props.max,
          min = _$props.min;
      var focused = this.$data.focused;
      var prevProps = this.prevProps;

      var props = getOptionProps(this);
      // Don't trigger in componentDidMount
      if (prevProps) {
        if (!isEqual(prevProps.value, value) || !isEqual(prevProps.max, max) || !isEqual(prevProps.min, min)) {
          var validValue = focused ? value : this.getValidValue(value);
          var nextInputValue = void 0;
          if (this.pressingUpOrDown) {
            nextInputValue = validValue;
          } else if (this.inputting) {
            nextInputValue = this.rawInput;
          } else {
            nextInputValue = this.toPrecisionAsStep(validValue);
          }
          this.setState({
            // eslint-disable-line
            sValue: validValue,
            inputValue: nextInputValue
          });
        }

        // Trigger onChange when max or min change
        // https://github.com/ant-design/ant-design/issues/11574
        var nextValue = 'value' in props ? value : this.sValue;
        // ref: null < 20 === true
        // https://github.com/ant-design/ant-design/issues/14277
        if ('max' in props && prevProps.max !== max && typeof nextValue === 'number' && nextValue > max) {
          this.$emit('change', max);
        }
        if ('min' in props && prevProps.min !== min && typeof nextValue === 'number' && nextValue < min) {
          this.$emit('change', min);
        }
      }
      this.prevProps = _extends$1({}, props);
      this.$nextTick(function () {
        _this2.updatedFunc();
      });
    },
    beforeDestroy: function beforeDestroy() {
      this.stop();
    },

    methods: {
      updatedFunc: function updatedFunc() {
        var inputElem = this.$refs.inputRef;
        // Restore cursor
        try {
          // Firefox set the input cursor after it get focused.
          // This caused that if an input didn't init with the selection,
          // set will cause cursor not correct when first focus.
          // Safari will focus input if set selection. We need skip this.
          if (this.cursorStart !== undefined && this.focused) {
            // In most cases, the string after cursor is stable.
            // We can move the cursor before it

            if (
            // If not match full str, try to match part of str
            !this.partRestoreByAfter(this.cursorAfter) && this.sValue !== this.value) {
              // If not match any of then, let's just keep the position
              // TODO: Logic should not reach here, need check if happens
              var pos = this.cursorStart + 1;

              // If not have last string, just position to the end
              if (!this.cursorAfter) {
                pos = inputElem.value.length;
              } else if (this.lastKeyCode === KeyCode.BACKSPACE) {
                pos = this.cursorStart - 1;
              } else if (this.lastKeyCode === KeyCode.DELETE) {
                pos = this.cursorStart;
              }
              this.fixCaret(pos, pos);
            } else if (this.currentValue === inputElem.value) {
              // Handle some special key code
              switch (this.lastKeyCode) {
                case KeyCode.BACKSPACE:
                  this.fixCaret(this.cursorStart - 1, this.cursorStart - 1);
                  break;
                case KeyCode.DELETE:
                  this.fixCaret(this.cursorStart + 1, this.cursorStart + 1);
                  break;
                default:
                // Do nothing
              }
            }
          }
        } catch (e) {}
        // Do nothing

        // Reset last key
        this.lastKeyCode = null;

        // pressingUpOrDown is true means that someone just click up or down button
        if (!this.pressingUpOrDown) {
          return;
        }
        if (this.focusOnUpDown && this.focused) {
          if (document.activeElement !== inputElem) {
            this.focus();
          }
        }

        this.pressingUpOrDown = false;
      },
      onKeyDown: function onKeyDown(e) {
        if (e.keyCode === KeyCode.UP) {
          var ratio = this.getRatio(e);
          this.up(e, ratio);
          this.stop();
        } else if (e.keyCode === KeyCode.DOWN) {
          var _ratio = this.getRatio(e);
          this.down(e, _ratio);
          this.stop();
        } else if (e.keyCode === KeyCode.ENTER) {
          this.$emit('pressEnter', e);
        }
        // Trigger user key down
        this.recordCursorPosition();
        this.lastKeyCode = e.keyCode;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        this.$emit.apply(this, ['keydown', e].concat(_toConsumableArray(args)));
      },
      onKeyUp: function onKeyUp(e) {
        this.stop();

        this.recordCursorPosition();

        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        this.$emit.apply(this, ['keyup', e].concat(_toConsumableArray(args)));
      },
      onChange: function onChange(e) {
        if (this.focused) {
          this.inputting = true;
        }
        this.rawInput = this.parser(this.getValueFromEvent(e));
        this.setState({ inputValue: this.rawInput });
        this.$emit('change', this.toNumber(this.rawInput)); // valid number or invalid string
      },
      onFocus: function onFocus() {
        this.setState({
          focused: true
        });

        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this.$emit.apply(this, ['focus'].concat(_toConsumableArray(args)));
      },
      onBlur: function onBlur() {
        this.inputting = false;
        this.setState({
          focused: false
        });
        var value = this.getCurrentValidValue(this.inputValue);
        var newValue = this.setValue(value);
        if (this.$listeners.blur) {
          var originValue = this.$refs.inputRef.value;
          var inputValue = this.getInputDisplayValue({ focused: false, sValue: newValue });
          this.$refs.inputRef.value = inputValue;

          for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }

          this.$emit.apply(this, ['blur'].concat(_toConsumableArray(args)));
          this.$refs.inputRef.value = originValue;
        }
      },
      getCurrentValidValue: function getCurrentValidValue(value) {
        var val = value;
        if (val === '') {
          val = '';
        } else if (!this.isNotCompleteNumber(parseFloat(val, 10))) {
          val = this.getValidValue(val);
        } else {
          val = this.sValue;
        }
        return this.toNumber(val);
      },
      getRatio: function getRatio(e) {
        var ratio = 1;
        if (e.metaKey || e.ctrlKey) {
          ratio = 0.1;
        } else if (e.shiftKey) {
          ratio = 10;
        }
        return ratio;
      },
      getValueFromEvent: function getValueFromEvent(e) {
        // optimize for chinese input expierence
        // https://github.com/ant-design/ant-design/issues/8196
        var value = e.target.value.trim().replace(/。/g, '.');

        if (isValidProps(this.decimalSeparator)) {
          value = value.replace(this.decimalSeparator, '.');
        }

        return value;
      },
      getValidValue: function getValidValue(value) {
        var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.min;
        var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.max;

        var val = parseFloat(value, 10);
        // https://github.com/ant-design/ant-design/issues/7358
        if (isNaN(val)) {
          return value;
        }
        if (val < min) {
          val = min;
        }
        if (val > max) {
          val = max;
        }
        return val;
      },
      setValue: function setValue(v, callback) {
        // trigger onChange
        var precision = this.$props.precision;

        var newValue = this.isNotCompleteNumber(parseFloat(v, 10)) ? null : parseFloat(v, 10);
        var _$data = this.$data,
            _$data$sValue = _$data.sValue,
            value = _$data$sValue === undefined ? null : _$data$sValue,
            _$data$inputValue = _$data.inputValue,
            inputValue = _$data$inputValue === undefined ? null : _$data$inputValue;
        // https://github.com/ant-design/ant-design/issues/7363
        // https://github.com/ant-design/ant-design/issues/16622

        var newValueInString = typeof newValue === 'number' ? newValue.toFixed(precision) : '' + newValue;
        var changed = newValue !== value || newValueInString !== '' + inputValue;
        if (!hasProp(this, 'value')) {
          this.setState({
            sValue: newValue,
            inputValue: this.toPrecisionAsStep(v)
          }, callback);
        } else {
          // always set input value same as value
          this.setState({
            inputValue: this.toPrecisionAsStep(this.sValue)
          }, callback);
        }
        if (changed) {
          this.$emit('change', newValue);
        }
        return newValue;
      },
      getPrecision: function getPrecision(value) {
        if (isValidProps(this.precision)) {
          return this.precision;
        }
        var valueString = value.toString();
        if (valueString.indexOf('e-') >= 0) {
          return parseInt(valueString.slice(valueString.indexOf('e-') + 2), 10);
        }
        var precision = 0;
        if (valueString.indexOf('.') >= 0) {
          precision = valueString.length - valueString.indexOf('.') - 1;
        }
        return precision;
      },

      // step={1.0} value={1.51}
      // press +
      // then value should be 2.51, rather than 2.5
      // if this.$props.precision is undefined
      // https://github.com/react-component/input-number/issues/39
      getMaxPrecision: function getMaxPrecision(currentValue) {
        var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

        if (isValidProps(this.precision)) {
          return this.precision;
        }
        var step = this.step;

        var ratioPrecision = this.getPrecision(ratio);
        var stepPrecision = this.getPrecision(step);
        var currentValuePrecision = this.getPrecision(currentValue);
        if (!currentValue) {
          return ratioPrecision + stepPrecision;
        }
        return Math.max(currentValuePrecision, ratioPrecision + stepPrecision);
      },
      getPrecisionFactor: function getPrecisionFactor(currentValue) {
        var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

        var precision = this.getMaxPrecision(currentValue, ratio);
        return Math.pow(10, precision);
      },
      getInputDisplayValue: function getInputDisplayValue(state) {
        var _ref = state || this.$data,
            focused = _ref.focused,
            inputValue = _ref.inputValue,
            sValue = _ref.sValue;

        var inputDisplayValue = void 0;
        if (focused) {
          inputDisplayValue = inputValue;
        } else {
          inputDisplayValue = this.toPrecisionAsStep(sValue);
        }

        if (inputDisplayValue === undefined || inputDisplayValue === null) {
          inputDisplayValue = '';
        }

        var inputDisplayValueFormat = this.formatWrapper(inputDisplayValue);
        if (isValidProps(this.$props.decimalSeparator)) {
          inputDisplayValueFormat = inputDisplayValueFormat.toString().replace('.', this.$props.decimalSeparator);
        }

        return inputDisplayValueFormat;
      },
      recordCursorPosition: function recordCursorPosition() {
        // Record position
        try {
          var inputElem = this.$refs.inputRef;
          this.cursorStart = inputElem.selectionStart;
          this.cursorEnd = inputElem.selectionEnd;
          this.currentValue = inputElem.value;
          this.cursorBefore = inputElem.value.substring(0, this.cursorStart);
          this.cursorAfter = inputElem.value.substring(this.cursorEnd);
        } catch (e) {
          // Fix error in Chrome:
          // Failed to read the 'selectionStart' property from 'HTMLInputElement'
          // http://stackoverflow.com/q/21177489/3040605
        }
      },
      fixCaret: function fixCaret(start, end) {
        if (start === undefined || end === undefined || !this.$refs.inputRef || !this.$refs.inputRef.value) {
          return;
        }

        try {
          var inputElem = this.$refs.inputRef;
          var currentStart = inputElem.selectionStart;
          var currentEnd = inputElem.selectionEnd;

          if (start !== currentStart || end !== currentEnd) {
            inputElem.setSelectionRange(start, end);
          }
        } catch (e) {
          // Fix error in Chrome:
          // Failed to read the 'selectionStart' property from 'HTMLInputElement'
          // http://stackoverflow.com/q/21177489/3040605
        }
      },
      restoreByAfter: function restoreByAfter(str) {
        if (str === undefined) return false;

        var fullStr = this.$refs.inputRef.value;
        var index = fullStr.lastIndexOf(str);

        if (index === -1) return false;

        var prevCursorPos = this.cursorBefore.length;
        if (this.lastKeyCode === KeyCode.DELETE && this.cursorBefore.charAt(prevCursorPos - 1) === str[0]) {
          this.fixCaret(prevCursorPos, prevCursorPos);
          return true;
        }
        if (index + str.length === fullStr.length) {
          this.fixCaret(index, index);

          return true;
        }
        return false;
      },
      partRestoreByAfter: function partRestoreByAfter(str) {
        var _this3 = this;

        if (str === undefined) return false;

        // For loop from full str to the str with last char to map. e.g. 123
        // -> 123
        // -> 23
        // -> 3
        return Array.prototype.some.call(str, function (_, start) {
          var partStr = str.substring(start);

          return _this3.restoreByAfter(partStr);
        });
      },
      focus: function focus() {
        this.$refs.inputRef.focus();
        this.recordCursorPosition();
      },
      blur: function blur() {
        this.$refs.inputRef.blur();
      },
      formatWrapper: function formatWrapper(num) {
        // http://2ality.com/2012/03/signedzero.html
        // https://github.com/ant-design/ant-design/issues/9439
        if (this.formatter) {
          return this.formatter(num);
        }
        return num;
      },
      toPrecisionAsStep: function toPrecisionAsStep(num) {
        if (this.isNotCompleteNumber(num) || num === '') {
          return num;
        }
        var precision = Math.abs(this.getMaxPrecision(num));
        if (!isNaN(precision)) {
          return Number(num).toFixed(precision);
        }
        return num.toString();
      },

      // '1.' '1x' 'xx' '' => are not complete numbers
      isNotCompleteNumber: function isNotCompleteNumber(num) {
        return isNaN(num) || num === '' || num === null || num && num.toString().indexOf('.') === num.toString().length - 1;
      },
      toNumber: function toNumber(num) {
        var _$props2 = this.$props,
            precision = _$props2.precision,
            autoFocus = _$props2.autoFocus;
        var _focused = this.focused,
            focused = _focused === undefined ? autoFocus : _focused;
        // num.length > 16 => This is to prevent input of large numbers

        var numberIsTooLarge = num && num.length > 16 && focused;
        if (this.isNotCompleteNumber(num) || numberIsTooLarge) {
          return num;
        }
        if (isValidProps(precision)) {
          return Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision);
        }
        return Number(num);
      },
      upStep: function upStep(val, rat) {
        var step = this.step;

        var precisionFactor = this.getPrecisionFactor(val, rat);
        var precision = Math.abs(this.getMaxPrecision(val, rat));
        var result = ((precisionFactor * val + precisionFactor * step * rat) / precisionFactor).toFixed(precision);
        return this.toNumber(result);
      },
      downStep: function downStep(val, rat) {
        var step = this.step;

        var precisionFactor = this.getPrecisionFactor(val, rat);
        var precision = Math.abs(this.getMaxPrecision(val, rat));
        var result = ((precisionFactor * val - precisionFactor * step * rat) / precisionFactor).toFixed(precision);
        return this.toNumber(result);
      },
      stepFn: function stepFn(type, e) {
        var _this4 = this;

        var ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var recursive = arguments[3];

        this.stop();
        if (e) {
          // e.persist()
          e.preventDefault();
        }
        if (this.disabled) {
          return;
        }
        var max = this.max,
            min = this.min;

        var value = this.getCurrentValidValue(this.inputValue) || 0;
        if (this.isNotCompleteNumber(value)) {
          return;
        }
        var val = this[type + 'Step'](value, ratio);
        var outOfRange = val > max || val < min;
        if (val > max) {
          val = max;
        } else if (val < min) {
          val = min;
        }
        this.setValue(val);
        this.setState({
          focused: true
        });
        if (outOfRange) {
          return;
        }
        this.autoStepTimer = setTimeout(function () {
          _this4[type](e, ratio, true);
        }, recursive ? SPEED : DELAY);
      },
      stop: function stop() {
        if (this.autoStepTimer) {
          clearTimeout(this.autoStepTimer);
        }
      },
      down: function down(e, ratio, recursive) {
        this.pressingUpOrDown = true;
        this.stepFn('down', e, ratio, recursive);
      },
      up: function up(e, ratio, recursive) {
        this.pressingUpOrDown = true;
        this.stepFn('up', e, ratio, recursive);
      },
      handleInputClick: function handleInputClick() {
        this.$emit('click');
      }
    },
    render: function render() {
      var _classNames;

      var h = arguments[0];
      var _$props3 = this.$props,
          prefixCls = _$props3.prefixCls,
          disabled = _$props3.disabled,
          readOnly = _$props3.readOnly,
          useTouch = _$props3.useTouch,
          autoComplete = _$props3.autoComplete,
          upHandler = _$props3.upHandler,
          downHandler = _$props3.downHandler;

      var classes = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, prefixCls + '-disabled', disabled), _defineProperty(_classNames, prefixCls + '-focused', this.focused), _classNames));
      var upDisabledClass = '';
      var downDisabledClass = '';
      var sValue = this.sValue;

      if (sValue || sValue === 0) {
        if (!isNaN(sValue)) {
          var val = Number(sValue);
          if (val >= this.max) {
            upDisabledClass = prefixCls + '-handler-up-disabled';
          }
          if (val <= this.min) {
            downDisabledClass = prefixCls + '-handler-down-disabled';
          }
        } else {
          upDisabledClass = prefixCls + '-handler-up-disabled';
          downDisabledClass = prefixCls + '-handler-down-disabled';
        }
      }

      var editable = !this.readOnly && !this.disabled;

      // focus state, show input value
      // unfocus state, show valid value
      var inputDisplayValue = this.getInputDisplayValue();

      var upEvents = void 0;
      var downEvents = void 0;
      if (useTouch) {
        upEvents = {
          touchstart: editable && !upDisabledClass ? this.up : noop$D,
          touchend: this.stop
        };
        downEvents = {
          touchstart: editable && !downDisabledClass ? this.down : noop$D,
          touchend: this.stop
        };
      } else {
        upEvents = {
          mousedown: editable && !upDisabledClass ? this.up : noop$D,
          mouseup: this.stop,
          mouseleave: this.stop
        };
        downEvents = {
          mousedown: editable && !downDisabledClass ? this.down : noop$D,
          mouseup: this.stop,
          mouseleave: this.stop
        };
      }
      var isUpDisabled = !!upDisabledClass || disabled || readOnly;
      var isDownDisabled = !!downDisabledClass || disabled || readOnly;

      var _getListeners = getListeners(this),
          _getListeners$mouseen = _getListeners.mouseenter,
          mouseenter = _getListeners$mouseen === undefined ? noop$D : _getListeners$mouseen,
          _getListeners$mousele = _getListeners.mouseleave,
          mouseleave = _getListeners$mousele === undefined ? noop$D : _getListeners$mousele,
          _getListeners$mouseov = _getListeners.mouseover,
          mouseover = _getListeners$mouseov === undefined ? noop$D : _getListeners$mouseov,
          _getListeners$mouseou = _getListeners.mouseout,
          mouseout = _getListeners$mouseou === undefined ? noop$D : _getListeners$mouseou;

      var contentProps = {
        on: { mouseenter: mouseenter, mouseleave: mouseleave, mouseover: mouseover, mouseout: mouseout },
        'class': classes,
        attrs: { title: this.$props.title }
      };
      var upHandlerProps = {
        props: {
          disabled: isUpDisabled,
          prefixCls: prefixCls
        },
        attrs: {
          unselectable: 'unselectable',
          role: 'button',
          'aria-label': 'Increase Value',
          'aria-disabled': !!isUpDisabled
        },
        'class': prefixCls + '-handler ' + prefixCls + '-handler-up ' + upDisabledClass,
        on: upEvents,
        ref: 'up'
      };
      var downHandlerProps = {
        props: {
          disabled: isDownDisabled,
          prefixCls: prefixCls
        },
        attrs: {
          unselectable: 'unselectable',
          role: 'button',
          'aria-label': 'Decrease Value',
          'aria-disabled': !!isDownDisabled
        },
        'class': prefixCls + '-handler ' + prefixCls + '-handler-down ' + downDisabledClass,
        on: downEvents,
        ref: 'down'
      };
      // ref for test
      return h(
        'div',
        contentProps,
        [h(
          'div',
          { 'class': prefixCls + '-handler-wrap' },
          [h(
            InputHandler,
            upHandlerProps,
            [upHandler || h('span', {
              attrs: {
                unselectable: 'unselectable'
              },
              'class': prefixCls + '-handler-up-inner',
              on: {
                'click': preventDefault
              }
            })]
          ), h(
            InputHandler,
            downHandlerProps,
            [downHandler || h('span', {
              attrs: {
                unselectable: 'unselectable'
              },
              'class': prefixCls + '-handler-down-inner',
              on: {
                'click': preventDefault
              }
            })]
          )]
        ), h(
          'div',
          { 'class': prefixCls + '-input-wrap' },
          [h('input', {
            attrs: {
              role: 'spinbutton',
              'aria-valuemin': this.min,
              'aria-valuemax': this.max,
              'aria-valuenow': sValue,
              required: this.required,
              type: this.type,
              placeholder: this.placeholder,

              tabIndex: this.tabIndex,
              autoComplete: autoComplete,

              readOnly: this.readOnly,
              disabled: this.disabled,
              max: this.max,
              min: this.min,
              step: this.step,
              name: this.name,
              title: this.title,
              id: this.id,

              pattern: this.pattern
            },
            on: {
              'click': this.handleInputClick,
              'focus': this.onFocus,
              'blur': this.onBlur,
              'keydown': editable ? this.onKeyDown : noop$D,
              'keyup': editable ? this.onKeyUp : noop$D,
              'input': this.onChange
            },

            'class': prefixCls + '-input',
            ref: 'inputRef',
            domProps: {
              'value': inputDisplayValue
            }
          })]
        )]
      );
    }
  };

  var InputNumberProps = {
    prefixCls: VuePropTypes.string,
    min: VuePropTypes.number,
    max: VuePropTypes.number,
    value: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string]),
    step: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string]),
    defaultValue: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string]),
    tabIndex: VuePropTypes.number,
    disabled: VuePropTypes.bool,
    size: VuePropTypes.oneOf(['large', 'small', 'default']),
    formatter: VuePropTypes.func,
    parser: VuePropTypes.func,
    decimalSeparator: VuePropTypes.string,
    placeholder: VuePropTypes.string,
    name: VuePropTypes.string,
    id: VuePropTypes.string,
    precision: VuePropTypes.number,
    autoFocus: VuePropTypes.bool
  };

  var InputNumber = {
    name: 'AInputNumber',
    model: {
      prop: 'value',
      event: 'change'
    },
    props: initDefaultProps(InputNumberProps, {
      step: 1
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      focus: function focus() {
        this.$refs.inputNumberRef.focus();
      },
      blur: function blur() {
        this.$refs.inputNumberRef.blur();
      }
    },

    render: function render() {
      var _classNames;

      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          customizePrefixCls = _getOptionProps.prefixCls,
          size = _getOptionProps.size,
          others = _objectWithoutProperties(_getOptionProps, ['prefixCls', 'size']);

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('input-number', customizePrefixCls);

      var inputNumberClass = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-lg', size === 'large'), _defineProperty(_classNames, prefixCls + '-sm', size === 'small'), _classNames));
      var upIcon = h(Icon$1, {
        attrs: { type: 'up' },
        'class': prefixCls + '-handler-up-inner' });
      var downIcon = h(Icon$1, {
        attrs: { type: 'down' },
        'class': prefixCls + '-handler-down-inner' });

      var vcInputNumberprops = {
        props: _extends$1({
          prefixCls: prefixCls,
          upHandler: upIcon,
          downHandler: downIcon
        }, others),
        'class': inputNumberClass,
        ref: 'inputNumberRef',
        on: getListeners(this)
      };
      return h(VcInputNumber, vcInputNumberprops);
    }
  };

  /* istanbul ignore next */
  InputNumber.install = function (Vue) {
    Vue.use(base);
    Vue.component(InputNumber.name, InputNumber);
  };

  var BasicProps = {
    prefixCls: VuePropTypes.string,
    hasSider: VuePropTypes.boolean,
    tagName: VuePropTypes.string
  };

  function generator(_ref) {
    var suffixCls = _ref.suffixCls,
        tagName = _ref.tagName,
        name = _ref.name;

    return function (BasicComponent) {
      return {
        name: name,
        props: BasicComponent.props,
        inject: {
          configProvider: { 'default': function _default() {
              return ConfigConsumerProps;
            } }
        },
        render: function render() {
          var h = arguments[0];
          var customizePrefixCls = this.$props.prefixCls;

          var getPrefixCls = this.configProvider.getPrefixCls;
          var prefixCls = getPrefixCls(suffixCls, customizePrefixCls);

          var basicComponentProps = {
            props: _extends$1({
              prefixCls: prefixCls
            }, getOptionProps(this), {
              tagName: tagName
            }),
            on: getListeners(this)
          };
          return h(
            BasicComponent,
            basicComponentProps,
            [this.$slots['default']]
          );
        }
      };
    };
  }

  var Basic = {
    props: BasicProps,
    render: function render() {
      var h = arguments[0];
      var prefixCls = this.prefixCls,
          Tag = this.tagName,
          $slots = this.$slots;

      var divProps = {
        'class': prefixCls,
        on: getListeners(this)
      };
      return h(
        Tag,
        divProps,
        [$slots['default']]
      );
    }
  };

  var BasicLayout = {
    props: BasicProps,
    data: function data() {
      return {
        siders: []
      };
    },
    provide: function provide() {
      var _this = this;

      return {
        siderHook: {
          addSider: function addSider(id) {
            _this.siders = [].concat(_toConsumableArray(_this.siders), [id]);
          },
          removeSider: function removeSider(id) {
            _this.siders = _this.siders.filter(function (currentId) {
              return currentId !== id;
            });
          }
        }
      };
    },
    render: function render() {
      var h = arguments[0];
      var prefixCls = this.prefixCls,
          $slots = this.$slots,
          hasSider = this.hasSider,
          Tag = this.tagName;

      var divCls = classnames(prefixCls, _defineProperty({}, prefixCls + '-has-sider', typeof hasSider === 'boolean' ? hasSider : this.siders.length > 0));
      var divProps = {
        'class': divCls,
        on: getListeners
      };
      return h(
        Tag,
        divProps,
        [$slots['default']]
      );
    }
  };

  var Layout = generator({
    suffixCls: 'layout',
    tagName: 'section',
    name: 'ALayout'
  })(BasicLayout);

  var Header$2 = generator({
    suffixCls: 'layout-header',
    tagName: 'header',
    name: 'ALayoutHeader'
  })(Basic);

  var Footer = generator({
    suffixCls: 'layout-footer',
    tagName: 'footer',
    name: 'ALayoutFooter'
  })(Basic);

  var Content$1 = generator({
    suffixCls: 'layout-content',
    tagName: 'main',
    name: 'ALayoutContent'
  })(Basic);

  Layout.Header = Header$2;
  Layout.Footer = Footer;
  Layout.Content = Content$1;

  // matchMedia polyfill for
  // https://github.com/WickyNilliams/enquire.js/issues/82
  if (typeof window !== 'undefined') {
    var matchMediaPolyfill$2 = function matchMediaPolyfill(mediaQuery) {
      return {
        media: mediaQuery,
        matches: false,
        addListener: function addListener() {},
        removeListener: function removeListener() {}
      };
    };
    window.matchMedia = window.matchMedia || matchMediaPolyfill$2;
  }

  var dimensionMaxMap = {
    xs: '479.98px',
    sm: '575.98px',
    md: '767.98px',
    lg: '991.98px',
    xl: '1199.98px',
    xxl: '1599.98px'
  };

  // export type CollapseType = 'clickTrigger' | 'responsive';

  var SiderProps = {
    prefixCls: VuePropTypes.string,
    collapsible: VuePropTypes.bool,
    collapsed: VuePropTypes.bool,
    defaultCollapsed: VuePropTypes.bool,
    reverseArrow: VuePropTypes.bool,
    // onCollapse?: (collapsed: boolean, type: CollapseType) => void;
    zeroWidthTriggerStyle: VuePropTypes.object,
    trigger: VuePropTypes.any,
    width: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string]),
    collapsedWidth: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string]),
    breakpoint: VuePropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', 'xxl']),
    theme: VuePropTypes.oneOf(['light', 'dark']).def('dark')
  };

  // export interface SiderState {
  //   collapsed?: boolean;
  //   below: boolean;
  //   belowShow?: boolean;
  // }

  // export interface SiderContext {
  //   siderCollapsed: boolean;
  // }

  var generateId = function () {
    var i = 0;
    return function () {
      var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      i += 1;
      return '' + prefix + i;
    };
  }();

  var Sider = {
    name: 'ALayoutSider',
    __ANT_LAYOUT_SIDER: true,
    mixins: [BaseMixin],
    model: {
      prop: 'collapsed',
      event: 'collapse'
    },
    props: initDefaultProps(SiderProps, {
      collapsible: false,
      defaultCollapsed: false,
      reverseArrow: false,
      width: 200,
      collapsedWidth: 80
    }),
    data: function data() {
      this.uniqueId = generateId('ant-sider-');
      var matchMedia = void 0;
      if (typeof window !== 'undefined') {
        matchMedia = window.matchMedia;
      }
      var props = getOptionProps(this);
      if (matchMedia && props.breakpoint && props.breakpoint in dimensionMaxMap) {
        this.mql = matchMedia('(max-width: ' + dimensionMaxMap[props.breakpoint] + ')');
      }
      var sCollapsed = void 0;
      if ('collapsed' in props) {
        sCollapsed = props.collapsed;
      } else {
        sCollapsed = props.defaultCollapsed;
      }
      return {
        sCollapsed: sCollapsed,
        below: false,
        belowShow: false
      };
    },
    provide: function provide() {
      return {
        layoutSiderContext: this // menu组件中使用
      };
    },

    inject: {
      siderHook: { 'default': function _default() {
          return {};
        } },
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    // getChildContext() {
    //   return {
    //     siderCollapsed: this.state.collapsed,
    //     collapsedWidth: this.props.collapsedWidth,
    //   };
    // }
    watch: {
      collapsed: function collapsed(val) {
        this.setState({
          sCollapsed: val
        });
      }
    },

    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        if (_this.mql) {
          _this.mql.addListener(_this.responsiveHandler);
          _this.responsiveHandler(_this.mql);
        }

        if (_this.siderHook.addSider) {
          _this.siderHook.addSider(_this.uniqueId);
        }
      });
    },
    beforeDestroy: function beforeDestroy() {
      if (this.mql) {
        this.mql.removeListener(this.responsiveHandler);
      }

      if (this.siderHook.removeSider) {
        this.siderHook.removeSider(this.uniqueId);
      }
    },

    methods: {
      responsiveHandler: function responsiveHandler(mql) {
        this.setState({ below: mql.matches });
        this.$emit('breakpoint', mql.matches);
        if (this.sCollapsed !== mql.matches) {
          this.setCollapsed(mql.matches, 'responsive');
        }
      },
      setCollapsed: function setCollapsed(collapsed, type) {
        if (!hasProp(this, 'collapsed')) {
          this.setState({
            sCollapsed: collapsed
          });
        }
        this.$emit('collapse', collapsed, type);
      },
      toggle: function toggle() {
        var collapsed = !this.sCollapsed;
        this.setCollapsed(collapsed, 'clickTrigger');
      },
      belowShowChange: function belowShowChange() {
        this.setState({ belowShow: !this.belowShow });
      }
    },

    render: function render() {
      var _classNames;

      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          customizePrefixCls = _getOptionProps.prefixCls,
          theme = _getOptionProps.theme,
          collapsible = _getOptionProps.collapsible,
          reverseArrow = _getOptionProps.reverseArrow,
          width = _getOptionProps.width,
          collapsedWidth = _getOptionProps.collapsedWidth,
          zeroWidthTriggerStyle = _getOptionProps.zeroWidthTriggerStyle;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('layout-sider', customizePrefixCls);

      var trigger = getComponentFromProp(this, 'trigger');
      var rawWidth = this.sCollapsed ? collapsedWidth : width;
      // use "px" as fallback unit for width
      var siderWidth = isNumeric(rawWidth) ? rawWidth + 'px' : String(rawWidth);
      // special trigger when collapsedWidth == 0
      var zeroWidthTrigger = parseFloat(String(collapsedWidth || 0)) === 0 ? h(
        'span',
        {
          on: {
            'click': this.toggle
          },

          'class': prefixCls + '-zero-width-trigger ' + prefixCls + '-zero-width-trigger-' + (reverseArrow ? 'right' : 'left'),
          style: zeroWidthTriggerStyle
        },
        [h(Icon$1, {
          attrs: { type: 'bars' }
        })]
      ) : null;
      var iconObj = {
        expanded: reverseArrow ? h(Icon$1, {
          attrs: { type: 'right' }
        }) : h(Icon$1, {
          attrs: { type: 'left' }
        }),
        collapsed: reverseArrow ? h(Icon$1, {
          attrs: { type: 'left' }
        }) : h(Icon$1, {
          attrs: { type: 'right' }
        })
      };
      var status = this.sCollapsed ? 'collapsed' : 'expanded';
      var defaultTrigger = iconObj[status];
      var triggerDom = trigger !== null ? zeroWidthTrigger || h(
        'div',
        { 'class': prefixCls + '-trigger', on: {
            'click': this.toggle
          },
          style: { width: siderWidth } },
        [trigger || defaultTrigger]
      ) : null;
      var divStyle = {
        // ...style,
        flex: '0 0 ' + siderWidth,
        maxWidth: siderWidth, // Fix width transition bug in IE11
        minWidth: siderWidth, // https://github.com/ant-design/ant-design/issues/6349
        width: siderWidth
      };
      var siderCls = classnames(prefixCls, prefixCls + '-' + theme, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-collapsed', !!this.sCollapsed), _defineProperty(_classNames, prefixCls + '-has-trigger', collapsible && trigger !== null && !zeroWidthTrigger), _defineProperty(_classNames, prefixCls + '-below', !!this.below), _defineProperty(_classNames, prefixCls + '-zero-width', parseFloat(siderWidth) === 0), _classNames));
      var divProps = {
        on: getListeners(this),
        'class': siderCls,
        style: divStyle
      };
      return h(
        'aside',
        divProps,
        [h(
          'div',
          { 'class': prefixCls + '-children' },
          [this.$slots['default']]
        ), collapsible || this.below && zeroWidthTrigger ? triggerDom : null]
      );
    }
  };

  Layout.Sider = Sider;

  /* istanbul ignore next */
  Layout.install = function (Vue) {
    Vue.use(base);
    Vue.component(Layout.name, Layout);
    Vue.component(Layout.Header.name, Layout.Header);
    Vue.component(Layout.Footer.name, Layout.Footer);
    Vue.component(Layout.Sider.name, Layout.Sider);
    Vue.component(Layout.Content.name, Layout.Content);
  };

  var SpinSize = VuePropTypes.oneOf(['small', 'default', 'large']);

  var SpinProps = function SpinProps() {
    return {
      prefixCls: VuePropTypes.string,
      spinning: VuePropTypes.bool,
      size: SpinSize,
      wrapperClassName: VuePropTypes.string,
      tip: VuePropTypes.string,
      delay: VuePropTypes.number,
      indicator: VuePropTypes.any
    };
  };

  // Render indicator
  var defaultIndicator = void 0;

  function shouldDelay(spinning, delay) {
    return !!spinning && !!delay && !isNaN(Number(delay));
  }

  function setDefaultIndicator(Content) {
    defaultIndicator = typeof Content.indicator === 'function' ? Content.indicator : function (h) {
      return h(Content.indicator);
    };
  }

  var Spin = {
    name: 'ASpin',
    mixins: [BaseMixin],
    props: initDefaultProps(SpinProps(), {
      size: 'default',
      spinning: true,
      wrapperClassName: ''
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      var spinning = this.spinning,
          delay = this.delay;

      var shouldBeDelayed = shouldDelay(spinning, delay);
      this.originalUpdateSpinning = this.updateSpinning;
      this.debouncifyUpdateSpinning(this.$props);
      return {
        sSpinning: spinning && !shouldBeDelayed
      };
    },
    mounted: function mounted() {
      this.updateSpinning();
    },
    updated: function updated() {
      var _this = this;

      this.$nextTick(function () {
        _this.debouncifyUpdateSpinning();
        _this.updateSpinning();
      });
    },
    beforeDestroy: function beforeDestroy() {
      this.cancelExistingSpin();
    },

    methods: {
      debouncifyUpdateSpinning: function debouncifyUpdateSpinning(props) {
        var _ref = props || this.$props,
            delay = _ref.delay;

        if (delay) {
          this.cancelExistingSpin();
          this.updateSpinning = debounce_1(this.originalUpdateSpinning, delay);
        }
      },
      updateSpinning: function updateSpinning() {
        var spinning = this.spinning,
            sSpinning = this.sSpinning;

        if (sSpinning !== spinning) {
          this.setState({ sSpinning: spinning });
        }
      },
      cancelExistingSpin: function cancelExistingSpin() {
        var updateSpinning = this.updateSpinning;

        if (updateSpinning && updateSpinning.cancel) {
          updateSpinning.cancel();
        }
      },
      getChildren: function getChildren() {
        if (this.$slots && this.$slots['default']) {
          return filterEmpty(this.$slots['default']);
        }
        return null;
      },
      renderIndicator: function renderIndicator(h, prefixCls) {
        // const h = this.$createElement
        var dotClassName = prefixCls + '-dot';
        var indicator = getComponentFromProp(this, 'indicator');
        // should not be render default indicator when indicator value is null
        if (indicator === null) {
          return null;
        }
        if (Array.isArray(indicator)) {
          indicator = filterEmpty(indicator);
          indicator = indicator.length === 1 ? indicator[0] : indicator;
        }
        if (isValidElement(indicator)) {
          return cloneElement(indicator, { 'class': dotClassName });
        }

        if (defaultIndicator && isValidElement(defaultIndicator(h))) {
          return cloneElement(defaultIndicator(h), { 'class': dotClassName });
        }

        return h(
          'span',
          { 'class': dotClassName + ' ' + prefixCls + '-dot-spin' },
          [h('i', { 'class': prefixCls + '-dot-item' }), h('i', { 'class': prefixCls + '-dot-item' }), h('i', { 'class': prefixCls + '-dot-item' }), h('i', { 'class': prefixCls + '-dot-item' })]
        );
      }
    },
    render: function render(h) {
      var _spinClassName;

      var _$props = this.$props,
          size = _$props.size,
          customizePrefixCls = _$props.prefixCls,
          tip = _$props.tip,
          wrapperClassName = _$props.wrapperClassName,
          restProps = _objectWithoutProperties(_$props, ['size', 'prefixCls', 'tip', 'wrapperClassName']);

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('spin', customizePrefixCls);

      var sSpinning = this.sSpinning;

      var spinClassName = (_spinClassName = {}, _defineProperty(_spinClassName, prefixCls, true), _defineProperty(_spinClassName, prefixCls + '-sm', size === 'small'), _defineProperty(_spinClassName, prefixCls + '-lg', size === 'large'), _defineProperty(_spinClassName, prefixCls + '-spinning', sSpinning), _defineProperty(_spinClassName, prefixCls + '-show-text', !!tip), _spinClassName);

      var spinElement = h(
        'div',
        babelHelperVueJsxMergeProps([restProps, { 'class': spinClassName }]),
        [this.renderIndicator(h, prefixCls), tip ? h(
          'div',
          { 'class': prefixCls + '-text' },
          [tip]
        ) : null]
      );
      var children = this.getChildren();
      if (children) {
        var _containerClassName;

        var containerClassName = (_containerClassName = {}, _defineProperty(_containerClassName, prefixCls + '-container', true), _defineProperty(_containerClassName, prefixCls + '-blur', sSpinning), _containerClassName);

        return h(
          'div',
          babelHelperVueJsxMergeProps([{ on: getListeners(this) }, {
            'class': [prefixCls + '-nested-loading', wrapperClassName]
          }]),
          [sSpinning && h(
            'div',
            { key: 'loading' },
            [spinElement]
          ), h(
            'div',
            { 'class': containerClassName, key: 'container' },
            [children]
          )]
        );
      }
      return spinElement;
    }
  };

  Spin.setDefaultIndicator = setDefaultIndicator;

  /* istanbul ignore next */
  Spin.install = function (Vue) {
    Vue.use(base);
    Vue.component(Spin.name, Spin);
  };

  var MiniSelect = {
    props: _extends$1({}, SelectProps),
    Option: Select$1.Option,
    render: function render() {
      var h = arguments[0];

      var selectOptionsProps = getOptionProps(this);
      var selelctProps = {
        props: _extends$1({}, selectOptionsProps, {
          size: 'small'
        }),
        on: getListeners(this)
      };
      return h(
        Select$1,
        selelctProps,
        [filterEmpty(this.$slots['default'])]
      );
    }
  };

  var Pager = {
    name: 'Pager',
    props: {
      rootPrefixCls: VuePropTypes.string,
      page: VuePropTypes.number,
      active: VuePropTypes.bool,
      last: VuePropTypes.bool,
      locale: VuePropTypes.object,
      showTitle: VuePropTypes.bool,
      itemRender: {
        type: Function,
        'default': function _default() {}
      }
    },
    methods: {
      handleClick: function handleClick() {
        this.$emit('click', this.page);
      },
      handleKeyPress: function handleKeyPress(event) {
        this.$emit('keypress', event, this.handleClick, this.page);
      }
    },
    render: function render() {
      var _classNames;

      var h = arguments[0];

      var props = this.$props;
      var prefixCls = props.rootPrefixCls + '-item';
      var cls = classnames(prefixCls, prefixCls + '-' + props.page, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-active', props.active), _defineProperty(_classNames, prefixCls + '-disabled', !props.page), _classNames));

      return h(
        'li',
        {
          'class': cls,
          on: {
            'click': this.handleClick,
            'keypress': this.handleKeyPress
          },
          attrs: {
            title: this.showTitle ? this.page : null,
            tabIndex: '0'
          }
        },
        [this.itemRender(this.page, 'page', h('a', [this.page]))]
      );
    }
  };

  var KEYCODE = {
    ZERO: 48,
    NINE: 57,

    NUMPAD_ZERO: 96,
    NUMPAD_NINE: 105,

    BACKSPACE: 8,
    DELETE: 46,
    ENTER: 13,

    ARROW_UP: 38,
    ARROW_DOWN: 40
  };

  var Options = {
    mixins: [BaseMixin],
    props: {
      disabled: VuePropTypes.bool,
      changeSize: VuePropTypes.func,
      quickGo: VuePropTypes.func,
      selectComponentClass: VuePropTypes.any,
      current: VuePropTypes.number,
      pageSizeOptions: VuePropTypes.array.def(['10', '20', '30', '40']),
      pageSize: VuePropTypes.number,
      buildOptionText: VuePropTypes.func,
      locale: VuePropTypes.object,
      rootPrefixCls: VuePropTypes.string,
      selectPrefixCls: VuePropTypes.string,
      goButton: VuePropTypes.any
    },
    data: function data() {
      return {
        goInputText: ''
      };
    },

    methods: {
      getValidValue: function getValidValue() {
        var goInputText = this.goInputText,
            current = this.current;

        return !goInputText || isNaN(goInputText) ? current : Number(goInputText);
      },
      defaultBuildOptionText: function defaultBuildOptionText(opt) {
        return opt.value + ' ' + this.locale.items_per_page;
      },
      handleChange: function handleChange(e) {
        var _e$target = e.target,
            value = _e$target.value,
            composing = _e$target.composing;

        if (e.isComposing || composing || this.goInputText === value) return;
        this.setState({
          goInputText: value
        });
      },
      handleBlur: function handleBlur(e) {
        var _$props = this.$props,
            goButton = _$props.goButton,
            quickGo = _$props.quickGo,
            rootPrefixCls = _$props.rootPrefixCls;

        if (goButton) {
          return;
        }
        if (e.relatedTarget && (e.relatedTarget.className.indexOf(rootPrefixCls + '-prev') >= 0 || e.relatedTarget.className.indexOf(rootPrefixCls + '-next') >= 0)) {
          return;
        }
        quickGo(this.getValidValue());
      },
      go: function go(e) {
        var goInputText = this.goInputText;

        if (goInputText === '') {
          return;
        }
        if (e.keyCode === KEYCODE.ENTER || e.type === 'click') {
          // https://github.com/vueComponent/ant-design-vue/issues/1316
          this.quickGo(this.getValidValue());
          this.setState({
            goInputText: ''
          });
        }
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var rootPrefixCls = this.rootPrefixCls,
          locale = this.locale,
          changeSize = this.changeSize,
          quickGo = this.quickGo,
          goButton = this.goButton,
          Select = this.selectComponentClass,
          defaultBuildOptionText = this.defaultBuildOptionText,
          selectPrefixCls = this.selectPrefixCls,
          pageSize = this.pageSize,
          pageSizeOptions = this.pageSizeOptions,
          goInputText = this.goInputText,
          disabled = this.disabled;

      var prefixCls = rootPrefixCls + '-options';
      var changeSelect = null;
      var goInput = null;
      var gotoButton = null;

      if (!changeSize && !quickGo) {
        return null;
      }

      if (changeSize && Select) {
        var buildOptionText = this.buildOptionText || defaultBuildOptionText;
        var options = pageSizeOptions.map(function (opt, i) {
          return h(
            Select.Option,
            { key: i, attrs: { value: opt }
            },
            [buildOptionText({ value: opt })]
          );
        });

        changeSelect = h(
          Select,
          {
            attrs: {
              disabled: disabled,
              prefixCls: selectPrefixCls,
              showSearch: false,

              optionLabelProp: 'children',
              dropdownMatchSelectWidth: false,
              value: (pageSize || pageSizeOptions[0]).toString(),

              getPopupContainer: function getPopupContainer(triggerNode) {
                return triggerNode.parentNode;
              }
            },
            'class': prefixCls + '-size-changer', on: {
              'change': function change(value) {
                return _this.changeSize(Number(value));
              }
            }
          },
          [options]
        );
      }

      if (quickGo) {
        if (goButton) {
          gotoButton = typeof goButton === 'boolean' ? h(
            'button',
            {
              attrs: { type: 'button', disabled: disabled },
              on: {
                'click': this.go,
                'keyup': this.go
              }
            },
            [locale.jump_to_confirm]
          ) : h(
            'span',
            {
              on: {
                'click': this.go,
                'keyup': this.go
              }
            },
            [goButton]
          );
        }
        goInput = h(
          'div',
          { 'class': prefixCls + '-quick-jumper' },
          [locale.jump_to, h('input', babelHelperVueJsxMergeProps([{
            attrs: {
              disabled: disabled,
              type: 'text'
            },
            domProps: {
              'value': goInputText
            },
            on: {
              'input': this.handleChange,
              'keyup': this.go,
              'blur': this.handleBlur
            }
          }, {
            directives: [{
              name: 'ant-input'
            }]
          }])), locale.page, gotoButton]
        );
      }

      return h(
        'li',
        { 'class': '' + prefixCls },
        [changeSelect, goInput]
      );
    }
  };

  var LOCALE = {
    // Options.jsx
    items_per_page: '条/页',
    jump_to: '跳至',
    jump_to_confirm: '确定',
    page: '页',

    // Pagination.jsx
    prev_page: '上一页',
    next_page: '下一页',
    prev_5: '向前 5 页',
    next_5: '向后 5 页',
    prev_3: '向前 3 页',
    next_3: '向后 3 页'
  };

  function noop$E() {}

  // 是否是正整数
  function isInteger$1(value) {
    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
  }

  function defaultItemRender(page, type, element) {
    return element;
  }

  function calculatePage(p, state, props) {
    var pageSize = p;
    if (typeof pageSize === 'undefined') {
      pageSize = state.statePageSize;
    }
    return Math.floor((props.total - 1) / pageSize) + 1;
  }

  var VcPagination = {
    name: 'Pagination',
    mixins: [BaseMixin],
    model: {
      prop: 'current',
      event: 'change.current'
    },
    props: {
      disabled: VuePropTypes.bool,
      prefixCls: VuePropTypes.string.def('rc-pagination'),
      selectPrefixCls: VuePropTypes.string.def('rc-select'),
      current: VuePropTypes.number,
      defaultCurrent: VuePropTypes.number.def(1),
      total: VuePropTypes.number.def(0),
      pageSize: VuePropTypes.number,
      defaultPageSize: VuePropTypes.number.def(10),
      hideOnSinglePage: VuePropTypes.bool.def(false),
      showSizeChanger: VuePropTypes.bool.def(false),
      showLessItems: VuePropTypes.bool.def(false),
      // showSizeChange: PropTypes.func.def(noop),
      selectComponentClass: VuePropTypes.any,
      showPrevNextJumpers: VuePropTypes.bool.def(true),
      showQuickJumper: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.object]).def(false),
      showTitle: VuePropTypes.bool.def(true),
      pageSizeOptions: VuePropTypes.arrayOf(VuePropTypes.string),
      buildOptionText: VuePropTypes.func,
      showTotal: VuePropTypes.func,
      simple: VuePropTypes.bool,
      locale: VuePropTypes.object.def(LOCALE),
      itemRender: VuePropTypes.func.def(defaultItemRender),
      prevIcon: VuePropTypes.any,
      nextIcon: VuePropTypes.any,
      jumpPrevIcon: VuePropTypes.any,
      jumpNextIcon: VuePropTypes.any
    },
    data: function data() {
      var props = getOptionProps(this);
      var hasOnChange = this.onChange !== noop$E;
      var hasCurrent = 'current' in props;
      if (hasCurrent && !hasOnChange) {
        console.warn('Warning: You provided a `current` prop to a Pagination component without an `onChange` handler. This will render a read-only component.'); // eslint-disable-line
      }
      var current = this.defaultCurrent;
      if ('current' in props) {
        current = this.current;
      }

      var pageSize = this.defaultPageSize;
      if ('pageSize' in props) {
        pageSize = this.pageSize;
      }

      current = Math.min(current, calculatePage(pageSize, undefined, props));

      return {
        stateCurrent: current,
        stateCurrentInputValue: current,
        statePageSize: pageSize
      };
    },

    watch: {
      current: function current(val) {
        this.setState({
          stateCurrent: val,
          stateCurrentInputValue: val
        });
      },
      pageSize: function pageSize(val) {
        var newState = {};
        var current = this.stateCurrent;
        var newCurrent = calculatePage(val, this.$data, this.$props);
        current = current > newCurrent ? newCurrent : current;
        if (!hasProp(this, 'current')) {
          newState.stateCurrent = current;
          newState.stateCurrentInputValue = current;
        }
        newState.statePageSize = val;
        this.setState(newState);
      },
      stateCurrent: function stateCurrent(val, oldValue) {
        var _this = this;

        // When current page change, fix focused style of prev item
        // A hacky solution of https://github.com/ant-design/ant-design/issues/8948
        this.$nextTick(function () {
          if (_this.$refs.paginationNode) {
            var lastCurrentNode = _this.$refs.paginationNode.querySelector('.' + _this.prefixCls + '-item-' + oldValue);
            if (lastCurrentNode && document.activeElement === lastCurrentNode) {
              lastCurrentNode.blur();
            }
          }
        });
      },
      total: function total() {
        var newState = {};
        var newCurrent = calculatePage(this.pageSize, this.$data, this.$props);
        if (hasProp(this, 'current')) {
          var current = Math.min(this.current, newCurrent);
          newState.stateCurrent = current;
          newState.stateCurrentInputValue = current;
        } else {
          var _current = this.stateCurrent;
          if (_current === 0 && newCurrent > 0) {
            _current = 1;
          } else {
            _current = Math.min(this.stateCurrent, newCurrent);
          }
          newState.stateCurrent = _current;
        }
        this.setState(newState);
      }
    },
    methods: {
      getJumpPrevPage: function getJumpPrevPage() {
        return Math.max(1, this.stateCurrent - (this.showLessItems ? 3 : 5));
      },
      getJumpNextPage: function getJumpNextPage() {
        return Math.min(calculatePage(undefined, this.$data, this.$props), this.stateCurrent + (this.showLessItems ? 3 : 5));
      },
      getItemIcon: function getItemIcon(icon) {
        var h = this.$createElement;
        var prefixCls = this.$props.prefixCls;

        var iconNode = getComponentFromProp(this, icon, this.$props) || h('a', { 'class': prefixCls + '-item-link' });
        return iconNode;
      },
      getValidValue: function getValidValue(e) {
        var inputValue = e.target.value;
        var allPages = calculatePage(undefined, this.$data, this.$props);
        var stateCurrentInputValue = this.$data.stateCurrentInputValue;

        var value = void 0;
        if (inputValue === '') {
          value = inputValue;
        } else if (isNaN(Number(inputValue))) {
          value = stateCurrentInputValue;
        } else if (inputValue >= allPages) {
          value = allPages;
        } else {
          value = Number(inputValue);
        }
        return value;
      },
      isValid: function isValid(page) {
        return isInteger$1(page) && page !== this.stateCurrent;
      },
      shouldDisplayQuickJumper: function shouldDisplayQuickJumper() {
        var _$props = this.$props,
            showQuickJumper = _$props.showQuickJumper,
            pageSize = _$props.pageSize,
            total = _$props.total;

        if (total <= pageSize) {
          return false;
        }
        return showQuickJumper;
      },

      // calculatePage (p) {
      //   let pageSize = p
      //   if (typeof pageSize === 'undefined') {
      //     pageSize = this.statePageSize
      //   }
      //   return Math.floor((this.total - 1) / pageSize) + 1
      // },
      handleKeyDown: function handleKeyDown(event) {
        if (event.keyCode === KEYCODE.ARROW_UP || event.keyCode === KEYCODE.ARROW_DOWN) {
          event.preventDefault();
        }
      },
      handleKeyUp: function handleKeyUp(e) {
        if (e.isComposing || e.target.composing) return;
        var value = this.getValidValue(e);
        var stateCurrentInputValue = this.stateCurrentInputValue;

        if (value !== stateCurrentInputValue) {
          this.setState({
            stateCurrentInputValue: value
          });
        }

        if (e.keyCode === KEYCODE.ENTER) {
          this.handleChange(value);
        } else if (e.keyCode === KEYCODE.ARROW_UP) {
          this.handleChange(value - 1);
        } else if (e.keyCode === KEYCODE.ARROW_DOWN) {
          this.handleChange(value + 1);
        }
      },
      changePageSize: function changePageSize(size) {
        var current = this.stateCurrent;
        var preCurrent = current;
        var newCurrent = calculatePage(size, this.$data, this.$props);
        current = current > newCurrent ? newCurrent : current;
        // fix the issue:
        // Once 'total' is 0, 'current' in 'onShowSizeChange' is 0, which is not correct.
        if (newCurrent === 0) {
          current = this.stateCurrent;
        }
        if (typeof size === 'number') {
          if (!hasProp(this, 'pageSize')) {
            this.setState({
              statePageSize: size
            });
          }
          if (!hasProp(this, 'current')) {
            this.setState({
              stateCurrent: current,
              stateCurrentInputValue: current
            });
          }
        }
        this.$emit('update:pageSize', size);
        this.$emit('showSizeChange', current, size);
        if (current !== preCurrent) {
          this.$emit('change.current', current, size);
        }
      },
      handleChange: function handleChange(p) {
        var disabled = this.$props.disabled;

        var page = p;
        if (this.isValid(page) && !disabled) {
          var currentPage = calculatePage(undefined, this.$data, this.$props);
          if (page > currentPage) {
            page = currentPage;
          } else if (page < 1) {
            page = 1;
          }
          if (!hasProp(this, 'current')) {
            this.setState({
              stateCurrent: page,
              stateCurrentInputValue: page
            });
          }
          // this.$emit('input', page)
          this.$emit('change.current', page, this.statePageSize);
          this.$emit('change', page, this.statePageSize);
          return page;
        }
        return this.stateCurrent;
      },
      prev: function prev() {
        if (this.hasPrev()) {
          this.handleChange(this.stateCurrent - 1);
        }
      },
      next: function next() {
        if (this.hasNext()) {
          this.handleChange(this.stateCurrent + 1);
        }
      },
      jumpPrev: function jumpPrev() {
        this.handleChange(this.getJumpPrevPage());
      },
      jumpNext: function jumpNext() {
        this.handleChange(this.getJumpNextPage());
      },
      hasPrev: function hasPrev() {
        return this.stateCurrent > 1;
      },
      hasNext: function hasNext() {
        return this.stateCurrent < calculatePage(undefined, this.$data, this.$props);
      },
      runIfEnter: function runIfEnter(event, callback) {
        if (event.key === 'Enter' || event.charCode === 13) {
          for (var _len = arguments.length, restParams = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            restParams[_key - 2] = arguments[_key];
          }

          callback.apply(undefined, _toConsumableArray(restParams));
        }
      },
      runIfEnterPrev: function runIfEnterPrev(event) {
        this.runIfEnter(event, this.prev);
      },
      runIfEnterNext: function runIfEnterNext(event) {
        this.runIfEnter(event, this.next);
      },
      runIfEnterJumpPrev: function runIfEnterJumpPrev(event) {
        this.runIfEnter(event, this.jumpPrev);
      },
      runIfEnterJumpNext: function runIfEnterJumpNext(event) {
        this.runIfEnter(event, this.jumpNext);
      },
      handleGoTO: function handleGoTO(event) {
        if (event.keyCode === KEYCODE.ENTER || event.type === 'click') {
          this.handleChange(this.stateCurrentInputValue);
        }
      }
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var _$props2 = this.$props,
          prefixCls = _$props2.prefixCls,
          disabled = _$props2.disabled;

      // When hideOnSinglePage is true and there is only 1 page, hide the pager

      if (this.hideOnSinglePage === true && this.total <= this.statePageSize) {
        return null;
      }
      var props = this.$props;
      var locale = this.locale;

      var allPages = calculatePage(undefined, this.$data, this.$props);
      var pagerList = [];
      var jumpPrev = null;
      var jumpNext = null;
      var firstPager = null;
      var lastPager = null;
      var gotoButton = null;
      var goButton = this.showQuickJumper && this.showQuickJumper.goButton;
      var pageBufferSize = this.showLessItems ? 1 : 2;
      var stateCurrent = this.stateCurrent,
          statePageSize = this.statePageSize;

      var prevPage = stateCurrent - 1 > 0 ? stateCurrent - 1 : 0;
      var nextPage = stateCurrent + 1 < allPages ? stateCurrent + 1 : allPages;

      if (this.simple) {
        if (goButton) {
          if (typeof goButton === 'boolean') {
            gotoButton = h(
              'button',
              {
                attrs: { type: 'button' },
                on: {
                  'click': this.handleGoTO,
                  'keyup': this.handleGoTO
                }
              },
              [locale.jump_to_confirm]
            );
          } else {
            gotoButton = h(
              'span',
              {
                on: {
                  'click': this.handleGoTO,
                  'keyup': this.handleGoTO
                }
              },
              [goButton]
            );
          }
          gotoButton = h(
            'li',
            {
              attrs: {
                title: this.showTitle ? '' + locale.jump_to + this.stateCurrent + '/' + allPages : null
              },
              'class': prefixCls + '-simple-pager'
            },
            [gotoButton]
          );
        }
        var hasPrev = this.hasPrev();
        var hasNext = this.hasNext();
        return h(
          'ul',
          { 'class': prefixCls + ' ' + prefixCls + '-simple' },
          [h(
            'li',
            {
              attrs: {
                title: this.showTitle ? locale.prev_page : null,

                tabIndex: hasPrev ? 0 : null,

                'aria-disabled': !this.hasPrev()
              },
              on: {
                'click': this.prev,
                'keypress': this.runIfEnterPrev
              },

              'class': (hasPrev ? '' : prefixCls + '-disabled') + ' ' + prefixCls + '-prev' },
            [this.itemRender(prevPage, 'prev', this.getItemIcon('prevIcon'))]
          ), h(
            'li',
            {
              attrs: {
                title: this.showTitle ? stateCurrent + '/' + allPages : null
              },
              'class': prefixCls + '-simple-pager'
            },
            [h('input', babelHelperVueJsxMergeProps([{
              attrs: {
                type: 'text',

                size: '3'
              },
              domProps: {
                'value': this.stateCurrentInputValue
              },
              on: {
                'keydown': this.handleKeyDown,
                'keyup': this.handleKeyUp,
                'input': this.handleKeyUp
              }
            }, {
              directives: [{
                name: 'ant-input'
              }]
            }])), h(
              'span',
              { 'class': prefixCls + '-slash' },
              ['\uFF0F']
            ), allPages]
          ), h(
            'li',
            {
              attrs: {
                title: this.showTitle ? locale.next_page : null,

                tabIndex: this.hasNext ? 0 : null,

                'aria-disabled': !this.hasNext()
              },
              on: {
                'click': this.next,
                'keypress': this.runIfEnterNext
              },

              'class': (hasNext ? '' : prefixCls + '-disabled') + ' ' + prefixCls + '-next' },
            [this.itemRender(nextPage, 'next', this.getItemIcon('nextIcon'))]
          ), gotoButton]
        );
      }
      if (allPages <= 5 + pageBufferSize * 2) {
        var pagerProps = {
          props: {
            locale: locale,
            rootPrefixCls: prefixCls,
            showTitle: props.showTitle,
            itemRender: props.itemRender
          },
          on: {
            click: this.handleChange,
            keypress: this.runIfEnter
          }
        };
        if (!allPages) {
          pagerList.push(h(Pager, babelHelperVueJsxMergeProps([pagerProps, { key: 'noPager', attrs: { page: allPages },
            'class': prefixCls + '-disabled' }])));
        }
        for (var i = 1; i <= allPages; i++) {
          var active = stateCurrent === i;
          pagerList.push(h(Pager, babelHelperVueJsxMergeProps([pagerProps, { key: i, attrs: { page: i, active: active }
          }])));
        }
      } else {
        var prevItemTitle = this.showLessItems ? locale.prev_3 : locale.prev_5;
        var nextItemTitle = this.showLessItems ? locale.next_3 : locale.next_5;
        if (this.showPrevNextJumpers) {
          var jumpPrevClassString = prefixCls + '-jump-prev';
          if (props.jumpPrevIcon) {
            jumpPrevClassString += ' ' + prefixCls + '-jump-prev-custom-icon';
          }
          jumpPrev = h(
            'li',
            {
              attrs: {
                title: this.showTitle ? prevItemTitle : null,

                tabIndex: '0'
              },
              key: 'prev',
              on: {
                'click': this.jumpPrev,
                'keypress': this.runIfEnterJumpPrev
              },

              'class': jumpPrevClassString
            },
            [this.itemRender(this.getJumpPrevPage(), 'jump-prev', this.getItemIcon('jumpPrevIcon'))]
          );
          var jumpNextClassString = prefixCls + '-jump-next';
          if (props.jumpNextIcon) {
            jumpNextClassString += ' ' + prefixCls + '-jump-next-custom-icon';
          }
          jumpNext = h(
            'li',
            {
              attrs: {
                title: this.showTitle ? nextItemTitle : null,

                tabIndex: '0'
              },
              key: 'next', on: {
                'click': this.jumpNext,
                'keypress': this.runIfEnterJumpNext
              },

              'class': jumpNextClassString
            },
            [this.itemRender(this.getJumpNextPage(), 'jump-next', this.getItemIcon('jumpNextIcon'))]
          );
        }

        lastPager = h(Pager, {
          attrs: {
            locale: locale,
            last: true,
            rootPrefixCls: prefixCls,

            page: allPages,
            active: false,
            showTitle: this.showTitle,
            itemRender: this.itemRender
          },
          on: {
            'click': this.handleChange,
            'keypress': this.runIfEnter
          },

          key: allPages });
        firstPager = h(Pager, {
          attrs: {
            locale: locale,
            rootPrefixCls: prefixCls,

            page: 1,
            active: false,
            showTitle: this.showTitle,
            itemRender: this.itemRender
          },
          on: {
            'click': this.handleChange,
            'keypress': this.runIfEnter
          },

          key: 1 });

        var left = Math.max(1, stateCurrent - pageBufferSize);
        var right = Math.min(stateCurrent + pageBufferSize, allPages);

        if (stateCurrent - 1 <= pageBufferSize) {
          right = 1 + pageBufferSize * 2;
        }

        if (allPages - stateCurrent <= pageBufferSize) {
          left = allPages - pageBufferSize * 2;
        }

        for (var _i = left; _i <= right; _i++) {
          var _active = stateCurrent === _i;
          pagerList.push(h(Pager, {
            attrs: {
              locale: locale,
              rootPrefixCls: prefixCls,

              page: _i,
              active: _active,
              showTitle: this.showTitle,
              itemRender: this.itemRender
            },
            on: {
              'click': this.handleChange,
              'keypress': this.runIfEnter
            },

            key: _i }));
        }

        if (stateCurrent - 1 >= pageBufferSize * 2 && stateCurrent !== 1 + 2) {
          pagerList[0] = h(Pager, {
            attrs: {
              locale: locale,
              rootPrefixCls: prefixCls,

              page: left,

              active: false,
              showTitle: this.showTitle,
              itemRender: this.itemRender
            },
            on: {
              'click': this.handleChange,
              'keypress': this.runIfEnter
            },

            key: left, 'class': prefixCls + '-item-after-jump-prev' });
          pagerList.unshift(jumpPrev);
        }
        if (allPages - stateCurrent >= pageBufferSize * 2 && stateCurrent !== allPages - 2) {
          pagerList[pagerList.length - 1] = h(Pager, {
            attrs: {
              locale: locale,
              rootPrefixCls: prefixCls,

              page: right,

              active: false,
              showTitle: this.showTitle,
              itemRender: this.itemRender
            },
            on: {
              'click': this.handleChange,
              'keypress': this.runIfEnter
            },

            key: right, 'class': prefixCls + '-item-before-jump-next' });
          pagerList.push(jumpNext);
        }

        if (left !== 1) {
          pagerList.unshift(firstPager);
        }
        if (right !== allPages) {
          pagerList.push(lastPager);
        }
      }

      var totalText = null;

      if (this.showTotal) {
        totalText = h(
          'li',
          { 'class': prefixCls + '-total-text' },
          [this.showTotal(this.total, [this.total === 0 ? 0 : (stateCurrent - 1) * statePageSize + 1, stateCurrent * statePageSize > this.total ? this.total : stateCurrent * statePageSize])]
        );
      }
      var prevDisabled = !this.hasPrev() || !allPages;
      var nextDisabled = !this.hasNext() || !allPages;
      var buildOptionText = this.buildOptionText || this.$scopedSlots.buildOptionText;
      return h(
        'ul',
        {
          'class': (_ref = {}, _defineProperty(_ref, '' + prefixCls, true), _defineProperty(_ref, prefixCls + '-disabled', disabled), _ref),
          attrs: { unselectable: 'unselectable'
          },
          ref: 'paginationNode'
        },
        [totalText, h(
          'li',
          {
            attrs: {
              title: this.showTitle ? locale.prev_page : null,

              tabIndex: prevDisabled ? null : 0,

              'aria-disabled': prevDisabled
            },
            on: {
              'click': this.prev,
              'keypress': this.runIfEnterPrev
            },

            'class': (!prevDisabled ? '' : prefixCls + '-disabled') + ' ' + prefixCls + '-prev' },
          [this.itemRender(prevPage, 'prev', this.getItemIcon('prevIcon'))]
        ), pagerList, h(
          'li',
          {
            attrs: {
              title: this.showTitle ? locale.next_page : null,

              tabIndex: nextDisabled ? null : 0,

              'aria-disabled': nextDisabled
            },
            on: {
              'click': this.next,
              'keypress': this.runIfEnterNext
            },

            'class': (!nextDisabled ? '' : prefixCls + '-disabled') + ' ' + prefixCls + '-next' },
          [this.itemRender(nextPage, 'next', this.getItemIcon('nextIcon'))]
        ), h(Options, {
          attrs: {
            disabled: disabled,
            locale: locale,
            rootPrefixCls: prefixCls,
            selectComponentClass: this.selectComponentClass,
            selectPrefixCls: this.selectPrefixCls,
            changeSize: this.showSizeChanger ? this.changePageSize : null,
            current: stateCurrent,
            pageSize: statePageSize,
            pageSizeOptions: this.pageSizeOptions,
            buildOptionText: buildOptionText || null,
            quickGo: this.shouldDisplayQuickJumper() ? this.handleChange : null,
            goButton: goButton
          }
        })]
      );
    }
  };

  var PaginationProps = function PaginationProps() {
    return {
      total: VuePropTypes.number,
      defaultCurrent: VuePropTypes.number,
      disabled: VuePropTypes.bool,
      current: VuePropTypes.number,
      defaultPageSize: VuePropTypes.number,
      pageSize: VuePropTypes.number,
      hideOnSinglePage: VuePropTypes.bool,
      showSizeChanger: VuePropTypes.bool,
      pageSizeOptions: VuePropTypes.arrayOf(VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string])),
      buildOptionText: VuePropTypes.func,
      showSizeChange: VuePropTypes.func,
      showQuickJumper: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.object]),
      showTotal: VuePropTypes.any,
      size: VuePropTypes.string,
      simple: VuePropTypes.bool,
      locale: VuePropTypes.object,
      prefixCls: VuePropTypes.string,
      selectPrefixCls: VuePropTypes.string,
      itemRender: VuePropTypes.any,
      role: VuePropTypes.string,
      showLessItems: VuePropTypes.bool
    };
  };

  var PaginationConfig = function PaginationConfig() {
    return _extends$1({}, PaginationProps(), {
      position: VuePropTypes.oneOf(['top', 'bottom', 'both'])
    });
  };

  var Pagination = {
    name: 'APagination',
    model: {
      prop: 'current',
      event: 'change.current'
    },
    props: _extends$1({}, PaginationProps()),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      getIconsProps: function getIconsProps(prefixCls) {
        var h = this.$createElement;

        var prevIcon = h(
          'a',
          { 'class': prefixCls + '-item-link' },
          [h(Icon$1, {
            attrs: { type: 'left' }
          })]
        );
        var nextIcon = h(
          'a',
          { 'class': prefixCls + '-item-link' },
          [h(Icon$1, {
            attrs: { type: 'right' }
          })]
        );
        var jumpPrevIcon = h(
          'a',
          { 'class': prefixCls + '-item-link' },
          [h(
            'div',
            { 'class': prefixCls + '-item-container' },
            [h(Icon$1, { 'class': prefixCls + '-item-link-icon', attrs: { type: 'double-left' }
            }), h(
              'span',
              { 'class': prefixCls + '-item-ellipsis' },
              ['\u2022\u2022\u2022']
            )]
          )]
        );
        var jumpNextIcon = h(
          'a',
          { 'class': prefixCls + '-item-link' },
          [h(
            'div',
            { 'class': prefixCls + '-item-container' },
            [h(Icon$1, { 'class': prefixCls + '-item-link-icon', attrs: { type: 'double-right' }
            }), h(
              'span',
              { 'class': prefixCls + '-item-ellipsis' },
              ['\u2022\u2022\u2022']
            )]
          )]
        );
        return {
          prevIcon: prevIcon,
          nextIcon: nextIcon,
          jumpPrevIcon: jumpPrevIcon,
          jumpNextIcon: jumpNextIcon
        };
      },
      renderPagination: function renderPagination(contextLocale) {
        var h = this.$createElement;

        var _getOptionProps = getOptionProps(this),
            customizePrefixCls = _getOptionProps.prefixCls,
            customizeSelectPrefixCls = _getOptionProps.selectPrefixCls,
            buildOptionText = _getOptionProps.buildOptionText,
            size = _getOptionProps.size,
            customLocale = _getOptionProps.locale,
            restProps = _objectWithoutProperties(_getOptionProps, ['prefixCls', 'selectPrefixCls', 'buildOptionText', 'size', 'locale']);

        var getPrefixCls = this.configProvider.getPrefixCls;
        var prefixCls = getPrefixCls('pagination', customizePrefixCls);
        var selectPrefixCls = getPrefixCls('select', customizeSelectPrefixCls);

        var isSmall = size === 'small';
        var paginationProps = {
          props: _extends$1({
            prefixCls: prefixCls,
            selectPrefixCls: selectPrefixCls
          }, restProps, this.getIconsProps(prefixCls), {
            selectComponentClass: isSmall ? MiniSelect : Select$1,
            locale: _extends$1({}, contextLocale, customLocale),
            buildOptionText: buildOptionText || this.$scopedSlots.buildOptionText
          }),
          'class': {
            mini: isSmall
          },
          on: getListeners(this)
        };

        return h(VcPagination, paginationProps);
      }
    },
    render: function render() {
      var h = arguments[0];

      return h(LocaleReceiver, {
        attrs: {
          componentName: 'Pagination',
          defaultLocale: enUS
        },
        scopedSlots: { 'default': this.renderPagination }
      });
    }
  };

  /* istanbul ignore next */
  Pagination.install = function (Vue) {
    Vue.use(base);
    Vue.component(Pagination.name, Pagination);
  };

  var ListItemProps = {
    prefixCls: VuePropTypes.string,
    extra: VuePropTypes.any,
    actions: VuePropTypes.arrayOf(VuePropTypes.any),
    grid: ListGridType
  };

  var ListItemMetaProps = {
    avatar: VuePropTypes.any,
    description: VuePropTypes.any,
    prefixCls: VuePropTypes.string,
    title: VuePropTypes.any
  };

  var Meta$1 = {
    functional: true,
    name: 'AListItemMeta',
    __ANT_LIST_ITEM_META: true,
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    render: function render(h, context) {
      var props = context.props,
          slots = context.slots,
          listeners = context.listeners,
          injections = context.injections;

      var slotsMap = slots();
      var getPrefixCls = injections.configProvider.getPrefixCls;
      var customizePrefixCls = props.prefixCls;

      var prefixCls = getPrefixCls('list', customizePrefixCls);

      var avatar = props.avatar || slotsMap.avatar;
      var title = props.title || slotsMap.title;
      var description = props.description || slotsMap.description;
      var content = h(
        'div',
        { 'class': prefixCls + '-item-meta-content' },
        [title && h(
          'h4',
          { 'class': prefixCls + '-item-meta-title' },
          [title]
        ), description && h(
          'div',
          { 'class': prefixCls + '-item-meta-description' },
          [description]
        )]
      );
      return h(
        'div',
        babelHelperVueJsxMergeProps([{ on: listeners }, { 'class': prefixCls + '-item-meta' }]),
        [avatar && h(
          'div',
          { 'class': prefixCls + '-item-meta-avatar' },
          [avatar]
        ), (title || description) && content]
      );
    }
  };

  function getGrid(grid, t) {
    return grid[t] && Math.floor(24 / grid[t]);
  }

  var Item$1 = {
    name: 'AListItem',
    Meta: Meta$1,
    props: ListItemProps,
    inject: {
      listContext: { 'default': function _default() {
          return {};
        } },
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      isItemContainsTextNodeAndNotSingular: function isItemContainsTextNodeAndNotSingular() {
        var $slots = this.$slots;

        var result = void 0;
        var children = $slots['default'] || [];
        children.forEach(function (element) {
          if (isStringElement(element) && !isEmptyElement(element)) {
            result = true;
          }
        });
        return result && children.length > 1;
      },
      isFlexMode: function isFlexMode() {
        var extra = getComponentFromProp(this, 'extra');
        var itemLayout = this.listContext.itemLayout;

        if (itemLayout === 'vertical') {
          return !!extra;
        }
        return !this.isItemContainsTextNodeAndNotSingular();
      }
    },
    render: function render() {
      var h = arguments[0];
      var _listContext = this.listContext,
          grid = _listContext.grid,
          itemLayout = _listContext.itemLayout;
      var customizePrefixCls = this.prefixCls,
          $slots = this.$slots;

      var listeners = getListeners(this);
      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('list', customizePrefixCls);
      var extra = getComponentFromProp(this, 'extra');
      var actions = getComponentFromProp(this, 'actions');

      var actionsContent = actions && actions.length > 0 && h(
        'ul',
        { 'class': prefixCls + '-item-action', key: 'actions' },
        [actions.map(function (action, i) {
          return h(
            'li',
            { key: prefixCls + '-item-action-' + i },
            [action, i !== actions.length - 1 && h('em', { 'class': prefixCls + '-item-action-split' })]
          );
        })]
      );

      var Tag = grid ? 'div' : 'li';
      var itemChildren = h(
        Tag,
        babelHelperVueJsxMergeProps([{ on: listeners }, {
          'class': classnames(prefixCls + '-item', _defineProperty({}, prefixCls + '-item-no-flex', !this.isFlexMode()))
        }]),
        [itemLayout === 'vertical' && extra ? [h(
          'div',
          { 'class': prefixCls + '-item-main', key: 'content' },
          [$slots['default'], actionsContent]
        ), h(
          'div',
          { 'class': prefixCls + '-item-extra', key: 'extra' },
          [extra]
        )] : [$slots['default'], actionsContent, cloneElement(extra, { key: 'extra' })]]
      );

      var mainContent = grid ? h(
        Col,
        {
          attrs: {
            span: getGrid(grid, 'column'),
            xs: getGrid(grid, 'xs'),
            sm: getGrid(grid, 'sm'),
            md: getGrid(grid, 'md'),
            lg: getGrid(grid, 'lg'),
            xl: getGrid(grid, 'xl'),
            xxl: getGrid(grid, 'xxl')
          }
        },
        [itemChildren]
      ) : itemChildren;

      return mainContent;
    }
  };

  var ColumnCount = ['', 1, 2, 3, 4, 6, 8, 12, 24];

  var ListGridType = {
    gutter: VuePropTypes.number,
    column: VuePropTypes.oneOf(ColumnCount),
    xs: VuePropTypes.oneOf(ColumnCount),
    sm: VuePropTypes.oneOf(ColumnCount),
    md: VuePropTypes.oneOf(ColumnCount),
    lg: VuePropTypes.oneOf(ColumnCount),
    xl: VuePropTypes.oneOf(ColumnCount),
    xxl: VuePropTypes.oneOf(ColumnCount)
  };

  var ListSize = ['small', 'default', 'large'];

  var ListProps = function ListProps() {
    return {
      bordered: VuePropTypes.bool,
      dataSource: VuePropTypes.array,
      extra: VuePropTypes.any,
      grid: VuePropTypes.shape(ListGridType).loose,
      itemLayout: VuePropTypes.string,
      loading: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.object]),
      loadMore: VuePropTypes.any,
      pagination: VuePropTypes.oneOfType([VuePropTypes.shape(PaginationConfig()).loose, VuePropTypes.bool]),
      prefixCls: VuePropTypes.string,
      rowKey: VuePropTypes.any,
      renderItem: VuePropTypes.any,
      size: VuePropTypes.oneOf(ListSize),
      split: VuePropTypes.bool,
      header: VuePropTypes.any,
      footer: VuePropTypes.any,
      locale: VuePropTypes.object
    };
  };

  var List = {
    Item: Item$1,
    name: 'AList',
    props: initDefaultProps(ListProps(), {
      dataSource: [],
      bordered: false,
      split: true,
      loading: false,
      pagination: false
    }),
    provide: function provide() {
      return {
        listContext: this
      };
    },

    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      var _this = this;

      this.keys = [];
      this.defaultPaginationProps = {
        current: 1,
        pageSize: 10,
        onChange: function onChange(page, pageSize) {
          var pagination = _this.pagination;

          _this.paginationCurrent = page;
          if (pagination && pagination.onChange) {
            pagination.onChange(page, pageSize);
          }
        },
        total: 0
      };
      this.onPaginationChange = this.triggerPaginationEvent('onChange');
      this.onPaginationShowSizeChange = this.triggerPaginationEvent('onShowSizeChange');
      var pagination = this.$props.pagination;

      var paginationObj = pagination && (typeof pagination === 'undefined' ? 'undefined' : _typeof(pagination)) === 'object' ? pagination : {};
      return {
        paginationCurrent: paginationObj.defaultCurrent || 1,
        paginationSize: paginationObj.defaultPageSize || 10
      };
    },

    methods: {
      triggerPaginationEvent: function triggerPaginationEvent(eventName) {
        var _this2 = this;

        return function (page, pageSize) {
          var pagination = _this2.$props.pagination;

          _this2.paginationCurrent = page;
          _this2.paginationSize = pageSize;
          if (pagination && pagination[eventName]) {
            pagination[eventName](page, pageSize);
          }
        };
      },
      renderItem2: function renderItem2(item, index) {
        var $scopedSlots = this.$scopedSlots,
            rowKey = this.rowKey;

        var renderItem = this.renderItem || $scopedSlots.renderItem;
        if (!renderItem) return null;
        var key = void 0;
        if (typeof rowKey === 'function') {
          key = rowKey(item);
        } else if (typeof rowKey === 'string') {
          key = item[rowKey];
        } else {
          key = item.key;
        }

        if (!key) {
          key = 'list-item-' + index;
        }

        this.keys[index] = key;

        return renderItem(item, index);
      },
      isSomethingAfterLastItem: function isSomethingAfterLastItem() {
        var pagination = this.pagination;

        var loadMore = getComponentFromProp(this, 'loadMore');
        var footer = getComponentFromProp(this, 'footer');
        return !!(loadMore || pagination || footer);
      },
      renderEmpty: function renderEmpty(prefixCls, _renderEmpty) {
        var h = this.$createElement;
        var locale = this.locale;

        return h(
          'div',
          { 'class': prefixCls + '-empty-text' },
          [locale && locale.emptyText || _renderEmpty(h, 'List')]
        );
      }
    },

    render: function render() {
      var _classNames,
          _this3 = this;

      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          bordered = this.bordered,
          split = this.split,
          itemLayout = this.itemLayout,
          pagination = this.pagination,
          grid = this.grid,
          _dataSource = this.dataSource,
          dataSource = _dataSource === undefined ? [] : _dataSource,
          size = this.size,
          loading = this.loading,
          $slots = this.$slots,
          paginationCurrent = this.paginationCurrent,
          paginationSize = this.paginationSize;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('list', customizePrefixCls);

      var loadMore = getComponentFromProp(this, 'loadMore');
      var footer = getComponentFromProp(this, 'footer');
      var header = getComponentFromProp(this, 'header');
      var children = filterEmpty($slots['default'] || []);
      var loadingProp = loading;
      if (typeof loadingProp === 'boolean') {
        loadingProp = {
          spinning: loadingProp
        };
      }
      var isLoading = loadingProp && loadingProp.spinning;

      // large => lg
      // small => sm
      var sizeCls = '';
      switch (size) {
        case 'large':
          sizeCls = 'lg';
          break;
        case 'small':
          sizeCls = 'sm';
          break;
      }
      var classString = classnames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-vertical', itemLayout === 'vertical'), _defineProperty(_classNames, prefixCls + '-' + sizeCls, sizeCls), _defineProperty(_classNames, prefixCls + '-split', split), _defineProperty(_classNames, prefixCls + '-bordered', bordered), _defineProperty(_classNames, prefixCls + '-loading', isLoading), _defineProperty(_classNames, prefixCls + '-grid', grid), _defineProperty(_classNames, prefixCls + '-something-after-last-item', this.isSomethingAfterLastItem()), _classNames));
      var paginationProps = _extends$1({}, this.defaultPaginationProps, {
        total: dataSource.length,
        current: paginationCurrent,
        pageSize: paginationSize
      }, pagination || {});
      var largestPage = Math.ceil(paginationProps.total / paginationProps.pageSize);
      if (paginationProps.current > largestPage) {
        paginationProps.current = largestPage;
      }

      var cls = paginationProps['class'],
          style = paginationProps.style,
          restProps = _objectWithoutProperties(paginationProps, ['class', 'style']);

      var paginationContent = pagination ? h(
        'div',
        { 'class': prefixCls + '-pagination' },
        [h(Pagination, {
          props: omit(restProps, ['onChange']),
          'class': cls,
          style: style,
          on: {
            change: this.onPaginationChange,
            showSizeChange: this.onPaginationShowSizeChange
          }
        })]
      ) : null;

      var splitDataSource = [].concat(_toConsumableArray(dataSource));
      if (pagination) {
        if (dataSource.length > (paginationProps.current - 1) * paginationProps.pageSize) {
          splitDataSource = [].concat(_toConsumableArray(dataSource)).splice((paginationProps.current - 1) * paginationProps.pageSize, paginationProps.pageSize);
        }
      }

      var childrenContent = void 0;
      childrenContent = isLoading && h('div', { style: { minHeight: 53 } });
      if (splitDataSource.length > 0) {
        var items = splitDataSource.map(function (item, index) {
          return _this3.renderItem2(item, index);
        });
        var childrenList = items.map(function (child, index) {
          return cloneElement(child, {
            key: _this3.keys[index]
          });
        });

        childrenContent = grid ? h(
          Row,
          {
            attrs: { gutter: grid.gutter }
          },
          [childrenList]
        ) : h(
          'ul',
          { 'class': prefixCls + '-items' },
          [childrenList]
        );
      } else if (!children.length && !isLoading) {
        var renderEmpty = this.configProvider.renderEmpty;
        childrenContent = this.renderEmpty(prefixCls, renderEmpty);
      }
      var paginationPosition = paginationProps.position || 'bottom';

      return h(
        'div',
        babelHelperVueJsxMergeProps([{ 'class': classString }, { on: getListeners(this) }]),
        [(paginationPosition === 'top' || paginationPosition === 'both') && paginationContent, header && h(
          'div',
          { 'class': prefixCls + '-header' },
          [header]
        ), h(
          Spin,
          { props: loadingProp },
          [childrenContent, children]
        ), footer && h(
          'div',
          { 'class': prefixCls + '-footer' },
          [footer]
        ), loadMore || (paginationPosition === 'bottom' || paginationPosition === 'both') && paginationContent]
      );
    }
  };

  /* istanbul ignore next */
  List.install = function (Vue) {
    Vue.use(base);
    Vue.component(List.name, List);
    Vue.component(List.Item.name, List.Item);
    Vue.component(List.Item.Meta.name, List.Item.Meta);
  };

  function noop$F() {}

  var Notice = {
    mixins: [BaseMixin],
    props: {
      duration: VuePropTypes.number.def(1.5),
      closable: VuePropTypes.bool,
      prefixCls: VuePropTypes.string,
      update: VuePropTypes.bool,
      closeIcon: VuePropTypes.any
    },
    watch: {
      duration: function duration() {
        this.restartCloseTimer();
      }
    },

    mounted: function mounted() {
      this.startCloseTimer();
    },
    updated: function updated() {
      if (this.update) {
        this.restartCloseTimer();
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.clearCloseTimer();
      this.willDestroy = true; // beforeDestroy调用后依然会触发onMouseleave事件
    },

    methods: {
      close: function close(e) {
        if (e) {
          e.stopPropagation();
        }
        this.clearCloseTimer();
        this.__emit('close');
      },
      startCloseTimer: function startCloseTimer() {
        var _this = this;

        this.clearCloseTimer();
        if (!this.willDestroy && this.duration) {
          this.closeTimer = setTimeout(function () {
            _this.close();
          }, this.duration * 1000);
        }
      },
      clearCloseTimer: function clearCloseTimer() {
        if (this.closeTimer) {
          clearTimeout(this.closeTimer);
          this.closeTimer = null;
        }
      },
      restartCloseTimer: function restartCloseTimer() {
        this.clearCloseTimer();
        this.startCloseTimer();
      }
    },

    render: function render() {
      var _className;

      var h = arguments[0];
      var prefixCls = this.prefixCls,
          closable = this.closable,
          clearCloseTimer = this.clearCloseTimer,
          startCloseTimer = this.startCloseTimer,
          $slots = this.$slots,
          close = this.close;

      var componentClass = prefixCls + '-notice';
      var className = (_className = {}, _defineProperty(_className, '' + componentClass, 1), _defineProperty(_className, componentClass + '-closable', closable), _className);
      var style = getStyle(this);
      var closeIcon = getComponentFromProp(this, 'closeIcon');
      return h(
        'div',
        {
          'class': className,
          style: style || { right: '50%' },
          on: {
            'mouseenter': clearCloseTimer,
            'mouseleave': startCloseTimer,
            'click': getListeners(this).click || noop$F
          }
        },
        [h(
          'div',
          { 'class': componentClass + '-content' },
          [$slots['default']]
        ), closable ? h(
          'a',
          {
            attrs: { tabIndex: '0' },
            on: {
              'click': close
            },
            'class': componentClass + '-close' },
          [closeIcon || h('span', { 'class': componentClass + '-close-x' })]
        ) : null]
      );
    }
  };

  function noop$G() {}

  var seed = 0;
  var now$1 = Date.now();

  function getUuid() {
    return 'rcNotification_' + now$1 + '_' + seed++;
  }

  var Notification = {
    mixins: [BaseMixin],
    props: {
      prefixCls: VuePropTypes.string.def('rc-notification'),
      transitionName: VuePropTypes.string,
      animation: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.object]).def('fade'),
      maxCount: VuePropTypes.number,
      closeIcon: VuePropTypes.any
    },
    data: function data() {
      return {
        notices: []
      };
    },

    methods: {
      getTransitionName: function getTransitionName() {
        var props = this.$props;
        var transitionName = props.transitionName;
        if (!transitionName && props.animation) {
          transitionName = props.prefixCls + '-' + props.animation;
        }
        return transitionName;
      },
      add: function add(notice) {
        var key = notice.key = notice.key || getUuid();
        var maxCount = this.$props.maxCount;

        this.setState(function (previousState) {
          var notices = previousState.notices;
          var noticeIndex = notices.map(function (v) {
            return v.key;
          }).indexOf(key);
          var updatedNotices = notices.concat();
          if (noticeIndex !== -1) {
            updatedNotices.splice(noticeIndex, 1, notice);
          } else {
            if (maxCount && notices.length >= maxCount) {
              // XXX, use key of first item to update new added (let React to move exsiting
              // instead of remove and mount). Same key was used before for both a) external
              // manual control and b) internal react 'key' prop , which is not that good.
              notice.updateKey = updatedNotices[0].updateKey || updatedNotices[0].key;
              updatedNotices.shift();
            }
            updatedNotices.push(notice);
          }
          return {
            notices: updatedNotices
          };
        });
      },
      remove: function remove(key) {
        this.setState(function (previousState) {
          return {
            notices: previousState.notices.filter(function (notice) {
              return notice.key !== key;
            })
          };
        });
      }
    },

    render: function render(h) {
      var _this = this;

      var prefixCls = this.prefixCls,
          notices = this.notices,
          remove = this.remove,
          getTransitionName = this.getTransitionName;

      var transitionProps = getTransitionProps(getTransitionName());
      var noticeNodes = notices.map(function (notice, index) {
        var update = Boolean(index === notices.length - 1 && notice.updateKey);
        var key = notice.updateKey ? notice.updateKey : notice.key;

        var content = notice.content,
            duration = notice.duration,
            closable = notice.closable,
            onClose = notice.onClose,
            style = notice.style,
            className = notice['class'];

        var close = createChainedFunction(remove.bind(_this, notice.key), onClose);
        var noticeProps = {
          props: {
            prefixCls: prefixCls,
            duration: duration,
            closable: closable,
            update: update,
            closeIcon: getComponentFromProp(_this, 'closeIcon')
          },
          on: {
            close: close,
            click: notice.onClick || noop$G
          },
          style: style,
          'class': className,
          key: key
        };
        return h(
          Notice,
          noticeProps,
          [typeof content === 'function' ? content(h) : content]
        );
      });
      var className = _defineProperty({}, prefixCls, 1);
      var style = getStyle(this);
      return h(
        'div',
        {
          'class': className,
          style: style || {
            top: '65px',
            left: '50%'
          }
        },
        [h(
          'transition-group',
          transitionProps,
          [noticeNodes]
        )]
      );
    }
  };

  Notification.newInstance = function newNotificationInstance(properties, callback) {
    var _ref = properties || {},
        getContainer = _ref.getContainer,
        style = _ref.style,
        className = _ref['class'],
        props = _objectWithoutProperties(_ref, ['getContainer', 'style', 'class']);

    var div = document.createElement('div');
    if (getContainer) {
      var root = getContainer();
      root.appendChild(div);
    } else {
      document.body.appendChild(div);
    }
    var V = base.Vue || Vue;
    new V({
      el: div,
      mounted: function mounted() {
        var self = this;
        this.$nextTick(function () {
          callback({
            notice: function notice(noticeProps) {
              self.$refs.notification.add(noticeProps);
            },
            removeNotice: function removeNotice(key) {
              self.$refs.notification.remove(key);
            },

            component: self,
            destroy: function destroy() {
              self.$destroy();
              self.$el.parentNode.removeChild(self.$el);
            }
          });
        });
      },
      render: function render() {
        var h = arguments[0];

        var p = {
          props: props,
          ref: 'notification',
          style: style,
          'class': className
        };
        return h(Notification, p);
      }
    });
  };

  var defaultDuration = 3;
  var defaultTop = void 0;
  var messageInstance = void 0;
  var key = 1;
  var prefixCls = 'ant-message';
  var transitionName = 'move-up';
  var getContainer = function getContainer() {
    return document.body;
  };
  var maxCount = void 0;

  function getMessageInstance(callback) {
    if (messageInstance) {
      callback(messageInstance);
      return;
    }
    Notification.newInstance({
      prefixCls: prefixCls,
      transitionName: transitionName,
      style: { top: defaultTop }, // 覆盖原来的样式
      getContainer: getContainer,
      maxCount: maxCount
    }, function (instance) {
      if (messageInstance) {
        callback(messageInstance);
        return;
      }
      messageInstance = instance;
      callback(instance);
    });
  }

  // type NoticeType = 'info' | 'success' | 'error' | 'warning' | 'loading';

  function notice(args) {
    var duration = args.duration !== undefined ? args.duration : defaultDuration;
    var iconType = {
      info: 'info-circle',
      success: 'check-circle',
      error: 'close-circle',
      warning: 'exclamation-circle',
      loading: 'loading'
    }[args.type];

    var target = args.key || key++;
    var closePromise = new Promise(function (resolve) {
      var callback = function callback() {
        if (typeof args.onClose === 'function') {
          args.onClose();
        }
        return resolve(true);
      };
      getMessageInstance(function (instance) {
        instance.notice({
          key: target,
          duration: duration,
          style: {},
          content: function content(h) {
            var iconNode = h(Icon$1, {
              attrs: { type: iconType, theme: iconType === 'loading' ? 'outlined' : 'filled' }
            });
            var switchIconNode = iconType ? iconNode : '';
            return h(
              'div',
              {
                'class': prefixCls + '-custom-content' + (args.type ? ' ' + prefixCls + '-' + args.type : '')
              },
              [args.icon ? typeof args.icon === 'function' ? args.icon(h) : args.icon : switchIconNode, h('span', [typeof args.content === 'function' ? args.content(h) : args.content])]
            );
          },
          onClose: callback
        });
      });
    });
    var result = function result() {
      if (messageInstance) {
        messageInstance.removeNotice(target);
      }
    };
    result.then = function (filled, rejected) {
      return closePromise.then(filled, rejected);
    };
    result.promise = closePromise;
    return result;
  }

  // type ConfigContent = React.ReactNode | string;
  // type ConfigDuration = number | (() => void);
  // export type ConfigOnClose = () => void;

  function isArgsProps(content) {
    return Object.prototype.toString.call(content) === '[object Object]' && !!content.content;
  }

  // export interface ConfigOptions {
  //   top?: number;
  //   duration?: number;
  //   prefixCls?: string;
  //   getContainer?: () => HTMLElement;
  //   transitionName?: string;
  // }

  var api = {
    open: notice,
    config: function config(options) {
      if (options.top !== undefined) {
        defaultTop = options.top;
        messageInstance = null; // delete messageInstance for new defaultTop
      }
      if (options.duration !== undefined) {
        defaultDuration = options.duration;
      }
      if (options.prefixCls !== undefined) {
        prefixCls = options.prefixCls;
      }
      if (options.getContainer !== undefined) {
        getContainer = options.getContainer;
      }
      if (options.transitionName !== undefined) {
        transitionName = options.transitionName;
        messageInstance = null; // delete messageInstance for new transitionName
      }
      if (options.maxCount !== undefined) {
        maxCount = options.maxCount;
        messageInstance = null;
      }
    },
    destroy: function destroy() {
      if (messageInstance) {
        messageInstance.destroy();
        messageInstance = null;
      }
    }
  };

  ['success', 'info', 'warning', 'error', 'loading'].forEach(function (type) {
    api[type] = function (content, duration, onClose) {
      if (isArgsProps(content)) {
        return api.open(_extends$1({}, content, { type: type }));
      }
      if (typeof duration === 'function') {
        onClose = duration;
        duration = undefined;
      }
      return api.open({ content: content, duration: duration, type: type, onClose: onClose });
    };
  });

  api.warn = api.warning;

  /**
   * Cut input selection into 2 part and return text before selection start
   */
  function getBeforeSelectionText(input) {
    var selectionStart = input.selectionStart;

    return input.value.slice(0, selectionStart);
  }

  function lower(char) {
    return (char || '').toLowerCase();
  }

  /**
   * Find the last match prefix index
   */
  function getLastMeasureIndex(text) {
    var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    var prefixList = Array.isArray(prefix) ? prefix : [prefix];
    return prefixList.reduce(function (lastMatch, prefixStr) {
      var lastIndex = text.lastIndexOf(prefixStr);
      if (lastIndex > lastMatch.location) {
        return {
          location: lastIndex,
          prefix: prefixStr
        };
      }
      return lastMatch;
    }, { location: -1, prefix: '' });
  }

  function reduceText(text, targetText, split) {
    var firstChar = text[0];
    if (!firstChar || firstChar === split) {
      return text;
    }

    // Reuse rest text as it can
    var restText = text;
    var targetTextLen = targetText.length;
    for (var i = 0; i < targetTextLen; i += 1) {
      if (lower(restText[i]) !== lower(targetText[i])) {
        restText = restText.slice(i);
        break;
      } else if (i === targetTextLen - 1) {
        restText = restText.slice(targetTextLen);
      }
    }

    return restText;
  }

  /**
   * Paint targetText into current text:
   *  text: little@litest
   *  targetText: light
   *  => little @light test
   */
  function replaceWithMeasure(text, measureConfig) {
    var measureLocation = measureConfig.measureLocation,
        prefix = measureConfig.prefix,
        targetText = measureConfig.targetText,
        selectionStart = measureConfig.selectionStart,
        split = measureConfig.split;

    // Before text will append one space if have other text

    var beforeMeasureText = text.slice(0, measureLocation);
    if (beforeMeasureText[beforeMeasureText.length - split.length] === split) {
      beforeMeasureText = beforeMeasureText.slice(0, beforeMeasureText.length - split.length);
    }
    if (beforeMeasureText) {
      beforeMeasureText = '' + beforeMeasureText + split;
    }

    // Cut duplicate string with current targetText
    var restText = reduceText(text.slice(selectionStart), targetText.slice(selectionStart - measureLocation - prefix.length), split);
    if (restText.slice(0, split.length) === split) {
      restText = restText.slice(split.length);
    }

    var connectedStartText = '' + beforeMeasureText + prefix + targetText + split;

    return {
      text: '' + connectedStartText + restText,
      selectionLocation: connectedStartText.length
    };
  }

  function setInputSelection(input, location) {
    input.setSelectionRange(location, location);

    /**
     * Reset caret into view.
     * Since this function always called by user control, it's safe to focus element.
     */
    input.blur();
    input.focus();
  }

  function validateSearch() {
    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var split = props.split;

    return !split || text.indexOf(split) === -1;
  }

  function filterOption() {
    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$value = _ref.value,
        value = _ref$value === undefined ? '' : _ref$value;

    var lowerCase = input.toLowerCase();
    return value.toLowerCase().indexOf(lowerCase) !== -1;
  }

  var OptionProps = {
    value: VuePropTypes.string,
    disabled: VuePropTypes.boolean,
    children: VuePropTypes.any
  };

  var Option$2 = {
    name: 'Option',
    props: OptionProps,
    render: function render() {
      return null;
    }
  };

  function noop$H() {}
  var DropdownMenu$1 = {
    name: 'DropdownMenu',
    props: {
      prefixCls: VuePropTypes.string,
      options: VuePropTypes.arrayOf(OptionProps)
    },
    inject: {
      mentionsContext: { 'default': {} }
    },

    render: function render() {
      var h = arguments[0];
      var _mentionsContext = this.mentionsContext,
          notFoundContent = _mentionsContext.notFoundContent,
          activeIndex = _mentionsContext.activeIndex,
          setActiveIndex = _mentionsContext.setActiveIndex,
          selectOption = _mentionsContext.selectOption,
          _mentionsContext$onFo = _mentionsContext.onFocus,
          onFocus = _mentionsContext$onFo === undefined ? noop$H : _mentionsContext$onFo,
          _mentionsContext$onBl = _mentionsContext.onBlur,
          onBlur = _mentionsContext$onBl === undefined ? noop$H : _mentionsContext$onBl;
      var _$props = this.$props,
          prefixCls = _$props.prefixCls,
          options = _$props.options;

      var activeOption = options[activeIndex] || {};

      return h(
        Menu,
        {
          props: {
            prefixCls: prefixCls + '-menu',
            activeKey: activeOption.value
          },
          on: {
            select: function select(_ref) {
              var key = _ref.key;

              var option = options.find(function (_ref2) {
                var value = _ref2.value;
                return value === key;
              });
              selectOption(option);
            },
            focus: onFocus,
            blur: onBlur
          }
        },
        [options.map(function (option, index) {
          var value = option.value,
              disabled = option.disabled,
              children = option.children;

          return h(
            connected$1,
            {
              key: value,
              attrs: { disabled: disabled
              },
              on: {
                'mouseenter': function mouseenter() {
                  setActiveIndex(index);
                }
              }
            },
            [children]
          );
        }), !options.length && h(
          connected$1,
          {
            attrs: { disabled: true }
          },
          [notFoundContent]
        )]
      );
    }
  };

  var PlaceMent = ['top', 'bottom'];

  var BUILT_IN_PLACEMENTS$2 = {
    bottomRight: {
      points: ['tl', 'br'],
      offset: [0, 4],
      overflow: {
        adjustX: 0,
        adjustY: 1
      }
    },
    topRight: {
      points: ['bl', 'tr'],
      offset: [0, -4],
      overflow: {
        adjustX: 0,
        adjustY: 1
      }
    }
  };

  var KeywordTrigger = {
    name: 'KeywordTrigger',
    props: {
      loading: VuePropTypes.bool,
      options: VuePropTypes.arrayOf(OptionProps),
      prefixCls: VuePropTypes.string,
      placement: VuePropTypes.oneOf(PlaceMent),
      visible: VuePropTypes.bool,
      transitionName: VuePropTypes.string,
      getPopupContainer: VuePropTypes.func
    },
    methods: {
      getDropdownPrefix: function getDropdownPrefix() {
        return this.$props.prefixCls + '-dropdown';
      },
      getDropdownElement: function getDropdownElement() {
        var h = this.$createElement;
        var options = this.$props.options;

        return h(DropdownMenu$1, {
          attrs: { prefixCls: this.getDropdownPrefix(), options: options }
        });
      }
    },

    render: function render() {
      var h = arguments[0];
      var _$props = this.$props,
          visible = _$props.visible,
          placement = _$props.placement,
          transitionName = _$props.transitionName,
          getPopupContainer = _$props.getPopupContainer;
      var $slots = this.$slots;


      var children = $slots['default'];

      var popupElement = this.getDropdownElement();

      return h(
        Trigger,
        {
          attrs: {
            prefixCls: this.getDropdownPrefix(),
            popupVisible: visible,
            popup: popupElement,
            popupPlacement: placement === 'top' ? 'topRight' : 'bottomRight',
            popupTransitionName: transitionName,
            builtinPlacements: BUILT_IN_PLACEMENTS$2,
            getPopupContainer: getPopupContainer
          }
        },
        [children]
      );
    }
  };

  var mentionsProps = {
    autoFocus: VuePropTypes.bool,
    prefix: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.array]),
    prefixCls: VuePropTypes.string,
    value: VuePropTypes.string,
    defaultValue: VuePropTypes.string,
    disabled: VuePropTypes.bool,
    notFoundContent: VuePropTypes.any,
    split: VuePropTypes.string,
    transitionName: VuePropTypes.string,
    placement: VuePropTypes.oneOf(PlaceMent),
    character: VuePropTypes.any,
    characterRender: VuePropTypes.func,
    filterOption: VuePropTypes.func,
    validateSearch: VuePropTypes.func,
    getPopupContainer: VuePropTypes.func
  };

  var vcMentionsProps = _extends$1({}, mentionsProps, {
    children: VuePropTypes.any
  });

  var defaultProps = {
    prefix: '@',
    split: ' ',
    validateSearch: validateSearch,
    filterOption: filterOption
  };

  initDefaultProps(vcMentionsProps, defaultProps);

  function noop$I() {}

  var Mentions = {
    name: 'Mentions',
    mixins: [BaseMixin],
    inheritAttrs: false,
    model: {
      prop: 'value',
      event: 'change'
    },
    props: initDefaultProps(vcMentionsProps, defaultProps),
    provide: function provide() {
      return {
        mentionsContext: this
      };
    },
    data: function data() {
      var _$props = this.$props,
          _$props$value = _$props.value,
          value = _$props$value === undefined ? '' : _$props$value,
          _$props$defaultValue = _$props.defaultValue,
          defaultValue = _$props$defaultValue === undefined ? '' : _$props$defaultValue;

      warning_1(this.$props.children, 'please children prop replace slots.default');
      return {
        _value: !hasProp(this, 'value') ? defaultValue : value,
        measuring: false,
        measureLocation: 0,
        measureText: null,
        measurePrefix: '',
        activeIndex: 0,
        isFocus: false
      };
    },

    watch: {
      value: function value(val) {
        this.$data._value = val;
      }
    },
    updated: function updated() {
      var _this = this;

      this.$nextTick(function () {
        var measuring = _this.$data.measuring;

        // Sync measure div top with textarea for rc-trigger usage

        if (measuring) {
          _this.$refs.measure.scrollTop = _this.$refs.textarea.scrollTop;
        }
      });
    },

    methods: {
      triggerChange: function triggerChange(value) {
        var props = getOptionProps(this);
        if (!('value' in props)) {
          this.setState({ _value: value });
        } else {
          this.$forceUpdate();
        }
        this.$emit('change', value);
      },
      onChange: function onChange(_ref) {
        var _ref$target = _ref.target,
            value = _ref$target.value,
            composing = _ref$target.composing,
            isComposing = _ref.isComposing;

        if (isComposing || composing) return;
        this.triggerChange(value);
      },
      onKeyDown: function onKeyDown(event) {
        var which = event.which;
        var _$data = this.$data,
            activeIndex = _$data.activeIndex,
            measuring = _$data.measuring;
        // Skip if not measuring

        if (!measuring) {
          return;
        }

        if (which === KeyCode.UP || which === KeyCode.DOWN) {
          // Control arrow function
          var optionLen = this.getOptions().length;
          var offset = which === KeyCode.UP ? -1 : 1;
          var newActiveIndex = (activeIndex + offset + optionLen) % optionLen;
          this.setState({
            activeIndex: newActiveIndex
          });
          event.preventDefault();
        } else if (which === KeyCode.ESC) {
          this.stopMeasure();
        } else if (which === KeyCode.ENTER) {
          // Measure hit
          event.preventDefault();
          var options = this.getOptions();
          if (!options.length) {
            this.stopMeasure();
            return;
          }
          var option = options[activeIndex];
          this.selectOption(option);
        }
      },

      /**
       * When to start measure:
       * 1. When user press `prefix`
       * 2. When measureText !== prevMeasureText
       *  - If measure hit
       *  - If measuring
       *
       * When to stop measure:
       * 1. Selection is out of range
       * 2. Contains `space`
       * 3. ESC or select one
       */
      onKeyUp: function onKeyUp(event) {
        var key = event.key,
            which = event.which;
        var _$data2 = this.$data,
            prevMeasureText = _$data2.measureText,
            measuring = _$data2.measuring;
        var _$props2 = this.$props,
            _$props2$prefix = _$props2.prefix,
            prefix = _$props2$prefix === undefined ? '' : _$props2$prefix,
            validateSearch = _$props2.validateSearch;

        var target = event.target;
        var selectionStartText = getBeforeSelectionText(target);

        var _getLastMeasureIndex = getLastMeasureIndex(selectionStartText, prefix),
            measureIndex = _getLastMeasureIndex.location,
            measurePrefix = _getLastMeasureIndex.prefix;

        // Skip if match the white key list


        if ([KeyCode.ESC, KeyCode.UP, KeyCode.DOWN, KeyCode.ENTER].indexOf(which) !== -1) {
          return;
        }

        if (measureIndex !== -1) {
          var measureText = selectionStartText.slice(measureIndex + measurePrefix.length);
          var validateMeasure = validateSearch(measureText, this.$props);
          var matchOption = !!this.getOptions(measureText).length;

          if (validateMeasure) {
            if (key === measurePrefix || measuring || measureText !== prevMeasureText && matchOption) {
              this.startMeasure(measureText, measurePrefix, measureIndex);
            }
          } else if (measuring) {
            // Stop if measureText is invalidate
            this.stopMeasure();
          }

          /**
           * We will trigger `onSearch` to developer since they may use for async update.
           * If met `space` means user finished searching.
           */
          if (validateMeasure) {
            this.$emit('search', measureText, measurePrefix);
          }
        } else if (measuring) {
          this.stopMeasure();
        }
      },
      onInputFocus: function onInputFocus(event) {
        this.onFocus(event);
      },
      onInputBlur: function onInputBlur(event) {
        this.onBlur(event);
      },
      onDropdownFocus: function onDropdownFocus() {
        this.onFocus();
      },
      onDropdownBlur: function onDropdownBlur() {
        this.onBlur();
      },
      onFocus: function onFocus(event) {
        window.clearTimeout(this.focusId);
        var isFocus = this.$data.isFocus;

        if (!isFocus && event) {
          this.$emit('focus', event);
        }
        this.setState({ isFocus: true });
      },
      onBlur: function onBlur(event) {
        var _this2 = this;

        this.focusId = window.setTimeout(function () {
          _this2.setState({ isFocus: false });
          _this2.stopMeasure();
          _this2.$emit('blur', event);
        }, 0);
      },
      selectOption: function selectOption(option) {
        var _this3 = this;

        var _$data3 = this.$data,
            value = _$data3._value,
            measureLocation = _$data3.measureLocation,
            measurePrefix = _$data3.measurePrefix;
        var split = this.$props.split;
        var _option$value = option.value,
            mentionValue = _option$value === undefined ? '' : _option$value;

        var _replaceWithMeasure = replaceWithMeasure(value, {
          measureLocation: measureLocation,
          targetText: mentionValue,
          prefix: measurePrefix,
          selectionStart: this.$refs.textarea.selectionStart,
          split: split
        }),
            text = _replaceWithMeasure.text,
            selectionLocation = _replaceWithMeasure.selectionLocation;

        this.triggerChange(text);
        this.stopMeasure(function () {
          // We need restore the selection position
          setInputSelection(_this3.$refs.textarea, selectionLocation);
        });

        this.$emit('select', option, measurePrefix);
      },
      setActiveIndex: function setActiveIndex(activeIndex) {
        this.setState({
          activeIndex: activeIndex
        });
      },
      getOptions: function getOptions(measureText) {
        var targetMeasureText = measureText || this.$data.measureText || '';
        var _$props3 = this.$props,
            filterOption = _$props3.filterOption,
            _$props3$children = _$props3.children,
            children = _$props3$children === undefined ? [] : _$props3$children;

        var list = (Array.isArray(children) ? children : [children]).map(function (item) {
          var children = getSlots(item)['default'];
          return _extends$1({}, getOptionProps(item), { children: children });
        }).filter(function (option) {
          /** Return all result if `filterOption` is false. */
          if (filterOption === false) {
            return true;
          }
          return filterOption(targetMeasureText, option);
        });
        return list;
      },
      startMeasure: function startMeasure(measureText, measurePrefix, measureLocation) {
        this.setState({
          measuring: true,
          measureText: measureText,
          measurePrefix: measurePrefix,
          measureLocation: measureLocation,
          activeIndex: 0
        });
      },
      stopMeasure: function stopMeasure(callback) {
        this.setState({
          measuring: false,
          measureLocation: 0,
          measureText: null
        }, callback);
      },
      focus: function focus() {
        this.$refs.textarea.focus();
      },
      blur: function blur() {
        this.$refs.textarea.blur();
      }
    },

    render: function render() {
      var h = arguments[0];
      var _$data4 = this.$data,
          value = _$data4._value,
          measureLocation = _$data4.measureLocation,
          measurePrefix = _$data4.measurePrefix,
          measuring = _$data4.measuring;

      var _getOptionProps = getOptionProps(this),
          prefixCls = _getOptionProps.prefixCls,
          placement = _getOptionProps.placement,
          transitionName = _getOptionProps.transitionName,
          autoFocus = _getOptionProps.autoFocus,
          notFoundContent = _getOptionProps.notFoundContent,
          getPopupContainer = _getOptionProps.getPopupContainer,
          restProps = _objectWithoutProperties(_getOptionProps, ['prefixCls', 'placement', 'transitionName', 'autoFocus', 'notFoundContent', 'getPopupContainer']);

      var inputProps = omit(restProps, ['value', 'defaultValue', 'prefix', 'split', 'children', 'validateSearch', 'filterOption']);

      var options = measuring ? this.getOptions() : [];

      return h(
        'div',
        { 'class': prefixCls },
        [h('textarea', babelHelperVueJsxMergeProps([{
          ref: 'textarea'
        }, {
          directives: [{ name: 'ant-input' }],
          attrs: _extends$1({}, inputProps, this.$attrs),
          domProps: {
            value: value
          },
          on: _extends$1({}, getListeners(this), {
            select: noop$I,
            change: noop$I,
            input: this.onChange,
            keydown: this.onKeyDown,
            keyup: this.onKeyUp,
            blur: this.onInputBlur
          })
        }])), measuring && h(
          'div',
          { ref: 'measure', 'class': prefixCls + '-measure' },
          [value.slice(0, measureLocation), h(
            KeywordTrigger,
            {
              attrs: {
                prefixCls: prefixCls,
                transitionName: transitionName,
                placement: placement,
                options: options,
                visible: true,
                getPopupContainer: getPopupContainer
              }
            },
            [h('span', [measurePrefix])]
          ), value.slice(measureLocation + measurePrefix.length)]
        )]
      );
    }
  };

  Mentions.Option = Option$2;

  var Option$3 = Mentions.Option;


  function loadingFilterOption() {
    return true;
  }

  function getMentions() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var config = arguments[1];

    var _ref = config || {},
        _ref$prefix = _ref.prefix,
        prefix = _ref$prefix === undefined ? '@' : _ref$prefix,
        _ref$split = _ref.split,
        split = _ref$split === undefined ? ' ' : _ref$split;

    var prefixList = Array.isArray(prefix) ? prefix : [prefix];

    return value.split(split).map(function () {
      var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      var hitPrefix = null;

      prefixList.some(function (prefixStr) {
        var startStr = str.slice(0, prefixStr.length);
        if (startStr === prefixStr) {
          hitPrefix = prefixStr;
          return true;
        }
        return false;
      });

      if (hitPrefix !== null) {
        return {
          prefix: hitPrefix,
          value: str.slice(hitPrefix.length)
        };
      }
      return null;
    }).filter(function (entity) {
      return !!entity && !!entity.value;
    });
  }

  var Mentions$1 = {
    name: 'AMentions',
    mixins: [BaseMixin],
    inheritAttrs: false,
    model: {
      prop: 'value',
      event: 'change'
    },
    Option: _extends$1({}, Option$3, { name: 'AMentionsOption' }),
    getMentions: getMentions,
    props: _extends$1({}, mentionsProps, {
      loading: VuePropTypes.bool
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      return {
        focused: false
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        if (_this.autoFocus) {
          _this.focus();
        }
      });
    },

    methods: {
      onFocus: function onFocus() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this.$emit.apply(this, ['focus'].concat(_toConsumableArray(args)));
        this.setState({
          focused: true
        });
      },
      onBlur: function onBlur() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        this.$emit.apply(this, ['blur'].concat(_toConsumableArray(args)));
        this.setState({
          focused: false
        });
      },
      onSelect: function onSelect() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this.$emit.apply(this, ['select'].concat(_toConsumableArray(args)));
        this.setState({
          focused: true
        });
      },
      onChange: function onChange(val) {
        this.$emit('change', val);
      },
      getNotFoundContent: function getNotFoundContent(renderEmpty) {
        var h = this.$createElement;
        var notFoundContent = getComponentFromProp(this, 'notFoundContent');
        if (notFoundContent !== undefined) {
          return notFoundContent;
        }

        return renderEmpty(h, 'Select');
      },
      getOptions: function getOptions() {
        var h = this.$createElement;
        var loading = this.$props.loading;

        var children = filterEmpty(this.$slots['default'] || []);

        if (loading) {
          return h(
            Option$3,
            {
              attrs: { value: 'ANTD_SEARCHING', disabled: true }
            },
            [h(Spin, {
              attrs: { size: 'small' }
            })]
          );
        }
        return children;
      },
      getFilterOption: function getFilterOption() {
        var _$props = this.$props,
            filterOption = _$props.filterOption,
            loading = _$props.loading;

        if (loading) {
          return loadingFilterOption;
        }
        return filterOption;
      },
      focus: function focus() {
        this.$refs.vcMentions.focus();
      },
      blur: function blur() {
        this.$refs.vcMentions.blur();
      }
    },
    render: function render() {
      var _classNames;

      var h = arguments[0];
      var focused = this.$data.focused;
      var _configProvider = this.configProvider,
          getPrefixCls = _configProvider.getPrefixCls,
          renderEmpty = _configProvider.renderEmpty;

      var _getOptionProps = getOptionProps(this),
          customizePrefixCls = _getOptionProps.prefixCls,
          disabled = _getOptionProps.disabled,
          getPopupContainer = _getOptionProps.getPopupContainer,
          restProps = _objectWithoutProperties(_getOptionProps, ['prefixCls', 'disabled', 'getPopupContainer']);

      var prefixCls = getPrefixCls('mentions', customizePrefixCls);
      var otherProps = omit(restProps, ['loading']);

      var mergedClassName = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-disabled', disabled), _defineProperty(_classNames, prefixCls + '-focused', focused), _classNames));

      var mentionsProps = {
        props: _extends$1({
          prefixCls: prefixCls,
          notFoundContent: this.getNotFoundContent(renderEmpty)
        }, otherProps, {
          disabled: disabled,
          filterOption: this.getFilterOption(),
          getPopupContainer: getPopupContainer,
          children: this.getOptions()
        }),
        'class': mergedClassName,
        attrs: _extends$1({ rows: 1 }, this.$attrs),
        on: _extends$1({}, getListeners(this), {
          change: this.onChange,
          select: this.onSelect,
          focus: this.onFocus,
          blur: this.onBlur
        }),
        ref: 'vcMentions'
      };

      return h(Mentions, mentionsProps);
    }
  };

  /* istanbul ignore next */
  Mentions$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Mentions$1.name, Mentions$1);
    Vue.component(Mentions$1.Option.name, Mentions$1.Option);
  };

  var ILazyRenderBoxPropTypes = {
    visible: VuePropTypes.bool,
    hiddenClassName: VuePropTypes.string,
    forceRender: VuePropTypes.bool
  };

  var LazyRenderBox$1 = {
    props: ILazyRenderBoxPropTypes,
    render: function render() {
      var h = arguments[0];

      return h(
        'div',
        { on: getListeners(this) },
        [this.$slots['default']]
      );
    }
  };

  var cached$1 = void 0;

  function getScrollBarSize(fresh) {
    if (fresh || cached$1 === undefined) {
      var inner = document.createElement('div');
      inner.style.width = '100%';
      inner.style.height = '200px';

      var outer = document.createElement('div');
      var outerStyle = outer.style;

      outerStyle.position = 'absolute';
      outerStyle.top = 0;
      outerStyle.left = 0;
      outerStyle.pointerEvents = 'none';
      outerStyle.visibility = 'hidden';
      outerStyle.width = '200px';
      outerStyle.height = '150px';
      outerStyle.overflow = 'hidden';

      outer.appendChild(inner);

      document.body.appendChild(outer);

      var widthContained = inner.offsetWidth;
      outer.style.overflow = 'scroll';
      var widthScroll = inner.offsetWidth;

      if (widthContained === widthScroll) {
        widthScroll = outer.clientWidth;
      }

      document.body.removeChild(outer);

      cached$1 = widthContained - widthScroll;
    }
    return cached$1;
  }

  var _switchScrollingEffect = (function (close) {
    var bodyIsOverflowing = document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth;
    if (!bodyIsOverflowing) {
      return;
    }
    if (close) {
      document.body.style.position = '';
      document.body.style.width = '';
      return;
    }
    var scrollBarSize = getScrollBarSize();
    if (scrollBarSize) {
      document.body.style.position = 'relative';
      document.body.style.width = 'calc(100% - ' + scrollBarSize + 'px)';
    }
  });

  function IDialogPropTypes() {
    return {
      keyboard: VuePropTypes.bool,
      mask: VuePropTypes.bool,
      afterClose: VuePropTypes.func,
      // onClose: PropTypes. (e: SyntheticEvent<HTMLDivElement>) =>any,
      closable: VuePropTypes.bool,
      maskClosable: VuePropTypes.bool,
      visible: VuePropTypes.bool,
      destroyOnClose: VuePropTypes.bool,
      mousePosition: VuePropTypes.shape({
        x: VuePropTypes.number,
        y: VuePropTypes.number
      }).loose,
      title: VuePropTypes.any,
      footer: VuePropTypes.any,
      transitionName: VuePropTypes.string,
      maskTransitionName: VuePropTypes.string,
      animation: VuePropTypes.any,
      maskAnimation: VuePropTypes.any,
      wrapStyle: VuePropTypes.object,
      bodyStyle: VuePropTypes.object,
      maskStyle: VuePropTypes.object,
      prefixCls: VuePropTypes.string,
      wrapClassName: VuePropTypes.string,
      width: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      height: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      zIndex: VuePropTypes.number,
      bodyProps: VuePropTypes.any,
      maskProps: VuePropTypes.any,
      wrapProps: VuePropTypes.any,
      getContainer: VuePropTypes.any,
      dialogStyle: VuePropTypes.object.def(function () {
        return {};
      }),
      dialogClass: VuePropTypes.string.def(''),
      closeIcon: VuePropTypes.any,
      forceRender: VuePropTypes.bool,
      getOpenCount: VuePropTypes.func,
      // https://github.com/ant-design/ant-design/issues/19771
      // https://github.com/react-component/dialog/issues/95
      focusTriggerAfterClose: VuePropTypes.bool
    };
  }

  var IDialogPropTypes$1 = IDialogPropTypes();

  var uuid = 0;

  function noop$J() {}
  function getScroll$3(w, top) {
    var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
    var method = 'scroll' + (top ? 'Top' : 'Left');
    if (typeof ret !== 'number') {
      var d = w.document;
      ret = d.documentElement[method];
      if (typeof ret !== 'number') {
        ret = d.body[method];
      }
    }
    return ret;
  }

  function setTransformOrigin(node, value) {
    var style = node.style;
    ['Webkit', 'Moz', 'Ms', 'ms'].forEach(function (prefix) {
      style[prefix + 'TransformOrigin'] = value;
    });
    style['transformOrigin'] = value;
  }

  function offset(el) {
    var rect = el.getBoundingClientRect();
    var pos = {
      left: rect.left,
      top: rect.top
    };
    var doc = el.ownerDocument;
    var w = doc.defaultView || doc.parentWindow;
    pos.left += getScroll$3(w);
    pos.top += getScroll$3(w, true);
    return pos;
  }

  var cacheOverflow = {};

  var Dialog = {
    mixins: [BaseMixin],
    props: initDefaultProps(IDialogPropTypes$1, {
      mask: true,
      visible: false,
      keyboard: true,
      closable: true,
      maskClosable: true,
      destroyOnClose: false,
      prefixCls: 'rc-dialog',
      getOpenCount: function getOpenCount() {
        return null;
      },
      focusTriggerAfterClose: true
    }),
    data: function data() {
      return {
        destroyPopup: false
      };
    },
    provide: function provide() {
      return {
        dialogContext: this
      };
    },


    watch: {
      visible: function visible(val) {
        var _this = this;

        if (val) {
          this.destroyPopup = false;
        }
        this.$nextTick(function () {
          _this.updatedCallback(!val);
        });
      }
    },

    beforeMount: function beforeMount() {
      this.inTransition = false;
      this.titleId = 'rcDialogTitle' + uuid++;
    },
    mounted: function mounted() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.updatedCallback(false);
        // if forceRender is true, set element style display to be none;
        if ((_this2.forceRender || _this2.getContainer === false && !_this2.visible) && _this2.$refs.wrap) {
          _this2.$refs.wrap.style.display = 'none';
        }
      });
    },
    beforeDestroy: function beforeDestroy() {
      var visible = this.visible,
          getOpenCount = this.getOpenCount;

      if ((visible || this.inTransition) && !getOpenCount()) {
        this.switchScrollingEffect();
      }
      clearTimeout(this.timeoutId);
    },

    methods: {
      // 对外暴露的 api 不要更改名称或删除
      getDialogWrap: function getDialogWrap() {
        return this.$refs.wrap;
      },
      updatedCallback: function updatedCallback(visible) {
        var mousePosition = this.mousePosition;
        var mask = this.mask,
            focusTriggerAfterClose = this.focusTriggerAfterClose;

        if (this.visible) {
          // first show
          if (!visible) {
            this.openTime = Date.now();
            // this.lastOutSideFocusNode = document.activeElement
            this.switchScrollingEffect();
            // this.$refs.wrap.focus()
            this.tryFocus();
            var dialogNode = this.$refs.dialog.$el;
            if (mousePosition) {
              var elOffset = offset(dialogNode);
              setTransformOrigin(dialogNode, mousePosition.x - elOffset.left + 'px ' + (mousePosition.y - elOffset.top) + 'px');
            } else {
              setTransformOrigin(dialogNode, '');
            }
          }
        } else if (visible) {
          this.inTransition = true;
          if (mask && this.lastOutSideFocusNode && focusTriggerAfterClose) {
            try {
              this.lastOutSideFocusNode.focus();
            } catch (e) {
              this.lastOutSideFocusNode = null;
            }
            this.lastOutSideFocusNode = null;
          }
        }
      },
      tryFocus: function tryFocus() {
        if (!contains(this.$refs.wrap, document.activeElement)) {
          this.lastOutSideFocusNode = document.activeElement;
          this.$refs.sentinelStart.focus();
        }
      },
      onAnimateLeave: function onAnimateLeave() {
        var afterClose = this.afterClose,
            destroyOnClose = this.destroyOnClose;
        // need demo?
        // https://github.com/react-component/dialog/pull/28

        if (this.$refs.wrap) {
          this.$refs.wrap.style.display = 'none';
        }
        if (destroyOnClose) {
          this.destroyPopup = true;
        }
        this.inTransition = false;
        this.switchScrollingEffect();
        if (afterClose) {
          afterClose();
        }
      },
      onDialogMouseDown: function onDialogMouseDown() {
        this.dialogMouseDown = true;
      },
      onMaskMouseUp: function onMaskMouseUp() {
        var _this3 = this;

        if (this.dialogMouseDown) {
          this.timeoutId = setTimeout(function () {
            _this3.dialogMouseDown = false;
          }, 0);
        }
      },
      onMaskClick: function onMaskClick(e) {
        // android trigger click on open (fastclick??)
        if (Date.now() - this.openTime < 300) {
          return;
        }
        if (e.target === e.currentTarget && !this.dialogMouseDown) {
          this.close(e);
        }
      },
      onKeydown: function onKeydown(e) {
        var props = this.$props;
        if (props.keyboard && e.keyCode === KeyCode.ESC) {
          e.stopPropagation();
          this.close(e);
          return;
        }
        // keep focus inside dialog
        if (props.visible) {
          if (e.keyCode === KeyCode.TAB) {
            var activeElement = document.activeElement;
            var sentinelStart = this.$refs.sentinelStart;
            if (e.shiftKey) {
              if (activeElement === sentinelStart) {
                this.$refs.sentinelEnd.focus();
              }
            } else if (activeElement === this.$refs.sentinelEnd) {
              sentinelStart.focus();
            }
          }
        }
      },
      getDialogElement: function getDialogElement() {
        var h = this.$createElement;
        var closable = this.closable,
            prefixCls = this.prefixCls,
            width = this.width,
            height = this.height,
            title = this.title,
            tempFooter = this.footer,
            bodyStyle = this.bodyStyle,
            visible = this.visible,
            bodyProps = this.bodyProps,
            forceRender = this.forceRender,
            dialogStyle = this.dialogStyle,
            dialogClass = this.dialogClass;

        var dest = _extends$1({}, dialogStyle);
        if (width !== undefined) {
          dest.width = typeof width === 'number' ? width + 'px' : width;
        }
        if (height !== undefined) {
          dest.height = typeof height === 'number' ? height + 'px' : height;
        }

        var footer = void 0;
        if (tempFooter) {
          footer = h(
            'div',
            { key: 'footer', 'class': prefixCls + '-footer', ref: 'footer' },
            [tempFooter]
          );
        }

        var header = void 0;
        if (title) {
          header = h(
            'div',
            { key: 'header', 'class': prefixCls + '-header', ref: 'header' },
            [h(
              'div',
              { 'class': prefixCls + '-title', attrs: { id: this.titleId }
              },
              [title]
            )]
          );
        }

        var closer = void 0;
        if (closable) {
          var closeIcon = getComponentFromProp(this, 'closeIcon');
          closer = h(
            'button',
            {
              attrs: {
                type: 'button',

                'aria-label': 'Close'
              },
              key: 'close',
              on: {
                'click': this.close || noop$J
              },
              'class': prefixCls + '-close'
            },
            [closeIcon || h('span', { 'class': prefixCls + '-close-x' })]
          );
        }

        var style = dest;
        var sentinelStyle = { width: 0, height: 0, overflow: 'hidden' };
        var cls = _defineProperty({}, prefixCls, true);
        var transitionName = this.getTransitionName();
        var dialogElement = h(
          LazyRenderBox$1,
          {
            directives: [{
              name: 'show',
              value: visible
            }],

            key: 'dialog-element',
            attrs: { role: 'document',

              forceRender: forceRender
            },
            ref: 'dialog',
            style: style,
            'class': [cls, dialogClass], on: {
              'mousedown': this.onDialogMouseDown
            }
          },
          [h('div', {
            attrs: { tabIndex: 0, 'aria-hidden': 'true' },
            ref: 'sentinelStart', style: sentinelStyle }), h(
            'div',
            { 'class': prefixCls + '-content' },
            [closer, header, h(
              'div',
              babelHelperVueJsxMergeProps([{ key: 'body', 'class': prefixCls + '-body', style: bodyStyle, ref: 'body' }, bodyProps]),
              [this.$slots['default']]
            ), footer]
          ), h('div', {
            attrs: { tabIndex: 0, 'aria-hidden': 'true' },
            ref: 'sentinelEnd', style: sentinelStyle })]
        );
        var dialogTransitionProps = getTransitionProps(transitionName, {
          afterLeave: this.onAnimateLeave
        });
        return h(
          'transition',
          babelHelperVueJsxMergeProps([{ key: 'dialog' }, dialogTransitionProps]),
          [visible || !this.destroyPopup ? dialogElement : null]
        );
      },
      getZIndexStyle: function getZIndexStyle() {
        var style = {};
        var props = this.$props;
        if (props.zIndex !== undefined) {
          style.zIndex = props.zIndex;
        }
        return style;
      },
      getWrapStyle: function getWrapStyle() {
        return _extends$1({}, this.getZIndexStyle(), this.wrapStyle);
      },
      getMaskStyle: function getMaskStyle() {
        return _extends$1({}, this.getZIndexStyle(), this.maskStyle);
      },
      getMaskElement: function getMaskElement() {
        var h = this.$createElement;

        var props = this.$props;
        var maskElement = void 0;
        if (props.mask) {
          var maskTransition = this.getMaskTransitionName();
          maskElement = h(LazyRenderBox$1, babelHelperVueJsxMergeProps([{
            directives: [{
              name: 'show',
              value: props.visible
            }],

            style: this.getMaskStyle(),
            key: 'mask',
            'class': props.prefixCls + '-mask'
          }, props.maskProps]));
          if (maskTransition) {
            var maskTransitionProps = getTransitionProps(maskTransition);
            maskElement = h(
              'transition',
              babelHelperVueJsxMergeProps([{ key: 'mask' }, maskTransitionProps]),
              [maskElement]
            );
          }
        }
        return maskElement;
      },
      getMaskTransitionName: function getMaskTransitionName() {
        var props = this.$props;
        var transitionName = props.maskTransitionName;
        var animation = props.maskAnimation;
        if (!transitionName && animation) {
          transitionName = props.prefixCls + '-' + animation;
        }
        return transitionName;
      },
      getTransitionName: function getTransitionName() {
        var props = this.$props;
        var transitionName = props.transitionName;
        var animation = props.animation;
        if (!transitionName && animation) {
          transitionName = props.prefixCls + '-' + animation;
        }
        return transitionName;
      },

      // setScrollbar() {
      //   if (this.bodyIsOverflowing && this.scrollbarWidth !== undefined) {
      //     document.body.style.paddingRight = `${this.scrollbarWidth}px`;
      //   }
      // },
      switchScrollingEffect: function switchScrollingEffect() {
        var getOpenCount = this.getOpenCount;

        var openCount = getOpenCount();
        if (openCount === 1) {
          if (cacheOverflow.hasOwnProperty('overflowX')) {
            return;
          }
          cacheOverflow = {
            overflowX: document.body.style.overflowX,
            overflowY: document.body.style.overflowY,
            overflow: document.body.style.overflow
          };
          _switchScrollingEffect();
          // Must be set after switchScrollingEffect
          document.body.style.overflow = 'hidden';
        } else if (!openCount) {
          // IE browser doesn't merge overflow style, need to set it separately
          // https://github.com/ant-design/ant-design/issues/19393
          if (cacheOverflow.overflow !== undefined) {
            document.body.style.overflow = cacheOverflow.overflow;
          }
          if (cacheOverflow.overflowX !== undefined) {
            document.body.style.overflowX = cacheOverflow.overflowX;
          }
          if (cacheOverflow.overflowY !== undefined) {
            document.body.style.overflowY = cacheOverflow.overflowY;
          }
          cacheOverflow = {};
          _switchScrollingEffect(true);
        }
      },

      // removeScrollingEffect() {
      //   const { getOpenCount } = this;
      //   const openCount = getOpenCount();
      //   if (openCount !== 0) {
      //     return;
      //   }
      //   document.body.style.overflow = '';
      //   switchScrollingEffect(true);
      //   // this.resetAdjustments();
      // },
      close: function close(e) {
        this.__emit('close', e);
      }
    },
    render: function render() {
      var h = arguments[0];
      var prefixCls = this.prefixCls,
          maskClosable = this.maskClosable,
          visible = this.visible,
          wrapClassName = this.wrapClassName,
          title = this.title,
          wrapProps = this.wrapProps;

      var style = this.getWrapStyle();
      // clear hide display
      // and only set display after async anim, not here for hide
      if (visible) {
        style.display = null;
      }
      return h(
        'div',
        { 'class': prefixCls + '-root' },
        [this.getMaskElement(), h(
          'div',
          babelHelperVueJsxMergeProps([{
            attrs: {
              tabIndex: -1,

              role: 'dialog',
              'aria-labelledby': title ? this.titleId : null
            },
            on: {
              'keydown': this.onKeydown,
              'click': maskClosable ? this.onMaskClick : noop$J,
              'mouseup': maskClosable ? this.onMaskMouseUp : noop$J
            },

            'class': prefixCls + '-wrap ' + (wrapClassName || ''),
            ref: 'wrap',
            style: style
          }, wrapProps]),
          [this.getDialogElement()]
        )]
      );
    }
  };

  /**
   * Easy to set element style, return previous style
   * IE browser compatible(IE browser doesn't merge overflow style, need to set it separately)
   * https://github.com/ant-design/ant-design/issues/19393
   *
   */
  function setStyle$1(style) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _options$element = options.element,
        element = _options$element === undefined ? document.body : _options$element;

    var oldStyle = {};

    var styleKeys = Object.keys(style);

    // IE browser compatible
    styleKeys.forEach(function (key) {
      oldStyle[key] = element.style[key];
    });

    styleKeys.forEach(function (key) {
      element.style[key] = style[key];
    });

    return oldStyle;
  }

  var Portal = {
    name: 'Portal',
    props: {
      getContainer: VuePropTypes.func.isRequired,
      children: VuePropTypes.any.isRequired,
      didUpdate: VuePropTypes.func
    },
    mounted: function mounted() {
      this.createContainer();
    },
    updated: function updated() {
      var _this = this;

      var didUpdate = this.$props.didUpdate;

      if (didUpdate) {
        this.$nextTick(function () {
          didUpdate(_this.$props);
        });
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.removeContainer();
    },

    methods: {
      createContainer: function createContainer() {
        this._container = this.$props.getContainer();
        this.$forceUpdate();
      },
      removeContainer: function removeContainer() {
        if (this._container && this._container.parentNode) {
          this._container.parentNode.removeChild(this._container);
        }
      }
    },

    render: function render() {
      if (this._container) {
        return cloneElement(this.$props.children, {
          directives: [{
            name: 'ant-portal',
            value: this._container
          }]
        });
      }
      return null;
    }
  };

  var openCount = 0;
  var windowIsUndefined = !(typeof window !== 'undefined' && window.document && window.document.createElement);
  // https://github.com/ant-design/ant-design/issues/19340
  // https://github.com/ant-design/ant-design/issues/19332
  var cacheOverflow$1 = {};

  var Portal$1 = {
    name: 'PortalWrapper',
    props: {
      wrapperClassName: VuePropTypes.string,
      forceRender: VuePropTypes.bool,
      getContainer: VuePropTypes.any,
      children: VuePropTypes.func,
      visible: VuePropTypes.bool
    },
    data: function data() {
      var visible = this.$props.visible;

      openCount = visible ? openCount + 1 : openCount;
      return {};
    },
    updated: function updated() {
      this.setWrapperClassName();
    },

    watch: {
      visible: function visible(val) {
        openCount = val ? openCount + 1 : openCount - 1;
      },
      getContainer: function getContainer(_getContainer, prevGetContainer) {
        var getContainerIsFunc = typeof _getContainer === 'function' && typeof prevGetContainer === 'function';
        if (getContainerIsFunc ? _getContainer.toString() !== prevGetContainer.toString() : _getContainer !== prevGetContainer) {
          this.removeCurrentContainer(false);
        }
      }
    },
    beforeDestroy: function beforeDestroy() {
      var visible = this.$props.visible;
      // 离开时不会 render， 导到离开时数值不变，改用 func 。。

      openCount = visible && openCount ? openCount - 1 : openCount;
      this.removeCurrentContainer(visible);
    },

    methods: {
      getParent: function getParent() {
        var getContainer = this.$props.getContainer;

        if (getContainer) {
          if (typeof getContainer === 'string') {
            return document.querySelectorAll(getContainer)[0];
          }
          if (typeof getContainer === 'function') {
            return getContainer();
          }
          if ((typeof getContainer === 'undefined' ? 'undefined' : _typeof(getContainer)) === 'object' && getContainer instanceof window.HTMLElement) {
            return getContainer;
          }
        }
        return document.body;
      },
      getDomContainer: function getDomContainer() {
        if (windowIsUndefined) {
          return null;
        }
        if (!this.container) {
          this.container = document.createElement('div');
          var parent = this.getParent();
          if (parent) {
            parent.appendChild(this.container);
          }
        }
        this.setWrapperClassName();
        return this.container;
      },
      setWrapperClassName: function setWrapperClassName() {
        var wrapperClassName = this.$props.wrapperClassName;

        if (this.container && wrapperClassName && wrapperClassName !== this.container.className) {
          this.container.className = wrapperClassName;
        }
      },
      savePortal: function savePortal(c) {
        // Warning: don't rename _component
        // https://github.com/react-component/util/pull/65#discussion_r352407916
        this._component = c;
      },
      removeCurrentContainer: function removeCurrentContainer() {
        this.container = null;
        this._component = null;
      },


      /**
       * Enhance ./switchScrollingEffect
       * 1. Simulate document body scroll bar with
       * 2. Record body has overflow style and recover when all of PortalWrapper invisible
       * 3. Disable body scroll when PortalWrapper has open
       *
       * @memberof PortalWrapper
       */
      switchScrollingEffect: function switchScrollingEffect() {
        if (openCount === 1 && !Object.keys(cacheOverflow$1).length) {
          _switchScrollingEffect();
          // Must be set after switchScrollingEffect
          cacheOverflow$1 = setStyle$1({
            overflow: 'hidden',
            overflowX: 'hidden',
            overflowY: 'hidden'
          });
        } else if (!openCount) {
          setStyle$1(cacheOverflow$1);
          cacheOverflow$1 = {};
          _switchScrollingEffect(true);
        }
      }
    },

    render: function render() {
      var h = arguments[0];
      var _$props = this.$props,
          children = _$props.children,
          forceRender = _$props.forceRender,
          visible = _$props.visible;

      var portal = null;
      var childProps = {
        getOpenCount: function getOpenCount() {
          return openCount;
        },
        getContainer: this.getDomContainer,
        switchScrollingEffect: this.switchScrollingEffect
      };
      if (forceRender || visible || this._component) {
        portal = h(Portal, babelHelperVueJsxMergeProps([{
          attrs: {
            getContainer: this.getDomContainer,
            children: children(childProps)
          }
        }, {
          directives: [{
            name: 'ant-ref',
            value: this.savePortal
          }]
        }]));
      }
      return portal;
    }
  };

  var IDialogPropTypes$2 = IDialogPropTypes();
  var DialogWrap = {
    inheritAttrs: false,
    props: _extends$1({}, IDialogPropTypes$2, {
      visible: IDialogPropTypes$2.visible.def(false)
    }),

    render: function render() {
      var _this = this;

      var h = arguments[0];
      var _$props = this.$props,
          visible = _$props.visible,
          getContainer = _$props.getContainer,
          forceRender = _$props.forceRender;

      var dialogProps = {
        props: this.$props,
        attrs: this.$attrs,
        ref: '_component',
        key: 'dialog',
        on: getListeners(this)
      };
      // 渲染在当前 dom 里；
      if (getContainer === false) {
        return h(
          Dialog,
          babelHelperVueJsxMergeProps([dialogProps, {
            attrs: {
              getOpenCount: function getOpenCount() {
                return 2;
              } // 不对 body 做任何操作。。
            }
          }]),
          [this.$slots['default']]
        );
      }
      return h(Portal$1, {
        attrs: {
          visible: visible,
          forceRender: forceRender,
          getContainer: getContainer,
          children: function children(childProps) {
            dialogProps.props = _extends$1({}, dialogProps.props, childProps);
            return h(
              Dialog,
              dialogProps,
              [_this.$slots['default']]
            );
          }
        }
      });
    }
  };

  var ButtonType = buttonTypes().type;

  var mousePosition = null;
  // ref: https://github.com/ant-design/ant-design/issues/15795
  var getClickPosition = function getClickPosition(e) {
    mousePosition = {
      x: e.pageX,
      y: e.pageY
    };
    // 100ms 内发生过点击事件，则从点击位置动画展示
    // 否则直接 zoom 展示
    // 这样可以兼容非点击方式展开
    setTimeout(function () {
      return mousePosition = null;
    }, 100);
  };

  // 只有点击事件支持从鼠标位置动画展开
  if (typeof window !== 'undefined' && window.document && window.document.documentElement) {
    addEventListenerWrap(document.documentElement, 'click', getClickPosition, true);
  }

  function noop$K() {}
  var modalProps = function modalProps() {
    var defaultProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var props = {
      prefixCls: VuePropTypes.string,
      /** 对话框是否可见*/
      visible: VuePropTypes.bool,
      /** 确定按钮 loading*/
      confirmLoading: VuePropTypes.bool,
      /** 标题*/
      title: VuePropTypes.any,
      /** 是否显示右上角的关闭按钮*/
      closable: VuePropTypes.bool,
      closeIcon: VuePropTypes.any,
      /** 点击确定回调*/
      // onOk: (e: React.MouseEvent<any>) => void,
      /** 点击模态框右上角叉、取消按钮、Props.maskClosable 值为 true 时的遮罩层或键盘按下 Esc 时的回调*/
      // onCancel: (e: React.MouseEvent<any>) => void,
      afterClose: VuePropTypes.func.def(noop$K),
      /** 垂直居中 */
      centered: VuePropTypes.bool,
      /** 宽度*/
      width: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      /** 底部内容*/
      footer: VuePropTypes.any,
      /** 确认按钮文字*/
      okText: VuePropTypes.any,
      /** 确认按钮类型*/
      okType: ButtonType,
      /** 取消按钮文字*/
      cancelText: VuePropTypes.any,
      icon: VuePropTypes.any,
      /** 点击蒙层是否允许关闭*/
      maskClosable: VuePropTypes.bool,
      /** 强制渲染 Modal*/
      forceRender: VuePropTypes.bool,
      okButtonProps: VuePropTypes.object,
      cancelButtonProps: VuePropTypes.object,
      destroyOnClose: VuePropTypes.bool,
      wrapClassName: VuePropTypes.string,
      maskTransitionName: VuePropTypes.string,
      transitionName: VuePropTypes.string,
      getContainer: VuePropTypes.func,
      zIndex: VuePropTypes.number,
      bodyStyle: VuePropTypes.object,
      maskStyle: VuePropTypes.object,
      mask: VuePropTypes.bool,
      keyboard: VuePropTypes.bool,
      wrapProps: VuePropTypes.object,
      focusTriggerAfterClose: VuePropTypes.bool
    };
    return initDefaultProps(props, defaultProps);
  };

  var destroyFns = [];

  var Modal = {
    name: 'AModal',
    inheritAttrs: false,
    model: {
      prop: 'visible',
      event: 'change'
    },
    props: modalProps({
      width: 520,
      transitionName: 'zoom',
      maskTransitionName: 'fade',
      confirmLoading: false,
      visible: false,
      okType: 'primary'
    }),
    data: function data() {
      return {
        sVisible: !!this.visible
      };
    },

    watch: {
      visible: function visible(val) {
        this.sVisible = val;
      }
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    // static info: ModalFunc;
    // static success: ModalFunc;
    // static error: ModalFunc;
    // static warn: ModalFunc;
    // static warning: ModalFunc;
    // static confirm: ModalFunc;
    methods: {
      handleCancel: function handleCancel(e) {
        this.$emit('cancel', e);
        this.$emit('change', false);
      },
      handleOk: function handleOk(e) {
        this.$emit('ok', e);
      },
      renderFooter: function renderFooter(locale) {
        var h = this.$createElement;
        var okType = this.okType,
            confirmLoading = this.confirmLoading;

        var cancelBtnProps = mergeProps({ on: { click: this.handleCancel } }, this.cancelButtonProps || {});
        var okBtnProps = mergeProps({
          on: { click: this.handleOk },
          props: {
            type: okType,
            loading: confirmLoading
          }
        }, this.okButtonProps || {});
        return h('div', [h(
          Button,
          cancelBtnProps,
          [getComponentFromProp(this, 'cancelText') || locale.cancelText]
        ), h(
          Button,
          okBtnProps,
          [getComponentFromProp(this, 'okText') || locale.okText]
        )]);
      }
    },

    render: function render() {
      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          visible = this.sVisible,
          wrapClassName = this.wrapClassName,
          centered = this.centered,
          getContainer = this.getContainer,
          $slots = this.$slots,
          $scopedSlots = this.$scopedSlots,
          $attrs = this.$attrs;

      var children = $scopedSlots['default'] ? $scopedSlots['default']() : $slots['default'];
      var _configProvider = this.configProvider,
          getPrefixCls = _configProvider.getPrefixCls,
          getContextPopupContainer = _configProvider.getPopupContainer;

      var prefixCls = getPrefixCls('modal', customizePrefixCls);

      var defaultFooter = h(LocaleReceiver, {
        attrs: {
          componentName: 'Modal',
          defaultLocale: getConfirmLocale()
        },
        scopedSlots: { 'default': this.renderFooter }
      });
      var closeIcon = getComponentFromProp(this, 'closeIcon');
      var closeIconToRender = h(
        'span',
        { 'class': prefixCls + '-close-x' },
        [closeIcon || h(Icon$1, { 'class': prefixCls + '-close-icon', attrs: { type: 'close' }
        })]
      );
      var footer = getComponentFromProp(this, 'footer');
      var title = getComponentFromProp(this, 'title');
      var dialogProps = {
        props: _extends$1({}, this.$props, {
          getContainer: getContainer === undefined ? getContextPopupContainer : getContainer,
          prefixCls: prefixCls,
          wrapClassName: classnames(_defineProperty({}, prefixCls + '-centered', !!centered), wrapClassName),
          title: title,
          footer: footer === undefined ? defaultFooter : footer,
          visible: visible,
          mousePosition: mousePosition,
          closeIcon: closeIconToRender
        }),
        on: _extends$1({}, getListeners(this), {
          close: this.handleCancel
        }),
        'class': getClass(this),
        style: getStyle(this),
        attrs: $attrs
      };
      return h(
        DialogWrap,
        dialogProps,
        [children]
      );
    }
  };

  var ButtonType$1 = buttonTypes().type;
  var ActionButtonProps = {
    type: ButtonType$1,
    actionFn: VuePropTypes.func,
    closeModal: VuePropTypes.func,
    autoFocus: VuePropTypes.bool,
    buttonProps: VuePropTypes.object
  };

  var ActionButton = {
    mixins: [BaseMixin],
    props: ActionButtonProps,
    data: function data() {
      return {
        loading: false
      };
    },
    mounted: function mounted() {
      var _this = this;

      if (this.autoFocus) {
        this.timeoutId = setTimeout(function () {
          return _this.$el.focus();
        });
      }
    },
    beforeDestroy: function beforeDestroy() {
      clearTimeout(this.timeoutId);
    },

    methods: {
      onClick: function onClick() {
        var _this2 = this;

        var actionFn = this.actionFn,
            closeModal = this.closeModal;

        if (actionFn) {
          var ret = void 0;
          if (actionFn.length) {
            ret = actionFn(closeModal);
          } else {
            ret = actionFn();
            if (!ret) {
              closeModal();
            }
          }
          if (ret && ret.then) {
            this.setState({ loading: true });
            ret.then(function () {
              // It's unnecessary to set loading=false, for the Modal will be unmounted after close.
              // this.setState({ loading: false });
              closeModal.apply(undefined, arguments);
            }, function (e) {
              // Emit error when catch promise reject
              // eslint-disable-next-line no-console
              console.error(e);
              // See: https://github.com/ant-design/ant-design/issues/6183
              _this2.setState({ loading: false });
            });
          }
        } else {
          closeModal();
        }
      }
    },

    render: function render() {
      var h = arguments[0];
      var type = this.type,
          $slots = this.$slots,
          loading = this.loading,
          buttonProps = this.buttonProps;

      return h(
        Button,
        babelHelperVueJsxMergeProps([{
          attrs: { type: type, loading: loading },
          on: {
            'click': this.onClick
          }
        }, buttonProps]),
        [$slots['default']]
      );
    }
  };

  var ConfirmDialog = {
    functional: true,
    render: function render(h, context) {
      var props = context.props;
      var onCancel = props.onCancel,
          onOk = props.onOk,
          close = props.close,
          zIndex = props.zIndex,
          afterClose = props.afterClose,
          visible = props.visible,
          keyboard = props.keyboard,
          centered = props.centered,
          getContainer = props.getContainer,
          maskStyle = props.maskStyle,
          okButtonProps = props.okButtonProps,
          cancelButtonProps = props.cancelButtonProps,
          _props$iconType = props.iconType,
          iconType = _props$iconType === undefined ? 'question-circle' : _props$iconType,
          _props$closable = props.closable,
          closable = _props$closable === undefined ? false : _props$closable;

      warning$1(!('iconType' in props), 'Modal', 'The property \'iconType\' is deprecated. Use the property \'icon\' instead.');
      var icon = props.icon ? props.icon : iconType;
      var okType = props.okType || 'primary';
      var prefixCls = props.prefixCls || 'ant-modal';
      var contentPrefixCls = prefixCls + '-confirm';
      // 默认为 true，保持向下兼容
      var okCancel = 'okCancel' in props ? props.okCancel : true;
      var width = props.width || 416;
      var style = props.style || {};
      var mask = props.mask === undefined ? true : props.mask;
      // 默认为 false，保持旧版默认行为
      var maskClosable = props.maskClosable === undefined ? false : props.maskClosable;
      var runtimeLocale = getConfirmLocale();
      var okText = props.okText || (okCancel ? runtimeLocale.okText : runtimeLocale.justOkText);
      var cancelText = props.cancelText || runtimeLocale.cancelText;
      var autoFocusButton = props.autoFocusButton === null ? false : props.autoFocusButton || 'ok';
      var transitionName = props.transitionName || 'zoom';
      var maskTransitionName = props.maskTransitionName || 'fade';

      var classString = classnames(contentPrefixCls, contentPrefixCls + '-' + props.type, prefixCls + '-' + props.type, props['class']);

      var cancelButton = okCancel && h(
        ActionButton,
        {
          attrs: {
            actionFn: onCancel,
            closeModal: close,
            autoFocus: autoFocusButton === 'cancel',
            buttonProps: cancelButtonProps
          }
        },
        [cancelText]
      );
      var iconNode = typeof icon === 'string' ? h(Icon$1, {
        attrs: { type: icon }
      }) : icon(h);

      return h(
        Modal,
        {
          attrs: {
            prefixCls: prefixCls,

            wrapClassName: classnames(_defineProperty({}, contentPrefixCls + '-centered', !!centered)),

            visible: visible,
            closable: closable,
            title: '',
            transitionName: transitionName,
            footer: '',
            maskTransitionName: maskTransitionName,
            mask: mask,
            maskClosable: maskClosable,
            maskStyle: maskStyle,

            width: width,
            zIndex: zIndex,
            afterClose: afterClose,
            keyboard: keyboard,
            centered: centered,
            getContainer: getContainer
          },
          'class': classString, on: {
            'cancel': function cancel(e) {
              return close({ triggerCancel: true }, e);
            }
          },
          style: style },
        [h(
          'div',
          { 'class': contentPrefixCls + '-body-wrapper' },
          [h(
            'div',
            { 'class': contentPrefixCls + '-body' },
            [iconNode, props.title === undefined ? null : h(
              'span',
              { 'class': contentPrefixCls + '-title' },
              [typeof props.title === 'function' ? props.title(h) : props.title]
            ), h(
              'div',
              { 'class': contentPrefixCls + '-content' },
              [typeof props.content === 'function' ? props.content(h) : props.content]
            )]
          ), h(
            'div',
            { 'class': contentPrefixCls + '-btns' },
            [cancelButton, h(
              ActionButton,
              {
                attrs: {
                  type: okType,
                  actionFn: onOk,
                  closeModal: close,
                  autoFocus: autoFocusButton === 'ok',
                  buttonProps: okButtonProps
                }
              },
              [okText]
            )]
          )]
        )]
      );
    }
  };

  function confirm(config) {
    var div = document.createElement('div');
    var el = document.createElement('div');
    div.appendChild(el);
    document.body.appendChild(div);
    var currentConfig = _extends$1({}, omit(config, ['parentContext']), { close: close, visible: true });

    var confirmDialogInstance = null;
    var confirmDialogProps = { props: {} };
    function close() {
      destroy.apply(undefined, arguments);
    }
    function update(newConfig) {
      currentConfig = _extends$1({}, currentConfig, newConfig);
      confirmDialogProps.props = currentConfig;
    }
    function destroy() {
      if (confirmDialogInstance && div.parentNode) {
        confirmDialogInstance.$destroy();
        confirmDialogInstance = null;
        div.parentNode.removeChild(div);
      }

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var triggerCancel = args.some(function (param) {
        return param && param.triggerCancel;
      });
      if (config.onCancel && triggerCancel) {
        config.onCancel.apply(config, args);
      }
      for (var i = 0; i < destroyFns.length; i++) {
        var fn = destroyFns[i];
        if (fn === close) {
          destroyFns.splice(i, 1);
          break;
        }
      }
    }

    function render(props) {
      confirmDialogProps.props = props;
      var V = base.Vue || Vue;
      return new V({
        el: el,
        parent: config.parentContext,
        data: function data() {
          return { confirmDialogProps: confirmDialogProps };
        },
        render: function render() {
          var h = arguments[0];

          // 先解构，避免报错，原因不详
          var cdProps = _extends$1({}, this.confirmDialogProps);
          return h(ConfirmDialog, cdProps);
        }
      });
    }

    confirmDialogInstance = render(currentConfig);
    destroyFns.push(close);
    return {
      destroy: close,
      update: update
    };
  }

  // export { ActionButtonProps } from './ActionButton'
  // export { ModalProps, ModalFuncProps } from './Modal'

  var info = function info(props) {
    var config = _extends$1({
      type: 'info',
      icon: function icon(h) {
        return h(Icon$1, {
          attrs: { type: 'info-circle' }
        });
      },
      okCancel: false
    }, props);
    return confirm(config);
  };

  var success = function success(props) {
    var config = _extends$1({
      type: 'success',
      icon: function icon(h) {
        return h(Icon$1, {
          attrs: { type: 'check-circle' }
        });
      },
      okCancel: false
    }, props);
    return confirm(config);
  };

  var error = function error(props) {
    var config = _extends$1({
      type: 'error',
      icon: function icon(h) {
        return h(Icon$1, {
          attrs: { type: 'close-circle' }
        });
      },
      okCancel: false
    }, props);
    return confirm(config);
  };

  var warning$4 = function warning(props) {
    var config = _extends$1({
      type: 'warning',
      icon: function icon(h) {
        return h(Icon$1, {
          attrs: { type: 'exclamation-circle' }
        });
      },
      okCancel: false
    }, props);
    return confirm(config);
  };
  var warn$2 = warning$4;

  var confirm$1 = function confirmFn(props) {
    var config = _extends$1({
      type: 'confirm',
      okCancel: true
    }, props);
    return confirm(config);
  };
  Modal.info = info;
  Modal.success = success;
  Modal.error = error;
  Modal.warning = warning$4;
  Modal.warn = warn$2;
  Modal.confirm = confirm$1;

  Modal.destroyAll = function destroyAllFn() {
    while (destroyFns.length) {
      var close = destroyFns.pop();
      if (close) {
        close();
      }
    }
  };

  /* istanbul ignore next */
  Modal.install = function (Vue) {
    Vue.use(base);
    Vue.component(Modal.name, Modal);
  };

  var notificationInstance = {};
  var defaultDuration$1 = 4.5;
  var defaultTop$1 = '24px';
  var defaultBottom = '24px';
  var defaultPlacement = 'topRight';
  var defaultGetContainer = function defaultGetContainer() {
    return document.body;
  };
  var defaultCloseIcon = null;

  function setNotificationConfig(options) {
    var duration = options.duration,
        placement = options.placement,
        bottom = options.bottom,
        top = options.top,
        getContainer = options.getContainer,
        closeIcon = options.closeIcon;

    if (duration !== undefined) {
      defaultDuration$1 = duration;
    }
    if (placement !== undefined) {
      defaultPlacement = placement;
    }
    if (bottom !== undefined) {
      defaultBottom = typeof bottom === 'number' ? bottom + 'px' : bottom;
    }
    if (top !== undefined) {
      defaultTop$1 = typeof top === 'number' ? top + 'px' : top;
    }
    if (getContainer !== undefined) {
      defaultGetContainer = getContainer;
    }
    if (closeIcon !== undefined) {
      defaultCloseIcon = closeIcon;
    }
  }

  function getPlacementStyle(placement) {
    var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultTop$1;
    var bottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultBottom;

    var style = void 0;
    switch (placement) {
      case 'topLeft':
        style = {
          left: 0,
          top: top,
          bottom: 'auto'
        };
        break;
      case 'topRight':
        style = {
          right: 0,
          top: top,
          bottom: 'auto'
        };
        break;
      case 'bottomLeft':
        style = {
          left: 0,
          top: 'auto',
          bottom: bottom
        };
        break;
      default:
        style = {
          right: 0,
          top: 'auto',
          bottom: bottom
        };
        break;
    }
    return style;
  }

  function getNotificationInstance(_ref, callback) {
    var prefixCls = _ref.prefixCls,
        _ref$placement = _ref.placement,
        placement = _ref$placement === undefined ? defaultPlacement : _ref$placement,
        _ref$getContainer = _ref.getContainer,
        getContainer = _ref$getContainer === undefined ? defaultGetContainer : _ref$getContainer,
        top = _ref.top,
        bottom = _ref.bottom,
        _ref$closeIcon = _ref.closeIcon,
        _closeIcon = _ref$closeIcon === undefined ? defaultCloseIcon : _ref$closeIcon;

    var cacheKey = prefixCls + '-' + placement;
    if (notificationInstance[cacheKey]) {
      callback(notificationInstance[cacheKey]);
      return;
    }
    Notification.newInstance({
      prefixCls: prefixCls,
      'class': prefixCls + '-' + placement,
      style: getPlacementStyle(placement, top, bottom),
      getContainer: getContainer,
      closeIcon: function closeIcon(h) {
        var icon = typeof _closeIcon === 'function' ? _closeIcon(h) : _closeIcon;
        var closeIconToRender = h(
          'span',
          { 'class': prefixCls + '-close-x' },
          [icon || h(Icon$1, { 'class': prefixCls + '-close-icon', attrs: { type: 'close' }
          })]
        );
        return closeIconToRender;
      }
    }, function (notification) {
      notificationInstance[cacheKey] = notification;
      callback(notification);
    });
  }

  var typeToIcon = {
    success: 'check-circle-o',
    info: 'info-circle-o',
    error: 'close-circle-o',
    warning: 'exclamation-circle-o'
  };

  function notice$1(args) {
    var icon = args.icon,
        type = args.type,
        description = args.description,
        message = args.message,
        btn = args.btn;

    var outerPrefixCls = args.prefixCls || 'ant-notification';
    var prefixCls = outerPrefixCls + '-notice';
    var duration = args.duration === undefined ? defaultDuration$1 : args.duration;

    var iconNode = null;
    if (icon) {
      iconNode = function iconNode(h) {
        return h(
          'span',
          { 'class': prefixCls + '-icon' },
          [typeof icon === 'function' ? icon(h) : icon]
        );
      };
    } else if (type) {
      var iconType = typeToIcon[type];
      iconNode = function iconNode(h) {
        return h(Icon$1, { 'class': prefixCls + '-icon ' + prefixCls + '-icon-' + type, attrs: { type: iconType }
        });
      }; // eslint-disable-line
    }
    var placement = args.placement,
        top = args.top,
        bottom = args.bottom,
        getContainer = args.getContainer,
        closeIcon = args.closeIcon;

    getNotificationInstance({
      prefixCls: outerPrefixCls,
      placement: placement,
      top: top,
      bottom: bottom,
      getContainer: getContainer,
      closeIcon: closeIcon
    }, function (notification) {
      notification.notice({
        content: function content(h) {
          return h(
            'div',
            { 'class': iconNode ? prefixCls + '-with-icon' : '' },
            [iconNode && iconNode(h), h(
              'div',
              { 'class': prefixCls + '-message' },
              [!description && iconNode ? h('span', { 'class': prefixCls + '-message-single-line-auto-margin' }) : null, typeof message === 'function' ? message(h) : message]
            ), h(
              'div',
              { 'class': prefixCls + '-description' },
              [typeof description === 'function' ? description(h) : description]
            ), btn ? h(
              'span',
              { 'class': prefixCls + '-btn' },
              [typeof btn === 'function' ? btn(h) : btn]
            ) : null]
          );
        },
        duration: duration,
        closable: true,
        onClose: args.onClose,
        onClick: args.onClick,
        key: args.key,
        style: args.style || {},
        'class': args['class']
      });
    });
  }

  var api$1 = {
    open: notice$1,
    close: function close(key) {
      Object.keys(notificationInstance).forEach(function (cacheKey) {
        return notificationInstance[cacheKey].removeNotice(key);
      });
    },

    config: setNotificationConfig,
    destroy: function destroy() {
      Object.keys(notificationInstance).forEach(function (cacheKey) {
        notificationInstance[cacheKey].destroy();
        delete notificationInstance[cacheKey];
      });
    }
  };

  ['success', 'info', 'warning', 'error'].forEach(function (type) {
    api$1[type] = function (args) {
      return api$1.open(_extends$1({}, args, {
        type: type
      }));
    };
  });

  api$1.warn = api$1.warning;

  var tooltipProps = abstractTooltipProps();
  var btnProps = buttonTypes();
  var Popconfirm = {
    name: 'APopconfirm',
    props: _extends$1({}, tooltipProps, {
      prefixCls: VuePropTypes.string,
      transitionName: VuePropTypes.string.def('zoom-big'),
      content: VuePropTypes.any,
      title: VuePropTypes.any,
      trigger: tooltipProps.trigger.def('click'),
      okType: btnProps.type.def('primary'),
      disabled: VuePropTypes.bool.def(false),
      okText: VuePropTypes.any,
      cancelText: VuePropTypes.any,
      icon: VuePropTypes.any,
      okButtonProps: VuePropTypes.object,
      cancelButtonProps: VuePropTypes.object
    }),
    mixins: [BaseMixin],
    model: {
      prop: 'visible',
      event: 'visibleChange'
    },
    watch: {
      visible: function visible(val) {
        this.sVisible = val;
      }
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      var props = getOptionProps(this);
      var state = { sVisible: false };
      if ('visible' in props) {
        state.sVisible = props.visible;
      }
      if ('defaultVisible' in props) {
        state.sVisible = props.defaultVisible;
      }
      return state;
    },

    methods: {
      onConfirm: function onConfirm(e) {
        this.setVisible(false, e);
        this.$emit('confirm', e);
      },
      onCancel: function onCancel(e) {
        this.setVisible(false, e);
        this.$emit('cancel', e);
      },
      onVisibleChange: function onVisibleChange(sVisible) {
        var disabled = this.$props.disabled;

        if (disabled) {
          return;
        }
        this.setVisible(sVisible);
      },
      setVisible: function setVisible(sVisible, e) {
        if (!hasProp(this, 'visible')) {
          this.setState({ sVisible: sVisible });
        }
        this.$emit('visibleChange', sVisible, e);
      },
      getPopupDomNode: function getPopupDomNode() {
        return this.$refs.tooltip.getPopupDomNode();
      },
      renderOverlay: function renderOverlay(prefixCls, popconfirmLocale) {
        var h = this.$createElement;
        var okType = this.okType,
            okButtonProps = this.okButtonProps,
            cancelButtonProps = this.cancelButtonProps;

        var icon = getComponentFromProp(this, 'icon') || h(Icon$1, {
          attrs: { type: 'exclamation-circle', theme: 'filled' }
        });
        var cancelBtnProps = mergeProps({
          props: {
            size: 'small'
          },
          on: {
            click: this.onCancel
          }
        }, cancelButtonProps);
        var okBtnProps = mergeProps({
          props: {
            type: okType,
            size: 'small'
          },
          on: {
            click: this.onConfirm
          }
        }, okButtonProps);
        return h(
          'div',
          { 'class': prefixCls + '-inner-content' },
          [h(
            'div',
            { 'class': prefixCls + '-message' },
            [icon, h(
              'div',
              { 'class': prefixCls + '-message-title' },
              [getComponentFromProp(this, 'title')]
            )]
          ), h(
            'div',
            { 'class': prefixCls + '-buttons' },
            [h(
              Button,
              cancelBtnProps,
              [getComponentFromProp(this, 'cancelText') || popconfirmLocale.cancelText]
            ), h(
              Button,
              okBtnProps,
              [getComponentFromProp(this, 'okText') || popconfirmLocale.okText]
            )]
          )]
        );
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];

      var props = getOptionProps(this);
      var customizePrefixCls = props.prefixCls;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('popover', customizePrefixCls);

      var otherProps = omit(props, ['title', 'content', 'cancelText', 'okText']);
      var tooltipProps = {
        props: _extends$1({}, otherProps, {
          prefixCls: prefixCls,
          visible: this.sVisible
        }),
        ref: 'tooltip',
        on: {
          visibleChange: this.onVisibleChange
        }
      };
      var overlay = h(LocaleReceiver, {
        attrs: {
          componentName: 'Popconfirm',
          defaultLocale: defaultLocale.Popconfirm
        },
        scopedSlots: {
          'default': function _default(popconfirmLocale) {
            return _this.renderOverlay(prefixCls, popconfirmLocale);
          }
        }
      });
      return h(
        ToolTip,
        tooltipProps,
        [h(
          'template',
          { slot: 'title' },
          [overlay]
        ), this.$slots['default']]
      );
    }
  };

  /* istanbul ignore next */
  Popconfirm.install = function (Vue) {
    Vue.use(base);
    Vue.component(Popconfirm.name, Popconfirm);
  };

  var props$4 = abstractTooltipProps();
  var Popover = {
    name: 'APopover',
    props: _extends$1({}, props$4, {
      prefixCls: VuePropTypes.string,
      transitionName: VuePropTypes.string.def('zoom-big'),
      content: VuePropTypes.any,
      title: VuePropTypes.any
    }),
    model: {
      prop: 'visible',
      event: 'visibleChange'
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      getPopupDomNode: function getPopupDomNode() {
        return this.$refs.tooltip.getPopupDomNode();
      }
    },

    render: function render() {
      var h = arguments[0];
      var title = this.title,
          customizePrefixCls = this.prefixCls,
          $slots = this.$slots;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('popover', customizePrefixCls);

      var props = getOptionProps(this);
      delete props.title;
      delete props.content;
      var tooltipProps = {
        props: _extends$1({}, props, {
          prefixCls: prefixCls
        }),
        ref: 'tooltip',
        on: getListeners(this)
      };
      return h(
        ToolTip,
        tooltipProps,
        [h(
          'template',
          { slot: 'title' },
          [h('div', [(title || $slots.title) && h(
            'div',
            { 'class': prefixCls + '-title' },
            [getComponentFromProp(this, 'title')]
          ), h(
            'div',
            { 'class': prefixCls + '-inner-content' },
            [getComponentFromProp(this, 'content')]
          )])]
        ), this.$slots['default']]
      );
    }
  };

  /* istanbul ignore next */
  Popover.install = function (Vue) {
    Vue.use(base);
    Vue.component(Popover.name, Popover);
  };

  function validProgress(progress) {
    if (!progress || progress < 0) {
      return 0;
    }
    if (progress > 100) {
      return 100;
    }
    return progress;
  }

  /**
   * {
   *   '0%': '#afc163',
   *   '75%': '#009900',
   *   '50%': 'green',     ====>     '#afc163 0%, #66FF00 25%, #00CC00 50%, #009900 75%, #ffffff 100%'
   *   '25%': '#66FF00',
   *   '100%': '#ffffff'
   * }
   */
  var sortGradient = function sortGradient(gradients) {
    var tempArr = [];
    // eslint-disable-next-line no-restricted-syntax
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = Object.entries(gradients)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _ref = _step.value;

        var _ref2 = _slicedToArray(_ref, 2);

        var key = _ref2[0];
        var value = _ref2[1];

        var formatKey = parseFloat(key.replace(/%/g, ''));
        if (isNaN(formatKey)) {
          return {};
        }
        tempArr.push({
          key: formatKey,
          value: value
        });
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    tempArr = tempArr.sort(function (a, b) {
      return a.key - b.key;
    });
    return tempArr.map(function (_ref3) {
      var key = _ref3.key,
          value = _ref3.value;
      return value + ' ' + key + '%';
    }).join(', ');
  };

  /**
   * {
   *   '0%': '#afc163',
   *   '25%': '#66FF00',
   *   '50%': '#00CC00',     ====>  linear-gradient(to right, #afc163 0%, #66FF00 25%,
   *   '75%': '#009900',              #00CC00 50%, #009900 75%, #ffffff 100%)
   *   '100%': '#ffffff'
   * }
   *
   * Then this man came to realize the truth:
   * Besides six pence, there is the moon.
   * Besides bread and butter, there is the bug.
   * And...
   * Besides women, there is the code.
   */
  var handleGradient = function handleGradient(strokeColor) {
    var _strokeColor$from = strokeColor.from,
        from = _strokeColor$from === undefined ? '#1890ff' : _strokeColor$from,
        _strokeColor$to = strokeColor.to,
        to = _strokeColor$to === undefined ? '#1890ff' : _strokeColor$to,
        _strokeColor$directio = strokeColor.direction,
        direction = _strokeColor$directio === undefined ? 'to right' : _strokeColor$directio,
        rest = _objectWithoutProperties(strokeColor, ['from', 'to', 'direction']);

    if (Object.keys(rest).length !== 0) {
      var sortedGradients = sortGradient(rest);
      return { backgroundImage: 'linear-gradient(' + direction + ', ' + sortedGradients + ')' };
    }
    return { backgroundImage: 'linear-gradient(' + direction + ', ' + from + ', ' + to + ')' };
  };
  var Line = {
    functional: true,
    render: function render(h, context) {
      var props = context.props,
          children = context.children;
      var prefixCls = props.prefixCls,
          percent = props.percent,
          successPercent = props.successPercent,
          strokeWidth = props.strokeWidth,
          size = props.size,
          strokeColor = props.strokeColor,
          strokeLinecap = props.strokeLinecap;

      var backgroundProps = void 0;
      if (strokeColor && typeof strokeColor !== 'string') {
        backgroundProps = handleGradient(strokeColor);
      } else {
        backgroundProps = {
          background: strokeColor
        };
      }
      var percentStyle = _extends$1({
        width: validProgress(percent) + '%',
        height: (strokeWidth || (size === 'small' ? 6 : 8)) + 'px',
        background: strokeColor,
        borderRadius: strokeLinecap === 'square' ? 0 : '100px'
      }, backgroundProps);
      var successPercentStyle = {
        width: validProgress(successPercent) + '%',
        height: (strokeWidth || (size === 'small' ? 6 : 8)) + 'px',
        borderRadius: strokeLinecap === 'square' ? 0 : ''
      };
      var successSegment = successPercent !== undefined ? h('div', { 'class': prefixCls + '-success-bg', style: successPercentStyle }) : null;
      return h('div', [h(
        'div',
        { 'class': prefixCls + '-outer' },
        [h(
          'div',
          { 'class': prefixCls + '-inner' },
          [h('div', { 'class': prefixCls + '-bg', style: percentStyle }), successSegment]
        )]
      ), children]);
    }
  };

  function enhancer(Component) {
    return {
      mixins: [Component],
      updated: function updated() {
        var _this = this;

        var now = Date.now();
        var updated = false;

        Object.keys(this.paths).forEach(function (key) {
          var path = _this.paths[key];

          if (!path) {
            return;
          }

          updated = true;
          var pathStyle = path.style;
          pathStyle.transitionDuration = '.3s, .3s, .3s, .06s';

          if (_this.prevTimeStamp && now - _this.prevTimeStamp < 100) {
            pathStyle.transitionDuration = '0s, 0s';
          }
        });
        if (updated) {
          this.prevTimeStamp = Date.now();
        }
      }
    };
  }

  var defaultProps$1 = {
    // className: '',
    percent: 0,
    prefixCls: 'rc-progress',
    strokeColor: '#2db7f5',
    strokeLinecap: 'round',
    strokeWidth: 1,
    // style: {},
    trailColor: '#D9D9D9',
    trailWidth: 1
  };
  var mixedType = VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string]);

  var propTypes = {
    // className: PropTypes.string,
    percent: VuePropTypes.oneOfType([mixedType, VuePropTypes.arrayOf(mixedType)]),
    prefixCls: VuePropTypes.string,
    strokeColor: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.arrayOf(VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.object])), VuePropTypes.object]),
    strokeLinecap: VuePropTypes.oneOf(['butt', 'round', 'square']),
    strokeWidth: mixedType,
    // style: PropTypes.object,
    trailColor: VuePropTypes.string,
    trailWidth: mixedType
  };

  Vue.use(ref$1, { name: 'ant-ref' });

  var Line$1 = {
    props: initDefaultProps(propTypes, defaultProps$1),
    created: function created() {
      this.paths = {};
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];

      var _$props = this.$props,
          percent = _$props.percent,
          prefixCls = _$props.prefixCls,
          strokeColor = _$props.strokeColor,
          strokeLinecap = _$props.strokeLinecap,
          strokeWidth = _$props.strokeWidth,
          trailColor = _$props.trailColor,
          trailWidth = _$props.trailWidth,
          transition = _$props.transition,
          restProps = _objectWithoutProperties(_$props, ['percent', 'prefixCls', 'strokeColor', 'strokeLinecap', 'strokeWidth', 'trailColor', 'trailWidth', 'transition']);

      delete restProps.gapPosition;

      var percentList = Array.isArray(percent) ? percent : [percent];
      var strokeColorList = Array.isArray(strokeColor) ? strokeColor : [strokeColor];

      var center = strokeWidth / 2;
      var right = 100 - strokeWidth / 2;
      var pathString = 'M ' + (strokeLinecap === 'round' ? center : 0) + ',' + center + '\n           L ' + (strokeLinecap === 'round' ? right : 100) + ',' + center;
      var viewBoxString = '0 0 100 ' + strokeWidth;

      var stackPtg = 0;

      var pathFirst = {
        attrs: {
          d: pathString,
          'stroke-linecap': strokeLinecap,
          stroke: trailColor,
          'stroke-width': trailWidth || strokeWidth,
          'fill-opacity': '0'
        },
        'class': prefixCls + '-line-trail'
      };
      return h(
        'svg',
        babelHelperVueJsxMergeProps([{
          'class': prefixCls + '-line',
          attrs: { viewBox: viewBoxString,
            preserveAspectRatio: 'none'
          }
        }, restProps]),
        [h('path', pathFirst), percentList.map(function (ptg, index) {
          var pathStyle = {
            strokeDasharray: ptg + 'px, 100px',
            strokeDashoffset: '-' + stackPtg + 'px',
            transition: transition || 'stroke-dashoffset 0.3s ease 0s, stroke-dasharray .3s ease 0s, stroke 0.3s linear'
          };
          var color = strokeColorList[index] || strokeColorList[strokeColorList.length - 1];

          stackPtg += ptg;

          var pathProps = {
            key: index,
            attrs: {
              d: pathString,
              'stroke-linecap': strokeLinecap,
              stroke: color,
              'stroke-width': strokeWidth,
              'fill-opacity': '0'
            },
            'class': prefixCls + '-line-path',
            style: pathStyle,
            directives: [{
              name: 'ant-ref',
              value: function value(c) {
                _this.paths[index] = c;
              }
            }]
          };

          return h('path', pathProps);
        })]
      );
    }
  };

  var circlePropTypes = _extends$1({}, propTypes, {
    gapPosition: VuePropTypes.oneOf(['top', 'bottom', 'left', 'right']),
    gapDegree: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string, VuePropTypes.bool])
  });

  var circleDefaultProps = _extends$1({}, defaultProps$1, {
    gapPosition: 'top'
  });

  Vue.use(ref$1, { name: 'ant-ref' });

  var gradientSeed = 0;

  function stripPercentToNumber(percent) {
    return +percent.replace('%', '');
  }

  function toArray$3(symArray) {
    return Array.isArray(symArray) ? symArray : [symArray];
  }

  function getPathStyles(offset, percent, strokeColor, strokeWidth) {
    var gapDegree = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var gapPosition = arguments[5];

    var radius = 50 - strokeWidth / 2;
    var beginPositionX = 0;
    var beginPositionY = -radius;
    var endPositionX = 0;
    var endPositionY = -2 * radius;
    switch (gapPosition) {
      case 'left':
        beginPositionX = -radius;
        beginPositionY = 0;
        endPositionX = 2 * radius;
        endPositionY = 0;
        break;
      case 'right':
        beginPositionX = radius;
        beginPositionY = 0;
        endPositionX = -2 * radius;
        endPositionY = 0;
        break;
      case 'bottom':
        beginPositionY = radius;
        endPositionY = 2 * radius;
        break;
    }
    var pathString = 'M 50,50 m ' + beginPositionX + ',' + beginPositionY + '\n   a ' + radius + ',' + radius + ' 0 1 1 ' + endPositionX + ',' + -endPositionY + '\n   a ' + radius + ',' + radius + ' 0 1 1 ' + -endPositionX + ',' + endPositionY;
    var len = Math.PI * 2 * radius;

    var pathStyle = {
      stroke: strokeColor,
      strokeDasharray: percent / 100 * (len - gapDegree) + 'px ' + len + 'px',
      strokeDashoffset: '-' + (gapDegree / 2 + offset / 100 * (len - gapDegree)) + 'px',
      transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s' // eslint-disable-line
    };

    return {
      pathString: pathString,
      pathStyle: pathStyle
    };
  }

  var Circle = {
    props: initDefaultProps(circlePropTypes, circleDefaultProps),
    created: function created() {
      this.paths = {};
      this.gradientId = gradientSeed;
      gradientSeed += 1;
    },

    methods: {
      getStokeList: function getStokeList() {
        var _this = this;

        var h = this.$createElement;
        var _$props = this.$props,
            prefixCls = _$props.prefixCls,
            percent = _$props.percent,
            strokeColor = _$props.strokeColor,
            strokeWidth = _$props.strokeWidth,
            strokeLinecap = _$props.strokeLinecap,
            gapDegree = _$props.gapDegree,
            gapPosition = _$props.gapPosition;

        var percentList = toArray$3(percent);
        var strokeColorList = toArray$3(strokeColor);

        var stackPtg = 0;
        return percentList.map(function (ptg, index) {
          var color = strokeColorList[index] || strokeColorList[strokeColorList.length - 1];
          var stroke = Object.prototype.toString.call(color) === '[object Object]' ? 'url(#' + prefixCls + '-gradient-' + _this.gradientId + ')' : '';

          var _getPathStyles = getPathStyles(stackPtg, ptg, color, strokeWidth, gapDegree, gapPosition),
              pathString = _getPathStyles.pathString,
              pathStyle = _getPathStyles.pathStyle;

          stackPtg += ptg;

          var pathProps = {
            key: index,
            attrs: {
              d: pathString,
              stroke: stroke,
              'stroke-linecap': strokeLinecap,
              'stroke-width': ptg === 0 ? 0 : strokeWidth,
              'fill-opacity': '0'
            },
            'class': prefixCls + '-circle-path',
            style: pathStyle,
            directives: [{
              name: 'ant-ref',
              value: function value(c) {
                _this.paths[index] = c;
              }
            }]
          };
          return h('path', pathProps);
        });
      }
    },

    render: function render() {
      var h = arguments[0];

      var _$props2 = this.$props,
          prefixCls = _$props2.prefixCls,
          strokeWidth = _$props2.strokeWidth,
          trailWidth = _$props2.trailWidth,
          gapDegree = _$props2.gapDegree,
          gapPosition = _$props2.gapPosition,
          trailColor = _$props2.trailColor,
          strokeLinecap = _$props2.strokeLinecap,
          strokeColor = _$props2.strokeColor,
          restProps = _objectWithoutProperties(_$props2, ['prefixCls', 'strokeWidth', 'trailWidth', 'gapDegree', 'gapPosition', 'trailColor', 'strokeLinecap', 'strokeColor']);

      var _getPathStyles2 = getPathStyles(0, 100, trailColor, strokeWidth, gapDegree, gapPosition),
          pathString = _getPathStyles2.pathString,
          pathStyle = _getPathStyles2.pathStyle;

      delete restProps.percent;
      var strokeColorList = toArray$3(strokeColor);
      var gradient = strokeColorList.find(function (color) {
        return Object.prototype.toString.call(color) === '[object Object]';
      });
      var pathFirst = {
        attrs: {
          d: pathString,
          stroke: trailColor,
          'stroke-linecap': strokeLinecap,
          'stroke-width': trailWidth || strokeWidth,
          'fill-opacity': '0'
        },
        'class': prefixCls + '-circle-trail',
        style: pathStyle
      };

      return h(
        'svg',
        babelHelperVueJsxMergeProps([{ 'class': prefixCls + '-circle', attrs: { viewBox: '0 0 100 100' }
        }, restProps]),
        [gradient && h('defs', [h(
          'linearGradient',
          {
            attrs: {
              id: prefixCls + '-gradient-' + this.gradientId,
              x1: '100%',
              y1: '0%',
              x2: '0%',
              y2: '0%'
            }
          },
          [Object.keys(gradient).sort(function (a, b) {
            return stripPercentToNumber(a) - stripPercentToNumber(b);
          }).map(function (key, index) {
            return h('stop', { key: index, attrs: { offset: key, 'stop-color': gradient[key] }
            });
          })]
        )]), h('path', pathFirst), this.getStokeList().reverse()]
      );
    }
  };

  var VCCircle = enhancer(Circle);

  var statusColorMap = {
    normal: '#108ee9',
    exception: '#ff5500',
    success: '#87d068'
  };

  function getPercentage(_ref) {
    var percent = _ref.percent,
        successPercent = _ref.successPercent;

    var ptg = validProgress(percent);
    if (!successPercent) return ptg;

    var successPtg = validProgress(successPercent);
    return [successPercent, validProgress(ptg - successPtg)];
  }

  function getStrokeColor(_ref2) {
    var progressStatus = _ref2.progressStatus,
        successPercent = _ref2.successPercent,
        strokeColor = _ref2.strokeColor;

    var color = strokeColor || statusColorMap[progressStatus];
    if (!successPercent) return color;
    return [statusColorMap.success, color];
  }

  var Circle$1 = {
    functional: true,
    render: function render(h, context) {
      var _wrapperClassName;

      var props = context.props,
          children = context.children;
      var prefixCls = props.prefixCls,
          width = props.width,
          strokeWidth = props.strokeWidth,
          trailColor = props.trailColor,
          strokeLinecap = props.strokeLinecap,
          gapPosition = props.gapPosition,
          gapDegree = props.gapDegree,
          type = props.type;

      var circleSize = width || 120;
      var circleStyle = {
        width: typeof circleSize === 'number' ? circleSize + 'px' : circleSize,
        height: typeof circleSize === 'number' ? circleSize + 'px' : circleSize,
        fontSize: circleSize * 0.15 + 6
      };
      var circleWidth = strokeWidth || 6;
      var gapPos = gapPosition || type === 'dashboard' && 'bottom' || 'top';
      var gapDeg = gapDegree || type === 'dashboard' && 75;
      var strokeColor = getStrokeColor(props);
      var isGradient = Object.prototype.toString.call(strokeColor) === '[object Object]';

      var wrapperClassName = (_wrapperClassName = {}, _defineProperty(_wrapperClassName, prefixCls + '-inner', true), _defineProperty(_wrapperClassName, prefixCls + '-circle-gradient', isGradient), _wrapperClassName);

      return h(
        'div',
        { 'class': wrapperClassName, style: circleStyle },
        [h(VCCircle, {
          attrs: {
            percent: getPercentage(props),
            strokeWidth: circleWidth,
            trailWidth: circleWidth,
            strokeColor: strokeColor,
            strokeLinecap: strokeLinecap,
            trailColor: trailColor,
            prefixCls: prefixCls,
            gapDegree: gapDeg,
            gapPosition: gapPos
          }
        }), children]
      );
    }
  };

  var ProgressStatuses = ['normal', 'exception', 'active', 'success'];
  var ProgressType = VuePropTypes.oneOf(['line', 'circle', 'dashboard']);
  var ProgressSize = VuePropTypes.oneOf(['default', 'small']);

  var ProgressProps = {
    prefixCls: VuePropTypes.string,
    type: ProgressType,
    percent: VuePropTypes.number,
    successPercent: VuePropTypes.number,
    format: VuePropTypes.func,
    status: VuePropTypes.oneOf(ProgressStatuses),
    showInfo: VuePropTypes.bool,
    strokeWidth: VuePropTypes.number,
    strokeLinecap: VuePropTypes.oneOf(['butt', 'round', 'square']),
    strokeColor: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.object]),
    trailColor: VuePropTypes.string,
    width: VuePropTypes.number,
    gapDegree: VuePropTypes.number,
    gapPosition: VuePropTypes.oneOf(['top', 'bottom', 'left', 'right']),
    size: ProgressSize
  };

  var Progress = {
    name: 'AProgress',
    props: initDefaultProps(ProgressProps, {
      type: 'line',
      percent: 0,
      showInfo: true,
      trailColor: '#f3f3f3',
      size: 'default',
      gapDegree: 0,
      strokeLinecap: 'round'
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      getPercentNumber: function getPercentNumber() {
        var _$props = this.$props,
            successPercent = _$props.successPercent,
            _$props$percent = _$props.percent,
            percent = _$props$percent === undefined ? 0 : _$props$percent;

        return parseInt(successPercent !== undefined ? successPercent.toString() : percent.toString(), 10);
      },
      getProgressStatus: function getProgressStatus() {
        var status = this.$props.status;

        if (ProgressStatuses.indexOf(status) < 0 && this.getPercentNumber() >= 100) {
          return 'success';
        }
        return status || 'normal';
      },
      renderProcessInfo: function renderProcessInfo(prefixCls, progressStatus) {
        var h = this.$createElement;
        var _$props2 = this.$props,
            showInfo = _$props2.showInfo,
            format = _$props2.format,
            type = _$props2.type,
            percent = _$props2.percent,
            successPercent = _$props2.successPercent;

        if (!showInfo) return null;

        var text = void 0;
        var textFormatter = format || this.$scopedSlots.format || function (percentNumber) {
          return percentNumber + '%';
        };
        var iconType = type === 'circle' || type === 'dashboard' ? '' : '-circle';
        if (format || this.$scopedSlots.format || progressStatus !== 'exception' && progressStatus !== 'success') {
          text = textFormatter(validProgress(percent), validProgress(successPercent));
        } else if (progressStatus === 'exception') {
          text = h(Icon$1, {
            attrs: { type: 'close' + iconType, theme: type === 'line' ? 'filled' : 'outlined' }
          });
        } else if (progressStatus === 'success') {
          text = h(Icon$1, {
            attrs: { type: 'check' + iconType, theme: type === 'line' ? 'filled' : 'outlined' }
          });
        }
        return h(
          'span',
          { 'class': prefixCls + '-text', attrs: { title: typeof text === 'string' ? text : undefined }
          },
          [text]
        );
      }
    },
    render: function render() {
      var _classNames;

      var h = arguments[0];

      var props = getOptionProps(this);
      var customizePrefixCls = props.prefixCls,
          size = props.size,
          type = props.type,
          showInfo = props.showInfo;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('progress', customizePrefixCls);
      var progressStatus = this.getProgressStatus();
      var progressInfo = this.renderProcessInfo(prefixCls, progressStatus);

      var progress = void 0;

      // Render progress shape
      if (type === 'line') {
        var lineProps = {
          props: _extends$1({}, props, {
            prefixCls: prefixCls
          })
        };
        progress = h(
          Line,
          lineProps,
          [progressInfo]
        );
      } else if (type === 'circle' || type === 'dashboard') {
        var circleProps = {
          props: _extends$1({}, props, {
            prefixCls: prefixCls,
            progressStatus: progressStatus
          })
        };
        progress = h(
          Circle$1,
          circleProps,
          [progressInfo]
        );
      }

      var classString = classnames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-' + (type === 'dashboard' && 'circle' || type), true), _defineProperty(_classNames, prefixCls + '-status-' + progressStatus, true), _defineProperty(_classNames, prefixCls + '-show-info', showInfo), _defineProperty(_classNames, prefixCls + '-' + size, size), _classNames));

      var progressProps = {
        on: getListeners(this),
        'class': classString
      };
      return h(
        'div',
        progressProps,
        [progress]
      );
    }
  };

  /* istanbul ignore next */
  Progress.install = function (Vue) {
    Vue.use(base);
    Vue.component(Progress.name, Progress);
  };

  function getScroll$4(w, top) {
    var ret = top ? w.pageYOffset : w.pageXOffset;
    var method = top ? 'scrollTop' : 'scrollLeft';
    if (typeof ret !== 'number') {
      var d = w.document;
      // ie6,7,8 standard mode
      ret = d.documentElement[method];
      if (typeof ret !== 'number') {
        // quirks mode
        ret = d.body[method];
      }
    }
    return ret;
  }

  function getClientPosition$2(elem) {
    var x = void 0;
    var y = void 0;
    var doc = elem.ownerDocument;
    var body = doc.body;
    var docElem = doc && doc.documentElement;
    var box = elem.getBoundingClientRect();
    x = box.left;
    y = box.top;
    x -= docElem.clientLeft || body.clientLeft || 0;
    y -= docElem.clientTop || body.clientTop || 0;
    return {
      left: x,
      top: y
    };
  }

  function getOffsetLeft(el) {
    var pos = getClientPosition$2(el);
    var doc = el.ownerDocument;
    var w = doc.defaultView || doc.parentWindow;
    pos.left += getScroll$4(w);
    return pos.left;
  }

  function noop$L() {}

  var Star = {
    name: 'Star',
    mixins: [BaseMixin],
    props: {
      value: VuePropTypes.number,
      index: VuePropTypes.number,
      prefixCls: VuePropTypes.string,
      allowHalf: VuePropTypes.bool,
      disabled: VuePropTypes.bool,
      character: VuePropTypes.any,
      characterRender: VuePropTypes.func,
      focused: VuePropTypes.bool,
      count: VuePropTypes.number
    },
    methods: {
      onHover: function onHover(e) {
        var index = this.index;

        this.$emit('hover', e, index);
      },
      onClick: function onClick(e) {
        var index = this.index;

        this.$emit('click', e, index);
      },
      onKeyDown: function onKeyDown(e) {
        var index = this.$props.index;

        if (e.keyCode === 13) {
          this.__emit('click', e, index);
        }
      },
      getClassName: function getClassName() {
        var prefixCls = this.prefixCls,
            index = this.index,
            value = this.value,
            allowHalf = this.allowHalf,
            focused = this.focused;

        var starValue = index + 1;
        var className = prefixCls;
        if (value === 0 && index === 0 && focused) {
          className += ' ' + prefixCls + '-focused';
        } else if (allowHalf && value + 0.5 === starValue) {
          className += ' ' + prefixCls + '-half ' + prefixCls + '-active';
          if (focused) {
            className += ' ' + prefixCls + '-focused';
          }
        } else {
          className += starValue <= value ? ' ' + prefixCls + '-full' : ' ' + prefixCls + '-zero';
          if (starValue === value && focused) {
            className += ' ' + prefixCls + '-focused';
          }
        }
        return className;
      }
    },
    render: function render() {
      var h = arguments[0];
      var onHover = this.onHover,
          onClick = this.onClick,
          onKeyDown = this.onKeyDown,
          disabled = this.disabled,
          prefixCls = this.prefixCls,
          characterRender = this.characterRender,
          index = this.index,
          count = this.count,
          value = this.value;


      var character = getComponentFromProp(this, 'character');
      var star = h(
        'li',
        { 'class': this.getClassName() },
        [h(
          'div',
          {
            on: {
              'click': disabled ? noop$L : onClick,
              'keydown': disabled ? noop$L : onKeyDown,
              'mousemove': disabled ? noop$L : onHover
            },
            attrs: {
              role: 'radio',
              'aria-checked': value > index ? 'true' : 'false',
              'aria-posinset': index + 1,
              'aria-setsize': count,
              tabIndex: 0
            }
          },
          [h(
            'div',
            { 'class': prefixCls + '-first' },
            [character]
          ), h(
            'div',
            { 'class': prefixCls + '-second' },
            [character]
          )]
        )]
      );
      if (characterRender) {
        star = characterRender(star, this.$props);
      }
      return star;
    }
  };

  var rateProps = {
    disabled: VuePropTypes.bool,
    value: VuePropTypes.number,
    defaultValue: VuePropTypes.number,
    count: VuePropTypes.number,
    allowHalf: VuePropTypes.bool,
    allowClear: VuePropTypes.bool,
    prefixCls: VuePropTypes.string,
    character: VuePropTypes.any,
    characterRender: VuePropTypes.func,
    tabIndex: VuePropTypes.number,
    autoFocus: VuePropTypes.bool
  };

  function noop$M() {}

  var Rate = {
    name: 'Rate',
    mixins: [BaseMixin],
    model: {
      prop: 'value',
      event: 'change'
    },
    props: initDefaultProps(rateProps, {
      defaultValue: 0,
      count: 5,
      allowHalf: false,
      allowClear: true,
      prefixCls: 'rc-rate',
      tabIndex: 0,
      character: '★'
    }),
    data: function data() {
      var value = this.value;
      if (!hasProp(this, 'value')) {
        value = this.defaultValue;
      }
      return {
        sValue: value,
        focused: false,
        cleanedValue: null,
        hoverValue: undefined
      };
    },

    watch: {
      value: function value(val) {
        this.setState({
          sValue: val
        });
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        if (_this.autoFocus && !_this.disabled) {
          _this.focus();
        }
      });
    },

    methods: {
      onHover: function onHover(event, index) {
        var hoverValue = this.getStarValue(index, event.pageX);
        var cleanedValue = this.cleanedValue;

        if (hoverValue !== cleanedValue) {
          this.setState({
            hoverValue: hoverValue,
            cleanedValue: null
          });
        }
        this.$emit('hoverChange', hoverValue);
      },
      onMouseLeave: function onMouseLeave() {
        this.setState({
          hoverValue: undefined,
          cleanedValue: null
        });
        this.$emit('hoverChange', undefined);
      },
      onClick: function onClick(event, index) {
        var allowClear = this.allowClear,
            value = this.sValue;

        var newValue = this.getStarValue(index, event.pageX);
        var isReset = false;
        if (allowClear) {
          isReset = newValue === value;
        }
        this.onMouseLeave(true);
        this.changeValue(isReset ? 0 : newValue);
        this.setState({
          cleanedValue: isReset ? newValue : null
        });
      },
      onFocus: function onFocus() {
        this.setState({
          focused: true
        });
        this.$emit('focus');
      },
      onBlur: function onBlur() {
        this.setState({
          focused: false
        });
        this.$emit('blur');
      },
      onKeyDown: function onKeyDown(event) {
        var keyCode = event.keyCode;
        var count = this.count,
            allowHalf = this.allowHalf;
        var sValue = this.sValue;

        if (keyCode === KeyCode.RIGHT && sValue < count) {
          if (allowHalf) {
            sValue += 0.5;
          } else {
            sValue += 1;
          }
          this.changeValue(sValue);
          event.preventDefault();
        } else if (keyCode === KeyCode.LEFT && sValue > 0) {
          if (allowHalf) {
            sValue -= 0.5;
          } else {
            sValue -= 1;
          }
          this.changeValue(sValue);
          event.preventDefault();
        }
        this.$emit('keydown', event);
      },
      getStarDOM: function getStarDOM(index) {
        return this.$refs['stars' + index].$el;
      },
      getStarValue: function getStarValue(index, x) {
        var value = index + 1;
        if (this.allowHalf) {
          var starEle = this.getStarDOM(index);
          var leftDis = getOffsetLeft(starEle);
          var width = starEle.clientWidth;
          if (x - leftDis < width / 2) {
            value -= 0.5;
          }
        }
        return value;
      },
      focus: function focus() {
        if (!this.disabled) {
          this.$refs.rateRef.focus();
        }
      },
      blur: function blur() {
        if (!this.disabled) {
          this.$refs.rateRef.blur();
        }
      },
      changeValue: function changeValue(value) {
        if (!hasProp(this, 'value')) {
          this.setState({
            sValue: value
          });
        }
        this.$emit('change', value);
      }
    },
    render: function render() {
      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          count = _getOptionProps.count,
          allowHalf = _getOptionProps.allowHalf,
          prefixCls = _getOptionProps.prefixCls,
          disabled = _getOptionProps.disabled,
          tabIndex = _getOptionProps.tabIndex;

      var sValue = this.sValue,
          hoverValue = this.hoverValue,
          focused = this.focused;

      var stars = [];
      var disabledClass = disabled ? prefixCls + '-disabled' : '';
      var character = getComponentFromProp(this, 'character');
      var characterRender = this.characterRender || this.$scopedSlots.characterRender;
      for (var index = 0; index < count; index++) {
        var starProps = {
          props: {
            index: index,
            count: count,
            disabled: disabled,
            prefixCls: prefixCls + '-star',
            allowHalf: allowHalf,
            value: hoverValue === undefined ? sValue : hoverValue,
            character: character,
            characterRender: characterRender,
            focused: focused
          },
          on: {
            click: this.onClick,
            hover: this.onHover
          },
          key: index,
          ref: 'stars' + index
        };
        stars.push(h(Star, starProps));
      }
      return h(
        'ul',
        {
          'class': classnames(prefixCls, disabledClass),
          on: {
            'mouseleave': disabled ? noop$M : this.onMouseLeave,
            'focus': disabled ? noop$M : this.onFocus,
            'blur': disabled ? noop$M : this.onBlur,
            'keydown': disabled ? noop$M : this.onKeyDown
          },
          attrs: {
            tabIndex: disabled ? -1 : tabIndex,

            role: 'radiogroup'
          },

          ref: 'rateRef' },
        [stars]
      );
    }
  };

  var RateProps = {
    prefixCls: VuePropTypes.string,
    count: VuePropTypes.number,
    value: VuePropTypes.value,
    defaultValue: VuePropTypes.value,
    allowHalf: VuePropTypes.bool,
    allowClear: VuePropTypes.bool,
    tooltips: VuePropTypes.arrayOf(VuePropTypes.string),
    disabled: VuePropTypes.bool,
    character: VuePropTypes.any,
    autoFocus: VuePropTypes.bool
  };

  var Rate$1 = {
    name: 'ARate',
    model: {
      prop: 'value',
      event: 'change'
    },
    props: RateProps,
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      characterRender: function characterRender(node, _ref) {
        var index = _ref.index;
        var h = this.$createElement;
        var tooltips = this.$props.tooltips;

        if (!tooltips) return node;
        return h(
          ToolTip,
          {
            attrs: { title: tooltips[index] }
          },
          [node]
        );
      },
      focus: function focus() {
        this.$refs.refRate.focus();
      },
      blur: function blur() {
        this.$refs.refRate.blur();
      }
    },
    render: function render() {
      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          customizePrefixCls = _getOptionProps.prefixCls,
          restProps = _objectWithoutProperties(_getOptionProps, ['prefixCls']);

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('rate', customizePrefixCls);

      var character = getComponentFromProp(this, 'character') || h(Icon$1, {
        attrs: { type: 'star', theme: 'filled' }
      });
      var rateProps = {
        props: _extends$1({
          character: character,
          characterRender: this.characterRender,
          prefixCls: prefixCls
        }, omit(restProps, ['tooltips'])),
        on: getListeners(this),
        ref: 'refRate'
      };
      return h(Rate, rateProps);
    }
  };

  /* istanbul ignore next */
  Rate$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Rate$1.name, Rate$1);
  };

  /* eslint-disable */
  var Track = {
    functional: true,
    render: function render(h, context) {
      var _ref, _ref2;

      var _context$props = context.props,
          included = _context$props.included,
          vertical = _context$props.vertical,
          offset = _context$props.offset,
          length = _context$props.length,
          reverse = _context$props.reverse;
      var _context$data = context.data,
          style = _context$data.style,
          className = _context$data['class'];


      var positonStyle = vertical ? (_ref = {}, _defineProperty(_ref, reverse ? 'top' : 'bottom', offset + '%'), _defineProperty(_ref, reverse ? 'bottom' : 'top', 'auto'), _defineProperty(_ref, 'height', length + '%'), _ref) : (_ref2 = {}, _defineProperty(_ref2, reverse ? 'right' : 'left', offset + '%'), _defineProperty(_ref2, reverse ? 'left' : 'right', 'auto'), _defineProperty(_ref2, 'width', length + '%'), _ref2);

      var elStyle = _extends$1({}, style, positonStyle);
      return included ? h('div', { 'class': className, style: elStyle }) : null;
    }
  };

  var calcPoints = function calcPoints(vertical, marks, dots, step, min, max) {
    warning$1(dots ? step > 0 : true, 'Slider', '`Slider[step]` should be a positive number in order to make Slider[dots] work.');
    var points = Object.keys(marks).map(parseFloat).sort(function (a, b) {
      return a - b;
    });
    if (dots && step) {
      for (var i = min; i <= max; i += step) {
        if (points.indexOf(i) === -1) {
          points.push(i);
        }
      }
    }
    return points;
  };

  var Steps = {
    functional: true,
    render: function render(h, context) {
      var _context$props = context.props,
          prefixCls = _context$props.prefixCls,
          vertical = _context$props.vertical,
          reverse = _context$props.reverse,
          marks = _context$props.marks,
          dots = _context$props.dots,
          step = _context$props.step,
          included = _context$props.included,
          lowerBound = _context$props.lowerBound,
          upperBound = _context$props.upperBound,
          max = _context$props.max,
          min = _context$props.min,
          dotStyle = _context$props.dotStyle,
          activeDotStyle = _context$props.activeDotStyle;

      var range = max - min;
      var elements = calcPoints(vertical, marks, dots, step, min, max).map(function (point) {
        var _classNames;

        var offset = Math.abs(point - min) / range * 100 + '%';

        var isActived = !included && point === upperBound || included && point <= upperBound && point >= lowerBound;
        var style = vertical ? _extends$1({}, dotStyle, _defineProperty({}, reverse ? 'top' : 'bottom', offset)) : _extends$1({}, dotStyle, _defineProperty({}, reverse ? 'right' : 'left', offset));
        if (isActived) {
          style = _extends$1({}, style, activeDotStyle);
        }

        var pointClassName = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-dot', true), _defineProperty(_classNames, prefixCls + '-dot-active', isActived), _defineProperty(_classNames, prefixCls + '-dot-reverse', reverse), _classNames));

        return h('span', { 'class': pointClassName, style: style, key: point });
      });

      return h(
        'div',
        { 'class': prefixCls + '-step' },
        [elements]
      );
    }
  };

  var Marks = {
    functional: true,
    render: function render(h, context) {
      var _context$props = context.props,
          className = _context$props.className,
          vertical = _context$props.vertical,
          reverse = _context$props.reverse,
          marks = _context$props.marks,
          included = _context$props.included,
          upperBound = _context$props.upperBound,
          lowerBound = _context$props.lowerBound,
          max = _context$props.max,
          min = _context$props.min;
      var clickLabel = context.listeners.clickLabel;

      var marksKeys = Object.keys(marks);

      var range = max - min;
      var elements = marksKeys.map(parseFloat).sort(function (a, b) {
        return a - b;
      }).map(function (point) {
        var _classNames;

        var markPoint = typeof marks[point] === 'function' ? marks[point](h) : marks[point];
        var markPointIsObject = (typeof markPoint === 'undefined' ? 'undefined' : _typeof(markPoint)) === 'object' && !isValidElement(markPoint);
        var markLabel = markPointIsObject ? markPoint.label : markPoint;
        if (!markLabel && markLabel !== 0) {
          return null;
        }

        var isActive = !included && point === upperBound || included && point <= upperBound && point >= lowerBound;
        var markClassName = classnames((_classNames = {}, _defineProperty(_classNames, className + '-text', true), _defineProperty(_classNames, className + '-text-active', isActive), _classNames));

        var bottomStyle = _defineProperty({
          marginBottom: '-50%'
        }, reverse ? 'top' : 'bottom', (point - min) / range * 100 + '%');

        var leftStyle = _defineProperty({
          transform: 'translateX(-50%)',
          msTransform: 'translateX(-50%)'
        }, reverse ? 'right' : 'left', reverse ? (point - min / 4) / range * 100 + '%' : (point - min) / range * 100 + '%');

        var style = vertical ? bottomStyle : leftStyle;
        var markStyle = markPointIsObject ? _extends$1({}, style, markPoint.style) : style;
        return h(
          'span',
          {
            'class': markClassName,
            style: markStyle,
            key: point,
            on: {
              'mousedown': function mousedown(e) {
                return clickLabel(e, point);
              },
              'touchstart': function touchstart(e) {
                return clickLabel(e, point);
              }
            }
          },
          [markLabel]
        );
      });

      return h(
        'div',
        { 'class': className },
        [elements]
      );
    }
  };

  var VcHandle = {
    name: 'Handle',
    mixins: [BaseMixin],
    props: {
      prefixCls: VuePropTypes.string,
      vertical: VuePropTypes.bool,
      offset: VuePropTypes.number,
      disabled: VuePropTypes.bool,
      min: VuePropTypes.number,
      max: VuePropTypes.number,
      value: VuePropTypes.number,
      tabIndex: VuePropTypes.number,
      className: VuePropTypes.string,
      reverse: VuePropTypes.bool
      // handleFocus: PropTypes.func.def(noop),
      // handleBlur: PropTypes.func.def(noop),
    },
    data: function data() {
      return {
        clickFocused: false
      };
    },
    mounted: function mounted() {
      // mouseup won't trigger if mouse moved out of handle
      // so we listen on document here.
      this.onMouseUpListener = addEventListenerWrap(document, 'mouseup', this.handleMouseUp);
    },
    beforeDestroy: function beforeDestroy() {
      if (this.onMouseUpListener) {
        this.onMouseUpListener.remove();
      }
    },

    methods: {
      setClickFocus: function setClickFocus(focused) {
        this.setState({ clickFocused: focused });
      },
      handleMouseUp: function handleMouseUp() {
        if (document.activeElement === this.$refs.handle) {
          this.setClickFocus(true);
        }
      },
      handleBlur: function handleBlur(e) {
        this.setClickFocus(false);
        this.__emit('blur', e);
      },
      handleKeyDown: function handleKeyDown() {
        this.setClickFocus(false);
      },
      clickFocus: function clickFocus() {
        this.setClickFocus(true);
        this.focus();
      },
      focus: function focus() {
        this.$refs.handle.focus();
      },
      blur: function blur() {
        this.$refs.handle.blur();
      },

      // when click can not focus in vue, use mousedown trigger focus
      handleMousedown: function handleMousedown(e) {
        this.focus();
        this.__emit('mousedown', e);
      }
    },
    render: function render() {
      var _ref, _ref2;

      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          prefixCls = _getOptionProps.prefixCls,
          vertical = _getOptionProps.vertical,
          reverse = _getOptionProps.reverse,
          offset = _getOptionProps.offset,
          disabled = _getOptionProps.disabled,
          min = _getOptionProps.min,
          max = _getOptionProps.max,
          value = _getOptionProps.value,
          tabIndex = _getOptionProps.tabIndex;

      var className = classnames(this.$props.className, _defineProperty({}, prefixCls + '-handle-click-focused', this.clickFocused));

      var positionStyle = vertical ? (_ref = {}, _defineProperty(_ref, reverse ? 'top' : 'bottom', offset + '%'), _defineProperty(_ref, reverse ? 'bottom' : 'top', 'auto'), _defineProperty(_ref, 'transform', 'translateY(+50%)'), _ref) : (_ref2 = {}, _defineProperty(_ref2, reverse ? 'right' : 'left', offset + '%'), _defineProperty(_ref2, reverse ? 'left' : 'right', 'auto'), _defineProperty(_ref2, 'transform', 'translateX(' + (reverse ? '+' : '-') + '50%)'), _ref2);

      var ariaProps = {
        'aria-valuemin': min,
        'aria-valuemax': max,
        'aria-valuenow': value,
        'aria-disabled': !!disabled
      };
      var _tabIndex = tabIndex || 0;
      if (disabled || tabIndex === null) {
        _tabIndex = null;
      }

      var handleProps = {
        attrs: _extends$1({
          role: 'slider',
          tabIndex: _tabIndex
        }, ariaProps),
        'class': className,
        on: _extends$1({}, getListeners(this), {
          blur: this.handleBlur,
          keydown: this.handleKeyDown,
          mousedown: this.handleMousedown
        }),
        ref: 'handle',
        style: positionStyle
      };
      return h('div', handleProps);
    }
  };

  function isEventFromHandle(e, handles) {
    try {
      return Object.keys(handles).some(function (key) {
        return e.target === handles[key].$el || e.target === handles[key];
      });
    } catch (error) {
      return false;
    }
  }

  function isValueOutOfRange(value, _ref) {
    var min = _ref.min,
        max = _ref.max;

    return value < min || value > max;
  }

  function isNotTouchEvent(e) {
    return e.touches.length > 1 || e.type.toLowerCase() === 'touchend' && e.touches.length > 0;
  }

  function getClosestPoint(val, _ref2) {
    var marks = _ref2.marks,
        step = _ref2.step,
        min = _ref2.min,
        max = _ref2.max;

    var points = Object.keys(marks).map(parseFloat);
    if (step !== null) {
      var maxSteps = Math.floor((max - min) / step);
      var steps = Math.min((val - min) / step, maxSteps);
      var closestStep = Math.round(steps) * step + min;
      points.push(closestStep);
    }
    var diffs = points.map(function (point) {
      return Math.abs(val - point);
    });
    return points[diffs.indexOf(Math.min.apply(Math, _toConsumableArray(diffs)))];
  }

  function getPrecision(step) {
    var stepString = step.toString();
    var precision = 0;
    if (stepString.indexOf('.') >= 0) {
      precision = stepString.length - stepString.indexOf('.') - 1;
    }
    return precision;
  }

  function getMousePosition(vertical, e) {
    var zoom = 1;
    if (window.visualViewport) {
      zoom = +(window.visualViewport.width / document.body.getBoundingClientRect().width).toFixed(2);
    }
    return (vertical ? e.clientY : e.pageX) / zoom;
  }

  function getTouchPosition(vertical, e) {
    var zoom = 1;
    if (window.visualViewport) {
      zoom = +(window.visualViewport.width / document.body.getBoundingClientRect().width).toFixed(2);
    }
    return (vertical ? e.touches[0].clientY : e.touches[0].pageX) / zoom;
  }

  function getHandleCenterPosition(vertical, handle) {
    var coords = handle.getBoundingClientRect();
    return vertical ? coords.top + coords.height * 0.5 : window.pageXOffset + coords.left + coords.width * 0.5;
  }

  function ensureValueInRange(val, _ref3) {
    var max = _ref3.max,
        min = _ref3.min;

    if (val <= min) {
      return min;
    }
    if (val >= max) {
      return max;
    }
    return val;
  }

  function ensureValuePrecision(val, props) {
    var step = props.step;

    var closestPoint = isFinite(getClosestPoint(val, props)) ? getClosestPoint(val, props) : 0; // eslint-disable-line
    return step === null ? closestPoint : parseFloat(closestPoint.toFixed(getPrecision(step)));
  }

  function pauseEvent(e) {
    e.stopPropagation();
    e.preventDefault();
  }

  function calculateNextValue(func, value, props) {
    var operations = {
      increase: function increase(a, b) {
        return a + b;
      },
      decrease: function decrease(a, b) {
        return a - b;
      }
    };

    var indexToGet = operations[func](Object.keys(props.marks).indexOf(JSON.stringify(value)), 1);
    var keyToGet = Object.keys(props.marks)[indexToGet];

    if (props.step) {
      return operations[func](value, props.step);
    } else if (!!Object.keys(props.marks).length && !!props.marks[keyToGet]) {
      return props.marks[keyToGet];
    }
    return value;
  }

  function getKeyboardValueMutator(e, vertical, reverse) {
    var increase = 'increase';
    var decrease = 'decrease';
    var method = increase;
    switch (e.keyCode) {
      case KeyCode.UP:
        method = vertical && reverse ? decrease : increase;
        break;
      case KeyCode.RIGHT:
        method = !vertical && reverse ? decrease : increase;
        break;
      case KeyCode.DOWN:
        method = vertical && reverse ? increase : decrease;
        break;
      case KeyCode.LEFT:
        method = !vertical && reverse ? increase : decrease;
        break;

      case KeyCode.END:
        return function (value, props) {
          return props.max;
        };
      case KeyCode.HOME:
        return function (value, props) {
          return props.min;
        };
      case KeyCode.PAGE_UP:
        return function (value, props) {
          return value + props.step * 2;
        };
      case KeyCode.PAGE_DOWN:
        return function (value, props) {
          return value - props.step * 2;
        };

      default:
        return undefined;
    }
    return function (value, props) {
      return calculateNextValue(method, value, props);
    };
  }

  function noop$N() {}

  function createSlider(Component) {
    // const displayName = `ComponentEnhancer(${Component.displayName})`
    var propTypes = {
      min: VuePropTypes.number,
      max: VuePropTypes.number,
      step: VuePropTypes.number,
      marks: VuePropTypes.object,
      included: VuePropTypes.bool,
      prefixCls: VuePropTypes.string,
      disabled: VuePropTypes.bool,
      handle: VuePropTypes.func,
      dots: VuePropTypes.bool,
      vertical: VuePropTypes.bool,
      reverse: VuePropTypes.bool,
      minimumTrackStyle: VuePropTypes.object, // just for compatibility, will be deperecate
      maximumTrackStyle: VuePropTypes.object, // just for compatibility, will be deperecate
      handleStyle: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.arrayOf(VuePropTypes.object)]),
      trackStyle: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.arrayOf(VuePropTypes.object)]),
      railStyle: VuePropTypes.object,
      dotStyle: VuePropTypes.object,
      activeDotStyle: VuePropTypes.object,
      autoFocus: VuePropTypes.bool
    };
    return {
      name: 'createSlider',
      mixins: [Component],
      model: {
        prop: 'value',
        event: 'change'
      },
      props: initDefaultProps(propTypes, {
        prefixCls: 'rc-slider',
        min: 0,
        max: 100,
        step: 1,
        marks: {},
        included: true,
        disabled: false,
        dots: false,
        vertical: false,
        reverse: false,
        trackStyle: [{}],
        handleStyle: [{}],
        railStyle: {},
        dotStyle: {},
        activeDotStyle: {}
      }),
      data: function data() {
        var step = this.step,
            max = this.max,
            min = this.min;

        var isPointDiffEven = isFinite(max - min) ? (max - min) % step === 0 : true; // eslint-disable-line
        warning$1(step && Math.floor(step) === step ? isPointDiffEven : true, 'Slider', 'Slider[max] - Slider[min] (%s) should be a multiple of Slider[step] (%s)', max - min, step);
        this.handlesRefs = {};
        return {};
      },
      mounted: function mounted() {
        var _this = this;

        this.$nextTick(function () {
          // Snapshot testing cannot handle refs, so be sure to null-check this.
          _this.document = _this.$refs.sliderRef && _this.$refs.sliderRef.ownerDocument;
          // this.setHandleRefs()
          var autoFocus = _this.autoFocus,
              disabled = _this.disabled;

          if (autoFocus && !disabled) {
            _this.focus();
          }
        });
      },
      beforeDestroy: function beforeDestroy() {
        var _this2 = this;

        this.$nextTick(function () {
          // if (super.componentWillUnmount) super.componentWillUnmount()
          _this2.removeDocumentEvents();
        });
      },

      methods: {
        defaultHandle: function defaultHandle(_ref) {
          var index = _ref.index,
              directives = _ref.directives,
              className = _ref.className,
              style = _ref.style,
              on = _ref.on,
              restProps = _objectWithoutProperties(_ref, ['index', 'directives', 'className', 'style', 'on']);

          var h = this.$createElement;

          delete restProps.dragging;
          if (restProps.value === null) {
            return null;
          }
          var handleProps = {
            props: _extends$1({}, restProps),
            'class': className,
            style: style,
            key: index,
            directives: directives,
            on: on
          };
          return h(VcHandle, handleProps);
        },
        onMouseDown: function onMouseDown(e) {
          if (e.button !== 0) {
            return;
          }
          var isVertical = this.vertical;
          var position = getMousePosition(isVertical, e);
          if (!isEventFromHandle(e, this.handlesRefs)) {
            this.dragOffset = 0;
          } else {
            var handlePosition = getHandleCenterPosition(isVertical, e.target);
            this.dragOffset = position - handlePosition;
            position = handlePosition;
          }
          this.removeDocumentEvents();
          this.onStart(position);
          this.addDocumentMouseEvents();
          pauseEvent(e);
        },
        onTouchStart: function onTouchStart(e) {
          if (isNotTouchEvent(e)) return;

          var isVertical = this.vertical;
          var position = getTouchPosition(isVertical, e);
          if (!isEventFromHandle(e, this.handlesRefs)) {
            this.dragOffset = 0;
          } else {
            var handlePosition = getHandleCenterPosition(isVertical, e.target);
            this.dragOffset = position - handlePosition;
            position = handlePosition;
          }
          this.onStart(position);
          this.addDocumentTouchEvents();
          pauseEvent(e);
        },
        onFocus: function onFocus(e) {
          var vertical = this.vertical;

          if (isEventFromHandle(e, this.handlesRefs)) {
            var handlePosition = getHandleCenterPosition(vertical, e.target);
            this.dragOffset = 0;
            this.onStart(handlePosition);
            pauseEvent(e);
            this.$emit('focus', e);
          }
        },
        onBlur: function onBlur(e) {
          this.onEnd();
          this.$emit('blur', e);
        },
        onMouseUp: function onMouseUp() {
          if (this.handlesRefs[this.prevMovedHandleIndex]) {
            this.handlesRefs[this.prevMovedHandleIndex].clickFocus();
          }
        },
        onMouseMove: function onMouseMove(e) {
          if (!this.$refs.sliderRef) {
            this.onEnd();
            return;
          }
          var position = getMousePosition(this.vertical, e);
          this.onMove(e, position - this.dragOffset);
        },
        onTouchMove: function onTouchMove(e) {
          if (isNotTouchEvent(e) || !this.$refs.sliderRef) {
            this.onEnd();
            return;
          }

          var position = getTouchPosition(this.vertical, e);
          this.onMove(e, position - this.dragOffset);
        },
        onKeyDown: function onKeyDown(e) {
          if (this.$refs.sliderRef && isEventFromHandle(e, this.handlesRefs)) {
            this.onKeyboard(e);
          }
        },
        onClickMarkLabel: function onClickMarkLabel(e, value) {
          var _this3 = this;

          e.stopPropagation();
          this.onChange({ sValue: value });
          this.setState({ sValue: value }, function () {
            return _this3.onEnd(true);
          });
        },
        getSliderStart: function getSliderStart() {
          var slider = this.$refs.sliderRef;
          var vertical = this.vertical,
              reverse = this.reverse;

          var rect = slider.getBoundingClientRect();
          if (vertical) {
            return reverse ? rect.bottom : rect.top;
          }
          return window.pageXOffset + (reverse ? rect.right : rect.left);
        },
        getSliderLength: function getSliderLength() {
          var slider = this.$refs.sliderRef;
          if (!slider) {
            return 0;
          }

          var coords = slider.getBoundingClientRect();
          return this.vertical ? coords.height : coords.width;
        },
        addDocumentTouchEvents: function addDocumentTouchEvents() {
          // just work for Chrome iOS Safari and Android Browser
          this.onTouchMoveListener = addEventListenerWrap(this.document, 'touchmove', this.onTouchMove);
          this.onTouchUpListener = addEventListenerWrap(this.document, 'touchend', this.onEnd);
        },
        addDocumentMouseEvents: function addDocumentMouseEvents() {
          this.onMouseMoveListener = addEventListenerWrap(this.document, 'mousemove', this.onMouseMove);
          this.onMouseUpListener = addEventListenerWrap(this.document, 'mouseup', this.onEnd);
        },
        removeDocumentEvents: function removeDocumentEvents() {
          /* eslint-disable no-unused-expressions */
          this.onTouchMoveListener && this.onTouchMoveListener.remove();
          this.onTouchUpListener && this.onTouchUpListener.remove();

          this.onMouseMoveListener && this.onMouseMoveListener.remove();
          this.onMouseUpListener && this.onMouseUpListener.remove();
          /* eslint-enable no-unused-expressions */
        },
        focus: function focus() {
          if (!this.disabled) {
            this.handlesRefs[0].focus();
          }
        },
        blur: function blur() {
          var _this4 = this;

          if (!this.disabled) {
            Object.keys(this.handlesRefs).forEach(function (key) {
              if (_this4.handlesRefs[key] && _this4.handlesRefs[key].blur) {
                _this4.handlesRefs[key].blur();
              }
            });
          }
        },
        calcValue: function calcValue(offset) {
          var vertical = this.vertical,
              min = this.min,
              max = this.max;

          var ratio = Math.abs(Math.max(offset, 0) / this.getSliderLength());
          var value = vertical ? (1 - ratio) * (max - min) + min : ratio * (max - min) + min;
          return value;
        },
        calcValueByPos: function calcValueByPos(position) {
          var sign = this.reverse ? -1 : +1;
          var pixelOffset = sign * (position - this.getSliderStart());
          var nextValue = this.trimAlignValue(this.calcValue(pixelOffset));
          return nextValue;
        },
        calcOffset: function calcOffset(value) {
          var min = this.min,
              max = this.max;

          var ratio = (value - min) / (max - min);
          return ratio * 100;
        },
        saveHandle: function saveHandle(index, handle) {
          this.handlesRefs[index] = handle;
        }
      },
      render: function render(h) {
        var _classNames;

        var prefixCls = this.prefixCls,
            marks = this.marks,
            dots = this.dots,
            step = this.step,
            included = this.included,
            disabled = this.disabled,
            vertical = this.vertical,
            reverse = this.reverse,
            min = this.min,
            max = this.max,
            maximumTrackStyle = this.maximumTrackStyle,
            railStyle = this.railStyle,
            dotStyle = this.dotStyle,
            activeDotStyle = this.activeDotStyle;

        var _renderSlider = this.renderSlider(h),
            tracks = _renderSlider.tracks,
            handles = _renderSlider.handles;

        var sliderClassName = classnames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-with-marks', Object.keys(marks).length), _defineProperty(_classNames, prefixCls + '-disabled', disabled), _defineProperty(_classNames, prefixCls + '-vertical', vertical), _classNames));
        var markProps = {
          props: {
            vertical: vertical,
            marks: marks,
            included: included,
            lowerBound: this.getLowerBound(),
            upperBound: this.getUpperBound(),
            max: max,
            min: min,
            reverse: reverse,
            className: prefixCls + '-mark'
          },
          on: {
            clickLabel: disabled ? noop$N : this.onClickMarkLabel
          }
        };
        return h(
          'div',
          {
            ref: 'sliderRef',
            attrs: { tabIndex: '-1'
            },
            'class': sliderClassName,
            on: {
              'touchstart': disabled ? noop$N : this.onTouchStart,
              'mousedown': disabled ? noop$N : this.onMouseDown,
              'mouseup': disabled ? noop$N : this.onMouseUp,
              'keydown': disabled ? noop$N : this.onKeyDown,
              'focus': disabled ? noop$N : this.onFocus,
              'blur': disabled ? noop$N : this.onBlur
            }
          },
          [h('div', {
            'class': prefixCls + '-rail',
            style: _extends$1({}, maximumTrackStyle, railStyle)
          }), tracks, h(Steps, {
            attrs: {
              prefixCls: prefixCls,
              vertical: vertical,
              reverse: reverse,
              marks: marks,
              dots: dots,
              step: step,
              included: included,
              lowerBound: this.getLowerBound(),
              upperBound: this.getUpperBound(),
              max: max,
              min: min,
              dotStyle: dotStyle,
              activeDotStyle: activeDotStyle
            }
          }), handles, h(Marks, markProps), this.$slots['default']]
        );
      }
    };
  }

  var Slider = {
    name: 'Slider',
    mixins: [BaseMixin],
    props: {
      defaultValue: VuePropTypes.number,
      value: VuePropTypes.number,
      disabled: VuePropTypes.bool,
      autoFocus: VuePropTypes.bool,
      tabIndex: VuePropTypes.number,
      reverse: VuePropTypes.bool,
      min: VuePropTypes.number,
      max: VuePropTypes.number
    },
    data: function data() {
      var defaultValue = this.defaultValue !== undefined ? this.defaultValue : this.min;
      var value = this.value !== undefined ? this.value : defaultValue;

      warning$1(!hasProp(this, 'minimumTrackStyle'), 'Slider', 'minimumTrackStyle will be deprecate, please use trackStyle instead.');
      warning$1(!hasProp(this, 'maximumTrackStyle'), 'Slider', 'maximumTrackStyle will be deprecate, please use railStyle instead.');
      return {
        sValue: this.trimAlignValue(value),
        dragging: false
      };
    },

    watch: {
      value: {
        handler: function handler(val) {
          this.setChangeValue(val);
        },

        deep: true
      },
      min: function min() {
        var sValue = this.sValue;

        this.setChangeValue(sValue);
      },
      max: function max() {
        var sValue = this.sValue;

        this.setChangeValue(sValue);
      }
    },
    methods: {
      setChangeValue: function setChangeValue(value) {
        var newValue = value !== undefined ? value : this.sValue;
        var nextValue = this.trimAlignValue(newValue, this.$props);
        if (nextValue === this.sValue) return;

        this.setState({ sValue: nextValue });
        if (isValueOutOfRange(newValue, this.$props)) {
          this.$emit('change', nextValue);
        }
      },
      onChange: function onChange(state) {
        var isNotControlled = !hasProp(this, 'value');
        var nextState = state.sValue > this.max ? _extends$1({}, state, { sValue: this.max }) : state;
        if (isNotControlled) {
          this.setState(nextState);
        }

        var changedValue = nextState.sValue;
        this.$emit('change', changedValue);
      },
      onStart: function onStart(position) {
        this.setState({ dragging: true });
        var sValue = this.sValue;

        this.$emit('beforeChange', sValue);

        var value = this.calcValueByPos(position);

        this.startValue = value;
        this.startPosition = position;
        if (value === sValue) return;

        this.prevMovedHandleIndex = 0;
        this.onChange({ sValue: value });
      },
      onEnd: function onEnd(force) {
        var dragging = this.dragging;

        this.removeDocumentEvents();
        if (dragging || force) {
          this.$emit('afterChange', this.sValue);
        }
        this.setState({ dragging: false });
      },
      onMove: function onMove(e, position) {
        pauseEvent(e);
        var sValue = this.sValue;

        var value = this.calcValueByPos(position);
        if (value === sValue) return;

        this.onChange({ sValue: value });
      },
      onKeyboard: function onKeyboard(e) {
        var _$props = this.$props,
            reverse = _$props.reverse,
            vertical = _$props.vertical;

        var valueMutator = getKeyboardValueMutator(e, vertical, reverse);
        if (valueMutator) {
          pauseEvent(e);
          var sValue = this.sValue;

          var mutatedValue = valueMutator(sValue, this.$props);
          var value = this.trimAlignValue(mutatedValue);
          if (value === sValue) return;

          this.onChange({ sValue: value });
          this.$emit('afterChange', value);
          this.onEnd();
        }
      },
      getLowerBound: function getLowerBound() {
        return this.min;
      },
      getUpperBound: function getUpperBound() {
        return this.sValue;
      },
      trimAlignValue: function trimAlignValue(v) {
        var nextProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (v === null) {
          return null;
        }
        var mergedProps = _extends$1({}, this.$props, nextProps);
        var val = ensureValueInRange(v, mergedProps);
        return ensureValuePrecision(val, mergedProps);
      },
      getTrack: function getTrack(_ref) {
        var prefixCls = _ref.prefixCls,
            reverse = _ref.reverse,
            vertical = _ref.vertical,
            included = _ref.included,
            offset = _ref.offset,
            minimumTrackStyle = _ref.minimumTrackStyle,
            _trackStyle = _ref._trackStyle;
        var h = this.$createElement;

        return h(Track, {
          'class': prefixCls + '-track',
          attrs: { vertical: vertical,
            included: included,
            offset: 0,
            reverse: reverse,
            length: offset
          },
          style: _extends$1({}, minimumTrackStyle, _trackStyle)
        });
      },
      renderSlider: function renderSlider() {
        var _this = this;

        var prefixCls = this.prefixCls,
            vertical = this.vertical,
            included = this.included,
            disabled = this.disabled,
            minimumTrackStyle = this.minimumTrackStyle,
            trackStyle = this.trackStyle,
            handleStyle = this.handleStyle,
            tabIndex = this.tabIndex,
            min = this.min,
            max = this.max,
            reverse = this.reverse,
            handle = this.handle,
            defaultHandle = this.defaultHandle;

        var handleGenerator = handle || defaultHandle;
        var sValue = this.sValue,
            dragging = this.dragging;

        var offset = this.calcOffset(sValue);
        var handles = handleGenerator({
          className: prefixCls + '-handle',
          prefixCls: prefixCls,
          vertical: vertical,
          offset: offset,
          value: sValue,
          dragging: dragging,
          disabled: disabled,
          min: min,
          max: max,
          reverse: reverse,
          index: 0,
          tabIndex: tabIndex,
          style: handleStyle[0] || handleStyle,
          directives: [{
            name: 'ant-ref',
            value: function value(h) {
              return _this.saveHandle(0, h);
            }
          }],
          on: {
            focus: this.onFocus,
            blur: this.onBlur
          }
        });

        var _trackStyle = trackStyle[0] || trackStyle;
        return {
          tracks: this.getTrack({
            prefixCls: prefixCls,
            reverse: reverse,
            vertical: vertical,
            included: included,
            offset: offset,
            minimumTrackStyle: minimumTrackStyle,
            _trackStyle: _trackStyle
          }),
          handles: handles
        };
      }
    }
  };

  var VcSlider = createSlider(Slider);

  var _trimAlignValue = function _trimAlignValue(_ref) {
    var value = _ref.value,
        handle = _ref.handle,
        bounds = _ref.bounds,
        props = _ref.props;
    var allowCross = props.allowCross,
        pushable = props.pushable;

    var thershold = Number(pushable);
    var valInRange = ensureValueInRange(value, props);
    var valNotConflict = valInRange;
    if (!allowCross && handle != null && bounds !== undefined) {
      if (handle > 0 && valInRange <= bounds[handle - 1] + thershold) {
        valNotConflict = bounds[handle - 1] + thershold;
      }
      if (handle < bounds.length - 1 && valInRange >= bounds[handle + 1] - thershold) {
        valNotConflict = bounds[handle + 1] - thershold;
      }
    }
    return ensureValuePrecision(valNotConflict, props);
  };

  var rangeProps = {
    defaultValue: VuePropTypes.arrayOf(VuePropTypes.number),
    value: VuePropTypes.arrayOf(VuePropTypes.number),
    count: VuePropTypes.number,
    pushable: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.number]),
    allowCross: VuePropTypes.bool,
    disabled: VuePropTypes.bool,
    reverse: VuePropTypes.bool,
    tabIndex: VuePropTypes.arrayOf(VuePropTypes.number),
    prefixCls: VuePropTypes.string,
    min: VuePropTypes.number,
    max: VuePropTypes.number,
    autoFocus: VuePropTypes.bool
  };
  var Range = {
    name: 'Range',
    displayName: 'Range',
    mixins: [BaseMixin],
    props: initDefaultProps(rangeProps, {
      count: 1,
      allowCross: true,
      pushable: false,
      tabIndex: []
    }),
    data: function data() {
      var _this = this;

      var count = this.count,
          min = this.min,
          max = this.max;

      var initialValue = Array.apply(undefined, _toConsumableArray(Array(count + 1))).map(function () {
        return min;
      });
      var defaultValue = hasProp(this, 'defaultValue') ? this.defaultValue : initialValue;
      var value = this.value;

      if (value === undefined) {
        value = defaultValue;
      }
      var bounds = value.map(function (v, i) {
        return _trimAlignValue({
          value: v,
          handle: i,
          props: _this.$props
        });
      });
      var recent = bounds[0] === max ? 0 : bounds.length - 1;
      return {
        sHandle: null,
        recent: recent,
        bounds: bounds
      };
    },

    watch: {
      value: {
        handler: function handler(val) {
          var bounds = this.bounds;

          this.setChangeValue(val || bounds);
        },

        deep: true
      },
      min: function min() {
        var value = this.value;

        this.setChangeValue(value || this.bounds);
      },
      max: function max() {
        var value = this.value;

        this.setChangeValue(value || this.bounds);
      }
    },
    methods: {
      setChangeValue: function setChangeValue(value) {
        var _this2 = this;

        var bounds = this.bounds;

        var nextBounds = value.map(function (v, i) {
          return _trimAlignValue({
            value: v,
            handle: i,
            bounds: bounds,
            props: _this2.$props
          });
        });
        if (nextBounds.length === bounds.length && nextBounds.every(function (v, i) {
          return v === bounds[i];
        })) return;

        this.setState({ bounds: nextBounds });

        if (value.some(function (v) {
          return isValueOutOfRange(v, _this2.$props);
        })) {
          var newValues = value.map(function (v) {
            return ensureValueInRange(v, _this2.$props);
          });
          this.$emit('change', newValues);
        }
      },
      onChange: function onChange(state) {
        var isNotControlled = !hasProp(this, 'value');
        if (isNotControlled) {
          this.setState(state);
        } else {
          var controlledState = {};

          ['sHandle', 'recent'].forEach(function (item) {
            if (state[item] !== undefined) {
              controlledState[item] = state[item];
            }
          });

          if (Object.keys(controlledState).length) {
            this.setState(controlledState);
          }
        }

        var data = _extends$1({}, this.$data, state);
        var changedValue = data.bounds;
        this.$emit('change', changedValue);
      },
      onStart: function onStart(position) {
        var bounds = this.bounds;

        this.$emit('beforeChange', bounds);

        var value = this.calcValueByPos(position);
        this.startValue = value;
        this.startPosition = position;

        var closestBound = this.getClosestBound(value);
        this.prevMovedHandleIndex = this.getBoundNeedMoving(value, closestBound);

        this.setState({
          sHandle: this.prevMovedHandleIndex,
          recent: this.prevMovedHandleIndex
        });

        var prevValue = bounds[this.prevMovedHandleIndex];
        if (value === prevValue) return;
        var nextBounds = [].concat(_toConsumableArray(bounds));
        nextBounds[this.prevMovedHandleIndex] = value;
        this.onChange({ bounds: nextBounds });
      },
      onEnd: function onEnd(force) {
        var sHandle = this.sHandle;

        this.removeDocumentEvents();
        if (sHandle !== null || force) {
          this.$emit('afterChange', this.bounds);
        }
        this.setState({ sHandle: null });
      },
      onMove: function onMove(e, position) {
        pauseEvent(e);
        var bounds = this.bounds,
            sHandle = this.sHandle;

        var value = this.calcValueByPos(position);
        var oldValue = bounds[sHandle];
        if (value === oldValue) return;

        this.moveTo(value);
      },
      onKeyboard: function onKeyboard(e) {
        var _$props = this.$props,
            reverse = _$props.reverse,
            vertical = _$props.vertical;

        var valueMutator = getKeyboardValueMutator(e, vertical, reverse);

        if (valueMutator) {
          pauseEvent(e);
          var bounds = this.bounds,
              sHandle = this.sHandle;

          var oldValue = bounds[sHandle === null ? this.recent : sHandle];
          var mutatedValue = valueMutator(oldValue, this.$props);
          var value = _trimAlignValue({
            value: mutatedValue,
            handle: sHandle,
            bounds: bounds,
            props: this.$props
          });
          if (value === oldValue) return;
          var isFromKeyboardEvent = true;
          this.moveTo(value, isFromKeyboardEvent);
        }
      },
      getClosestBound: function getClosestBound(value) {
        var bounds = this.bounds;

        var closestBound = 0;
        for (var i = 1; i < bounds.length - 1; ++i) {
          if (value > bounds[i]) {
            closestBound = i;
          }
        }
        if (Math.abs(bounds[closestBound + 1] - value) < Math.abs(bounds[closestBound] - value)) {
          closestBound += 1;
        }
        return closestBound;
      },
      getBoundNeedMoving: function getBoundNeedMoving(value, closestBound) {
        var bounds = this.bounds,
            recent = this.recent;

        var boundNeedMoving = closestBound;
        var isAtTheSamePoint = bounds[closestBound + 1] === bounds[closestBound];

        if (isAtTheSamePoint && bounds[recent] === bounds[closestBound]) {
          boundNeedMoving = recent;
        }

        if (isAtTheSamePoint && value !== bounds[closestBound + 1]) {
          boundNeedMoving = value < bounds[closestBound + 1] ? closestBound : closestBound + 1;
        }
        return boundNeedMoving;
      },
      getLowerBound: function getLowerBound() {
        return this.bounds[0];
      },
      getUpperBound: function getUpperBound() {
        var bounds = this.bounds;

        return bounds[bounds.length - 1];
      },

      /**
       * Returns an array of possible slider points, taking into account both
       * `marks` and `step`. The result is cached.
       */
      getPoints: function getPoints() {
        var marks = this.marks,
            step = this.step,
            min = this.min,
            max = this.max;

        var cache = this._getPointsCache;
        if (!cache || cache.marks !== marks || cache.step !== step) {
          var pointsObject = _extends$1({}, marks);
          if (step !== null) {
            for (var point = min; point <= max; point += step) {
              pointsObject[point] = point;
            }
          }
          var points = Object.keys(pointsObject).map(parseFloat);
          points.sort(function (a, b) {
            return a - b;
          });
          this._getPointsCache = { marks: marks, step: step, points: points };
        }
        return this._getPointsCache.points;
      },
      moveTo: function moveTo(value, isFromKeyboardEvent) {
        var _this3 = this;

        var nextBounds = [].concat(_toConsumableArray(this.bounds));
        var sHandle = this.sHandle,
            recent = this.recent;

        var handle = sHandle === null ? recent : sHandle;
        nextBounds[handle] = value;
        var nextHandle = handle;
        if (this.$props.pushable !== false) {
          this.pushSurroundingHandles(nextBounds, nextHandle);
        } else if (this.$props.allowCross) {
          nextBounds.sort(function (a, b) {
            return a - b;
          });
          nextHandle = nextBounds.indexOf(value);
        }
        this.onChange({
          recent: nextHandle,
          sHandle: nextHandle,
          bounds: nextBounds
        });
        if (isFromKeyboardEvent) {
          // known problem: because setState is async,
          // so trigger focus will invoke handler's onEnd and another handler's onStart too early,
          // cause onBeforeChange and onAfterChange receive wrong value.
          // here use setState callback to hack，but not elegant
          this.$emit('afterChange', nextBounds);
          this.setState({}, function () {
            _this3.handlesRefs[nextHandle].focus();
          });
          this.onEnd();
        }
      },
      pushSurroundingHandles: function pushSurroundingHandles(bounds, handle) {
        var value = bounds[handle];
        var threshold = this.pushable;

        threshold = Number(threshold);

        var direction = 0;
        if (bounds[handle + 1] - value < threshold) {
          direction = +1; // push to right
        }
        if (value - bounds[handle - 1] < threshold) {
          direction = -1; // push to left
        }

        if (direction === 0) {
          return;
        }

        var nextHandle = handle + direction;
        var diffToNext = direction * (bounds[nextHandle] - value);
        if (!this.pushHandle(bounds, nextHandle, direction, threshold - diffToNext)) {
          // revert to original value if pushing is impossible
          bounds[handle] = bounds[nextHandle] - direction * threshold;
        }
      },
      pushHandle: function pushHandle(bounds, handle, direction, amount) {
        var originalValue = bounds[handle];
        var currentValue = bounds[handle];
        while (direction * (currentValue - originalValue) < amount) {
          if (!this.pushHandleOnePoint(bounds, handle, direction)) {
            // can't push handle enough to create the needed `amount` gap, so we
            // revert its position to the original value
            bounds[handle] = originalValue;
            return false;
          }
          currentValue = bounds[handle];
        }
        // the handle was pushed enough to create the needed `amount` gap
        return true;
      },
      pushHandleOnePoint: function pushHandleOnePoint(bounds, handle, direction) {
        var points = this.getPoints();
        var pointIndex = points.indexOf(bounds[handle]);
        var nextPointIndex = pointIndex + direction;
        if (nextPointIndex >= points.length || nextPointIndex < 0) {
          // reached the minimum or maximum available point, can't push anymore
          return false;
        }
        var nextHandle = handle + direction;
        var nextValue = points[nextPointIndex];
        var threshold = this.pushable;

        var diffToNext = direction * (bounds[nextHandle] - nextValue);
        if (!this.pushHandle(bounds, nextHandle, direction, threshold - diffToNext)) {
          // couldn't push next handle, so we won't push this one either
          return false;
        }
        // push the handle
        bounds[handle] = nextValue;
        return true;
      },
      trimAlignValue: function trimAlignValue(value) {
        var sHandle = this.sHandle,
            bounds = this.bounds;

        return _trimAlignValue({
          value: value,
          handle: sHandle,
          bounds: bounds,
          props: this.$props
        });
      },
      ensureValueNotConflict: function ensureValueNotConflict(handle, val, _ref2) {
        var allowCross = _ref2.allowCross,
            thershold = _ref2.pushable;

        var state = this.$data || {};
        var bounds = state.bounds;

        handle = handle === undefined ? state.sHandle : handle;
        thershold = Number(thershold);
        /* eslint-disable eqeqeq */
        if (!allowCross && handle != null && bounds !== undefined) {
          if (handle > 0 && val <= bounds[handle - 1] + thershold) {
            return bounds[handle - 1] + thershold;
          }
          if (handle < bounds.length - 1 && val >= bounds[handle + 1] - thershold) {
            return bounds[handle + 1] - thershold;
          }
        }
        /* eslint-enable eqeqeq */
        return val;
      },
      getTrack: function getTrack(_ref3) {
        var bounds = _ref3.bounds,
            prefixCls = _ref3.prefixCls,
            reverse = _ref3.reverse,
            vertical = _ref3.vertical,
            included = _ref3.included,
            offsets = _ref3.offsets,
            trackStyle = _ref3.trackStyle;
        var h = this.$createElement;

        return bounds.slice(0, -1).map(function (_, index) {
          var _classNames;

          var i = index + 1;
          var trackClassName = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-track', true), _defineProperty(_classNames, prefixCls + '-track-' + i, true), _classNames));
          return h(Track, {
            'class': trackClassName,
            attrs: { vertical: vertical,
              reverse: reverse,
              included: included,
              offset: offsets[i - 1],
              length: offsets[i] - offsets[i - 1]
            },
            style: trackStyle[index],
            key: i
          });
        });
      },
      renderSlider: function renderSlider() {
        var _this4 = this;

        var sHandle = this.sHandle,
            bounds = this.bounds,
            prefixCls = this.prefixCls,
            vertical = this.vertical,
            included = this.included,
            disabled = this.disabled,
            min = this.min,
            max = this.max,
            reverse = this.reverse,
            handle = this.handle,
            defaultHandle = this.defaultHandle,
            trackStyle = this.trackStyle,
            handleStyle = this.handleStyle,
            tabIndex = this.tabIndex;

        var handleGenerator = handle || defaultHandle;
        var offsets = bounds.map(function (v) {
          return _this4.calcOffset(v);
        });

        var handleClassName = prefixCls + '-handle';
        var handles = bounds.map(function (v, i) {
          var _classNames2;

          var _tabIndex = tabIndex[i] || 0;
          if (disabled || tabIndex[i] === null) {
            _tabIndex = null;
          }
          return handleGenerator({
            className: classnames((_classNames2 = {}, _defineProperty(_classNames2, handleClassName, true), _defineProperty(_classNames2, handleClassName + '-' + (i + 1), true), _classNames2)),
            prefixCls: prefixCls,
            vertical: vertical,
            offset: offsets[i],
            value: v,
            dragging: sHandle === i,
            index: i,
            tabIndex: _tabIndex,
            min: min,
            max: max,
            reverse: reverse,
            disabled: disabled,
            style: handleStyle[i],
            directives: [{
              name: 'ant-ref',
              value: function value(h) {
                return _this4.saveHandle(i, h);
              }
            }],
            on: {
              focus: _this4.onFocus,
              blur: _this4.onBlur
            }
          });
        });

        return {
          tracks: this.getTrack({
            bounds: bounds,
            prefixCls: prefixCls,
            reverse: reverse,
            vertical: vertical,
            included: included,
            offsets: offsets,
            trackStyle: trackStyle
          }),
          handles: handles
        };
      }
    }
  };

  var VcRange = createSlider(Range);

  // export interface SliderMarks {
  //   [key]: React.ReactNode | {
  //     style: React.CSSProperties,
  //     label: React.ReactNode,
  //   };
  // }
  // const SliderMarks = PropTypes.shape({
  //   style: PropTypes.object,
  //   label: PropTypes.any,
  // }).loose
  var tooltipProps$1 = abstractTooltipProps();
  var SliderProps = function SliderProps() {
    return {
      prefixCls: VuePropTypes.string,
      tooltipPrefixCls: VuePropTypes.string,
      range: VuePropTypes.bool,
      reverse: VuePropTypes.bool,
      min: VuePropTypes.number,
      max: VuePropTypes.number,
      step: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.any]),
      marks: VuePropTypes.object,
      dots: VuePropTypes.bool,
      value: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.arrayOf(VuePropTypes.number)]),
      defaultValue: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.arrayOf(VuePropTypes.number)]),
      included: VuePropTypes.bool,
      disabled: VuePropTypes.bool,
      vertical: VuePropTypes.bool,
      tipFormatter: VuePropTypes.oneOfType([VuePropTypes.func, VuePropTypes.object]),
      tooltipVisible: VuePropTypes.bool,
      tooltipPlacement: tooltipProps$1.placement,
      getTooltipPopupContainer: VuePropTypes.func
    };
  };

  var Slider$1 = {
    name: 'ASlider',
    model: {
      prop: 'value',
      event: 'change'
    },
    mixins: [BaseMixin],
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    props: _extends$1({}, SliderProps(), {
      tipFormatter: VuePropTypes.oneOfType([VuePropTypes.func, VuePropTypes.object]).def(function (value) {
        return value.toString();
      })
    }),
    data: function data() {
      return {
        visibles: {}
      };
    },

    methods: {
      toggleTooltipVisible: function toggleTooltipVisible(index, visible) {
        this.setState(function (_ref) {
          var visibles = _ref.visibles;
          return {
            visibles: _extends$1({}, visibles, _defineProperty({}, index, visible))
          };
        });
      },
      handleWithTooltip: function handleWithTooltip(tooltipPrefixCls, prefixCls, _ref2) {
        var _this = this;

        var value = _ref2.value,
            dragging = _ref2.dragging,
            index = _ref2.index,
            directives = _ref2.directives,
            on = _ref2.on,
            restProps = _objectWithoutProperties(_ref2, ['value', 'dragging', 'index', 'directives', 'on']);

        var h = this.$createElement;
        var _$props = this.$props,
            tipFormatter = _$props.tipFormatter,
            tooltipVisible = _$props.tooltipVisible,
            tooltipPlacement = _$props.tooltipPlacement,
            getTooltipPopupContainer = _$props.getTooltipPopupContainer;
        var visibles = this.visibles;

        var isTipFormatter = tipFormatter ? visibles[index] || dragging : false;
        var visible = tooltipVisible || tooltipVisible === undefined && isTipFormatter;
        var tooltipProps = {
          props: {
            prefixCls: tooltipPrefixCls,
            title: tipFormatter ? tipFormatter(value) : '',
            visible: visible,
            placement: tooltipPlacement || 'top',
            transitionName: 'zoom-down',
            overlayClassName: prefixCls + '-tooltip',
            getPopupContainer: getTooltipPopupContainer || function () {
              return document.body;
            }
          },
          key: index
        };
        var handleProps = {
          props: _extends$1({
            value: value
          }, restProps),
          directives: directives,
          on: _extends$1({}, on, {
            mouseenter: function mouseenter() {
              return _this.toggleTooltipVisible(index, true);
            },
            mouseleave: function mouseleave() {
              return _this.toggleTooltipVisible(index, false);
            }
          })
        };
        return h(
          ToolTip,
          tooltipProps,
          [h(VcHandle, handleProps)]
        );
      },
      focus: function focus() {
        this.$refs.sliderRef.focus();
      },
      blur: function blur() {
        this.$refs.sliderRef.blur();
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          range = _getOptionProps.range,
          customizePrefixCls = _getOptionProps.prefixCls,
          customizeTooltipPrefixCls = _getOptionProps.tooltipPrefixCls,
          restProps = _objectWithoutProperties(_getOptionProps, ['range', 'prefixCls', 'tooltipPrefixCls']);

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('slider', customizePrefixCls);
      var tooltipPrefixCls = getPrefixCls('tooltip', customizeTooltipPrefixCls);
      var listeners = getListeners(this);
      if (range) {
        var vcRangeProps = {
          props: _extends$1({}, restProps, {
            prefixCls: prefixCls,
            tooltipPrefixCls: tooltipPrefixCls,
            handle: function handle(info) {
              return _this2.handleWithTooltip(tooltipPrefixCls, prefixCls, info);
            }
          }),
          ref: 'sliderRef',
          on: listeners
        };
        return h(VcRange, vcRangeProps);
      }
      var vcSliderProps = {
        props: _extends$1({}, restProps, {
          prefixCls: prefixCls,
          tooltipPrefixCls: tooltipPrefixCls,
          handle: function handle(info) {
            return _this2.handleWithTooltip(tooltipPrefixCls, prefixCls, info);
          }
        }),
        ref: 'sliderRef',
        on: listeners
      };
      return h(VcSlider, vcSliderProps);
    }
  };

  /* istanbul ignore next */
  Slider$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Slider$1.name, Slider$1);
  };

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$3 = 9007199254740991;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeFloor = Math.floor;

  /**
   * The base implementation of `_.repeat` which doesn't coerce arguments.
   *
   * @private
   * @param {string} string The string to repeat.
   * @param {number} n The number of times to repeat the string.
   * @returns {string} Returns the repeated string.
   */
  function baseRepeat(string, n) {
    var result = '';
    if (!string || n < 1 || n > MAX_SAFE_INTEGER$3) {
      return result;
    }
    // Leverage the exponentiation by squaring algorithm for a faster repeat.
    // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
    do {
      if (n % 2) {
        result += string;
      }
      n = nativeFloor(n / 2);
      if (n) {
        string += string;
      }
    } while (n);

    return result;
  }

  var _baseRepeat = baseRepeat;

  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */
  function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return (!start && end >= length) ? array : _baseSlice(array, start, end);
  }

  var _castSlice = castSlice;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsVarRange = '\\ufe0e\\ufe0f';

  /** Used to compose unicode capture groups. */
  var rsZWJ = '\\u200d';

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  var _hasUnicode = hasUnicode;

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = _baseProperty('length');

  var _asciiSize = asciiSize;

  /** Used to compose unicode character classes. */
  var rsAstralRange$1 = '\\ud800-\\udfff',
      rsComboMarksRange$1 = '\\u0300-\\u036f',
      reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
      rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
      rsVarRange$1 = '\\ufe0e\\ufe0f';

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange$1 + ']',
      rsCombo = '[' + rsComboRange$1 + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange$1 + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsZWJ$1 = '\\u200d';

  /** Used to compose unicode regexes. */
  var reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange$1 + ']?',
      rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  var _unicodeSize = unicodeSize;

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return _hasUnicode(string)
      ? _unicodeSize(string)
      : _asciiSize(string);
  }

  var _stringSize = stringSize;

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  var _asciiToArray = asciiToArray;

  /** Used to compose unicode character classes. */
  var rsAstralRange$2 = '\\ud800-\\udfff',
      rsComboMarksRange$2 = '\\u0300-\\u036f',
      reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
      rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2,
      rsVarRange$2 = '\\ufe0e\\ufe0f';

  /** Used to compose unicode capture groups. */
  var rsAstral$1 = '[' + rsAstralRange$2 + ']',
      rsCombo$1 = '[' + rsComboRange$2 + ']',
      rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
      rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')',
      rsNonAstral$1 = '[^' + rsAstralRange$2 + ']',
      rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsZWJ$2 = '\\u200d';

  /** Used to compose unicode regexes. */
  var reOptMod$1 = rsModifier$1 + '?',
      rsOptVar$1 = '[' + rsVarRange$2 + ']?',
      rsOptJoin$1 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
      rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
      rsSymbol$1 = '(?:' + [rsNonAstral$1 + rsCombo$1 + '?', rsCombo$1, rsRegional$1, rsSurrPair$1, rsAstral$1].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode$1 = RegExp(rsFitz$1 + '(?=' + rsFitz$1 + ')|' + rsSymbol$1 + rsSeq$1, 'g');

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode$1) || [];
  }

  var _unicodeToArray = unicodeToArray;

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return _hasUnicode(string)
      ? _unicodeToArray(string)
      : _asciiToArray(string);
  }

  var _stringToArray = stringToArray;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil = Math.ceil;

  /**
   * Creates the padding for `string` based on `length`. The `chars` string
   * is truncated if the number of characters exceeds `length`.
   *
   * @private
   * @param {number} length The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padding for `string`.
   */
  function createPadding(length, chars) {
    chars = chars === undefined ? ' ' : _baseToString(chars);

    var charsLength = chars.length;
    if (charsLength < 2) {
      return charsLength ? _baseRepeat(chars, length) : chars;
    }
    var result = _baseRepeat(chars, nativeCeil(length / _stringSize(chars)));
    return _hasUnicode(chars)
      ? _castSlice(_stringToArray(result), 0, length).join('')
      : result.slice(0, length);
  }

  var _createPadding = createPadding;

  /**
   * Pads `string` on the right side if it's shorter than `length`. Padding
   * characters are truncated if they exceed `length`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to pad.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padded string.
   * @example
   *
   * _.padEnd('abc', 6);
   * // => 'abc   '
   *
   * _.padEnd('abc', 6, '_-');
   * // => 'abc_-_'
   *
   * _.padEnd('abc', 3);
   * // => 'abc'
   */
  function padEnd(string, length, chars) {
    string = toString_1(string);
    length = toInteger_1(length);

    var strLength = length ? _stringSize(string) : 0;
    return (length && strLength < length)
      ? (string + _createPadding(length - strLength, chars))
      : string;
  }

  var padEnd_1 = padEnd;

  var StatisticNumber = {
    name: 'AStatisticNumber',
    functional: true,
    render: function render(h, context) {
      var _context$props = context.props,
          value = _context$props.value,
          formatter = _context$props.formatter,
          precision = _context$props.precision,
          decimalSeparator = _context$props.decimalSeparator,
          _context$props$groupS = _context$props.groupSeparator,
          groupSeparator = _context$props$groupS === undefined ? '' : _context$props$groupS,
          prefixCls = _context$props.prefixCls;

      var valueNode = void 0;

      if (typeof formatter === 'function') {
        // Customize formatter
        valueNode = formatter({ value: value, h: h });
      } else {
        // Internal formatter
        var val = String(value);
        var cells = val.match(/^(-?)(\d*)(\.(\d+))?$/);
        // Process if illegal number
        if (!cells) {
          valueNode = val;
        } else {
          var negative = cells[1];
          var int = cells[2] || '0';
          var decimal = cells[4] || '';

          int = int.replace(/\B(?=(\d{3})+(?!\d))/g, groupSeparator);
          if (typeof precision === 'number') {
            decimal = padEnd_1(decimal, precision, '0').slice(0, precision);
          }

          if (decimal) {
            decimal = '' + decimalSeparator + decimal;
          }

          valueNode = [h(
            'span',
            { key: 'int', 'class': prefixCls + '-content-value-int' },
            [negative, int]
          ), decimal && h(
            'span',
            { key: 'decimal', 'class': prefixCls + '-content-value-decimal' },
            [decimal]
          )];
        }
      }

      return h(
        'span',
        { 'class': prefixCls + '-content-value' },
        [valueNode]
      );
    }
  };

  var StatisticProps = {
    prefixCls: VuePropTypes.string,
    decimalSeparator: VuePropTypes.string,
    groupSeparator: VuePropTypes.string,
    format: VuePropTypes.string,
    value: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number, VuePropTypes.object]),
    valueStyle: VuePropTypes.any,
    valueRender: VuePropTypes.any,
    formatter: VuePropTypes.any,
    precision: VuePropTypes.number,
    prefix: VuePropTypes.any,
    suffix: VuePropTypes.any,
    title: VuePropTypes.any
  };

  var Statistic = {
    name: 'AStatistic',
    props: initDefaultProps(StatisticProps, {
      decimalSeparator: '.',
      groupSeparator: ','
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },

    render: function render() {
      var h = arguments[0];
      var _$props = this.$props,
          customizePrefixCls = _$props.prefixCls,
          _$props$value = _$props.value,
          value = _$props$value === undefined ? 0 : _$props$value,
          valueStyle = _$props.valueStyle,
          valueRender = _$props.valueRender;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('statistic', customizePrefixCls);

      var title = getComponentFromProp(this, 'title');
      var prefix = getComponentFromProp(this, 'prefix');
      var suffix = getComponentFromProp(this, 'suffix');
      var formatter = getComponentFromProp(this, 'formatter', {}, false);
      var valueNode = h(StatisticNumber, { props: _extends$1({}, this.$props, { prefixCls: prefixCls, value: value, formatter: formatter }) });
      if (valueRender) {
        valueNode = valueRender(valueNode);
      }

      return h(
        'div',
        { 'class': prefixCls },
        [title && h(
          'div',
          { 'class': prefixCls + '-title' },
          [title]
        ), h(
          'div',
          { style: valueStyle, 'class': prefixCls + '-content' },
          [prefix && h(
            'span',
            { 'class': prefixCls + '-content-prefix' },
            [prefix]
          ), valueNode, suffix && h(
            'span',
            { 'class': prefixCls + '-content-suffix' },
            [suffix]
          )]
        )]
      );
    }
  };

  /**
   * Pads `string` on the left side if it's shorter than `length`. Padding
   * characters are truncated if they exceed `length`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to pad.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padded string.
   * @example
   *
   * _.padStart('abc', 6);
   * // => '   abc'
   *
   * _.padStart('abc', 6, '_-');
   * // => '_-_abc'
   *
   * _.padStart('abc', 3);
   * // => 'abc'
   */
  function padStart(string, length, chars) {
    string = toString_1(string);
    length = toInteger_1(length);

    var strLength = length ? _stringSize(string) : 0;
    return (length && strLength < length)
      ? (_createPadding(length - strLength, chars) + string)
      : string;
  }

  var padStart_1 = padStart;

  // Countdown
  var timeUnits = [['Y', 1000 * 60 * 60 * 24 * 365], // years
  ['M', 1000 * 60 * 60 * 24 * 30], // months
  ['D', 1000 * 60 * 60 * 24], // days
  ['H', 1000 * 60 * 60], // hours
  ['m', 1000 * 60], // minutes
  ['s', 1000], // seconds
  ['S', 1]];

  function formatTimeStr(duration, format) {
    var leftDuration = duration;

    var escapeRegex = /\[[^\]]*\]/g;
    var keepList = (format.match(escapeRegex) || []).map(function (str) {
      return str.slice(1, -1);
    });
    var templateText = format.replace(escapeRegex, '[]');

    var replacedText = timeUnits.reduce(function (current, _ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          name = _ref2[0],
          unit = _ref2[1];

      if (current.indexOf(name) !== -1) {
        var value = Math.floor(leftDuration / unit);
        leftDuration -= value * unit;
        return current.replace(new RegExp(name + '+', 'g'), function (match) {
          var len = match.length;
          return padStart_1(value.toString(), len, '0');
        });
      }
      return current;
    }, templateText);

    var index = 0;
    return replacedText.replace(escapeRegex, function () {
      var match = keepList[index];
      index += 1;
      return match;
    });
  }

  function formatCountdown(value, config) {
    var _config$format = config.format,
        format = _config$format === undefined ? '' : _config$format;

    var target = interopDefault(moment$1)(value).valueOf();
    var current = interopDefault(moment$1)().valueOf();
    var diff = Math.max(target - current, 0);
    return formatTimeStr(diff, format);
  }

  var REFRESH_INTERVAL = 1000 / 30;

  function getTime(value) {
    return interopDefault(moment$1)(value).valueOf();
  }

  var Countdown = {
    name: 'AStatisticCountdown',
    props: initDefaultProps(StatisticProps, {
      format: 'HH:mm:ss'
    }),

    created: function created() {
      this.countdownId = undefined;
    },
    mounted: function mounted() {
      this.syncTimer();
    },
    updated: function updated() {
      this.syncTimer();
    },
    beforeDestroy: function beforeDestroy() {
      this.stopTimer();
    },


    methods: {
      syncTimer: function syncTimer() {
        var value = this.$props.value;

        var timestamp = getTime(value);
        if (timestamp >= Date.now()) {
          this.startTimer();
        } else {
          this.stopTimer();
        }
      },
      startTimer: function startTimer() {
        var _this = this;

        if (this.countdownId) return;
        this.countdownId = window.setInterval(function () {
          _this.$refs.statistic.$forceUpdate();
          _this.syncTimer();
        }, REFRESH_INTERVAL);
      },
      stopTimer: function stopTimer() {
        var value = this.$props.value;

        if (this.countdownId) {
          clearInterval(this.countdownId);
          this.countdownId = undefined;

          var timestamp = getTime(value);
          if (timestamp < Date.now()) {
            this.$emit('finish');
          }
        }
      },
      formatCountdown: function formatCountdown$1(_ref) {
        var value = _ref.value,
            config = _ref.config;
        var format = this.$props.format;

        return formatCountdown(value, _extends$1({}, config, { format: format }));
      },


      valueRenderHtml: function valueRenderHtml(node) {
        return node;
      }
    },

    render: function render() {
      var h = arguments[0];

      return h(Statistic, babelHelperVueJsxMergeProps([{
        ref: 'statistic'
      }, {
        props: _extends$1({}, this.$props, {
          valueRender: this.valueRenderHtml,
          formatter: this.formatCountdown
        }),
        on: getListeners(this)
      }]));
    }
  };

  Statistic.Countdown = Countdown;
  /* istanbul ignore next */
  Statistic.install = function (Vue) {
    Vue.use(base);
    Vue.component(Statistic.name, Statistic);
    Vue.component(Statistic.Countdown.name, Statistic.Countdown);
  };

  function isFlexSupported$1() {
    if (typeof window !== 'undefined' && window.document && window.document.documentElement) {
      var documentElement = window.document.documentElement;

      return 'flex' in documentElement.style || 'webkitFlex' in documentElement.style || 'Flex' in documentElement.style || 'msFlex' in documentElement.style;
    }
    return false;
  }

  var Steps$1 = {
    name: 'Steps',
    mixins: [BaseMixin],
    props: {
      type: VuePropTypes.string.def('default'),
      prefixCls: VuePropTypes.string.def('rc-steps'),
      iconPrefix: VuePropTypes.string.def('rc'),
      direction: VuePropTypes.string.def('horizontal'),
      labelPlacement: VuePropTypes.string.def('horizontal'),
      status: VuePropTypes.string.def('process'),
      size: VuePropTypes.string.def(''),
      progressDot: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.func]),
      initial: VuePropTypes.number.def(0),
      current: VuePropTypes.number.def(0),
      icons: VuePropTypes.shape({
        finish: VuePropTypes.any,
        error: VuePropTypes.any
      }).loose
    },
    data: function data() {
      this.calcStepOffsetWidth = debounce_1(this.calcStepOffsetWidth, 150);
      return {
        flexSupported: true,
        lastStepOffsetWidth: 0
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        _this.calcStepOffsetWidth();
        if (!isFlexSupported$1()) {
          _this.setState({
            flexSupported: false
          });
        }
      });
    },
    updated: function updated() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.calcStepOffsetWidth();
      });
    },
    beforeDestroy: function beforeDestroy() {
      if (this.calcTimeout) {
        clearTimeout(this.calcTimeout);
      }
      if (this.calcStepOffsetWidth && this.calcStepOffsetWidth.cancel) {
        this.calcStepOffsetWidth.cancel();
      }
    },

    methods: {
      onStepClick: function onStepClick(next) {
        var current = this.$props.current;

        if (current !== next) {
          this.$emit('change', next);
        }
      },
      calcStepOffsetWidth: function calcStepOffsetWidth() {
        var _this3 = this;

        if (isFlexSupported$1()) {
          return;
        }
        var lastStepOffsetWidth = this.$data.lastStepOffsetWidth;
        // Just for IE9

        var domNode = this.$refs.vcStepsRef;
        if (domNode.children.length > 0) {
          if (this.calcTimeout) {
            clearTimeout(this.calcTimeout);
          }
          this.calcTimeout = setTimeout(function () {
            // +1 for fit edge bug of digit width, like 35.4px
            var offsetWidth = (domNode.lastChild.offsetWidth || 0) + 1;
            // Reduce shake bug
            if (lastStepOffsetWidth === offsetWidth || Math.abs(lastStepOffsetWidth - offsetWidth) <= 3) {
              return;
            }
            _this3.setState({ lastStepOffsetWidth: offsetWidth });
          });
        }
      }
    },
    render: function render() {
      var _classString,
          _this4 = this;

      var h = arguments[0];
      var prefixCls = this.prefixCls,
          direction = this.direction,
          type = this.type,
          labelPlacement = this.labelPlacement,
          iconPrefix = this.iconPrefix,
          status = this.status,
          size = this.size,
          current = this.current,
          $scopedSlots = this.$scopedSlots,
          initial = this.initial,
          icons = this.icons;

      var isNav = type === 'navigation';
      var progressDot = this.progressDot;
      if (progressDot === undefined) {
        progressDot = $scopedSlots.progressDot;
      }
      var lastStepOffsetWidth = this.lastStepOffsetWidth,
          flexSupported = this.flexSupported;

      var filteredChildren = filterEmpty(this.$slots['default']);
      var lastIndex = filteredChildren.length - 1;
      var adjustedlabelPlacement = progressDot ? 'vertical' : labelPlacement;
      var classString = (_classString = {}, _defineProperty(_classString, prefixCls, true), _defineProperty(_classString, prefixCls + '-' + direction, true), _defineProperty(_classString, prefixCls + '-' + size, size), _defineProperty(_classString, prefixCls + '-label-' + adjustedlabelPlacement, direction === 'horizontal'), _defineProperty(_classString, prefixCls + '-dot', !!progressDot), _defineProperty(_classString, prefixCls + '-navigation', isNav), _defineProperty(_classString, prefixCls + '-flex-not-supported', !flexSupported), _classString);
      var listeners = getListeners(this);
      var stepsProps = {
        'class': classString,
        ref: 'vcStepsRef',
        on: listeners
      };
      return h(
        'div',
        stepsProps,
        [filteredChildren.map(function (child, index) {
          var childProps = getPropsData(child);
          var stepNumber = initial + index;
          var stepProps = {
            props: _extends$1({
              stepNumber: '' + (stepNumber + 1),
              stepIndex: stepNumber,
              prefixCls: prefixCls,
              iconPrefix: iconPrefix,
              progressDot: _this4.progressDot,
              icons: icons
            }, childProps),
            on: getEvents(child),
            scopedSlots: $scopedSlots
          };
          if (listeners.change) {
            stepProps.on.stepClick = _this4.onStepClick;
          }
          if (!flexSupported && direction !== 'vertical') {
            if (isNav) {
              stepProps.props.itemWidth = 100 / (lastIndex + 1) + '%';
              stepProps.props.adjustMarginRight = 0;
            } else if (index !== lastIndex) {
              stepProps.props.itemWidth = 100 / lastIndex + '%';
              stepProps.props.adjustMarginRight = -Math.round(lastStepOffsetWidth / lastIndex + 1) + 'px';
            }
          }
          // fix tail color
          if (status === 'error' && index === current - 1) {
            stepProps['class'] = prefixCls + '-next-error';
          }
          if (!childProps.status) {
            if (stepNumber === current) {
              stepProps.props.status = status;
            } else if (stepNumber < current) {
              stepProps.props.status = 'finish';
            } else {
              stepProps.props.status = 'wait';
            }
          }
          stepProps.props.active = stepNumber === current;
          return cloneElement(child, stepProps);
        })]
      );
    }
  };

  function isString(str) {
    return typeof str === 'string';
  }
  function noop$O() {}
  var Step = {
    name: 'Step',
    props: {
      prefixCls: VuePropTypes.string,
      wrapperStyle: VuePropTypes.object,
      itemWidth: VuePropTypes.string,
      active: VuePropTypes.bool,
      disabled: VuePropTypes.bool,
      status: VuePropTypes.string,
      iconPrefix: VuePropTypes.string,
      icon: VuePropTypes.any,
      adjustMarginRight: VuePropTypes.string,
      stepNumber: VuePropTypes.string,
      stepIndex: VuePropTypes.number,
      description: VuePropTypes.any,
      title: VuePropTypes.any,
      subTitle: VuePropTypes.any,
      progressDot: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.func]),
      tailContent: VuePropTypes.any,
      icons: VuePropTypes.shape({
        finish: VuePropTypes.any,
        error: VuePropTypes.any
      }).loose
    },
    methods: {
      onClick: function onClick() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this.$emit.apply(this, ['click'].concat(_toConsumableArray(args)));
        this.$emit('stepClick', this.stepIndex);
      },
      renderIconNode: function renderIconNode() {
        var _iconClassName;

        var h = this.$createElement;

        var _getOptionProps = getOptionProps(this),
            prefixCls = _getOptionProps.prefixCls,
            stepNumber = _getOptionProps.stepNumber,
            status = _getOptionProps.status,
            iconPrefix = _getOptionProps.iconPrefix,
            icons = _getOptionProps.icons;

        var progressDot = this.progressDot;
        if (progressDot === undefined) {
          progressDot = this.$scopedSlots.progressDot;
        }
        var icon = getComponentFromProp(this, 'icon');
        var title = getComponentFromProp(this, 'title');
        var description = getComponentFromProp(this, 'description');
        var iconNode = void 0;
        var iconClassName = (_iconClassName = {}, _defineProperty(_iconClassName, prefixCls + '-icon', true), _defineProperty(_iconClassName, iconPrefix + 'icon', true), _defineProperty(_iconClassName, iconPrefix + 'icon-' + icon, icon && isString(icon)), _defineProperty(_iconClassName, iconPrefix + 'icon-check', !icon && status === 'finish' && icons && !icons.finish), _defineProperty(_iconClassName, iconPrefix + 'icon-close', !icon && status === 'error' && icons && !icons.error), _iconClassName);
        var iconDot = h('span', { 'class': prefixCls + '-icon-dot' });
        // `progressDot` enjoy the highest priority
        if (progressDot) {
          if (typeof progressDot === 'function') {
            iconNode = h(
              'span',
              { 'class': prefixCls + '-icon' },
              [progressDot({ index: stepNumber - 1, status: status, title: title, description: description, prefixCls: prefixCls })]
            );
          } else {
            iconNode = h(
              'span',
              { 'class': prefixCls + '-icon' },
              [iconDot]
            );
          }
        } else if (icon && !isString(icon)) {
          iconNode = h(
            'span',
            { 'class': prefixCls + '-icon' },
            [icon]
          );
        } else if (icons && icons.finish && status === 'finish') {
          iconNode = h(
            'span',
            { 'class': prefixCls + '-icon' },
            [icons.finish]
          );
        } else if (icons && icons.error && status === 'error') {
          iconNode = h(
            'span',
            { 'class': prefixCls + '-icon' },
            [icons.error]
          );
        } else if (icon || status === 'finish' || status === 'error') {
          iconNode = h('span', { 'class': iconClassName });
        } else {
          iconNode = h(
            'span',
            { 'class': prefixCls + '-icon' },
            [stepNumber]
          );
        }
        return iconNode;
      }
    },
    render: function render() {
      var _classString;

      var h = arguments[0];

      var _getOptionProps2 = getOptionProps(this),
          prefixCls = _getOptionProps2.prefixCls,
          itemWidth = _getOptionProps2.itemWidth,
          active = _getOptionProps2.active,
          _getOptionProps2$stat = _getOptionProps2.status,
          status = _getOptionProps2$stat === undefined ? 'wait' : _getOptionProps2$stat,
          tailContent = _getOptionProps2.tailContent,
          adjustMarginRight = _getOptionProps2.adjustMarginRight,
          disabled = _getOptionProps2.disabled;

      var title = getComponentFromProp(this, 'title');
      var subTitle = getComponentFromProp(this, 'subTitle');
      var description = getComponentFromProp(this, 'description');

      var classString = (_classString = {}, _defineProperty(_classString, prefixCls + '-item', true), _defineProperty(_classString, prefixCls + '-item-' + status, true), _defineProperty(_classString, prefixCls + '-item-custom', getComponentFromProp(this, 'icon')), _defineProperty(_classString, prefixCls + '-item-active', active), _defineProperty(_classString, prefixCls + '-item-disabled', disabled === true), _classString);
      var stepProps = {
        'class': classString,
        on: getListeners(this)
      };
      var stepItemStyle = {};
      if (itemWidth) {
        stepItemStyle.width = itemWidth;
      }
      if (adjustMarginRight) {
        stepItemStyle.marginRight = adjustMarginRight;
      }
      var listeners = getListeners(this);
      var accessibilityProps = {
        attrs: {},
        on: {
          click: listeners.click || noop$O
        }
      };
      if (listeners.stepClick && !disabled) {
        accessibilityProps.attrs.role = 'button';
        accessibilityProps.attrs.tabIndex = 0;
        accessibilityProps.on.click = this.onClick;
      }
      return h(
        'div',
        babelHelperVueJsxMergeProps([stepProps, { style: stepItemStyle }]),
        [h(
          'div',
          babelHelperVueJsxMergeProps([accessibilityProps, { 'class': prefixCls + '-item-container' }]),
          [h(
            'div',
            { 'class': prefixCls + '-item-tail' },
            [tailContent]
          ), h(
            'div',
            { 'class': prefixCls + '-item-icon' },
            [this.renderIconNode()]
          ), h(
            'div',
            { 'class': prefixCls + '-item-content' },
            [h(
              'div',
              { 'class': prefixCls + '-item-title' },
              [title, subTitle && h(
                'div',
                {
                  attrs: { title: subTitle },
                  'class': prefixCls + '-item-subtitle' },
                [subTitle]
              )]
            ), description && h(
              'div',
              { 'class': prefixCls + '-item-description' },
              [description]
            )]
          )]
        )]
      );
    }
  };

  // base rc-steps 3.5.0

  Steps$1.Step = Step;

  var getStepsProps = function getStepsProps() {
    var defaultProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var props = {
      prefixCls: VuePropTypes.string,
      iconPrefix: VuePropTypes.string,
      current: VuePropTypes.number,
      initial: VuePropTypes.number,
      labelPlacement: VuePropTypes.oneOf(['horizontal', 'vertical']).def('horizontal'),
      status: VuePropTypes.oneOf(['wait', 'process', 'finish', 'error']),
      size: VuePropTypes.oneOf(['default', 'small']),
      direction: VuePropTypes.oneOf(['horizontal', 'vertical']),
      progressDot: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.func]),
      type: VuePropTypes.oneOf(['default', 'navigation'])
    };
    return initDefaultProps(props, defaultProps);
  };

  var Steps$2 = {
    name: 'ASteps',
    props: getStepsProps({
      current: 0
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    model: {
      prop: 'current',
      event: 'change'
    },
    Step: _extends$1({}, Steps$1.Step, { name: 'AStep' }),
    render: function render() {
      var h = arguments[0];

      var props = getOptionProps(this);
      var customizePrefixCls = props.prefixCls,
          customizeIconPrefixCls = props.iconPrefix;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('steps', customizePrefixCls);
      var iconPrefix = getPrefixCls('', customizeIconPrefixCls);

      var icons = {
        finish: h(Icon$1, {
          attrs: { type: 'check' },
          'class': prefixCls + '-finish-icon' }),
        error: h(Icon$1, {
          attrs: { type: 'close' },
          'class': prefixCls + '-error-icon' })
      };
      var stepsProps = {
        props: _extends$1({
          icons: icons,
          iconPrefix: iconPrefix,
          prefixCls: prefixCls
        }, props),
        on: getListeners(this),
        scopedSlots: this.$scopedSlots
      };
      return h(
        Steps$1,
        stepsProps,
        [this.$slots['default']]
      );
    }
  };

  /* istanbul ignore next */
  Steps$2.install = function (Vue) {
    Vue.use(base);
    Vue.component(Steps$2.name, Steps$2);
    Vue.component(Steps$2.Step.name, Steps$2.Step);
  };

  var switchPropTypes = {
    prefixCls: VuePropTypes.string,
    disabled: VuePropTypes.bool.def(false),
    checkedChildren: VuePropTypes.any,
    unCheckedChildren: VuePropTypes.any,
    // onChange: PropTypes.func,
    // onMouseUp: PropTypes.func,
    // onClick: PropTypes.func,
    tabIndex: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
    checked: VuePropTypes.bool.def(false),
    defaultChecked: VuePropTypes.bool.def(false),
    autoFocus: VuePropTypes.bool.def(false),
    loadingIcon: VuePropTypes.any
  };

  // function noop () {
  // }
  var Switch = {
    name: 'VcSwitch',
    mixins: [BaseMixin],
    model: {
      prop: 'checked',
      event: 'change'
    },
    props: _extends$1({}, switchPropTypes, {
      prefixCls: switchPropTypes.prefixCls.def('rc-switch')
      // onChange: switchPropTypes.onChange.def(noop),
      // onClick: switchPropTypes.onClick.def(noop),
    }),
    data: function data() {
      var checked = false;
      if (hasProp(this, 'checked')) {
        checked = !!this.checked;
      } else {
        checked = !!this.defaultChecked;
      }
      return {
        stateChecked: checked
      };
    },

    watch: {
      checked: function checked(val) {
        this.stateChecked = val;
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        var autoFocus = _this.autoFocus,
            disabled = _this.disabled;

        if (autoFocus && !disabled) {
          _this.focus();
        }
      });
    },

    methods: {
      setChecked: function setChecked(checked, e) {
        if (this.disabled) {
          return;
        }
        if (!hasProp(this, 'checked')) {
          this.stateChecked = checked;
        }
        this.$emit('change', checked, e);
      },
      handleClick: function handleClick(e) {
        var checked = !this.stateChecked;
        this.setChecked(checked, e);
        this.$emit('click', checked, e);
      },
      handleKeyDown: function handleKeyDown(e) {
        if (e.keyCode === 37) {
          // Left
          this.setChecked(false, e);
        } else if (e.keyCode === 39) {
          // Right
          this.setChecked(true, e);
        }
      },
      handleMouseUp: function handleMouseUp(e) {
        if (this.$refs.refSwitchNode) {
          this.$refs.refSwitchNode.blur();
        }
        this.$emit('mouseup', e);
      },
      focus: function focus() {
        this.$refs.refSwitchNode.focus();
      },
      blur: function blur() {
        this.$refs.refSwitchNode.blur();
      }
    },
    render: function render() {
      var _switchClassName;

      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          prefixCls = _getOptionProps.prefixCls,
          disabled = _getOptionProps.disabled,
          loadingIcon = _getOptionProps.loadingIcon,
          tabIndex = _getOptionProps.tabIndex,
          restProps = _objectWithoutProperties(_getOptionProps, ['prefixCls', 'disabled', 'loadingIcon', 'tabIndex']);

      var checked = this.stateChecked;
      var switchClassName = (_switchClassName = {}, _defineProperty(_switchClassName, prefixCls, true), _defineProperty(_switchClassName, prefixCls + '-checked', checked), _defineProperty(_switchClassName, prefixCls + '-disabled', disabled), _switchClassName);
      var spanProps = {
        props: _extends$1({}, restProps),
        on: _extends$1({}, getListeners(this), {
          keydown: this.handleKeyDown,
          click: this.handleClick,
          mouseup: this.handleMouseUp
        }),
        attrs: {
          type: 'button',
          role: 'switch',
          'aria-checked': checked,
          disabled: disabled,
          tabIndex: tabIndex
        },
        'class': switchClassName,
        ref: 'refSwitchNode'
      };
      return h(
        'button',
        spanProps,
        [loadingIcon, h(
          'span',
          { 'class': prefixCls + '-inner' },
          [checked ? getComponentFromProp(this, 'checkedChildren') : getComponentFromProp(this, 'unCheckedChildren')]
        )]
      );
    }
  };

  var Switch$1 = {
    name: 'ASwitch',
    __ANT_SWITCH: true,
    model: {
      prop: 'checked',
      event: 'change'
    },
    props: {
      prefixCls: VuePropTypes.string,
      // size=default and size=large are the same
      size: VuePropTypes.oneOf(['small', 'default', 'large']),
      disabled: VuePropTypes.bool,
      checkedChildren: VuePropTypes.any,
      unCheckedChildren: VuePropTypes.any,
      tabIndex: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      checked: VuePropTypes.bool,
      defaultChecked: VuePropTypes.bool,
      autoFocus: VuePropTypes.bool,
      loading: VuePropTypes.bool
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      focus: function focus() {
        this.$refs.refSwitchNode.focus();
      },
      blur: function blur() {
        this.$refs.refSwitchNode.blur();
      }
    },
    created: function created() {
      warning$1(hasProp(this, 'checked') || !hasProp(this, 'value'), 'Switch', '`value` is not validate prop, do you mean `checked`?');
    },
    render: function render() {
      var _classes;

      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          customizePrefixCls = _getOptionProps.prefixCls,
          size = _getOptionProps.size,
          loading = _getOptionProps.loading,
          disabled = _getOptionProps.disabled,
          restProps = _objectWithoutProperties(_getOptionProps, ['prefixCls', 'size', 'loading', 'disabled']);

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('switch', customizePrefixCls);

      var classes = (_classes = {}, _defineProperty(_classes, prefixCls + '-small', size === 'small'), _defineProperty(_classes, prefixCls + '-loading', loading), _classes);
      var loadingIcon = loading ? h(Icon$1, {
        attrs: { type: 'loading' },
        'class': prefixCls + '-loading-icon' }) : null;
      var switchProps = {
        props: _extends$1({}, restProps, {
          prefixCls: prefixCls,
          loadingIcon: loadingIcon,
          checkedChildren: getComponentFromProp(this, 'checkedChildren'),
          unCheckedChildren: getComponentFromProp(this, 'unCheckedChildren'),
          disabled: disabled || loading
        }),
        on: getListeners(this),
        'class': classes,
        ref: 'refSwitchNode'
      };
      return h(
        Wave,
        {
          attrs: { insertExtraNode: true }
        },
        [h(Switch, switchProps)]
      );
    }
  };

  /* istanbul ignore next */
  Switch$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Switch$1.name, Switch$1);
  };

  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignMergeValue(object, key, value) {
    if ((value !== undefined && !eq_1(object[key], value)) ||
        (value === undefined && !(key in object))) {
      _baseAssignValue(object, key, value);
    }
  }

  var _assignMergeValue = assignMergeValue;

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  var _createBaseFor = createBaseFor;

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = _createBaseFor();

  var _baseFor = baseFor;

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject(value) {
    return isObjectLike_1(value) && isArrayLike_1(value);
  }

  var isArrayLikeObject_1 = isArrayLikeObject;

  /**
   * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') {
      return;
    }

    if (key == '__proto__') {
      return;
    }

    return object[key];
  }

  var _safeGet = safeGet;

  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */
  function toPlainObject(value) {
    return _copyObject(value, keysIn_1(value));
  }

  var toPlainObject_1 = toPlainObject;

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = _safeGet(object, key),
        srcValue = _safeGet(source, key),
        stacked = stack.get(srcValue);

    if (stacked) {
      _assignMergeValue(object, key, stacked);
      return;
    }
    var newValue = customizer
      ? customizer(objValue, srcValue, (key + ''), object, source, stack)
      : undefined;

    var isCommon = newValue === undefined;

    if (isCommon) {
      var isArr = isArray_1(srcValue),
          isBuff = !isArr && isBuffer_1(srcValue),
          isTyped = !isArr && !isBuff && isTypedArray_1(srcValue);

      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray_1(objValue)) {
          newValue = objValue;
        }
        else if (isArrayLikeObject_1(objValue)) {
          newValue = _copyArray(objValue);
        }
        else if (isBuff) {
          isCommon = false;
          newValue = _cloneBuffer(srcValue, true);
        }
        else if (isTyped) {
          isCommon = false;
          newValue = _cloneTypedArray(srcValue, true);
        }
        else {
          newValue = [];
        }
      }
      else if (isPlainObject_1(srcValue) || isArguments_1(srcValue)) {
        newValue = objValue;
        if (isArguments_1(objValue)) {
          newValue = toPlainObject_1(objValue);
        }
        else if (!isObject_1(objValue) || isFunction_1(objValue)) {
          newValue = _initCloneObject(srcValue);
        }
      }
      else {
        isCommon = false;
      }
    }
    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }
    _assignMergeValue(object, key, newValue);
  }

  var _baseMergeDeep = baseMergeDeep;

  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    _baseFor(source, function(srcValue, key) {
      stack || (stack = new _Stack);
      if (isObject_1(srcValue)) {
        _baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      }
      else {
        var newValue = customizer
          ? customizer(_safeGet(object, key), srcValue, (key + ''), object, source, stack)
          : undefined;

        if (newValue === undefined) {
          newValue = srcValue;
        }
        _assignMergeValue(object, key, newValue);
      }
    }, keysIn_1);
  }

  var _baseMerge = baseMerge;

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    return _setToString(_overRest(func, start, identity_1), func + '');
  }

  var _baseRest = baseRest;

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject_1(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number'
          ? (isArrayLike_1(object) && _isIndex(index, object.length))
          : (type == 'string' && index in object)
        ) {
      return eq_1(object[index], value);
    }
    return false;
  }

  var _isIterateeCall = isIterateeCall;

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return _baseRest(function(object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;

      customizer = (assigner.length > 3 && typeof customizer == 'function')
        ? (length--, customizer)
        : undefined;

      if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  var _createAssigner = createAssigner;

  /**
   * This method is like `_.assign` except that it recursively merges own and
   * inherited enumerable string keyed properties of source objects into the
   * destination object. Source properties that resolve to `undefined` are
   * skipped if a destination value exists. Array and plain object properties
   * are merged recursively. Other objects and value types are overridden by
   * assignment. Source objects are applied from left to right. Subsequent
   * sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {
   *   'a': [{ 'b': 2 }, { 'd': 4 }]
   * };
   *
   * var other = {
   *   'a': [{ 'c': 3 }, { 'e': 5 }]
   * };
   *
   * _.merge(object, other);
   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
   */
  var merge = _createAssigner(function(object, source, srcIndex) {
    _baseMerge(object, source, srcIndex);
  });

  var merge_1 = merge;

  var scrollbarVerticalSize = void 0;
  var scrollbarHorizontalSize = void 0;

  // Measure scrollbar width for padding body during modal show/hide
  var scrollbarMeasure = {
    position: 'absolute',
    top: '-9999px',
    width: '50px',
    height: '50px'
  };

  var INTERNAL_COL_DEFINE = 'RC_TABLE_INTERNAL_COL_DEFINE';

  function measureScrollbar(_ref) {
    var _ref$direction = _ref.direction,
        direction = _ref$direction === undefined ? 'vertical' : _ref$direction,
        prefixCls = _ref.prefixCls;

    if (typeof document === 'undefined' || typeof window === 'undefined') {
      return 0;
    }
    var isVertical = direction === 'vertical';
    if (isVertical && scrollbarVerticalSize) {
      return scrollbarVerticalSize;
    }
    if (!isVertical && scrollbarHorizontalSize) {
      return scrollbarHorizontalSize;
    }
    var scrollDiv = document.createElement('div');
    Object.keys(scrollbarMeasure).forEach(function (scrollProp) {
      scrollDiv.style[scrollProp] = scrollbarMeasure[scrollProp];
    });
    // apply hide scrollbar className ahead
    scrollDiv.className = prefixCls + '-hide-scrollbar scroll-div-append-to-body';

    // Append related overflow style
    if (isVertical) {
      scrollDiv.style.overflowY = 'scroll';
    } else {
      scrollDiv.style.overflowX = 'scroll';
    }
    document.body.appendChild(scrollDiv);
    var size = 0;
    if (isVertical) {
      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      scrollbarVerticalSize = size;
    } else {
      size = scrollDiv.offsetHeight - scrollDiv.clientHeight;
      scrollbarHorizontalSize = size;
    }

    document.body.removeChild(scrollDiv);
    return size;
  }

  function debounce$1(func, wait, immediate) {
    var timeout = void 0;
    function debounceFunc() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var context = this;
      // https://fb.me/react-event-pooling
      if (args[0] && args[0].persist) {
        args[0].persist();
      }
      var later = function later() {
        timeout = null;
        if (!immediate) {
          func.apply(context, args);
        }
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) {
        func.apply(context, args);
      }
    }
    debounceFunc.cancel = function cancel() {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
    };
    return debounceFunc;
  }

  function remove$3(array, item) {
    var index = array.indexOf(item);
    var front = array.slice(0, index);
    var last = array.slice(index + 1, array.length);
    return front.concat(last);
  }

  var ColumnManager = function () {
    function ColumnManager(columns) {
      _classCallCheck(this, ColumnManager);

      this.columns = columns;
      this._cached = {};
    }

    _createClass(ColumnManager, [{
      key: 'isAnyColumnsFixed',
      value: function isAnyColumnsFixed() {
        var _this = this;

        return this._cache('isAnyColumnsFixed', function () {
          return _this.columns.some(function (column) {
            return !!column.fixed;
          });
        });
      }
    }, {
      key: 'isAnyColumnsLeftFixed',
      value: function isAnyColumnsLeftFixed() {
        var _this2 = this;

        return this._cache('isAnyColumnsLeftFixed', function () {
          return _this2.columns.some(function (column) {
            return column.fixed === 'left' || column.fixed === true;
          });
        });
      }
    }, {
      key: 'isAnyColumnsRightFixed',
      value: function isAnyColumnsRightFixed() {
        var _this3 = this;

        return this._cache('isAnyColumnsRightFixed', function () {
          return _this3.columns.some(function (column) {
            return column.fixed === 'right';
          });
        });
      }
    }, {
      key: 'leftColumns',
      value: function leftColumns() {
        var _this4 = this;

        return this._cache('leftColumns', function () {
          return _this4.groupedColumns().filter(function (column) {
            return column.fixed === 'left' || column.fixed === true;
          });
        });
      }
    }, {
      key: 'rightColumns',
      value: function rightColumns() {
        var _this5 = this;

        return this._cache('rightColumns', function () {
          return _this5.groupedColumns().filter(function (column) {
            return column.fixed === 'right';
          });
        });
      }
    }, {
      key: 'leafColumns',
      value: function leafColumns() {
        var _this6 = this;

        return this._cache('leafColumns', function () {
          return _this6._leafColumns(_this6.columns);
        });
      }
    }, {
      key: 'leftLeafColumns',
      value: function leftLeafColumns() {
        var _this7 = this;

        return this._cache('leftLeafColumns', function () {
          return _this7._leafColumns(_this7.leftColumns());
        });
      }
    }, {
      key: 'rightLeafColumns',
      value: function rightLeafColumns() {
        var _this8 = this;

        return this._cache('rightLeafColumns', function () {
          return _this8._leafColumns(_this8.rightColumns());
        });
      }

      // add appropriate rowspan and colspan to column

    }, {
      key: 'groupedColumns',
      value: function groupedColumns() {
        var _this9 = this;

        return this._cache('groupedColumns', function () {
          var _groupColumns = function _groupColumns(columns) {
            var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var parentColumn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var rows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

            // track how many rows we got
            rows[currentRow] = rows[currentRow] || [];
            var grouped = [];
            var setRowSpan = function setRowSpan(column) {
              var rowSpan = rows.length - currentRow;
              if (column && !column.children && // parent columns are supposed to be one row
              rowSpan > 1 && (!column.rowSpan || column.rowSpan < rowSpan)) {
                column.rowSpan = rowSpan;
              }
            };
            columns.forEach(function (column, index) {
              var newColumn = _extends$1({}, column);
              rows[currentRow].push(newColumn);
              parentColumn.colSpan = parentColumn.colSpan || 0;
              if (newColumn.children && newColumn.children.length > 0) {
                newColumn.children = _groupColumns(newColumn.children, currentRow + 1, newColumn, rows);
                parentColumn.colSpan += newColumn.colSpan;
              } else {
                parentColumn.colSpan += 1;
              }
              // update rowspan to all same row columns
              for (var i = 0; i < rows[currentRow].length - 1; i += 1) {
                setRowSpan(rows[currentRow][i]);
              }
              // last column, update rowspan immediately
              if (index + 1 === columns.length) {
                setRowSpan(newColumn);
              }
              grouped.push(newColumn);
            });
            return grouped;
          };
          return _groupColumns(_this9.columns);
        });
      }
    }, {
      key: 'reset',
      value: function reset(columns) {
        this.columns = columns;
        this._cached = {};
      }
    }, {
      key: '_cache',
      value: function _cache(name, fn) {
        if (name in this._cached) {
          return this._cached[name];
        }
        this._cached[name] = fn();
        return this._cached[name];
      }
    }, {
      key: '_leafColumns',
      value: function _leafColumns(columns) {
        var _this10 = this;

        var leafColumns = [];
        columns.forEach(function (column) {
          if (!column.children) {
            leafColumns.push(column);
          } else {
            leafColumns.push.apply(leafColumns, _toConsumableArray(_this10._leafColumns(column.children)));
          }
        });
        return leafColumns;
      }
    }]);

    return ColumnManager;
  }();

  var ColGroup = {
    name: 'ColGroup',
    props: {
      fixed: VuePropTypes.string,
      columns: VuePropTypes.array
    },
    inject: {
      table: { 'default': function _default() {
          return {};
        } }
    },
    render: function render() {
      var h = arguments[0];
      var fixed = this.fixed,
          table = this.table;
      var prefixCls = table.prefixCls,
          expandIconAsCell = table.expandIconAsCell,
          columnManager = table.columnManager;


      var cols = [];

      if (expandIconAsCell && fixed !== 'right') {
        cols.push(h('col', { 'class': prefixCls + '-expand-icon-col', key: 'rc-table-expand-icon-col' }));
      }

      var leafColumns = void 0;

      if (fixed === 'left') {
        leafColumns = columnManager.leftLeafColumns();
      } else if (fixed === 'right') {
        leafColumns = columnManager.rightLeafColumns();
      } else {
        leafColumns = columnManager.leafColumns();
      }
      cols = cols.concat(leafColumns.map(function (_ref) {
        var key = _ref.key,
            dataIndex = _ref.dataIndex,
            width = _ref.width,
            additionalProps = _ref[INTERNAL_COL_DEFINE];

        var mergedKey = key !== undefined ? key : dataIndex;
        var w = typeof width === 'number' ? width + 'px' : width;
        return h('col', babelHelperVueJsxMergeProps([{ key: mergedKey, style: { width: w, minWidth: w } }, additionalProps]));
      }));
      return h('colgroup', [cols]);
    }
  };

  var TableHeaderRow = {
    props: {
      index: VuePropTypes.number,
      fixed: VuePropTypes.string,
      columns: VuePropTypes.array,
      rows: VuePropTypes.array,
      row: VuePropTypes.array,
      components: VuePropTypes.object,
      height: VuePropTypes.any,
      customHeaderRow: VuePropTypes.func,
      prefixCls: VuePropTypes.prefixCls
    },
    name: 'TableHeaderRow',
    render: function render(h) {
      var row = this.row,
          index = this.index,
          height = this.height,
          components = this.components,
          customHeaderRow = this.customHeaderRow,
          prefixCls = this.prefixCls;

      var HeaderRow = components.header.row;
      var HeaderCell = components.header.cell;
      var rowProps = customHeaderRow(row.map(function (cell) {
        return cell.column;
      }), index);
      var customStyle = rowProps ? rowProps.style : {};
      var style = _extends$1({ height: height }, customStyle);
      if (style.height === null) {
        delete style.height;
      }
      return h(
        HeaderRow,
        babelHelperVueJsxMergeProps([rowProps, { style: style }]),
        [row.map(function (cell, i) {
          var _classNames;

          var column = cell.column,
              isLast = cell.isLast,
              children = cell.children,
              className = cell.className,
              cellProps = _objectWithoutProperties(cell, ['column', 'isLast', 'children', 'className']);

          var customProps = column.customHeaderCell ? column.customHeaderCell(column) : {};
          var headerCellProps = mergeProps({
            attrs: _extends$1({}, cellProps)
          }, _extends$1({}, customProps, {
            key: column.key || column.dataIndex || i
          }));

          if (column.align) {
            headerCellProps.style = _extends$1({}, customProps.style, { textAlign: column.align });
          }

          headerCellProps['class'] = classnames(customProps['class'], customProps.className, column['class'], column.className, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-align-' + column.align, !!column.align), _defineProperty(_classNames, prefixCls + '-row-cell-ellipsis', !!column.ellipsis), _defineProperty(_classNames, prefixCls + '-row-cell-break-word', !!column.width), _defineProperty(_classNames, prefixCls + '-row-cell-last', isLast), _classNames));

          if (typeof HeaderCell === 'function') {
            return HeaderCell(h, headerCellProps, children);
          }
          return h(
            HeaderCell,
            headerCellProps,
            [children]
          );
        })]
      );
    }
  };

  function getRowHeight(state, props) {
    var fixedColumnsHeadRowsHeight = state.fixedColumnsHeadRowsHeight;
    var columns = props.columns,
        rows = props.rows,
        fixed = props.fixed;

    var headerHeight = fixedColumnsHeadRowsHeight[0];

    if (!fixed) {
      return null;
    }

    if (headerHeight && columns) {
      if (headerHeight === 'auto') {
        return 'auto';
      }
      return headerHeight / rows.length + 'px';
    }
    return null;
  }

  var TableHeaderRow$1 = connect(function (state, props) {
    return {
      height: getRowHeight(state, props)
    };
  })(TableHeaderRow);

  function getHeaderRows(_ref) {
    var _ref$columns = _ref.columns,
        columns = _ref$columns === undefined ? [] : _ref$columns,
        _ref$currentRow = _ref.currentRow,
        currentRow = _ref$currentRow === undefined ? 0 : _ref$currentRow,
        _ref$rows = _ref.rows,
        rows = _ref$rows === undefined ? [] : _ref$rows,
        _ref$isLast = _ref.isLast,
        isLast = _ref$isLast === undefined ? true : _ref$isLast;

    rows = rows || [];
    rows[currentRow] = rows[currentRow] || [];

    columns.forEach(function (column, i) {
      if (column.rowSpan && rows.length < column.rowSpan) {
        while (rows.length < column.rowSpan) {
          rows.push([]);
        }
      }
      var cellIsLast = isLast && i === columns.length - 1;
      var cell = {
        key: column.key,
        className: column.className || column['class'] || '',
        children: column.title,
        isLast: cellIsLast,
        column: column
      };
      if (column.children) {
        getHeaderRows({
          columns: column.children,
          currentRow: currentRow + 1,
          rows: rows,
          isLast: cellIsLast
        });
      }
      if ('colSpan' in column) {
        cell.colSpan = column.colSpan;
      }
      if ('rowSpan' in column) {
        cell.rowSpan = column.rowSpan;
      }
      if (cell.colSpan !== 0) {
        rows[currentRow].push(cell);
      }
    });
    return rows.filter(function (row) {
      return row.length > 0;
    });
  }

  var TableHeader = {
    name: 'TableHeader',
    props: {
      fixed: VuePropTypes.string,
      columns: VuePropTypes.array.isRequired,
      expander: VuePropTypes.object.isRequired
    },
    inject: {
      table: { 'default': function _default() {
          return {};
        } }
    },

    render: function render() {
      var h = arguments[0];
      var _table = this.table,
          components = _table.sComponents,
          prefixCls = _table.prefixCls,
          showHeader = _table.showHeader,
          customHeaderRow = _table.customHeaderRow;
      var expander = this.expander,
          columns = this.columns,
          fixed = this.fixed;


      if (!showHeader) {
        return null;
      }

      var rows = getHeaderRows({ columns: columns });

      expander.renderExpandIndentCell(rows, fixed);

      var HeaderWrapper = components.header.wrapper;

      return h(
        HeaderWrapper,
        { 'class': prefixCls + '-thead' },
        [rows.map(function (row, index) {
          return h(TableHeaderRow$1, {
            attrs: {
              prefixCls: prefixCls,

              index: index,
              fixed: fixed,
              columns: columns,
              rows: rows,
              row: row,
              components: components,
              customHeaderRow: customHeaderRow
            },
            key: index });
        })]
      );
    }
  };

  function isInvalidRenderCellText(text) {
    return text && !isValidElement(text) && Object.prototype.toString.call(text) === '[object Object]';
  }

  var TableCell = {
    name: 'TableCell',
    props: {
      record: VuePropTypes.object,
      prefixCls: VuePropTypes.string,
      index: VuePropTypes.number,
      indent: VuePropTypes.number,
      indentSize: VuePropTypes.number,
      column: VuePropTypes.object,
      expandIcon: VuePropTypes.any,
      component: VuePropTypes.any
    },
    inject: {
      table: { 'default': function _default() {
          return {};
        } }
    },
    methods: {
      handleClick: function handleClick(e) {
        var record = this.record,
            onCellClick = this.column.onCellClick;

        if (onCellClick) {
          onCellClick(record, e);
        }
      }
    },

    render: function render() {
      var _classNames;

      var h = arguments[0];
      var record = this.record,
          indentSize = this.indentSize,
          prefixCls = this.prefixCls,
          indent = this.indent,
          index = this.index,
          expandIcon = this.expandIcon,
          column = this.column,
          BodyCell = this.component;
      var dataIndex = column.dataIndex,
          customRender = column.customRender,
          _column$className = column.className,
          className = _column$className === undefined ? '' : _column$className;
      var transformCellText = this.table.transformCellText;
      // We should return undefined if no dataIndex is specified, but in order to
      // be compatible with object-path's behavior, we return the record object instead.

      var text = void 0;
      if (typeof dataIndex === 'number') {
        text = get_1(record, dataIndex);
      } else if (!dataIndex || dataIndex.length === 0) {
        text = record;
      } else {
        text = get_1(record, dataIndex);
      }
      var tdProps = {
        props: {},
        attrs: {},
        on: {
          click: this.handleClick
        }
      };
      var colSpan = void 0;
      var rowSpan = void 0;

      if (customRender) {
        text = customRender(text, record, index, column);
        if (isInvalidRenderCellText(text)) {
          tdProps.attrs = text.attrs || {};
          tdProps.props = text.props || {};
          tdProps['class'] = text['class'];
          tdProps.style = text.style;
          colSpan = tdProps.attrs.colSpan;
          rowSpan = tdProps.attrs.rowSpan;
          text = text.children;
        }
      }

      if (column.customCell) {
        tdProps = mergeProps(tdProps, column.customCell(record, index));
      }

      // Fix https://github.com/ant-design/ant-design/issues/1202
      if (isInvalidRenderCellText(text)) {
        text = null;
      }

      if (transformCellText) {
        text = transformCellText({ text: text, column: column, record: record, index: index });
      }

      var indentText = expandIcon ? h('span', {
        style: { paddingLeft: indentSize * indent + 'px' },
        'class': prefixCls + '-indent indent-level-' + indent
      }) : null;

      if (rowSpan === 0 || colSpan === 0) {
        return null;
      }
      if (column.align) {
        tdProps.style = _extends$1({ textAlign: column.align }, tdProps.style);
      }

      var cellClassName = classnames(className, column['class'], (_classNames = {}, _defineProperty(_classNames, prefixCls + '-cell-ellipsis', !!column.ellipsis), _defineProperty(_classNames, prefixCls + '-cell-break-word', !!column.width), _classNames));

      if (column.ellipsis) {
        if (typeof text === 'string') {
          tdProps.attrs.title = text;
        }
      }

      return h(
        BodyCell,
        babelHelperVueJsxMergeProps([{ 'class': cellClassName }, tdProps]),
        [indentText, expandIcon, text]
      );
    }
  };

  function noop$P() {}
  var TableRow = {
    name: 'TableRow',
    mixins: [BaseMixin],
    props: initDefaultProps({
      customRow: VuePropTypes.func,
      // onRowClick: PropTypes.func,
      // onRowDoubleClick: PropTypes.func,
      // onRowContextMenu: PropTypes.func,
      // onRowMouseEnter: PropTypes.func,
      // onRowMouseLeave: PropTypes.func,
      record: VuePropTypes.object,
      prefixCls: VuePropTypes.string,
      // onHover: PropTypes.func,
      columns: VuePropTypes.array,
      height: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      index: VuePropTypes.number,
      rowKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]).isRequired,
      className: VuePropTypes.string,
      indent: VuePropTypes.number,
      indentSize: VuePropTypes.number,
      hasExpandIcon: VuePropTypes.func,
      hovered: VuePropTypes.bool.isRequired,
      visible: VuePropTypes.bool.isRequired,
      store: VuePropTypes.object.isRequired,
      fixed: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.bool]),
      renderExpandIcon: VuePropTypes.func,
      renderExpandIconCell: VuePropTypes.func,
      components: VuePropTypes.any,
      expandedRow: VuePropTypes.bool,
      isAnyColumnsFixed: VuePropTypes.bool,
      ancestorKeys: VuePropTypes.array.isRequired,
      expandIconColumnIndex: VuePropTypes.number,
      expandRowByClick: VuePropTypes.bool
      // visible: PropTypes.bool,
      // hovered: PropTypes.bool,
      // height: PropTypes.any,
    }, {
      // expandIconColumnIndex: 0,
      // expandRowByClick: false,
      hasExpandIcon: function hasExpandIcon() {},
      renderExpandIcon: function renderExpandIcon() {},
      renderExpandIconCell: function renderExpandIconCell() {}
    }),

    data: function data() {
      // this.shouldRender = this.visible
      return {
        shouldRender: this.visible
      };
    },
    mounted: function mounted() {
      var _this = this;

      if (this.shouldRender) {
        this.$nextTick(function () {
          _this.saveRowRef();
        });
      }
    },

    watch: {
      visible: function visible(val) {
        if (val) {
          this.shouldRender = true;
        }
      }
    },

    updated: function updated() {
      var _this2 = this;

      if (this.shouldRender && !this.rowRef) {
        this.$nextTick(function () {
          _this2.saveRowRef();
        });
      }
    },

    methods: {
      onRowClick: function onRowClick(event) {
        var rowPropFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$P;
        var record = this.record,
            index = this.index;

        this.__emit('rowClick', record, index, event);
        rowPropFunc(event);
      },
      onRowDoubleClick: function onRowDoubleClick(event) {
        var rowPropFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$P;
        var record = this.record,
            index = this.index;

        this.__emit('rowDoubleClick', record, index, event);
        rowPropFunc(event);
      },
      onContextMenu: function onContextMenu(event) {
        var rowPropFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$P;
        var record = this.record,
            index = this.index;

        this.__emit('rowContextmenu', record, index, event);
        rowPropFunc(event);
      },
      onMouseEnter: function onMouseEnter(event) {
        var rowPropFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$P;
        var record = this.record,
            index = this.index,
            rowKey = this.rowKey;

        this.__emit('hover', true, rowKey);
        this.__emit('rowMouseenter', record, index, event);
        rowPropFunc(event);
      },
      onMouseLeave: function onMouseLeave(event) {
        var rowPropFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$P;
        var record = this.record,
            index = this.index,
            rowKey = this.rowKey;

        this.__emit('hover', false, rowKey);
        this.__emit('rowMouseleave', record, index, event);
        rowPropFunc(event);
      },
      setExpandedRowHeight: function setExpandedRowHeight() {
        var store = this.store,
            rowKey = this.rowKey;

        var _store$getState = store.getState(),
            expandedRowsHeight = _store$getState.expandedRowsHeight;

        var height = this.rowRef.getBoundingClientRect().height;
        expandedRowsHeight = _extends$1({}, expandedRowsHeight, _defineProperty({}, rowKey, height));
        store.setState({ expandedRowsHeight: expandedRowsHeight });
      },
      setRowHeight: function setRowHeight() {
        var store = this.store,
            rowKey = this.rowKey;

        var _store$getState2 = store.getState(),
            fixedColumnsBodyRowsHeight = _store$getState2.fixedColumnsBodyRowsHeight;

        var height = this.rowRef.getBoundingClientRect().height;
        store.setState({
          fixedColumnsBodyRowsHeight: _extends$1({}, fixedColumnsBodyRowsHeight, _defineProperty({}, rowKey, height))
        });
      },
      getStyle: function getStyle$1() {
        var height = this.height,
            visible = this.visible;

        var style = getStyle(this);
        if (height) {
          style = _extends$1({}, style, { height: height });
        }

        if (!visible && !style.display) {
          style = _extends$1({}, style, { display: 'none' });
        }

        return style;
      },
      saveRowRef: function saveRowRef() {
        this.rowRef = this.$el;

        var isAnyColumnsFixed = this.isAnyColumnsFixed,
            fixed = this.fixed,
            expandedRow = this.expandedRow,
            ancestorKeys = this.ancestorKeys;


        if (!isAnyColumnsFixed) {
          return;
        }

        if (!fixed && expandedRow) {
          this.setExpandedRowHeight();
        }

        if (!fixed && ancestorKeys.length >= 0) {
          this.setRowHeight();
        }
      }
    },

    render: function render() {
      var _this3 = this;

      var h = arguments[0];

      if (!this.shouldRender) {
        return null;
      }

      var prefixCls = this.prefixCls,
          columns = this.columns,
          record = this.record,
          rowKey = this.rowKey,
          index = this.index,
          _customRow = this.customRow,
          customRow = _customRow === undefined ? noop$P : _customRow,
          indent = this.indent,
          indentSize = this.indentSize,
          hovered = this.hovered,
          height = this.height,
          visible = this.visible,
          components = this.components,
          hasExpandIcon = this.hasExpandIcon,
          renderExpandIcon = this.renderExpandIcon,
          renderExpandIconCell = this.renderExpandIconCell;

      var BodyRow = components.body.row;
      var BodyCell = components.body.cell;

      var className = '';

      if (hovered) {
        className += ' ' + prefixCls + '-hover';
      }

      var cells = [];

      renderExpandIconCell(cells);

      for (var i = 0; i < columns.length; i += 1) {
        var column = columns[i];

        warning$1(column.onCellClick === undefined, 'column[onCellClick] is deprecated, please use column[customCell] instead.');

        cells.push(h(TableCell, {
          attrs: {
            prefixCls: prefixCls,
            record: record,
            indentSize: indentSize,
            indent: indent,
            index: index,
            column: column,

            expandIcon: hasExpandIcon(i) && renderExpandIcon(),
            component: BodyCell
          },
          key: column.key || column.dataIndex }));
      }

      var _ref = customRow(record, index) || {},
          customClass = _ref['class'],
          customClassName = _ref.className,
          customStyle = _ref.style,
          rowProps = _objectWithoutProperties(_ref, ['class', 'className', 'style']);

      var style = { height: typeof height === 'number' ? height + 'px' : height };

      if (!visible) {
        style.display = 'none';
      }

      style = _extends$1({}, style, customStyle);
      var rowClassName = classnames(prefixCls, className, prefixCls + '-level-' + indent, customClassName, customClass);
      var rowPropEvents = rowProps.on || {};
      var bodyRowProps = mergeProps(_extends$1({}, rowProps, { style: style }), {
        on: {
          click: function click(e) {
            _this3.onRowClick(e, rowPropEvents.click);
          },
          dblclick: function dblclick(e) {
            _this3.onRowDoubleClick(e, rowPropEvents.dblclick);
          },
          mouseenter: function mouseenter(e) {
            _this3.onMouseEnter(e, rowPropEvents.mouseenter);
          },
          mouseleave: function mouseleave(e) {
            _this3.onMouseLeave(e, rowPropEvents.mouseleave);
          },
          contextmenu: function contextmenu(e) {
            _this3.onContextMenu(e, rowPropEvents.contextmenu);
          }
        },
        'class': rowClassName
      }, {
        attrs: {
          'data-row-key': rowKey
        }
      });
      return h(
        BodyRow,
        bodyRowProps,
        [cells]
      );
    }
  };

  function getRowHeight$1(state, props) {
    var expandedRowsHeight = state.expandedRowsHeight,
        fixedColumnsBodyRowsHeight = state.fixedColumnsBodyRowsHeight;
    var fixed = props.fixed,
        rowKey = props.rowKey;


    if (!fixed) {
      return null;
    }

    if (expandedRowsHeight[rowKey]) {
      return expandedRowsHeight[rowKey];
    }

    if (fixedColumnsBodyRowsHeight[rowKey]) {
      return fixedColumnsBodyRowsHeight[rowKey];
    }

    return null;
  }

  var TableRow$1 = connect(function (state, props) {
    var currentHoverKey = state.currentHoverKey,
        expandedRowKeys = state.expandedRowKeys;
    var rowKey = props.rowKey,
        ancestorKeys = props.ancestorKeys;

    var visible = ancestorKeys.length === 0 || ancestorKeys.every(function (k) {
      return expandedRowKeys.includes(k);
    });

    return {
      visible: visible,
      hovered: currentHoverKey === rowKey,
      height: getRowHeight$1(state, props)
    };
  })(TableRow);

  var ExpandIcon = {
    name: 'ExpandIcon',
    mixins: [BaseMixin],
    props: {
      record: VuePropTypes.object,
      prefixCls: VuePropTypes.string,
      expandable: VuePropTypes.any,
      expanded: VuePropTypes.bool,
      needIndentSpaced: VuePropTypes.bool
    },
    methods: {
      onExpand: function onExpand(e) {
        this.__emit('expand', this.record, e);
      }
    },

    render: function render() {
      var h = arguments[0];
      var expandable = this.expandable,
          prefixCls = this.prefixCls,
          onExpand = this.onExpand,
          needIndentSpaced = this.needIndentSpaced,
          expanded = this.expanded;

      if (expandable) {
        var expandClassName = expanded ? 'expanded' : 'collapsed';
        return h('span', {
          'class': prefixCls + '-expand-icon ' + prefixCls + '-' + expandClassName,
          on: {
            'click': onExpand
          }
        });
      }
      if (needIndentSpaced) {
        return h('span', { 'class': prefixCls + '-expand-icon ' + prefixCls + '-spaced' });
      }
      return null;
    }
  };

  var ExpandableRow = {
    mixins: [BaseMixin],
    name: 'ExpandableRow',
    props: {
      prefixCls: VuePropTypes.string.isRequired,
      rowKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]).isRequired,
      fixed: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.bool]),
      record: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.array]).isRequired,
      indentSize: VuePropTypes.number,
      needIndentSpaced: VuePropTypes.bool.isRequired,
      expandRowByClick: VuePropTypes.bool,
      expanded: VuePropTypes.bool.isRequired,
      expandIconAsCell: VuePropTypes.bool,
      expandIconColumnIndex: VuePropTypes.number,
      childrenColumnName: VuePropTypes.string,
      expandedRowRender: VuePropTypes.func,
      expandIcon: VuePropTypes.func
      // onExpandedChange: PropTypes.func.isRequired,
      // onRowClick: PropTypes.func,
      // children: PropTypes.func.isRequired,
    },

    beforeDestroy: function beforeDestroy() {
      this.handleDestroy();
    },

    methods: {
      hasExpandIcon: function hasExpandIcon(columnIndex) {
        var _$props = this.$props,
            expandRowByClick = _$props.expandRowByClick,
            expandIcon = _$props.expandIcon;


        if (this.tempExpandIconAsCell || columnIndex !== this.tempExpandIconColumnIndex) {
          return false;
        }

        return !!expandIcon || !expandRowByClick;
      },
      handleExpandChange: function handleExpandChange(record, event) {
        var expanded = this.expanded,
            rowKey = this.rowKey;

        this.__emit('expandedChange', !expanded, record, event, rowKey);
      },
      handleDestroy: function handleDestroy() {
        var rowKey = this.rowKey,
            record = this.record;

        this.__emit('expandedChange', false, record, null, rowKey, true);
      },
      handleRowClick: function handleRowClick(record, index, event) {
        var expandRowByClick = this.expandRowByClick;

        if (expandRowByClick) {
          this.handleExpandChange(record, event);
        }
        this.__emit('rowClick', record, index, event);
      },
      renderExpandIcon: function renderExpandIcon() {
        var h = this.$createElement;
        var prefixCls = this.prefixCls,
            expanded = this.expanded,
            record = this.record,
            needIndentSpaced = this.needIndentSpaced,
            expandIcon = this.expandIcon;

        if (expandIcon) {
          return expandIcon({
            prefixCls: prefixCls,
            expanded: expanded,
            record: record,
            needIndentSpaced: needIndentSpaced,
            expandable: this.expandable,
            onExpand: this.handleExpandChange
          });
        }
        return h(ExpandIcon, {
          attrs: {
            expandable: this.expandable,
            prefixCls: prefixCls,

            needIndentSpaced: needIndentSpaced,
            expanded: expanded,
            record: record
          },
          on: {
            'expand': this.handleExpandChange
          }
        });
      },
      renderExpandIconCell: function renderExpandIconCell(cells) {
        var h = this.$createElement;

        if (!this.tempExpandIconAsCell) {
          return;
        }
        var prefixCls = this.prefixCls;


        cells.push(h(
          'td',
          { 'class': prefixCls + '-expand-icon-cell', key: 'rc-table-expand-icon-cell' },
          [this.renderExpandIcon()]
        ));
      }
    },

    render: function render() {
      var childrenColumnName = this.childrenColumnName,
          expandedRowRender = this.expandedRowRender,
          indentSize = this.indentSize,
          record = this.record,
          fixed = this.fixed,
          $scopedSlots = this.$scopedSlots,
          expanded = this.expanded;


      this.tempExpandIconAsCell = fixed !== 'right' ? this.expandIconAsCell : false;
      this.tempExpandIconColumnIndex = fixed !== 'right' ? this.expandIconColumnIndex : -1;
      var childrenData = record[childrenColumnName];
      this.expandable = !!(childrenData || expandedRowRender);
      var expandableRowProps = {
        props: {
          indentSize: indentSize,
          expanded: expanded, // not used in TableRow, but it's required to re-render TableRow when `expanded` changes
          hasExpandIcon: this.hasExpandIcon,
          renderExpandIcon: this.renderExpandIcon,
          renderExpandIconCell: this.renderExpandIconCell
        },

        on: {
          rowClick: this.handleRowClick
        }
      };

      return $scopedSlots['default'] && $scopedSlots['default'](expandableRowProps);
    }
  };

  var ExpandableRow$1 = connect(function (_ref, _ref2) {
    var expandedRowKeys = _ref.expandedRowKeys;
    var rowKey = _ref2.rowKey;
    return {
      expanded: expandedRowKeys.includes(rowKey)
    };
  })(ExpandableRow);

  function noop$Q() {}
  var BaseTable = {
    name: 'BaseTable',
    props: {
      fixed: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.bool]),
      columns: VuePropTypes.array.isRequired,
      tableClassName: VuePropTypes.string.isRequired,
      hasHead: VuePropTypes.bool.isRequired,
      hasBody: VuePropTypes.bool.isRequired,
      store: VuePropTypes.object.isRequired,
      expander: VuePropTypes.object.isRequired,
      getRowKey: VuePropTypes.func,
      isAnyColumnsFixed: VuePropTypes.bool
    },
    inject: {
      table: { 'default': function _default() {
          return {};
        } }
    },
    methods: {
      getColumns: function getColumns(cols) {
        var _$props = this.$props,
            _$props$columns = _$props.columns,
            columns = _$props$columns === undefined ? [] : _$props$columns,
            fixed = _$props.fixed;
        var table = this.table;
        var prefixCls = table.$props.prefixCls;

        return (cols || columns).map(function (column) {
          return _extends$1({}, column, {
            className: !!column.fixed && !fixed ? classnames(prefixCls + '-fixed-columns-in-body', column.className || column['class']) : column.className || column['class']
          });
        });
      },
      handleRowHover: function handleRowHover(isHover, key) {
        this.store.setState({
          currentHoverKey: isHover ? key : null
        });
      },
      renderRows: function renderRows(renderData, indent) {
        var _this = this;

        var ancestorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        var h = this.$createElement;
        var _table = this.table,
            columnManager = _table.columnManager,
            components = _table.sComponents,
            prefixCls = _table.prefixCls,
            childrenColumnName = _table.childrenColumnName,
            rowClassName = _table.rowClassName,
            _table$customRow = _table.customRow,
            customRow = _table$customRow === undefined ? noop$Q : _table$customRow;

        var _getListeners = getListeners(this.table),
            _getListeners$rowClic = _getListeners.rowClick,
            onRowClick = _getListeners$rowClic === undefined ? noop$Q : _getListeners$rowClic,
            _getListeners$rowDoub = _getListeners.rowDoubleclick,
            onRowDoubleClick = _getListeners$rowDoub === undefined ? noop$Q : _getListeners$rowDoub,
            _getListeners$rowCont = _getListeners.rowContextmenu,
            onRowContextMenu = _getListeners$rowCont === undefined ? noop$Q : _getListeners$rowCont,
            _getListeners$rowMous = _getListeners.rowMouseenter,
            onRowMouseEnter = _getListeners$rowMous === undefined ? noop$Q : _getListeners$rowMous,
            _getListeners$rowMous2 = _getListeners.rowMouseleave,
            onRowMouseLeave = _getListeners$rowMous2 === undefined ? noop$Q : _getListeners$rowMous2;

        var getRowKey = this.getRowKey,
            fixed = this.fixed,
            expander = this.expander,
            isAnyColumnsFixed = this.isAnyColumnsFixed;


        var rows = [];

        var _loop = function _loop(i) {
          var record = renderData[i];
          var key = getRowKey(record, i);
          var className = typeof rowClassName === 'string' ? rowClassName : rowClassName(record, i, indent);

          var onHoverProps = {};
          if (columnManager.isAnyColumnsFixed()) {
            onHoverProps.hover = _this.handleRowHover;
          }

          var leafColumns = void 0;
          if (fixed === 'left') {
            leafColumns = columnManager.leftLeafColumns();
          } else if (fixed === 'right') {
            leafColumns = columnManager.rightLeafColumns();
          } else {
            leafColumns = _this.getColumns(columnManager.leafColumns());
          }

          var rowPrefixCls = prefixCls + '-row';

          var expandableRowProps = {
            props: _extends$1({}, expander.props, {
              fixed: fixed,
              index: i,
              prefixCls: rowPrefixCls,
              record: record,
              rowKey: key,
              needIndentSpaced: expander.needIndentSpaced
            }),
            key: key,
            on: {
              // ...expander.on,
              rowClick: onRowClick,
              expandedChange: expander.handleExpandChange
            },
            scopedSlots: {
              'default': function _default(expandableRow) {
                var tableRowProps = mergeProps({
                  props: {
                    fixed: fixed,
                    indent: indent,
                    record: record,
                    index: i,
                    prefixCls: rowPrefixCls,
                    childrenColumnName: childrenColumnName,
                    columns: leafColumns,
                    rowKey: key,
                    ancestorKeys: ancestorKeys,
                    components: components,
                    isAnyColumnsFixed: isAnyColumnsFixed,
                    customRow: customRow
                  },
                  on: _extends$1({
                    rowDoubleclick: onRowDoubleClick,
                    rowContextmenu: onRowContextMenu,
                    rowMouseenter: onRowMouseEnter,
                    rowMouseleave: onRowMouseLeave
                  }, onHoverProps),
                  'class': className,
                  ref: 'row_' + i + '_' + indent
                }, expandableRow);
                return h(TableRow$1, tableRowProps);
              }
            }
          };
          var row = h(ExpandableRow$1, expandableRowProps);

          rows.push(row);
          expander.renderRows(_this.renderRows, rows, record, i, indent, fixed, key, ancestorKeys);
        };

        for (var i = 0; i < renderData.length; i += 1) {
          _loop(i);
        }
        return rows;
      }
    },

    render: function render() {
      var h = arguments[0];
      var _table2 = this.table,
          components = _table2.sComponents,
          prefixCls = _table2.prefixCls,
          scroll = _table2.scroll,
          data = _table2.data,
          getBodyWrapper = _table2.getBodyWrapper;
      var _$props2 = this.$props,
          expander = _$props2.expander,
          tableClassName = _$props2.tableClassName,
          hasHead = _$props2.hasHead,
          hasBody = _$props2.hasBody,
          fixed = _$props2.fixed,
          isAnyColumnsFixed = _$props2.isAnyColumnsFixed;

      var columns = this.getColumns();
      var tableStyle = {};

      if (!fixed && scroll.x) {
        // 当有固定列时，width auto 会导致 body table 的宽度撑不开，从而固定列无法对齐
        // 详情见：https://github.com/ant-design/ant-design/issues/22160
        var tableWidthScrollX = isAnyColumnsFixed ? 'max-content' : 'auto';
        // not set width, then use content fixed width
        tableStyle.width = scroll.x === true ? tableWidthScrollX : scroll.x;
        tableStyle.width = typeof tableStyle.width === 'number' ? tableStyle.width + 'px' : tableStyle.width;
      }
      if (fixed) {
        var width = columns.reduce(function (sum, _ref) {
          var w = _ref.width;

          return sum + parseFloat(w, 10);
        }, 0);
        if (width > 0) {
          tableStyle.width = width + 'px';
        }
      }

      var Table = hasBody ? components.table : 'table';
      var BodyWrapper = components.body.wrapper;

      var body = void 0;
      if (hasBody) {
        body = h(
          BodyWrapper,
          { 'class': prefixCls + '-tbody' },
          [this.renderRows(data, 0)]
        );
        if (getBodyWrapper) {
          body = getBodyWrapper(body);
        }
      }
      return h(
        Table,
        { 'class': tableClassName, style: tableStyle, key: 'table' },
        [h(ColGroup, {
          attrs: { columns: columns, fixed: fixed }
        }), hasHead && h(TableHeader, {
          attrs: { expander: expander, columns: columns, fixed: fixed }
        }), body]
      );
    }
  };

  var BaseTable$1 = connect()(BaseTable);

  var HeadTable = {
    name: 'HeadTable',
    props: {
      fixed: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.bool]),
      columns: VuePropTypes.array.isRequired,
      tableClassName: VuePropTypes.string.isRequired,
      handleBodyScrollLeft: VuePropTypes.func.isRequired,
      expander: VuePropTypes.object.isRequired
    },
    inject: {
      table: { 'default': function _default() {
          return {};
        } }
    },
    render: function render() {
      var h = arguments[0];
      var columns = this.columns,
          fixed = this.fixed,
          tableClassName = this.tableClassName,
          handleBodyScrollLeft = this.handleBodyScrollLeft,
          expander = this.expander,
          table = this.table;
      var prefixCls = table.prefixCls,
          scroll = table.scroll,
          showHeader = table.showHeader,
          saveRef = table.saveRef;
      var useFixedHeader = table.useFixedHeader;

      var headStyle = {};

      var scrollbarWidth = measureScrollbar({ direction: 'vertical' });

      if (scroll.y) {
        useFixedHeader = true;
        // https://github.com/ant-design/ant-design/issues/17051
        var scrollbarWidthOfHeader = measureScrollbar({ direction: 'horizontal', prefixCls: prefixCls });
        // Add negative margin bottom for scroll bar overflow bug
        if (scrollbarWidthOfHeader > 0 && !fixed) {
          headStyle.marginBottom = '-' + scrollbarWidthOfHeader + 'px';
          headStyle.paddingBottom = '0px';
          // https://github.com/ant-design/ant-design/pull/19986
          headStyle.minWidth = scrollbarWidth + 'px';
          // https://github.com/ant-design/ant-design/issues/17051
          headStyle.overflowX = 'scroll';
          headStyle.overflowY = scrollbarWidth === 0 ? 'hidden' : 'scroll';
        }
      }

      if (!useFixedHeader || !showHeader) {
        return null;
      }
      return h(
        'div',
        babelHelperVueJsxMergeProps([{
          key: 'headTable'
        }, {
          directives: [{
            name: 'ant-ref',
            value: fixed ? function () {} : saveRef('headTable')
          }]
        }, {
          'class': classnames(prefixCls + '-header', _defineProperty({}, prefixCls + '-hide-scrollbar', scrollbarWidth > 0)),
          style: headStyle,
          on: {
            'scroll': handleBodyScrollLeft
          }
        }]),
        [h(BaseTable$1, {
          attrs: {
            tableClassName: tableClassName,
            hasHead: true,
            hasBody: false,
            fixed: fixed,
            columns: columns,
            expander: expander
          }
        })]
      );
    }
  };

  var BodyTable = {
    name: 'BodyTable',
    props: {
      fixed: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.bool]),
      columns: VuePropTypes.array.isRequired,
      tableClassName: VuePropTypes.string.isRequired,
      handleBodyScroll: VuePropTypes.func.isRequired,
      handleWheel: VuePropTypes.func.isRequired,
      getRowKey: VuePropTypes.func.isRequired,
      expander: VuePropTypes.object.isRequired,
      isAnyColumnsFixed: VuePropTypes.bool
    },
    inject: {
      table: { 'default': function _default() {
          return {};
        } }
    },
    render: function render() {
      var h = arguments[0];
      var _table = this.table,
          prefixCls = _table.prefixCls,
          scroll = _table.scroll;
      var columns = this.columns,
          fixed = this.fixed,
          tableClassName = this.tableClassName,
          getRowKey = this.getRowKey,
          handleBodyScroll = this.handleBodyScroll,
          handleWheel = this.handleWheel,
          expander = this.expander,
          isAnyColumnsFixed = this.isAnyColumnsFixed;
      var _table2 = this.table,
          useFixedHeader = _table2.useFixedHeader,
          saveRef = _table2.saveRef;

      var bodyStyle = _extends$1({}, this.table.bodyStyle);
      var innerBodyStyle = {};

      if (scroll.x || fixed) {
        bodyStyle.overflowX = bodyStyle.overflowX || 'scroll';
        // Fix weired webkit render bug
        // https://github.com/ant-design/ant-design/issues/7783
        bodyStyle.WebkitTransform = 'translate3d (0, 0, 0)';
      }

      if (scroll.y) {
        // maxHeight will make fixed-Table scrolling not working
        // so we only set maxHeight to body-Table here
        var maxHeight = bodyStyle.maxHeight || scroll.y;
        maxHeight = typeof maxHeight === 'number' ? maxHeight + 'px' : maxHeight;
        if (fixed) {
          innerBodyStyle.maxHeight = maxHeight;
          innerBodyStyle.overflowY = bodyStyle.overflowY || 'scroll';
        } else {
          bodyStyle.maxHeight = maxHeight;
        }
        bodyStyle.overflowY = bodyStyle.overflowY || 'scroll';
        useFixedHeader = true;

        // Add negative margin bottom for scroll bar overflow bug
        var scrollbarWidth = measureScrollbar({ direction: 'vertical' });
        if (scrollbarWidth > 0 && fixed) {
          bodyStyle.marginBottom = '-' + scrollbarWidth + 'px';
          bodyStyle.paddingBottom = '0px';
        }
      }

      var baseTable = h(BaseTable$1, {
        attrs: {
          tableClassName: tableClassName,
          hasHead: !useFixedHeader,
          hasBody: true,
          fixed: fixed,
          columns: columns,
          expander: expander,
          getRowKey: getRowKey,
          isAnyColumnsFixed: isAnyColumnsFixed
        }
      });

      if (fixed && columns.length) {
        var refName = void 0;
        if (columns[0].fixed === 'left' || columns[0].fixed === true) {
          refName = 'fixedColumnsBodyLeft';
        } else if (columns[0].fixed === 'right') {
          refName = 'fixedColumnsBodyRight';
        }
        delete bodyStyle.overflowX;
        delete bodyStyle.overflowY;
        return h(
          'div',
          { key: 'bodyTable', 'class': prefixCls + '-body-outer', style: _extends$1({}, bodyStyle) },
          [h(
            'div',
            babelHelperVueJsxMergeProps([{
              'class': prefixCls + '-body-inner',
              style: innerBodyStyle
            }, {
              directives: [{
                name: 'ant-ref',
                value: saveRef(refName)
              }]
            }, {
              on: {
                'wheel': handleWheel,
                'scroll': handleBodyScroll
              }
            }]),
            [baseTable]
          )]
        );
      }
      // Should provides `tabIndex` if use scroll to enable keyboard scroll
      var useTabIndex = scroll && (scroll.x || scroll.y);

      return h(
        'div',
        babelHelperVueJsxMergeProps([{
          attrs: {
            tabIndex: useTabIndex ? -1 : undefined
          },
          key: 'bodyTable',
          'class': prefixCls + '-body',
          style: bodyStyle
        }, {
          directives: [{
            name: 'ant-ref',
            value: saveRef('bodyTable')
          }]
        }, {
          on: {
            'wheel': handleWheel,
            'scroll': handleBodyScroll
          }
        }]),
        [baseTable]
      );
    }
  };

  var ExpandableTableProps = function ExpandableTableProps() {
    return {
      expandIconAsCell: VuePropTypes.bool,
      expandRowByClick: VuePropTypes.bool,
      expandedRowKeys: VuePropTypes.array,
      expandedRowClassName: VuePropTypes.func,
      defaultExpandAllRows: VuePropTypes.bool,
      defaultExpandedRowKeys: VuePropTypes.array,
      expandIconColumnIndex: VuePropTypes.number,
      expandedRowRender: VuePropTypes.func,
      expandIcon: VuePropTypes.func,
      childrenColumnName: VuePropTypes.string,
      indentSize: VuePropTypes.number,
      // onExpand: PropTypes.func,
      // onExpandedRowsChange: PropTypes.func,
      columnManager: VuePropTypes.object.isRequired,
      store: VuePropTypes.object.isRequired,
      prefixCls: VuePropTypes.string.isRequired,
      data: VuePropTypes.array,
      getRowKey: VuePropTypes.func
    };
  };

  var ExpandableTable = {
    name: 'ExpandableTable',
    mixins: [BaseMixin],
    props: initDefaultProps(ExpandableTableProps(), {
      expandIconAsCell: false,
      expandedRowClassName: function expandedRowClassName() {
        return '';
      },
      expandIconColumnIndex: 0,
      defaultExpandAllRows: false,
      defaultExpandedRowKeys: [],
      childrenColumnName: 'children',
      indentSize: 15
    }),

    data: function data() {
      var data = this.data,
          childrenColumnName = this.childrenColumnName,
          defaultExpandAllRows = this.defaultExpandAllRows,
          expandedRowKeys = this.expandedRowKeys,
          defaultExpandedRowKeys = this.defaultExpandedRowKeys,
          getRowKey = this.getRowKey;


      var finalExpandedRowKeys = [];
      var rows = [].concat(_toConsumableArray(data));

      if (defaultExpandAllRows) {
        for (var i = 0; i < rows.length; i += 1) {
          var row = rows[i];
          finalExpandedRowKeys.push(getRowKey(row, i));
          rows = rows.concat(row[childrenColumnName] || []);
        }
      } else {
        finalExpandedRowKeys = expandedRowKeys || defaultExpandedRowKeys;
      }

      // this.columnManager = props.columnManager
      // this.store = props.store

      this.store.setState({
        expandedRowsHeight: {},
        expandedRowKeys: finalExpandedRowKeys
      });
      return {};
    },
    mounted: function mounted() {
      this.handleUpdated();
    },
    updated: function updated() {
      this.handleUpdated();
    },

    watch: {
      expandedRowKeys: function expandedRowKeys(val) {
        var _this = this;

        this.$nextTick(function () {
          _this.store.setState({
            expandedRowKeys: val
          });
        });
      }
    },
    methods: {
      handleUpdated: function handleUpdated() {
        // We should record latest expanded rows to avoid multiple rows remove cause `onExpandedRowsChange` trigger many times
        this.latestExpandedRows = null;
      },
      handleExpandChange: function handleExpandChange(expanded, record, event, rowKey) {
        var destroy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

        if (event) {
          event.preventDefault();
          event.stopPropagation();
        }

        var _store$getState = this.store.getState(),
            expandedRowKeys = _store$getState.expandedRowKeys;

        if (expanded) {
          // row was expaned
          expandedRowKeys = [].concat(_toConsumableArray(expandedRowKeys), [rowKey]);
        } else {
          // row was collapse
          var expandedRowIndex = expandedRowKeys.indexOf(rowKey);
          if (expandedRowIndex !== -1) {
            expandedRowKeys = remove$3(expandedRowKeys, rowKey);
          }
        }

        if (!this.expandedRowKeys) {
          this.store.setState({ expandedRowKeys: expandedRowKeys });
        }
        // De-dup of repeat call
        if (!this.latestExpandedRows || !shallowequal(this.latestExpandedRows, expandedRowKeys)) {
          this.latestExpandedRows = expandedRowKeys;
          this.__emit('expandedRowsChange', expandedRowKeys);
        }

        if (!destroy) {
          this.__emit('expand', expanded, record);
        }
      },
      renderExpandIndentCell: function renderExpandIndentCell(rows, fixed) {
        var prefixCls = this.prefixCls,
            expandIconAsCell = this.expandIconAsCell;

        if (!expandIconAsCell || fixed === 'right' || !rows.length) {
          return;
        }

        var iconColumn = {
          key: 'rc-table-expand-icon-cell',
          className: prefixCls + '-expand-icon-th',
          title: '',
          rowSpan: rows.length
        };

        rows[0].unshift(_extends$1({}, iconColumn, { column: iconColumn }));
      },
      renderExpandedRow: function renderExpandedRow(record, index, expandedRowRender, className, ancestorKeys, indent, fixed) {
        var _this2 = this;

        var h = this.$createElement;
        var prefixCls = this.prefixCls,
            expandIconAsCell = this.expandIconAsCell,
            indentSize = this.indentSize;

        var parentKey = ancestorKeys[ancestorKeys.length - 1];
        var rowKey = parentKey + '-extra-row';
        var components = {
          body: {
            row: 'tr',
            cell: 'td'
          }
        };
        var colCount = void 0;
        if (fixed === 'left') {
          colCount = this.columnManager.leftLeafColumns().length;
        } else if (fixed === 'right') {
          colCount = this.columnManager.rightLeafColumns().length;
        } else {
          colCount = this.columnManager.leafColumns().length;
        }
        var columns = [{
          key: 'extra-row',
          customRender: function customRender() {
            var _store$getState2 = _this2.store.getState(),
                expandedRowKeys = _store$getState2.expandedRowKeys;

            var expanded = expandedRowKeys.includes(parentKey);
            return {
              attrs: {
                colSpan: colCount
              },
              children: fixed !== 'right' ? expandedRowRender(record, index, indent, expanded) : '&nbsp;'
            };
          }
        }];
        if (expandIconAsCell && fixed !== 'right') {
          columns.unshift({
            key: 'expand-icon-placeholder',
            customRender: function customRender() {
              return null;
            }
          });
        }

        return h(TableRow$1, {
          key: rowKey,
          attrs: { columns: columns,

            rowKey: rowKey,
            ancestorKeys: ancestorKeys,
            prefixCls: prefixCls + '-expanded-row',
            indentSize: indentSize,
            indent: indent,
            fixed: fixed,
            components: components,
            expandedRow: true,
            hasExpandIcon: function hasExpandIcon() {}
          },
          'class': className });
      },
      renderRows: function renderRows(_renderRows, rows, record, index, indent, fixed, parentKey, ancestorKeys) {
        var expandedRowClassName = this.expandedRowClassName,
            expandedRowRender = this.expandedRowRender,
            childrenColumnName = this.childrenColumnName;

        var childrenData = record[childrenColumnName];
        var nextAncestorKeys = [].concat(_toConsumableArray(ancestorKeys), [parentKey]);
        var nextIndent = indent + 1;

        if (expandedRowRender) {
          rows.push(this.renderExpandedRow(record, index, expandedRowRender, expandedRowClassName(record, index, indent), nextAncestorKeys, nextIndent, fixed));
        }

        if (childrenData) {
          rows.push.apply(rows, _toConsumableArray(_renderRows(childrenData, nextIndent, nextAncestorKeys)));
        }
      }
    },

    render: function render() {
      var data = this.data,
          childrenColumnName = this.childrenColumnName,
          $scopedSlots = this.$scopedSlots;

      var props = getOptionProps(this);
      var needIndentSpaced = data.some(function (record) {
        return record[childrenColumnName];
      });

      return $scopedSlots['default'] && $scopedSlots['default']({
        props: props,
        on: getListeners(this),
        needIndentSpaced: needIndentSpaced,
        renderRows: this.renderRows,
        handleExpandChange: this.handleExpandChange,
        renderExpandIndentCell: this.renderExpandIndentCell
      });
    }
  };

  var ExpandableTable$1 = connect()(ExpandableTable);

  var T = {
    name: 'Table',
    mixins: [BaseMixin],
    props: initDefaultProps({
      data: VuePropTypes.array,
      useFixedHeader: VuePropTypes.bool,
      columns: VuePropTypes.array,
      prefixCls: VuePropTypes.string,
      bodyStyle: VuePropTypes.object,
      rowKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.func]),
      rowClassName: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.func]),
      customRow: VuePropTypes.func,
      customHeaderRow: VuePropTypes.func,
      // onRowClick: PropTypes.func,
      // onRowDoubleClick: PropTypes.func,
      // onRowContextMenu: PropTypes.func,
      // onRowMouseEnter: PropTypes.func,
      // onRowMouseLeave: PropTypes.func,
      showHeader: VuePropTypes.bool,
      title: VuePropTypes.func,
      id: VuePropTypes.string,
      footer: VuePropTypes.func,
      emptyText: VuePropTypes.any,
      scroll: VuePropTypes.object,
      rowRef: VuePropTypes.func,
      getBodyWrapper: VuePropTypes.func,
      components: VuePropTypes.shape({
        table: VuePropTypes.any,
        header: VuePropTypes.shape({
          wrapper: VuePropTypes.any,
          row: VuePropTypes.any,
          cell: VuePropTypes.any
        }),
        body: VuePropTypes.shape({
          wrapper: VuePropTypes.any,
          row: VuePropTypes.any,
          cell: VuePropTypes.any
        })
      }),
      expandIconAsCell: VuePropTypes.bool,
      expandedRowKeys: VuePropTypes.array,
      expandedRowClassName: VuePropTypes.func,
      defaultExpandAllRows: VuePropTypes.bool,
      defaultExpandedRowKeys: VuePropTypes.array,
      expandIconColumnIndex: VuePropTypes.number,
      expandedRowRender: VuePropTypes.func,
      childrenColumnName: VuePropTypes.string,
      indentSize: VuePropTypes.number,
      expandRowByClick: VuePropTypes.bool,
      expandIcon: VuePropTypes.func,
      tableLayout: VuePropTypes.string,
      transformCellText: VuePropTypes.func
    }, {
      data: [],
      useFixedHeader: false,
      rowKey: 'key',
      rowClassName: function rowClassName() {
        return '';
      },
      prefixCls: 'rc-table',
      bodyStyle: {},
      showHeader: true,
      scroll: {},
      rowRef: function rowRef() {
        return null;
      },
      emptyText: function emptyText() {
        return 'No Data';
      },
      customHeaderRow: function customHeaderRow() {}
    }),
    data: function data() {
      this.preData = [].concat(_toConsumableArray(this.data));
      return {
        columnManager: new ColumnManager(this.columns),
        sComponents: merge_1({
          table: 'table',
          header: {
            wrapper: 'thead',
            row: 'tr',
            cell: 'th'
          },
          body: {
            wrapper: 'tbody',
            row: 'tr',
            cell: 'td'
          }
        }, this.components)
      };
    },

    watch: {
      components: function components() {
        this._components = merge_1({
          table: 'table',
          header: {
            wrapper: 'thead',
            row: 'tr',
            cell: 'th'
          },
          body: {
            wrapper: 'tbody',
            row: 'tr',
            cell: 'td'
          }
        }, this.components);
      },
      columns: function columns(val) {
        if (val) {
          this.columnManager.reset(val);
        }
      },
      data: function data(val) {
        var _this = this;

        if (val.length === 0 && this.hasScrollX()) {
          this.$nextTick(function () {
            _this.resetScrollX();
          });
        }
      }
    },

    // static childContextTypes = {
    //   table: PropTypes.any,
    //   components: PropTypes.any,
    // },

    created: function created() {
      var _this2 = this;

      ['rowClick', 'rowDoubleclick', 'rowContextmenu', 'rowMouseenter', 'rowMouseleave'].forEach(function (name) {
        warning$1(getListeners(_this2)[name] === undefined, name + ' is deprecated, please use customRow instead.');
      });

      warning$1(this.getBodyWrapper === undefined, 'getBodyWrapper is deprecated, please use custom components instead.');

      // this.columnManager = new ColumnManager(this.columns, this.$slots.default)

      this.store = create({
        currentHoverKey: null,
        fixedColumnsHeadRowsHeight: [],
        fixedColumnsBodyRowsHeight: {}
      });

      this.setScrollPosition('left');

      this.debouncedWindowResize = debounce$1(this.handleWindowResize, 150);
    },
    provide: function provide() {
      return {
        table: this
      };
    },
    mounted: function mounted() {
      var _this3 = this;

      this.$nextTick(function () {
        if (_this3.columnManager.isAnyColumnsFixed()) {
          _this3.handleWindowResize();
          _this3.resizeEvent = addEventListenerWrap(window, 'resize', _this3.debouncedWindowResize);
        }
        // https://github.com/ant-design/ant-design/issues/11635
        if (_this3.ref_headTable) {
          _this3.ref_headTable.scrollLeft = 0;
        }
        if (_this3.ref_bodyTable) {
          _this3.ref_bodyTable.scrollLeft = 0;
        }
      });
    },
    updated: function updated() {
      var _this4 = this;

      this.$nextTick(function () {
        if (_this4.columnManager.isAnyColumnsFixed()) {
          _this4.handleWindowResize();
          if (!_this4.resizeEvent) {
            _this4.resizeEvent = addEventListenerWrap(window, 'resize', _this4.debouncedWindowResize);
          }
        }
      });
    },
    beforeDestroy: function beforeDestroy() {
      if (this.resizeEvent) {
        this.resizeEvent.remove();
      }
      if (this.debouncedWindowResize) {
        this.debouncedWindowResize.cancel();
      }
    },

    methods: {
      getRowKey: function getRowKey(record, index) {
        var rowKey = this.rowKey;
        var key = typeof rowKey === 'function' ? rowKey(record, index) : record[rowKey];
        warning$1(key !== undefined, 'Each record in table should have a unique `key` prop,' + 'or set `rowKey` to an unique primary key.');
        return key === undefined ? index : key;
      },
      setScrollPosition: function setScrollPosition(position) {
        this.scrollPosition = position;
        if (this.tableNode) {
          var prefixCls = this.prefixCls;

          if (position === 'both') {
            componentClasses(this.tableNode).remove(new RegExp('^' + prefixCls + '-scroll-position-.+$')).add(prefixCls + '-scroll-position-left').add(prefixCls + '-scroll-position-right');
          } else {
            componentClasses(this.tableNode).remove(new RegExp('^' + prefixCls + '-scroll-position-.+$')).add(prefixCls + '-scroll-position-' + position);
          }
        }
      },
      setScrollPositionClassName: function setScrollPositionClassName() {
        var node = this.ref_bodyTable;
        var scrollToLeft = node.scrollLeft === 0;
        var scrollToRight = node.scrollLeft + 1 >= node.children[0].getBoundingClientRect().width - node.getBoundingClientRect().width;
        if (scrollToLeft && scrollToRight) {
          this.setScrollPosition('both');
        } else if (scrollToLeft) {
          this.setScrollPosition('left');
        } else if (scrollToRight) {
          this.setScrollPosition('right');
        } else if (this.scrollPosition !== 'middle') {
          this.setScrollPosition('middle');
        }
      },
      isTableLayoutFixed: function isTableLayoutFixed() {
        var _$props = this.$props,
            tableLayout = _$props.tableLayout,
            _$props$columns = _$props.columns,
            columns = _$props$columns === undefined ? [] : _$props$columns,
            useFixedHeader = _$props.useFixedHeader,
            _$props$scroll = _$props.scroll,
            scroll = _$props$scroll === undefined ? {} : _$props$scroll;

        if (typeof tableLayout !== 'undefined') {
          return tableLayout === 'fixed';
        }
        // if one column is ellipsis, use fixed table layout to fix align issue
        if (columns.some(function (_ref) {
          var ellipsis = _ref.ellipsis;
          return !!ellipsis;
        })) {
          return true;
        }
        // if header fixed, use fixed table layout to fix align issue
        if (useFixedHeader || scroll.y) {
          return true;
        }
        // if scroll.x is number/px/% width value, we should fixed table layout
        // to avoid long word layout broken issue
        if (scroll.x && scroll.x !== true && scroll.x !== 'max-content') {
          return true;
        }
        return false;
      },
      handleWindowResize: function handleWindowResize() {
        this.syncFixedTableRowHeight();
        this.setScrollPositionClassName();
      },
      syncFixedTableRowHeight: function syncFixedTableRowHeight() {
        var tableRect = this.tableNode.getBoundingClientRect();
        // If tableNode's height less than 0, suppose it is hidden and don't recalculate rowHeight.
        // see: https://github.com/ant-design/ant-design/issues/4836
        if (tableRect.height !== undefined && tableRect.height <= 0) {
          return;
        }
        var prefixCls = this.prefixCls;

        var headRows = this.ref_headTable ? this.ref_headTable.querySelectorAll('thead') : this.ref_bodyTable.querySelectorAll('thead');
        var bodyRows = this.ref_bodyTable.querySelectorAll('.' + prefixCls + '-row') || [];
        var fixedColumnsHeadRowsHeight = [].map.call(headRows, function (row) {
          return row.getBoundingClientRect().height ? row.getBoundingClientRect().height - 0.5 : 'auto';
        });
        var state = this.store.getState();
        var fixedColumnsBodyRowsHeight = [].reduce.call(bodyRows, function (acc, row) {
          var rowKey = row.getAttribute('data-row-key');
          var height = row.getBoundingClientRect().height || state.fixedColumnsBodyRowsHeight[rowKey] || 'auto';
          acc[rowKey] = height;
          return acc;
        }, {});
        if (shallowequal(state.fixedColumnsHeadRowsHeight, fixedColumnsHeadRowsHeight) && shallowequal(state.fixedColumnsBodyRowsHeight, fixedColumnsBodyRowsHeight)) {
          return;
        }
        this.store.setState({
          fixedColumnsHeadRowsHeight: fixedColumnsHeadRowsHeight,
          fixedColumnsBodyRowsHeight: fixedColumnsBodyRowsHeight
        });
      },
      resetScrollX: function resetScrollX() {
        if (this.ref_headTable) {
          this.ref_headTable.scrollLeft = 0;
        }
        if (this.ref_bodyTable) {
          this.ref_bodyTable.scrollLeft = 0;
        }
      },
      hasScrollX: function hasScrollX() {
        var _scroll = this.scroll,
            scroll = _scroll === undefined ? {} : _scroll;

        return 'x' in scroll;
      },
      handleBodyScrollLeft: function handleBodyScrollLeft(e) {
        // Fix https://github.com/ant-design/ant-design/issues/7635
        if (e.currentTarget !== e.target) {
          return;
        }
        var target = e.target;
        var _scroll2 = this.scroll,
            scroll = _scroll2 === undefined ? {} : _scroll2;
        var ref_headTable = this.ref_headTable,
            ref_bodyTable = this.ref_bodyTable;

        if (target.scrollLeft !== this.lastScrollLeft && scroll.x) {
          if (target === ref_bodyTable && ref_headTable) {
            ref_headTable.scrollLeft = target.scrollLeft;
          } else if (target === ref_headTable && ref_bodyTable) {
            ref_bodyTable.scrollLeft = target.scrollLeft;
          }
          this.setScrollPositionClassName();
        }
        // Remember last scrollLeft for scroll direction detecting.
        this.lastScrollLeft = target.scrollLeft;
      },
      handleBodyScrollTop: function handleBodyScrollTop(e) {
        var target = e.target;
        // Fix https://github.com/ant-design/ant-design/issues/9033
        if (e.currentTarget !== target) {
          return;
        }
        var _scroll3 = this.scroll,
            scroll = _scroll3 === undefined ? {} : _scroll3;
        var ref_headTable = this.ref_headTable,
            ref_bodyTable = this.ref_bodyTable,
            ref_fixedColumnsBodyLeft = this.ref_fixedColumnsBodyLeft,
            ref_fixedColumnsBodyRight = this.ref_fixedColumnsBodyRight;

        if (target.scrollTop !== this.lastScrollTop && scroll.y && target !== ref_headTable) {
          var scrollTop = target.scrollTop;
          if (ref_fixedColumnsBodyLeft && target !== ref_fixedColumnsBodyLeft) {
            ref_fixedColumnsBodyLeft.scrollTop = scrollTop;
          }
          if (ref_fixedColumnsBodyRight && target !== ref_fixedColumnsBodyRight) {
            ref_fixedColumnsBodyRight.scrollTop = scrollTop;
          }
          if (ref_bodyTable && target !== ref_bodyTable) {
            ref_bodyTable.scrollTop = scrollTop;
          }
        }
        // Remember last scrollTop for scroll direction detecting.
        this.lastScrollTop = target.scrollTop;
      },
      handleBodyScroll: function handleBodyScroll(e) {
        this.handleBodyScrollLeft(e);
        this.handleBodyScrollTop(e);
      },
      handleWheel: function handleWheel(event) {
        var _$props$scroll2 = this.$props.scroll,
            scroll = _$props$scroll2 === undefined ? {} : _$props$scroll2;

        if (window.navigator.userAgent.match(/Trident\/7\./) && scroll.y) {
          event.preventDefault();
          var wd = event.deltaY;
          var target = event.target;
          var bodyTable = this.ref_bodyTable,
              fixedColumnsBodyLeft = this.ref_fixedColumnsBodyLeft,
              fixedColumnsBodyRight = this.ref_fixedColumnsBodyRight;

          var scrollTop = 0;

          if (this.lastScrollTop) {
            scrollTop = this.lastScrollTop + wd;
          } else {
            scrollTop = wd;
          }

          if (fixedColumnsBodyLeft && target !== fixedColumnsBodyLeft) {
            fixedColumnsBodyLeft.scrollTop = scrollTop;
          }
          if (fixedColumnsBodyRight && target !== fixedColumnsBodyRight) {
            fixedColumnsBodyRight.scrollTop = scrollTop;
          }
          if (bodyTable && target !== bodyTable) {
            bodyTable.scrollTop = scrollTop;
          }
        }
      },

      // saveChildrenRef(name, node) {
      //   this[`ref_${name}`] = node;
      // },
      saveRef: function saveRef(name) {
        var _this5 = this;

        return function (node) {
          _this5['ref_' + name] = node;
        };
      },
      saveTableNodeRef: function saveTableNodeRef(node) {
        this.tableNode = node;
      },
      renderMainTable: function renderMainTable() {
        var h = this.$createElement;
        var scroll = this.scroll,
            prefixCls = this.prefixCls;

        var isAnyColumnsFixed = this.columnManager.isAnyColumnsFixed();
        var scrollable = isAnyColumnsFixed || scroll.x || scroll.y;

        var table = [this.renderTable({
          columns: this.columnManager.groupedColumns(),
          isAnyColumnsFixed: isAnyColumnsFixed
        }), this.renderEmptyText(), this.renderFooter()];

        return scrollable ? h(
          'div',
          { 'class': prefixCls + '-scroll' },
          [table]
        ) : table;
      },
      renderLeftFixedTable: function renderLeftFixedTable() {
        var h = this.$createElement;
        var prefixCls = this.prefixCls;


        return h(
          'div',
          { 'class': prefixCls + '-fixed-left' },
          [this.renderTable({
            columns: this.columnManager.leftColumns(),
            fixed: 'left'
          })]
        );
      },
      renderRightFixedTable: function renderRightFixedTable() {
        var h = this.$createElement;
        var prefixCls = this.prefixCls;


        return h(
          'div',
          { 'class': prefixCls + '-fixed-right' },
          [this.renderTable({
            columns: this.columnManager.rightColumns(),
            fixed: 'right'
          })]
        );
      },
      renderTable: function renderTable(options) {
        var h = this.$createElement;
        var columns = options.columns,
            fixed = options.fixed,
            isAnyColumnsFixed = options.isAnyColumnsFixed;
        var prefixCls = this.prefixCls,
            _scroll4 = this.scroll,
            scroll = _scroll4 === undefined ? {} : _scroll4;

        var tableClassName = scroll.x || fixed ? prefixCls + '-fixed' : '';

        var headTable = h(HeadTable, {
          key: 'head',
          attrs: { columns: columns,
            fixed: fixed,
            tableClassName: tableClassName,
            handleBodyScrollLeft: this.handleBodyScrollLeft,
            expander: this.expander
          }
        });

        var bodyTable = h(BodyTable, {
          key: 'body',
          attrs: { columns: columns,
            fixed: fixed,
            tableClassName: tableClassName,
            getRowKey: this.getRowKey,
            handleWheel: this.handleWheel,
            handleBodyScroll: this.handleBodyScroll,
            expander: this.expander,
            isAnyColumnsFixed: isAnyColumnsFixed
          }
        });

        return [headTable, bodyTable];
      },
      renderTitle: function renderTitle() {
        var h = this.$createElement;
        var title = this.title,
            prefixCls = this.prefixCls,
            data = this.data;

        return title ? h(
          'div',
          { 'class': prefixCls + '-title', key: 'title' },
          [title(data)]
        ) : null;
      },
      renderFooter: function renderFooter() {
        var h = this.$createElement;
        var footer = this.footer,
            prefixCls = this.prefixCls,
            data = this.data;

        return footer ? h(
          'div',
          { 'class': prefixCls + '-footer', key: 'footer' },
          [footer(data)]
        ) : null;
      },
      renderEmptyText: function renderEmptyText() {
        var h = this.$createElement;
        var emptyText = this.emptyText,
            prefixCls = this.prefixCls,
            data = this.data;

        if (data.length) {
          return null;
        }
        var emptyClassName = prefixCls + '-placeholder';
        return h(
          'div',
          { 'class': emptyClassName, key: 'emptyText' },
          [typeof emptyText === 'function' ? emptyText() : emptyText]
        );
      }
    },

    render: function render() {
      var _classNames,
          _this6 = this;

      var h = arguments[0];

      var props = getOptionProps(this);
      var columnManager = this.columnManager,
          getRowKey = this.getRowKey;

      var prefixCls = props.prefixCls;

      var tableClassName = classnames(props.prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-fixed-header', props.useFixedHeader || props.scroll && props.scroll.y), _defineProperty(_classNames, prefixCls + '-scroll-position-left ' + prefixCls + '-scroll-position-right', this.scrollPosition === 'both'), _defineProperty(_classNames, prefixCls + '-scroll-position-' + this.scrollPosition, this.scrollPosition !== 'both'), _defineProperty(_classNames, prefixCls + '-layout-fixed', this.isTableLayoutFixed()), _classNames));

      var hasLeftFixed = columnManager.isAnyColumnsLeftFixed();
      var hasRightFixed = columnManager.isAnyColumnsRightFixed();

      var expandableTableProps = {
        props: _extends$1({}, props, {
          columnManager: columnManager,
          getRowKey: getRowKey
        }),
        on: getListeners(this),
        scopedSlots: {
          'default': function _default(expander) {
            _this6.expander = expander;
            return h(
              'div',
              babelHelperVueJsxMergeProps([{
                directives: [{
                  name: 'ant-ref',
                  value: _this6.saveTableNodeRef
                }]
              }, {
                'class': tableClassName
                // style={props.style}
                // id={props.id}
              }]),
              [_this6.renderTitle(), h(
                'div',
                { 'class': prefixCls + '-content' },
                [_this6.renderMainTable(), hasLeftFixed && _this6.renderLeftFixedTable(), hasRightFixed && _this6.renderRightFixedTable()]
              )]
            );
          }
        }
      };
      return h(
        Provider,
        {
          attrs: { store: this.store }
        },
        [h(ExpandableTable$1, expandableTableProps)]
      );
    }
  };

  var Column = {
    name: 'Column',
    props: {
      rowSpan: VuePropTypes.number,
      colSpan: VuePropTypes.number,
      title: VuePropTypes.any,
      dataIndex: VuePropTypes.string,
      width: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string]),
      ellipsis: VuePropTypes.bool,
      fixed: VuePropTypes.oneOf([true, 'left', 'right']),
      align: VuePropTypes.oneOf(['left', 'center', 'right']),
      customRender: VuePropTypes.func,
      className: VuePropTypes.string,
      // onCellClick: PropTypes.func,
      customCell: VuePropTypes.func,
      customHeaderCell: VuePropTypes.func
    }
  };

  var ColumnGroup = {
    name: 'ColumnGroup',
    props: {
      title: VuePropTypes.any
    },
    isTableColumnGroup: true
  };

  var Table = {
    name: 'Table',
    Column: Column,
    ColumnGroup: ColumnGroup,
    props: T.props,
    methods: {
      getTableNode: function getTableNode() {
        return this.$refs.table.tableNode;
      },
      getBodyTable: function getBodyTable() {
        return this.$refs.table.ref_bodyTable;
      },
      normalize: function normalize() {
        var _this = this;

        var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        var columns = [];
        elements.forEach(function (element) {
          if (!element.tag) {
            return;
          }
          var key = getKey(element);
          var style = getStyle(element);
          var cls = getClass(element);
          var props = getOptionProps(element);
          var events = getEvents(element);
          var listeners = {};
          Object.keys(events).forEach(function (e) {
            var k = 'on-' + e;
            listeners[camelize(k)] = events[e];
          });

          var _getSlots = getSlots(element),
              children = _getSlots['default'],
              title = _getSlots.title;

          var column = _extends$1({ title: title }, props, { style: style, 'class': cls }, listeners);
          if (key) {
            column.key = key;
          }
          if (getSlotOptions(element).isTableColumnGroup) {
            column.children = _this.normalize(typeof children === 'function' ? children() : children);
          } else {
            var customRender = element.data && element.data.scopedSlots && element.data.scopedSlots['default'];
            column.customRender = column.customRender || customRender;
          }
          columns.push(column);
        });
        return columns;
      }
    },
    render: function render() {
      var h = arguments[0];
      var $slots = this.$slots,
          normalize = this.normalize;

      var props = getOptionProps(this);
      var columns = props.columns || normalize($slots['default']);
      var tProps = {
        props: _extends$1({}, props, {
          columns: columns
        }),
        on: getListeners(this),
        ref: 'table'
      };
      return h(T, tProps);
    }
  };

  /**
   * Determine if a DOM element matches a CSS selector
   *
   * @param {Element} elem
   * @param {String} selector
   * @return {Boolean}
   * @api public
   */

  function matches$1(elem, selector) {
    // Vendor-specific implementations of `Element.prototype.matches()`.
    var proto = window.Element.prototype;
    var nativeMatches = proto.matches ||
        proto.mozMatchesSelector ||
        proto.msMatchesSelector ||
        proto.oMatchesSelector ||
        proto.webkitMatchesSelector;

    if (!elem || elem.nodeType !== 1) {
      return false;
    }

    var parentElem = elem.parentNode;

    // use native 'matches'
    if (nativeMatches) {
      return nativeMatches.call(elem, selector);
    }

    // native support for `matches` is missing and a fallback is required
    var nodes = parentElem.querySelectorAll(selector);
    var len = nodes.length;

    for (var i = 0; i < len; i++) {
      if (nodes[i] === elem) {
        return true;
      }
    }

    return false;
  }

  /**
   * Expose `matches`
   */

  var domMatches = matches$1;

  /**
   * Module dependencies
   */



  /**
   * @param element {Element}
   * @param selector {String}
   * @param context {Element}
   * @return {Element}
   */
  var domClosest = function (element, selector, context) {
    context = context || document;
    // guard against orphans
    element = { parentNode: element };

    while ((element = element.parentNode) && element !== context) {
      if (domMatches(element, selector)) {
        return element;
      }
    }
  };

  var FilterDropdownMenuWrapper = {
    name: 'FilterDropdownMenuWrapper',
    methods: {
      handelClick: function handelClick(e) {
        e.stopPropagation();
        //this.$emit('click', e);
      }
    },
    render: function render() {
      var h = arguments[0];
      var $slots = this.$slots,
          handelClick = this.handelClick;

      return h(
        'div',
        {
          on: {
            'click': handelClick
          }
        },
        [$slots['default']]
      );
    }
  };

  var Store = VuePropTypes.shape({
    setState: VuePropTypes.func,
    getState: VuePropTypes.func,
    subscribe: VuePropTypes.func
  }).loose;
  var createStore = create;

  var PaginationProps$1 = PaginationProps();
  var SpinProps$1 = SpinProps();

  // export type CompareFn<T> = ((a: T, b: T) => number);
  var ColumnFilterItem = VuePropTypes.shape({
    text: VuePropTypes.string,
    value: VuePropTypes.string,
    children: VuePropTypes.array
  }).loose;

  var ColumnProps = {
    title: VuePropTypes.any,
    // key?: React.Key;
    dataIndex: VuePropTypes.string,
    customRender: VuePropTypes.func,
    customCell: VuePropTypes.func,
    customHeaderCell: VuePropTypes.func,
    align: VuePropTypes.oneOf(['left', 'right', 'center']),
    ellipsis: VuePropTypes.bool,
    filters: VuePropTypes.arrayOf(ColumnFilterItem),
    // onFilter: (value: any, record: T) => PropTypes.bool,
    filterMultiple: VuePropTypes.bool,
    filterDropdown: VuePropTypes.any,
    filterDropdownVisible: VuePropTypes.bool,
    // onFilterDropdownVisibleChange?: (visible: boolean) => void;
    sorter: VuePropTypes.oneOfType([VuePropTypes.boolean, VuePropTypes.func]),
    defaultSortOrder: VuePropTypes.oneOf(['ascend', 'descend']),
    colSpan: VuePropTypes.number,
    width: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
    className: VuePropTypes.string,
    fixed: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.oneOf(['left', 'right'])]),
    filterIcon: VuePropTypes.any,
    filteredValue: VuePropTypes.array,
    filtered: VuePropTypes.bool,
    defaultFilteredValue: VuePropTypes.array,
    sortOrder: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.oneOf(['ascend', 'descend'])]),
    sortDirections: VuePropTypes.array
    // children?: ColumnProps<T>[];
    // onCellClick?: (record: T, event: any) => void;
    // onCell?: (record: T) => any;
    // onHeaderCell?: (props: ColumnProps<T>) => any;
  };

  // export interface TableComponents {
  //   table?: any;
  //   header?: {
  //     wrapper?: any;
  //     row?: any;
  //     cell?: any;
  //   };
  //   body?: {
  //     wrapper?: any;
  //     row?: any;
  //     cell?: any;
  //   };
  // }

  var TableLocale = VuePropTypes.shape({
    filterTitle: VuePropTypes.string,
    filterConfirm: VuePropTypes.any,
    filterReset: VuePropTypes.any,
    emptyText: VuePropTypes.any,
    selectAll: VuePropTypes.any,
    selectInvert: VuePropTypes.any,
    sortTitle: VuePropTypes.string,
    expand: VuePropTypes.string,
    collapse: VuePropTypes.string
  }).loose;

  var RowSelectionType = VuePropTypes.oneOf(['checkbox', 'radio']);
  // export type SelectionSelectFn<T> = (record: T, selected: boolean, selectedRows: Object[]) => any;

  var TableRowSelection = {
    type: RowSelectionType,
    selectedRowKeys: VuePropTypes.array,
    // onChange?: (selectedRowKeys: string[] | number[], selectedRows: Object[]) => any;
    getCheckboxProps: VuePropTypes.func,
    // onSelect?: SelectionSelectFn<T>;
    // onSelectAll?: (selected: boolean, selectedRows: Object[], changeRows: Object[]) => any;
    // onSelectInvert?: (selectedRows: Object[]) => any;
    selections: VuePropTypes.oneOfType([VuePropTypes.array, VuePropTypes.bool]),
    hideDefaultSelections: VuePropTypes.bool,
    fixed: VuePropTypes.bool,
    columnWidth: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
    selectWay: VuePropTypes.oneOf(['onSelect', 'onSelectMultiple', 'onSelectAll', 'onSelectInvert']),
    columnTitle: VuePropTypes.any
  };

  var TableProps = {
    prefixCls: VuePropTypes.string,
    dropdownPrefixCls: VuePropTypes.string,
    rowSelection: VuePropTypes.oneOfType([VuePropTypes.shape(TableRowSelection).loose, null]),
    pagination: VuePropTypes.oneOfType([VuePropTypes.shape(_extends$1({}, PaginationProps$1, {
      position: VuePropTypes.oneOf(['top', 'bottom', 'both'])
    })).loose, VuePropTypes.bool]),
    size: VuePropTypes.oneOf(['default', 'middle', 'small', 'large']),
    dataSource: VuePropTypes.array,
    components: VuePropTypes.object,
    columns: VuePropTypes.array,
    rowKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.func]),
    rowClassName: VuePropTypes.func,
    expandedRowRender: VuePropTypes.any,
    defaultExpandAllRows: VuePropTypes.bool,
    defaultExpandedRowKeys: VuePropTypes.array,
    expandedRowKeys: VuePropTypes.array,
    expandIconAsCell: VuePropTypes.bool,
    expandIconColumnIndex: VuePropTypes.number,
    expandRowByClick: VuePropTypes.bool,
    // onExpandedRowsChange?: (expandedRowKeys: string[] | number[]) => void;
    //  onExpand?: (expanded: boolean, record: T) => void;
    // onChange?: (pagination: PaginationProps | boolean, filters: string[], sorter: Object) => any;
    loading: VuePropTypes.oneOfType([VuePropTypes.shape(SpinProps$1).loose, VuePropTypes.bool]),
    locale: TableLocale,
    indentSize: VuePropTypes.number,
    // onRowClick?: (record: T, index: number, event: Event) => any;
    customRow: VuePropTypes.func,
    customHeaderRow: VuePropTypes.func,
    useFixedHeader: VuePropTypes.bool,
    bordered: VuePropTypes.bool,
    showHeader: VuePropTypes.bool,
    footer: VuePropTypes.func,
    title: VuePropTypes.func,
    scroll: VuePropTypes.object,
    childrenColumnName: VuePropTypes.oneOfType([VuePropTypes.array, VuePropTypes.string]),
    bodyStyle: VuePropTypes.any,
    sortDirections: VuePropTypes.array,
    tableLayout: VuePropTypes.string,
    getPopupContainer: VuePropTypes.func,
    expandIcon: VuePropTypes.func,
    transformCellText: VuePropTypes.func
    // className?: PropTypes.string,
    // style?: React.CSSProperties;
    // children?: React.ReactNode;
  };

  // export interface TableStateFilters {
  //   [key: string]: string[];
  // }

  // export interface TableState<T> {
  //   pagination: PaginationProps;
  //   filters: TableStateFilters;
  //   sortColumn: ColumnProps<T> | null;
  //   sortOrder: PropTypes.string,
  // }

  // export type SelectionItemSelectFn = (key: string[]) => any;

  // export interface SelectionItem {
  //   key: PropTypes.string,
  //   text: PropTypes.any,
  //   onSelect: SelectionItemSelectFn;
  // }

  var SelectionCheckboxAllProps = {
    store: Store,
    locale: VuePropTypes.any,
    disabled: VuePropTypes.bool,
    getCheckboxPropsByItem: VuePropTypes.func,
    getRecordKey: VuePropTypes.func,
    data: VuePropTypes.array,
    prefixCls: VuePropTypes.string,
    // onSelect: (key: string, index: number, selectFunc: any) => void;
    hideDefaultSelections: VuePropTypes.bool,
    selections: VuePropTypes.oneOfType([VuePropTypes.array, VuePropTypes.bool]),
    getPopupContainer: VuePropTypes.func
  };

  // export interface SelectionCheckboxAllState {
  //   checked: PropTypes.bool,
  //   indeterminate: PropTypes.bool,
  // }

  var SelectionBoxProps = {
    store: Store,
    type: RowSelectionType,
    defaultSelection: VuePropTypes.arrayOf([VuePropTypes.string, VuePropTypes.number]),
    rowIndex: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
    name: VuePropTypes.string,
    disabled: VuePropTypes.bool,
    id: VuePropTypes.string
    // onChange: React.ChangeEventHandler<HTMLInputElement>;
  };

  // export interface SelectionBoxState {
  //   checked?: PropTypes.bool,
  // }

  var FilterMenuProps = {
    _propsSymbol: VuePropTypes.any,
    locale: TableLocale,
    selectedKeys: VuePropTypes.arrayOf([VuePropTypes.string, VuePropTypes.number]),
    column: VuePropTypes.object,
    confirmFilter: VuePropTypes.func,
    prefixCls: VuePropTypes.string,
    dropdownPrefixCls: VuePropTypes.string,
    getPopupContainer: VuePropTypes.func,
    handleFilter: VuePropTypes.func
  };

  // export interface FilterMenuState {
  //   selectedKeys: string[];
  //   keyPathOfSelectedItem: { [key: string]: string };
  //   visible?: PropTypes.bool,
  // }

  function flatArray() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var childrenName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'children';

    var result = [];
    var loop = function loop(array) {
      array.forEach(function (item) {
        if (item[childrenName]) {
          var newItem = _extends$1({}, item);
          delete newItem[childrenName];
          result.push(newItem);
          if (item[childrenName].length > 0) {
            loop(item[childrenName]);
          }
        } else {
          result.push(item);
        }
      });
    };
    loop(data);
    return result;
  }

  function treeMap(tree, mapper) {
    var childrenName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';

    return tree.map(function (node, index) {
      var extra = {};
      if (node[childrenName]) {
        extra[childrenName] = treeMap(node[childrenName], mapper, childrenName);
      }
      return _extends$1({}, mapper(node, index), extra);
    });
  }

  function flatFilter(tree, callback) {
    return tree.reduce(function (acc, node) {
      if (callback(node)) {
        acc.push(node);
      }
      if (node.children) {
        var children = flatFilter(node.children, callback);
        acc.push.apply(acc, _toConsumableArray(children));
      }
      return acc;
    }, []);
  }

  // export function normalizeColumns (elements) {
  //   const columns = []
  //   React.Children.forEach(elements, (element) => {
  //     if (!React.isValidElement(element)) {
  //       return
  //     }
  //     const column = {
  //       ...element.props,
  //     }
  //     if (element.key) {
  //       column.key = element.key
  //     }
  //     if (element.type && element.type.__ANT_TABLE_COLUMN_GROUP) {
  //       column.children = normalizeColumns(column.children)
  //     }
  //     columns.push(column)
  //   })
  //   return columns
  // }

  function generateValueMaps(items) {
    var maps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    (items || []).forEach(function (_ref) {
      var value = _ref.value,
          children = _ref.children;

      maps[value.toString()] = value;
      generateValueMaps(children, maps);
    });
    return maps;
  }

  function stopPropagation(e) {
    e.stopPropagation();
  }

  var FilterDropdown = {
    name: 'FilterMenu',
    mixins: [BaseMixin],
    props: initDefaultProps(FilterMenuProps, {
      handleFilter: function handleFilter() {},

      column: {}
    }),

    data: function data() {
      var visible = 'filterDropdownVisible' in this.column ? this.column.filterDropdownVisible : false;
      this.preProps = _extends$1({}, getOptionProps(this));
      return {
        sSelectedKeys: this.selectedKeys,
        sKeyPathOfSelectedItem: {}, // 记录所有有选中子菜单的祖先菜单
        sVisible: visible,
        sValueKeys: generateValueMaps(this.column.filters)
      };
    },

    watch: {
      _propsSymbol: function _propsSymbol() {
        var nextProps = getOptionProps(this);
        var column = nextProps.column;

        var newState = {};

        /**
         * if the state is visible the component should ignore updates on selectedKeys prop to avoid
         * that the user selection is lost
         * this happens frequently when a table is connected on some sort of realtime data
         * Fixes https://github.com/ant-design/ant-design/issues/10289 and
         * https://github.com/ant-design/ant-design/issues/10209
         */
        if ('selectedKeys' in nextProps && !shallowequal(this.preProps.selectedKeys, nextProps.selectedKeys)) {
          newState.sSelectedKeys = nextProps.selectedKeys;
        }
        if (!shallowequal((this.preProps.column || {}).filters, (nextProps.column || {}).filters)) {
          newState.sValueKeys = generateValueMaps(nextProps.column.filters);
        }
        if ('filterDropdownVisible' in column) {
          newState.sVisible = column.filterDropdownVisible;
        }
        if (Object.keys(newState).length > 0) {
          this.setState(newState);
        }
        this.preProps = _extends$1({}, nextProps);
      }
    },

    mounted: function mounted() {
      var _this = this;

      var column = this.column;

      this.$nextTick(function () {
        _this.setNeverShown(column);
      });
    },
    updated: function updated() {
      var _this2 = this;

      var column = this.column;

      this.$nextTick(function () {
        _this2.setNeverShown(column);
      });
    },

    methods: {
      getDropdownVisible: function getDropdownVisible() {
        return this.neverShown ? false : this.sVisible;
      },
      setNeverShown: function setNeverShown(column) {
        var rootNode = this.$el;
        var filterBelongToScrollBody = !!domClosest(rootNode, '.ant-table-scroll');
        if (filterBelongToScrollBody) {
          // When fixed column have filters, there will be two dropdown menus
          // Filter dropdown menu inside scroll body should never be shown
          // To fix https://github.com/ant-design/ant-design/issues/5010 and
          // https://github.com/ant-design/ant-design/issues/7909
          this.neverShown = !!column.fixed;
        }
      },
      setSelectedKeys: function setSelectedKeys(_ref) {
        var selectedKeys = _ref.selectedKeys;

        this.setState({ sSelectedKeys: selectedKeys });
      },
      setVisible: function setVisible(visible) {
        var column = this.column;

        if (!('filterDropdownVisible' in column)) {
          this.setState({ sVisible: visible });
        }
        if (column.onFilterDropdownVisibleChange) {
          column.onFilterDropdownVisibleChange(visible);
        }
      },
      handleClearFilters: function handleClearFilters() {
        this.setState({
          sSelectedKeys: []
        }, this.handleConfirm);
      },
      handleConfirm: function handleConfirm() {
        var _this3 = this;

        this.setVisible(false);
        this.confirmFilter2();
        // Call `setSelectedKeys` & `confirm` in the same time will make filter data not up to date
        // https://github.com/ant-design/ant-design/issues/12284
        this.$forceUpdate();
        this.$nextTick(function () {
          _this3.confirmFilter;
        });
      },
      onVisibleChange: function onVisibleChange(visible) {
        this.setVisible(visible);
        var column = this.$props.column;
        // https://github.com/ant-design/ant-design/issues/17833

        if (!visible && !(column.filterDropdown instanceof Function)) {
          this.confirmFilter2();
        }
      },
      handleMenuItemClick: function handleMenuItemClick(info) {
        var selectedKeys = this.$data.sSelectedKeys;

        if (!info.keyPath || info.keyPath.length <= 1) {
          return;
        }
        var keyPathOfSelectedItem = this.$data.sKeyPathOfSelectedItem;

        if (selectedKeys && selectedKeys.indexOf(info.key) >= 0) {
          // deselect SubMenu child
          delete keyPathOfSelectedItem[info.key];
        } else {
          // select SubMenu child
          keyPathOfSelectedItem[info.key] = info.keyPath;
        }
        this.setState({ sKeyPathOfSelectedItem: keyPathOfSelectedItem });
      },
      hasSubMenu: function hasSubMenu() {
        var _column$filters = this.column.filters,
            filters = _column$filters === undefined ? [] : _column$filters;

        return filters.some(function (item) {
          return !!(item.children && item.children.length > 0);
        });
      },
      confirmFilter2: function confirmFilter2() {
        var _$props = this.$props,
            column = _$props.column,
            propSelectedKeys = _$props.selectedKeys,
            confirmFilter = _$props.confirmFilter;
        var _$data = this.$data,
            selectedKeys = _$data.sSelectedKeys,
            valueKeys = _$data.sValueKeys;
        var filterDropdown = column.filterDropdown;


        if (!shallowequal(selectedKeys, propSelectedKeys)) {
          confirmFilter(column, filterDropdown ? selectedKeys : selectedKeys.map(function (key) {
            return valueKeys[key];
          }).filter(function (key) {
            return key !== undefined;
          }));
        }
      },
      renderMenus: function renderMenus(items) {
        var _this4 = this;

        var h = this.$createElement;
        var _$props2 = this.$props,
            dropdownPrefixCls = _$props2.dropdownPrefixCls,
            prefixCls = _$props2.prefixCls;

        return items.map(function (item) {
          if (item.children && item.children.length > 0) {
            var sKeyPathOfSelectedItem = _this4.sKeyPathOfSelectedItem;

            var containSelected = Object.keys(sKeyPathOfSelectedItem).some(function (key) {
              return sKeyPathOfSelectedItem[key].indexOf(item.value) >= 0;
            });
            var subMenuCls = classnames(prefixCls + '-dropdown-submenu', _defineProperty({}, dropdownPrefixCls + '-submenu-contain-selected', containSelected));
            return h(
              connected,
              {
                attrs: { title: item.text, popupClassName: subMenuCls },
                key: item.value },
              [_this4.renderMenus(item.children)]
            );
          }
          return _this4.renderMenuItem(item);
        });
      },
      renderFilterIcon: function renderFilterIcon() {
        var _classNames2;

        var h = this.$createElement;
        var column = this.column,
            locale = this.locale,
            prefixCls = this.prefixCls,
            selectedKeys = this.selectedKeys;

        var filtered = selectedKeys && selectedKeys.length > 0;
        var filterIcon = column.filterIcon;
        if (typeof filterIcon === 'function') {
          filterIcon = filterIcon(filtered, column);
        }
        var dropdownIconClass = classnames((_classNames2 = {}, _defineProperty(_classNames2, prefixCls + '-selected', 'filtered' in column ? column.filtered : filtered), _defineProperty(_classNames2, prefixCls + '-open', this.getDropdownVisible()), _classNames2));
        if (!filterIcon) {
          return h(Icon$1, {
            attrs: {
              title: locale.filterTitle,
              type: 'filter',
              theme: 'filled'
            },
            'class': dropdownIconClass,
            on: {
              'click': stopPropagation
            }
          });
        }
        if (filterIcon.length === 1 && isValidElement(filterIcon[0])) {
          return cloneElement(filterIcon[0], {
            on: {
              click: stopPropagation
            },
            'class': classnames(prefixCls + '-icon', dropdownIconClass)
          });
        }
        return h(
          'span',
          { 'class': classnames(prefixCls + '-icon', dropdownIconClass) },
          [filterIcon]
        );
      },
      renderMenuItem: function renderMenuItem(item) {
        var h = this.$createElement;
        var column = this.column;
        var selectedKeys = this.$data.sSelectedKeys;

        var multiple = 'filterMultiple' in column ? column.filterMultiple : true;

        var input = multiple ? h(Checkbox$1, {
          attrs: { checked: selectedKeys && selectedKeys.indexOf(item.value) >= 0 }
        }) : h(Radio, {
          attrs: { checked: selectedKeys && selectedKeys.indexOf(item.value) >= 0 }
        });

        return h(
          connected$1,
          { key: item.value },
          [input, h('span', [item.text])]
        );
      }
    },

    render: function render() {
      var _this5 = this;

      var h = arguments[0];
      var originSelectedKeys = this.$data.sSelectedKeys;
      var column = this.column,
          locale = this.locale,
          prefixCls = this.prefixCls,
          dropdownPrefixCls = this.dropdownPrefixCls,
          getPopupContainer = this.getPopupContainer;
      // default multiple selection in filter dropdown

      var multiple = 'filterMultiple' in column ? column.filterMultiple : true;
      var dropdownMenuClass = classnames(_defineProperty({}, dropdownPrefixCls + '-menu-without-submenu', !this.hasSubMenu()));
      var filterDropdown = column.filterDropdown;

      if (filterDropdown instanceof Function) {
        filterDropdown = filterDropdown({
          prefixCls: dropdownPrefixCls + '-custom',
          setSelectedKeys: function setSelectedKeys(selectedKeys) {
            return _this5.setSelectedKeys({ selectedKeys: selectedKeys });
          },
          selectedKeys: originSelectedKeys,
          confirm: this.handleConfirm,
          clearFilters: this.handleClearFilters,
          filters: column.filters,
          visible: this.getDropdownVisible(),
          column: column
        });
      }

      var menus = filterDropdown ? h(
        FilterDropdownMenuWrapper,
        { 'class': prefixCls + '-dropdown' },
        [filterDropdown]
      ) : h(
        FilterDropdownMenuWrapper,
        { 'class': prefixCls + '-dropdown' },
        [h(
          Menu,
          {
            attrs: {
              multiple: multiple,

              prefixCls: dropdownPrefixCls + '-menu',

              selectedKeys: originSelectedKeys && originSelectedKeys.map(function (val) {
                return val;
              }),
              getPopupContainer: getPopupContainer
            },
            on: {
              'click': this.handleMenuItemClick,
              'select': this.setSelectedKeys,
              'deselect': this.setSelectedKeys
            },
            'class': dropdownMenuClass
          },
          [this.renderMenus(column.filters)]
        ), h(
          'div',
          { 'class': prefixCls + '-dropdown-btns' },
          [h(
            'a',
            { 'class': prefixCls + '-dropdown-link confirm', on: {
                'click': this.handleConfirm
              }
            },
            [locale.filterConfirm]
          ), h(
            'a',
            { 'class': prefixCls + '-dropdown-link clear', on: {
                'click': this.handleClearFilters
              }
            },
            [locale.filterReset]
          )]
        )]
      );

      return h(
        Dropdown$1,
        {
          attrs: {
            trigger: ['click'],
            placement: 'bottomRight',
            visible: this.getDropdownVisible(),

            getPopupContainer: getPopupContainer,
            forceRender: true
          },
          on: {
            'visibleChange': this.onVisibleChange
          }
        },
        [h(
          'template',
          { slot: 'overlay' },
          [menus]
        ), this.renderFilterIcon()]
      );
    }
  };

  var SelectionBox = {
    name: 'SelectionBox',
    mixins: [BaseMixin],
    props: SelectionBoxProps,
    data: function data() {
      return {
        checked: this.getCheckState(this.$props)
      };
    },
    mounted: function mounted() {
      this.subscribe();
    },
    beforeDestroy: function beforeDestroy() {
      if (this.unsubscribe) {
        this.unsubscribe();
      }
    },

    methods: {
      getCheckState: function getCheckState(props) {
        var store = props.store,
            defaultSelection = props.defaultSelection,
            rowIndex = props.rowIndex;

        var checked = false;
        if (store.getState().selectionDirty) {
          checked = store.getState().selectedRowKeys.indexOf(rowIndex) >= 0;
        } else {
          checked = store.getState().selectedRowKeys.indexOf(rowIndex) >= 0 || defaultSelection.indexOf(rowIndex) >= 0;
        }
        return checked;
      },
      subscribe: function subscribe() {
        var _this = this;

        var store = this.store;

        this.unsubscribe = store.subscribe(function () {
          var checked = _this.getCheckState(_this.$props);
          _this.setState({ checked: checked });
        });
      }
    },

    render: function render() {
      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          type = _getOptionProps.type,
          rowIndex = _getOptionProps.rowIndex,
          rest = _objectWithoutProperties(_getOptionProps, ['type', 'rowIndex']);

      var checked = this.checked;

      var checkboxProps = {
        props: _extends$1({
          checked: checked
        }, rest),
        on: getListeners(this)
      };
      if (type === 'radio') {
        checkboxProps.props.value = rowIndex;
        return h(Radio, checkboxProps);
      }
      return h(Checkbox$1, checkboxProps);
    }
  };

  function checkSelection(_ref) {
    var store = _ref.store,
        getCheckboxPropsByItem = _ref.getCheckboxPropsByItem,
        getRecordKey = _ref.getRecordKey,
        data = _ref.data,
        type = _ref.type,
        byDefaultChecked = _ref.byDefaultChecked;

    return byDefaultChecked ? data[type](function (item, i) {
      return getCheckboxPropsByItem(item, i).defaultChecked;
    }) : data[type](function (item, i) {
      return store.getState().selectedRowKeys.indexOf(getRecordKey(item, i)) >= 0;
    });
  }

  function getIndeterminateState(props) {
    var store = props.store,
        data = props.data;

    if (!data.length) {
      return false;
    }

    var someCheckedNotByDefaultChecked = checkSelection(_extends$1({}, props, {
      data: data,
      type: 'some',
      byDefaultChecked: false
    })) && !checkSelection(_extends$1({}, props, {
      data: data,
      type: 'every',
      byDefaultChecked: false
    }));
    var someCheckedByDefaultChecked = checkSelection(_extends$1({}, props, {
      data: data,
      type: 'some',
      byDefaultChecked: true
    })) && !checkSelection(_extends$1({}, props, {
      data: data,
      type: 'every',
      byDefaultChecked: true
    }));

    if (store.getState().selectionDirty) {
      return someCheckedNotByDefaultChecked;
    }
    return someCheckedNotByDefaultChecked || someCheckedByDefaultChecked;
  }

  function getCheckState(props) {
    var store = props.store,
        data = props.data;

    if (!data.length) {
      return false;
    }
    if (store.getState().selectionDirty) {
      return checkSelection(_extends$1({}, props, {
        data: data,
        type: 'every',
        byDefaultChecked: false
      }));
    }
    return checkSelection(_extends$1({}, props, {
      data: data,
      type: 'every',
      byDefaultChecked: false
    })) || checkSelection(_extends$1({}, props, {
      data: data,
      type: 'every',
      byDefaultChecked: true
    }));
  }

  var SelectionCheckboxAll = {
    name: 'SelectionCheckboxAll',
    mixins: [BaseMixin],
    props: SelectionCheckboxAllProps,
    data: function data() {
      var props = this.$props;

      this.defaultSelections = props.hideDefaultSelections ? [] : [{
        key: 'all',
        text: props.locale.selectAll
      }, {
        key: 'invert',
        text: props.locale.selectInvert
      }];

      return {
        checked: getCheckState(props),
        indeterminate: getIndeterminateState(props)
      };
    },


    watch: {
      $props: {
        handler: function handler() {
          this.setCheckState(this.$props);
        },

        deep: true
      }
    },

    mounted: function mounted() {
      this.subscribe();
    },
    beforeDestroy: function beforeDestroy() {
      if (this.unsubscribe) {
        this.unsubscribe();
      }
    },

    methods: {
      checkSelection: function checkSelection(props, data, type, byDefaultChecked) {
        var _ref2 = props || this.$props,
            store = _ref2.store,
            getCheckboxPropsByItem = _ref2.getCheckboxPropsByItem,
            getRecordKey = _ref2.getRecordKey;
        // type should be 'every' | 'some'


        if (type === 'every' || type === 'some') {
          return byDefaultChecked ? data[type](function (item, i) {
            return getCheckboxPropsByItem(item, i).props.defaultChecked;
          }) : data[type](function (item, i) {
            return store.getState().selectedRowKeys.indexOf(getRecordKey(item, i)) >= 0;
          });
        }
        return false;
      },
      setCheckState: function setCheckState(props) {
        var checked = getCheckState(props);
        var indeterminate = getIndeterminateState(props);
        this.setState(function (prevState) {
          var newState = {};
          if (indeterminate !== prevState.indeterminate) {
            newState.indeterminate = indeterminate;
          }
          if (checked !== prevState.checked) {
            newState.checked = checked;
          }
          return newState;
        });
      },
      handleSelectAllChange: function handleSelectAllChange(e) {
        var checked = e.target.checked;

        this.$emit('select', checked ? 'all' : 'removeAll', 0, null);
      },
      subscribe: function subscribe() {
        var _this = this;

        var store = this.store;

        this.unsubscribe = store.subscribe(function () {
          _this.setCheckState(_this.$props);
        });
      },
      renderMenus: function renderMenus(selections) {
        var _this2 = this;

        var h = this.$createElement;

        return selections.map(function (selection, index) {
          return h(
            Menu$1.Item,
            { key: selection.key || index },
            [h(
              'div',
              {
                on: {
                  'click': function click() {
                    _this2.$emit('select', selection.key, index, selection.onSelect);
                  }
                }
              },
              [selection.text]
            )]
          );
        });
      }
    },

    render: function render() {
      var h = arguments[0];
      var disabled = this.disabled,
          prefixCls = this.prefixCls,
          selections = this.selections,
          getPopupContainer = this.getPopupContainer,
          checked = this.checked,
          indeterminate = this.indeterminate;


      var selectionPrefixCls = prefixCls + '-selection';

      var customSelections = null;

      if (selections) {
        var newSelections = Array.isArray(selections) ? this.defaultSelections.concat(selections) : this.defaultSelections;

        var menu = h(
          Menu$1,
          { 'class': selectionPrefixCls + '-menu', attrs: { selectedKeys: [] }
          },
          [this.renderMenus(newSelections)]
        );

        customSelections = newSelections.length > 0 ? h(
          Dropdown$1,
          {
            attrs: { getPopupContainer: getPopupContainer }
          },
          [h(
            'template',
            { slot: 'overlay' },
            [menu]
          ), h(
            'div',
            { 'class': selectionPrefixCls + '-down' },
            [h(Icon$1, {
              attrs: { type: 'down' }
            })]
          )]
        ) : null;
      }

      return h(
        'div',
        { 'class': selectionPrefixCls },
        [h(Checkbox$1, {
          'class': classnames(_defineProperty({}, selectionPrefixCls + '-select-all-custom', customSelections)),
          attrs: { checked: checked,
            indeterminate: indeterminate,
            disabled: disabled
          },
          on: {
            'change': this.handleSelectAllChange
          }
        }), customSelections]
      );
    }
  };

  var Column$1 = {
    name: 'ATableColumn',
    props: ColumnProps
  };

  var ColumnGroup$1 = {
    name: 'ATableColumnGroup',
    props: {
      title: VuePropTypes.any
    },
    __ANT_TABLE_COLUMN_GROUP: true
  };

  var BodyRowProps = {
    store: Store,
    rowKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
    prefixCls: VuePropTypes.string
  };

  function createBodyRow() {
    var Component = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'tr';

    var BodyRow = {
      name: 'BodyRow',
      props: BodyRowProps,
      data: function data() {
        var _store$getState = this.store.getState(),
            selectedRowKeys = _store$getState.selectedRowKeys;

        return {
          selected: selectedRowKeys.indexOf(this.rowKey) >= 0
        };
      },
      mounted: function mounted() {
        this.subscribe();
      },
      beforeDestroy: function beforeDestroy() {
        if (this.unsubscribe) {
          this.unsubscribe();
        }
      },

      methods: {
        subscribe: function subscribe() {
          var _this = this;

          var store = this.store,
              rowKey = this.rowKey;

          this.unsubscribe = store.subscribe(function () {
            var _store$getState2 = _this.store.getState(),
                selectedRowKeys = _store$getState2.selectedRowKeys;

            var selected = selectedRowKeys.indexOf(rowKey) >= 0;
            if (selected !== _this.selected) {
              _this.selected = selected;
            }
          });
        }
      },

      render: function render() {
        var h = arguments[0];

        var className = _defineProperty({}, this.prefixCls + '-row-selected', this.selected);

        return h(
          Component,
          babelHelperVueJsxMergeProps([{ 'class': className }, { on: getListeners(this) }]),
          [this.$slots['default']]
        );
      }
    };

    return BodyRow;
  }

  var inlineStyle = {
    border: 0,
    background: 'transparent',
    padding: 0,
    lineHeight: 'inherit',
    display: 'inline-block'
  };

  var TransButton = {
    props: {
      noStyle: VuePropTypes.bool
    },

    methods: {
      onKeyDown: function onKeyDown(event) {
        var keyCode = event.keyCode;

        if (keyCode === KeyCode.ENTER) {
          event.preventDefault();
        }
      },
      onKeyUp: function onKeyUp(event) {
        var keyCode = event.keyCode;

        if (keyCode === KeyCode.ENTER) {
          this.$emit('click', event);
        }
      },
      setRef: function setRef(btn) {
        this.div = btn;
      },
      focus: function focus() {
        if (this.div) {
          this.div.focus();
        }
      },
      blur: function blur() {
        if (this.div) {
          this.div.blur();
        }
      }
    },

    render: function render() {
      var h = arguments[0];
      var noStyle = this.$props.noStyle;


      return h(
        'div',
        babelHelperVueJsxMergeProps([{
          attrs: {
            role: 'button',
            tabIndex: 0
          }
        }, {
          directives: [{
            name: 'ant-ref',
            value: this.setRef
          }],
          on: _extends$1({}, this.$listeners, {
            keydown: this.onKeyDown,
            keyup: this.onKeyUp
          })
        }, {
          style: _extends$1({}, !noStyle ? inlineStyle : null)
        }]),
        [this.$slots['default']]
      );
    }
  };

  function noop$R() {}

  function stopPropagation$1(e) {
    e.stopPropagation();
  }

  function getRowSelection(props) {
    return props.rowSelection || {};
  }

  function getColumnKey(column, index) {
    return column.key || column.dataIndex || index;
  }

  function isSameColumn(a, b) {
    if (a && b && a.key && a.key === b.key) {
      return true;
    }
    return a === b || shallowequal(a, b, function (value, other) {
      // https://github.com/ant-design/ant-design/issues/12737
      if (typeof value === 'function' && typeof other === 'function') {
        return value === other || value.toString() === other.toString();
      }
      // https://github.com/ant-design/ant-design/issues/19398
      if (Array.isArray(value) && Array.isArray(other)) {
        return value === other || shallowequal(value, other);
      }
    });
  }

  var defaultPagination = {
    onChange: noop$R,
    onShowSizeChange: noop$R
  };

  /**
   * Avoid creating new object, so that parent component's shouldComponentUpdate
   * can works appropriately。
   */
  var emptyObject$1 = {};

  var createComponents = function createComponents() {
    var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var bodyRow = components && components.body && components.body.row;
    return _extends$1({}, components, {
      body: _extends$1({}, components.body, {
        row: createBodyRow(bodyRow)
      })
    });
  };

  function isTheSameComponents() {
    var components1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var components2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return components1 === components2 || ['table', 'header', 'body'].every(function (key) {
      return shallowequal(components1[key], components2[key]);
    });
  }

  function getFilteredValueColumns(state, columns) {
    return flatFilter(columns || (state || {}).columns || [], function (column) {
      return typeof column.filteredValue !== 'undefined';
    });
  }

  function getFiltersFromColumns(state, columns) {
    var filters = {};
    getFilteredValueColumns(state, columns).forEach(function (col) {
      var colKey = getColumnKey(col);
      filters[colKey] = col.filteredValue;
    });
    return filters;
  }

  function isFiltersChanged(state, filters) {
    if (Object.keys(filters).length !== Object.keys(state.filters).length) {
      return true;
    }
    return Object.keys(filters).some(function (columnKey) {
      return filters[columnKey] !== state.filters[columnKey];
    });
  }

  var T$1 = {
    name: 'Table',
    Column: Column$1,
    ColumnGroup: ColumnGroup$1,
    mixins: [BaseMixin],
    props: initDefaultProps(TableProps, {
      dataSource: [],
      useFixedHeader: false,
      // rowSelection: null,
      size: 'default',
      loading: false,
      bordered: false,
      indentSize: 20,
      locale: {},
      rowKey: 'key',
      showHeader: true,
      sortDirections: ['ascend', 'descend'],
      childrenColumnName: 'children'
    }),

    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    // CheckboxPropsCache: {
    //   [key: string]: any;
    // };
    // store: Store;
    // columns: ColumnProps<T>[];
    // components: TableComponents;

    data: function data() {
      // this.columns = props.columns || normalizeColumns(props.children)
      var props = getOptionProps(this);
      warning$1(!props.expandedRowRender || !('scroll' in props), '`expandedRowRender` and `scroll` are not compatible. Please use one of them at one time.');
      this.CheckboxPropsCache = {};

      this.store = createStore({
        selectedRowKeys: getRowSelection(this.$props).selectedRowKeys || [],
        selectionDirty: false
      });
      return _extends$1({}, this.getDefaultSortOrder(props.columns || []), {
        // 减少状态
        sFilters: this.getDefaultFilters(props.columns),
        sPagination: this.getDefaultPagination(this.$props),
        pivot: undefined,
        sComponents: createComponents(this.components),
        filterDataCnt: 0
      });
    },

    watch: {
      pagination: {
        handler: function handler(val) {
          this.setState(function (previousState) {
            var newPagination = _extends$1({}, defaultPagination, previousState.sPagination, val);
            newPagination.current = newPagination.current || 1;
            newPagination.pageSize = newPagination.pageSize || 10;
            return { sPagination: val !== false ? newPagination : emptyObject$1 };
          });
        },

        deep: true
      },
      rowSelection: {
        handler: function handler(val, oldVal) {
          if (val && 'selectedRowKeys' in val) {
            this.store.setState({
              selectedRowKeys: val.selectedRowKeys || []
            });
            var rowSelection = this.rowSelection;

            if (rowSelection && val.getCheckboxProps !== rowSelection.getCheckboxProps) {
              this.CheckboxPropsCache = {};
            }
          } else if (oldVal && !val) {
            this.store.setState({
              selectedRowKeys: []
            });
          }
        },

        deep: true
      },

      dataSource: function dataSource() {
        this.store.setState({
          selectionDirty: false
        });
        this.CheckboxPropsCache = {};
      },
      columns: function columns(val) {
        var filteredValueColumns = getFilteredValueColumns({ columns: val }, val);
        if (filteredValueColumns.length > 0) {
          var filtersFromColumns = getFiltersFromColumns({ columns: val }, val);
          var newFilters = _extends$1({}, this.sFilters);
          Object.keys(filtersFromColumns).forEach(function (key) {
            newFilters[key] = filtersFromColumns[key];
          });
          if (isFiltersChanged({ filters: this.sFilters }, newFilters)) {
            this.setState({ sFilters: newFilters });
          }
        }
      },

      components: {
        handler: function handler(val, oldVal) {
          if (!isTheSameComponents(val, oldVal)) {
            var components = createComponents(val);
            this.setState({ sComponents: components });
          }
        },

        deep: true
      }
    },
    updated: function updated() {
      var columns = this.columns,
          sortColumn = this.sSortColumn,
          sortOrder = this.sSortOrder;

      if (this.getSortOrderColumns(columns).length > 0) {
        var sortState = this.getSortStateFromColumns(columns);
        if (!isSameColumn(sortState.sSortColumn, sortColumn) || sortState.sSortOrder !== sortOrder) {
          this.setState(sortState);
        }
      }
    },

    methods: {
      getCheckboxPropsByItem: function getCheckboxPropsByItem(item, index) {
        var rowSelection = getRowSelection(this.$props);
        if (!rowSelection.getCheckboxProps) {
          return { props: {} };
        }
        var key = this.getRecordKey(item, index);
        // Cache checkboxProps
        if (!this.CheckboxPropsCache[key]) {
          this.CheckboxPropsCache[key] = rowSelection.getCheckboxProps(item);
        }
        this.CheckboxPropsCache[key].props = this.CheckboxPropsCache[key].props || {};
        return this.CheckboxPropsCache[key];
      },
      getDefaultSelection: function getDefaultSelection() {
        var _this = this;

        var rowSelection = getRowSelection(this.$props);
        if (!rowSelection.getCheckboxProps) {
          return [];
        }
        return this.getFlatData().filter(function (item, rowIndex) {
          return _this.getCheckboxPropsByItem(item, rowIndex).props.defaultChecked;
        }).map(function (record, rowIndex) {
          return _this.getRecordKey(record, rowIndex);
        });
      },
      getDefaultPagination: function getDefaultPagination(props) {
        var pagination = _typeof(props.pagination) === 'object' ? props.pagination : {};
        var current = void 0;
        if ('current' in pagination) {
          current = pagination.current;
        } else if ('defaultCurrent' in pagination) {
          current = pagination.defaultCurrent;
        }
        var pageSize = void 0;
        if ('pageSize' in pagination) {
          pageSize = pagination.pageSize;
        } else if ('defaultPageSize' in pagination) {
          pageSize = pagination.defaultPageSize;
        }
        return this.hasPagination(props) ? _extends$1({}, defaultPagination, pagination, {
          current: current || 1,
          pageSize: pageSize || 10
        }) : {};
      },
      getSortOrderColumns: function getSortOrderColumns(columns) {
        return flatFilter(columns || this.columns || [], function (column) {
          return 'sortOrder' in column;
        });
      },
      getDefaultFilters: function getDefaultFilters(columns) {
        var definedFilters = getFiltersFromColumns({ columns: this.columns }, columns);

        var defaultFilteredValueColumns = flatFilter(columns || [], function (column) {
          return typeof column.defaultFilteredValue !== 'undefined';
        });

        var defaultFilters = defaultFilteredValueColumns.reduce(function (soFar, col) {
          var colKey = getColumnKey(col);
          soFar[colKey] = col.defaultFilteredValue;
          return soFar;
        }, {});

        return _extends$1({}, defaultFilters, definedFilters);
      },
      getDefaultSortOrder: function getDefaultSortOrder(columns) {
        var definedSortState = this.getSortStateFromColumns(columns);

        var defaultSortedColumn = flatFilter(columns || [], function (column) {
          return column.defaultSortOrder != null;
        })[0];

        if (defaultSortedColumn && !definedSortState.sortColumn) {
          return {
            sSortColumn: defaultSortedColumn,
            sSortOrder: defaultSortedColumn.defaultSortOrder
          };
        }

        return definedSortState;
      },
      getSortStateFromColumns: function getSortStateFromColumns(columns) {
        // return first column which sortOrder is not falsy
        var sortedColumn = this.getSortOrderColumns(columns).filter(function (col) {
          return col.sortOrder;
        })[0];

        if (sortedColumn) {
          return {
            sSortColumn: sortedColumn,
            sSortOrder: sortedColumn.sortOrder
          };
        }

        return {
          sSortColumn: null,
          sSortOrder: null
        };
      },
      getMaxCurrent: function getMaxCurrent(total) {
        var _sPagination = this.sPagination,
            current = _sPagination.current,
            pageSize = _sPagination.pageSize;

        if ((current - 1) * pageSize >= total) {
          return Math.floor((total - 1) / pageSize) + 1;
        }
        return current;
      },
      getRecordKey: function getRecordKey(record, index) {
        var rowKey = this.rowKey;

        var recordKey = typeof rowKey === 'function' ? rowKey(record, index) : record[rowKey];
        warning$1(recordKey !== undefined, 'Table', 'Each record in dataSource of table should have a unique `key` prop, ' + 'or set `rowKey` of Table to an unique primary key, ');
        return recordKey === undefined ? index : recordKey;
      },
      getSorterFn: function getSorterFn(state) {
        var _ref = state || this.$data,
            sortOrder = _ref.sSortOrder,
            sortColumn = _ref.sSortColumn;

        if (!sortOrder || !sortColumn || typeof sortColumn.sorter !== 'function') {
          return;
        }

        return function (a, b) {
          var result = sortColumn.sorter(a, b, sortOrder);
          if (result !== 0) {
            return sortOrder === 'descend' ? -result : result;
          }
          return 0;
        };
      },
      getCurrentPageData: function getCurrentPageData() {
        var data = this.getLocalData();
        this.filterDataCnt = data.length;
        var current = void 0;
        var pageSize = void 0;
        var sPagination = this.sPagination;
        // 如果没有分页的话，默认全部展示
        if (!this.hasPagination()) {
          pageSize = Number.MAX_VALUE;
          current = 1;
        } else {
          pageSize = sPagination.pageSize;
          current = this.getMaxCurrent(sPagination.total || data.length);
        }

        // 分页
        // ---
        // 当数据量少于等于每页数量时，直接设置数据
        // 否则进行读取分页数据
        if (data.length > pageSize || pageSize === Number.MAX_VALUE) {
          data = data.slice((current - 1) * pageSize, current * pageSize);
        }
        return data;
      },
      getFlatData: function getFlatData() {
        var childrenColumnName = this.$props.childrenColumnName;

        return flatArray(this.getLocalData(null, false), childrenColumnName);
      },
      getFlatCurrentPageData: function getFlatCurrentPageData() {
        var childrenColumnName = this.$props.childrenColumnName;

        return flatArray(this.getCurrentPageData(), childrenColumnName);
      },
      getLocalData: function getLocalData(state) {
        var _this2 = this;

        var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var currentState = state || this.$data;
        var filters = currentState.sFilters;
        var dataSource = this.$props.dataSource;

        var data = dataSource || [];
        // 优化本地排序
        data = data.slice(0);
        var sorterFn = this.getSorterFn(currentState);
        if (sorterFn) {
          // 使用新数组，避免改变原数组导致无限循环更新
          // https://github.com/vueComponent/ant-design-vue/issues/2270
          data = this.recursiveSort([].concat(_toConsumableArray(data)), sorterFn);
        }
        // 筛选
        if (filter && filters) {
          Object.keys(filters).forEach(function (columnKey) {
            var col = _this2.findColumn(columnKey);
            if (!col) {
              return;
            }
            var values = filters[columnKey] || [];
            if (values.length === 0) {
              return;
            }
            var onFilter = col.onFilter;
            data = onFilter ? data.filter(function (record) {
              return values.some(function (v) {
                return onFilter(v, record);
              });
            }) : data;
          });
        }
        return data;
      },
      onRow: function onRow(prefixCls, record, index) {
        var customRow = this.customRow;

        var custom = customRow ? customRow(record, index) : {};
        return mergeProps(custom, {
          props: {
            prefixCls: prefixCls,
            store: this.store,
            rowKey: this.getRecordKey(record, index)
          }
        });
      },
      setSelectedRowKeys: function setSelectedRowKeys(selectedRowKeys, selectionInfo) {
        var _this3 = this;

        var selectWay = selectionInfo.selectWay,
            record = selectionInfo.record,
            checked = selectionInfo.checked,
            changeRowKeys = selectionInfo.changeRowKeys,
            nativeEvent = selectionInfo.nativeEvent;

        var rowSelection = getRowSelection(this.$props);
        if (rowSelection && !('selectedRowKeys' in rowSelection)) {
          this.store.setState({ selectedRowKeys: selectedRowKeys });
        }
        var data = this.getFlatData();
        if (!rowSelection.onChange && !rowSelection[selectWay]) {
          return;
        }
        var selectedRows = data.filter(function (row, i) {
          return selectedRowKeys.indexOf(_this3.getRecordKey(row, i)) >= 0;
        });
        if (rowSelection.onChange) {
          rowSelection.onChange(selectedRowKeys, selectedRows);
        }
        if (selectWay === 'onSelect' && rowSelection.onSelect) {
          rowSelection.onSelect(record, checked, selectedRows, nativeEvent);
        } else if (selectWay === 'onSelectMultiple' && rowSelection.onSelectMultiple) {
          var changeRows = data.filter(function (row, i) {
            return changeRowKeys.indexOf(_this3.getRecordKey(row, i)) >= 0;
          });
          rowSelection.onSelectMultiple(checked, selectedRows, changeRows);
        } else if (selectWay === 'onSelectAll' && rowSelection.onSelectAll) {
          var _changeRows = data.filter(function (row, i) {
            return changeRowKeys.indexOf(_this3.getRecordKey(row, i)) >= 0;
          });
          rowSelection.onSelectAll(checked, selectedRows, _changeRows);
        } else if (selectWay === 'onSelectInvert' && rowSelection.onSelectInvert) {
          rowSelection.onSelectInvert(selectedRowKeys);
        }
      },
      generatePopupContainerFunc: function generatePopupContainerFunc(getPopupContainer) {
        var scroll = this.$props.scroll;

        var table = this.$refs.vcTable;
        if (getPopupContainer) {
          return getPopupContainer;
        }
        // Use undefined to let rc component use default logic.
        return scroll && table ? function () {
          return table.getTableNode();
        } : undefined;
      },
      scrollToFirstRow: function scrollToFirstRow() {
        var _this4 = this;

        var scroll = this.$props.scroll;

        if (scroll && scroll.scrollToFirstRowOnChange !== false) {
          scrollTo(0, {
            getContainer: function getContainer() {
              return _this4.$refs.vcTable.getBodyTable();
            }
          });
        }
      },
      isSameColumn: function isSameColumn(a, b) {
        if (a && b && a.key && a.key === b.key) {
          return true;
        }
        return a === b || shallowequal(a, b, function (value, other) {
          if (typeof value === 'function' && typeof other === 'function') {
            return value === other || value.toString() === other.toString();
          }
        });
      },
      handleFilter: function handleFilter(column, nextFilters) {
        var _this5 = this;

        var props = this.$props;
        var pagination = _extends$1({}, this.sPagination);
        var filters = _extends$1({}, this.sFilters, _defineProperty({}, getColumnKey(column), nextFilters));
        // Remove filters not in current columns
        var currentColumnKeys = [];
        treeMap(this.columns, function (c) {
          if (!c.children) {
            currentColumnKeys.push(getColumnKey(c));
          }
        });
        Object.keys(filters).forEach(function (columnKey) {
          if (currentColumnKeys.indexOf(columnKey) < 0) {
            delete filters[columnKey];
          }
        });

        if (props.pagination) {
          // Reset current prop
          pagination.current = 1;
          pagination.onChange(pagination.current);
        }

        var newState = {
          sPagination: pagination,
          sFilters: {}
        };
        var filtersToSetState = _extends$1({}, filters);
        // Remove filters which is controlled
        getFilteredValueColumns({ columns: props.columns }).forEach(function (col) {
          var columnKey = getColumnKey(col);
          if (columnKey) {
            delete filtersToSetState[columnKey];
          }
        });
        if (Object.keys(filtersToSetState).length > 0) {
          newState.sFilters = filtersToSetState;
        }

        // Controlled current prop will not respond user interaction
        if (_typeof(props.pagination) === 'object' && 'current' in props.pagination) {
          newState.sPagination = _extends$1({}, pagination, {
            current: this.sPagination.current
          });
        }

        this.setState(newState, function () {
          _this5.scrollToFirstRow();
          _this5.store.setState({
            selectionDirty: false
          });
          _this5.$emit.apply(_this5, ['change'].concat(_toConsumableArray(_this5.prepareParamsArguments(_extends$1({}, _this5.$data, {
            sSelectionDirty: false,
            sFilters: filters,
            sPagination: pagination
          })))));
        });
      },
      handleSelect: function handleSelect(record, rowIndex, e) {
        var _this6 = this;

        var checked = e.target.checked;
        var nativeEvent = e.nativeEvent;
        var defaultSelection = this.store.getState().selectionDirty ? [] : this.getDefaultSelection();
        var selectedRowKeys = this.store.getState().selectedRowKeys.concat(defaultSelection);
        var key = this.getRecordKey(record, rowIndex);
        var pivot = this.$data.pivot;

        var rows = this.getFlatCurrentPageData();
        var realIndex = rowIndex;
        if (this.$props.expandedRowRender) {
          realIndex = rows.findIndex(function (row) {
            return _this6.getRecordKey(row, rowIndex) === key;
          });
        }
        if (nativeEvent.shiftKey && pivot !== undefined && realIndex !== pivot) {
          var changeRowKeys = [];
          var direction = Math.sign(pivot - realIndex);
          var dist = Math.abs(pivot - realIndex);
          var step = 0;

          var _loop = function _loop() {
            var i = realIndex + step * direction;
            step += 1;
            var row = rows[i];
            var rowKey = _this6.getRecordKey(row, i);
            var checkboxProps = _this6.getCheckboxPropsByItem(row, i);
            if (!checkboxProps.disabled) {
              if (selectedRowKeys.includes(rowKey)) {
                if (!checked) {
                  selectedRowKeys = selectedRowKeys.filter(function (j) {
                    return rowKey !== j;
                  });
                  changeRowKeys.push(rowKey);
                }
              } else if (checked) {
                selectedRowKeys.push(rowKey);
                changeRowKeys.push(rowKey);
              }
            }
          };

          while (step <= dist) {
            _loop();
          }

          this.setState({ pivot: realIndex });
          this.store.setState({
            selectionDirty: true
          });
          this.setSelectedRowKeys(selectedRowKeys, {
            selectWay: 'onSelectMultiple',
            record: record,
            checked: checked,
            changeRowKeys: changeRowKeys,
            nativeEvent: nativeEvent
          });
        } else {
          if (checked) {
            selectedRowKeys.push(this.getRecordKey(record, realIndex));
          } else {
            selectedRowKeys = selectedRowKeys.filter(function (i) {
              return key !== i;
            });
          }
          this.setState({ pivot: realIndex });
          this.store.setState({
            selectionDirty: true
          });
          this.setSelectedRowKeys(selectedRowKeys, {
            selectWay: 'onSelect',
            record: record,
            checked: checked,
            changeRowKeys: undefined,
            nativeEvent: nativeEvent
          });
        }
      },
      handleRadioSelect: function handleRadioSelect(record, rowIndex, e) {
        var checked = e.target.checked;
        var nativeEvent = e.nativeEvent;
        var key = this.getRecordKey(record, rowIndex);
        var selectedRowKeys = [key];
        this.store.setState({
          selectionDirty: true
        });
        this.setSelectedRowKeys(selectedRowKeys, {
          selectWay: 'onSelect',
          record: record,
          checked: checked,
          changeRowKeys: undefined,
          nativeEvent: nativeEvent
        });
      },
      handleSelectRow: function handleSelectRow(selectionKey, index, onSelectFunc) {
        var _this7 = this;

        var data = this.getFlatCurrentPageData();
        var defaultSelection = this.store.getState().selectionDirty ? [] : this.getDefaultSelection();
        var selectedRowKeys = this.store.getState().selectedRowKeys.concat(defaultSelection);
        var changeableRowKeys = data.filter(function (item, i) {
          return !_this7.getCheckboxPropsByItem(item, i).props.disabled;
        }).map(function (item, i) {
          return _this7.getRecordKey(item, i);
        });

        var changeRowKeys = [];
        var selectWay = 'onSelectAll';
        var checked = void 0;
        // handle default selection
        switch (selectionKey) {
          case 'all':
            changeableRowKeys.forEach(function (key) {
              if (selectedRowKeys.indexOf(key) < 0) {
                selectedRowKeys.push(key);
                changeRowKeys.push(key);
              }
            });
            selectWay = 'onSelectAll';
            checked = true;
            break;
          case 'removeAll':
            changeableRowKeys.forEach(function (key) {
              if (selectedRowKeys.indexOf(key) >= 0) {
                selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);
                changeRowKeys.push(key);
              }
            });
            selectWay = 'onSelectAll';
            checked = false;
            break;
          case 'invert':
            changeableRowKeys.forEach(function (key) {
              if (selectedRowKeys.indexOf(key) < 0) {
                selectedRowKeys.push(key);
              } else {
                selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);
              }
              changeRowKeys.push(key);
              selectWay = 'onSelectInvert';
            });
            break;
        }

        this.store.setState({
          selectionDirty: true
        });
        // when select custom selection, callback selections[n].onSelect
        var rowSelection = this.rowSelection;

        var customSelectionStartIndex = 2;
        if (rowSelection && rowSelection.hideDefaultSelections) {
          customSelectionStartIndex = 0;
        }
        if (index >= customSelectionStartIndex && typeof onSelectFunc === 'function') {
          return onSelectFunc(changeableRowKeys);
        }
        this.setSelectedRowKeys(selectedRowKeys, {
          selectWay: selectWay,
          checked: checked,
          changeRowKeys: changeRowKeys
        });
      },
      handlePageChange: function handlePageChange(current) {
        var props = this.$props;
        var pagination = _extends$1({}, this.sPagination);
        if (current) {
          pagination.current = current;
        } else {
          pagination.current = pagination.current || 1;
        }

        for (var _len = arguments.length, otherArguments = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          otherArguments[_key - 1] = arguments[_key];
        }

        pagination.onChange.apply(pagination, [pagination.current].concat(_toConsumableArray(otherArguments)));

        var newState = {
          sPagination: pagination
        };
        // Controlled current prop will not respond user interaction
        if (props.pagination && _typeof(props.pagination) === 'object' && 'current' in props.pagination) {
          newState.sPagination = _extends$1({}, pagination, {
            current: this.sPagination.current
          });
        }
        this.setState(newState, this.scrollToFirstRow);

        this.store.setState({
          selectionDirty: false
        });
        this.$emit.apply(this, ['change'].concat(_toConsumableArray(this.prepareParamsArguments(_extends$1({}, this.$data, {
          sSelectionDirty: false,
          sPagination: pagination
        })))));
      },
      handleShowSizeChange: function handleShowSizeChange(current, pageSize) {
        var pagination = this.sPagination;
        pagination.onShowSizeChange(current, pageSize);
        var nextPagination = _extends$1({}, pagination, {
          pageSize: pageSize,
          current: current
        });
        this.setState({ sPagination: nextPagination }, this.scrollToFirstRow);
        this.$emit.apply(this, ['change'].concat(_toConsumableArray(this.prepareParamsArguments(_extends$1({}, this.$data, {
          sPagination: nextPagination
        })))));
      },
      toggleSortOrder: function toggleSortOrder(column) {
        var sortDirections = column.sortDirections || this.sortDirections;
        var sortOrder = this.sSortOrder,
            sortColumn = this.sSortColumn;
        // 只同时允许一列进行排序，否则会导致排序顺序的逻辑问题

        var newSortOrder = void 0;
        // 切换另一列时，丢弃 sortOrder 的状态
        if (isSameColumn(sortColumn, column) && sortOrder !== undefined) {
          // 按照sortDirections的内容依次切换排序状态
          var methodIndex = sortDirections.indexOf(sortOrder) + 1;
          newSortOrder = methodIndex === sortDirections.length ? undefined : sortDirections[methodIndex];
        } else {
          newSortOrder = sortDirections[0];
        }
        var newState = {
          sSortOrder: newSortOrder,
          sSortColumn: newSortOrder ? column : null
        };

        // Controlled
        if (this.getSortOrderColumns().length === 0) {
          this.setState(newState, this.scrollToFirstRow);
        }
        this.$emit.apply(this, ['change'].concat(_toConsumableArray(this.prepareParamsArguments(_extends$1({}, this.$data, newState), column))));
      },
      hasPagination: function hasPagination(props) {
        return (props || this.$props).pagination !== false;
      },
      isSortColumn: function isSortColumn(column) {
        var sortColumn = this.sSortColumn;

        if (!column || !sortColumn) {
          return false;
        }
        return getColumnKey(sortColumn) === getColumnKey(column);
      },


      // Get pagination, filters, sorter
      prepareParamsArguments: function prepareParamsArguments(state, column) {
        var pagination = _extends$1({}, state.sPagination);
        // remove useless handle function in Table.onChange
        delete pagination.onChange;
        delete pagination.onShowSizeChange;
        var filters = state.sFilters;
        var sorter = {};
        var currentColumn = column;
        if (state.sSortColumn && state.sSortOrder) {
          currentColumn = state.sSortColumn;
          sorter.column = state.sSortColumn;
          sorter.order = state.sSortOrder;
        }

        if (currentColumn) {
          sorter.field = currentColumn.dataIndex;
          sorter.columnKey = getColumnKey(currentColumn);
        }

        var extra = {
          currentDataSource: this.getLocalData(state)
        };

        return [pagination, filters, sorter, extra];
      },
      findColumn: function findColumn(myKey) {
        var column = void 0;
        treeMap(this.columns, function (c) {
          if (getColumnKey(c) === myKey) {
            column = c;
          }
        });
        return column;
      },
      recursiveSort: function recursiveSort(data, sorterFn) {
        var _this8 = this;

        var _childrenColumnName = this.childrenColumnName,
            childrenColumnName = _childrenColumnName === undefined ? 'children' : _childrenColumnName;

        return data.sort(sorterFn).map(function (item) {
          return item[childrenColumnName] ? _extends$1({}, item, _defineProperty({}, childrenColumnName, _this8.recursiveSort([].concat(_toConsumableArray(item[childrenColumnName])), sorterFn))) : item;
        });
      },
      renderExpandIcon: function renderExpandIcon(prefixCls) {
        var h = this.$createElement;

        return function (_ref2) {
          var expandable = _ref2.expandable,
              expanded = _ref2.expanded,
              needIndentSpaced = _ref2.needIndentSpaced,
              record = _ref2.record,
              onExpand = _ref2.onExpand;

          if (expandable) {
            return h(
              LocaleReceiver,
              {
                attrs: { componentName: 'Table', defaultLocale: defaultLocale.Table }
              },
              [function (locale) {
                var _classNames;

                return h(TransButton, {
                  'class': classnames(prefixCls + '-row-expand-icon', (_classNames = {}, _defineProperty(_classNames, prefixCls + '-row-collapsed', !expanded), _defineProperty(_classNames, prefixCls + '-row-expanded', expanded), _classNames)),
                  on: {
                    'click': function click(event) {
                      onExpand(record, event);
                    }
                  },
                  attrs: {
                    'aria-label': expanded ? locale.collapse : locale.expand,
                    noStyle: true
                  }
                });
              }]
            );
          }

          if (needIndentSpaced) {
            return h('span', { 'class': prefixCls + '-row-expand-icon ' + prefixCls + '-row-spaced' });
          }

          return null;
        };
      },
      renderPagination: function renderPagination(prefixCls, paginationPosition) {
        var h = this.$createElement;

        // 强制不需要分页
        if (!this.hasPagination()) {
          return null;
        }
        var size = 'default';
        var pagination = this.sPagination;

        if (pagination.size) {
          size = pagination.size;
        } else if (this.size === 'middle' || this.size === 'small') {
          size = 'small';
        }
        var position = pagination.position || 'bottom';
        var total = pagination.total || this.filterDataCnt;

        var cls = pagination['class'],
            style = pagination.style,
            onChange = pagination.onChange,
            onShowSizeChange = pagination.onShowSizeChange,
            restProps = _objectWithoutProperties(pagination, ['class', 'style', 'onChange', 'onShowSizeChange']); // eslint-disable-line


        var paginationProps = mergeProps({
          key: 'pagination-' + paginationPosition,
          'class': classnames(cls, prefixCls + '-pagination'),
          props: _extends$1({}, restProps, {
            total: total,
            size: size,
            current: this.getMaxCurrent(total)
          }),
          style: style,
          on: {
            change: this.handlePageChange,
            showSizeChange: this.handleShowSizeChange
          }
        });
        return total > 0 && (position === paginationPosition || position === 'both') ? h(Pagination, paginationProps) : null;
      },
      renderSelectionBox: function renderSelectionBox(type) {
        var _this9 = this;

        var h = this.$createElement;

        return function (_, record, index) {
          var rowKey = _this9.getRecordKey(record, index); // 从 1 开始
          var props = _this9.getCheckboxPropsByItem(record, index);
          var handleChange = function handleChange(e) {
            type === 'radio' ? _this9.handleRadioSelect(record, index, e) : _this9.handleSelect(record, index, e);
          };
          var selectionBoxProps = mergeProps({
            props: {
              type: type,
              store: _this9.store,
              rowIndex: rowKey,
              defaultSelection: _this9.getDefaultSelection()
            },
            on: {
              change: handleChange
            }
          }, props);

          return h(
            'span',
            {
              on: {
                'click': stopPropagation$1
              }
            },
            [h(SelectionBox, selectionBoxProps)]
          );
        };
      },
      renderRowSelection: function renderRowSelection(_ref3) {
        var _this10 = this;

        var prefixCls = _ref3.prefixCls,
            locale = _ref3.locale,
            getPopupContainer = _ref3.getPopupContainer;
        var h = this.$createElement;
        var rowSelection = this.rowSelection;

        var columns = this.columns.concat();
        if (rowSelection) {
          var data = this.getFlatCurrentPageData().filter(function (item, index) {
            if (rowSelection.getCheckboxProps) {
              return !_this10.getCheckboxPropsByItem(item, index).props.disabled;
            }
            return true;
          });
          var selectionColumnClass = classnames(prefixCls + '-selection-column', _defineProperty({}, prefixCls + '-selection-column-custom', rowSelection.selections));
          var selectionColumn = _defineProperty({
            key: 'selection-column',
            customRender: this.renderSelectionBox(rowSelection.type),
            className: selectionColumnClass,
            fixed: rowSelection.fixed,
            width: rowSelection.columnWidth,
            title: rowSelection.columnTitle
          }, INTERNAL_COL_DEFINE, {
            'class': prefixCls + '-selection-col'
          });
          if (rowSelection.type !== 'radio') {
            var checkboxAllDisabled = data.every(function (item, index) {
              return _this10.getCheckboxPropsByItem(item, index).props.disabled;
            });
            selectionColumn.title = selectionColumn.title || h(SelectionCheckboxAll, {
              attrs: {
                store: this.store,
                locale: locale,
                data: data,
                getCheckboxPropsByItem: this.getCheckboxPropsByItem,
                getRecordKey: this.getRecordKey,
                disabled: checkboxAllDisabled,
                prefixCls: prefixCls,

                selections: rowSelection.selections,
                hideDefaultSelections: rowSelection.hideDefaultSelections,
                getPopupContainer: this.generatePopupContainerFunc(getPopupContainer)
              },
              on: {
                'select': this.handleSelectRow
              }
            });
          }
          if ('fixed' in rowSelection) {
            selectionColumn.fixed = rowSelection.fixed;
          } else if (columns.some(function (column) {
            return column.fixed === 'left' || column.fixed === true;
          })) {
            selectionColumn.fixed = 'left';
          }
          if (columns[0] && columns[0].key === 'selection-column') {
            columns[0] = selectionColumn;
          } else {
            columns.unshift(selectionColumn);
          }
        }
        return columns;
      },
      renderColumnsDropdown: function renderColumnsDropdown(_ref4) {
        var _this11 = this;

        var prefixCls = _ref4.prefixCls,
            dropdownPrefixCls = _ref4.dropdownPrefixCls,
            columns = _ref4.columns,
            locale = _ref4.locale,
            getPopupContainer = _ref4.getPopupContainer;
        var h = this.$createElement;
        var sortOrder = this.sSortOrder,
            filters = this.sFilters;

        return treeMap(columns, function (column, i) {
          var _classNames3;

          var key = getColumnKey(column, i);
          var filterDropdown = void 0;
          var sortButton = void 0;
          var customHeaderCell = column.customHeaderCell;
          var isSortColumn = _this11.isSortColumn(column);
          if (column.filters && column.filters.length > 0 || column.filterDropdown) {
            var colFilters = key in filters ? filters[key] : [];
            filterDropdown = h(FilterDropdown, {
              attrs: {
                _propsSymbol: Symbol(),
                locale: locale,
                column: column,
                selectedKeys: colFilters,
                confirmFilter: _this11.handleFilter,
                prefixCls: prefixCls + '-filter',
                dropdownPrefixCls: dropdownPrefixCls || 'ant-dropdown',
                getPopupContainer: _this11.generatePopupContainerFunc(getPopupContainer)
              },
              key: 'filter-dropdown'
            });
          }
          if (column.sorter) {
            var sortDirections = column.sortDirections || _this11.sortDirections;
            var isAscend = isSortColumn && sortOrder === 'ascend';
            var isDescend = isSortColumn && sortOrder === 'descend';
            var ascend = sortDirections.indexOf('ascend') !== -1 && h(Icon$1, {
              'class': prefixCls + '-column-sorter-up ' + (isAscend ? 'on' : 'off'),
              attrs: { type: 'caret-up',
                theme: 'filled'
              },
              key: 'caret-up'
            });

            var descend = sortDirections.indexOf('descend') !== -1 && h(Icon$1, {
              'class': prefixCls + '-column-sorter-down ' + (isDescend ? 'on' : 'off'),
              attrs: { type: 'caret-down',
                theme: 'filled'
              },
              key: 'caret-down'
            });

            sortButton = h(
              'div',
              {
                attrs: {
                  title: locale.sortTitle
                },
                'class': classnames(prefixCls + '-column-sorter-inner', ascend && descend && prefixCls + '-column-sorter-inner-full'),
                key: 'sorter'
              },
              [ascend, descend]
            );
            customHeaderCell = function customHeaderCell(col) {
              var colProps = {};
              // Get original first
              if (column.customHeaderCell) {
                colProps = _extends$1({}, column.customHeaderCell(col));
              }
              colProps.on = colProps.on || {};
              // Add sorter logic
              var onHeaderCellClick = colProps.on.click;
              colProps.on.click = function () {
                _this11.toggleSortOrder(column);
                if (onHeaderCellClick) {
                  onHeaderCellClick.apply(undefined, arguments);
                }
              };
              return colProps;
            };
          }
          return _extends$1({}, column, {
            className: classnames(column.className, (_classNames3 = {}, _defineProperty(_classNames3, prefixCls + '-column-has-actions', sortButton || filterDropdown), _defineProperty(_classNames3, prefixCls + '-column-has-filters', filterDropdown), _defineProperty(_classNames3, prefixCls + '-column-has-sorters', sortButton), _defineProperty(_classNames3, prefixCls + '-column-sort', isSortColumn && sortOrder), _classNames3)),
            title: [h(
              'span',
              { key: 'title', 'class': prefixCls + '-header-column' },
              [h(
                'div',
                { 'class': sortButton ? prefixCls + '-column-sorters' : undefined },
                [h(
                  'span',
                  { 'class': prefixCls + '-column-title' },
                  [_this11.renderColumnTitle(column.title)]
                ), h(
                  'span',
                  { 'class': prefixCls + '-column-sorter' },
                  [sortButton]
                )]
              )]
            ), filterDropdown],
            customHeaderCell: customHeaderCell
          });
        });
      },
      renderColumnTitle: function renderColumnTitle(title) {
        var _$data = this.$data,
            filters = _$data.sFilters,
            sortOrder = _$data.sSortOrder,
            sortColumn = _$data.sSortColumn;
        // https://github.com/ant-design/ant-design/issues/11246#issuecomment-405009167

        if (title instanceof Function) {
          return title({
            filters: filters,
            sortOrder: sortOrder,
            sortColumn: sortColumn
          });
        }
        return title;
      },
      renderTable: function renderTable(_ref5) {
        var _classNames4,
            _this12 = this;

        var prefixCls = _ref5.prefixCls,
            renderEmpty = _ref5.renderEmpty,
            dropdownPrefixCls = _ref5.dropdownPrefixCls,
            contextLocale = _ref5.contextLocale,
            contextGetPopupContainer = _ref5.getPopupContainer,
            transformCellText = _ref5.transformCellText;
        var h = this.$createElement;

        var _getOptionProps = getOptionProps(this),
            showHeader = _getOptionProps.showHeader,
            locale = _getOptionProps.locale,
            getPopupContainer = _getOptionProps.getPopupContainer,
            restProps = _objectWithoutProperties(_getOptionProps, ['showHeader', 'locale', 'getPopupContainer']);

        var data = this.getCurrentPageData();
        var expandIconAsCell = this.expandedRowRender && this.expandIconAsCell !== false;

        // use props.getPopupContainer first
        var realGetPopupContainer = getPopupContainer || contextGetPopupContainer;

        // Merge too locales
        var mergedLocale = _extends$1({}, contextLocale, locale);
        if (!locale || !locale.emptyText) {
          mergedLocale.emptyText = renderEmpty(h, 'Table');
        }

        var classString = classnames((_classNames4 = {}, _defineProperty(_classNames4, prefixCls + '-' + this.size, true), _defineProperty(_classNames4, prefixCls + '-bordered', this.bordered), _defineProperty(_classNames4, prefixCls + '-empty', !data.length), _defineProperty(_classNames4, prefixCls + '-without-column-header', !showHeader), _classNames4));

        var columnsWithRowSelection = this.renderRowSelection({
          prefixCls: prefixCls,
          locale: mergedLocale,
          getPopupContainer: realGetPopupContainer
        });
        var columns = this.renderColumnsDropdown({
          columns: columnsWithRowSelection,
          prefixCls: prefixCls,
          dropdownPrefixCls: dropdownPrefixCls,
          locale: mergedLocale,
          getPopupContainer: realGetPopupContainer
        }).map(function (column, i) {
          var newColumn = _extends$1({}, column);
          newColumn.key = getColumnKey(newColumn, i);
          return newColumn;
        });

        var expandIconColumnIndex = columns[0] && columns[0].key === 'selection-column' ? 1 : 0;
        if ('expandIconColumnIndex' in restProps) {
          expandIconColumnIndex = restProps.expandIconColumnIndex;
        }
        var vcTableProps = {
          key: 'table',
          props: _extends$1({
            expandIcon: this.renderExpandIcon(prefixCls)
          }, restProps, {
            customRow: function customRow(record, index) {
              return _this12.onRow(prefixCls, record, index);
            },
            components: this.sComponents,
            prefixCls: prefixCls,
            data: data,
            columns: columns,
            showHeader: showHeader,
            expandIconColumnIndex: expandIconColumnIndex,
            expandIconAsCell: expandIconAsCell,
            emptyText: mergedLocale.emptyText,
            transformCellText: transformCellText
          }),
          on: getListeners(this),
          'class': classString,
          ref: 'vcTable'
        };
        return h(Table, vcTableProps);
      }
    },

    render: function render() {
      var _this13 = this;

      var h = arguments[0];
      var customizePrefixCls = this.prefixCls,
          customizeDropdownPrefixCls = this.dropdownPrefixCls,
          customizeTransformCellText = this.transformCellText;

      var data = this.getCurrentPageData();
      var _configProvider = this.configProvider,
          getContextPopupContainer = _configProvider.getPopupContainer,
          tct = _configProvider.transformCellText;

      var getPopupContainer = this.getPopupContainer || getContextPopupContainer;
      var transformCellText = customizeTransformCellText || tct;
      var loading = this.loading;
      if (typeof loading === 'boolean') {
        loading = {
          props: {
            spinning: loading
          }
        };
      } else {
        loading = {
          props: _extends$1({}, loading)
        };
      }
      var getPrefixCls = this.configProvider.getPrefixCls;
      var renderEmpty = this.configProvider.renderEmpty;

      var prefixCls = getPrefixCls('table', customizePrefixCls);
      var dropdownPrefixCls = getPrefixCls('dropdown', customizeDropdownPrefixCls);

      var table = h(LocaleReceiver, {
        attrs: {
          componentName: 'Table',
          defaultLocale: defaultLocale.Table,
          children: function children(locale) {
            return _this13.renderTable({
              prefixCls: prefixCls,
              renderEmpty: renderEmpty,
              dropdownPrefixCls: dropdownPrefixCls,
              contextLocale: locale,
              getPopupContainer: getPopupContainer,
              transformCellText: transformCellText
            });
          }
        }
      });

      // if there is no pagination or no data,
      // the height of spin should decrease by half of pagination
      var paginationPatchClass = this.hasPagination() && data && data.length !== 0 ? prefixCls + '-with-pagination' : prefixCls + '-without-pagination';
      var spinProps = _extends$1({}, loading, {
        'class': loading.props && loading.props.spinning ? paginationPatchClass + ' ' + prefixCls + '-spin-holder' : ''
      });
      return h(
        'div',
        { 'class': classnames(prefixCls + '-wrapper') },
        [h(
          Spin,
          spinProps,
          [this.renderPagination(prefixCls, 'top'), table, this.renderPagination(prefixCls, 'bottom')]
        )]
      );
    }
  };

  Vue.use(ref$1, { name: 'ant-ref' });

  var Table$1 = {
    name: 'ATable',
    Column: T$1.Column,
    ColumnGroup: T$1.ColumnGroup,
    props: T$1.props,
    methods: {
      normalize: function normalize() {
        var _this = this;

        var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        var columns = [];
        elements.forEach(function (element) {
          if (!element.tag) {
            return;
          }
          var key = getKey(element);
          var style = getStyle(element);
          var cls = getClass(element);
          var props = getOptionProps(element);
          var events = getEvents(element);
          var listeners = {};
          Object.keys(events).forEach(function (e) {
            var k = 'on-' + e;
            listeners[camelize(k)] = events[e];
          });

          var _getSlots = getSlots(element),
              children = _getSlots['default'],
              restSlots = _objectWithoutProperties(_getSlots, ['default']);

          var column = _extends$1({}, restSlots, props, { style: style, 'class': cls }, listeners);
          if (key) {
            column.key = key;
          }
          if (getSlotOptions(element).__ANT_TABLE_COLUMN_GROUP) {
            column.children = _this.normalize(typeof children === 'function' ? children() : children);
          } else {
            var customRender = element.data && element.data.scopedSlots && element.data.scopedSlots['default'];
            column.customRender = column.customRender || customRender;
          }
          columns.push(column);
        });
        return columns;
      },
      updateColumns: function updateColumns() {
        var _this2 = this;

        var cols = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        var columns = [];
        var $slots = this.$slots,
            $scopedSlots = this.$scopedSlots;

        cols.forEach(function (col) {
          var _col$slots = col.slots,
              slots = _col$slots === undefined ? {} : _col$slots,
              _col$scopedSlots = col.scopedSlots,
              scopedSlots = _col$scopedSlots === undefined ? {} : _col$scopedSlots,
              restProps = _objectWithoutProperties(col, ['slots', 'scopedSlots']);

          var column = _extends$1({}, restProps);
          Object.keys(slots).forEach(function (key) {
            var name = slots[key];
            if (column[key] === undefined && $slots[name]) {
              column[key] = $slots[name].length === 1 ? $slots[name][0] : $slots[name];
            }
          });
          Object.keys(scopedSlots).forEach(function (key) {
            var name = scopedSlots[key];
            if (column[key] === undefined && $scopedSlots[name]) {
              column[key] = $scopedSlots[name];
            }
          });
          // if (slotScopeName && $scopedSlots[slotScopeName]) {
          //   column.customRender = column.customRender || $scopedSlots[slotScopeName]
          // }
          if (col.children) {
            column.children = _this2.updateColumns(column.children);
          }
          columns.push(column);
        });
        return columns;
      }
    },
    render: function render() {
      var h = arguments[0];
      var $slots = this.$slots,
          normalize = this.normalize,
          $scopedSlots = this.$scopedSlots;

      var props = getOptionProps(this);
      var columns = props.columns ? this.updateColumns(props.columns) : normalize($slots['default']);
      var title = props.title,
          footer = props.footer;
      var slotTitle = $scopedSlots.title,
          slotFooter = $scopedSlots.footer,
          _$scopedSlots$expande = $scopedSlots.expandedRowRender,
          expandedRowRender = _$scopedSlots$expande === undefined ? props.expandedRowRender : _$scopedSlots$expande;

      title = title || slotTitle;
      footer = footer || slotFooter;
      var tProps = {
        props: _extends$1({}, props, {
          columns: columns,
          title: title,
          footer: footer,
          expandedRowRender: expandedRowRender
        }),
        on: getListeners(this)
      };
      return h(T$1, tProps);
    }
  };
  /* istanbul ignore next */
  Table$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Table$1.name, Table$1);
    Vue.component(Table$1.Column.name, Table$1.Column);
    Vue.component(Table$1.ColumnGroup.name, Table$1.ColumnGroup);
  };

  var TransferSearchProps = {
    prefixCls: VuePropTypes.string,
    placeholder: VuePropTypes.string,
    value: VuePropTypes.any,
    handleClear: VuePropTypes.func,
    disabled: VuePropTypes.bool
  };

  var Search$1 = {
    name: 'Search',
    props: initDefaultProps(TransferSearchProps, {
      placeholder: ''
    }),
    methods: {
      handleChange: function handleChange(e) {
        this.$emit('change', e);
      },
      handleClear2: function handleClear2(e) {
        e.preventDefault();
        var _$props = this.$props,
            handleClear = _$props.handleClear,
            disabled = _$props.disabled;

        if (!disabled && handleClear) {
          handleClear(e);
        }
      }
    },
    render: function render() {
      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          placeholder = _getOptionProps.placeholder,
          value = _getOptionProps.value,
          prefixCls = _getOptionProps.prefixCls,
          disabled = _getOptionProps.disabled;

      var icon = value && value.length > 0 ? h(
        'a',
        {
          attrs: { href: '#' },
          'class': prefixCls + '-action', on: {
            'click': this.handleClear2
          }
        },
        [h(Icon$1, {
          attrs: { type: 'close-circle', theme: 'filled' }
        })]
      ) : h(
        'span',
        { 'class': prefixCls + '-action' },
        [h(Icon$1, {
          attrs: { type: 'search' }
        })]
      );

      return h('div', [h(Input, {
        attrs: {
          placeholder: placeholder,

          value: value,

          disabled: disabled
        },
        'class': prefixCls, on: {
          'change': this.handleChange
        }
      }), icon]);
    }
  };

  /** Error message constants. */
  var FUNC_ERROR_TEXT$2 = 'Expected a function';

  /**
   * Creates a throttled function that only invokes `func` at most once per
   * every `wait` milliseconds. The throttled function comes with a `cancel`
   * method to cancel delayed `func` invocations and a `flush` method to
   * immediately invoke them. Provide `options` to indicate whether `func`
   * should be invoked on the leading and/or trailing edge of the `wait`
   * timeout. The `func` is invoked with the last arguments provided to the
   * throttled function. Subsequent calls to the throttled function return the
   * result of the last `func` invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the throttled function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.throttle` and `_.debounce`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to throttle.
   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=true]
   *  Specify invoking on the leading edge of the timeout.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * // Avoid excessively updating the position while scrolling.
   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
   *
   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
   * jQuery(element).on('click', throttled);
   *
   * // Cancel the trailing throttled invocation.
   * jQuery(window).on('popstate', throttled.cancel);
   */
  function throttle$1(func, wait, options) {
    var leading = true,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$2);
    }
    if (isObject_1(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    return debounce_1(func, wait, {
      'leading': leading,
      'maxWait': wait,
      'trailing': trailing
    });
  }

  var throttle_1 = throttle$1;

  var style$1 = function style(element, prop) {
    var styleVal = '';
    if (typeof getComputedStyle !== 'undefined') {
      styleVal = window.getComputedStyle(element, null).getPropertyValue(prop);
    } else {
      styleVal = element.style[prop];
    }
    return styleVal;
  };

  var overflow = function overflow(element) {
    return style$1(element, 'overflow') + style$1(element, 'overflow-y') + style$1(element, 'overflow-x');
  };

  var scrollParent = function scrollParent(element) {
    if (!(element instanceof window.HTMLElement)) {
      return window;
    }

    var parent = element;

    while (parent) {
      if (parent === document.body || parent === document.documentElement) {
        break;
      }

      if (!parent.parentNode) {
        break;
      }
      if (/(scroll|auto)/.test(overflow(parent))) {
        return parent;
      }

      parent = parent.parentNode;
    }

    return window;
  };

  /*
   * Finds element's position relative to the whole document,
   * rather than to the viewport as it is the case with .getBoundingClientRect().
   */
  function getElementPosition(element) {
    var rect = element.getBoundingClientRect();

    return {
      top: rect.top + window.pageYOffset,
      left: rect.left + window.pageXOffset
    };
  }

  var isHidden$2 = function isHidden(element) {
    return element.offsetParent === null;
  };

  function inViewport(element, container, customOffset) {
    if (isHidden$2(element)) {
      return false;
    }

    var top = void 0;
    var bottom = void 0;
    var left = void 0;
    var right = void 0;

    if (typeof container === 'undefined' || container === window) {
      top = window.pageYOffset;
      left = window.pageXOffset;
      bottom = top + window.innerHeight;
      right = left + window.innerWidth;
    } else {
      var containerPosition = getElementPosition(container);

      top = containerPosition.top;
      left = containerPosition.left;
      bottom = top + container.offsetHeight;
      right = left + container.offsetWidth;
    }

    var elementPosition = getElementPosition(element);

    return top <= elementPosition.top + element.offsetHeight + customOffset.top && bottom >= elementPosition.top - customOffset.bottom && left <= elementPosition.left + element.offsetWidth + customOffset.left && right >= elementPosition.left - customOffset.right;
  }

  var lazyLoadProps = {
    debounce: VuePropTypes.bool,
    elementType: VuePropTypes.string,
    height: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
    offset: VuePropTypes.number,
    offsetBottom: VuePropTypes.number,
    offsetHorizontal: VuePropTypes.number,
    offsetLeft: VuePropTypes.number,
    offsetRight: VuePropTypes.number,
    offsetTop: VuePropTypes.number,
    offsetVertical: VuePropTypes.number,
    threshold: VuePropTypes.number,
    throttle: VuePropTypes.number,
    width: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
    _propsSymbol: VuePropTypes.any
  };

  var LazyLoad = {
    name: 'LazyLoad',
    mixins: [BaseMixin],
    props: initDefaultProps(lazyLoadProps, {
      elementType: 'div',
      debounce: true,
      offset: 0,
      offsetBottom: 0,
      offsetHorizontal: 0,
      offsetLeft: 0,
      offsetRight: 0,
      offsetTop: 0,
      offsetVertical: 0,
      throttle: 250
    }),
    data: function data() {
      if (this.throttle > 0) {
        if (this.debounce) {
          this.lazyLoadHandler = debounce_1(this.lazyLoadHandler, this.throttle);
        } else {
          this.lazyLoadHandler = throttle_1(this.lazyLoadHandler, this.throttle);
        }
      }
      return {
        visible: false
      };
    },

    watch: {
      _propsSymbol: function _propsSymbol() {
        if (!this.visible) {
          this.lazyLoadHandler();
        }
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        _this._mounted = true;
        var eventNode = _this.getEventNode();

        _this.lazyLoadHandler();

        if (_this.lazyLoadHandler.flush) {
          _this.lazyLoadHandler.flush();
        }
        _this.resizeHander = addEventListenerWrap(window, 'resize', _this.lazyLoadHandler);
        _this.scrollHander = addEventListenerWrap(eventNode, 'scroll', _this.lazyLoadHandler);
      });
    },
    beforeDestroy: function beforeDestroy() {
      this._mounted = false;
      if (this.lazyLoadHandler.cancel) {
        this.lazyLoadHandler.cancel();
      }

      this.detachListeners();
    },

    methods: {
      getEventNode: function getEventNode() {
        return scrollParent(this.$el);
      },
      getOffset: function getOffset() {
        var _$props = this.$props,
            offset = _$props.offset,
            offsetVertical = _$props.offsetVertical,
            offsetHorizontal = _$props.offsetHorizontal,
            offsetTop = _$props.offsetTop,
            offsetBottom = _$props.offsetBottom,
            offsetLeft = _$props.offsetLeft,
            offsetRight = _$props.offsetRight,
            threshold = _$props.threshold;


        var _offsetAll = threshold || offset;
        var _offsetVertical = offsetVertical || _offsetAll;
        var _offsetHorizontal = offsetHorizontal || _offsetAll;

        return {
          top: offsetTop || _offsetVertical,
          bottom: offsetBottom || _offsetVertical,
          left: offsetLeft || _offsetHorizontal,
          right: offsetRight || _offsetHorizontal
        };
      },
      lazyLoadHandler: function lazyLoadHandler() {
        var _this2 = this;

        if (!this._mounted) {
          return;
        }
        var offset = this.getOffset();
        var node = this.$el;
        var eventNode = this.getEventNode();

        if (inViewport(node, eventNode, offset)) {
          this.setState({ visible: true }, function () {
            _this2.__emit('contentVisible');
          });
          this.detachListeners();
        }
      },
      detachListeners: function detachListeners() {
        this.resizeHander && this.resizeHander.remove();
        this.scrollHander && this.scrollHander.remove();
      }
    },
    render: function render(createElement) {
      var children = this.$slots['default'];
      if (children.length !== 1) {
        warning$1(false, 'lazyLoad组件只能包含一个子元素');
        return null;
      }
      var _$props2 = this.$props,
          height = _$props2.height,
          width = _$props2.width,
          elementType = _$props2.elementType;
      var visible = this.visible;


      var elStyles = {
        height: typeof height === 'number' ? height + 'px' : height,
        width: typeof width === 'number' ? width + 'px' : width
      };
      var elClasses = {
        LazyLoad: true,
        'is-visible': visible
      };

      return createElement(elementType, {
        'class': elClasses,
        style: elStyles
      }, [visible ? children[0] : null]);
    }
  };

  function noop$S() {}

  var ListItem = {
    name: 'ListItem',
    props: {
      renderedText: VuePropTypes.any,
      renderedEl: VuePropTypes.any,
      item: VuePropTypes.any,
      lazy: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.object]),
      checked: VuePropTypes.bool,
      prefixCls: VuePropTypes.string,
      disabled: VuePropTypes.bool
    },
    render: function render() {
      var _classNames,
          _this = this;

      var h = arguments[0];
      var _$props = this.$props,
          renderedText = _$props.renderedText,
          renderedEl = _$props.renderedEl,
          item = _$props.item,
          lazy = _$props.lazy,
          checked = _$props.checked,
          disabled = _$props.disabled,
          prefixCls = _$props.prefixCls;


      var className = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-content-item', true), _defineProperty(_classNames, prefixCls + '-content-item-disabled', disabled || item.disabled), _classNames));

      var title = void 0;
      if (typeof renderedText === 'string' || typeof renderedText === 'number') {
        title = String(renderedText);
      }

      var listItem = h(
        'li',
        {
          'class': className,
          attrs: { title: title
          },
          on: {
            'click': disabled || item.disabled ? noop$S : function () {
              _this.$emit('click', item);
            }
          }
        },
        [h(Checkbox$1, {
          attrs: { checked: checked, disabled: disabled || item.disabled }
        }), h(
          'span',
          { 'class': prefixCls + '-content-item-text' },
          [renderedEl]
        )]
      );
      var children = null;
      if (lazy) {
        var lazyProps = {
          props: _extends$1({
            height: 32,
            offset: 500,
            throttle: 0,
            debounce: false
          }, lazy, {
            _propsSymbol: Symbol()
          })
        };
        children = h(
          LazyLoad,
          lazyProps,
          [listItem]
        );
      } else {
        children = listItem;
      }
      return children;
    }
  };

  function noop$T() {}
  var ListBody = {
    name: 'ListBody',
    inheritAttrs: false,
    props: {
      prefixCls: VuePropTypes.string,
      filteredRenderItems: VuePropTypes.array.def([]),
      lazy: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.object]),
      selectedKeys: VuePropTypes.array,
      disabled: VuePropTypes.bool
    },
    data: function data() {
      return {
        mounted: false
      };
    },

    computed: {
      itemsLength: function itemsLength() {
        return this.filteredRenderItems ? this.filteredRenderItems.length : 0;
      }
    },
    watch: {
      itemsLength: function itemsLength() {
        var _this = this;

        this.$nextTick(function () {
          var lazy = _this.$props.lazy;

          if (lazy !== false) {
            var container = _this.$el;
            wrapperRaf.cancel(_this.lazyId);
            _this.lazyId = wrapperRaf(function () {
              if (container) {
                var scrollEvent = new Event('scroll', { bubbles: true });
                container.dispatchEvent(scrollEvent);
              }
            });
          }
        });
      }
    },
    mounted: function mounted() {
      var _this2 = this;

      this.mountId = wrapperRaf(function () {
        _this2.mounted = true;
      });
    },
    beforeDestroy: function beforeDestroy() {
      wrapperRaf.cancel(this.mountId);
      wrapperRaf.cancel(this.lazyId);
    },

    methods: {
      onItemSelect: function onItemSelect(item) {
        var selectedKeys = this.$props.selectedKeys;

        var checked = selectedKeys.indexOf(item.key) >= 0;
        this.$emit('itemSelect', item.key, !checked);
      },
      onScroll: function onScroll(e) {
        this.$emit('scroll', e);
      }
    },
    render: function render() {
      var _this3 = this;

      var h = arguments[0];
      var mounted = this.$data.mounted;
      var _$props = this.$props,
          prefixCls = _$props.prefixCls,
          filteredRenderItems = _$props.filteredRenderItems,
          lazy = _$props.lazy,
          selectedKeys = _$props.selectedKeys,
          globalDisabled = _$props.disabled;

      var items = filteredRenderItems.map(function (_ref) {
        var renderedEl = _ref.renderedEl,
            renderedText = _ref.renderedText,
            item = _ref.item;
        var disabled = item.disabled;

        var checked = selectedKeys.indexOf(item.key) >= 0;

        return h(ListItem, {
          attrs: {
            disabled: globalDisabled || disabled,

            item: item,
            lazy: lazy,
            renderedText: renderedText,
            renderedEl: renderedEl,
            checked: checked,
            prefixCls: prefixCls
          },
          key: item.key, on: {
            'click': _this3.onItemSelect
          }
        });
      });
      var transitionProps = getTransitionProps(mounted ? prefixCls + '-content-item-highlight' : '', {
        tag: 'ul',
        nativeOn: {
          scroll: this.onScroll
        },
        leave: noop$T
      });
      return h(
        'transition-group',
        babelHelperVueJsxMergeProps([{ 'class': prefixCls + '-content' }, transitionProps]),
        [items]
      );
    }
  };

  var defaultRenderList = (function (h, props) {
    return h(ListBody, props);
  });

  function triggerEvent(el, type) {
    if ('createEvent' in document) {
      // modern browsers, IE9+
      var e = document.createEvent('HTMLEvents');
      e.initEvent(type, false, true);
      el.dispatchEvent(e);
    }
  }

  var defaultRender = function defaultRender() {
    return null;
  };

  var TransferItem = {
    key: VuePropTypes.string.isRequired,
    title: VuePropTypes.string.isRequired,
    description: VuePropTypes.string,
    disabled: VuePropTypes.bool
  };

  function isRenderResultPlainObject(result) {
    return result && !isValidElement(result) && Object.prototype.toString.call(result) === '[object Object]';
  }

  var TransferListProps = {
    prefixCls: VuePropTypes.string,
    titleText: VuePropTypes.string,
    dataSource: VuePropTypes.arrayOf(VuePropTypes.shape(TransferItem).loose),
    filter: VuePropTypes.string,
    filterOption: VuePropTypes.func,
    checkedKeys: VuePropTypes.arrayOf(VuePropTypes.string),
    handleFilter: VuePropTypes.func,
    handleSelect: VuePropTypes.func,
    handleSelectAll: VuePropTypes.func,
    handleClear: VuePropTypes.func,
    renderItem: VuePropTypes.func,
    showSearch: VuePropTypes.bool,
    searchPlaceholder: VuePropTypes.string,
    notFoundContent: VuePropTypes.any,
    itemUnit: VuePropTypes.string,
    itemsUnit: VuePropTypes.string,
    body: VuePropTypes.any,
    renderList: VuePropTypes.any,
    footer: VuePropTypes.any,
    lazy: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.object]),
    disabled: VuePropTypes.bool,
    direction: VuePropTypes.string,
    showSelectAll: VuePropTypes.bool
  };

  function renderListNode(h, renderList, props) {
    var bodyContent = renderList ? renderList(props) : null;
    var customize = !!bodyContent;
    if (!customize) {
      bodyContent = defaultRenderList(h, props);
    }
    return {
      customize: customize,
      bodyContent: bodyContent
    };
  }

  var List$1 = {
    name: 'TransferList',
    mixins: [BaseMixin],
    props: initDefaultProps(TransferListProps, {
      dataSource: [],
      titleText: '',
      showSearch: false,
      lazy: {}
    }),
    data: function data() {
      this.timer = null;
      this.triggerScrollTimer = null;
      return {
        filterValue: ''
      };
    },

    // mounted() {
    //   this.timer = setTimeout(() => {
    //     this.setState({
    //       mounted: true,
    //     });
    //   }, 0);
    //   this.$nextTick(() => {
    //     if (this.$refs.listContentWrapper) {
    //       const listContentWrapperDom = this.$refs.listContentWrapper.$el;
    //       this.scrollEvent = addEventListener(listContentWrapperDom, 'scroll', this.handleScroll);
    //     }
    //   });
    // },
    beforeDestroy: function beforeDestroy() {
      clearTimeout(this.triggerScrollTimer);
      // if (this.scrollEvent) {
      //   this.scrollEvent.remove();
      // }
    },
    updated: function updated() {
      var _this = this;

      this.$nextTick(function () {
        if (_this.scrollEvent) {
          _this.scrollEvent.remove();
        }
        if (_this.$refs.listContentWrapper) {
          var listContentWrapperDom = _this.$refs.listContentWrapper.$el;
          _this.scrollEvent = addEventListenerWrap(listContentWrapperDom, 'scroll', _this.handleScroll);
        }
      });
    },

    methods: {
      handleScroll: function handleScroll(e) {
        this.$emit('scroll', e);
      },
      getCheckStatus: function getCheckStatus(filteredItems) {
        var checkedKeys = this.$props.checkedKeys;

        if (checkedKeys.length === 0) {
          return 'none';
        }
        if (filteredItems.every(function (item) {
          return checkedKeys.indexOf(item.key) >= 0 || !!item.disabled;
        })) {
          return 'all';
        }
        return 'part';
      },
      getFilteredItems: function getFilteredItems(dataSource, filterValue) {
        var _this2 = this;

        var filteredItems = [];
        var filteredRenderItems = [];

        dataSource.forEach(function (item) {
          var renderedItem = _this2.renderItemHtml(item);
          var renderedText = renderedItem.renderedText;

          // Filter skip

          if (filterValue && filterValue.trim() && !_this2.matchFilter(renderedText, item)) {
            return null;
          }

          filteredItems.push(item);
          filteredRenderItems.push(renderedItem);
        });

        return { filteredItems: filteredItems, filteredRenderItems: filteredRenderItems };
      },
      getListBody: function getListBody(prefixCls, searchPlaceholder, filterValue, filteredItems, notFoundContent, bodyDom, filteredRenderItems, checkedKeys, renderList, showSearch, disabled) {
        var h = this.$createElement;

        var search = showSearch ? h(
          'div',
          { 'class': prefixCls + '-body-search-wrapper' },
          [h(Search$1, {
            attrs: {
              prefixCls: prefixCls + '-search',

              handleClear: this._handleClear,
              placeholder: searchPlaceholder,
              value: filterValue,
              disabled: disabled
            },
            on: {
              'change': this._handleFilter
            }
          })]
        ) : null;

        var listBody = bodyDom;
        if (!listBody) {
          var bodyNode = void 0;

          var _renderListNode = renderListNode(this.$createElement, renderList, {
            props: _extends$1({}, this.$props, { filteredItems: filteredItems, filteredRenderItems: filteredRenderItems, selectedKeys: checkedKeys }),
            on: getListeners(this)
          }),
              bodyContent = _renderListNode.bodyContent,
              customize = _renderListNode.customize;

          // We should wrap customize list body in a classNamed div to use flex layout.


          if (customize) {
            bodyNode = h(
              'div',
              { 'class': prefixCls + '-body-customize-wrapper' },
              [bodyContent]
            );
          } else {
            bodyNode = filteredItems.length ? bodyContent : h(
              'div',
              { 'class': prefixCls + '-body-not-found' },
              [notFoundContent]
            );
          }

          listBody = h(
            'div',
            {
              'class': classnames(showSearch ? prefixCls + '-body ' + prefixCls + '-body-with-search' : prefixCls + '-body')
            },
            [search, bodyNode]
          );
        }
        return listBody;
      },
      getCheckBox: function getCheckBox(filteredItems, showSelectAll, disabled) {
        var _this3 = this;

        var h = this.$createElement;

        var checkStatus = this.getCheckStatus(filteredItems);
        var checkedAll = checkStatus === 'all';
        var checkAllCheckbox = showSelectAll !== false && h(Checkbox$1, {
          attrs: {
            disabled: disabled,
            checked: checkedAll,
            indeterminate: checkStatus === 'part'
          },
          on: {
            'change': function change() {
              // Only select enabled items
              _this3.$emit('itemSelectAll', filteredItems.filter(function (item) {
                return !item.disabled;
              }).map(function (_ref) {
                var key = _ref.key;
                return key;
              }), !checkedAll);
            }
          }
        });

        return checkAllCheckbox;
      },
      _handleSelect: function _handleSelect(selectedItem) {
        var checkedKeys = this.$props.checkedKeys;

        var result = checkedKeys.some(function (key) {
          return key === selectedItem.key;
        });
        this.handleSelect(selectedItem, !result);
      },
      _handleFilter: function _handleFilter(e) {
        var _this4 = this;

        var handleFilter = this.$props.handleFilter;
        var filterValue = e.target.value;

        this.setState({ filterValue: filterValue });
        handleFilter(e);
        if (!filterValue) {
          return;
        }
        // Manually trigger scroll event for lazy search bug
        // https://github.com/ant-design/ant-design/issues/5631
        this.triggerScrollTimer = setTimeout(function () {
          var transferNode = _this4.$el;
          var listNode = transferNode.querySelectorAll('.ant-transfer-list-content')[0];
          if (listNode) {
            triggerEvent(listNode, 'scroll');
          }
        }, 0);
      },
      _handleClear: function _handleClear(e) {
        this.setState({ filterValue: '' });
        this.handleClear(e);
      },
      matchFilter: function matchFilter(text, item) {
        var filterValue = this.$data.filterValue;
        var filterOption = this.$props.filterOption;

        if (filterOption) {
          return filterOption(filterValue, item);
        }
        return text.indexOf(filterValue) >= 0;
      },
      renderItemHtml: function renderItemHtml(item) {
        var _$props$renderItem = this.$props.renderItem,
            renderItem = _$props$renderItem === undefined ? defaultRender : _$props$renderItem;

        var renderResult = renderItem(item);
        var isRenderResultPlain = isRenderResultPlainObject(renderResult);
        return {
          renderedText: isRenderResultPlain ? renderResult.value : renderResult,
          renderedEl: isRenderResultPlain ? renderResult.label : renderResult,
          item: item
        };
      },
      filterNull: function filterNull(arr) {
        return arr.filter(function (item) {
          return item !== null;
        });
      }
    },

    render: function render() {
      var h = arguments[0];
      var filterValue = this.$data.filterValue;
      var _$props = this.$props,
          prefixCls = _$props.prefixCls,
          dataSource = _$props.dataSource,
          titleText = _$props.titleText,
          checkedKeys = _$props.checkedKeys,
          disabled = _$props.disabled,
          body = _$props.body,
          footer = _$props.footer,
          showSearch = _$props.showSearch,
          searchPlaceholder = _$props.searchPlaceholder,
          notFoundContent = _$props.notFoundContent,
          itemUnit = _$props.itemUnit,
          itemsUnit = _$props.itemsUnit,
          renderList = _$props.renderList,
          showSelectAll = _$props.showSelectAll;

      // Custom Layout

      var footerDom = footer && footer(_extends$1({}, this.$props));
      var bodyDom = body && body(_extends$1({}, this.$props));

      var listCls = classnames(prefixCls, _defineProperty({}, prefixCls + '-with-footer', !!footerDom));

      // ====================== Get filtered, checked item list ======================

      var _getFilteredItems = this.getFilteredItems(dataSource, filterValue),
          filteredItems = _getFilteredItems.filteredItems,
          filteredRenderItems = _getFilteredItems.filteredRenderItems;

      // ================================= List Body =================================

      var unit = dataSource.length > 1 ? itemsUnit : itemUnit;

      var listBody = this.getListBody(prefixCls, searchPlaceholder, filterValue, filteredItems, notFoundContent, bodyDom, filteredRenderItems, checkedKeys, renderList, showSearch, disabled);

      var listFooter = footerDom ? h(
        'div',
        { 'class': prefixCls + '-footer' },
        [footerDom]
      ) : null;

      var checkAllCheckbox = this.getCheckBox(filteredItems, showSelectAll, disabled);

      return h(
        'div',
        { 'class': listCls },
        [h(
          'div',
          { 'class': prefixCls + '-header' },
          [checkAllCheckbox, h(
            'span',
            { 'class': prefixCls + '-header-selected' },
            [h('span', [(checkedKeys.length > 0 ? checkedKeys.length + '/' : '') + filteredItems.length, ' ', unit]), h(
              'span',
              { 'class': prefixCls + '-header-title' },
              [titleText]
            )]
          )]
        ), listBody, listFooter]
      );
    }
  };

  function noop$U() {}

  var TransferOperationProps = {
    className: VuePropTypes.string,
    leftArrowText: VuePropTypes.string,
    rightArrowText: VuePropTypes.string,
    moveToLeft: VuePropTypes.any,
    moveToRight: VuePropTypes.any,
    leftActive: VuePropTypes.bool,
    rightActive: VuePropTypes.bool,
    disabled: VuePropTypes.bool
  };

  var Operation = {
    name: 'Operation',
    props: _extends$1({}, TransferOperationProps),
    render: function render() {
      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          disabled = _getOptionProps.disabled,
          _getOptionProps$moveT = _getOptionProps.moveToLeft,
          moveToLeft = _getOptionProps$moveT === undefined ? noop$U : _getOptionProps$moveT,
          _getOptionProps$moveT2 = _getOptionProps.moveToRight,
          moveToRight = _getOptionProps$moveT2 === undefined ? noop$U : _getOptionProps$moveT2,
          _getOptionProps$leftA = _getOptionProps.leftArrowText,
          leftArrowText = _getOptionProps$leftA === undefined ? '' : _getOptionProps$leftA,
          _getOptionProps$right = _getOptionProps.rightArrowText,
          rightArrowText = _getOptionProps$right === undefined ? '' : _getOptionProps$right,
          leftActive = _getOptionProps.leftActive,
          rightActive = _getOptionProps.rightActive;

      return h('div', [h(
        Button,
        {
          attrs: {
            type: 'primary',
            size: 'small',
            disabled: disabled || !rightActive,

            icon: 'right'
          },
          on: {
            'click': moveToRight
          }
        },
        [rightArrowText]
      ), h(
        Button,
        {
          attrs: {
            type: 'primary',
            size: 'small',
            disabled: disabled || !leftActive,

            icon: 'left'
          },
          on: {
            'click': moveToLeft
          }
        },
        [leftArrowText]
      )]);
    }
  };

  var TransferItem$1 = {
    key: VuePropTypes.string.isRequired,
    title: VuePropTypes.string.isRequired,
    description: VuePropTypes.string,
    disabled: VuePropTypes.bool
  };

  var TransferProps = {
    prefixCls: VuePropTypes.string,
    dataSource: VuePropTypes.arrayOf(VuePropTypes.shape(TransferItem$1).loose),
    disabled: VuePropTypes.boolean,
    targetKeys: VuePropTypes.arrayOf(VuePropTypes.string),
    selectedKeys: VuePropTypes.arrayOf(VuePropTypes.string),
    render: VuePropTypes.func,
    listStyle: VuePropTypes.oneOfType([VuePropTypes.func, VuePropTypes.object]),
    operationStyle: VuePropTypes.object,
    titles: VuePropTypes.arrayOf(VuePropTypes.string),
    operations: VuePropTypes.arrayOf(VuePropTypes.string),
    showSearch: VuePropTypes.bool,
    filterOption: VuePropTypes.func,
    searchPlaceholder: VuePropTypes.string,
    notFoundContent: VuePropTypes.any,
    locale: VuePropTypes.object,
    rowKey: VuePropTypes.func,
    lazy: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.bool]),
    showSelectAll: VuePropTypes.bool
  };

  var TransferLocale = {
    titles: VuePropTypes.arrayOf(VuePropTypes.string),
    notFoundContent: VuePropTypes.string,
    itemUnit: VuePropTypes.string,
    itemsUnit: VuePropTypes.string
  };

  var Transfer = {
    name: 'ATransfer',
    mixins: [BaseMixin],
    props: initDefaultProps(TransferProps, {
      dataSource: [],
      locale: {},
      showSearch: false,
      listStyle: function listStyle() {}
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    data: function data() {
      // vue 中 通过slot，不方便传递，保留notFoundContent及searchPlaceholder
      // warning(
      //   !(getComponentFromProp(this, 'notFoundContent') || hasProp(this, 'searchPlaceholder')),
      //   'Transfer[notFoundContent] and Transfer[searchPlaceholder] will be removed, ' +
      //   'please use Transfer[locale] instead.',
      // )
      var _selectedKeys = this.selectedKeys,
          selectedKeys = _selectedKeys === undefined ? [] : _selectedKeys,
          _targetKeys = this.targetKeys,
          targetKeys = _targetKeys === undefined ? [] : _targetKeys;

      return {
        leftFilter: '',
        rightFilter: '',
        sourceSelectedKeys: selectedKeys.filter(function (key) {
          return targetKeys.indexOf(key) === -1;
        }),
        targetSelectedKeys: selectedKeys.filter(function (key) {
          return targetKeys.indexOf(key) > -1;
        })
      };
    },
    mounted: function mounted() {
      // this.currentProps = { ...this.$props }
    },

    watch: {
      targetKeys: function targetKeys() {
        this.updateState();
        if (this.selectedKeys) {
          var targetKeys = this.targetKeys || [];
          this.setState({
            sourceSelectedKeys: this.selectedKeys.filter(function (key) {
              return !targetKeys.includes(key);
            }),
            targetSelectedKeys: this.selectedKeys.filter(function (key) {
              return targetKeys.includes(key);
            })
          });
        }
      },
      dataSource: function dataSource() {
        this.updateState();
      },
      selectedKeys: function selectedKeys() {
        if (this.selectedKeys) {
          var targetKeys = this.targetKeys || [];
          this.setState({
            sourceSelectedKeys: this.selectedKeys.filter(function (key) {
              return !targetKeys.includes(key);
            }),
            targetSelectedKeys: this.selectedKeys.filter(function (key) {
              return targetKeys.includes(key);
            })
          });
        }
      }
    },
    methods: {
      getSelectedKeysName: function getSelectedKeysName(direction) {
        return direction === 'left' ? 'sourceSelectedKeys' : 'targetSelectedKeys';
      },
      getTitles: function getTitles(transferLocale) {
        if (this.titles) {
          return this.titles;
        }
        return transferLocale.titles || ['', ''];
      },
      getLocale: function getLocale(transferLocale, renderEmpty) {
        var h = this.$createElement;
        // Keep old locale props still working.
        var oldLocale = {
          notFoundContent: renderEmpty(h, 'Transfer')
        };
        var notFoundContent = getComponentFromProp(this, 'notFoundContent');
        if (notFoundContent) {
          oldLocale.notFoundContent = notFoundContent;
        }
        if (hasProp(this, 'searchPlaceholder')) {
          oldLocale.searchPlaceholder = this.$props.searchPlaceholder;
        }

        return _extends$1({}, transferLocale, oldLocale, this.$props.locale);
      },
      updateState: function updateState() {
        var sourceSelectedKeys = this.sourceSelectedKeys,
            targetSelectedKeys = this.targetSelectedKeys;

        this.separatedDataSource = null;
        if (!this.selectedKeys) {
          // clear key nolonger existed
          // clear checkedKeys according to targetKeys
          var dataSource = this.dataSource,
              _targetKeys2 = this.targetKeys,
              targetKeys = _targetKeys2 === undefined ? [] : _targetKeys2;


          var newSourceSelectedKeys = [];
          var newTargetSelectedKeys = [];
          dataSource.forEach(function (_ref) {
            var key = _ref.key;

            if (sourceSelectedKeys.includes(key) && !targetKeys.includes(key)) {
              newSourceSelectedKeys.push(key);
            }
            if (targetSelectedKeys.includes(key) && targetKeys.includes(key)) {
              newTargetSelectedKeys.push(key);
            }
          });
          this.setState({
            sourceSelectedKeys: newSourceSelectedKeys,
            targetSelectedKeys: newTargetSelectedKeys
          });
        }
      },
      moveTo: function moveTo(direction) {
        var _$props = this.$props,
            _$props$targetKeys = _$props.targetKeys,
            targetKeys = _$props$targetKeys === undefined ? [] : _$props$targetKeys,
            _$props$dataSource = _$props.dataSource,
            dataSource = _$props$dataSource === undefined ? [] : _$props$dataSource;
        var sourceSelectedKeys = this.sourceSelectedKeys,
            targetSelectedKeys = this.targetSelectedKeys;

        var moveKeys = direction === 'right' ? sourceSelectedKeys : targetSelectedKeys;
        // filter the disabled options
        var newMoveKeys = moveKeys.filter(function (key) {
          return !dataSource.some(function (data) {
            return !!(key === data.key && data.disabled);
          });
        });
        // move items to target box
        var newTargetKeys = direction === 'right' ? newMoveKeys.concat(targetKeys) : targetKeys.filter(function (targetKey) {
          return newMoveKeys.indexOf(targetKey) === -1;
        });

        // empty checked keys
        var oppositeDirection = direction === 'right' ? 'left' : 'right';
        this.setState(_defineProperty({}, this.getSelectedKeysName(oppositeDirection), []));
        this.handleSelectChange(oppositeDirection, []);

        this.$emit('change', newTargetKeys, direction, newMoveKeys);
      },
      moveToLeft: function moveToLeft() {
        this.moveTo('left');
      },
      moveToRight: function moveToRight() {
        this.moveTo('right');
      },
      onItemSelectAll: function onItemSelectAll(direction, selectedKeys, checkAll) {
        var originalSelectedKeys = this.$data[this.getSelectedKeysName(direction)] || [];

        var mergedCheckedKeys = [];
        if (checkAll) {
          // Merge current keys with origin key
          mergedCheckedKeys = Array.from(new Set([].concat(_toConsumableArray(originalSelectedKeys), _toConsumableArray(selectedKeys))));
        } else {
          // Remove current keys from origin keys
          mergedCheckedKeys = originalSelectedKeys.filter(function (key) {
            return selectedKeys.indexOf(key) === -1;
          });
        }

        this.handleSelectChange(direction, mergedCheckedKeys);

        if (!this.$props.selectedKeys) {
          this.setState(_defineProperty({}, this.getSelectedKeysName(direction), mergedCheckedKeys));
        }
      },
      handleSelectAll: function handleSelectAll(direction, filteredDataSource, checkAll) {
        this.onItemSelectAll(direction, filteredDataSource.map(function (_ref2) {
          var key = _ref2.key;
          return key;
        }), !checkAll);
      },


      // [Legacy] Old prop `body` pass origin check as arg. It's confusing.
      // TODO: Remove this in next version.
      handleLeftSelectAll: function handleLeftSelectAll(filteredDataSource, checkAll) {
        return this.handleSelectAll('left', filteredDataSource, !checkAll);
      },
      handleRightSelectAll: function handleRightSelectAll(filteredDataSource, checkAll) {
        return this.handleSelectAll('right', filteredDataSource, !checkAll);
      },
      onLeftItemSelectAll: function onLeftItemSelectAll(selectedKeys, checkAll) {
        return this.onItemSelectAll('left', selectedKeys, checkAll);
      },
      onRightItemSelectAll: function onRightItemSelectAll(selectedKeys, checkAll) {
        return this.onItemSelectAll('right', selectedKeys, checkAll);
      },
      handleFilter: function handleFilter(direction, e) {
        var value = e.target.value;
        if (getListeners(this).searchChange) {
          warning$1(false, 'Transfer', '`searchChange` in Transfer is deprecated. Please use `search` instead.');
          this.$emit('searchChange', direction, e);
        }
        this.$emit('search', direction, value);
      },
      handleLeftFilter: function handleLeftFilter(e) {
        this.handleFilter('left', e);
      },
      handleRightFilter: function handleRightFilter(e) {
        this.handleFilter('right', e);
      },
      handleClear: function handleClear(direction) {
        this.$emit('search', direction, '');
      },
      handleLeftClear: function handleLeftClear() {
        this.handleClear('left');
      },
      handleRightClear: function handleRightClear() {
        this.handleClear('right');
      },
      onItemSelect: function onItemSelect(direction, selectedKey, checked) {
        var sourceSelectedKeys = this.sourceSelectedKeys,
            targetSelectedKeys = this.targetSelectedKeys;

        var holder = direction === 'left' ? [].concat(_toConsumableArray(sourceSelectedKeys)) : [].concat(_toConsumableArray(targetSelectedKeys));
        var index = holder.indexOf(selectedKey);
        if (index > -1) {
          holder.splice(index, 1);
        }
        if (checked) {
          holder.push(selectedKey);
        }
        this.handleSelectChange(direction, holder);

        if (!this.selectedKeys) {
          this.setState(_defineProperty({}, this.getSelectedKeysName(direction), holder));
        }
      },
      handleSelect: function handleSelect(direction, selectedItem, checked) {
        warning$1(false, 'Transfer', '`handleSelect` will be removed, please use `onSelect` instead.');
        this.onItemSelect(direction, selectedItem.key, checked);
      },
      handleLeftSelect: function handleLeftSelect(selectedItem, checked) {
        return this.handleSelect('left', selectedItem, checked);
      },
      handleRightSelect: function handleRightSelect(selectedItem, checked) {
        return this.handleSelect('right', selectedItem, checked);
      },
      onLeftItemSelect: function onLeftItemSelect(selectedKey, checked) {
        return this.onItemSelect('left', selectedKey, checked);
      },
      onRightItemSelect: function onRightItemSelect(selectedKey, checked) {
        return this.onItemSelect('right', selectedKey, checked);
      },
      handleScroll: function handleScroll(direction, e) {
        this.$emit('scroll', direction, e);
      },
      handleLeftScroll: function handleLeftScroll(e) {
        this.handleScroll('left', e);
      },
      handleRightScroll: function handleRightScroll(e) {
        this.handleScroll('right', e);
      },
      handleSelectChange: function handleSelectChange(direction, holder) {
        var sourceSelectedKeys = this.sourceSelectedKeys,
            targetSelectedKeys = this.targetSelectedKeys;


        if (direction === 'left') {
          this.$emit('selectChange', holder, targetSelectedKeys);
        } else {
          this.$emit('selectChange', sourceSelectedKeys, holder);
        }
      },
      handleListStyle: function handleListStyle(listStyle, direction) {
        if (typeof listStyle === 'function') {
          return listStyle({ direction: direction });
        }
        return listStyle;
      },
      separateDataSource: function separateDataSource() {
        var _$props2 = this.$props,
            dataSource = _$props2.dataSource,
            rowKey = _$props2.rowKey,
            _$props2$targetKeys = _$props2.targetKeys,
            targetKeys = _$props2$targetKeys === undefined ? [] : _$props2$targetKeys;


        var leftDataSource = [];
        var rightDataSource = new Array(targetKeys.length);
        dataSource.forEach(function (record) {
          if (rowKey) {
            record.key = rowKey(record);
          }

          // rightDataSource should be ordered by targetKeys
          // leftDataSource should be ordered by dataSource
          var indexOfKey = targetKeys.indexOf(record.key);
          if (indexOfKey !== -1) {
            rightDataSource[indexOfKey] = record;
          } else {
            leftDataSource.push(record);
          }
        });

        return {
          leftDataSource: leftDataSource,
          rightDataSource: rightDataSource
        };
      },
      renderTransfer: function renderTransfer(transferLocale) {
        var _classNames;

        var h = this.$createElement;

        var props = getOptionProps(this);
        var customizePrefixCls = props.prefixCls,
            disabled = props.disabled,
            _props$operations = props.operations,
            operations = _props$operations === undefined ? [] : _props$operations,
            showSearch = props.showSearch,
            listStyle = props.listStyle,
            operationStyle = props.operationStyle,
            filterOption = props.filterOption,
            lazy = props.lazy,
            showSelectAll = props.showSelectAll;

        var children = getComponentFromProp(this, 'children', {}, false);
        var getPrefixCls = this.configProvider.getPrefixCls;
        var prefixCls = getPrefixCls('transfer', customizePrefixCls);

        var renderEmpty = this.configProvider.renderEmpty;
        var locale = this.getLocale(transferLocale, renderEmpty);
        var sourceSelectedKeys = this.sourceSelectedKeys,
            targetSelectedKeys = this.targetSelectedKeys,
            $scopedSlots = this.$scopedSlots;
        var body = $scopedSlots.body,
            footer = $scopedSlots.footer;

        var renderItem = props.render;

        var _separateDataSource = this.separateDataSource(),
            leftDataSource = _separateDataSource.leftDataSource,
            rightDataSource = _separateDataSource.rightDataSource;

        var leftActive = targetSelectedKeys.length > 0;
        var rightActive = sourceSelectedKeys.length > 0;

        var cls = classnames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-disabled', disabled), _defineProperty(_classNames, prefixCls + '-customize-list', !!children), _classNames));
        var titles = this.getTitles(locale);
        return h(
          'div',
          { 'class': cls },
          [h(List$1, {
            key: 'leftList',
            attrs: { prefixCls: prefixCls + '-list',
              titleText: titles[0],
              dataSource: leftDataSource,
              filterOption: filterOption,

              checkedKeys: sourceSelectedKeys,
              handleFilter: this.handleLeftFilter,
              handleClear: this.handleLeftClear,
              handleSelect: this.handleLeftSelect,
              handleSelectAll: this.handleLeftSelectAll,

              renderItem: renderItem,
              showSearch: showSearch,
              body: body,
              renderList: children,
              footer: footer,
              lazy: lazy,

              disabled: disabled,
              direction: 'left',
              showSelectAll: showSelectAll,
              itemUnit: locale.itemUnit,
              itemsUnit: locale.itemsUnit,
              notFoundContent: locale.notFoundContent,
              searchPlaceholder: locale.searchPlaceholder
            },
            style: this.handleListStyle(listStyle, 'left'), on: {
              'itemSelect': this.onLeftItemSelect,
              'itemSelectAll': this.onLeftItemSelectAll,
              'scroll': this.handleLeftScroll
            }
          }), h(Operation, {
            key: 'operation',
            'class': prefixCls + '-operation',
            attrs: { rightActive: rightActive,
              rightArrowText: operations[0],
              moveToRight: this.moveToRight,
              leftActive: leftActive,
              leftArrowText: operations[1],
              moveToLeft: this.moveToLeft,

              disabled: disabled
            },
            style: operationStyle }), h(List$1, {
            key: 'rightList',
            attrs: { prefixCls: prefixCls + '-list',
              titleText: titles[1],
              dataSource: rightDataSource,
              filterOption: filterOption,

              checkedKeys: targetSelectedKeys,
              handleFilter: this.handleRightFilter,
              handleClear: this.handleRightClear,
              handleSelect: this.handleRightSelect,
              handleSelectAll: this.handleRightSelectAll,

              renderItem: renderItem,
              showSearch: showSearch,
              body: body,
              renderList: children,
              footer: footer,
              lazy: lazy,

              disabled: disabled,
              direction: 'right',
              showSelectAll: showSelectAll,
              itemUnit: locale.itemUnit,
              itemsUnit: locale.itemsUnit,
              notFoundContent: locale.notFoundContent,
              searchPlaceholder: locale.searchPlaceholder
            },
            style: this.handleListStyle(listStyle, 'right'), on: {
              'itemSelect': this.onRightItemSelect,
              'itemSelectAll': this.onRightItemSelectAll,
              'scroll': this.handleRightScroll
            }
          })]
        );
      }
    },
    render: function render() {
      var h = arguments[0];

      return h(LocaleReceiver, {
        attrs: {
          componentName: 'Transfer',
          defaultLocale: defaultLocale.Transfer
        },
        scopedSlots: { 'default': this.renderTransfer }
      });
    }
  };

  /* istanbul ignore next */
  Transfer.install = function (Vue) {
    Vue.use(base);
    Vue.component(Transfer.name, Transfer);
  };

  function noop$V() {}
  var ICON_OPEN = 'open';
  var ICON_CLOSE = 'close';

  var defaultTitle = '---';

  var TreeNode = {
    name: 'TreeNode',
    mixins: [BaseMixin],
    __ANT_TREE_NODE: true,
    props: initDefaultProps({
      eventKey: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]), // Pass by parent `cloneElement`
      prefixCls: VuePropTypes.string,
      // className: PropTypes.string,
      root: VuePropTypes.object,
      // onSelect: PropTypes.func,

      // By parent
      expanded: VuePropTypes.bool,
      selected: VuePropTypes.bool,
      checked: VuePropTypes.bool,
      loaded: VuePropTypes.bool,
      loading: VuePropTypes.bool,
      halfChecked: VuePropTypes.bool,
      title: VuePropTypes.any,
      pos: VuePropTypes.string,
      dragOver: VuePropTypes.bool,
      dragOverGapTop: VuePropTypes.bool,
      dragOverGapBottom: VuePropTypes.bool,

      // By user
      isLeaf: VuePropTypes.bool,
      checkable: VuePropTypes.bool,
      selectable: VuePropTypes.bool,
      disabled: VuePropTypes.bool,
      disableCheckbox: VuePropTypes.bool,
      icon: VuePropTypes.any,
      dataRef: VuePropTypes.object,
      switcherIcon: VuePropTypes.any,
      label: VuePropTypes.any,
      value: VuePropTypes.any
    }, {}),

    data: function data() {
      return {
        dragNodeHighlight: false
      };
    },

    inject: {
      vcTree: { 'default': function _default() {
          return {};
        } },
      vcTreeNode: { 'default': function _default() {
          return {};
        } }
    },
    provide: function provide() {
      return {
        vcTreeNode: this
      };
    },


    // Isomorphic needn't load data in server side
    mounted: function mounted() {
      var eventKey = this.eventKey,
          registerTreeNode = this.vcTree.registerTreeNode;

      this.syncLoadData(this.$props);
      registerTreeNode && registerTreeNode(eventKey, this);
    },
    updated: function updated() {
      this.syncLoadData(this.$props);
    },
    beforeDestroy: function beforeDestroy() {
      var eventKey = this.eventKey,
          registerTreeNode = this.vcTree.registerTreeNode;

      registerTreeNode && registerTreeNode(eventKey, null);
    },


    methods: {
      onSelectorClick: function onSelectorClick(e) {
        // Click trigger before select/check operation
        var onNodeClick = this.vcTree.onNodeClick;

        onNodeClick(e, this);
        if (this.isSelectable()) {
          this.onSelect(e);
        } else {
          this.onCheck(e);
        }
      },
      onSelectorDoubleClick: function onSelectorDoubleClick(e) {
        var onNodeDoubleClick = this.vcTree.onNodeDoubleClick;

        onNodeDoubleClick(e, this);
      },
      onSelect: function onSelect(e) {
        if (this.isDisabled()) return;

        var onNodeSelect = this.vcTree.onNodeSelect;

        e.preventDefault();
        onNodeSelect(e, this);
      },
      onCheck: function onCheck(e) {
        if (this.isDisabled()) return;

        var disableCheckbox = this.disableCheckbox,
            checked = this.checked;
        var onNodeCheck = this.vcTree.onNodeCheck;


        if (!this.isCheckable() || disableCheckbox) return;

        e.preventDefault();
        var targetChecked = !checked;
        onNodeCheck(e, this, targetChecked);
      },
      onMouseEnter: function onMouseEnter(e) {
        var onNodeMouseEnter = this.vcTree.onNodeMouseEnter;

        onNodeMouseEnter(e, this);
      },
      onMouseLeave: function onMouseLeave(e) {
        var onNodeMouseLeave = this.vcTree.onNodeMouseLeave;

        onNodeMouseLeave(e, this);
      },
      onContextMenu: function onContextMenu(e) {
        var onNodeContextMenu = this.vcTree.onNodeContextMenu;

        onNodeContextMenu(e, this);
      },
      onDragStart: function onDragStart(e) {
        var onNodeDragStart = this.vcTree.onNodeDragStart;


        e.stopPropagation();
        this.setState({
          dragNodeHighlight: true
        });
        onNodeDragStart(e, this);

        try {
          // ie throw error
          // firefox-need-it
          e.dataTransfer.setData('text/plain', '');
        } catch (error) {
          // empty
        }
      },
      onDragEnter: function onDragEnter(e) {
        var onNodeDragEnter = this.vcTree.onNodeDragEnter;


        e.preventDefault();
        e.stopPropagation();
        onNodeDragEnter(e, this);
      },
      onDragOver: function onDragOver(e) {
        var onNodeDragOver = this.vcTree.onNodeDragOver;


        e.preventDefault();
        e.stopPropagation();
        onNodeDragOver(e, this);
      },
      onDragLeave: function onDragLeave(e) {
        var onNodeDragLeave = this.vcTree.onNodeDragLeave;


        e.stopPropagation();
        onNodeDragLeave(e, this);
      },
      onDragEnd: function onDragEnd(e) {
        var onNodeDragEnd = this.vcTree.onNodeDragEnd;


        e.stopPropagation();
        this.setState({
          dragNodeHighlight: false
        });
        onNodeDragEnd(e, this);
      },
      onDrop: function onDrop(e) {
        var onNodeDrop = this.vcTree.onNodeDrop;


        e.preventDefault();
        e.stopPropagation();
        this.setState({
          dragNodeHighlight: false
        });
        onNodeDrop(e, this);
      },


      // Disabled item still can be switch
      onExpand: function onExpand(e) {
        var onNodeExpand = this.vcTree.onNodeExpand;

        onNodeExpand(e, this);
      },
      getNodeChildren: function getNodeChildren$1() {
        var children = this.$slots['default'];

        var originList = filterEmpty(children);
        var targetList = getNodeChildren(originList);

        if (originList.length !== targetList.length) {
          warnOnlyTreeNode();
        }

        return targetList;
      },
      getNodeState: function getNodeState() {
        var expanded = this.expanded;


        if (this.isLeaf2()) {
          return null;
        }

        return expanded ? ICON_OPEN : ICON_CLOSE;
      },
      isLeaf2: function isLeaf2() {
        var isLeaf = this.isLeaf,
            loaded = this.loaded;
        var loadData = this.vcTree.loadData;


        var hasChildren = this.getNodeChildren().length !== 0;
        if (isLeaf === false) {
          return false;
        }
        return isLeaf || !loadData && !hasChildren || loadData && loaded && !hasChildren;
      },
      isDisabled: function isDisabled() {
        var disabled = this.disabled;
        var treeDisabled = this.vcTree.disabled;

        // Follow the logic of Selectable

        if (disabled === false) {
          return false;
        }

        return !!(treeDisabled || disabled);
      },
      isCheckable: function isCheckable() {
        var checkable = this.$props.checkable;
        var treeCheckable = this.vcTree.checkable;

        // Return false if tree or treeNode is not checkable

        if (!treeCheckable || checkable === false) return false;
        return treeCheckable;
      },


      // Load data to avoid default expanded tree without data
      syncLoadData: function syncLoadData(props) {
        var expanded = props.expanded,
            loading = props.loading,
            loaded = props.loaded;
        var _vcTree = this.vcTree,
            loadData = _vcTree.loadData,
            onNodeLoad = _vcTree.onNodeLoad;

        if (loading) return;
        // read from state to avoid loadData at same time
        if (loadData && expanded && !this.isLeaf2()) {
          // We needn't reload data when has children in sync logic
          // It's only needed in node expanded
          var hasChildren = this.getNodeChildren().length !== 0;
          if (!hasChildren && !loaded) {
            onNodeLoad(this);
          }
        }
      },
      isSelectable: function isSelectable() {
        var selectable = this.selectable;
        var treeSelectable = this.vcTree.selectable;

        // Ignore when selectable is undefined or null

        if (typeof selectable === 'boolean') {
          return selectable;
        }

        return treeSelectable;
      },


      // Switcher
      renderSwitcher: function renderSwitcher() {
        var h = this.$createElement;
        var expanded = this.expanded;
        var prefixCls = this.vcTree.prefixCls;

        var switcherIcon = getComponentFromProp(this, 'switcherIcon', {}, false) || getComponentFromProp(this.vcTree, 'switcherIcon', {}, false);
        if (this.isLeaf2()) {
          return h(
            'span',
            {
              key: 'switcher',
              'class': classnames(prefixCls + '-switcher', prefixCls + '-switcher-noop')
            },
            [typeof switcherIcon === 'function' ? switcherIcon(_extends$1({}, this.$props, this.$props.dataRef, { isLeaf: true })) : switcherIcon]
          );
        }

        var switcherCls = classnames(prefixCls + '-switcher', prefixCls + '-switcher_' + (expanded ? ICON_OPEN : ICON_CLOSE));
        return h(
          'span',
          { key: 'switcher', on: {
              'click': this.onExpand
            },
            'class': switcherCls },
          [typeof switcherIcon === 'function' ? switcherIcon(_extends$1({}, this.$props, this.$props.dataRef, { isLeaf: false })) : switcherIcon]
        );
      },


      // Checkbox
      renderCheckbox: function renderCheckbox() {
        var h = this.$createElement;
        var checked = this.checked,
            halfChecked = this.halfChecked,
            disableCheckbox = this.disableCheckbox;
        var prefixCls = this.vcTree.prefixCls;

        var disabled = this.isDisabled();
        var checkable = this.isCheckable();

        if (!checkable) return null;

        // [Legacy] Custom element should be separate with `checkable` in future
        var $custom = typeof checkable !== 'boolean' ? checkable : null;

        return h(
          'span',
          {
            key: 'checkbox',
            'class': classnames(prefixCls + '-checkbox', checked && prefixCls + '-checkbox-checked', !checked && halfChecked && prefixCls + '-checkbox-indeterminate', (disabled || disableCheckbox) && prefixCls + '-checkbox-disabled'),
            on: {
              'click': this.onCheck
            }
          },
          [$custom]
        );
      },
      renderIcon: function renderIcon() {
        var h = this.$createElement;
        var loading = this.loading;
        var prefixCls = this.vcTree.prefixCls;


        return h('span', {
          key: 'icon',
          'class': classnames(prefixCls + '-iconEle', prefixCls + '-icon__' + (this.getNodeState() || 'docu'), loading && prefixCls + '-icon_loading')
        });
      },


      // Icon + Title
      renderSelector: function renderSelector(h) {
        var selected = this.selected,
            loading = this.loading,
            dragNodeHighlight = this.dragNodeHighlight;

        var icon = getComponentFromProp(this, 'icon', {}, false);
        var _vcTree2 = this.vcTree,
            prefixCls = _vcTree2.prefixCls,
            showIcon = _vcTree2.showIcon,
            treeIcon = _vcTree2.icon,
            draggable = _vcTree2.draggable,
            loadData = _vcTree2.loadData;

        var disabled = this.isDisabled();
        var title = getComponentFromProp(this, 'title', {}, false);
        var wrapClass = prefixCls + '-node-content-wrapper';

        // Icon - Still show loading icon when loading without showIcon
        var $icon = void 0;

        if (showIcon) {
          var currentIcon = icon || treeIcon;
          $icon = currentIcon ? h(
            'span',
            { 'class': classnames(prefixCls + '-iconEle', prefixCls + '-icon__customize') },
            [typeof currentIcon === 'function' ? currentIcon(_extends$1({}, this.$props, this.$props.dataRef), h) : currentIcon]
          ) : this.renderIcon();
        } else if (loadData && loading) {
          $icon = this.renderIcon();
        }

        var currentTitle = title;
        var $title = currentTitle ? h(
          'span',
          { 'class': prefixCls + '-title' },
          [typeof currentTitle === 'function' ? currentTitle(_extends$1({}, this.$props, this.$props.dataRef), h) : currentTitle]
        ) : h(
          'span',
          { 'class': prefixCls + '-title' },
          [defaultTitle]
        );

        return h(
          'span',
          {
            key: 'selector',
            ref: 'selectHandle',
            attrs: { title: typeof title === 'string' ? title : '',

              draggable: !disabled && draggable || undefined,
              'aria-grabbed': !disabled && draggable || undefined
            },
            'class': classnames('' + wrapClass, wrapClass + '-' + (this.getNodeState() || 'normal'), !disabled && (selected || dragNodeHighlight) && prefixCls + '-node-selected', !disabled && draggable && 'draggable'), on: {
              'mouseenter': this.onMouseEnter,
              'mouseleave': this.onMouseLeave,
              'contextmenu': this.onContextMenu,
              'click': this.onSelectorClick,
              'dblclick': this.onSelectorDoubleClick,
              'dragstart': draggable ? this.onDragStart : noop$V
            }
          },
          [$icon, $title]
        );
      },


      // Children list wrapped with `Animation`
      renderChildren: function renderChildren() {
        var h = this.$createElement;
        var expanded = this.expanded,
            pos = this.pos;
        var _vcTree3 = this.vcTree,
            prefixCls = _vcTree3.prefixCls,
            openTransitionName = _vcTree3.openTransitionName,
            openAnimation = _vcTree3.openAnimation,
            renderTreeNode = _vcTree3.renderTreeNode;


        var animProps = {};
        if (openTransitionName) {
          animProps = getTransitionProps(openTransitionName);
        } else if ((typeof openAnimation === 'undefined' ? 'undefined' : _typeof(openAnimation)) === 'object') {
          animProps = _extends$1({}, openAnimation);
          animProps.props = _extends$1({ css: false }, animProps.props);
        }

        // Children TreeNode
        var nodeList = this.getNodeChildren();

        if (nodeList.length === 0) {
          return null;
        }

        var $children = void 0;
        if (expanded) {
          $children = h(
            'ul',
            {
              'class': classnames(prefixCls + '-child-tree', expanded && prefixCls + '-child-tree-open'),
              attrs: { 'data-expanded': expanded,
                role: 'group'
              }
            },
            [mapChildren(nodeList, function (node, index) {
              return renderTreeNode(node, index, pos);
            })]
          );
        }

        return h(
          'transition',
          animProps,
          [$children]
        );
      }
    },

    render: function render(h) {
      var _ref;

      var _$props = this.$props,
          dragOver = _$props.dragOver,
          dragOverGapTop = _$props.dragOverGapTop,
          dragOverGapBottom = _$props.dragOverGapBottom,
          isLeaf = _$props.isLeaf,
          expanded = _$props.expanded,
          selected = _$props.selected,
          checked = _$props.checked,
          halfChecked = _$props.halfChecked,
          loading = _$props.loading;
      var _vcTree4 = this.vcTree,
          prefixCls = _vcTree4.prefixCls,
          filterTreeNode = _vcTree4.filterTreeNode,
          draggable = _vcTree4.draggable;

      var disabled = this.isDisabled();
      return h(
        'li',
        {
          'class': (_ref = {}, _defineProperty(_ref, prefixCls + '-treenode-disabled', disabled), _defineProperty(_ref, prefixCls + '-treenode-switcher-' + (expanded ? 'open' : 'close'), !isLeaf), _defineProperty(_ref, prefixCls + '-treenode-checkbox-checked', checked), _defineProperty(_ref, prefixCls + '-treenode-checkbox-indeterminate', halfChecked), _defineProperty(_ref, prefixCls + '-treenode-selected', selected), _defineProperty(_ref, prefixCls + '-treenode-loading', loading), _defineProperty(_ref, 'drag-over', !disabled && dragOver), _defineProperty(_ref, 'drag-over-gap-top', !disabled && dragOverGapTop), _defineProperty(_ref, 'drag-over-gap-bottom', !disabled && dragOverGapBottom), _defineProperty(_ref, 'filter-node', filterTreeNode && filterTreeNode(this)), _ref),
          attrs: { role: 'treeitem'
          },
          on: {
            'dragenter': draggable ? this.onDragEnter : noop$V,
            'dragover': draggable ? this.onDragOver : noop$V,
            'dragleave': draggable ? this.onDragLeave : noop$V,
            'drop': draggable ? this.onDrop : noop$V,
            'dragend': draggable ? this.onDragEnd : noop$V
          }
        },
        [this.renderSwitcher(), this.renderCheckbox(), this.renderSelector(h), this.renderChildren()]
      );
    }
  };

  TreeNode.isTreeNode = 1;

  var DRAG_SIDE_RANGE = 0.25;
  var DRAG_MIN_GAP = 2;

  var onlyTreeNodeWarned = false;

  function warnOnlyTreeNode() {
    if (onlyTreeNodeWarned) return;

    onlyTreeNodeWarned = true;
    warning_1(false, 'Tree only accept TreeNode as children.');
  }

  function arrDel(list, value) {
    var clone = list.slice();
    var index = clone.indexOf(value);
    if (index >= 0) {
      clone.splice(index, 1);
    }
    return clone;
  }

  function arrAdd(list, value) {
    var clone = list.slice();
    if (clone.indexOf(value) === -1) {
      clone.push(value);
    }
    return clone;
  }

  function posToArr(pos) {
    return pos.split('-');
  }

  function getPosition(level, index) {
    return level + '-' + index;
  }

  function isTreeNode(node) {
    return getSlotOptions(node).isTreeNode;
  }

  function getNodeChildren() {
    var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    return children.filter(isTreeNode);
  }

  function isCheckDisabled(node) {
    var _ref = getOptionProps(node) || {},
        disabled = _ref.disabled,
        disableCheckbox = _ref.disableCheckbox,
        checkable = _ref.checkable;

    return !!(disabled || disableCheckbox) || checkable === false;
  }

  function traverseTreeNodes(treeNodes, callback) {
    function processNode(node, index, parent) {
      var children = node ? node.componentOptions.children : treeNodes;
      var pos = node ? getPosition(parent.pos, index) : 0;

      // Filter children
      var childList = getNodeChildren(children);

      // Process node if is not root
      if (node) {
        var key = node.key;
        if (!key && (key === undefined || key === null)) {
          key = pos;
        }
        var data = {
          node: node,
          index: index,
          pos: pos,
          key: key,
          parentPos: parent.node ? parent.pos : null
        };
        callback(data);
      }

      // Process children node
      childList.forEach(function (subNode, subIndex) {
        processNode(subNode, subIndex, { node: node, pos: pos });
      });
    }

    processNode(null);
  }

  /**
   * Use `rc-util` `toArray` to get the children list which keeps the key.
   * And return single node if children is only one(This can avoid `key` missing check).
   */
  function mapChildren() {
    var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var func = arguments[1];

    var list = children.map(func);
    if (list.length === 1) {
      return list[0];
    }
    return list;
  }

  function getDragNodesKeys(treeNodes, node) {
    var _getOptionProps = getOptionProps(node),
        eventKey = _getOptionProps.eventKey,
        pos = _getOptionProps.pos;

    var dragNodesKeys = [];

    traverseTreeNodes(treeNodes, function (_ref2) {
      var key = _ref2.key;

      dragNodesKeys.push(key);
    });
    dragNodesKeys.push(eventKey || pos);
    return dragNodesKeys;
  }

  function calcDropPosition(event, treeNode) {
    var clientY = event.clientY;

    var _treeNode$$refs$selec = treeNode.$refs.selectHandle.getBoundingClientRect(),
        top = _treeNode$$refs$selec.top,
        bottom = _treeNode$$refs$selec.bottom,
        height = _treeNode$$refs$selec.height;

    var des = Math.max(height * DRAG_SIDE_RANGE, DRAG_MIN_GAP);

    if (clientY <= top + des) {
      return -1;
    }
    if (clientY >= bottom - des) {
      return 1;
    }
    return 0;
  }

  /**
   * Return selectedKeys according with multiple prop
   * @param selectedKeys
   * @param props
   * @returns [string]
   */
  function calcSelectedKeys(selectedKeys, props) {
    if (!selectedKeys) {
      return undefined;
    }

    var multiple = props.multiple;

    if (multiple) {
      return selectedKeys.slice();
    }

    if (selectedKeys.length) {
      return [selectedKeys[0]];
    }
    return selectedKeys;
  }

  /**
   * Since React internal will convert key to string,
   * we need do this to avoid `checkStrictly` use number match
   */
  // function keyListToString (keyList) {
  //   if (!keyList) return keyList
  //   return keyList.map(key => String(key))
  // }

  var internalProcessProps = function internalProcessProps() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return {
      props: omit(props, ['on', 'key', 'class', 'className', 'style']),
      on: props.on || {},
      'class': props['class'] || props.className,
      style: props.style,
      key: props.key
    };
  };
  function convertDataToTree(h, treeData, processor) {
    if (!treeData) return [];

    var _ref3 = processor || {},
        _ref3$processProps = _ref3.processProps,
        processProps = _ref3$processProps === undefined ? internalProcessProps : _ref3$processProps;

    var list = Array.isArray(treeData) ? treeData : [treeData];
    return list.map(function (_ref4) {
      var children = _ref4.children,
          props = _objectWithoutProperties(_ref4, ['children']);

      var childrenNodes = convertDataToTree(h, children, processor);
      return h(
        TreeNode,
        processProps(props),
        [childrenNodes]
      );
    });
  }

  // TODO: ========================= NEW LOGIC =========================
  /**
   * Calculate treeNodes entities. `processTreeEntity` is used for `rc-tree-select`
   * @param treeNodes
   * @param processTreeEntity  User can customize the entity
   */
  function convertTreeToEntities(treeNodes) {
    var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        initWrapper = _ref5.initWrapper,
        processEntity = _ref5.processEntity,
        onProcessFinished = _ref5.onProcessFinished;

    var posEntities = new Map();
    var keyEntities = new Map();
    var wrapper = {
      posEntities: posEntities,
      keyEntities: keyEntities
    };

    if (initWrapper) {
      wrapper = initWrapper(wrapper) || wrapper;
    }

    traverseTreeNodes(treeNodes, function (item) {
      var node = item.node,
          index = item.index,
          pos = item.pos,
          key = item.key,
          parentPos = item.parentPos;

      var entity = { node: node, index: index, key: key, pos: pos };

      posEntities.set(pos, entity);
      keyEntities.set(key, entity);

      // Fill children
      entity.parent = posEntities.get(parentPos);
      if (entity.parent) {
        entity.parent.children = entity.parent.children || [];
        entity.parent.children.push(entity);
      }

      if (processEntity) {
        processEntity(entity, wrapper);
      }
    });

    if (onProcessFinished) {
      onProcessFinished(wrapper);
    }

    return wrapper;
  }

  /**
   * Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style
   */
  function parseCheckedKeys(keys) {
    if (!keys) {
      return null;
    }

    // Convert keys to object format
    var keyProps = void 0;
    if (Array.isArray(keys)) {
      // [Legacy] Follow the api doc
      keyProps = {
        checkedKeys: keys,
        halfCheckedKeys: undefined
      };
    } else if ((typeof keys === 'undefined' ? 'undefined' : _typeof(keys)) === 'object') {
      keyProps = {
        checkedKeys: keys.checked || undefined,
        halfCheckedKeys: keys.halfChecked || undefined
      };
    } else {
      warning_1(false, '`checkedKeys` is not an array or an object');
      return null;
    }

    // keyProps.checkedKeys = keyListToString(keyProps.checkedKeys)
    // keyProps.halfCheckedKeys = keyListToString(keyProps.halfCheckedKeys)

    return keyProps;
  }

  /**
   * Conduct check state by the keyList. It will conduct up & from the provided key.
   * If the conduct path reach the disabled or already checked / unchecked node will stop conduct.
   * @param keyList       list of keys
   * @param isCheck       is check the node or not
   * @param keyEntities   parsed by `convertTreeToEntities` function in Tree
   * @param checkStatus   Can pass current checked status for process (usually for uncheck operation)
   * @returns {{checkedKeys: [], halfCheckedKeys: []}}
   */
  function conductCheck(keyList, isCheck, keyEntities) {
    var checkStatus = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    var checkedKeys = new Map();
    var halfCheckedKeys = new Map(); // Record the key has some child checked (include child half checked)

    (checkStatus.checkedKeys || []).forEach(function (key) {
      checkedKeys.set(key, true);
    });

    (checkStatus.halfCheckedKeys || []).forEach(function (key) {
      halfCheckedKeys.set(key, true);
    });

    // Conduct up
    function conductUp(key) {
      if (checkedKeys.get(key) === isCheck) return;

      var entity = keyEntities.get(key);
      if (!entity) return;

      var children = entity.children,
          parent = entity.parent,
          node = entity.node;


      if (isCheckDisabled(node)) return;

      // Check child node checked status
      var everyChildChecked = true;
      var someChildChecked = false; // Child checked or half checked

      (children || []).filter(function (child) {
        return !isCheckDisabled(child.node);
      }).forEach(function (_ref6) {
        var childKey = _ref6.key;

        var childChecked = checkedKeys.get(childKey);
        var childHalfChecked = halfCheckedKeys.get(childKey);

        if (childChecked || childHalfChecked) someChildChecked = true;
        if (!childChecked) everyChildChecked = false;
      });

      // Update checked status
      if (isCheck) {
        checkedKeys.set(key, everyChildChecked);
      } else {
        checkedKeys.set(key, false);
      }
      halfCheckedKeys.set(key, someChildChecked);

      if (parent) {
        conductUp(parent.key);
      }
    }

    // Conduct down
    function conductDown(key) {
      if (checkedKeys.get(key) === isCheck) return;

      var entity = keyEntities.get(key);
      if (!entity) return;

      var children = entity.children,
          node = entity.node;


      if (isCheckDisabled(node)) return;

      checkedKeys.set(key, isCheck);

      (children || []).forEach(function (child) {
        conductDown(child.key);
      });
    }

    function conduct(key) {
      var entity = keyEntities.get(key);

      if (!entity) {
        warning_1(false, '\'' + key + '\' does not exist in the tree.');
        return;
      }
      var children = entity.children,
          parent = entity.parent,
          node = entity.node;

      checkedKeys.set(key, isCheck);

      if (isCheckDisabled(node)) return;

      // Conduct down
      (children || []).filter(function (child) {
        return !isCheckDisabled(child.node);
      }).forEach(function (child) {
        conductDown(child.key);
      });

      // Conduct up
      if (parent) {
        conductUp(parent.key);
      }
    }

    (keyList || []).forEach(function (key) {
      conduct(key);
    });

    var checkedKeyList = [];
    var halfCheckedKeyList = [];

    // Fill checked list
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = checkedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _ref7 = _step.value;

        var _ref8 = _slicedToArray(_ref7, 2);

        var key = _ref8[0];
        var value = _ref8[1];

        if (value) {
          checkedKeyList.push(key);
        }
      }

      // Fill half checked list
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = halfCheckedKeys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _ref9 = _step2.value;

        var _ref10 = _slicedToArray(_ref9, 2);

        var _key = _ref10[0];
        var _value = _ref10[1];

        if (!checkedKeys.get(_key) && _value) {
          halfCheckedKeyList.push(_key);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return {
      checkedKeys: checkedKeyList,
      halfCheckedKeys: halfCheckedKeyList
    };
  }

  /**
   * If user use `autoExpandParent` we should get the list of parent node
   * @param keyList
   * @param keyEntities
   */
  function conductExpandParent(keyList, keyEntities) {
    var expandedKeys = new Map();

    function conductUp(key) {
      if (expandedKeys.get(key)) return;

      var entity = keyEntities.get(key);
      if (!entity) return;

      expandedKeys.set(key, true);

      var parent = entity.parent,
          node = entity.node;

      var props = getOptionProps(node);
      if (props && props.disabled) return;

      if (parent) {
        conductUp(parent.key);
      }
    }

    (keyList || []).forEach(function (key) {
      conductUp(key);
    });

    return [].concat(_toConsumableArray(expandedKeys.keys()));
  }

  /**
   * Thought we still use `cloneElement` to pass `key`,
   * other props can pass with context for future refactor.
   */

  function getWatch$1() {
    var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var watch = {};
    keys.forEach(function (k) {
      watch[k] = function () {
        this.needSyncKeys[k] = true;
      };
    });
    return watch;
  }

  var Tree = {
    name: 'Tree',
    mixins: [BaseMixin],
    props: initDefaultProps({
      prefixCls: VuePropTypes.string,
      tabIndex: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      children: VuePropTypes.any,
      treeData: VuePropTypes.array, // Generate treeNode by children
      showLine: VuePropTypes.bool,
      showIcon: VuePropTypes.bool,
      icon: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.func]),
      focusable: VuePropTypes.bool,
      selectable: VuePropTypes.bool,
      disabled: VuePropTypes.bool,
      multiple: VuePropTypes.bool,
      checkable: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.bool]),
      checkStrictly: VuePropTypes.bool,
      draggable: VuePropTypes.bool,
      defaultExpandParent: VuePropTypes.bool,
      autoExpandParent: VuePropTypes.bool,
      defaultExpandAll: VuePropTypes.bool,
      defaultExpandedKeys: VuePropTypes.array,
      expandedKeys: VuePropTypes.array,
      defaultCheckedKeys: VuePropTypes.array,
      checkedKeys: VuePropTypes.oneOfType([VuePropTypes.array, VuePropTypes.object]),
      defaultSelectedKeys: VuePropTypes.array,
      selectedKeys: VuePropTypes.array,
      // onClick: PropTypes.func,
      // onDoubleClick: PropTypes.func,
      // onExpand: PropTypes.func,
      // onCheck: PropTypes.func,
      // onSelect: PropTypes.func,
      loadData: VuePropTypes.func,
      loadedKeys: VuePropTypes.array,
      // onMouseEnter: PropTypes.func,
      // onMouseLeave: PropTypes.func,
      // onRightClick: PropTypes.func,
      // onDragStart: PropTypes.func,
      // onDragEnter: PropTypes.func,
      // onDragOver: PropTypes.func,
      // onDragLeave: PropTypes.func,
      // onDragEnd: PropTypes.func,
      // onDrop: PropTypes.func,
      filterTreeNode: VuePropTypes.func,
      openTransitionName: VuePropTypes.string,
      openAnimation: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.object]),
      switcherIcon: VuePropTypes.any,
      _propsSymbol: VuePropTypes.any
    }, {
      prefixCls: 'rc-tree',
      showLine: false,
      showIcon: true,
      selectable: true,
      multiple: false,
      checkable: false,
      disabled: false,
      checkStrictly: false,
      draggable: false,
      defaultExpandParent: true,
      autoExpandParent: false,
      defaultExpandAll: false,
      defaultExpandedKeys: [],
      defaultCheckedKeys: [],
      defaultSelectedKeys: []
    }),

    data: function data() {
      warning_1(this.$props.__propsSymbol__, 'must pass __propsSymbol__');
      warning_1(this.$props.children, 'please use children prop replace slots.default');
      this.needSyncKeys = {};
      this.domTreeNodes = {};
      var state = {
        _posEntities: new Map(),
        _keyEntities: new Map(),
        _expandedKeys: [],
        _selectedKeys: [],
        _checkedKeys: [],
        _halfCheckedKeys: [],
        _loadedKeys: [],
        _loadingKeys: [],
        _treeNode: [],
        _prevProps: null,
        _dragOverNodeKey: '',
        _dropPosition: null,
        _dragNodesKeys: []
      };
      return _extends$1({}, state, this.getDerivedState(getOptionProps(this), state));
    },
    provide: function provide() {
      return {
        vcTree: this
      };
    },


    watch: _extends$1({}, getWatch$1(['treeData', 'children', 'expandedKeys', 'autoExpandParent', 'selectedKeys', 'checkedKeys', 'loadedKeys']), {
      __propsSymbol__: function __propsSymbol__() {
        this.setState(this.getDerivedState(getOptionProps(this), this.$data));
        this.needSyncKeys = {};
      }
    }),

    methods: {
      getDerivedState: function getDerivedState(props, prevState) {
        var _prevProps = prevState._prevProps;

        var newState = {
          _prevProps: _extends$1({}, props)
        };
        var self = this;
        function needSync(name) {
          return !_prevProps && name in props || _prevProps && self.needSyncKeys[name];
        }

        // ================== Tree Node ==================
        var treeNode = null;

        // Check if `treeData` or `children` changed and save into the state.
        if (needSync('treeData')) {
          treeNode = convertDataToTree(this.$createElement, props.treeData);
        } else if (needSync('children')) {
          treeNode = props.children;
        }

        // Tree support filter function which will break the tree structure in the vdm.
        // We cache the treeNodes in state so that we can return the treeNode in event trigger.
        if (treeNode) {
          newState._treeNode = treeNode;

          // Calculate the entities data for quick match
          var entitiesMap = convertTreeToEntities(treeNode);
          newState._keyEntities = entitiesMap.keyEntities;
        }

        var keyEntities = newState._keyEntities || prevState._keyEntities;

        // ================ expandedKeys =================
        if (needSync('expandedKeys') || _prevProps && needSync('autoExpandParent')) {
          newState._expandedKeys = props.autoExpandParent || !_prevProps && props.defaultExpandParent ? conductExpandParent(props.expandedKeys, keyEntities) : props.expandedKeys;
        } else if (!_prevProps && props.defaultExpandAll) {
          newState._expandedKeys = [].concat(_toConsumableArray(keyEntities.keys()));
        } else if (!_prevProps && props.defaultExpandedKeys) {
          newState._expandedKeys = props.autoExpandParent || props.defaultExpandParent ? conductExpandParent(props.defaultExpandedKeys, keyEntities) : props.defaultExpandedKeys;
        }

        // ================ selectedKeys =================
        if (props.selectable) {
          if (needSync('selectedKeys')) {
            newState._selectedKeys = calcSelectedKeys(props.selectedKeys, props);
          } else if (!_prevProps && props.defaultSelectedKeys) {
            newState._selectedKeys = calcSelectedKeys(props.defaultSelectedKeys, props);
          }
        }

        // ================= checkedKeys =================
        if (props.checkable) {
          var checkedKeyEntity = void 0;

          if (needSync('checkedKeys')) {
            checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};
          } else if (!_prevProps && props.defaultCheckedKeys) {
            checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};
          } else if (treeNode) {
            // If treeNode changed, we also need check it
            checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {
              checkedKeys: prevState._checkedKeys,
              halfCheckedKeys: prevState._halfCheckedKeys
            };
          }

          if (checkedKeyEntity) {
            var _checkedKeyEntity = checkedKeyEntity,
                _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys,
                checkedKeys = _checkedKeyEntity$che === undefined ? [] : _checkedKeyEntity$che,
                _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys,
                halfCheckedKeys = _checkedKeyEntity$hal === undefined ? [] : _checkedKeyEntity$hal;


            if (!props.checkStrictly) {
              var conductKeys = conductCheck(checkedKeys, true, keyEntities);
              checkedKeys = conductKeys.checkedKeys;
              halfCheckedKeys = conductKeys.halfCheckedKeys;
            }

            newState._checkedKeys = checkedKeys;
            newState._halfCheckedKeys = halfCheckedKeys;
          }
        }
        // ================= loadedKeys ==================
        if (needSync('loadedKeys')) {
          newState._loadedKeys = props.loadedKeys;
        }

        return newState;
      },
      onNodeDragStart: function onNodeDragStart(event, node) {
        var _expandedKeys = this.$data._expandedKeys;
        var eventKey = node.eventKey;

        var children = getSlots(node)['default'];
        this.dragNode = node;

        this.setState({
          _dragNodesKeys: getDragNodesKeys(typeof children === 'function' ? children() : children, node),
          _expandedKeys: arrDel(_expandedKeys, eventKey)
        });
        this.__emit('dragstart', { event: event, node: node });
      },


      /**
       * [Legacy] Select handler is less small than node,
       * so that this will trigger when drag enter node or select handler.
       * This is a little tricky if customize css without padding.
       * Better for use mouse move event to refresh drag state.
       * But let's just keep it to avoid event trigger logic change.
       */
      onNodeDragEnter: function onNodeDragEnter(event, node) {
        var _this = this;

        var expandedKeys = this.$data._expandedKeys;
        var pos = node.pos,
            eventKey = node.eventKey;


        if (!this.dragNode || !node.$refs.selectHandle) return;

        var dropPosition = calcDropPosition(event, node);

        // Skip if drag node is self
        if (this.dragNode.eventKey === eventKey && dropPosition === 0) {
          this.setState({
            _dragOverNodeKey: '',
            _dropPosition: null
          });
          return;
        }

        // Ref: https://github.com/react-component/tree/issues/132
        // Add timeout to let onDragLevel fire before onDragEnter,
        // so that we can clean drag props for onDragLeave node.
        // Macro task for this:
        // https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script
        setTimeout(function () {
          // Update drag over node
          _this.setState({
            _dragOverNodeKey: eventKey,
            _dropPosition: dropPosition
          });

          // Side effect for delay drag
          if (!_this.delayedDragEnterLogic) {
            _this.delayedDragEnterLogic = {};
          }
          Object.keys(_this.delayedDragEnterLogic).forEach(function (key) {
            clearTimeout(_this.delayedDragEnterLogic[key]);
          });
          _this.delayedDragEnterLogic[pos] = setTimeout(function () {
            var newExpandedKeys = arrAdd(expandedKeys, eventKey);
            if (!hasProp(_this, 'expandedKeys')) {
              _this.setState({
                _expandedKeys: newExpandedKeys
              });
            }
            _this.__emit('dragenter', { event: event, node: node, expandedKeys: newExpandedKeys });
          }, 400);
        }, 0);
      },
      onNodeDragOver: function onNodeDragOver(event, node) {
        var eventKey = node.eventKey;
        var _$data = this.$data,
            _dragOverNodeKey = _$data._dragOverNodeKey,
            _dropPosition = _$data._dropPosition;
        // Update drag position

        if (this.dragNode && eventKey === _dragOverNodeKey && node.$refs.selectHandle) {
          var dropPosition = calcDropPosition(event, node);

          if (dropPosition === _dropPosition) return;

          this.setState({
            _dropPosition: dropPosition
          });
        }
        this.__emit('dragover', { event: event, node: node });
      },
      onNodeDragLeave: function onNodeDragLeave(event, node) {
        this.setState({
          _dragOverNodeKey: ''
        });
        this.__emit('dragleave', { event: event, node: node });
      },
      onNodeDragEnd: function onNodeDragEnd(event, node) {
        this.setState({
          _dragOverNodeKey: ''
        });
        this.__emit('dragend', { event: event, node: node });
        this.dragNode = null;
      },
      onNodeDrop: function onNodeDrop(event, node) {
        var _$data2 = this.$data,
            _$data2$_dragNodesKey = _$data2._dragNodesKeys,
            _dragNodesKeys = _$data2$_dragNodesKey === undefined ? [] : _$data2$_dragNodesKey,
            _dropPosition = _$data2._dropPosition;

        var eventKey = node.eventKey,
            pos = node.pos;


        this.setState({
          _dragOverNodeKey: ''
        });

        if (_dragNodesKeys.indexOf(eventKey) !== -1) {
          warning_1(false, "Can not drop to dragNode(include it's children node)");
          return;
        }

        var posArr = posToArr(pos);

        var dropResult = {
          event: event,
          node: node,
          dragNode: this.dragNode,
          dragNodesKeys: _dragNodesKeys.slice(),
          dropPosition: _dropPosition + Number(posArr[posArr.length - 1]),
          dropToGap: false
        };

        if (_dropPosition !== 0) {
          dropResult.dropToGap = true;
        }
        this.__emit('drop', dropResult);
        this.dragNode = null;
      },
      onNodeClick: function onNodeClick(e, treeNode) {
        this.__emit('click', e, treeNode);
      },
      onNodeDoubleClick: function onNodeDoubleClick(e, treeNode) {
        this.__emit('dblclick', e, treeNode);
      },
      onNodeSelect: function onNodeSelect(e, treeNode) {
        var selectedKeys = this.$data._selectedKeys;
        var keyEntities = this.$data._keyEntities;
        var multiple = this.$props.multiple;

        var _getOptionProps = getOptionProps(treeNode),
            selected = _getOptionProps.selected,
            eventKey = _getOptionProps.eventKey;

        var targetSelected = !selected;
        // Update selected keys
        if (!targetSelected) {
          selectedKeys = arrDel(selectedKeys, eventKey);
        } else if (!multiple) {
          selectedKeys = [eventKey];
        } else {
          selectedKeys = arrAdd(selectedKeys, eventKey);
        }

        // [Legacy] Not found related usage in doc or upper libs
        var selectedNodes = selectedKeys.map(function (key) {
          var entity = keyEntities.get(key);
          if (!entity) return null;

          return entity.node;
        }).filter(function (node) {
          return node;
        });

        this.setUncontrolledState({ _selectedKeys: selectedKeys });

        var eventObj = {
          event: 'select',
          selected: targetSelected,
          node: treeNode,
          selectedNodes: selectedNodes,
          nativeEvent: e
        };
        this.__emit('update:selectedKeys', selectedKeys);
        this.__emit('select', selectedKeys, eventObj);
      },
      onNodeCheck: function onNodeCheck(e, treeNode, checked) {
        var _$data3 = this.$data,
            keyEntities = _$data3._keyEntities,
            oriCheckedKeys = _$data3._checkedKeys,
            oriHalfCheckedKeys = _$data3._halfCheckedKeys;
        var checkStrictly = this.$props.checkStrictly;

        var _getOptionProps2 = getOptionProps(treeNode),
            eventKey = _getOptionProps2.eventKey;

        // Prepare trigger arguments


        var checkedObj = void 0;
        var eventObj = {
          event: 'check',
          node: treeNode,
          checked: checked,
          nativeEvent: e
        };

        if (checkStrictly) {
          var checkedKeys = checked ? arrAdd(oriCheckedKeys, eventKey) : arrDel(oriCheckedKeys, eventKey);
          var halfCheckedKeys = arrDel(oriHalfCheckedKeys, eventKey);
          checkedObj = { checked: checkedKeys, halfChecked: halfCheckedKeys };

          eventObj.checkedNodes = checkedKeys.map(function (key) {
            return keyEntities.get(key);
          }).filter(function (entity) {
            return entity;
          }).map(function (entity) {
            return entity.node;
          });

          this.setUncontrolledState({ _checkedKeys: checkedKeys });
        } else {
          var _conductCheck = conductCheck([eventKey], checked, keyEntities, {
            checkedKeys: oriCheckedKeys,
            halfCheckedKeys: oriHalfCheckedKeys
          }),
              _checkedKeys = _conductCheck.checkedKeys,
              _halfCheckedKeys = _conductCheck.halfCheckedKeys;

          checkedObj = _checkedKeys;

          // [Legacy] This is used for `rc-tree-select`
          eventObj.checkedNodes = [];
          eventObj.checkedNodesPositions = [];
          eventObj.halfCheckedKeys = _halfCheckedKeys;

          _checkedKeys.forEach(function (key) {
            var entity = keyEntities.get(key);
            if (!entity) return;

            var node = entity.node,
                pos = entity.pos;


            eventObj.checkedNodes.push(node);
            eventObj.checkedNodesPositions.push({ node: node, pos: pos });
          });

          this.setUncontrolledState({
            _checkedKeys: _checkedKeys,
            _halfCheckedKeys: _halfCheckedKeys
          });
        }
        this.__emit('check', checkedObj, eventObj);
      },
      onNodeLoad: function onNodeLoad(treeNode) {
        var _this2 = this;

        return new Promise(function (resolve) {
          // We need to get the latest state of loading/loaded keys
          _this2.setState(function (_ref) {
            var _ref$_loadedKeys = _ref._loadedKeys,
                loadedKeys = _ref$_loadedKeys === undefined ? [] : _ref$_loadedKeys,
                _ref$_loadingKeys = _ref._loadingKeys,
                loadingKeys = _ref$_loadingKeys === undefined ? [] : _ref$_loadingKeys;
            var loadData = _this2.$props.loadData;

            var _getOptionProps3 = getOptionProps(treeNode),
                eventKey = _getOptionProps3.eventKey;

            if (!loadData || loadedKeys.indexOf(eventKey) !== -1 || loadingKeys.indexOf(eventKey) !== -1) {
              return {};
            }

            // Process load data
            var promise = loadData(treeNode);
            promise.then(function () {
              var _$data4 = _this2.$data,
                  currentLoadedKeys = _$data4._loadedKeys,
                  currentLoadingKeys = _$data4._loadingKeys;

              var newLoadedKeys = arrAdd(currentLoadedKeys, eventKey);
              var newLoadingKeys = arrDel(currentLoadingKeys, eventKey);

              // onLoad should trigger before internal setState to avoid `loadData` trigger twice.
              // https://github.com/ant-design/ant-design/issues/12464
              _this2.__emit('load', newLoadedKeys, {
                event: 'load',
                node: treeNode
              });
              _this2.setUncontrolledState({
                _loadedKeys: newLoadedKeys
              });
              _this2.setState({
                _loadingKeys: newLoadingKeys
              });
              resolve();
            });

            return {
              _loadingKeys: arrAdd(loadingKeys, eventKey)
            };
          });
        });
      },
      onNodeExpand: function onNodeExpand(e, treeNode) {
        var _this3 = this;

        var expandedKeys = this.$data._expandedKeys;
        var loadData = this.$props.loadData;

        var _getOptionProps4 = getOptionProps(treeNode),
            eventKey = _getOptionProps4.eventKey,
            expanded = _getOptionProps4.expanded;

        // Update selected keys


        var index = expandedKeys.indexOf(eventKey);
        var targetExpanded = !expanded;

        warning_1(expanded && index !== -1 || !expanded && index === -1, 'Expand state not sync with index check');

        if (targetExpanded) {
          expandedKeys = arrAdd(expandedKeys, eventKey);
        } else {
          expandedKeys = arrDel(expandedKeys, eventKey);
        }

        this.setUncontrolledState({ _expandedKeys: expandedKeys });
        this.__emit('expand', expandedKeys, {
          node: treeNode,
          expanded: targetExpanded,
          nativeEvent: e
        });
        this.__emit('update:expandedKeys', expandedKeys);

        // Async Load data
        if (targetExpanded && loadData) {
          var loadPromise = this.onNodeLoad(treeNode);
          return loadPromise ? loadPromise.then(function () {
            // [Legacy] Refresh logic
            _this3.setUncontrolledState({ _expandedKeys: expandedKeys });
          }) : null;
        }

        return null;
      },
      onNodeMouseEnter: function onNodeMouseEnter(event, node) {
        this.__emit('mouseenter', { event: event, node: node });
      },
      onNodeMouseLeave: function onNodeMouseLeave(event, node) {
        this.__emit('mouseleave', { event: event, node: node });
      },
      onNodeContextMenu: function onNodeContextMenu(event, node) {
        event.preventDefault();
        this.__emit('rightClick', { event: event, node: node });
      },


      /**
       * Only update the value which is not in props
       */
      setUncontrolledState: function setUncontrolledState(state) {
        var needSync = false;
        var newState = {};
        var props = getOptionProps(this);
        Object.keys(state).forEach(function (name) {
          if (name.replace('_', '') in props) return;
          needSync = true;
          newState[name] = state[name];
        });

        if (needSync) {
          this.setState(newState);
        }
      },
      registerTreeNode: function registerTreeNode(key, node) {
        if (node) {
          this.domTreeNodes[key] = node;
        } else {
          delete this.domTreeNodes[key];
        }
      },
      isKeyChecked: function isKeyChecked(key) {
        var _$data$_checkedKeys = this.$data._checkedKeys,
            checkedKeys = _$data$_checkedKeys === undefined ? [] : _$data$_checkedKeys;

        return checkedKeys.indexOf(key) !== -1;
      },


      /**
       * [Legacy] Original logic use `key` as tracking clue.
       * We have to use `cloneElement` to pass `key`.
       */
      renderTreeNode: function renderTreeNode(child, index) {
        var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var _$data5 = this.$data,
            keyEntities = _$data5._keyEntities,
            _$data5$_expandedKeys = _$data5._expandedKeys,
            expandedKeys = _$data5$_expandedKeys === undefined ? [] : _$data5$_expandedKeys,
            _$data5$_selectedKeys = _$data5._selectedKeys,
            selectedKeys = _$data5$_selectedKeys === undefined ? [] : _$data5$_selectedKeys,
            _$data5$_halfCheckedK = _$data5._halfCheckedKeys,
            halfCheckedKeys = _$data5$_halfCheckedK === undefined ? [] : _$data5$_halfCheckedK,
            _$data5$_loadedKeys = _$data5._loadedKeys,
            loadedKeys = _$data5$_loadedKeys === undefined ? [] : _$data5$_loadedKeys,
            _$data5$_loadingKeys = _$data5._loadingKeys,
            loadingKeys = _$data5$_loadingKeys === undefined ? [] : _$data5$_loadingKeys,
            dragOverNodeKey = _$data5._dragOverNodeKey,
            dropPosition = _$data5._dropPosition;

        var pos = getPosition(level, index);
        var key = child.key;
        if (!key && (key === undefined || key === null)) {
          key = pos;
        }
        if (!keyEntities.get(key)) {
          warnOnlyTreeNode();
          return null;
        }

        return cloneElement(child, {
          props: {
            eventKey: key,
            expanded: expandedKeys.indexOf(key) !== -1,
            selected: selectedKeys.indexOf(key) !== -1,
            loaded: loadedKeys.indexOf(key) !== -1,
            loading: loadingKeys.indexOf(key) !== -1,
            checked: this.isKeyChecked(key),
            halfChecked: halfCheckedKeys.indexOf(key) !== -1,
            pos: pos,

            // [Legacy] Drag props
            dragOver: dragOverNodeKey === key && dropPosition === 0,
            dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,
            dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1
          },
          key: key
        });
      }
    },

    render: function render() {
      var _this4 = this;

      var h = arguments[0];
      var treeNode = this.$data._treeNode;
      var _$props = this.$props,
          prefixCls = _$props.prefixCls,
          focusable = _$props.focusable,
          showLine = _$props.showLine,
          _$props$tabIndex = _$props.tabIndex,
          tabIndex = _$props$tabIndex === undefined ? 0 : _$props$tabIndex;


      return h(
        'ul',
        {
          'class': classnames(prefixCls, _defineProperty({}, prefixCls + '-show-line', showLine)),
          attrs: { role: 'tree',
            unselectable: 'on',
            tabIndex: focusable ? tabIndex : null
          }
        },
        [mapChildren(treeNode, function (node, index) {
          return _this4.renderTreeNode(node, index);
        })]
      );
    }
  };

  var ProxyTree = wrapWithConnect(Tree);

  Tree.TreeNode = TreeNode;
  ProxyTree.TreeNode = TreeNode;

  var src = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Tree: Tree,
    TreeNode: TreeNode,
    'default': ProxyTree
  });

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(src);

  var vcTree = require$$0;

  function TreeProps() {
    return {
      showLine: VuePropTypes.bool,
      /** 是否支持多选 */
      multiple: VuePropTypes.bool,
      /** 是否自动展开父节点 */
      autoExpandParent: VuePropTypes.bool,
      /** checkable状态下节点选择完全受控（父子节点选中状态不再关联）*/
      checkStrictly: VuePropTypes.bool,
      /** 是否支持选中 */
      checkable: VuePropTypes.bool,
      /** 是否禁用树 */
      disabled: VuePropTypes.bool,
      /** 默认展开所有树节点 */
      defaultExpandAll: VuePropTypes.bool,
      /** 默认展开对应树节点 */
      defaultExpandParent: VuePropTypes.bool,
      /** 默认展开指定的树节点 */
      defaultExpandedKeys: VuePropTypes.array,
      /** （受控）展开指定的树节点 */
      expandedKeys: VuePropTypes.array,
      /** （受控）选中复选框的树节点 */
      checkedKeys: VuePropTypes.oneOfType([VuePropTypes.array, VuePropTypes.shape({
        checked: VuePropTypes.array,
        halfChecked: VuePropTypes.array
      }).loose]),
      /** 默认选中复选框的树节点 */
      defaultCheckedKeys: VuePropTypes.array,
      /** （受控）设置选中的树节点 */
      selectedKeys: VuePropTypes.array,
      /** 默认选中的树节点 */
      defaultSelectedKeys: VuePropTypes.array,
      selectable: VuePropTypes.bool,
      /** 展开/收起节点时触发 */
      // onExpand: (expandedKeys: string[], info: AntTreeNodeExpandedEvent) => void | PromiseLike<any>,
      /** 点击复选框触发 */
      // onCheck: (checkedKeys: string[] | { checked: string[]; halfChecked: string[] }, e: AntTreeNodeCheckedEvent) => void,
      /** 点击树节点触发 */
      // onSelect: (selectedKeys: string[], e: AntTreeNodeSelectedEvent) => void,
      /** 单击树节点触发 */
      // onClick: (e: React.MouseEvent<HTMLElement>, node: AntTreeNode) => void,
      /** 双击树节点触发 */
      // onDoubleClick: (e: React.MouseEvent<HTMLElement>, node: AntTreeNode) => void,
      /** filter some AntTreeNodes as you need. it should return true */
      filterAntTreeNode: VuePropTypes.func,
      /** 异步加载数据 */
      loadData: VuePropTypes.func,
      loadedKeys: VuePropTypes.array,
      // onLoaded: (loadedKeys: string[], info: { event: 'load', node: AntTreeNode; }) => void,
      /** 响应右键点击 */
      // onRightClick: (options: AntTreeNodeMouseEvent) => void,
      /** 设置节点可拖拽（IE>8）*/
      draggable: VuePropTypes.bool,
      // /** 开始拖拽时调用 */
      // onDragStart: (options: AntTreeNodeMouseEvent) => void,
      // /** dragenter 触发时调用 */
      // onDragEnter: (options: AntTreeNodeMouseEvent) => void,
      // /** dragover 触发时调用 */
      // onDragOver: (options: AntTreeNodeMouseEvent) => void,
      // /** dragleave 触发时调用 */
      // onDragLeave: (options: AntTreeNodeMouseEvent) => void,
      // /** drop 触发时调用 */
      // onDrop: (options: AntTreeNodeMouseEvent) => void,
      showIcon: VuePropTypes.bool,
      icon: VuePropTypes.func,
      switcherIcon: VuePropTypes.any,
      prefixCls: VuePropTypes.string,
      filterTreeNode: VuePropTypes.func,
      openAnimation: VuePropTypes.any,
      treeNodes: VuePropTypes.array,
      treeData: VuePropTypes.array,
      /**
       * @default{title,key,children}
       * 替换treeNode中 title,key,children字段为treeData中对应的字段
       */
      replaceFields: VuePropTypes.object,
      blockNode: VuePropTypes.bool
    };
  }

  var Tree$1 = {
    name: 'ATree',
    model: {
      prop: 'checkedKeys',
      event: 'check'
    },
    props: initDefaultProps(TreeProps(), {
      checkable: false,
      showIcon: false,
      openAnimation: {
        on: animation,
        props: { appear: null }
      },
      blockNode: false
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    created: function created() {
      warning_1(!('treeNodes' in getOptionProps(this)), '`treeNodes` is deprecated. please use treeData instead.');
    },

    TreeNode: vcTree.TreeNode,
    methods: {
      renderSwitcherIcon: function renderSwitcherIcon(prefixCls, switcherIcon, _ref) {
        var isLeaf = _ref.isLeaf,
            expanded = _ref.expanded,
            loading = _ref.loading;
        var h = this.$createElement;
        var showLine = this.$props.showLine;

        if (loading) {
          return h(Icon$1, {
            attrs: { type: 'loading' },
            'class': prefixCls + '-switcher-loading-icon' });
        }

        if (isLeaf) {
          return showLine ? h(Icon$1, {
            attrs: { type: 'file' },
            'class': prefixCls + '-switcher-line-icon' }) : null;
        }
        var switcherCls = prefixCls + '-switcher-icon';
        if (switcherIcon) {
          return cloneElement(switcherIcon, {
            'class': _defineProperty({}, switcherCls, true)
          });
        }
        return showLine ? h(Icon$1, {
          attrs: {
            type: expanded ? 'minus-square' : 'plus-square',

            theme: 'outlined'
          },
          'class': prefixCls + '-switcher-line-icon' }) : h(Icon$1, {
          attrs: { type: 'caret-down', theme: 'filled' },
          'class': switcherCls });
      },
      updateTreeData: function updateTreeData(treeData) {
        var _this = this;

        var $slots = this.$slots,
            $scopedSlots = this.$scopedSlots;

        var defaultFields = { children: 'children', title: 'title', key: 'key' };
        var replaceFields = _extends$1({}, defaultFields, this.$props.replaceFields);
        return treeData.map(function (item) {
          var key = item[replaceFields.key];
          var children = item[replaceFields.children];

          var _item$on = item.on,
              on = _item$on === undefined ? {} : _item$on,
              _item$slots = item.slots,
              slots = _item$slots === undefined ? {} : _item$slots,
              _item$scopedSlots = item.scopedSlots,
              scopedSlots = _item$scopedSlots === undefined ? {} : _item$scopedSlots,
              cls = item['class'],
              style = item.style,
              restProps = _objectWithoutProperties(item, ['on', 'slots', 'scopedSlots', 'class', 'style']);

          var treeNodeProps = _extends$1({}, restProps, {
            icon: $scopedSlots[scopedSlots.icon] || $slots[slots.icon] || restProps.icon,
            switcherIcon: $scopedSlots[scopedSlots.switcherIcon] || $slots[slots.switcherIcon] || restProps.switcherIcon,
            title: $scopedSlots[scopedSlots.title] || $slots[slots.title] || restProps[replaceFields.title],
            dataRef: item,
            on: on,
            key: key,
            'class': cls,
            style: style
          });
          if (children) {
            return _extends$1({}, treeNodeProps, { children: _this.updateTreeData(children) });
          }
          return treeNodeProps;
        });
      }
    },
    render: function render() {
      var _this2 = this,
          _class2;

      var h = arguments[0];

      var props = getOptionProps(this);
      var $slots = this.$slots,
          $scopedSlots = this.$scopedSlots;
      var customizePrefixCls = props.prefixCls,
          showIcon = props.showIcon,
          treeNodes = props.treeNodes,
          blockNode = props.blockNode;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('tree', customizePrefixCls);
      var _switcherIcon = getComponentFromProp(this, 'switcherIcon');
      var checkable = props.checkable;
      var treeData = props.treeData || treeNodes;
      if (treeData) {
        treeData = this.updateTreeData(treeData);
      }
      var vcTreeProps = {
        props: _extends$1({}, props, {
          prefixCls: prefixCls,
          checkable: checkable ? h('span', { 'class': prefixCls + '-checkbox-inner' }) : checkable,
          children: filterEmpty($scopedSlots['default'] ? $scopedSlots['default']() : $slots['default']),
          __propsSymbol__: Symbol(),
          switcherIcon: function switcherIcon(nodeProps) {
            return _this2.renderSwitcherIcon(prefixCls, _switcherIcon, nodeProps);
          }
        }),
        on: getListeners(this),
        ref: 'tree',
        'class': (_class2 = {}, _defineProperty(_class2, prefixCls + '-icon-hide', !showIcon), _defineProperty(_class2, prefixCls + '-block-node', blockNode), _class2)
      };
      if (treeData) {
        vcTreeProps.props.treeData = treeData;
      }
      return h(vcTree.Tree, vcTreeProps);
    }
  };

  var Record = {
    None: 'node',
    Start: 'start',
    End: 'end'
  };

  // TODO: Move this logic into `rc-tree`
  function traverseNodesKey(rootChildren, callback) {
    var nodeList = getNodeChildren(rootChildren) || [];

    function processNode(node) {
      var key = node.key;

      var children = getSlots(node)['default'];
      if (callback(key, node) !== false) {
        traverseNodesKey(typeof children === 'function' ? children() : children, callback);
      }
    }

    nodeList.forEach(processNode);
  }

  function getFullKeyList(children) {
    var _convertTreeToEntitie = convertTreeToEntities(children),
        keyEntities = _convertTreeToEntitie.keyEntities;

    return [].concat(_toConsumableArray(keyEntities.keys()));
  }

  /** 计算选中范围，只考虑expanded情况以优化性能 */
  function calcRangeKeys(rootChildren, expandedKeys, startKey, endKey) {
    var keys = [];
    var record = Record.None;

    if (startKey && startKey === endKey) {
      return [startKey];
    }
    if (!startKey || !endKey) {
      return [];
    }

    function matchKey(key) {
      return key === startKey || key === endKey;
    }

    traverseNodesKey(rootChildren, function (key) {
      if (record === Record.End) {
        return false;
      }

      if (matchKey(key)) {
        // Match test
        keys.push(key);

        if (record === Record.None) {
          record = Record.Start;
        } else if (record === Record.Start) {
          record = Record.End;
          return false;
        }
      } else if (record === Record.Start) {
        // Append selection
        keys.push(key);
      }

      if (expandedKeys.indexOf(key) === -1) {
        return false;
      }

      return true;
    });

    return keys;
  }

  function convertDirectoryKeysToNodes(rootChildren, keys) {
    var restKeys = [].concat(_toConsumableArray(keys));
    var nodes = [];
    traverseNodesKey(rootChildren, function (key, node) {
      var index = restKeys.indexOf(key);
      if (index !== -1) {
        nodes.push(node);
        restKeys.splice(index, 1);
      }

      return !!restKeys.length;
    });
    return nodes;
  }

  function getFullKeyListByTreeData(treeData) {
    var keys = [];

    (treeData || []).forEach(function (item) {
      keys.push(item.key);
      if (item.children) {
        keys = [].concat(_toConsumableArray(keys), _toConsumableArray(getFullKeyListByTreeData(item.children)));
      }
    });
    return keys;
  }

  // export type ExpandAction = false | 'click' | 'dblclick'; export interface
  // DirectoryTreeProps extends TreeProps {   expandAction?: ExpandAction; }
  // export interface DirectoryTreeState {   expandedKeys?: string[];
  // selectedKeys?: string[]; }

  function getIcon(props, h) {
    var isLeaf = props.isLeaf,
        expanded = props.expanded;

    if (isLeaf) {
      return h(Icon$1, {
        attrs: { type: 'file' }
      });
    }
    return h(Icon$1, {
      attrs: { type: expanded ? 'folder-open' : 'folder' }
    });
  }

  var DirectoryTree = {
    name: 'ADirectoryTree',
    mixins: [BaseMixin],
    model: {
      prop: 'checkedKeys',
      event: 'check'
    },
    props: initDefaultProps(_extends$1({}, TreeProps(), {
      expandAction: VuePropTypes.oneOf([false, 'click', 'doubleclick', 'dblclick'])
    }), {
      showIcon: true,
      expandAction: 'click'
    }),

    // state: DirectoryTreeState; onDebounceExpand: (event, node: AntTreeNode) =>
    // void; // Shift click usage lastSelectedKey?: string; cachedSelectedKeys?:
    // string[];
    inject: {
      configProvider: {
        'default': function _default() {
          return ConfigConsumerProps;
        }
      }
    },
    data: function data() {
      var props = getOptionProps(this);
      var defaultExpandAll = props.defaultExpandAll,
          defaultExpandParent = props.defaultExpandParent,
          expandedKeys = props.expandedKeys,
          defaultExpandedKeys = props.defaultExpandedKeys;

      var _convertTreeToEntitie = convertTreeToEntities(this.$slots['default']),
          keyEntities = _convertTreeToEntitie.keyEntities;

      var state = {};
      // Selected keys
      state._selectedKeys = props.selectedKeys || props.defaultSelectedKeys || [];

      // Expanded keys
      if (defaultExpandAll) {
        if (props.treeData) {
          state._expandedKeys = getFullKeyListByTreeData(props.treeData);
        } else {
          state._expandedKeys = getFullKeyList(this.$slots['default']);
        }
      } else if (defaultExpandParent) {
        state._expandedKeys = conductExpandParent(expandedKeys || defaultExpandedKeys, keyEntities);
      } else {
        state._expandedKeys = expandedKeys || defaultExpandedKeys;
      }

      this.onDebounceExpand = debounce_1(this.expandFolderNode, 200, { leading: true });
      return _extends$1({
        _selectedKeys: [],
        _expandedKeys: []
      }, state);
    },

    watch: {
      expandedKeys: function expandedKeys(val) {
        this.setState({ _expandedKeys: val });
      },
      selectedKeys: function selectedKeys(val) {
        this.setState({ _selectedKeys: val });
      }
    },
    methods: {
      onExpand: function onExpand(expandedKeys, info) {
        this.setUncontrolledState({ _expandedKeys: expandedKeys });

        this.$emit('expand', expandedKeys, info);

        return undefined;
      },
      onClick: function onClick(event, node) {
        var expandAction = this.$props.expandAction;

        // Expand the tree

        if (expandAction === 'click') {
          this.onDebounceExpand(event, node);
        }
        this.$emit('click', event, node);
      },
      onDoubleClick: function onDoubleClick(event, node) {
        var expandAction = this.$props.expandAction;

        // Expand the tree

        if (expandAction === 'dblclick' || expandAction === 'doubleclick') {
          this.onDebounceExpand(event, node);
        }

        this.$emit('doubleclick', event, node);
        this.$emit('dblclick', event, node);
      },
      onSelect: function onSelect(keys, event) {
        var multiple = this.$props.multiple;

        var children = this.$slots['default'] || [];
        var _$data$_expandedKeys = this.$data._expandedKeys,
            expandedKeys = _$data$_expandedKeys === undefined ? [] : _$data$_expandedKeys;
        var node = event.node,
            nativeEvent = event.nativeEvent;
        var _node$eventKey = node.eventKey,
            eventKey = _node$eventKey === undefined ? '' : _node$eventKey;


        var newState = {};

        // We need wrap this event since some value is not same
        var newEvent = _extends$1({}, event, {
          selected: true // Directory selected always true
        });

        // Windows / Mac single pick
        var ctrlPick = nativeEvent.ctrlKey || nativeEvent.metaKey;
        var shiftPick = nativeEvent.shiftKey;

        // Generate new selected keys
        var newSelectedKeys = void 0;
        if (multiple && ctrlPick) {
          // Control click
          newSelectedKeys = keys;
          this.lastSelectedKey = eventKey;
          this.cachedSelectedKeys = newSelectedKeys;
          newEvent.selectedNodes = convertDirectoryKeysToNodes(children, newSelectedKeys);
        } else if (multiple && shiftPick) {
          // Shift click
          newSelectedKeys = Array.from(new Set([].concat(_toConsumableArray(this.cachedSelectedKeys || []), _toConsumableArray(calcRangeKeys(children, expandedKeys, eventKey, this.lastSelectedKey)))));
          newEvent.selectedNodes = convertDirectoryKeysToNodes(children, newSelectedKeys);
        } else {
          // Single click
          newSelectedKeys = [eventKey];
          this.lastSelectedKey = eventKey;
          this.cachedSelectedKeys = newSelectedKeys;
          newEvent.selectedNodes = [event.node];
        }
        newState._selectedKeys = newSelectedKeys;

        this.$emit('update:selectedKeys', newSelectedKeys);
        this.$emit('select', newSelectedKeys, newEvent);

        this.setUncontrolledState(newState);
      },
      expandFolderNode: function expandFolderNode(event, node) {
        var isLeaf = node.isLeaf;


        if (isLeaf || event.shiftKey || event.metaKey || event.ctrlKey) {
          return;
        }

        if (this.$refs.tree.$refs.tree) {
          // Get internal vc-tree
          var internalTree = this.$refs.tree.$refs.tree;

          // Call internal rc-tree expand function
          // https://github.com/ant-design/ant-design/issues/12567
          internalTree.onNodeExpand(event, node);
        }
      },
      setUncontrolledState: function setUncontrolledState(state) {
        var newState = omit(state, Object.keys(getOptionProps(this)).map(function (p) {
          return '_' + p;
        }));
        if (Object.keys(newState).length) {
          this.setState(newState);
        }
      }
    },

    render: function render() {
      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          customizePrefixCls = _getOptionProps.prefixCls,
          props = _objectWithoutProperties(_getOptionProps, ['prefixCls']);

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('tree', customizePrefixCls);
      var _$data = this.$data,
          expandedKeys = _$data._expandedKeys,
          selectedKeys = _$data._selectedKeys;

      var listeners = getListeners(this);
      warning$1(!listeners.doubleclick, '`doubleclick` is deprecated. please use `dblclick` instead.');
      var treeProps = {
        props: _extends$1({
          icon: getIcon
        }, props, {
          prefixCls: prefixCls,
          expandedKeys: expandedKeys,
          selectedKeys: selectedKeys,
          switcherIcon: getComponentFromProp(this, 'switcherIcon')
        }),
        ref: 'tree',
        'class': prefixCls + '-directory',
        on: _extends$1({}, omit(listeners, ['update:selectedKeys']), {
          select: this.onSelect,
          click: this.onClick,
          dblclick: this.onDoubleClick,
          expand: this.onExpand
        })
      };
      return h(
        Tree$1,
        treeProps,
        [this.$slots['default']]
      );
    }
  };

  Tree$1.TreeNode.name = 'ATreeNode';
  Tree$1.DirectoryTree = DirectoryTree;
  /* istanbul ignore next */
  Tree$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Tree$1.name, Tree$1);
    Vue.component(Tree$1.TreeNode.name, Tree$1.TreeNode);
    Vue.component(DirectoryTree.name, DirectoryTree);
  };

  function hasClass(node, className) {
    if (node.classList) {
      return node.classList.contains(className);
    }
    var originClass = node.className;
    return (' ' + originClass + ' ').indexOf(' ' + className + ' ') > -1;
  }

  var SHOW_ALL = 'SHOW_ALL';
  var SHOW_PARENT = 'SHOW_PARENT';
  var SHOW_CHILD = 'SHOW_CHILD';

  var warnDeprecatedLabel = false;

  // =================== DOM =====================
  function findPopupContainer(node, prefixClass) {
    var current = node;
    while (current) {
      if (hasClass(current, prefixClass)) {
        return current;
      }
      current = current.parentNode;
    }

    return null;
  }

  // =================== MISC ====================
  function toTitle$1(title) {
    if (typeof title === 'string') {
      return title;
    }
    return null;
  }

  function toArray$4(data) {
    if (data === undefined || data === null) return [];

    return Array.isArray(data) ? data : [data];
  }

  function createRef() {
    var func = function setRef(node) {
      func.current = node;
    };
    return func;
  }

  // =============== Legacy ===============
  var UNSELECTABLE_STYLE$1 = {
    userSelect: 'none',
    WebkitUserSelect: 'none'
  };

  var UNSELECTABLE_ATTRIBUTE$1 = {
    unselectable: 'unselectable'
  };

  /**
   * Convert position list to hierarchy structure.
   * This is little hack since use '-' to split the position.
   */
  function flatToHierarchy(positionList) {
    if (!positionList.length) {
      return [];
    }

    var entrances = {};

    // Prepare the position map
    var posMap = {};
    var parsedList = positionList.slice().map(function (entity) {
      var clone = _extends$1({}, entity, {
        fields: entity.pos.split('-')
      });
      delete clone.children;
      return clone;
    });

    parsedList.forEach(function (entity) {
      posMap[entity.pos] = entity;
    });

    parsedList.sort(function (a, b) {
      return a.fields.length - b.fields.length;
    });

    // Create the hierarchy
    parsedList.forEach(function (entity) {
      var parentPos = entity.fields.slice(0, -1).join('-');
      var parentEntity = posMap[parentPos];

      if (!parentEntity) {
        entrances[entity.pos] = entity;
      } else {
        parentEntity.children = parentEntity.children || [];
        parentEntity.children.push(entity);
      }

      // Some time position list provide `key`, we don't need it
      delete entity.key;
      delete entity.fields;
    });

    return Object.keys(entrances).map(function (key) {
      return entrances[key];
    });
  }

  // =============== Accessibility ===============
  var ariaId = 0;

  function generateAriaId(prefix) {
    ariaId += 1;
    return prefix + '_' + ariaId;
  }

  function isLabelInValue(props) {
    var treeCheckable = props.treeCheckable,
        treeCheckStrictly = props.treeCheckStrictly,
        labelInValue = props.labelInValue;

    if (treeCheckable && treeCheckStrictly) {
      return true;
    }
    return labelInValue || false;
  }

  // =================== Tree ====================
  function parseSimpleTreeData(treeData, _ref) {
    var id = _ref.id,
        pId = _ref.pId,
        rootPId = _ref.rootPId;

    var keyNodes = {};
    var rootNodeList = [];

    // Fill in the map
    var nodeList = treeData.map(function (node) {
      var clone = _extends$1({}, node);
      var key = clone[id];
      keyNodes[key] = clone;
      clone.key = clone.key || key;
      return clone;
    });

    // Connect tree
    nodeList.forEach(function (node) {
      var parentKey = node[pId];
      var parent = keyNodes[parentKey];

      // Fill parent
      if (parent) {
        parent.children = parent.children || [];
        parent.children.push(node);
      }

      // Fill root tree node
      if (parentKey === rootPId || !parent && rootPId === null) {
        rootNodeList.push(node);
      }
    });

    return rootNodeList;
  }

  /**
   * Detect if position has relation.
   * e.g. 1-2 related with 1-2-3
   * e.g. 1-3-2 related with 1
   * e.g. 1-2 not related with 1-21
   */
  function isPosRelated(pos1, pos2) {
    var fields1 = pos1.split('-');
    var fields2 = pos2.split('-');

    var minLen = Math.min(fields1.length, fields2.length);
    for (var i = 0; i < minLen; i += 1) {
      if (fields1[i] !== fields2[i]) {
        return false;
      }
    }
    return true;
  }

  /**
   * This function is only used on treeNode check (none treeCheckStrictly but has searchInput).
   * We convert entity to { node, pos, children } format.
   * This is legacy bug but we still need to do with it.
   * @param entity
   */
  function cleanEntity(_ref2) {
    var node = _ref2.node,
        pos = _ref2.pos,
        children = _ref2.children;

    var instance = {
      node: node,
      pos: pos
    };

    if (children) {
      instance.children = children.map(cleanEntity);
    }

    return instance;
  }

  /**
   * Get a filtered TreeNode list by provided treeNodes.
   * [Legacy] Since `Tree` use `key` as map but `key` will changed by React,
   * we have to convert `treeNodes > data > treeNodes` to keep the key.
   * Such performance hungry!
   */
  function getFilterTree(h, treeNodes, searchValue, filterFunc, valueEntities, Component) {
    if (!searchValue) {
      return null;
    }

    function mapFilteredNodeToData(node) {
      if (!node || isEmptyElement(node)) return null;

      var match = false;
      if (filterFunc(searchValue, node)) {
        match = true;
      }
      var children = getSlots(node)['default'];
      children = ((typeof children === 'function' ? children() : children) || []).map(mapFilteredNodeToData).filter(function (n) {
        return n;
      });
      if (children.length || match) {
        return h(
          Component,
          babelHelperVueJsxMergeProps([node.data, { key: valueEntities[getPropsData(node).value].key }]),
          [children]
        );
      }

      return null;
    }
    return treeNodes.map(mapFilteredNodeToData).filter(function (node) {
      return node;
    });
  }

  // =================== Value ===================
  /**
   * Convert value to array format to make logic simplify.
   */
  function formatInternalValue(value, props) {
    var valueList = toArray$4(value);

    // Parse label in value
    if (isLabelInValue(props)) {
      return valueList.map(function (val) {
        if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) !== 'object' || !val) {
          return {
            value: '',
            label: ''
          };
        }

        return val;
      });
    }

    return valueList.map(function (val) {
      return {
        value: val
      };
    });
  }

  function getLabel(wrappedValue, entity, treeNodeLabelProp) {
    if (wrappedValue.label) {
      return wrappedValue.label;
    }

    if (entity) {
      var props = getPropsData(entity.node);
      if (Object.keys(props).length) {
        return props[treeNodeLabelProp];
      }
    }

    // Since value without entity will be in missValueList.
    // This code will never reached, but we still need this in case.
    return wrappedValue.value;
  }

  /**
   * Convert internal state `valueList` to user needed value list.
   * This will return an array list. You need check if is not multiple when return.
   *
   * `allCheckedNodes` is used for `treeCheckStrictly`
   */
  function formatSelectorValue(valueList, props, valueEntities) {
    var treeNodeLabelProp = props.treeNodeLabelProp,
        treeCheckable = props.treeCheckable,
        treeCheckStrictly = props.treeCheckStrictly,
        showCheckedStrategy = props.showCheckedStrategy;

    // Will hide some value if `showCheckedStrategy` is set

    if (treeCheckable && !treeCheckStrictly) {
      var values = {};
      valueList.forEach(function (wrappedValue) {
        values[wrappedValue.value] = wrappedValue;
      });
      var hierarchyList = flatToHierarchy(valueList.map(function (_ref3) {
        var value = _ref3.value;
        return valueEntities[value];
      }));

      if (showCheckedStrategy === SHOW_PARENT) {
        // Only get the parent checked value
        return hierarchyList.map(function (_ref4) {
          var node = _ref4.node;

          var value = getPropsData(node).value;
          return {
            label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),
            value: value
          };
        });
      }
      if (showCheckedStrategy === SHOW_CHILD) {
        // Only get the children checked value
        var targetValueList = [];

        // Find the leaf children
        var traverse = function traverse(_ref5) {
          var node = _ref5.node,
              children = _ref5.children;

          var value = getPropsData(node).value;
          if (!children || children.length === 0) {
            targetValueList.push({
              label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),
              value: value
            });
            return;
          }

          children.forEach(function (entity) {
            traverse(entity);
          });
        };

        hierarchyList.forEach(function (entity) {
          traverse(entity);
        });

        return targetValueList;
      }
    }

    return valueList.map(function (wrappedValue) {
      return {
        label: getLabel(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),
        value: wrappedValue.value
      };
    });
  }

  /**
   * Use `rc-tree` convertDataToTree to convert treeData to TreeNodes.
   * This will change the label to title value
   */
  function processProps(props) {
    var title = props.title,
        label = props.label,
        value = props.value,
        cls = props['class'],
        style = props.style,
        _props$on = props.on,
        on = _props$on === undefined ? {} : _props$on;

    var key = props.key;
    if (!key && (key === undefined || key === null)) {
      key = value;
    }
    var p = {
      props: omit(props, ['on', 'key', 'class', 'className', 'style']),
      on: on,
      'class': cls || props.className,
      style: style,
      key: key
    };
    // Warning user not to use deprecated label prop.
    if (label && !title) {
      if (!warnDeprecatedLabel) {
        warning_1(false, "'label' in treeData is deprecated. Please use 'title' instead.");
        warnDeprecatedLabel = true;
      }

      p.props.title = label;
    }

    return p;
  }

  function convertDataToTree$1(h, treeData) {
    return convertDataToTree(h, treeData, { processProps: processProps });
  }

  /**
   * Use `rc-tree` convertTreeToEntities for entities calculation.
   * We have additional entities of `valueEntities`
   */
  function initWrapper(wrapper) {
    return _extends$1({}, wrapper, {
      valueEntities: {}
    });
  }

  function processEntity(entity, wrapper) {
    var value = getPropsData(entity.node).value;
    entity.value = value;

    // This should be empty, or will get error message.
    var currentEntity = wrapper.valueEntities[value];
    if (currentEntity) {
      warning_1(false, 'Conflict! value of node \'' + entity.key + '\' (' + value + ') has already used by node \'' + currentEntity.key + '\'.');
    }
    wrapper.valueEntities[value] = entity;
  }

  function convertTreeToEntities$1(treeNodes) {
    return convertTreeToEntities(treeNodes, {
      initWrapper: initWrapper,
      processEntity: processEntity
    });
  }

  /**
   * https://github.com/ant-design/ant-design/issues/13328
   * We need calculate the half check key when searchValue is set.
   */
  // TODO: This logic may better move to rc-tree
  function getHalfCheckedKeys(valueList, valueEntities) {
    var values = {};

    // Fill checked keys
    valueList.forEach(function (_ref6) {
      var value = _ref6.value;

      values[value] = false;
    });

    // Fill half checked keys
    valueList.forEach(function (_ref7) {
      var value = _ref7.value;

      var current = valueEntities[value];

      while (current && current.parent) {
        var parentValue = current.parent.value;
        if (parentValue in values) break;
        values[parentValue] = true;

        current = current.parent;
      }
    });

    // Get half keys
    return Object.keys(values).filter(function (value) {
      return values[value];
    }).map(function (value) {
      return valueEntities[value].key;
    });
  }

  var conductCheck$1 = conductCheck;

  var BUILT_IN_PLACEMENTS$3 = {
    bottomLeft: {
      points: ['tl', 'bl'],
      offset: [0, 4],
      overflow: {
        adjustX: 0,
        adjustY: 1
      },
      ignoreShake: true
    },
    topLeft: {
      points: ['bl', 'tl'],
      offset: [0, -4],
      overflow: {
        adjustX: 0,
        adjustY: 1
      },
      ignoreShake: true
    }
  };

  var SelectTrigger$1 = {
    name: 'SelectTrigger',
    props: {
      // Pass by outside user props
      disabled: VuePropTypes.bool,
      showSearch: VuePropTypes.bool,
      prefixCls: VuePropTypes.string,
      dropdownPopupAlign: VuePropTypes.object,
      dropdownClassName: VuePropTypes.string,
      dropdownStyle: VuePropTypes.object,
      transitionName: VuePropTypes.string,
      animation: VuePropTypes.string,
      getPopupContainer: VuePropTypes.func,

      dropdownMatchSelectWidth: VuePropTypes.bool,

      // Pass by Select
      isMultiple: VuePropTypes.bool,
      dropdownPrefixCls: VuePropTypes.string,
      dropdownVisibleChange: VuePropTypes.func,
      popupElement: VuePropTypes.node,
      open: VuePropTypes.bool
    },
    created: function created() {
      this.triggerRef = createRef();
    },

    methods: {
      getDropdownTransitionName: function getDropdownTransitionName() {
        var _$props = this.$props,
            transitionName = _$props.transitionName,
            animation = _$props.animation,
            dropdownPrefixCls = _$props.dropdownPrefixCls;

        if (!transitionName && animation) {
          return dropdownPrefixCls + '-' + animation;
        }
        return transitionName;
      },
      forcePopupAlign: function forcePopupAlign() {
        var $trigger = this.triggerRef.current;
        if ($trigger) {
          $trigger.forcePopupAlign();
        }
      }
    },

    render: function render() {
      var _classNames;

      var h = arguments[0];
      var _$props2 = this.$props,
          disabled = _$props2.disabled,
          isMultiple = _$props2.isMultiple,
          dropdownPopupAlign = _$props2.dropdownPopupAlign,
          dropdownMatchSelectWidth = _$props2.dropdownMatchSelectWidth,
          dropdownClassName = _$props2.dropdownClassName,
          dropdownStyle = _$props2.dropdownStyle,
          dropdownVisibleChange = _$props2.dropdownVisibleChange,
          getPopupContainer = _$props2.getPopupContainer,
          dropdownPrefixCls = _$props2.dropdownPrefixCls,
          popupElement = _$props2.popupElement,
          open = _$props2.open;

      // TODO: [Legacy] Use new action when trigger fixed: https://github.com/react-component/trigger/pull/86

      // When false do nothing with the width
      // ref: https://github.com/ant-design/ant-design/issues/10927

      var stretch = void 0;
      if (dropdownMatchSelectWidth !== false) {
        stretch = dropdownMatchSelectWidth ? 'width' : 'minWidth';
      }
      return h(
        Trigger,
        babelHelperVueJsxMergeProps([{
          directives: [{
            name: 'ant-ref',
            value: this.triggerRef
          }]
        }, {
          attrs: {
            action: disabled ? [] : ['click'],
            popupPlacement: 'bottomLeft',
            builtinPlacements: BUILT_IN_PLACEMENTS$3,
            popupAlign: dropdownPopupAlign,
            prefixCls: dropdownPrefixCls,
            popupTransitionName: this.getDropdownTransitionName(),

            popup: popupElement,
            popupVisible: open,
            getPopupContainer: getPopupContainer,
            stretch: stretch,
            popupClassName: classnames(dropdownClassName, (_classNames = {}, _defineProperty(_classNames, dropdownPrefixCls + '--multiple', isMultiple), _defineProperty(_classNames, dropdownPrefixCls + '--single', !isMultiple), _classNames)),
            popupStyle: dropdownStyle
          },
          on: {
            'popupVisibleChange': dropdownVisibleChange
          }
        }]),
        [this.$slots['default']]
      );
    }
  };

  var selectorPropTypes = function selectorPropTypes() {
    return {
      prefixCls: VuePropTypes.string,
      className: VuePropTypes.string,
      open: VuePropTypes.bool,
      selectorValueList: VuePropTypes.array,
      allowClear: VuePropTypes.bool,
      showArrow: VuePropTypes.bool,
      // onClick: PropTypes.func,
      // onBlur: PropTypes.func,
      // onFocus: PropTypes.func,
      removeSelected: VuePropTypes.func,
      choiceTransitionName: VuePropTypes.string,
      // Pass by component
      ariaId: VuePropTypes.string,
      inputIcon: VuePropTypes.any,
      clearIcon: VuePropTypes.any,
      removeIcon: VuePropTypes.any,
      placeholder: VuePropTypes.any,
      disabled: VuePropTypes.bool,
      focused: VuePropTypes.bool
    };
  };

  function noop$W() {}
  function generateSelector (modeName) {
    var BaseSelector = {
      name: 'BaseSelector',
      mixins: [BaseMixin],
      props: initDefaultProps(_extends$1({}, selectorPropTypes(), {

        // Pass by HOC
        renderSelection: VuePropTypes.func.isRequired,
        renderPlaceholder: VuePropTypes.func,
        tabIndex: VuePropTypes.number
      }), {
        tabIndex: 0
      }),
      inject: {
        vcTreeSelect: { 'default': function _default() {
            return {};
          } }
      },
      created: function created() {
        this.domRef = createRef();
      },

      methods: {
        onFocus: function onFocus(e) {
          var focused = this.$props.focused;
          var onSelectorFocus = this.vcTreeSelect.onSelectorFocus;


          if (!focused) {
            onSelectorFocus();
          }
          this.__emit('focus', e);
        },
        onBlur: function onBlur(e) {
          var onSelectorBlur = this.vcTreeSelect.onSelectorBlur;

          // TODO: Not trigger when is inner component get focused

          onSelectorBlur();
          this.__emit('blur', e);
        },
        focus: function focus() {
          this.domRef.current.focus();
        },
        blur: function blur() {
          this.domRef.current.blur();
        },
        renderClear: function renderClear() {
          var h = this.$createElement;
          var _$props = this.$props,
              prefixCls = _$props.prefixCls,
              allowClear = _$props.allowClear,
              selectorValueList = _$props.selectorValueList;
          var onSelectorClear = this.vcTreeSelect.onSelectorClear;


          if (!allowClear || !selectorValueList.length || !selectorValueList[0].value) {
            return null;
          }
          var clearIcon = getComponentFromProp(this, 'clearIcon');
          return h(
            'span',
            { key: 'clear', 'class': prefixCls + '-selection__clear', on: {
                'click': onSelectorClear
              }
            },
            [clearIcon]
          );
        },
        renderArrow: function renderArrow() {
          var h = this.$createElement;
          var _$props2 = this.$props,
              prefixCls = _$props2.prefixCls,
              showArrow = _$props2.showArrow;

          if (!showArrow) {
            return null;
          }
          var inputIcon = getComponentFromProp(this, 'inputIcon');
          return h(
            'span',
            { key: 'arrow', 'class': prefixCls + '-arrow', style: { outline: 'none' } },
            [inputIcon]
          );
        }
      },

      render: function render() {
        var _classNames;

        var h = arguments[0];
        var _$props3 = this.$props,
            prefixCls = _$props3.prefixCls,
            className = _$props3.className,
            style = _$props3.style,
            open = _$props3.open,
            focused = _$props3.focused,
            disabled = _$props3.disabled,
            allowClear = _$props3.allowClear,
            ariaId = _$props3.ariaId,
            renderSelection = _$props3.renderSelection,
            renderPlaceholder = _$props3.renderPlaceholder,
            tabIndex = _$props3.tabIndex;
        var onSelectorKeyDown = this.vcTreeSelect.onSelectorKeyDown;


        var myTabIndex = tabIndex;
        if (disabled) {
          myTabIndex = null;
        }

        return h(
          'span',
          babelHelperVueJsxMergeProps([{
            style: style,
            on: {
              'click': getListeners(this).click || noop$W
            },

            'class': classnames(className, prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-open', open), _defineProperty(_classNames, prefixCls + '-focused', open || focused), _defineProperty(_classNames, prefixCls + '-disabled', disabled), _defineProperty(_classNames, prefixCls + '-enabled', !disabled), _defineProperty(_classNames, prefixCls + '-allow-clear', allowClear), _classNames))
          }, {
            directives: [{
              name: 'ant-ref',
              value: this.domRef
            }]
          }, {
            attrs: {
              role: 'combobox',
              'aria-expanded': open,
              'aria-owns': open ? ariaId : undefined,
              'aria-controls': open ? ariaId : undefined,
              'aria-haspopup': 'listbox',
              'aria-disabled': disabled,
              tabIndex: myTabIndex
            },
            on: {
              'focus': this.onFocus,
              'blur': this.onBlur,
              'keydown': onSelectorKeyDown
            }
          }]),
          [h(
            'span',
            {
              key: 'selection',
              'class': classnames(prefixCls + '-selection', prefixCls + '-selection--' + modeName)
            },
            [renderSelection(), this.renderClear(), this.renderArrow(), renderPlaceholder && renderPlaceholder()]
          )]
        );
      }
    };

    return BaseSelector;
  }

  var Selector = generateSelector('single');

  var SingleSelector = {
    name: 'SingleSelector',
    props: selectorPropTypes(),
    created: function created() {
      this.selectorRef = createRef();
    },

    methods: {
      focus: function focus() {
        this.selectorRef.current.focus();
      },
      blur: function blur() {
        this.selectorRef.current.blur();
      },
      renderSelection: function renderSelection() {
        var h = this.$createElement;
        var _$props = this.$props,
            selectorValueList = _$props.selectorValueList,
            placeholder = _$props.placeholder,
            prefixCls = _$props.prefixCls;


        var innerNode = void 0;

        if (selectorValueList.length) {
          var _selectorValueList$ = selectorValueList[0],
              label = _selectorValueList$.label,
              value = _selectorValueList$.value;

          innerNode = h(
            'span',
            { key: 'value', attrs: { title: toTitle$1(label) },
              'class': prefixCls + '-selection-selected-value' },
            [label || value]
          );
        } else {
          innerNode = h(
            'span',
            { key: 'placeholder', 'class': prefixCls + '-selection__placeholder' },
            [placeholder]
          );
        }

        return h(
          'span',
          { 'class': prefixCls + '-selection__rendered' },
          [innerNode]
        );
      }
    },

    render: function render() {
      var h = arguments[0];

      var props = {
        props: _extends$1({}, getOptionProps(this), {
          renderSelection: this.renderSelection
        }),
        on: getListeners(this),
        directives: [{
          name: 'ant-ref',
          value: this.selectorRef
        }]
      };
      return h(Selector, props);
    }
  };

  var SearchInput = {
    name: 'SearchInput',
    props: {
      open: VuePropTypes.bool,
      searchValue: VuePropTypes.string,
      prefixCls: VuePropTypes.string,
      disabled: VuePropTypes.bool,
      renderPlaceholder: VuePropTypes.func,
      needAlign: VuePropTypes.bool,
      ariaId: VuePropTypes.string
    },
    inject: {
      vcTreeSelect: { 'default': function _default() {
          return {};
        } }
    },
    data: function data() {
      return {
        mirrorSearchValue: this.searchValue
      };
    },

    watch: {
      searchValue: function searchValue(val) {
        this.mirrorSearchValue = val;
      }
    },
    created: function created() {
      this.inputRef = createRef();
      this.mirrorInputRef = createRef();
      this.prevProps = _extends$1({}, this.$props);
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        var _$props = _this.$props,
            open = _$props.open,
            needAlign = _$props.needAlign;

        if (needAlign) {
          _this.alignInputWidth();
        }

        if (open) {
          _this.focus(true);
        }
      });
    },
    updated: function updated() {
      var _this2 = this;

      var _$props2 = this.$props,
          open = _$props2.open,
          searchValue = _$props2.searchValue,
          needAlign = _$props2.needAlign;
      var prevProps = this.prevProps;

      this.$nextTick(function () {
        if (open && prevProps.open !== open) {
          _this2.focus();
        }
        if (needAlign && searchValue !== prevProps.searchValue) {
          _this2.alignInputWidth();
        }
        _this2.prevProps = _extends$1({}, _this2.$props);
      });
    },

    methods: {
      /**
       * `scrollWidth` is not correct in IE, do the workaround.
       * ref: https://github.com/react-component/tree-select/issues/65
       *  clientWidth 0 when mounted in vue. why?
       */
      alignInputWidth: function alignInputWidth() {
        this.inputRef.current.style.width = (this.mirrorInputRef.current.clientWidth || this.mirrorInputRef.current.offsetWidth) + 'px';
      },


      /**
       * Need additional timeout for focus cause parent dom is not ready when didMount trigger
       */
      focus: function focus(isDidMount) {
        var _this3 = this;

        if (this.inputRef.current) {
          if (isDidMount) {
            setTimeout(function () {
              _this3.inputRef.current.focus();
            }, 0);
          } else {
            // set it into else, Avoid scrolling when focus
            this.inputRef.current.focus();
          }
        }
      },
      blur: function blur() {
        if (this.inputRef.current) {
          this.inputRef.current.blur();
        }
      },
      handleInputChange: function handleInputChange(e) {
        var _e$target = e.target,
            value = _e$target.value,
            composing = _e$target.composing;
        var _searchValue = this.searchValue,
            searchValue = _searchValue === undefined ? '' : _searchValue;

        if (e.isComposing || composing || searchValue === value) {
          this.mirrorSearchValue = value;
          return;
        }
        this.vcTreeSelect.onSearchInputChange(e);
      }
    },

    render: function render() {
      var h = arguments[0];
      var _$props3 = this.$props,
          searchValue = _$props3.searchValue,
          prefixCls = _$props3.prefixCls,
          disabled = _$props3.disabled,
          renderPlaceholder = _$props3.renderPlaceholder,
          open = _$props3.open,
          ariaId = _$props3.ariaId;
      var onSearchInputKeyDown = this.vcTreeSelect.onSearchInputKeyDown,
          handleInputChange = this.handleInputChange,
          mirrorSearchValue = this.mirrorSearchValue;

      return h(
        'span',
        { 'class': prefixCls + '-search__field__wrap' },
        [h('input', babelHelperVueJsxMergeProps([{
          attrs: {
            type: 'text'
          }
        }, {
          directives: [{
            name: 'ant-ref',
            value: this.inputRef
          }, {
            name: 'ant-input'
          }]
        }, {
          on: {
            'input': handleInputChange,
            'keydown': onSearchInputKeyDown
          },
          domProps: {
            'value': searchValue
          },
          attrs: {
            disabled: disabled,

            'aria-label': 'filter select',
            'aria-autocomplete': 'list',
            'aria-controls': open ? ariaId : undefined,
            'aria-multiline': 'false'
          },
          'class': prefixCls + '-search__field' }])), h(
          'span',
          babelHelperVueJsxMergeProps([{
            directives: [{
              name: 'ant-ref',
              value: this.mirrorInputRef
            }]
          }, {
            'class': prefixCls + '-search__field__mirror'
          }]),
          [mirrorSearchValue, '\xA0']
        ), renderPlaceholder && !mirrorSearchValue ? renderPlaceholder() : null]
      );
    }
  };

  var Selection = {
    mixins: [BaseMixin],
    props: {
      prefixCls: VuePropTypes.string,
      maxTagTextLength: VuePropTypes.number,
      // onRemove: PropTypes.func,

      label: VuePropTypes.any,
      value: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]),
      removeIcon: VuePropTypes.any
    },
    methods: {
      onRemove: function onRemove(event) {
        var value = this.$props.value;

        this.__emit('remove', event, value);
        event.stopPropagation();
      }
    },

    render: function render() {
      var h = arguments[0];
      var _$props = this.$props,
          prefixCls = _$props.prefixCls,
          maxTagTextLength = _$props.maxTagTextLength,
          label = _$props.label,
          value = _$props.value;

      var content = label || value;
      if (maxTagTextLength && typeof content === 'string' && content.length > maxTagTextLength) {
        content = content.slice(0, maxTagTextLength) + '...';
      }

      return h(
        'li',
        babelHelperVueJsxMergeProps([{
          style: UNSELECTABLE_STYLE$1
        }, { attrs: UNSELECTABLE_ATTRIBUTE$1 }, {
          attrs: {
            role: 'menuitem',

            title: toTitle$1(label)
          },
          'class': prefixCls + '-selection__choice' }]),
        [getListeners(this).remove && h(
          'span',
          { 'class': prefixCls + '-selection__choice__remove', on: {
              'click': this.onRemove
            }
          },
          [getComponentFromProp(this, 'removeIcon')]
        ), h(
          'span',
          { 'class': prefixCls + '-selection__choice__content' },
          [content]
        )]
      );
    }
  };

  var TREE_SELECT_EMPTY_VALUE_KEY = 'RC_TREE_SELECT_EMPTY_VALUE_KEY';

  var Selector$1 = generateSelector('multiple');

  // export const multipleSelectorContextTypes = {
  //   onMultipleSelectorRemove: PropTypes.func.isRequired,
  // }

  var MultipleSelector = {
    mixins: [BaseMixin],
    props: _extends$1({}, selectorPropTypes(), SearchInput.props, {
      selectorValueList: VuePropTypes.array,
      disabled: VuePropTypes.bool,
      searchValue: VuePropTypes.string,
      labelInValue: VuePropTypes.bool,
      maxTagCount: VuePropTypes.number,
      maxTagPlaceholder: VuePropTypes.any

      // onChoiceAnimationLeave: PropTypes.func,
    }),
    inject: {
      vcTreeSelect: { 'default': function _default() {
          return {};
        } }
    },
    created: function created() {
      this.inputRef = createRef();
    },

    methods: {
      onPlaceholderClick: function onPlaceholderClick() {
        this.inputRef.current.focus();
      },
      focus: function focus() {
        this.inputRef.current.focus();
      },
      blur: function blur() {
        this.inputRef.current.blur();
      },
      _renderPlaceholder: function _renderPlaceholder() {
        var h = this.$createElement;
        var _$props = this.$props,
            prefixCls = _$props.prefixCls,
            placeholder = _$props.placeholder,
            searchPlaceholder = _$props.searchPlaceholder,
            searchValue = _$props.searchValue,
            selectorValueList = _$props.selectorValueList;


        var currentPlaceholder = placeholder || searchPlaceholder;

        if (!currentPlaceholder) return null;

        var hidden = searchValue || selectorValueList.length;

        // [Legacy] Not remove the placeholder
        return h(
          'span',
          {
            style: {
              display: hidden ? 'none' : 'block'
            },
            on: {
              'click': this.onPlaceholderClick
            },

            'class': prefixCls + '-search__field__placeholder'
          },
          [currentPlaceholder]
        );
      },
      onChoiceAnimationLeave: function onChoiceAnimationLeave() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this.__emit.apply(this, ['choiceAnimationLeave'].concat(_toConsumableArray(args)));
      },
      renderSelection: function renderSelection() {
        var _this = this;

        var h = this.$createElement;
        var _$props2 = this.$props,
            selectorValueList = _$props2.selectorValueList,
            choiceTransitionName = _$props2.choiceTransitionName,
            prefixCls = _$props2.prefixCls,
            labelInValue = _$props2.labelInValue,
            maxTagCount = _$props2.maxTagCount;
        var onMultipleSelectorRemove = this.vcTreeSelect.onMultipleSelectorRemove,
            $slots = this.$slots;

        var listeners = getListeners(this);
        // Check if `maxTagCount` is set
        var myValueList = selectorValueList;
        if (maxTagCount >= 0) {
          myValueList = selectorValueList.slice(0, maxTagCount);
        }
        // Selector node list
        var selectedValueNodes = myValueList.map(function (_ref) {
          var label = _ref.label,
              value = _ref.value;
          return h(
            Selection,
            babelHelperVueJsxMergeProps([{
              props: _extends$1({}, _this.$props, {
                label: label,
                value: value
              }),
              on: _extends$1({}, listeners, { remove: onMultipleSelectorRemove })
            }, {
              key: value || TREE_SELECT_EMPTY_VALUE_KEY
            }]),
            [$slots['default']]
          );
        });

        // Rest node count
        if (maxTagCount >= 0 && maxTagCount < selectorValueList.length) {
          var content = '+ ' + (selectorValueList.length - maxTagCount) + ' ...';
          var maxTagPlaceholder = getComponentFromProp(this, 'maxTagPlaceholder', {}, false);
          if (typeof maxTagPlaceholder === 'string') {
            content = maxTagPlaceholder;
          } else if (typeof maxTagPlaceholder === 'function') {
            var restValueList = selectorValueList.slice(maxTagCount);
            content = maxTagPlaceholder(labelInValue ? restValueList : restValueList.map(function (_ref2) {
              var value = _ref2.value;
              return value;
            }));
          }

          var restNodeSelect = h(
            Selection,
            babelHelperVueJsxMergeProps([{
              props: _extends$1({}, this.$props, {
                label: content,
                value: null
              }),
              on: listeners
            }, {
              key: 'rc-tree-select-internal-max-tag-counter'
            }]),
            [$slots['default']]
          );

          selectedValueNodes.push(restNodeSelect);
        }

        selectedValueNodes.push(h(
          'li',
          { 'class': prefixCls + '-search ' + prefixCls + '-search--inline', key: '__input' },
          [h(
            SearchInput,
            {
              props: _extends$1({}, this.$props, {
                needAlign: true
              }),
              on: listeners,
              directives: [{
                name: 'ant-ref',
                value: this.inputRef
              }]
            },
            [$slots['default']]
          )]
        ));
        var className = prefixCls + '-selection__rendered';
        if (choiceTransitionName) {
          var transitionProps = getTransitionProps(choiceTransitionName, {
            tag: 'ul',
            afterLeave: this.onChoiceAnimationLeave
          });
          return h(
            'transition-group',
            babelHelperVueJsxMergeProps([{ 'class': className }, transitionProps]),
            [selectedValueNodes]
          );
        }
        return h(
          'ul',
          { 'class': className, attrs: { role: 'menubar' }
          },
          [selectedValueNodes]
        );
      }
    },

    render: function render() {
      var h = arguments[0];
      var $slots = this.$slots;

      var listeners = getListeners(this);
      return h(
        Selector$1,
        {
          props: _extends$1({}, this.$props, {
            tabIndex: -1,
            showArrow: false,
            renderSelection: this.renderSelection,
            renderPlaceholder: this._renderPlaceholder
          }),
          on: listeners
        },
        [$slots['default']]
      );
    }
  };

  // export const popupContextTypes = {
  //   onPopupKeyDown: PropTypes.func.isRequired,
  //   onTreeNodeSelect: PropTypes.func.isRequired,
  //   onTreeNodeCheck: PropTypes.func.isRequired,
  // }
  function getDerivedState(nextProps, prevState) {
    var _ref = prevState || {},
        _ref$_prevProps = _ref._prevProps,
        prevProps = _ref$_prevProps === undefined ? {} : _ref$_prevProps,
        loadedKeys = _ref._loadedKeys,
        expandedKeyList = _ref._expandedKeyList,
        cachedExpandedKeyList = _ref._cachedExpandedKeyList;

    var valueList = nextProps.valueList,
        valueEntities = nextProps.valueEntities,
        keyEntities = nextProps.keyEntities,
        treeExpandedKeys = nextProps.treeExpandedKeys,
        filteredTreeNodes = nextProps.filteredTreeNodes,
        upperSearchValue = nextProps.upperSearchValue;


    var newState = {
      _prevProps: _extends$1({}, nextProps)
    };

    // Check value update
    if (valueList !== prevProps.valueList) {
      newState._keyList = valueList.map(function (_ref2) {
        var value = _ref2.value;
        return valueEntities[value];
      }).filter(function (entity) {
        return entity;
      }).map(function (_ref3) {
        var key = _ref3.key;
        return key;
      });
    }

    // Show all when tree is in filter mode
    if (!treeExpandedKeys && filteredTreeNodes && filteredTreeNodes.length && filteredTreeNodes !== prevProps.filteredTreeNodes) {
      newState._expandedKeyList = [].concat(_toConsumableArray(keyEntities.keys()));
    }

    // Cache `expandedKeyList` when filter set
    if (upperSearchValue && !prevProps.upperSearchValue) {
      newState._cachedExpandedKeyList = expandedKeyList;
    } else if (!upperSearchValue && prevProps.upperSearchValue && !treeExpandedKeys) {
      newState._expandedKeyList = cachedExpandedKeyList || [];
      newState._cachedExpandedKeyList = [];
    }

    // Use expandedKeys if provided
    if (prevProps.treeExpandedKeys !== treeExpandedKeys) {
      newState._expandedKeyList = treeExpandedKeys;
    }

    // Clean loadedKeys if key not exist in keyEntities anymore
    if (nextProps.loadData) {
      newState._loadedKeys = loadedKeys.filter(function (key) {
        return keyEntities.has(key);
      });
    }

    return newState;
  }
  var BasePopup = {
    mixins: [BaseMixin],
    name: 'BasePopup',
    props: {
      prefixCls: VuePropTypes.string,
      upperSearchValue: VuePropTypes.string,
      valueList: VuePropTypes.array,
      searchHalfCheckedKeys: VuePropTypes.array,
      valueEntities: VuePropTypes.object,
      keyEntities: Map,
      treeIcon: VuePropTypes.bool,
      treeLine: VuePropTypes.bool,
      treeNodeFilterProp: VuePropTypes.string,
      treeCheckable: VuePropTypes.any,
      treeCheckStrictly: VuePropTypes.bool,
      treeDefaultExpandAll: VuePropTypes.bool,
      treeDefaultExpandedKeys: VuePropTypes.array,
      treeExpandedKeys: VuePropTypes.array,
      loadData: VuePropTypes.func,
      multiple: VuePropTypes.bool,
      // onTreeExpand: PropTypes.func,
      searchValue: VuePropTypes.string,
      treeNodes: VuePropTypes.any,
      filteredTreeNodes: VuePropTypes.any,
      notFoundContent: VuePropTypes.any,

      ariaId: VuePropTypes.string,
      switcherIcon: VuePropTypes.any,
      // HOC
      renderSearch: VuePropTypes.func,
      // onTreeExpanded: PropTypes.func,

      __propsSymbol__: VuePropTypes.any
    },
    inject: {
      vcTreeSelect: { 'default': function _default() {
          return {};
        } }
    },
    watch: {
      __propsSymbol__: function __propsSymbol__() {
        var state = getDerivedState(this.$props, this.$data);
        this.setState(state);
      }
    },
    data: function data() {
      this.treeRef = createRef();
      warning_1(this.$props.__propsSymbol__, 'must pass __propsSymbol__');
      var _$props = this.$props,
          treeDefaultExpandAll = _$props.treeDefaultExpandAll,
          treeDefaultExpandedKeys = _$props.treeDefaultExpandedKeys,
          keyEntities = _$props.keyEntities;

      // TODO: make `expandedKeyList` control

      var expandedKeyList = treeDefaultExpandedKeys;
      if (treeDefaultExpandAll) {
        expandedKeyList = [].concat(_toConsumableArray(keyEntities.keys()));
      }

      var state = {
        _keyList: [],
        _expandedKeyList: expandedKeyList,
        // Cache `expandedKeyList` when tree is in filter. This is used in `getDerivedState`
        _cachedExpandedKeyList: [],
        _loadedKeys: [],
        _prevProps: {}
      };
      return _extends$1({}, state, getDerivedState(this.$props, state));
    },

    methods: {
      onTreeExpand: function onTreeExpand(expandedKeyList) {
        var _this = this;

        var treeExpandedKeys = this.$props.treeExpandedKeys;

        // Set uncontrolled state

        if (!treeExpandedKeys) {
          this.setState({ _expandedKeyList: expandedKeyList }, function () {
            _this.__emit('treeExpanded');
          });
        }
        this.__emit('update:treeExpandedKeys', expandedKeyList);
        this.__emit('treeExpand', expandedKeyList);
      },
      onLoad: function onLoad(loadedKeys) {
        this.setState({ _loadedKeys: loadedKeys });
      },
      getTree: function getTree() {
        return this.treeRef.current;
      },


      /**
       * Not pass `loadData` when searching. To avoid loop ajax call makes browser crash.
       */
      getLoadData: function getLoadData() {
        var _$props2 = this.$props,
            loadData = _$props2.loadData,
            upperSearchValue = _$props2.upperSearchValue;

        if (upperSearchValue) return null;
        return loadData;
      },


      /**
       * This method pass to Tree component which is used for add filtered class
       * in TreeNode > li
       */
      filterTreeNode: function filterTreeNode(treeNode) {
        var _$props3 = this.$props,
            upperSearchValue = _$props3.upperSearchValue,
            treeNodeFilterProp = _$props3.treeNodeFilterProp;


        var filterVal = treeNode[treeNodeFilterProp];
        if (typeof filterVal === 'string') {
          return upperSearchValue && filterVal.toUpperCase().indexOf(upperSearchValue) !== -1;
        }

        return false;
      },
      renderNotFound: function renderNotFound() {
        var h = this.$createElement;
        var _$props4 = this.$props,
            prefixCls = _$props4.prefixCls,
            notFoundContent = _$props4.notFoundContent;


        return h(
          'span',
          { 'class': prefixCls + '-not-found' },
          [notFoundContent]
        );
      }
    },

    render: function render() {
      var h = arguments[0];
      var _$data = this.$data,
          keyList = _$data._keyList,
          expandedKeyList = _$data._expandedKeyList,
          loadedKeys = _$data._loadedKeys;
      var _$props5 = this.$props,
          prefixCls = _$props5.prefixCls,
          treeNodes = _$props5.treeNodes,
          filteredTreeNodes = _$props5.filteredTreeNodes,
          treeIcon = _$props5.treeIcon,
          treeLine = _$props5.treeLine,
          treeCheckable = _$props5.treeCheckable,
          treeCheckStrictly = _$props5.treeCheckStrictly,
          multiple = _$props5.multiple,
          ariaId = _$props5.ariaId,
          renderSearch = _$props5.renderSearch,
          switcherIcon = _$props5.switcherIcon,
          searchHalfCheckedKeys = _$props5.searchHalfCheckedKeys;
      var _vcTreeSelect = this.vcTreeSelect,
          onPopupKeyDown = _vcTreeSelect.onPopupKeyDown,
          onTreeNodeSelect = _vcTreeSelect.onTreeNodeSelect,
          onTreeNodeCheck = _vcTreeSelect.onTreeNodeCheck;


      var loadData = this.getLoadData();

      var treeProps = {};

      if (treeCheckable) {
        treeProps.checkedKeys = keyList;
      } else {
        treeProps.selectedKeys = keyList;
      }
      var $notFound = void 0;
      var $treeNodes = void 0;
      if (filteredTreeNodes) {
        if (filteredTreeNodes.length) {
          treeProps.checkStrictly = true;
          $treeNodes = filteredTreeNodes;

          // Fill halfCheckedKeys
          if (treeCheckable && !treeCheckStrictly) {
            treeProps.checkedKeys = {
              checked: keyList,
              halfChecked: searchHalfCheckedKeys
            };
          }
        } else {
          $notFound = this.renderNotFound();
        }
      } else if (!treeNodes || !treeNodes.length) {
        $notFound = this.renderNotFound();
      } else {
        $treeNodes = treeNodes;
      }

      var $tree = void 0;
      if ($notFound) {
        $tree = $notFound;
      } else {
        var treeAllProps = {
          props: _extends$1({
            prefixCls: prefixCls + '-tree',
            showIcon: treeIcon,
            showLine: treeLine,
            selectable: !treeCheckable,
            checkable: treeCheckable,
            checkStrictly: treeCheckStrictly,
            multiple: multiple,
            loadData: loadData,
            loadedKeys: loadedKeys,
            expandedKeys: expandedKeyList,
            filterTreeNode: this.filterTreeNode,
            switcherIcon: switcherIcon
          }, treeProps, {
            __propsSymbol__: Symbol(),
            children: $treeNodes
          }),
          on: {
            select: onTreeNodeSelect,
            check: onTreeNodeCheck,
            expand: this.onTreeExpand,
            load: this.onLoad
          },
          directives: [{
            name: 'ant-ref',
            value: this.treeRef
          }]
        };
        $tree = h(vcTree.Tree, treeAllProps);
      }

      return h(
        'div',
        {
          attrs: { role: 'listbox', id: ariaId, tabIndex: -1 },
          on: {
            'keydown': onPopupKeyDown
          }
        },
        [renderSearch ? renderSearch() : null, $tree]
      );
    }
  };

  var SinglePopup = {
    name: 'SinglePopup',
    props: _extends$1({}, BasePopup.props, SearchInput.props, {
      searchValue: VuePropTypes.string,
      showSearch: VuePropTypes.bool,
      dropdownPrefixCls: VuePropTypes.string,
      disabled: VuePropTypes.bool,
      searchPlaceholder: VuePropTypes.string
    }),
    created: function created() {
      this.inputRef = createRef();
      this.searchRef = createRef();
      this.popupRef = createRef();
    },

    methods: {
      onPlaceholderClick: function onPlaceholderClick() {
        this.inputRef.current.focus();
      },
      getTree: function getTree() {
        return this.popupRef.current && this.popupRef.current.getTree();
      },
      _renderPlaceholder: function _renderPlaceholder() {
        var h = this.$createElement;
        var _$props = this.$props,
            searchPlaceholder = _$props.searchPlaceholder,
            searchValue = _$props.searchValue,
            prefixCls = _$props.prefixCls;


        if (!searchPlaceholder) {
          return null;
        }

        return h(
          'span',
          {
            style: {
              display: searchValue ? 'none' : 'block'
            },
            on: {
              'click': this.onPlaceholderClick
            },

            'class': prefixCls + '-search__field__placeholder'
          },
          [searchPlaceholder]
        );
      },
      _renderSearch: function _renderSearch() {
        var h = this.$createElement;
        var _$props2 = this.$props,
            showSearch = _$props2.showSearch,
            dropdownPrefixCls = _$props2.dropdownPrefixCls;


        if (!showSearch) {
          return null;
        }

        return h(
          'span',
          babelHelperVueJsxMergeProps([{
            'class': dropdownPrefixCls + '-search'
          }, {
            directives: [{
              name: 'ant-ref',
              value: this.searchRef
            }]
          }]),
          [h(SearchInput, {
            props: _extends$1({}, this.$props, { renderPlaceholder: this._renderPlaceholder }),
            on: getListeners(this),
            directives: [{
              name: 'ant-ref',
              value: this.inputRef
            }]
          })]
        );
      }
    },
    render: function render() {
      var h = arguments[0];

      return h(BasePopup, {
        props: _extends$1({}, this.$props, { renderSearch: this._renderSearch, __propsSymbol__: Symbol() }),
        on: getListeners(this),
        directives: [{
          name: 'ant-ref',
          value: this.popupRef
        }]
      });
    }
  };

  /**
   * SelectNode wrapped the tree node.
   * Let's use SelectNode instead of TreeNode
   * since TreeNode is so confuse here.
   */
  var SelectNode = {
    name: 'SelectNode',
    functional: true,
    isTreeNode: true,
    props: vcTree.TreeNode.props,
    render: function render(h, context) {
      var props = context.props,
          slots = context.slots,
          listeners = context.listeners,
          data = context.data,
          scopedSlots = context.scopedSlots;

      var $slots = slots() || {};
      var children = $slots['default'];
      var slotsKey = Object.keys($slots);
      var scopedSlotsTemp = {}; // for vue 2.5.x
      slotsKey.forEach(function (name) {
        scopedSlotsTemp[name] = function () {
          return $slots[name];
        };
      });
      var treeNodeProps = _extends$1({}, data, {
        on: _extends$1({}, listeners, data.nativeOn),
        props: props,
        scopedSlots: _extends$1({}, scopedSlotsTemp, scopedSlots)
      });
      return h(
        vcTree.TreeNode,
        treeNodeProps,
        [children]
      );
    }
  };

  function getWatch$2() {
    var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var watch = {};
    keys.forEach(function (k) {
      watch[k] = function () {
        this.needSyncKeys[k] = true;
      };
    });
    return watch;
  }
  var Select$3 = {
    name: 'Select',
    mixins: [BaseMixin],
    props: initDefaultProps({
      prefixCls: VuePropTypes.string,
      prefixAria: VuePropTypes.string,
      multiple: VuePropTypes.bool,
      showArrow: VuePropTypes.bool,
      open: VuePropTypes.bool,
      value: VuePropTypes.any,

      autoFocus: VuePropTypes.bool,

      defaultOpen: VuePropTypes.bool,
      defaultValue: VuePropTypes.any,

      showSearch: VuePropTypes.bool,
      placeholder: VuePropTypes.any,
      inputValue: VuePropTypes.string, // [Legacy] Deprecated. Use `searchValue` instead.
      searchValue: VuePropTypes.string,
      autoClearSearchValue: VuePropTypes.bool,
      searchPlaceholder: VuePropTypes.any, // [Legacy] Confuse with placeholder
      disabled: VuePropTypes.bool,
      children: VuePropTypes.any,
      labelInValue: VuePropTypes.bool,
      maxTagCount: VuePropTypes.number,
      maxTagPlaceholder: VuePropTypes.oneOfType([VuePropTypes.any, VuePropTypes.func]),
      maxTagTextLength: VuePropTypes.number,
      showCheckedStrategy: VuePropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),
      dropdownClassName: VuePropTypes.string,
      dropdownStyle: VuePropTypes.object,
      dropdownVisibleChange: VuePropTypes.func,
      dropdownMatchSelectWidth: VuePropTypes.bool,
      treeData: VuePropTypes.array,
      treeDataSimpleMode: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.object]),
      treeNodeFilterProp: VuePropTypes.string,
      treeNodeLabelProp: VuePropTypes.string,
      treeCheckable: VuePropTypes.oneOfType([VuePropTypes.any, VuePropTypes.object, VuePropTypes.bool]),
      // treeCheckable: PropTypes.any,
      treeCheckStrictly: VuePropTypes.bool,
      treeIcon: VuePropTypes.bool,
      treeLine: VuePropTypes.bool,
      treeDefaultExpandAll: VuePropTypes.bool,
      treeDefaultExpandedKeys: VuePropTypes.array,
      treeExpandedKeys: VuePropTypes.array,
      loadData: VuePropTypes.func,
      filterTreeNode: VuePropTypes.oneOfType([VuePropTypes.func, VuePropTypes.bool]),

      notFoundContent: VuePropTypes.any,
      getPopupContainer: VuePropTypes.func,

      // onSearch: PropTypes.func,
      // onSelect: PropTypes.func,
      // onDeselect: PropTypes.func,
      // onChange: PropTypes.func,
      // onDropdownVisibleChange: PropTypes.func,

      // onTreeExpand: PropTypes.func,
      allowClear: VuePropTypes.bool,
      transitionName: VuePropTypes.string,
      animation: VuePropTypes.string,
      choiceTransitionName: VuePropTypes.string,
      inputIcon: VuePropTypes.any,
      clearIcon: VuePropTypes.any,
      removeIcon: VuePropTypes.any,
      switcherIcon: VuePropTypes.any,
      __propsSymbol__: VuePropTypes.any
    }, {
      prefixCls: 'rc-tree-select',
      prefixAria: 'rc-tree-select',
      showArrow: true,
      showSearch: true,
      autoClearSearchValue: true,
      showCheckedStrategy: SHOW_CHILD,

      // dropdownMatchSelectWidth change the origin design, set to false now
      // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344
      // ref: https://github.com/react-component/select/pull/71
      treeNodeFilterProp: 'value',
      treeNodeLabelProp: 'title',
      treeIcon: false,
      notFoundContent: 'Not Found',
      dropdownStyle: {},
      dropdownVisibleChange: function dropdownVisibleChange() {
        return true;
      }
    }),

    data: function data() {
      warning_1(this.$props.__propsSymbol__, 'must pass __propsSymbol__');
      var _$props = this.$props,
          prefixAria = _$props.prefixAria,
          defaultOpen = _$props.defaultOpen,
          open = _$props.open;

      this.needSyncKeys = {};
      this.selectorRef = createRef();
      this.selectTriggerRef = createRef();

      // ARIA need `aria-controls` props mapping
      // Since this need user input. Let's generate ourselves
      this.ariaId = generateAriaId(prefixAria + '-list');

      var state = {
        _open: open || defaultOpen,
        _valueList: [],
        _searchHalfCheckedKeys: [],
        _missValueList: [], // Contains the value not in the tree
        _selectorValueList: [], // Used for multiple selector
        _valueEntities: {},
        _posEntities: new Map(),
        _keyEntities: new Map(),
        _searchValue: '',
        _prevProps: {},
        _init: true,
        _focused: undefined,
        _treeNodes: undefined,
        _filteredTreeNodes: undefined
      };
      var newState = this.getDerivedState(this.$props, state);
      return _extends$1({}, state, newState);
    },
    provide: function provide() {
      return {
        vcTreeSelect: {
          onSelectorFocus: this.onSelectorFocus,
          onSelectorBlur: this.onSelectorBlur,
          onSelectorKeyDown: this.onComponentKeyDown,
          onSelectorClear: this.onSelectorClear,
          onMultipleSelectorRemove: this.onMultipleSelectorRemove,

          onTreeNodeSelect: this.onTreeNodeSelect,
          onTreeNodeCheck: this.onTreeNodeCheck,
          onPopupKeyDown: this.onComponentKeyDown,

          onSearchInputChange: this.onSearchInputChange,
          onSearchInputKeyDown: this.onSearchInputKeyDown
        }
      };
    },

    watch: _extends$1({}, getWatch$2(['treeData', 'defaultValue', 'value']), {
      __propsSymbol__: function __propsSymbol__() {
        var state = this.getDerivedState(this.$props, this.$data);
        this.setState(state);
        this.needSyncKeys = {};
      },
      '$data._valueList': function $data_valueList() {
        var _this = this;

        this.$nextTick(function () {
          _this.forcePopupAlign();
        });
      },
      '$data._open': function $data_open(open) {
        var _this2 = this;

        this.$nextTick(function () {
          var prefixCls = _this2.$props.prefixCls;
          var _$data = _this2.$data,
              selectorValueList = _$data._selectorValueList,
              valueEntities = _$data._valueEntities;

          var isMultiple = _this2.isMultiple();

          // Scroll to value position, only need sync on single mode
          if (!isMultiple && selectorValueList.length && open && _this2.popup) {
            var value = selectorValueList[0].value;

            var _popup$getTree = _this2.popup.getTree(),
                domTreeNodes = _popup$getTree.domTreeNodes;

            var _ref = valueEntities[value] || {},
                key = _ref.key;

            var treeNode = domTreeNodes[key];

            if (treeNode) {
              var domNode = treeNode.$el;
              raf_1(function () {
                var popupNode = _this2.popup.$el;
                var triggerContainer = findPopupContainer(popupNode, prefixCls + '-dropdown');
                var searchNode = _this2.popup.searchRef.current;

                if (domNode && triggerContainer && searchNode) {
                  scrollIntoView(domNode, triggerContainer, {
                    onlyScrollIfNeeded: true,
                    offsetTop: searchNode.offsetHeight
                  });
                }
              });
            }
          }
        });
      }
    }),
    mounted: function mounted() {
      var _this3 = this;

      this.$nextTick(function () {
        var _$props2 = _this3.$props,
            autoFocus = _$props2.autoFocus,
            disabled = _$props2.disabled;

        if (autoFocus && !disabled) {
          _this3.focus();
        }
      });
    },


    methods: {
      getDerivedState: function getDerivedState(nextProps, prevState) {
        var h = this.$createElement;
        var _prevState$_prevProps = prevState._prevProps,
            prevProps = _prevState$_prevProps === undefined ? {} : _prevState$_prevProps;
        var treeCheckable = nextProps.treeCheckable,
            treeCheckStrictly = nextProps.treeCheckStrictly,
            filterTreeNode = nextProps.filterTreeNode,
            treeNodeFilterProp = nextProps.treeNodeFilterProp,
            treeDataSimpleMode = nextProps.treeDataSimpleMode;

        var newState = {
          _prevProps: _extends$1({}, nextProps),
          _init: false
        };
        var self = this;
        // Process the state when props updated
        function processState(propName, updater) {
          if (prevProps[propName] !== nextProps[propName] || self.needSyncKeys[propName]) {
            updater(nextProps[propName], prevProps[propName]);
            return true;
          }
          return false;
        }

        var valueRefresh = false;

        // Open
        processState('open', function (propValue) {
          newState._open = propValue;
        });

        // Tree Nodes
        var treeNodes = void 0;
        var treeDataChanged = false;
        var treeDataModeChanged = false;
        processState('treeData', function (propValue) {
          treeNodes = convertDataToTree$1(h, propValue);
          treeDataChanged = true;
        });

        processState('treeDataSimpleMode', function (propValue, prevValue) {
          if (!propValue) return;

          var prev = !prevValue || prevValue === true ? {} : prevValue;

          // Shallow equal to avoid dynamic prop object
          if (!shallowequal(propValue, prev)) {
            treeDataModeChanged = true;
          }
        });

        // Parse by `treeDataSimpleMode`
        if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {
          var simpleMapper = _extends$1({
            id: 'id',
            pId: 'pId',
            rootPId: null
          }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});
          treeNodes = convertDataToTree$1(h, parseSimpleTreeData(nextProps.treeData, simpleMapper));
        }

        // If `treeData` not provide, use children TreeNodes
        if (!nextProps.treeData) {
          // processState('children', (propValue) => {
          //   treeNodes = Array.isArray(propValue) ? propValue : [propValue]
          // })
          treeNodes = filterEmpty(this.$slots['default']);
        }

        // Convert `treeData` to entities
        if (treeNodes) {
          var entitiesMap = convertTreeToEntities$1(treeNodes);
          newState._treeNodes = treeNodes;
          newState._posEntities = entitiesMap.posEntities;
          newState._valueEntities = entitiesMap.valueEntities;
          newState._keyEntities = entitiesMap.keyEntities;

          valueRefresh = true;
        }

        // Value List
        if (prevState._init) {
          processState('defaultValue', function (propValue) {
            newState._valueList = formatInternalValue(propValue, nextProps);
            valueRefresh = true;
          });
        }

        processState('value', function (propValue) {
          newState._valueList = formatInternalValue(propValue, nextProps);
          valueRefresh = true;
        });

        // Selector Value List
        if (valueRefresh) {
          // Find out that value not exist in the tree
          var missValueList = [];
          var filteredValueList = [];
          var keyList = [];

          // Get latest value list
          var latestValueList = newState._valueList;
          if (!latestValueList) {
            // Also need add prev missValueList to avoid new treeNodes contains the value
            latestValueList = [].concat(_toConsumableArray(prevState._valueList), _toConsumableArray(prevState._missValueList));
          }

          // Get key by value
          var valueLabels = {};
          latestValueList.forEach(function (wrapperValue) {
            var value = wrapperValue.value,
                label = wrapperValue.label;

            var entity = (newState._valueEntities || prevState._valueEntities)[value];
            valueLabels[value] = label;

            if (entity) {
              keyList.push(entity.key);
              filteredValueList.push(wrapperValue);
              return;
            }

            // If not match, it may caused by ajax load. We need keep this
            missValueList.push(wrapperValue);
          });

          // We need calculate the value when tree is checked tree
          if (treeCheckable && !treeCheckStrictly) {
            // Calculate the keys need to be checked
            var _conductCheck = conductCheck$1(keyList, true, newState._keyEntities || prevState._keyEntities),
                checkedKeys = _conductCheck.checkedKeys;

            // Format value list again for internal usage


            newState._valueList = checkedKeys.map(function (key) {
              var val = (newState._keyEntities || prevState._keyEntities).get(key).value;

              var wrappedValue = {
                value: val
              };

              if (valueLabels[val] !== undefined) {
                wrappedValue.label = valueLabels[val];
              }

              return wrappedValue;
            });
          } else {
            newState._valueList = filteredValueList;
          }

          // Fill the missValueList, we still need display in the selector
          newState._missValueList = missValueList;

          // Calculate the value list for `Selector` usage
          newState._selectorValueList = formatSelectorValue(newState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);
        }

        // [Legacy] To align with `Select` component,
        // We use `searchValue` instead of `inputValue` but still keep the api
        // `inputValue` support `null` to work as `autoClearSearchValue`
        processState('inputValue', function (propValue) {
          if (propValue !== null) {
            newState._searchValue = propValue;
          }
        });

        // Search value
        processState('searchValue', function (propValue) {
          newState._searchValue = propValue;
        });

        // Do the search logic
        if (newState._searchValue !== undefined || prevState._searchValue && treeNodes) {
          var searchValue = newState._searchValue !== undefined ? newState._searchValue : prevState._searchValue;
          var upperSearchValue = String(searchValue).toUpperCase();

          var filterTreeNodeFn = filterTreeNode;
          if (filterTreeNode === false) {
            // Don't filter if is false
            filterTreeNodeFn = function filterTreeNodeFn() {
              return true;
            };
          } else if (typeof filterTreeNodeFn !== 'function') {
            // When is not function (true or undefined), use inner filter
            filterTreeNodeFn = function filterTreeNodeFn(_, node) {
              var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();
              return nodeValue.indexOf(upperSearchValue) !== -1;
            };
          }

          newState._filteredTreeNodes = getFilterTree(this.$createElement, newState._treeNodes || prevState._treeNodes, searchValue, filterTreeNodeFn, newState._valueEntities || prevState._valueEntities, SelectNode);
        }

        // We should re-calculate the halfCheckedKeys when in search mode
        if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState._searchValue || prevState._searchValue)) {
          newState._searchHalfCheckedKeys = getHalfCheckedKeys(newState._valueList, newState._valueEntities || prevState._valueEntities);
        }

        // Checked Strategy
        processState('showCheckedStrategy', function () {
          newState._selectorValueList = newState._selectorValueList || formatSelectorValue(newState._valueList || prevState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);
        });

        return newState;
      },

      // ==================== Selector ====================
      onSelectorFocus: function onSelectorFocus() {
        this.setState({ _focused: true });
      },
      onSelectorBlur: function onSelectorBlur() {
        this.setState({ _focused: false });

        // TODO: Close when Popup is also not focused
        // this.setState({ open: false });
      },


      // Handle key board event in both Selector and Popup
      onComponentKeyDown: function onComponentKeyDown(event) {
        var open = this.$data._open;
        var keyCode = event.keyCode;


        if (!open) {
          if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {
            this.setOpenState(true);
          }
        } else if (KeyCode.ESC === keyCode) {
          this.setOpenState(false);
        } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {
          // TODO: Handle `open` state
          event.stopPropagation();
        }
      },
      onDeselect: function onDeselect(wrappedValue, node, nodeEventInfo) {
        this.__emit('deselect', wrappedValue, node, nodeEventInfo);
      },
      onSelectorClear: function onSelectorClear(event) {
        var disabled = this.$props.disabled;

        if (disabled) return;

        this.triggerChange([], []);

        if (!this.isSearchValueControlled()) {
          this.setUncontrolledState({
            _searchValue: '',
            _filteredTreeNodes: null
          });
        }

        event.stopPropagation();
      },
      onMultipleSelectorRemove: function onMultipleSelectorRemove(event, removeValue) {
        event.stopPropagation();

        var _$data2 = this.$data,
            valueList = _$data2._valueList,
            missValueList = _$data2._missValueList,
            valueEntities = _$data2._valueEntities;
        var _$props3 = this.$props,
            treeCheckable = _$props3.treeCheckable,
            treeCheckStrictly = _$props3.treeCheckStrictly,
            treeNodeLabelProp = _$props3.treeNodeLabelProp,
            disabled = _$props3.disabled;

        if (disabled) return;

        // Find trigger entity
        var triggerEntity = valueEntities[removeValue];

        // Clean up value
        var newValueList = valueList;
        if (triggerEntity) {
          // If value is in tree
          if (treeCheckable && !treeCheckStrictly) {
            newValueList = valueList.filter(function (_ref2) {
              var value = _ref2.value;

              var entity = valueEntities[value];
              return !isPosRelated(entity.pos, triggerEntity.pos);
            });
          } else {
            newValueList = valueList.filter(function (_ref3) {
              var value = _ref3.value;
              return value !== removeValue;
            });
          }
        }

        var triggerNode = triggerEntity ? triggerEntity.node : null;

        var extraInfo = {
          triggerValue: removeValue,
          triggerNode: triggerNode
        };
        var deselectInfo = {
          node: triggerNode
        };

        // [Legacy] Little hack on this to make same action as `onCheck` event.
        if (treeCheckable) {
          var filteredEntityList = newValueList.map(function (_ref4) {
            var value = _ref4.value;
            return valueEntities[value];
          });

          deselectInfo.event = 'check';
          deselectInfo.checked = false;
          deselectInfo.checkedNodes = filteredEntityList.map(function (_ref5) {
            var node = _ref5.node;
            return node;
          });
          deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref6) {
            var node = _ref6.node,
                pos = _ref6.pos;
            return {
              node: node,
              pos: pos
            };
          });

          if (treeCheckStrictly) {
            extraInfo.allCheckedNodes = deselectInfo.checkedNodes;
          } else {
            // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.
            extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref7) {
              var node = _ref7.node;
              return node;
            });
          }
        } else {
          deselectInfo.event = 'select';
          deselectInfo.selected = false;
          deselectInfo.selectedNodes = newValueList.map(function (_ref8) {
            var value = _ref8.value;
            return (valueEntities[value] || {}).node;
          });
        }

        // Some value user pass prop is not in the tree, we also need clean it
        var newMissValueList = missValueList.filter(function (_ref9) {
          var value = _ref9.value;
          return value !== removeValue;
        });
        var wrappedValue = void 0;
        if (this.isLabelInValue()) {
          wrappedValue = {
            label: triggerNode ? getPropsData(triggerNode)[treeNodeLabelProp] : null,
            value: removeValue
          };
        } else {
          wrappedValue = removeValue;
        }

        this.onDeselect(wrappedValue, triggerNode, deselectInfo);

        this.triggerChange(newMissValueList, newValueList, extraInfo);
      },


      // ===================== Popup ======================
      onValueTrigger: function onValueTrigger(isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {
        var node = nodeEventInfo.node;
        var value = node.$props.value;
        var _$data3 = this.$data,
            missValueList = _$data3._missValueList,
            valueEntities = _$data3._valueEntities,
            keyEntities = _$data3._keyEntities,
            searchValue = _$data3._searchValue;
        var _$props4 = this.$props,
            disabled = _$props4.disabled,
            inputValue = _$props4.inputValue,
            treeNodeLabelProp = _$props4.treeNodeLabelProp,
            multiple = _$props4.multiple,
            treeCheckable = _$props4.treeCheckable,
            treeCheckStrictly = _$props4.treeCheckStrictly,
            autoClearSearchValue = _$props4.autoClearSearchValue;

        var label = node.$props[treeNodeLabelProp];

        if (disabled) return;

        // Wrap the return value for user
        var wrappedValue = void 0;
        if (this.isLabelInValue()) {
          wrappedValue = {
            value: value,
            label: label
          };
        } else {
          wrappedValue = value;
        }

        // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.
        if (isAdd) {
          this.__emit('select', wrappedValue, node, nodeEventInfo);
        } else {
          this.__emit('deselect', wrappedValue, node, nodeEventInfo);
        }

        // Get wrapped value list.
        // This is a bit hack cause we use key to match the value.
        var newValueList = nodeList.map(function (node) {
          var props = getPropsData(node);
          return {
            value: props.value,
            label: props[treeNodeLabelProp]
          };
        });

        // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.
        // We need calculate the missing nodes.
        if (treeCheckable && !treeCheckStrictly) {
          var keyList = newValueList.map(function (_ref10) {
            var val = _ref10.value;
            return valueEntities[val].key;
          });
          if (isAdd) {
            keyList = conductCheck$1(keyList, true, keyEntities).checkedKeys;
          } else {
            keyList = conductCheck$1([valueEntities[value].key], false, keyEntities, {
              checkedKeys: keyList
            }).checkedKeys;
          }
          newValueList = keyList.map(function (key) {
            var props = getPropsData(keyEntities.get(key).node);
            return {
              value: props.value,
              label: props[treeNodeLabelProp]
            };
          });
        }

        // Clean up `searchValue` when this prop is set
        if (autoClearSearchValue || inputValue === null) {
          // Clean state `searchValue` if uncontrolled
          if (!this.isSearchValueControlled() && (multiple || treeCheckable)) {
            this.setUncontrolledState({
              _searchValue: '',
              _filteredTreeNodes: null
            });
          }

          // Trigger onSearch if `searchValue` to be empty.
          // We should also trigger onSearch with empty string here
          // since if user use `treeExpandedKeys`, it need user have the ability to reset it.
          if (searchValue && searchValue.length) {
            this.__emit('update:searchValue', '');
            this.__emit('search', '');
          }
        }

        // [Legacy] Provide extra info
        var extraInfo = _extends$1({}, nodeExtraInfo, {
          triggerValue: value,
          triggerNode: node
        });

        this.triggerChange(missValueList, newValueList, extraInfo);
      },
      onTreeNodeSelect: function onTreeNodeSelect(_, nodeEventInfo) {
        var _$data4 = this.$data,
            valueList = _$data4._valueList,
            valueEntities = _$data4._valueEntities;
        var _$props5 = this.$props,
            treeCheckable = _$props5.treeCheckable,
            multiple = _$props5.multiple;

        if (treeCheckable) return;

        if (!multiple) {
          this.setOpenState(false);
        }

        var isAdd = nodeEventInfo.selected;
        var selectedValue = nodeEventInfo.node.$props.value;


        var newValueList = void 0;

        if (!multiple) {
          newValueList = [{ value: selectedValue }];
        } else {
          newValueList = valueList.filter(function (_ref11) {
            var value = _ref11.value;
            return value !== selectedValue;
          });
          if (isAdd) {
            newValueList.push({ value: selectedValue });
          }
        }

        var selectedNodes = newValueList.map(function (_ref12) {
          var value = _ref12.value;
          return valueEntities[value];
        }).filter(function (entity) {
          return entity;
        }).map(function (_ref13) {
          var node = _ref13.node;
          return node;
        });

        this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, { selected: isAdd });
      },
      onTreeNodeCheck: function onTreeNodeCheck(_, nodeEventInfo) {
        var _$data5 = this.$data,
            searchValue = _$data5._searchValue,
            keyEntities = _$data5._keyEntities,
            valueEntities = _$data5._valueEntities,
            valueList = _$data5._valueList;
        var treeCheckStrictly = this.$props.treeCheckStrictly;
        var checkedNodes = nodeEventInfo.checkedNodes,
            checkedNodesPositions = nodeEventInfo.checkedNodesPositions;

        var isAdd = nodeEventInfo.checked;

        var extraInfo = {
          checked: isAdd
        };

        var checkedNodeList = checkedNodes;

        // [Legacy] Check event provide `allCheckedNodes`.
        // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:
        // - Related: Show the top checked nodes and has children prop.
        // - Unrelated: Show all the checked nodes.
        if (searchValue) {
          var oriKeyList = valueList.map(function (_ref14) {
            var value = _ref14.value;
            return valueEntities[value];
          }).filter(function (entity) {
            return entity;
          }).map(function (_ref15) {
            var key = _ref15.key;
            return key;
          });

          var keyList = void 0;
          if (isAdd) {
            keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (node) {
              var _getPropsData = getPropsData(node),
                  value = _getPropsData.value;

              return valueEntities[value].key;
            })))));
          } else {
            keyList = conductCheck$1([getPropsData(nodeEventInfo.node).eventKey], false, keyEntities, {
              checkedKeys: oriKeyList
            }).checkedKeys;
          }

          checkedNodeList = keyList.map(function (key) {
            return keyEntities.get(key).node;
          });

          // Let's follow as not `treeCheckStrictly` format
          extraInfo.allCheckedNodes = keyList.map(function (key) {
            return cleanEntity(keyEntities.get(key));
          });
        } else if (treeCheckStrictly) {
          extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;
        } else {
          extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);
        }

        this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);
      },


      // ==================== Trigger =====================

      onDropdownVisibleChange: function onDropdownVisibleChange(open) {
        var _$props6 = this.$props,
            multiple = _$props6.multiple,
            treeCheckable = _$props6.treeCheckable;
        var _searchValue = this.$data._searchValue;

        // When set open success and single mode,
        // we will reset the input content.

        if (open && !multiple && !treeCheckable && _searchValue) {
          this.setUncontrolledState({
            _searchValue: '',
            _filteredTreeNodes: null
          });
        }
        this.setOpenState(open, true);
      },
      onSearchInputChange: function onSearchInputChange(event) {
        var value = event.target.value;
        var _$data6 = this.$data,
            treeNodes = _$data6._treeNodes,
            valueEntities = _$data6._valueEntities;
        var _$props7 = this.$props,
            filterTreeNode = _$props7.filterTreeNode,
            treeNodeFilterProp = _$props7.treeNodeFilterProp;

        this.__emit('update:searchValue', value);
        this.__emit('search', value);

        var isSet = false;

        if (!this.isSearchValueControlled()) {
          isSet = this.setUncontrolledState({
            _searchValue: value
          });
          this.setOpenState(true);
        }

        if (isSet) {
          // Do the search logic
          var upperSearchValue = String(value).toUpperCase();

          var filterTreeNodeFn = filterTreeNode;
          if (filterTreeNode === false) {
            filterTreeNodeFn = function filterTreeNodeFn() {
              return true;
            };
          } else if (!filterTreeNodeFn) {
            filterTreeNodeFn = function filterTreeNodeFn(_, node) {
              var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();
              return nodeValue.indexOf(upperSearchValue) !== -1;
            };
          }

          this.setState({
            _filteredTreeNodes: getFilterTree(this.$createElement, treeNodes, value, filterTreeNodeFn, valueEntities, SelectNode)
          });
        }
      },
      onSearchInputKeyDown: function onSearchInputKeyDown(event) {
        var _$data7 = this.$data,
            searchValue = _$data7._searchValue,
            valueList = _$data7._valueList;
        var keyCode = event.keyCode;


        if (KeyCode.BACKSPACE === keyCode && this.isMultiple() && !searchValue && valueList.length) {
          var lastValue = valueList[valueList.length - 1].value;
          this.onMultipleSelectorRemove(event, lastValue);
        }
      },
      onChoiceAnimationLeave: function onChoiceAnimationLeave() {
        var _this4 = this;

        raf_1(function () {
          _this4.forcePopupAlign();
        });
      },
      setPopupRef: function setPopupRef(popup) {
        this.popup = popup;
      },


      /**
       * Only update the value which is not in props
       */
      setUncontrolledState: function setUncontrolledState(state) {
        var needSync = false;
        var newState = {};
        var props = getOptionProps(this);
        Object.keys(state).forEach(function (name) {
          if (name.slice(1) in props) return;

          needSync = true;
          newState[name] = state[name];
        });

        if (needSync) {
          this.setState(newState);
        }

        return needSync;
      },


      // [Legacy] Origin provide `documentClickClose` which triggered by `Trigger`
      // Currently `TreeSelect` align the hide popup logic as `Select` which blur to hide.
      // `documentClickClose` is not accurate anymore. Let's just keep the key word.
      setOpenState: function setOpenState(open) {
        var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var dropdownVisibleChange = this.$props.dropdownVisibleChange;


        if (dropdownVisibleChange && dropdownVisibleChange(open, { documentClickClose: !open && byTrigger }) === false) {
          return;
        }

        this.setUncontrolledState({ _open: open });
      },


      // Tree checkable is also a multiple case
      isMultiple: function isMultiple() {
        var _$props8 = this.$props,
            multiple = _$props8.multiple,
            treeCheckable = _$props8.treeCheckable;

        return !!(multiple || treeCheckable);
      },
      isLabelInValue: function isLabelInValue$1() {
        return isLabelInValue(this.$props);
      },


      // [Legacy] To align with `Select` component,
      // We use `searchValue` instead of `inputValue`
      // but currently still need support that.
      // Add this method the check if is controlled
      isSearchValueControlled: function isSearchValueControlled() {
        var props = getOptionProps(this);
        var inputValue = props.inputValue;

        if ('searchValue' in props) return true;
        return 'inputValue' in props && inputValue !== null;
      },
      forcePopupAlign: function forcePopupAlign() {
        var $trigger = this.selectTriggerRef.current;
        if ($trigger) {
          $trigger.forcePopupAlign();
        }
      },
      delayForcePopupAlign: function delayForcePopupAlign() {
        var _this5 = this;

        // Wait 2 frame to avoid dom update & dom algin in the same time
        // https://github.com/ant-design/ant-design/issues/12031
        raf_1(function () {
          raf_1(_this5.forcePopupAlign);
        });
      },


      /**
       * 1. Update state valueList.
       * 2. Fire `onChange` event to user.
       */
      triggerChange: function triggerChange(missValueList, valueList) {
        var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var _$data8 = this.$data,
            valueEntities = _$data8._valueEntities,
            searchValue = _$data8._searchValue,
            prevSelectorValueList = _$data8._selectorValueList;

        var props = getOptionProps(this);
        var disabled = props.disabled,
            treeCheckable = props.treeCheckable,
            treeCheckStrictly = props.treeCheckStrictly;

        if (disabled) return;

        // Trigger
        var extra = _extends$1({
          // [Legacy] Always return as array contains label & value
          preValue: prevSelectorValueList.map(function (_ref16) {
            var label = _ref16.label,
                value = _ref16.value;
            return { label: label, value: value };
          })
        }, extraInfo);

        // Format value by `treeCheckStrictly`
        var selectorValueList = formatSelectorValue(valueList, props, valueEntities);

        if (!('value' in props)) {
          var newState = {
            _missValueList: missValueList,
            _valueList: valueList,
            _selectorValueList: selectorValueList
          };

          if (searchValue && treeCheckable && !treeCheckStrictly) {
            newState._searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);
          }

          this.setState(newState);
        }

        // Only do the logic when `onChange` function provided
        if (getListeners(this).change) {
          var connectValueList = void 0;

          // Get value by mode
          if (this.isMultiple()) {
            connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));
          } else {
            connectValueList = selectorValueList.slice(0, 1);
          }

          var labelList = null;
          var returnValue = void 0;

          if (this.isLabelInValue()) {
            returnValue = connectValueList.map(function (_ref17) {
              var label = _ref17.label,
                  value = _ref17.value;
              return { label: label, value: value };
            });
          } else {
            labelList = [];
            returnValue = connectValueList.map(function (_ref18) {
              var label = _ref18.label,
                  value = _ref18.value;

              labelList.push(label);
              return value;
            });
          }

          if (!this.isMultiple()) {
            returnValue = returnValue[0];
          }
          this.__emit('change', returnValue, labelList, extra);
        }
      },
      focus: function focus() {
        this.selectorRef.current.focus();
      },
      blur: function blur() {
        this.selectorRef.current.blur();
      }
    },

    // ===================== Render =====================

    render: function render() {
      var h = arguments[0];
      var _$data9 = this.$data,
          valueList = _$data9._valueList,
          missValueList = _$data9._missValueList,
          selectorValueList = _$data9._selectorValueList,
          searchHalfCheckedKeys = _$data9._searchHalfCheckedKeys,
          valueEntities = _$data9._valueEntities,
          keyEntities = _$data9._keyEntities,
          searchValue = _$data9._searchValue,
          open = _$data9._open,
          focused = _$data9._focused,
          treeNodes = _$data9._treeNodes,
          filteredTreeNodes = _$data9._filteredTreeNodes;

      var props = getOptionProps(this);
      var prefixCls = props.prefixCls,
          treeExpandedKeys = props.treeExpandedKeys;

      var isMultiple = this.isMultiple();

      var passProps = {
        props: _extends$1({}, props, {
          isMultiple: isMultiple,
          valueList: valueList,
          searchHalfCheckedKeys: searchHalfCheckedKeys,
          selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),
          valueEntities: valueEntities,
          keyEntities: keyEntities,
          searchValue: searchValue,
          upperSearchValue: (searchValue || '').toUpperCase(), // Perf save
          open: open,
          focused: focused,
          dropdownPrefixCls: prefixCls + '-dropdown',
          ariaId: this.ariaId
        }),
        on: _extends$1({}, getListeners(this), {
          choiceAnimationLeave: this.onChoiceAnimationLeave
        }),
        scopedSlots: this.$scopedSlots
      };
      var popupProps = mergeProps(passProps, {
        props: {
          treeNodes: treeNodes,
          filteredTreeNodes: filteredTreeNodes,
          // Tree expanded control
          treeExpandedKeys: treeExpandedKeys,
          __propsSymbol__: Symbol()
        },
        on: {
          treeExpanded: this.delayForcePopupAlign
        },
        directives: [{
          name: 'ant-ref',
          value: this.setPopupRef
        }]
      });

      var Popup = isMultiple ? BasePopup : SinglePopup;
      var $popup = h(Popup, popupProps);

      var Selector = isMultiple ? MultipleSelector : SingleSelector;
      var $selector = h(Selector, babelHelperVueJsxMergeProps([passProps, {
        directives: [{
          name: 'ant-ref',
          value: this.selectorRef
        }]
      }]));
      var selectTriggerProps = mergeProps(passProps, {
        props: {
          popupElement: $popup,
          dropdownVisibleChange: this.onDropdownVisibleChange
        },
        directives: [{
          name: 'ant-ref',
          value: this.selectTriggerRef
        }]
      });
      return h(
        SelectTrigger$1,
        selectTriggerProps,
        [$selector]
      );
    }
  };

  Select$3.TreeNode = SelectNode;
  Select$3.SHOW_ALL = SHOW_ALL;
  Select$3.SHOW_PARENT = SHOW_PARENT;
  Select$3.SHOW_CHILD = SHOW_CHILD;

  // Let warning show correct component name
  Select$3.name = 'TreeSelect';

  var TreeNode$1 = SelectNode;

  // export this package's api

  Vue.use(ref$1, { name: 'ant-ref' });

  var TreeData = VuePropTypes.shape({
    key: VuePropTypes.string,
    value: VuePropTypes.string,
    label: VuePropTypes.any,
    scopedSlots: VuePropTypes.object,
    children: VuePropTypes.array
  }).loose;

  var TreeSelectProps = function TreeSelectProps() {
    return _extends$1({}, AbstractSelectProps(), {
      autoFocus: VuePropTypes.bool,
      dropdownStyle: VuePropTypes.object,
      filterTreeNode: VuePropTypes.oneOfType([Function, Boolean]),
      getPopupContainer: VuePropTypes.func,
      labelInValue: VuePropTypes.bool,
      loadData: VuePropTypes.func,
      maxTagCount: VuePropTypes.number,
      maxTagPlaceholder: VuePropTypes.any,
      value: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.object, VuePropTypes.array, VuePropTypes.number]),
      defaultValue: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.object, VuePropTypes.array, VuePropTypes.number]),
      multiple: VuePropTypes.bool,
      notFoundContent: VuePropTypes.any,
      // onSelect: (value: any) => void,
      // onChange: (value: any, label: any) => void,
      // onSearch: (value: any) => void,
      searchPlaceholder: VuePropTypes.string,
      searchValue: VuePropTypes.string,
      showCheckedStrategy: VuePropTypes.oneOf(['SHOW_ALL', 'SHOW_PARENT', 'SHOW_CHILD']),
      suffixIcon: VuePropTypes.any,
      treeCheckable: VuePropTypes.oneOfType([VuePropTypes.any, VuePropTypes.bool]),
      treeCheckStrictly: VuePropTypes.bool,
      treeData: VuePropTypes.arrayOf(Object),
      treeDataSimpleMode: VuePropTypes.oneOfType([Boolean, Object]),

      dropdownClassName: VuePropTypes.string,
      dropdownMatchSelectWidth: VuePropTypes.bool,
      treeDefaultExpandAll: VuePropTypes.bool,
      treeExpandedKeys: VuePropTypes.array,
      treeIcon: VuePropTypes.bool,
      treeDefaultExpandedKeys: VuePropTypes.array,
      treeNodeFilterProp: VuePropTypes.string,
      treeNodeLabelProp: VuePropTypes.string,
      replaceFields: VuePropTypes.object.def({})
    });
  };

  var TreeSelect = {
    TreeNode: _extends$1({}, TreeNode$1, { name: 'ATreeSelectNode' }),
    SHOW_ALL: SHOW_ALL,
    SHOW_PARENT: SHOW_PARENT,
    SHOW_CHILD: SHOW_CHILD,
    name: 'ATreeSelect',
    props: initDefaultProps(TreeSelectProps(), {
      transitionName: 'slide-up',
      choiceTransitionName: 'zoom',
      showSearch: false
    }),
    model: {
      prop: 'value',
      event: 'change'
    },
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    created: function created() {
      warning$1(this.multiple !== false || !this.treeCheckable, 'TreeSelect', '`multiple` will alway be `true` when `treeCheckable` is true');
    },

    methods: {
      focus: function focus() {
        this.$refs.vcTreeSelect.focus();
      },
      blur: function blur() {
        this.$refs.vcTreeSelect.blur();
      },
      renderSwitcherIcon: function renderSwitcherIcon(prefixCls, _ref) {
        var isLeaf = _ref.isLeaf,
            loading = _ref.loading;
        var h = this.$createElement;

        if (loading) {
          return h(Icon$1, {
            attrs: { type: 'loading' },
            'class': prefixCls + '-switcher-loading-icon' });
        }
        if (isLeaf) {
          return null;
        }
        return h(Icon$1, {
          attrs: { type: 'caret-down' },
          'class': prefixCls + '-switcher-icon' });
      },
      onChange: function onChange() {
        this.$emit.apply(this, ['change'].concat(Array.prototype.slice.call(arguments)));
      },
      updateTreeData: function updateTreeData(treeData) {
        var _this = this;

        var $scopedSlots = this.$scopedSlots;

        var defaultFields = {
          children: 'children',
          title: 'title',
          key: 'key',
          label: 'label',
          value: 'value'
        };
        var replaceFields = _extends$1({}, defaultFields, this.$props.replaceFields);
        return treeData.map(function (item) {
          var _item$scopedSlots = item.scopedSlots,
              scopedSlots = _item$scopedSlots === undefined ? {} : _item$scopedSlots;

          var label = item[replaceFields.label];
          var title = item[replaceFields.title];
          var value = item[replaceFields.value];
          var key = item[replaceFields.key];
          var children = item[replaceFields.children];
          var newLabel = typeof label === 'function' ? label(_this.$createElement) : label;
          var newTitle = typeof title === 'function' ? title(_this.$createElement) : title;
          if (!newLabel && scopedSlots.label && $scopedSlots[scopedSlots.label]) {
            newLabel = $scopedSlots[scopedSlots.label](item);
          }
          if (!newTitle && scopedSlots.title && $scopedSlots[scopedSlots.title]) {
            newTitle = $scopedSlots[scopedSlots.title](item);
          }
          var treeNodeProps = _extends$1({}, item, {
            title: newTitle || newLabel,
            value: value,
            dataRef: item,
            key: key
          });
          if (children) {
            return _extends$1({}, treeNodeProps, { children: _this.updateTreeData(children) });
          }
          return treeNodeProps;
        });
      }
    },

    render: function render(h) {
      var _cls,
          _this2 = this;

      var props = getOptionProps(this);

      var customizePrefixCls = props.prefixCls,
          size = props.size,
          dropdownStyle = props.dropdownStyle,
          dropdownClassName = props.dropdownClassName,
          getPopupContainer = props.getPopupContainer,
          restProps = _objectWithoutProperties(props, ['prefixCls', 'size', 'dropdownStyle', 'dropdownClassName', 'getPopupContainer']);

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('select', customizePrefixCls);

      var renderEmpty = this.configProvider.renderEmpty;
      var notFoundContent = getComponentFromProp(this, 'notFoundContent');
      var removeIcon = getComponentFromProp(this, 'removeIcon');
      var clearIcon = getComponentFromProp(this, 'clearIcon');
      var getContextPopupContainer = this.configProvider.getPopupContainer;

      var rest = omit(restProps, ['inputIcon', 'removeIcon', 'clearIcon', 'switcherIcon', 'suffixIcon']);
      var suffixIcon = getComponentFromProp(this, 'suffixIcon');
      suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
      var treeData = props.treeData;
      if (treeData) {
        treeData = this.updateTreeData(treeData);
      }
      var cls = (_cls = {}, _defineProperty(_cls, prefixCls + '-lg', size === 'large'), _defineProperty(_cls, prefixCls + '-sm', size === 'small'), _cls);

      // showSearch: single - false, multiple - true
      var showSearch = restProps.showSearch;

      if (!('showSearch' in restProps)) {
        showSearch = !!(restProps.multiple || restProps.treeCheckable);
      }

      var checkable = getComponentFromProp(this, 'treeCheckable');
      if (checkable) {
        checkable = h('span', { 'class': prefixCls + '-tree-checkbox-inner' });
      }

      var inputIcon = suffixIcon || h(Icon$1, {
        attrs: { type: 'down' },
        'class': prefixCls + '-arrow-icon' });

      var finalRemoveIcon = removeIcon || h(Icon$1, {
        attrs: { type: 'close' },
        'class': prefixCls + '-remove-icon' });

      var finalClearIcon = clearIcon || h(Icon$1, {
        attrs: { type: 'close-circle', theme: 'filled' },
        'class': prefixCls + '-clear-icon' });
      var VcTreeSelectProps = {
        props: _extends$1(_extends$1({
          switcherIcon: function switcherIcon(nodeProps) {
            return _this2.renderSwitcherIcon(prefixCls, nodeProps);
          },
          inputIcon: inputIcon,
          removeIcon: finalRemoveIcon,
          clearIcon: finalClearIcon
        }, rest, {
          showSearch: showSearch,
          getPopupContainer: getPopupContainer || getContextPopupContainer,
          dropdownClassName: classnames(dropdownClassName, prefixCls + '-tree-dropdown'),
          prefixCls: prefixCls,
          dropdownStyle: _extends$1({ maxHeight: '100vh', overflow: 'auto' }, dropdownStyle),
          treeCheckable: checkable,
          notFoundContent: notFoundContent || renderEmpty(h, 'Select'),
          __propsSymbol__: Symbol()
        }), treeData ? { treeData: treeData } : {}),
        'class': cls,
        on: _extends$1({}, getListeners(this), { change: this.onChange }),
        ref: 'vcTreeSelect',
        scopedSlots: this.$scopedSlots
      };
      return h(
        Select$3,
        VcTreeSelectProps,
        [filterEmpty(this.$slots['default'])]
      );
    }
  };

  /* istanbul ignore next */
  TreeSelect.install = function (Vue) {
    Vue.use(base);
    Vue.component(TreeSelect.name, TreeSelect);
    Vue.component(TreeSelect.TreeNode.name, TreeSelect.TreeNode);
  };

  var TimeLineItemProps = {
    prefixCls: VuePropTypes.string,
    color: VuePropTypes.string,
    dot: VuePropTypes.any,
    pending: VuePropTypes.bool,
    position: VuePropTypes.oneOf(['left', 'right', '']).def('')
  };

  var TimelineItem = {
    name: 'ATimelineItem',
    props: initDefaultProps(TimeLineItemProps, {
      color: 'blue',
      pending: false
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    render: function render() {
      var _classNames, _classNames2;

      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          customizePrefixCls = _getOptionProps.prefixCls,
          _getOptionProps$color = _getOptionProps.color,
          color = _getOptionProps$color === undefined ? '' : _getOptionProps$color,
          pending = _getOptionProps.pending;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('timeline', customizePrefixCls);

      var dot = getComponentFromProp(this, 'dot');
      var itemClassName = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-item', true), _defineProperty(_classNames, prefixCls + '-item-pending', pending), _classNames));

      var dotClassName = classnames((_classNames2 = {}, _defineProperty(_classNames2, prefixCls + '-item-head', true), _defineProperty(_classNames2, prefixCls + '-item-head-custom', dot), _defineProperty(_classNames2, prefixCls + '-item-head-' + color, true), _classNames2));
      var liProps = {
        'class': itemClassName,
        on: getListeners(this)
      };
      return h(
        'li',
        liProps,
        [h('div', { 'class': prefixCls + '-item-tail' }), h(
          'div',
          {
            'class': dotClassName,
            style: { borderColor: /blue|red|green|gray/.test(color) ? undefined : color }
          },
          [dot]
        ), h(
          'div',
          { 'class': prefixCls + '-item-content' },
          [this.$slots['default']]
        )]
      );
    }
  };

  var TimelineProps = {
    prefixCls: VuePropTypes.string,
    /** 指定最后一个幽灵节点是否存在或内容 */
    pending: VuePropTypes.any,
    pendingDot: VuePropTypes.string,
    reverse: VuePropTypes.bool,
    mode: VuePropTypes.oneOf(['left', 'alternate', 'right', ''])
  };

  var Timeline = {
    name: 'ATimeline',
    props: initDefaultProps(TimelineProps, {
      reverse: false,
      mode: ''
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    render: function render() {
      var _classNames;

      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          customizePrefixCls = _getOptionProps.prefixCls,
          reverse = _getOptionProps.reverse,
          mode = _getOptionProps.mode,
          restProps = _objectWithoutProperties(_getOptionProps, ['prefixCls', 'reverse', 'mode']);

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('timeline', customizePrefixCls);

      var pendingDot = getComponentFromProp(this, 'pendingDot');
      var pending = getComponentFromProp(this, 'pending');
      var pendingNode = typeof pending === 'boolean' ? null : pending;
      var classString = classnames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-pending', !!pending), _defineProperty(_classNames, prefixCls + '-reverse', !!reverse), _defineProperty(_classNames, prefixCls + '-' + mode, !!mode), _classNames));
      var children = filterEmpty(this.$slots['default']);
      // // Remove falsy items
      // const falsylessItems = filterEmpty(this.$slots.default)
      // const items = falsylessItems.map((item, idx) => {
      //   return cloneElement(item, {
      //     props: {
      //       last: falsylessItems.length - 1 === idx,
      //     },
      //   })
      // })
      var pendingItem = pending ? h(
        TimelineItem,
        {
          attrs: { pending: !!pending }
        },
        [h(
          'template',
          { slot: 'dot' },
          [pendingDot || h(Icon$1, {
            attrs: { type: 'loading' }
          })]
        ), pendingNode]
      ) : null;

      var timeLineItems = reverse ? [pendingItem].concat(_toConsumableArray(children.reverse())) : [].concat(_toConsumableArray(children), [pendingItem]);

      var getPositionCls = function getPositionCls(ele, idx) {
        var eleProps = getPropsData(ele);
        if (mode === 'alternate') {
          if (eleProps.position === 'right') return prefixCls + '-item-right';
          if (eleProps.position === 'left') return prefixCls + '-item-left';
          return idx % 2 === 0 ? prefixCls + '-item-left' : prefixCls + '-item-right';
        }
        if (mode === 'left') return prefixCls + '-item-left';
        if (mode === 'right') return prefixCls + '-item-right';
        if (eleProps.position === 'right') return prefixCls + '-item-right';
        return '';
      };

      // Remove falsy items
      var truthyItems = timeLineItems.filter(function (item) {
        return !!item;
      });
      var itemsCount = truthyItems.length;
      var lastCls = prefixCls + '-item-last';
      var items = truthyItems.map(function (ele, idx) {
        var pendingClass = idx === itemsCount - 2 ? lastCls : '';
        var readyClass = idx === itemsCount - 1 ? lastCls : '';
        return cloneElement(ele, {
          'class': classnames([!reverse && !!pending ? pendingClass : readyClass, getPositionCls(ele, idx)])
        });
      });

      var timelineProps = {
        props: _extends$1({}, restProps),
        'class': classString,
        on: getListeners(this)
      };
      return h(
        'ul',
        timelineProps,
        [items]
      );
    }
  };

  Timeline.Item = TimelineItem;

  /* istanbul ignore next */
  Timeline.install = function (Vue) {
    Vue.use(base);
    Vue.component(Timeline.name, Timeline);
    Vue.component(TimelineItem.name, TimelineItem);
  };

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  var _baseIsNaN = baseIsNaN;

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  var _strictIndexOf = strictIndexOf;

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? _strictIndexOf(array, value, fromIndex)
      : _baseFindIndex(array, _baseIsNaN, fromIndex);
  }

  var _baseIndexOf = baseIndexOf;

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && _baseIndexOf(array, value, 0) > -1;
  }

  var _arrayIncludes$1 = arrayIncludes;

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  var _arrayIncludesWith = arrayIncludesWith;

  /**
   * This method returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */
  function noop$X() {
    // No operation performed.
  }

  var noop_1 = noop$X;

  /** Used as references for various `Number` constants. */
  var INFINITY$3 = 1 / 0;

  /**
   * Creates a set object of `values`.
   *
   * @private
   * @param {Array} values The values to add to the set.
   * @returns {Object} Returns the new set.
   */
  var createSet = !(_Set$1 && (1 / _setToArray(new _Set$1([,-0]))[1]) == INFINITY$3) ? noop_1 : function(values) {
    return new _Set$1(values);
  };

  var _createSet = createSet;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE$1 = 200;

  /**
   * The base implementation of `_.uniqBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   */
  function baseUniq(array, iteratee, comparator) {
    var index = -1,
        includes = _arrayIncludes$1,
        length = array.length,
        isCommon = true,
        result = [],
        seen = result;

    if (comparator) {
      isCommon = false;
      includes = _arrayIncludesWith;
    }
    else if (length >= LARGE_ARRAY_SIZE$1) {
      var set = iteratee ? null : _createSet(array);
      if (set) {
        return _setToArray(set);
      }
      isCommon = false;
      includes = _cacheHas;
      seen = new _SetCache;
    }
    else {
      seen = iteratee ? [] : result;
    }
    outer:
    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;

      value = (comparator || value !== 0) ? value : 0;
      if (isCommon && computed === computed) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed);
        }
        result.push(value);
      }
      else if (!includes(seen, computed, comparator)) {
        if (seen !== result) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }

  var _baseUniq = baseUniq;

  /**
   * This method is like `_.uniq` except that it accepts `iteratee` which is
   * invoked for each element in `array` to generate the criterion by which
   * uniqueness is computed. The order of result values is determined by the
   * order they occur in the array. The iteratee is invoked with one argument:
   * (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   * @example
   *
   * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
   * // => [2.1, 1.2]
   *
   * // The `_.property` iteratee shorthand.
   * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
   * // => [{ 'x': 1 }, { 'x': 2 }]
   */
  function uniqBy(array, iteratee) {
    return (array && array.length) ? _baseUniq(array, _baseIteratee(iteratee)) : [];
  }

  var uniqBy_1 = uniqBy;

  /**
   * The base implementation of  `_.pickBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @param {Function} predicate The function invoked per property.
   * @returns {Object} Returns the new object.
   */
  function basePickBy(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
      var path = paths[index],
          value = _baseGet(object, path);

      if (predicate(value, path)) {
        _baseSet(result, _castPath(path, object), value);
      }
    }
    return result;
  }

  var _basePickBy = basePickBy;

  /**
   * The base implementation of `_.pick` without support for individual
   * property identifiers.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @returns {Object} Returns the new object.
   */
  function basePick(object, paths) {
    return _basePickBy(object, paths, function(value, path) {
      return hasIn_1(object, path);
    });
  }

  var _basePick = basePick;

  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */
  var pick = _flatRest(function(object, paths) {
    return object == null ? {} : _basePick(object, paths);
  });

  var pick_1 = pick;

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  var _arrayAggregator = arrayAggregator;

  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return object && _baseFor(object, iteratee, keys_1);
  }

  var _baseForOwn = baseForOwn;

  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike_1(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);

      while ((fromRight ? index-- : ++index < length)) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }

  var _createBaseEach = createBaseEach;

  /**
   * The base implementation of `_.forEach` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   */
  var baseEach = _createBaseEach(_baseForOwn);

  var _baseEach = baseEach;

  /**
   * Aggregates elements of `collection` on `accumulator` with keys transformed
   * by `iteratee` and values set by `setter`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function baseAggregator(collection, setter, iteratee, accumulator) {
    _baseEach(collection, function(value, key, collection) {
      setter(accumulator, value, iteratee(value), collection);
    });
    return accumulator;
  }

  var _baseAggregator = baseAggregator;

  /**
   * Creates a function like `_.groupBy`.
   *
   * @private
   * @param {Function} setter The function to set accumulator values.
   * @param {Function} [initializer] The accumulator object initializer.
   * @returns {Function} Returns the new aggregator function.
   */
  function createAggregator(setter, initializer) {
    return function(collection, iteratee) {
      var func = isArray_1(collection) ? _arrayAggregator : _baseAggregator,
          accumulator = initializer ? initializer() : {};

      return func(collection, setter, _baseIteratee(iteratee), accumulator);
    };
  }

  var _createAggregator = createAggregator;

  /**
   * Creates an array of elements split into two groups, the first of which
   * contains elements `predicate` returns truthy for, the second of which
   * contains elements `predicate` returns falsey for. The predicate is
   * invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the array of grouped elements.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36, 'active': false },
   *   { 'user': 'fred',    'age': 40, 'active': true },
   *   { 'user': 'pebbles', 'age': 1,  'active': false }
   * ];
   *
   * _.partition(users, function(o) { return o.active; });
   * // => objects for [['fred'], ['barney', 'pebbles']]
   *
   * // The `_.matches` iteratee shorthand.
   * _.partition(users, { 'age': 1, 'active': false });
   * // => objects for [['pebbles'], ['barney', 'fred']]
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.partition(users, ['active', false]);
   * // => objects for [['barney', 'pebbles'], ['fred']]
   *
   * // The `_.property` iteratee shorthand.
   * _.partition(users, 'active');
   * // => objects for [['fred'], ['barney', 'pebbles']]
   */
  var partition = _createAggregator(function(result, value, key) {
    result[key ? 0 : 1].push(value);
  }, function() { return [[], []]; });

  var partition_1 = partition;

  function getError(option, xhr) {
    var msg = 'cannot ' + option.method + ' ' + option.action + ' ' + xhr.status + '\'';
    var err = new Error(msg);
    err.status = xhr.status;
    err.method = option.method;
    err.url = option.action;
    return err;
  }

  function getBody(xhr) {
    var text = xhr.responseText || xhr.response;
    if (!text) {
      return text;
    }

    try {
      return JSON.parse(text);
    } catch (e) {
      return text;
    }
  }

  // option {
  //  onProgress: (event: { percent: number }): void,
  //  onError: (event: Error, body?: Object): void,
  //  onSuccess: (body: Object): void,
  //  data: Object,
  //  filename: String,
  //  file: File,
  //  withCredentials: Boolean,
  //  action: String,
  //  headers: Object,
  // }
  function upload(option) {
    var xhr = new window.XMLHttpRequest();

    if (option.onProgress && xhr.upload) {
      xhr.upload.onprogress = function progress(e) {
        if (e.total > 0) {
          e.percent = e.loaded / e.total * 100;
        }
        option.onProgress(e);
      };
    }

    var formData = new window.FormData();

    if (option.data) {
      Object.keys(option.data).forEach(function (key) {
        var value = option.data[key];
        // support key-value array data
        if (Array.isArray(value)) {
          value.forEach(function (item) {
            // { list: [ 11, 22 ] }
            // formData.append('list[]', 11);
            formData.append(key + '[]', item);
          });
          return;
        }

        formData.append(key, option.data[key]);
      });
    }

    formData.append(option.filename, option.file);

    xhr.onerror = function error(e) {
      option.onError(e);
    };

    xhr.onload = function onload() {
      // allow success when 2xx status
      // see https://github.com/react-component/upload/issues/34
      if (xhr.status < 200 || xhr.status >= 300) {
        return option.onError(getError(option, xhr), getBody(xhr));
      }

      option.onSuccess(getBody(xhr), xhr);
    };

    xhr.open(option.method, option.action, true);

    // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179
    if (option.withCredentials && 'withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    var headers = option.headers || {};

    // when set headers['X-Requested-With'] = null , can close default XHR header
    // see https://github.com/react-component/upload/issues/33
    if (headers['X-Requested-With'] !== null) {
      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    }

    for (var h in headers) {
      if (headers.hasOwnProperty(h) && headers[h] !== null) {
        xhr.setRequestHeader(h, headers[h]);
      }
    }
    xhr.send(formData);

    return {
      abort: function abort() {
        xhr.abort();
      }
    };
  }

  var now$2 = +new Date();
  var index$3 = 0;

  function uid$1() {
    return "vc-upload-" + now$2 + "-" + ++index$3;
  }

  function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  }

  var attrAccept = (function (file, acceptedFiles) {
    if (file && acceptedFiles) {
      var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(',');
      var fileName = file.name || '';
      var mimeType = file.type || '';
      var baseMimeType = mimeType.replace(/\/.*$/, '');

      return acceptedFilesArray.some(function (type) {
        var validType = type.trim();
        if (validType.charAt(0) === '.') {
          return endsWith(fileName.toLowerCase(), validType.toLowerCase());
        } else if (/\/\*$/.test(validType)) {
          // This is something like a image/* mime type
          return baseMimeType === validType.replace(/\/.*$/, '');
        }
        return mimeType === validType;
      });
    }
    return true;
  });

  function loopFiles(item, callback) {
    var dirReader = item.createReader();
    var fileList = [];

    function sequence() {
      dirReader.readEntries(function (entries) {
        var entryList = Array.prototype.slice.apply(entries);
        fileList = fileList.concat(entryList);

        // Check if all the file has been viewed
        var isFinished = !entryList.length;

        if (isFinished) {
          callback(fileList);
        } else {
          sequence();
        }
      });
    }

    sequence();
  }

  var traverseFileTree = function traverseFileTree(files, callback, isAccepted) {
    var _traverseFileTree = function _traverseFileTree(item, path) {
      path = path || '';
      if (item.isFile) {
        item.file(function (file) {
          if (isAccepted(file)) {
            // https://github.com/ant-design/ant-design/issues/16426
            if (item.fullPath && !file.webkitRelativePath) {
              Object.defineProperties(file, {
                webkitRelativePath: {
                  writable: true
                }
              });
              file.webkitRelativePath = item.fullPath.replace(/^\//, '');
              Object.defineProperties(file, {
                webkitRelativePath: {
                  writable: false
                }
              });
            }
            callback([file]);
          }
        });
      } else if (item.isDirectory) {
        loopFiles(item, function (entries) {
          entries.forEach(function (entryItem) {
            _traverseFileTree(entryItem, '' + path + item.name + '/');
          });
        });
      }
    };
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var file = _step.value;

        _traverseFileTree(file.webkitGetAsEntry());
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  };

  var upLoadPropTypes = {
    componentTag: VuePropTypes.string,
    // style: PropTypes.object,
    prefixCls: VuePropTypes.string,
    name: VuePropTypes.string,
    // className: PropTypes.string,
    multiple: VuePropTypes.bool,
    directory: VuePropTypes.bool,
    disabled: VuePropTypes.bool,
    accept: VuePropTypes.string,
    // children: PropTypes.any,
    // onStart: PropTypes.func,
    data: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.func]),
    action: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.func]),
    headers: VuePropTypes.object,
    beforeUpload: VuePropTypes.func,
    customRequest: VuePropTypes.func,
    // onProgress: PropTypes.func,
    withCredentials: VuePropTypes.bool,
    openFileDialogOnClick: VuePropTypes.bool,
    transformFile: VuePropTypes.func,
    method: VuePropTypes.string
  };

  var AjaxUploader = {
    inheritAttrs: false,
    name: 'ajaxUploader',
    mixins: [BaseMixin],
    props: upLoadPropTypes,
    data: function data() {
      this.reqs = {};
      return {
        uid: uid$1()
      };
    },
    mounted: function mounted() {
      this._isMounted = true;
    },
    beforeDestroy: function beforeDestroy() {
      this._isMounted = false;
      this.abort();
    },

    methods: {
      onChange: function onChange(e) {
        var files = e.target.files;
        this.uploadFiles(files);
        this.reset();
      },
      onClick: function onClick() {
        var el = this.$refs.fileInputRef;
        if (!el) {
          return;
        }
        el.click();
      },
      onKeyDown: function onKeyDown(e) {
        if (e.key === 'Enter') {
          this.onClick();
        }
      },
      onFileDrop: function onFileDrop(e) {
        var _this = this;

        var multiple = this.$props.multiple;

        e.preventDefault();
        if (e.type === 'dragover') {
          return;
        }
        if (this.directory) {
          traverseFileTree(e.dataTransfer.items, this.uploadFiles, function (_file) {
            return attrAccept(_file, _this.accept);
          });
        } else {
          var files = partition_1(Array.prototype.slice.call(e.dataTransfer.files), function (file) {
            return attrAccept(file, _this.accept);
          });
          var successFiles = files[0];
          var errorFiles = files[1];
          if (multiple === false) {
            successFiles = successFiles.slice(0, 1);
          }
          this.uploadFiles(successFiles);

          if (errorFiles.length) {
            this.$emit('reject', errorFiles);
          }
        }
      },
      uploadFiles: function uploadFiles(files) {
        var _this2 = this;

        var postFiles = Array.prototype.slice.call(files);
        postFiles.map(function (file) {
          file.uid = uid$1();
          return file;
        }).forEach(function (file) {
          _this2.upload(file, postFiles);
        });
      },
      upload: function upload(file, fileList) {
        var _this3 = this;

        if (!this.beforeUpload) {
          // always async in case use react state to keep fileList
          return setTimeout(function () {
            return _this3.post(file);
          }, 0);
        }

        var before = this.beforeUpload(file, fileList);
        if (before && before.then) {
          before.then(function (processedFile) {
            var processedFileType = Object.prototype.toString.call(processedFile);
            if (processedFileType === '[object File]' || processedFileType === '[object Blob]') {
              return _this3.post(processedFile);
            }
            return _this3.post(file);
          })['catch'](function (e) {
            console && console.log(e); // eslint-disable-line
          });
        } else if (before !== false) {
          setTimeout(function () {
            return _this3.post(file);
          }, 0);
        }
      },
      post: function post(file) {
        var _this4 = this;

        if (!this._isMounted) {
          return;
        }
        var props = this.$props;
        var data = props.data;
        var _props$transformFile = props.transformFile,
            transformFile = _props$transformFile === undefined ? function (originFile) {
          return originFile;
        } : _props$transformFile;


        new Promise(function (resolve) {
          var action = _this4.action;

          if (typeof action === 'function') {
            return resolve(action(file));
          }
          resolve(action);
        }).then(function (action) {
          var uid = file.uid;

          var request = _this4.customRequest || upload;
          var transform = Promise.resolve(transformFile(file))['catch'](function (e) {
            console.error(e); // eslint-disable-line no-console
          });
          transform.then(function (transformedFile) {
            if (typeof data === 'function') {
              data = data(file);
            }

            var requestOption = {
              action: action,
              filename: _this4.name,
              data: data,
              file: transformedFile,
              headers: _this4.headers,
              withCredentials: _this4.withCredentials,
              method: props.method || 'post',
              onProgress: function onProgress(e) {
                _this4.$emit('progress', e, file);
              },
              onSuccess: function onSuccess(ret, xhr) {
                delete _this4.reqs[uid];
                _this4.$emit('success', ret, file, xhr);
              },
              onError: function onError(err, ret) {
                delete _this4.reqs[uid];
                _this4.$emit('error', err, ret, file);
              }
            };
            _this4.reqs[uid] = request(requestOption);
            _this4.$emit('start', file);
          });
        });
      },
      reset: function reset() {
        this.setState({
          uid: uid$1()
        });
      },
      abort: function abort(file) {
        var reqs = this.reqs;

        if (file) {
          var uid = file;
          if (file && file.uid) {
            uid = file.uid;
          }
          if (reqs[uid] && reqs[uid].abort) {
            reqs[uid].abort();
          }
          delete reqs[uid];
        } else {
          Object.keys(reqs).forEach(function (uid) {
            if (reqs[uid] && reqs[uid].abort) {
              reqs[uid].abort();
            }

            delete reqs[uid];
          });
        }
      }
    },

    render: function render() {
      var _classNames;

      var h = arguments[0];
      var $props = this.$props,
          $attrs = this.$attrs;
      var Tag = $props.componentTag,
          prefixCls = $props.prefixCls,
          disabled = $props.disabled,
          multiple = $props.multiple,
          accept = $props.accept,
          directory = $props.directory,
          openFileDialogOnClick = $props.openFileDialogOnClick;

      var cls = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, prefixCls + '-disabled', disabled), _classNames));
      var events = disabled ? {} : {
        click: openFileDialogOnClick ? this.onClick : function () {},
        keydown: openFileDialogOnClick ? this.onKeyDown : function () {},
        drop: this.onFileDrop,
        dragover: this.onFileDrop
      };
      var tagProps = {
        on: _extends$1({}, getListeners(this), events),
        attrs: {
          role: 'button',
          tabIndex: disabled ? null : '0'
        },
        'class': cls
      };
      return h(
        Tag,
        tagProps,
        [h('input', {
          attrs: {
            id: $attrs.id,
            type: 'file',

            accept: accept,
            directory: directory ? 'directory' : null,
            webkitdirectory: directory ? 'webkitdirectory' : null,
            multiple: multiple
          },
          ref: 'fileInputRef',
          on: {
            'click': function click(e) {
              return e.stopPropagation();
            },
            'change': this.onChange
          },
          // https://github.com/ant-design/ant-design/issues/19948
          key: this.uid,
          style: { display: 'none' } }), this.$slots['default']]
      );
    }
  };

  var IFRAME_STYLE = {
    position: 'absolute',
    top: 0,
    opacity: 0,
    filter: 'alpha(opacity=0)',
    left: 0,
    zIndex: 9999
  };

  // diferent from AjaxUpload, can only upload on at one time, serial seriously
  var IframeUploader = {
    mixins: [BaseMixin],
    props: {
      componentTag: VuePropTypes.string,
      // style: PropTypes.object,
      disabled: VuePropTypes.bool,
      prefixCls: VuePropTypes.string,
      // className: PropTypes.string,
      accept: VuePropTypes.string,
      // onStart: PropTypes.func,
      multiple: VuePropTypes.bool,
      // children: PropTypes.any,
      data: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.func]),
      action: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.func]),
      name: VuePropTypes.string
    },
    data: function data() {
      this.file = {};
      return {
        uploading: false
      };
    },

    methods: {
      onLoad: function onLoad() {
        if (!this.uploading) {
          return;
        }
        var file = this.file;

        var response = void 0;
        try {
          var doc = this.getIframeDocument();
          var script = doc.getElementsByTagName('script')[0];
          if (script && script.parentNode === doc.body) {
            doc.body.removeChild(script);
          }
          response = doc.body.innerHTML;
          this.$emit('success', response, file);
        } catch (err) {
          warning$1(false, 'cross domain error for Upload. Maybe server should return document.domain script. see Note from https://github.com/react-component/upload');
          response = 'cross-domain';
          this.$emit('error', err, null, file);
        }
        this.endUpload();
      },
      onChange: function onChange() {
        var _this = this;

        var target = this.getFormInputNode();
        // ie8/9 don't support FileList Object
        // http://stackoverflow.com/questions/12830058/ie8-input-type-file-get-files
        var file = this.file = {
          uid: uid$1(),
          name: target.value && target.value.substring(target.value.lastIndexOf('\\') + 1, target.value.length)
        };
        this.startUpload();
        var props = this.$props;

        if (!props.beforeUpload) {
          return this.post(file);
        }
        var before = props.beforeUpload(file);
        if (before && before.then) {
          before.then(function () {
            _this.post(file);
          }, function () {
            _this.endUpload();
          });
        } else if (before !== false) {
          this.post(file);
        } else {
          this.endUpload();
        }
      },
      getIframeNode: function getIframeNode() {
        return this.$refs.iframeRef;
      },
      getIframeDocument: function getIframeDocument() {
        return this.getIframeNode().contentDocument;
      },
      getFormNode: function getFormNode() {
        return this.getIframeDocument().getElementById('form');
      },
      getFormInputNode: function getFormInputNode() {
        return this.getIframeDocument().getElementById('input');
      },
      getFormDataNode: function getFormDataNode() {
        return this.getIframeDocument().getElementById('data');
      },
      getFileForMultiple: function getFileForMultiple(file) {
        return this.multiple ? [file] : file;
      },
      getIframeHTML: function getIframeHTML(domain) {
        var domainScript = '';
        var domainInput = '';
        if (domain) {
          var script = 'script';
          domainScript = '<' + script + '>document.domain="' + domain + '";</' + script + '>';
          domainInput = '<input name="_documentDomain" value="' + domain + '" />';
        }
        return '\n      <!DOCTYPE html>\n      <html>\n      <head>\n      <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n      <style>\n      body,html {padding:0;margin:0;border:0;overflow:hidden;}\n      </style>\n      ' + domainScript + '\n      </head>\n      <body>\n      <form method="post"\n      encType="multipart/form-data"\n      action="" id="form"\n      style="display:block;height:9999px;position:relative;overflow:hidden;">\n      <input id="input" type="file"\n       name="' + this.name + '"\n       style="position:absolute;top:0;right:0;height:9999px;font-size:9999px;cursor:pointer;"/>\n      ' + domainInput + '\n      <span id="data"></span>\n      </form>\n      </body>\n      </html>\n      ';
      },
      initIframeSrc: function initIframeSrc() {
        if (this.domain) {
          this.getIframeNode().src = 'javascript:void((function(){\n          var d = document;\n          d.open();\n          d.domain=\'' + this.domain + '\';\n          d.write(\'\');\n          d.close();\n        })())';
        }
      },
      initIframe: function initIframe() {
        var iframeNode = this.getIframeNode();
        var win = iframeNode.contentWindow;
        var doc = void 0;
        this.domain = this.domain || '';
        this.initIframeSrc();
        try {
          doc = win.document;
        } catch (e) {
          this.domain = document.domain;
          this.initIframeSrc();
          win = iframeNode.contentWindow;
          doc = win.document;
        }
        doc.open('text/html', 'replace');
        doc.write(this.getIframeHTML(this.domain));
        doc.close();
        this.getFormInputNode().onchange = this.onChange;
      },
      endUpload: function endUpload() {
        if (this.uploading) {
          this.file = {};
          // hack avoid batch
          this.uploading = false;
          this.setState({
            uploading: false
          });
          this.initIframe();
        }
      },
      startUpload: function startUpload() {
        if (!this.uploading) {
          this.uploading = true;
          this.setState({
            uploading: true
          });
        }
      },
      updateIframeWH: function updateIframeWH() {
        var rootNode = this.$el;
        var iframeNode = this.getIframeNode();
        iframeNode.style.height = rootNode.offsetHeight + 'px';
        iframeNode.style.width = rootNode.offsetWidth + 'px';
      },
      abort: function abort(file) {
        if (file) {
          var uid = file;
          if (file && file.uid) {
            uid = file.uid;
          }
          if (uid === this.file.uid) {
            this.endUpload();
          }
        } else {
          this.endUpload();
        }
      },
      post: function post(file) {
        var _this2 = this;

        var formNode = this.getFormNode();
        var dataSpan = this.getFormDataNode();
        var data = this.$props.data;

        if (typeof data === 'function') {
          data = data(file);
        }
        var inputs = document.createDocumentFragment();
        for (var key in data) {
          if (data.hasOwnProperty(key)) {
            var input = document.createElement('input');
            input.setAttribute('name', key);
            input.value = data[key];
            inputs.appendChild(input);
          }
        }
        dataSpan.appendChild(inputs);
        new Promise(function (resolve) {
          var action = _this2.action;

          if (typeof action === 'function') {
            return resolve(action(file));
          }
          resolve(action);
        }).then(function (action) {
          formNode.setAttribute('action', action);
          formNode.submit();
          dataSpan.innerHTML = '';
          _this2.$emit('start', file);
        });
      }
    },
    mounted: function mounted() {
      var _this3 = this;

      this.$nextTick(function () {
        _this3.updateIframeWH();
        _this3.initIframe();
      });
    },
    updated: function updated() {
      var _this4 = this;

      this.$nextTick(function () {
        _this4.updateIframeWH();
      });
    },
    render: function render() {
      var _classNames;

      var h = arguments[0];
      var _$props = this.$props,
          Tag = _$props.componentTag,
          disabled = _$props.disabled,
          prefixCls = _$props.prefixCls;

      var iframeStyle = _extends$1({}, IFRAME_STYLE, {
        display: this.uploading || disabled ? 'none' : ''
      });
      var cls = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, prefixCls + '-disabled', disabled), _classNames));

      return h(
        Tag,
        {
          attrs: { className: cls },
          style: { position: 'relative', zIndex: 0 } },
        [h('iframe', { ref: 'iframeRef', on: {
            'load': this.onLoad
          },
          style: iframeStyle }), this.$slots['default']]
      );
    }
  };

  function empty() {}

  var uploadProps = {
    componentTag: VuePropTypes.string,
    prefixCls: VuePropTypes.string,
    action: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.func]),
    name: VuePropTypes.string,
    multipart: VuePropTypes.bool,
    directory: VuePropTypes.bool,
    // onError: PropTypes.func,
    // onSuccess: PropTypes.func,
    // onProgress: PropTypes.func,
    // onStart: PropTypes.func,
    data: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.func]),
    headers: VuePropTypes.object,
    accept: VuePropTypes.string,
    multiple: VuePropTypes.bool,
    disabled: VuePropTypes.bool,
    beforeUpload: VuePropTypes.func,
    customRequest: VuePropTypes.func,
    // onReady: PropTypes.func,
    withCredentials: VuePropTypes.bool,
    supportServerRender: VuePropTypes.bool,
    openFileDialogOnClick: VuePropTypes.bool
  };
  var Upload = {
    name: 'Upload',
    mixins: [BaseMixin],
    inheritAttrs: false,
    props: initDefaultProps(uploadProps, {
      componentTag: 'span',
      prefixCls: 'rc-upload',
      data: {},
      headers: {},
      name: 'file',
      multipart: false,
      // onReady: empty,
      // onStart: empty,
      // onError: empty,
      // onSuccess: empty,
      supportServerRender: false,
      multiple: false,
      beforeUpload: empty,
      withCredentials: false,
      openFileDialogOnClick: true
    }),
    data: function data() {
      return {
        Component: null
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        if (_this.supportServerRender) {
          _this.setState({
            Component: _this.getComponent()
          }, function () {
            _this.$emit('ready');
          });
        }
      });
    },

    methods: {
      getComponent: function getComponent() {
        return typeof File !== 'undefined' ? AjaxUploader : IframeUploader;
      },
      abort: function abort(file) {
        this.$refs.uploaderRef.abort(file);
      }
    },

    render: function render() {
      var h = arguments[0];

      var componentProps = {
        props: _extends$1({}, this.$props),
        on: getListeners(this),
        ref: 'uploaderRef',
        attrs: this.$attrs
      };
      if (this.supportServerRender) {
        var _ComponentUploader = this.Component;
        if (_ComponentUploader) {
          return h(
            _ComponentUploader,
            componentProps,
            [this.$slots['default']]
          );
        }
        return null;
      }
      var ComponentUploader = this.getComponent();
      return h(
        ComponentUploader,
        componentProps,
        [this.$slots['default']]
      );
    }
  };

  var UploadFileStatus = VuePropTypes.oneOf(['error', 'success', 'done', 'uploading', 'removed']);

  // export const HttpRequestHeader {
  //   [key: string]: string;
  // }

  // export const UploadFile = PropsTypes.shape({
  //   uid: PropsTypes.oneOfType([
  //     PropsTypes.string,
  //     PropsTypes.number,
  //   ]),
  //   size: PropsTypes.number,
  //   name: PropsTypes.string,
  //   filename: PropsTypes.string,
  //   lastModified: PropsTypes.number,
  //   lastModifiedDate: PropsTypes.any,
  //   url: PropsTypes.string,
  //   status: UploadFileStatus,
  //   percent: PropsTypes.number,
  //   thumbUrl: PropsTypes.string,
  //   originFileObj: PropsTypes.any,
  //   response: PropsTypes.any,
  //   error: PropsTypes.any,
  //   linkProps: PropsTypes.any,
  //   type: PropsTypes.string,
  // }).loose

  function UploadFile(_ref) {
    var uid = _ref.uid,
        name = _ref.name;

    if (!uid && uid !== 0) return false;
    if (!['string', 'number'].includes(typeof uid === 'undefined' ? 'undefined' : _typeof(uid))) return false;
    if (name === '' || typeof name !== 'string') return false;
    return true;
  }

  var UploadChangeParam = {
    file: VuePropTypes.custom(UploadFile),
    fileList: VuePropTypes.arrayOf(VuePropTypes.custom(UploadFile)),
    event: VuePropTypes.object
  };

  var ShowUploadListInterface = VuePropTypes.shape({
    showRemoveIcon: VuePropTypes.bool,
    showPreviewIcon: VuePropTypes.bool
  }).loose;

  var UploadLocale = VuePropTypes.shape({
    uploading: VuePropTypes.string,
    removeFile: VuePropTypes.string,
    downloadFile: VuePropTypes.string,
    uploadError: VuePropTypes.string,
    previewFile: VuePropTypes.string
  }).loose;

  var UploadProps = {
    type: VuePropTypes.oneOf(['drag', 'select']),
    name: VuePropTypes.string,
    defaultFileList: VuePropTypes.arrayOf(VuePropTypes.custom(UploadFile)),
    fileList: VuePropTypes.arrayOf(VuePropTypes.custom(UploadFile)),
    action: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.func]),
    directory: VuePropTypes.bool,
    data: VuePropTypes.oneOfType([VuePropTypes.object, VuePropTypes.func]),
    method: VuePropTypes.oneOf(['POST', 'PUT', 'post', 'put']),
    headers: VuePropTypes.object,
    showUploadList: VuePropTypes.oneOfType([VuePropTypes.bool, ShowUploadListInterface]),
    multiple: VuePropTypes.bool,
    accept: VuePropTypes.string,
    beforeUpload: VuePropTypes.func,
    // onChange: PropsTypes.func,
    listType: VuePropTypes.oneOf(['text', 'picture', 'picture-card']),
    // className: PropsTypes.string,
    // onPreview: PropsTypes.func,
    remove: VuePropTypes.func,
    supportServerRender: VuePropTypes.bool,
    // style: PropsTypes.object,
    disabled: VuePropTypes.bool,
    prefixCls: VuePropTypes.string,
    customRequest: VuePropTypes.func,
    withCredentials: VuePropTypes.bool,
    openFileDialogOnClick: VuePropTypes.bool,
    locale: UploadLocale,
    height: VuePropTypes.number,
    id: VuePropTypes.string,
    previewFile: VuePropTypes.func,
    transformFile: VuePropTypes.func
  };

  var UploadState = {
    fileList: VuePropTypes.arrayOf(VuePropTypes.custom(UploadFile)),
    dragState: VuePropTypes.string
  };

  var UploadListProps = {
    listType: VuePropTypes.oneOf(['text', 'picture', 'picture-card']),
    // onPreview: PropsTypes.func,
    // onRemove: PropsTypes.func,
    // items: PropsTypes.arrayOf(UploadFile),
    items: VuePropTypes.arrayOf(VuePropTypes.custom(UploadFile)),
    // items: PropsTypes.any,
    progressAttr: VuePropTypes.object,
    prefixCls: VuePropTypes.string,
    showRemoveIcon: VuePropTypes.bool,
    showDownloadIcon: VuePropTypes.bool,
    showPreviewIcon: VuePropTypes.bool,
    locale: UploadLocale,
    previewFile: VuePropTypes.func
  };

  var Dragger = {
    name: 'AUploadDragger',
    props: UploadProps,
    render: function render() {
      var h = arguments[0];

      var props = getOptionProps(this);
      var draggerProps = {
        props: _extends$1({}, props, {
          type: 'drag'
        }),
        on: getListeners(this),
        style: { height: this.height }
      };
      return h(
        Upload$1,
        draggerProps,
        [this.$slots['default']]
      );
    }
  };

  function T$2() {
    return true;
  }

  // Fix IE file.status problem
  // via coping a new Object
  function fileToObject(file) {
    return _extends$1({}, file, {
      lastModified: file.lastModified,
      lastModifiedDate: file.lastModifiedDate,
      name: file.name,
      size: file.size,
      type: file.type,
      uid: file.uid,
      percent: 0,
      originFileObj: file
    });
  }

  /**
   * 生成Progress percent: 0.1 -> 0.98
   *   - for ie
   */
  function genPercentAdd() {
    var k = 0.1;
    var i = 0.01;
    var end = 0.98;
    return function (s) {
      var start = s;
      if (start >= end) {
        return start;
      }

      start += k;
      k = k - i;
      if (k < 0.001) {
        k = 0.001;
      }
      return start;
    };
  }

  function getFileItem(file, fileList) {
    var matchKey = file.uid !== undefined ? 'uid' : 'name';
    return fileList.filter(function (item) {
      return item[matchKey] === file[matchKey];
    })[0];
  }

  function removeFileItem(file, fileList) {
    var matchKey = file.uid !== undefined ? 'uid' : 'name';
    var removed = fileList.filter(function (item) {
      return item[matchKey] !== file[matchKey];
    });
    if (removed.length === fileList.length) {
      return null;
    }
    return removed;
  }

  // ==================== Default Image Preview ====================
  var extname = function extname() {
    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var temp = url.split('/');
    var filename = temp[temp.length - 1];
    var filenameWithoutSuffix = filename.split(/#|\?/)[0];
    return (/\.[^./\\]*$/.exec(filenameWithoutSuffix) || [''])[0];
  };

  var isImageFileType = function isImageFileType(type) {
    return !!type && type.indexOf('image/') === 0;
  };

  var isImageUrl = function isImageUrl(file) {
    if (isImageFileType(file.type)) {
      return true;
    }
    var url = file.thumbUrl || file.url;
    var extension = extname(url);
    if (/^data:image\//.test(url) || /(webp|svg|png|gif|jpg|jpeg|jfif|bmp|dpg|ico)$/i.test(extension)) {
      return true;
    }
    if (/^data:/.test(url)) {
      // other file types of base64
      return false;
    }
    if (extension) {
      // other file types which have extension
      return false;
    }
    return true;
  };

  var MEASURE_SIZE = 200;
  function previewImage(file) {
    return new Promise(function (resolve) {
      if (!isImageFileType(file.type)) {
        resolve('');
        return;
      }

      var canvas = document.createElement('canvas');
      canvas.width = MEASURE_SIZE;
      canvas.height = MEASURE_SIZE;
      canvas.style.cssText = 'position: fixed; left: 0; top: 0; width: ' + MEASURE_SIZE + 'px; height: ' + MEASURE_SIZE + 'px; z-index: 9999; display: none;';
      document.body.appendChild(canvas);
      var ctx = canvas.getContext('2d');
      var img = new Image();
      img.onload = function () {
        var width = img.width,
            height = img.height;


        var drawWidth = MEASURE_SIZE;
        var drawHeight = MEASURE_SIZE;
        var offsetX = 0;
        var offsetY = 0;

        if (width < height) {
          drawHeight = height * (MEASURE_SIZE / width);
          offsetY = -(drawHeight - drawWidth) / 2;
        } else {
          drawWidth = width * (MEASURE_SIZE / height);
          offsetX = -(drawWidth - drawHeight) / 2;
        }

        ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
        var dataURL = canvas.toDataURL();
        document.body.removeChild(canvas);

        resolve(dataURL);
      };
      img.src = window.URL.createObjectURL(file);
    });
  }

  var UploadList = {
    name: 'AUploadList',
    mixins: [BaseMixin],
    props: initDefaultProps(UploadListProps, {
      listType: 'text', // or picture
      progressAttr: {
        strokeWidth: 2,
        showInfo: false
      },
      showRemoveIcon: true,
      showDownloadIcon: false,
      showPreviewIcon: true,
      previewFile: previewImage
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    updated: function updated() {
      var _this = this;

      this.$nextTick(function () {
        var _$props = _this.$props,
            listType = _$props.listType,
            items = _$props.items,
            previewFile = _$props.previewFile;

        if (listType !== 'picture' && listType !== 'picture-card') {
          return;
        }
        (items || []).forEach(function (file) {
          if (typeof document === 'undefined' || typeof window === 'undefined' || !window.FileReader || !window.File || !(file.originFileObj instanceof File || file.originFileObj instanceof Blob) || file.thumbUrl !== undefined) {
            return;
          }
          /*eslint-disable */
          file.thumbUrl = '';
          if (previewFile) {
            previewFile(file.originFileObj).then(function (previewDataUrl) {
              // Need append '' to avoid dead loop
              file.thumbUrl = previewDataUrl || '';
              _this.$forceUpdate();
            });
          }
        });
      });
    },

    methods: {
      handlePreview: function handlePreview(file, e) {
        var _getListeners = getListeners(this),
            preview = _getListeners.preview;

        if (!preview) {
          return;
        }
        e.preventDefault();
        return this.$emit('preview', file);
      },
      handleDownload: function handleDownload(file) {
        var _getListeners2 = getListeners(this),
            download = _getListeners2.download;

        if (typeof download === 'function') {
          download(file);
        } else if (file.url) {
          window.open(file.url);
        }
      },
      handleClose: function handleClose(file) {
        this.$emit('remove', file);
      }
    },
    render: function render() {
      var _this2 = this,
          _classNames4;

      var h = arguments[0];

      var _getOptionProps = getOptionProps(this),
          customizePrefixCls = _getOptionProps.prefixCls,
          _getOptionProps$items = _getOptionProps.items,
          items = _getOptionProps$items === undefined ? [] : _getOptionProps$items,
          listType = _getOptionProps.listType,
          showPreviewIcon = _getOptionProps.showPreviewIcon,
          showRemoveIcon = _getOptionProps.showRemoveIcon,
          showDownloadIcon = _getOptionProps.showDownloadIcon,
          locale = _getOptionProps.locale,
          progressAttr = _getOptionProps.progressAttr;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('upload', customizePrefixCls);

      var list = items.map(function (file) {
        var _classNames, _classNames2;

        var progress = void 0;
        var icon = h(Icon$1, {
          attrs: { type: file.status === 'uploading' ? 'loading' : 'paper-clip' }
        });

        if (listType === 'picture' || listType === 'picture-card') {
          if (listType === 'picture-card' && file.status === 'uploading') {
            icon = h(
              'div',
              { 'class': prefixCls + '-list-item-uploading-text' },
              [locale.uploading]
            );
          } else if (!file.thumbUrl && !file.url) {
            icon = h(Icon$1, { 'class': prefixCls + '-list-item-thumbnail', attrs: { type: 'picture', theme: 'twoTone' }
            });
          } else {
            var thumbnail = isImageUrl(file) ? h('img', {
              attrs: {
                src: file.thumbUrl || file.url,
                alt: file.name
              },
              'class': prefixCls + '-list-item-image'
            }) : h(Icon$1, {
              attrs: { type: 'file', theme: 'twoTone' },
              'class': prefixCls + '-list-item-icon' });
            icon = h(
              'a',
              {
                'class': prefixCls + '-list-item-thumbnail',
                on: {
                  'click': function click(e) {
                    return _this2.handlePreview(file, e);
                  }
                },
                attrs: {
                  href: file.url || file.thumbUrl,
                  target: '_blank',
                  rel: 'noopener noreferrer'
                }
              },
              [thumbnail]
            );
          }
        }

        if (file.status === 'uploading') {
          var progressProps = {
            props: _extends$1({}, progressAttr, {
              type: 'line',
              percent: file.percent
            })
          };
          // show loading icon if upload progress listener is disabled
          var loadingProgress = 'percent' in file ? h(Progress, progressProps) : null;

          progress = h(
            'div',
            { 'class': prefixCls + '-list-item-progress', key: 'progress' },
            [loadingProgress]
          );
        }
        var infoUploadingClass = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-list-item', true), _defineProperty(_classNames, prefixCls + '-list-item-' + file.status, true), _defineProperty(_classNames, prefixCls + '-list-item-list-type-' + listType, true), _classNames));
        var linkProps = typeof file.linkProps === 'string' ? JSON.parse(file.linkProps) : file.linkProps;

        var removeIcon = showRemoveIcon ? h(Icon$1, {
          attrs: { type: 'delete', title: locale.removeFile },
          on: {
            'click': function click() {
              return _this2.handleClose(file);
            }
          }
        }) : null;
        var downloadIcon = showDownloadIcon && file.status === 'done' ? h(Icon$1, {
          attrs: {
            type: 'download',
            title: locale.downloadFile
          },
          on: {
            'click': function click() {
              return _this2.handleDownload(file);
            }
          }
        }) : null;
        var downloadOrDelete = listType !== 'picture-card' && h(
          'span',
          {
            key: 'download-delete',
            'class': prefixCls + '-list-item-card-actions ' + (listType === 'picture' ? 'picture' : '')
          },
          [downloadIcon && h(
            'a',
            {
              attrs: { title: locale.downloadFile }
            },
            [downloadIcon]
          ), removeIcon && h(
            'a',
            {
              attrs: { title: locale.removeFile }
            },
            [removeIcon]
          )]
        );
        var listItemNameClass = classnames((_classNames2 = {}, _defineProperty(_classNames2, prefixCls + '-list-item-name', true), _defineProperty(_classNames2, prefixCls + '-list-item-name-icon-count-' + [downloadIcon, removeIcon].filter(function (x) {
          return x;
        }).length, true), _classNames2));

        var preview = file.url ? [h(
          'a',
          babelHelperVueJsxMergeProps([{
            attrs: {
              target: '_blank',
              rel: 'noopener noreferrer',

              title: file.name
            },
            'class': listItemNameClass }, linkProps, {
            attrs: {
              href: file.url
            },
            on: {
              'click': function click(e) {
                return _this2.handlePreview(file, e);
              }
            }
          }]),
          [file.name]
        ), downloadOrDelete] : [h(
          'span',
          {
            key: 'view',
            'class': prefixCls + '-list-item-name',
            on: {
              'click': function click(e) {
                return _this2.handlePreview(file, e);
              }
            },
            attrs: {
              title: file.name
            }
          },
          [file.name]
        ), downloadOrDelete];
        var style = file.url || file.thumbUrl ? undefined : {
          pointerEvents: 'none',
          opacity: 0.5
        };
        var previewIcon = showPreviewIcon ? h(
          'a',
          {
            attrs: {
              href: file.url || file.thumbUrl,
              target: '_blank',
              rel: 'noopener noreferrer',

              title: locale.previewFile
            },
            style: style,
            on: {
              'click': function click(e) {
                return _this2.handlePreview(file, e);
              }
            }
          },
          [h(Icon$1, {
            attrs: { type: 'eye-o' }
          })]
        ) : null;
        var actions = listType === 'picture-card' && file.status !== 'uploading' && h(
          'span',
          { 'class': prefixCls + '-list-item-actions' },
          [previewIcon, file.status === 'done' && downloadIcon, removeIcon]
        );
        var message = void 0;
        if (file.response && typeof file.response === 'string') {
          message = file.response;
        } else {
          message = file.error && file.error.statusText || locale.uploadError;
        }
        var iconAndPreview = h('span', [icon, preview]);
        var transitionProps = getTransitionProps('fade');
        var dom = h(
          'div',
          { 'class': infoUploadingClass, key: file.uid },
          [h(
            'div',
            { 'class': prefixCls + '-list-item-info' },
            [iconAndPreview]
          ), actions, h(
            'transition',
            transitionProps,
            [progress]
          )]
        );
        var listContainerNameClass = classnames(_defineProperty({}, prefixCls + '-list-picture-card-container', listType === 'picture-card'));
        return h(
          'div',
          { key: file.uid, 'class': listContainerNameClass },
          [file.status === 'error' ? h(
            ToolTip,
            {
              attrs: { title: message }
            },
            [dom]
          ) : h('span', [dom])]
        );
      });
      var listClassNames = classnames((_classNames4 = {}, _defineProperty(_classNames4, prefixCls + '-list', true), _defineProperty(_classNames4, prefixCls + '-list-' + listType, true), _classNames4));
      var animationDirection = listType === 'picture-card' ? 'animate-inline' : 'animate';
      var transitionGroupProps = getTransitionProps(prefixCls + '-' + animationDirection);
      return h(
        'transition-group',
        babelHelperVueJsxMergeProps([transitionGroupProps, {
          attrs: { tag: 'div' },
          'class': listClassNames }]),
        [list]
      );
    }
  };

  var Upload$1 = {
    name: 'AUpload',
    mixins: [BaseMixin],
    inheritAttrs: false,
    Dragger: Dragger,
    props: initDefaultProps(UploadProps, {
      type: 'select',
      multiple: false,
      action: '',
      data: {},
      accept: '',
      beforeUpload: T$2,
      showUploadList: true,
      listType: 'text', // or pictrue
      disabled: false,
      supportServerRender: true
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    // recentUploadStatus: boolean | PromiseLike<any>;
    data: function data() {
      this.progressTimer = null;
      return {
        sFileList: this.fileList || this.defaultFileList || [],
        dragState: 'drop'
      };
    },

    watch: {
      fileList: function fileList(val) {
        this.sFileList = val || [];
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.clearProgressTimer();
    },

    methods: {
      onStart: function onStart(file) {
        var targetItem = fileToObject(file);
        targetItem.status = 'uploading';
        var nextFileList = this.sFileList.concat();
        var fileIndex = findIndex_1(nextFileList, function (_ref) {
          var uid = _ref.uid;
          return uid === targetItem.uid;
        });
        if (fileIndex === -1) {
          nextFileList.push(targetItem);
        } else {
          nextFileList[fileIndex] = targetItem;
        }
        this.onChange({
          file: targetItem,
          fileList: nextFileList
        });
        // fix ie progress
        if (!window.File || process.env.TEST_IE) {
          this.autoUpdateProgress(0, targetItem);
        }
      },
      onSuccess: function onSuccess(response, file, xhr) {
        this.clearProgressTimer();
        try {
          if (typeof response === 'string') {
            response = JSON.parse(response);
          }
        } catch (e) {
          /* do nothing */
        }
        var fileList = this.sFileList;
        var targetItem = getFileItem(file, fileList);
        // removed
        if (!targetItem) {
          return;
        }
        targetItem.status = 'done';
        targetItem.response = response;
        targetItem.xhr = xhr;
        this.onChange({
          file: _extends$1({}, targetItem),
          fileList: fileList
        });
      },
      onProgress: function onProgress(e, file) {
        var fileList = this.sFileList;
        var targetItem = getFileItem(file, fileList);
        // removed
        if (!targetItem) {
          return;
        }
        targetItem.percent = e.percent;
        this.onChange({
          event: e,
          file: _extends$1({}, targetItem),
          fileList: this.sFileList
        });
      },
      onError: function onError(error, response, file) {
        this.clearProgressTimer();
        var fileList = this.sFileList;
        var targetItem = getFileItem(file, fileList);
        // removed
        if (!targetItem) {
          return;
        }
        targetItem.error = error;
        targetItem.response = response;
        targetItem.status = 'error';
        this.onChange({
          file: _extends$1({}, targetItem),
          fileList: fileList
        });
      },
      onReject: function onReject(fileList) {
        this.$emit('reject', fileList);
      },
      handleRemove: function handleRemove(file) {
        var _this = this;

        var onRemove = this.remove;
        var fileList = this.$data.sFileList;


        Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(function (ret) {
          // Prevent removing file
          if (ret === false) {
            return;
          }

          var removedFileList = removeFileItem(file, fileList);

          if (removedFileList) {
            file.status = 'removed'; // eslint-disable-line

            if (_this.upload) {
              _this.upload.abort(file);
            }

            _this.onChange({
              file: file,
              fileList: removedFileList
            });
          }
        });
      },
      handleManualRemove: function handleManualRemove(file) {
        if (this.$refs.uploadRef) {
          this.$refs.uploadRef.abort(file);
        }
        this.handleRemove(file);
      },
      onChange: function onChange(info) {
        if (!hasProp(this, 'fileList')) {
          this.setState({ sFileList: info.fileList });
        }
        this.$emit('change', info);
      },
      onFileDrop: function onFileDrop(e) {
        this.setState({
          dragState: e.type
        });
      },
      reBeforeUpload: function reBeforeUpload(file, fileList) {
        var beforeUpload = this.$props.beforeUpload;
        var stateFileList = this.$data.sFileList;

        if (!beforeUpload) {
          return true;
        }
        var result = beforeUpload(file, fileList);
        if (result === false) {
          this.onChange({
            file: file,
            fileList: uniqBy_1(stateFileList.concat(fileList.map(fileToObject)), function (item) {
              return item.uid;
            })
          });
          return false;
        }
        if (result && result.then) {
          return result;
        }
        return true;
      },
      clearProgressTimer: function clearProgressTimer() {
        clearInterval(this.progressTimer);
      },
      autoUpdateProgress: function autoUpdateProgress(_, file) {
        var _this2 = this;

        var getPercent = genPercentAdd();
        var curPercent = 0;
        this.clearProgressTimer();
        this.progressTimer = setInterval(function () {
          curPercent = getPercent(curPercent);
          _this2.onProgress({
            percent: curPercent * 100
          }, file);
        }, 200);
      },
      renderUploadList: function renderUploadList(locale) {
        var h = this.$createElement;

        var _getOptionProps = getOptionProps(this),
            _getOptionProps$showU = _getOptionProps.showUploadList,
            showUploadList = _getOptionProps$showU === undefined ? {} : _getOptionProps$showU,
            listType = _getOptionProps.listType,
            previewFile = _getOptionProps.previewFile,
            disabled = _getOptionProps.disabled,
            propLocale = _getOptionProps.locale;

        var showRemoveIcon = showUploadList.showRemoveIcon,
            showPreviewIcon = showUploadList.showPreviewIcon,
            showDownloadIcon = showUploadList.showDownloadIcon;
        var fileList = this.$data.sFileList;

        var uploadListProps = {
          props: {
            listType: listType,
            items: fileList,
            previewFile: previewFile,
            showRemoveIcon: !disabled && showRemoveIcon,
            showPreviewIcon: showPreviewIcon,
            showDownloadIcon: showDownloadIcon,
            locale: _extends$1({}, locale, propLocale)
          },
          on: _extends$1({
            remove: this.handleManualRemove
          }, pick_1(getListeners(this), ['download', 'preview']))
        };
        return h(UploadList, uploadListProps);
      }
    },
    render: function render() {
      var _classNames2;

      var h = arguments[0];

      var _getOptionProps2 = getOptionProps(this),
          customizePrefixCls = _getOptionProps2.prefixCls,
          showUploadList = _getOptionProps2.showUploadList,
          listType = _getOptionProps2.listType,
          type = _getOptionProps2.type,
          disabled = _getOptionProps2.disabled;

      var _$data = this.$data,
          fileList = _$data.sFileList,
          dragState = _$data.dragState;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('upload', customizePrefixCls);

      var vcUploadProps = {
        props: _extends$1({}, this.$props, {
          prefixCls: prefixCls,
          beforeUpload: this.reBeforeUpload
        }),
        on: {
          start: this.onStart,
          error: this.onError,
          progress: this.onProgress,
          success: this.onSuccess,
          reject: this.onReject
        },
        ref: 'uploadRef',
        attrs: _extends$1({}, this.$attrs)
      };
      var children = this.$slots['default'];
      // Remove id to avoid open by label when trigger is hidden
      // https://github.com/ant-design/ant-design/issues/14298
      if (!children || disabled) {
        delete vcUploadProps.props.id;
        delete vcUploadProps.attrs.id;
      }
      var uploadList = showUploadList ? h(LocaleReceiver, {
        attrs: {
          componentName: 'Upload',
          defaultLocale: defaultLocale.Upload
        },
        scopedSlots: { 'default': this.renderUploadList }
      }) : null;

      if (type === 'drag') {
        var _classNames;

        var dragCls = classnames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-drag', true), _defineProperty(_classNames, prefixCls + '-drag-uploading', fileList.some(function (file) {
          return file.status === 'uploading';
        })), _defineProperty(_classNames, prefixCls + '-drag-hover', dragState === 'dragover'), _defineProperty(_classNames, prefixCls + '-disabled', disabled), _classNames));
        return h('span', [h(
          'div',
          {
            'class': dragCls,
            on: {
              'drop': this.onFileDrop,
              'dragover': this.onFileDrop,
              'dragleave': this.onFileDrop
            }
          },
          [h(
            Upload,
            babelHelperVueJsxMergeProps([vcUploadProps, { 'class': prefixCls + '-btn' }]),
            [h(
              'div',
              { 'class': prefixCls + '-drag-container' },
              [children]
            )]
          )]
        ), uploadList]);
      }

      var uploadButtonCls = classnames(prefixCls, (_classNames2 = {}, _defineProperty(_classNames2, prefixCls + '-select', true), _defineProperty(_classNames2, prefixCls + '-select-' + listType, true), _defineProperty(_classNames2, prefixCls + '-disabled', disabled), _classNames2));

      var uploadButton = h(
        'div',
        { 'class': uploadButtonCls, style: children ? undefined : { display: 'none' } },
        [h(
          Upload,
          vcUploadProps,
          [children]
        )]
      );

      if (listType === 'picture-card') {
        return h(
          'span',
          { 'class': prefixCls + '-picture-card-wrapper' },
          [uploadList, uploadButton]
        );
      }
      return h('span', [uploadButton, uploadList]);
    }
  };

  Upload$1.Dragger = Dragger;

  /* istanbul ignore next */
  Upload$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Upload$1.name, Upload$1);
    Vue.component(Dragger.name, Dragger);
  };

  var name = "ant-design-vue";
  var version = "1.7.1";
  var title = "Ant Design Vue";
  var description = "An enterprise-class UI design language and Vue-based implementation";
  var keywords = [
  	"ant",
  	"design",
  	"antd",
  	"vue",
  	"vueComponent",
  	"component",
  	"components",
  	"ui",
  	"framework",
  	"frontend"
  ];
  var main = "lib/index.js";
  var module = "es/index.js";
  var typings = "types/index.d.ts";
  var files = [
  	"dist",
  	"lib",
  	"es",
  	"types",
  	"scripts"
  ];
  var scripts = {
  	dev: "webpack-dev-server",
  	start: "cross-env NODE_ENV=development webpack-dev-server --config webpack.config.js",
  	test: "cross-env NODE_ENV=test jest --config .jest.js",
  	compile: "node antd-tools/cli/run.js compile",
  	pub: "node antd-tools/cli/run.js pub",
  	"pub-with-ci": "node antd-tools/cli/run.js pub-with-ci",
  	prepublish: "node antd-tools/cli/run.js guard",
  	"pre-publish": "node ./scripts/prepub",
  	prettier: "prettier -c --write '**/*'",
  	"pretty-quick": "pretty-quick",
  	dist: "node antd-tools/cli/run.js dist",
  	lint: "eslint -c ./.eslintrc --fix --ext .jsx,.js,.vue ./components",
  	"lint:site": "eslint -c ./.eslintrc --fix --ext .jsx,.js,.vue ./antdv-demo",
  	"lint:docs": "eslint -c ./.eslintrc --fix --ext .jsx,.js,.vue,.md ./antdv-demo/docs/**/demo/**",
  	"lint:style": "stylelint \"{site,components}/**/*.less\" --syntax less",
  	codecov: "codecov",
  	postinstall: "node scripts/postinstall || echo \"ignore\""
  };
  var repository = {
  	type: "git",
  	url: "git+https://github.com/vueComponent/ant-design-vue.git"
  };
  var license = "MIT";
  var bugs = {
  	url: "https://github.com/vueComponent/ant-design-vue/issues"
  };
  var homepage = "https://www.antdv.com/";
  var peerDependencies = {
  	vue: ">=2.6.0",
  	"vue-template-compiler": ">=2.6.0"
  };
  var devDependencies = {
  	"@commitlint/cli": "^8.0.0",
  	"@commitlint/config-conventional": "^8.0.0",
  	"@octokit/rest": "^16.0.0",
  	"@vue/cli-plugin-eslint": "^4.0.0",
  	"@vue/server-test-utils": "1.0.0-beta.16",
  	"@vue/test-utils": "1.0.0-beta.16",
  	acorn: "^7.0.0",
  	autoprefixer: "^9.6.0",
  	axios: "^0.19.0",
  	"babel-cli": "^6.26.0",
  	"babel-core": "^6.26.0",
  	"babel-eslint": "^10.0.1",
  	"babel-helper-vue-jsx-merge-props": "^2.0.3",
  	"babel-jest": "^23.6.0",
  	"babel-loader": "^7.1.2",
  	"babel-plugin-import": "^1.1.1",
  	"babel-plugin-inline-import-data-uri": "^1.0.1",
  	"babel-plugin-istanbul": "^6.0.0",
  	"babel-plugin-syntax-dynamic-import": "^6.18.0",
  	"babel-plugin-syntax-jsx": "^6.18.0",
  	"babel-plugin-transform-class-properties": "^6.24.1",
  	"babel-plugin-transform-decorators": "^6.24.1",
  	"babel-plugin-transform-decorators-legacy": "^1.3.4",
  	"babel-plugin-transform-es3-member-expression-literals": "^6.22.0",
  	"babel-plugin-transform-es3-property-literals": "^6.22.0",
  	"babel-plugin-transform-object-assign": "^6.22.0",
  	"babel-plugin-transform-object-rest-spread": "^6.26.0",
  	"babel-plugin-transform-runtime": "~6.23.0",
  	"babel-plugin-transform-vue-jsx": "^3.7.0",
  	"babel-polyfill": "^6.26.0",
  	"babel-preset-env": "^1.6.1",
  	"case-sensitive-paths-webpack-plugin": "^2.1.2",
  	chalk: "^3.0.0",
  	cheerio: "^1.0.0-rc.2",
  	codecov: "^3.0.0",
  	colorful: "^2.1.0",
  	commander: "^4.0.0",
  	"compare-versions": "^3.3.0",
  	"cross-env": "^7.0.0",
  	"css-loader": "^3.0.0",
  	"deep-assign": "^2.0.0",
  	"enquire-js": "^0.2.1",
  	eslint: "^6.8.0",
  	"eslint-config-prettier": "^6.10.1",
  	"eslint-plugin-html": "^6.0.0",
  	"eslint-plugin-markdown": "^2.0.0-alpha.0",
  	"eslint-plugin-vue": "^6.2.2",
  	"fetch-jsonp": "^1.1.3",
  	"fs-extra": "^8.0.0",
  	glob: "^7.1.2",
  	gulp: "^4.0.1",
  	"gulp-babel": "^7.0.0",
  	"gulp-strip-code": "^0.1.4",
  	"html-webpack-plugin": "^3.2.0",
  	husky: "^4.0.0",
  	"istanbul-instrumenter-loader": "^3.0.0",
  	jest: "^24.0.0",
  	"jest-serializer-vue": "^2.0.0",
  	"jest-transform-stub": "^2.0.0",
  	"js-base64": "^3.0.0",
  	"json-templater": "^1.2.0",
  	jsonp: "^0.2.1",
  	less: "^3.9.0",
  	"less-loader": "^6.0.0",
  	"less-plugin-npm-import": "^2.1.0",
  	"lint-staged": "^10.0.0",
  	marked: "0.3.18",
  	merge2: "^1.2.1",
  	"mini-css-extract-plugin": "^0.10.0",
  	minimist: "^1.2.0",
  	mkdirp: "^0.5.1",
  	mockdate: "^2.0.2",
  	nprogress: "^0.2.0",
  	"optimize-css-assets-webpack-plugin": "^5.0.1",
  	postcss: "^7.0.6",
  	"postcss-loader": "^3.0.0",
  	prettier: "^1.18.2",
  	"pretty-quick": "^2.0.0",
  	querystring: "^0.2.0",
  	"raw-loader": "^4.0.0",
  	reqwest: "^2.0.5",
  	rimraf: "^3.0.0",
  	"rucksack-css": "^1.0.2",
  	"selenium-server": "^3.0.1",
  	semver: "^7.0.0",
  	"style-loader": "^1.0.0",
  	stylelint: "^13.0.0",
  	"stylelint-config-prettier": "^8.0.0",
  	"stylelint-config-standard": "^19.0.0",
  	"terser-webpack-plugin": "^3.0.3",
  	through2: "^3.0.0",
  	"url-loader": "^3.0.0",
  	vue: "^2.6.11",
  	"vue-antd-md-loader": "^1.1.0",
  	"vue-clipboard2": "0.3.1",
  	"vue-draggable-resizable": "^2.1.0",
  	"vue-eslint-parser": "^7.0.0",
  	"vue-i18n": "^8.3.2",
  	"vue-infinite-scroll": "^2.0.2",
  	"vue-jest": "^2.5.0",
  	"vue-loader": "^15.6.2",
  	"vue-router": "^3.0.1",
  	"vue-server-renderer": "^2.6.11",
  	"vue-template-compiler": "^2.6.11",
  	"vue-virtual-scroller": "^1.0.0",
  	vuex: "^3.1.0",
  	webpack: "^4.28.4",
  	"webpack-cli": "^3.2.1",
  	"webpack-dev-server": "^3.1.14",
  	"webpack-merge": "^4.1.1",
  	webpackbar: "^4.0.0",
  	"xhr-mock": "^2.5.1"
  };
  var dependencies = {
  	"@ant-design/icons": "^2.1.1",
  	"@ant-design/icons-vue": "^2.0.0",
  	"@simonwep/pickr": "~1.7.0",
  	"add-dom-event-listener": "^1.0.2",
  	"array-tree-filter": "^2.1.0",
  	"async-validator": "^3.0.3",
  	"babel-helper-vue-jsx-merge-props": "^2.0.3",
  	"babel-runtime": "6.x",
  	classnames: "^2.2.5",
  	"component-classes": "^1.2.6",
  	"dom-align": "^1.10.4",
  	"dom-closest": "^0.2.0",
  	"dom-scroll-into-view": "^2.0.0",
  	"enquire.js": "^2.1.6",
  	intersperse: "^1.0.0",
  	"is-mobile": "^2.2.1",
  	"is-negative-zero": "^2.0.0",
  	ismobilejs: "^1.0.0",
  	json2mq: "^0.2.0",
  	lodash: "^4.17.5",
  	moment: "^2.21.0",
  	"mutationobserver-shim": "^0.3.2",
  	"node-emoji": "^1.10.0",
  	"omit.js": "^1.0.0",
  	raf: "^3.4.0",
  	"resize-observer-polyfill": "^1.5.1",
  	"shallow-equal": "^1.0.0",
  	shallowequal: "^1.0.2",
  	"vue-ref": "^2.0.0",
  	warning: "^4.0.0"
  };
  var sideEffects = [
  	"site/*",
  	"components/style.js",
  	"components/**/style/*",
  	"*.vue",
  	"*.md",
  	"dist/*",
  	"es/**/style/*",
  	"lib/**/style/*",
  	"*.less"
  ];
  var packageInfo = {
  	name: name,
  	version: version,
  	title: title,
  	description: description,
  	keywords: keywords,
  	main: main,
  	module: module,
  	typings: typings,
  	files: files,
  	scripts: scripts,
  	repository: repository,
  	license: license,
  	bugs: bugs,
  	homepage: homepage,
  	peerDependencies: peerDependencies,
  	devDependencies: devDependencies,
  	dependencies: dependencies,
  	sideEffects: sideEffects
  };

  var version$1 = packageInfo.version;

  var IProps = {
    width: VuePropTypes.any,
    height: VuePropTypes.any,
    defaultOpen: VuePropTypes.bool,
    firstEnter: VuePropTypes.bool,
    open: VuePropTypes.bool,
    prefixCls: VuePropTypes.string,
    placement: VuePropTypes.string,
    level: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.array]),
    levelMove: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.func, VuePropTypes.array]),
    ease: VuePropTypes.string,
    duration: VuePropTypes.string,
    handler: VuePropTypes.any,
    showMask: VuePropTypes.bool,
    maskStyle: VuePropTypes.object,
    className: VuePropTypes.string,
    wrapStyle: VuePropTypes.object,
    maskClosable: VuePropTypes.bool,
    afterVisibleChange: VuePropTypes.func,
    keyboard: VuePropTypes.bool
  };

  var IDrawerProps = _extends$1({}, IProps, {
    wrapperClassName: VuePropTypes.string,
    forceRender: VuePropTypes.bool,
    getContainer: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.func, VuePropTypes.object, VuePropTypes.bool])
  });

  var IDrawerChildProps = _extends$1({}, IProps, {
    getContainer: VuePropTypes.func,
    getOpenCount: VuePropTypes.func,
    switchScrollingEffect: VuePropTypes.func
  });

  function dataToArray(vars) {
    if (Array.isArray(vars)) {
      return vars;
    }
    return [vars];
  }
  var transitionEndObject = {
    transition: 'transitionend',
    WebkitTransition: 'webkitTransitionEnd',
    MozTransition: 'transitionend',
    OTransition: 'oTransitionEnd otransitionend'
  };
  var transitionStr = Object.keys(transitionEndObject).filter(function (key) {
    if (typeof document === 'undefined') {
      return false;
    }
    var html = document.getElementsByTagName('html')[0];
    return key in (html ? html.style : {});
  })[0];
  var transitionEnd = transitionEndObject[transitionStr];

  function addEventListener$1(target, eventType, callback, options) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, options);
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
    }
  }

  function removeEventListener$1(target, eventType, callback, options) {
    if (target.removeEventListener) {
      target.removeEventListener(eventType, callback, options);
    } else if (target.attachEvent) {
      target.detachEvent('on' + eventType, callback);
    }
  }

  function transformArguments(arg, cb) {
    var result = void 0;
    if (typeof arg === 'function') {
      result = arg(cb);
    } else {
      result = arg;
    }
    if (Array.isArray(result)) {
      if (result.length === 2) {
        return result;
      }
      return [result[0], result[1]];
    }
    return [result];
  }

  var isNumeric$1 = function isNumeric(value) {
    return !isNaN(parseFloat(value)) && isFinite(value); // eslint-disable-line
  };

  function noop$Y() {}

  var currentDrawer = {};
  var windowIsUndefined$1 = !(typeof window !== 'undefined' && window.document && window.document.createElement);

  Vue.use(ref$1, { name: 'ant-ref' });
  var Drawer = {
    mixins: [BaseMixin],
    props: initDefaultProps(IDrawerProps, {
      prefixCls: 'drawer',
      placement: 'left',
      getContainer: 'body',
      level: 'all',
      duration: '.3s',
      ease: 'cubic-bezier(0.78, 0.14, 0.15, 0.86)',
      firstEnter: false, // 记录首次进入.
      showMask: true,
      handler: true,
      maskStyle: {},
      wrapperClassName: '',
      className: ''
    }),
    data: function data() {
      this.levelDom = [];
      this.contentDom = null;
      this.maskDom = null;
      this.handlerdom = null;
      this.mousePos = null;
      this.sFirstEnter = this.firstEnter;
      this.timeout = null;
      this.children = null;
      this.drawerId = Number((Date.now() + Math.random()).toString().replace('.', Math.round(Math.random() * 9))).toString(16);
      var open = this.open !== undefined ? this.open : !!this.defaultOpen;
      currentDrawer[this.drawerId] = open;
      this.orignalOpen = this.open;
      this.preProps = _extends$1({}, this.$props);
      return {
        sOpen: open
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        if (!windowIsUndefined$1) {
          var passiveSupported = false;
          window.addEventListener('test', null, Object.defineProperty({}, 'passive', {
            get: function get() {
              passiveSupported = true;
              return null;
            }
          }));
          _this.passive = passiveSupported ? { passive: false } : false;
        }
        var open = _this.getOpen();
        if (_this.handler || open || _this.sFirstEnter) {
          _this.getDefault(_this.$props);
          if (open) {
            _this.isOpenChange = true;
          }
          _this.$forceUpdate();
        }
      });
    },

    watch: {
      open: function (_open) {
        function open(_x) {
          return _open.apply(this, arguments);
        }

        open.toString = function () {
          return _open.toString();
        };

        return open;
      }(function (val) {
        if (val !== undefined && val !== this.preProps.open) {
          this.isOpenChange = true;
          // 没渲染 dom 时，获取默认数据;
          if (!this.container) {
            this.getDefault(this.$props);
          }
          this.setState({
            sOpen: open
          });
        }
        this.preProps.open = val;
      }),
      placement: function placement(val) {
        if (val !== this.preProps.placement) {
          // test 的 bug, 有动画过场，删除 dom
          this.contentDom = null;
        }
        this.preProps.placement = val;
      },
      level: function level(val) {
        if (this.preProps.level !== val) {
          this.getParentAndLevelDom(this.$props);
        }
        this.preProps.level = val;
      }
    },
    updated: function updated() {
      var _this2 = this;

      this.$nextTick(function () {
        // dom 没渲染时，重走一遍。
        if (!_this2.sFirstEnter && _this2.container) {
          _this2.$forceUpdate();
          _this2.sFirstEnter = true;
        }
      });
    },
    beforeDestroy: function beforeDestroy() {
      delete currentDrawer[this.drawerId];
      delete this.isOpenChange;
      if (this.container) {
        if (this.sOpen) {
          this.setLevelDomTransform(false, true);
        }
        document.body.style.overflow = '';
      }
      this.sFirstEnter = false;
      clearTimeout(this.timeout);
    },

    methods: {
      onKeyDown: function onKeyDown(e) {
        if (e.keyCode === KeyCode.ESC) {
          e.stopPropagation();
          this.$emit('close', e);
        }
      },
      onMaskTouchEnd: function onMaskTouchEnd(e) {
        this.$emit('close', e);
        this.onTouchEnd(e, true);
      },
      onIconTouchEnd: function onIconTouchEnd(e) {
        this.$emit('handleClick', e);
        this.onTouchEnd(e);
      },
      onTouchEnd: function onTouchEnd(e, close) {
        if (this.open !== undefined) {
          return;
        }
        var open = close || this.sOpen;
        this.isOpenChange = true;
        this.setState({
          sOpen: !open
        });
      },
      onWrapperTransitionEnd: function onWrapperTransitionEnd(e) {
        if (e.target === this.contentWrapper && e.propertyName.match(/transform$/)) {
          var _open2 = this.getOpen();
          this.dom.style.transition = '';
          if (!_open2 && this.getCurrentDrawerSome()) {
            document.body.style.overflowX = '';
            if (this.maskDom) {
              this.maskDom.style.left = '';
              this.maskDom.style.width = '';
            }
          }
          if (this.afterVisibleChange) {
            this.afterVisibleChange(!!_open2);
          }
        }
      },
      getDefault: function getDefault(props) {
        this.getParentAndLevelDom(props);
        if (props.getContainer || props.parent) {
          this.container = this.defaultGetContainer();
        }
      },
      getCurrentDrawerSome: function getCurrentDrawerSome() {
        return !Object.keys(currentDrawer).some(function (key) {
          return currentDrawer[key];
        });
      },
      getSelfContainer: function getSelfContainer() {
        return this.container;
      },
      getParentAndLevelDom: function getParentAndLevelDom(props) {
        var _this3 = this;

        if (windowIsUndefined$1) {
          return;
        }
        var level = props.level,
            getContainer = props.getContainer;

        this.levelDom = [];
        if (getContainer) {
          if (typeof getContainer === 'string') {
            var dom = document.querySelectorAll(getContainer)[0];
            this.parent = dom;
          }
          if (typeof getContainer === 'function') {
            this.parent = getContainer();
          }
          if ((typeof getContainer === 'undefined' ? 'undefined' : _typeof(getContainer)) === 'object' && getContainer instanceof window.HTMLElement) {
            this.parent = getContainer;
          }
        }
        if (!getContainer && this.container) {
          this.parent = this.container.parentNode;
        }
        if (level === 'all') {
          var children = Array.prototype.slice.call(this.parent.children);
          children.forEach(function (child) {
            if (child.nodeName !== 'SCRIPT' && child.nodeName !== 'STYLE' && child.nodeName !== 'LINK' && child !== _this3.container) {
              _this3.levelDom.push(child);
            }
          });
        } else if (level) {
          dataToArray(level).forEach(function (key) {
            document.querySelectorAll(key).forEach(function (item) {
              _this3.levelDom.push(item);
            });
          });
        }
      },
      setLevelDomTransform: function setLevelDomTransform(open, openTransition, placementName, value) {
        var _this4 = this;

        var _$props = this.$props,
            placement = _$props.placement,
            levelMove = _$props.levelMove,
            duration = _$props.duration,
            ease = _$props.ease,
            getContainer = _$props.getContainer;

        if (!windowIsUndefined$1) {
          this.levelDom.forEach(function (dom) {
            if (_this4.isOpenChange || openTransition) {
              /* eslint no-param-reassign: "error" */
              dom.style.transition = 'transform ' + duration + ' ' + ease;
              addEventListener$1(dom, transitionEnd, _this4.trnasitionEnd);
              var levelValue = open ? value : 0;
              if (levelMove) {
                var $levelMove = transformArguments(levelMove, { target: dom, open: open });
                levelValue = open ? $levelMove[0] : $levelMove[1] || 0;
              }
              var $value = typeof levelValue === 'number' ? levelValue + 'px' : levelValue;
              var placementPos = placement === 'left' || placement === 'top' ? $value : '-' + $value;
              dom.style.transform = levelValue ? placementName + '(' + placementPos + ')' : '';
              dom.style.msTransform = levelValue ? placementName + '(' + placementPos + ')' : '';
            }
          });
          // 处理 body 滚动
          if (getContainer === 'body') {
            var eventArray = ['touchstart'];
            var domArray = [document.body, this.maskDom, this.handlerdom, this.contentDom];
            var right = document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth ? getScrollBarSize(1) : 0;
            var widthTransition = 'width ' + duration + ' ' + ease;
            var trannsformTransition = 'transform ' + duration + ' ' + ease;
            if (open && document.body.style.overflow !== 'hidden') {
              document.body.style.overflow = 'hidden';
              if (right) {
                document.body.style.position = 'relative';
                document.body.style.width = 'calc(100% - ' + right + 'px)';
                this.dom.style.transition = 'none';
                switch (placement) {
                  case 'right':
                    this.dom.style.transform = 'translateX(-' + right + 'px)';
                    this.dom.style.msTransform = 'translateX(-' + right + 'px)';
                    break;
                  case 'top':
                  case 'bottom':
                    this.dom.style.width = 'calc(100% - ' + right + 'px)';
                    this.dom.style.transform = 'translateZ(0)';
                    break;
                }
                clearTimeout(this.timeout);
                this.timeout = setTimeout(function () {
                  _this4.dom.style.transition = trannsformTransition + ',' + widthTransition;
                  _this4.dom.style.width = '';
                  _this4.dom.style.transform = '';
                  _this4.dom.style.msTransform = '';
                });
              }
              // 手机禁滚
              domArray.forEach(function (item, i) {
                if (!item) {
                  return;
                }
                addEventListener$1(item, eventArray[i] || 'touchmove', i ? _this4.removeMoveHandler : _this4.removeStartHandler, _this4.passive);
              });
            } else if (this.getCurrentDrawerSome()) {
              document.body.style.overflow = '';
              if ((this.isOpenChange || openTransition) && right) {
                document.body.style.position = '';
                document.body.style.width = '';
                if (transitionStr) {
                  document.body.style.overflowX = 'hidden';
                }
                this.dom.style.transition = 'none';
                var heightTransition = void 0;
                switch (placement) {
                  case 'right':
                    {
                      this.dom.style.transform = 'translateX(' + right + 'px)';
                      this.dom.style.msTransform = 'translateX(' + right + 'px)';
                      this.dom.style.width = '100%';
                      widthTransition = 'width 0s ' + ease + ' ' + duration;
                      if (this.maskDom) {
                        this.maskDom.style.left = '-' + right + 'px';
                        this.maskDom.style.width = 'calc(100% + ' + right + 'px)';
                      }
                      break;
                    }
                  case 'top':
                  case 'bottom':
                    {
                      this.dom.style.width = 'calc(100% + ' + right + 'px)';
                      this.dom.style.height = '100%';
                      this.dom.style.transform = 'translateZ(0)';
                      heightTransition = 'height 0s ' + ease + ' ' + duration;
                      break;
                    }
                }
                clearTimeout(this.timeout);
                this.timeout = setTimeout(function () {
                  _this4.dom.style.transition = trannsformTransition + ',' + (heightTransition ? heightTransition + ',' : '') + widthTransition;
                  _this4.dom.style.transform = '';
                  _this4.dom.style.msTransform = '';
                  _this4.dom.style.width = '';
                  _this4.dom.style.height = '';
                });
              }
              domArray.forEach(function (item, i) {
                if (!item) {
                  return;
                }
                removeEventListener$1(item, eventArray[i] || 'touchmove', i ? _this4.removeMoveHandler : _this4.removeStartHandler, _this4.passive);
              });
            }
          }
        }

        var _getListeners = getListeners(this),
            change = _getListeners.change;

        if (change && this.isOpenChange && this.sFirstEnter) {
          change(open);
          this.isOpenChange = false;
        }
      },
      getChildToRender: function getChildToRender(open) {
        var _classnames,
            _this5 = this;

        var h = this.$createElement;
        var _$props2 = this.$props,
            className = _$props2.className,
            prefixCls = _$props2.prefixCls,
            placement = _$props2.placement,
            handler = _$props2.handler,
            showMask = _$props2.showMask,
            maskStyle = _$props2.maskStyle,
            width = _$props2.width,
            height = _$props2.height,
            wrapStyle = _$props2.wrapStyle,
            keyboard = _$props2.keyboard,
            maskClosable = _$props2.maskClosable;

        var children = this.$slots['default'];
        var wrapperClassname = classnames(prefixCls, (_classnames = {}, _defineProperty(_classnames, prefixCls + '-' + placement, true), _defineProperty(_classnames, prefixCls + '-open', open), _defineProperty(_classnames, className, !!className), _defineProperty(_classnames, 'no-mask', !showMask), _classnames));
        var isOpenChange = this.isOpenChange;
        var isHorizontal = placement === 'left' || placement === 'right';
        var placementName = 'translate' + (isHorizontal ? 'X' : 'Y');
        // 百分比与像素动画不同步，第一次打用后全用像素动画。
        // const defaultValue = !this.contentDom || !level ? '100%' : `${value}px`;
        var placementPos = placement === 'left' || placement === 'top' ? '-100%' : '100%';
        var transform = open ? '' : placementName + '(' + placementPos + ')';
        if (isOpenChange === undefined || isOpenChange) {
          var contentValue = this.contentDom ? this.contentDom.getBoundingClientRect()[isHorizontal ? 'width' : 'height'] : 0;
          var value = (isHorizontal ? width : height) || contentValue;
          this.setLevelDomTransform(open, false, placementName, value);
        }
        var handlerChildren = void 0;
        if (handler !== false) {
          var handlerDefalut = h(
            'div',
            { 'class': 'drawer-handle' },
            [h('i', { 'class': 'drawer-handle-icon' })]
          );
          var handlerSlot = this.handler;

          var handlerSlotVnode = handlerSlot && handlerSlot[0] || handlerDefalut;

          var _getEvents = getEvents(handlerSlotVnode),
              handleIconClick = _getEvents.click;

          handlerChildren = cloneElement(handlerSlotVnode, {
            on: {
              click: function click(e) {
                handleIconClick && handleIconClick();
                _this5.onIconTouchEnd(e);
              }
            },
            directives: [{
              name: 'ant-ref',
              value: function value(c) {
                _this5.handlerdom = c;
              }
            }]
          });
        }
        var domContProps = {
          'class': wrapperClassname,
          directives: [{
            name: 'ant-ref',
            value: function value(c) {
              _this5.dom = c;
            }
          }],
          on: {
            transitionend: this.onWrapperTransitionEnd,
            keydown: open && keyboard ? this.onKeyDown : noop$Y
          },
          style: wrapStyle
        };
        var directivesMaskDom = [{
          name: 'ant-ref',
          value: function value(c) {
            _this5.maskDom = c;
          }
        }];
        var directivesContentWrapper = [{
          name: 'ant-ref',
          value: function value(c) {
            _this5.contentWrapper = c;
          }
        }];
        var directivesContentDom = [{
          name: 'ant-ref',
          value: function value(c) {
            _this5.contentDom = c;
          }
        }];
        return h(
          'div',
          babelHelperVueJsxMergeProps([domContProps, {
            attrs: { tabIndex: -1 }
          }]),
          [showMask && h('div', babelHelperVueJsxMergeProps([{
            key: open // 第二次渲染时虚拟DOM没有改变，没有出发dom更新，使用key强制更新 https://github.com/vueComponent/ant-design-vue/issues/2407
            , 'class': prefixCls + '-mask',
            on: {
              'click': maskClosable ? this.onMaskTouchEnd : noop$Y
            },

            style: maskStyle
          }, { directives: directivesMaskDom }])), h(
            'div',
            babelHelperVueJsxMergeProps([{
              'class': prefixCls + '-content-wrapper',
              style: {
                transform: transform,
                msTransform: transform,
                width: isNumeric$1(width) ? width + 'px' : width,
                height: isNumeric$1(height) ? height + 'px' : height
              }
            }, { directives: directivesContentWrapper }]),
            [h(
              'div',
              babelHelperVueJsxMergeProps([{
                'class': prefixCls + '-content'
              }, { directives: directivesContentDom }, {
                on: {
                  'touchstart': open ? this.removeStartHandler : noop$Y,
                  'touchmove': open ? this.removeMoveHandler : noop$Y
                }
              }]),
              [children]
            ), handlerChildren]
          )]
        );
      },
      getOpen: function getOpen() {
        return this.open !== undefined ? this.open : this.sOpen;
      },
      getTouchParentScroll: function getTouchParentScroll(root, currentTarget, differX, differY) {
        if (!currentTarget || currentTarget === document) {
          return false;
        }
        // root 为 drawer-content 设定了 overflow, 判断为 root 的 parent 时结束滚动；
        if (currentTarget === root.parentNode) {
          return true;
        }

        var isY = Math.max(Math.abs(differX), Math.abs(differY)) === Math.abs(differY);
        var isX = Math.max(Math.abs(differX), Math.abs(differY)) === Math.abs(differX);

        var scrollY = currentTarget.scrollHeight - currentTarget.clientHeight;
        var scrollX = currentTarget.scrollWidth - currentTarget.clientWidth;
        /**
         * <div style="height: 300px">
         *   <div style="height: 900px"></div>
         * </div>
         * 在没设定 overflow: auto 或 scroll 时，currentTarget 里获取不到 scrollTop 或 scrollLeft,
         * 预先用 scrollTo 来滚动，如果取出的值跟滚动前取出不同，则 currnetTarget 被设定了 overflow; 否则就是上面这种。
         */
        var t = currentTarget.scrollTop;
        var l = currentTarget.scrollLeft;
        if (currentTarget.scrollTo) {
          currentTarget.scrollTo(currentTarget.scrollLeft + 1, currentTarget.scrollTop + 1);
        }
        var currentT = currentTarget.scrollTop;
        var currentL = currentTarget.scrollLeft;
        if (currentTarget.scrollTo) {
          currentTarget.scrollTo(currentTarget.scrollLeft - 1, currentTarget.scrollTop - 1);
        }
        if (isY && (!scrollY || !(currentT - t) || scrollY && (currentTarget.scrollTop >= scrollY && differY < 0 || currentTarget.scrollTop <= 0 && differY > 0)) || isX && (!scrollX || !(currentL - l) || scrollX && (currentTarget.scrollLeft >= scrollX && differX < 0 || currentTarget.scrollLeft <= 0 && differX > 0))) {
          return this.getTouchParentScroll(root, currentTarget.parentNode, differX, differY);
        }
        return false;
      },
      removeStartHandler: function removeStartHandler(e) {
        if (e.touches.length > 1) {
          return;
        }
        this.startPos = {
          x: e.touches[0].clientX,
          y: e.touches[0].clientY
        };
      },
      removeMoveHandler: function removeMoveHandler(e) {
        if (e.changedTouches.length > 1) {
          return;
        }
        var currentTarget = e.currentTarget;
        var differX = e.changedTouches[0].clientX - this.startPos.x;
        var differY = e.changedTouches[0].clientY - this.startPos.y;
        if (currentTarget === this.maskDom || currentTarget === this.handlerdom || currentTarget === this.contentDom && this.getTouchParentScroll(currentTarget, e.target, differX, differY)) {
          e.preventDefault();
        }
      },
      trnasitionEnd: function trnasitionEnd(e) {
        removeEventListener$1(e.target, transitionEnd, this.trnasitionEnd);
        e.target.style.transition = '';
      },
      defaultGetContainer: function defaultGetContainer() {
        if (windowIsUndefined$1) {
          return null;
        }
        var container = document.createElement('div');
        this.parent.appendChild(container);
        if (this.wrapperClassName) {
          container.className = this.wrapperClassName;
        }
        return container;
      }
    },

    render: function render() {
      var _this6 = this;

      var h = arguments[0];
      var _$props3 = this.$props,
          getContainer = _$props3.getContainer,
          wrapperClassName = _$props3.wrapperClassName,
          handler = _$props3.handler,
          forceRender = _$props3.forceRender;

      var open = this.getOpen();
      var portal = null;
      currentDrawer[this.drawerId] = open ? this.container : open;
      var children = this.getChildToRender(this.sFirstEnter ? open : false);
      if (!getContainer) {
        var directives = [{
          name: 'ant-ref',
          value: function value(c) {
            _this6.container = c;
          }
        }];
        return h(
          'div',
          babelHelperVueJsxMergeProps([{ 'class': wrapperClassName }, { directives: directives }]),
          [children]
        );
      }
      if (!this.container || !open && !this.sFirstEnter) {
        return null;
      }
      // 如果有 handler 为内置强制渲染；
      var $forceRender = !!handler || forceRender;
      if ($forceRender || open || this.dom) {
        portal = h(Portal, {
          attrs: { getContainer: this.getSelfContainer, children: children }
        });
      }
      return portal;
    }
  };

  var Drawer$1 = {
    name: 'ADrawer',
    props: {
      closable: VuePropTypes.bool.def(true),
      destroyOnClose: VuePropTypes.bool,
      getContainer: VuePropTypes.any,
      maskClosable: VuePropTypes.bool.def(true),
      mask: VuePropTypes.bool.def(true),
      maskStyle: VuePropTypes.object,
      wrapStyle: VuePropTypes.object,
      bodyStyle: VuePropTypes.object,
      headerStyle: VuePropTypes.object,
      drawerStyle: VuePropTypes.object,
      title: VuePropTypes.any,
      visible: VuePropTypes.bool,
      width: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]).def(256),
      height: VuePropTypes.oneOfType([VuePropTypes.string, VuePropTypes.number]).def(256),
      zIndex: VuePropTypes.number,
      prefixCls: VuePropTypes.string,
      placement: VuePropTypes.oneOf(['top', 'right', 'bottom', 'left']).def('right'),
      level: VuePropTypes.any.def(null),
      wrapClassName: VuePropTypes.string, // not use class like react, vue will add class to root dom
      handle: VuePropTypes.any,
      afterVisibleChange: VuePropTypes.func,
      keyboard: VuePropTypes.bool.def(true)
    },
    mixins: [BaseMixin],
    data: function data() {
      this.destroyClose = false;
      this.preVisible = this.$props.visible;
      return {
        _push: false
      };
    },

    inject: {
      parentDrawer: {
        'default': function _default() {
          return null;
        }
      },
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    provide: function provide() {
      return {
        parentDrawer: this
      };
    },
    mounted: function mounted() {
      // fix: delete drawer in child and re-render, no push started.
      // <Drawer>{show && <Drawer />}</Drawer>
      var visible = this.visible;

      if (visible && this.parentDrawer) {
        this.parentDrawer.push();
      }
    },
    updated: function updated() {
      var _this = this;

      this.$nextTick(function () {
        if (_this.preVisible !== _this.visible && _this.parentDrawer) {
          if (_this.visible) {
            _this.parentDrawer.push();
          } else {
            _this.parentDrawer.pull();
          }
        }
        _this.preVisible = _this.visible;
      });
    },
    beforeDestroy: function beforeDestroy() {
      // unmount drawer in child, clear push.
      if (this.parentDrawer) {
        this.parentDrawer.pull();
      }
    },

    methods: {
      close: function close(e) {
        this.$emit('close', e);
      },

      // onMaskClick(e) {
      //   if (!this.maskClosable) {
      //     return;
      //   }
      //   this.close(e);
      // },
      push: function push() {
        this.setState({
          _push: true
        });
      },
      pull: function pull() {
        this.setState({
          _push: false
        });
      },
      onDestroyTransitionEnd: function onDestroyTransitionEnd() {
        var isDestroyOnClose = this.getDestroyOnClose();
        if (!isDestroyOnClose) {
          return;
        }
        if (!this.visible) {
          this.destroyClose = true;
          this.$forceUpdate();
        }
      },
      getDestroyOnClose: function getDestroyOnClose() {
        return this.destroyOnClose && !this.visible;
      },

      // get drawar push width or height
      getPushTransform: function getPushTransform(placement) {
        if (placement === 'left' || placement === 'right') {
          return 'translateX(' + (placement === 'left' ? 180 : -180) + 'px)';
        }
        if (placement === 'top' || placement === 'bottom') {
          return 'translateY(' + (placement === 'top' ? 180 : -180) + 'px)';
        }
      },
      getRcDrawerStyle: function getRcDrawerStyle() {
        var _$props = this.$props,
            zIndex = _$props.zIndex,
            placement = _$props.placement,
            wrapStyle = _$props.wrapStyle;
        var push = this.$data._push;

        return _extends$1({
          zIndex: zIndex,
          transform: push ? this.getPushTransform(placement) : undefined
        }, wrapStyle);
      },
      renderHeader: function renderHeader(prefixCls) {
        var h = this.$createElement;
        var _$props2 = this.$props,
            closable = _$props2.closable,
            headerStyle = _$props2.headerStyle;

        var title = getComponentFromProp(this, 'title');
        if (!title && !closable) {
          return null;
        }

        var headerClassName = title ? prefixCls + '-header' : prefixCls + '-header-no-title';
        return h(
          'div',
          { 'class': headerClassName, style: headerStyle },
          [title && h(
            'div',
            { 'class': prefixCls + '-title' },
            [title]
          ), closable ? this.renderCloseIcon(prefixCls) : null]
        );
      },
      renderCloseIcon: function renderCloseIcon(prefixCls) {
        var h = this.$createElement;
        var closable = this.closable;

        return closable && h(
          'button',
          { key: 'closer', on: {
              'click': this.close
            },
            attrs: { 'aria-label': 'Close' },
            'class': prefixCls + '-close' },
          [h(Icon$1, {
            attrs: { type: 'close' }
          })]
        );
      },

      // render drawer body dom
      renderBody: function renderBody(prefixCls) {
        var h = this.$createElement;

        if (this.destroyClose && !this.visible) {
          return null;
        }
        this.destroyClose = false;
        var _$props3 = this.$props,
            bodyStyle = _$props3.bodyStyle,
            drawerStyle = _$props3.drawerStyle;


        var containerStyle = {};

        var isDestroyOnClose = this.getDestroyOnClose();
        if (isDestroyOnClose) {
          // Increase the opacity transition, delete children after closing.
          containerStyle.opacity = 0;
          containerStyle.transition = 'opacity .3s';
        }

        return h(
          'div',
          {
            'class': prefixCls + '-wrapper-body',
            style: _extends$1({}, containerStyle, drawerStyle),
            on: {
              'transitionend': this.onDestroyTransitionEnd
            }
          },
          [this.renderHeader(prefixCls), h(
            'div',
            { key: 'body', 'class': prefixCls + '-body', style: bodyStyle },
            [this.$slots['default']]
          )]
        );
      }
    },
    render: function render() {
      var _classnames;

      var h = arguments[0];

      var props = getOptionProps(this);

      var customizePrefixCls = props.prefixCls,
          width = props.width,
          height = props.height,
          visible = props.visible,
          placement = props.placement,
          wrapClassName = props.wrapClassName,
          mask = props.mask,
          rest = _objectWithoutProperties(props, ['prefixCls', 'width', 'height', 'visible', 'placement', 'wrapClassName', 'mask']);

      var haveMask = mask ? '' : 'no-mask';
      var offsetStyle = {};
      if (placement === 'left' || placement === 'right') {
        offsetStyle.width = typeof width === 'number' ? width + 'px' : width;
      } else {
        offsetStyle.height = typeof height === 'number' ? height + 'px' : height;
      }
      var handler = getComponentFromProp(this, 'handle') || false;
      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('drawer', customizePrefixCls);

      var vcDrawerProps = {
        props: _extends$1({}, omit(rest, ['closable', 'destroyOnClose', 'drawerStyle', 'headerStyle', 'bodyStyle', 'title', 'push', 'visible', 'getPopupContainer', 'rootPrefixCls', 'getPrefixCls', 'renderEmpty', 'csp', 'pageHeader', 'autoInsertSpaceInButton']), {
          handler: handler
        }, offsetStyle, {
          prefixCls: prefixCls,
          open: visible,
          showMask: mask,
          placement: placement,
          className: classnames((_classnames = {}, _defineProperty(_classnames, wrapClassName, !!wrapClassName), _defineProperty(_classnames, haveMask, !!haveMask), _classnames)),
          wrapStyle: this.getRcDrawerStyle()
        }),
        on: _extends$1({}, getListeners(this))
      };
      return h(
        Drawer,
        vcDrawerProps,
        [this.renderBody(prefixCls)]
      );
    }
  };

  /* istanbul ignore next */
  Drawer$1.install = function (Vue) {
    Vue.use(base);
    Vue.component(Drawer$1.name, Drawer$1);
  };

  var skeletonAvatarProps = {
    prefixCls: VuePropTypes.string,
    size: VuePropTypes.oneOfType([VuePropTypes.oneOf(['large', 'small', 'default']), VuePropTypes.number]),
    shape: VuePropTypes.oneOf(['circle', 'square'])
  };

  var SkeletonAvatarProps = VuePropTypes.shape(skeletonAvatarProps).loose;

  var Avatar$1 = {
    props: initDefaultProps(skeletonAvatarProps, {
      size: 'large'
    }),
    render: function render() {
      var _classNames, _classNames2;

      var h = arguments[0];
      var _$props = this.$props,
          prefixCls = _$props.prefixCls,
          size = _$props.size,
          shape = _$props.shape;


      var sizeCls = classnames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-lg', size === 'large'), _defineProperty(_classNames, prefixCls + '-sm', size === 'small'), _classNames));

      var shapeCls = classnames((_classNames2 = {}, _defineProperty(_classNames2, prefixCls + '-circle', shape === 'circle'), _defineProperty(_classNames2, prefixCls + '-square', shape === 'square'), _classNames2));

      var sizeStyle = typeof size === 'number' ? {
        width: size + 'px',
        height: size + 'px',
        lineHeight: size + 'px'
      } : {};

      return h('span', { 'class': classnames(prefixCls, sizeCls, shapeCls), style: sizeStyle });
    }
  };

  var skeletonTitleProps = {
    prefixCls: VuePropTypes.string,
    width: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string])
  };

  var SkeletonTitleProps = VuePropTypes.shape(skeletonTitleProps);

  var Title = {
    props: skeletonTitleProps,
    render: function render() {
      var h = arguments[0];
      var _$props = this.$props,
          prefixCls = _$props.prefixCls,
          width = _$props.width;

      var zWidth = typeof width === 'number' ? width + 'px' : width;
      return h('h3', { 'class': prefixCls, style: { width: zWidth } });
    }
  };

  var widthUnit = VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.string]);

  var skeletonParagraphProps = {
    prefixCls: VuePropTypes.string,
    width: VuePropTypes.oneOfType([widthUnit, VuePropTypes.arrayOf(widthUnit)]),
    rows: VuePropTypes.number
  };

  var SkeletonParagraphProps = VuePropTypes.shape(skeletonParagraphProps);

  var Paragraph = {
    props: skeletonParagraphProps,
    methods: {
      getWidth: function getWidth(index) {
        var width = this.width,
            _rows = this.rows,
            rows = _rows === undefined ? 2 : _rows;

        if (Array.isArray(width)) {
          return width[index];
        }
        // last paragraph
        if (rows - 1 === index) {
          return width;
        }
        return undefined;
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var _$props = this.$props,
          prefixCls = _$props.prefixCls,
          rows = _$props.rows;

      var rowList = [].concat(_toConsumableArray(Array(rows))).map(function (_, index) {
        var width = _this.getWidth(index);
        return h('li', { key: index, style: { width: typeof width === 'number' ? width + 'px' : width } });
      });
      return h(
        'ul',
        { 'class': prefixCls },
        [rowList]
      );
    }
  };

  var SkeletonProps = {
    active: VuePropTypes.bool,
    loading: VuePropTypes.bool,
    prefixCls: VuePropTypes.string,
    children: VuePropTypes.any,
    avatar: VuePropTypes.oneOfType([VuePropTypes.string, SkeletonAvatarProps, VuePropTypes.bool]),
    title: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.string, SkeletonTitleProps]),
    paragraph: VuePropTypes.oneOfType([VuePropTypes.bool, VuePropTypes.string, SkeletonParagraphProps])
  };

  function getComponentProps(prop) {
    if (prop && (typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) === 'object') {
      return prop;
    }
    return {};
  }

  function getAvatarBasicProps(hasTitle, hasParagraph) {
    if (hasTitle && !hasParagraph) {
      return { shape: 'square' };
    }

    return { shape: 'circle' };
  }

  function getTitleBasicProps(hasAvatar, hasParagraph) {
    if (!hasAvatar && hasParagraph) {
      return { width: '38%' };
    }

    if (hasAvatar && hasParagraph) {
      return { width: '50%' };
    }

    return {};
  }

  function getParagraphBasicProps(hasAvatar, hasTitle) {
    var basicProps = {};

    // Width
    if (!hasAvatar || !hasTitle) {
      basicProps.width = '61%';
    }

    // Rows
    if (!hasAvatar && hasTitle) {
      basicProps.rows = 3;
    } else {
      basicProps.rows = 2;
    }

    return basicProps;
  }

  var Skeleton = {
    name: 'ASkeleton',
    props: initDefaultProps(SkeletonProps, {
      avatar: false,
      title: true,
      paragraph: true
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    render: function render() {
      var h = arguments[0];
      var _$props = this.$props,
          customizePrefixCls = _$props.prefixCls,
          loading = _$props.loading,
          avatar = _$props.avatar,
          title = _$props.title,
          paragraph = _$props.paragraph,
          active = _$props.active;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('skeleton', customizePrefixCls);

      if (loading || !hasProp(this, 'loading')) {
        var _classNames;

        var hasAvatar = !!avatar || avatar === '';
        var hasTitle = !!title;
        var hasParagraph = !!paragraph;

        // Avatar
        var avatarNode = void 0;
        if (hasAvatar) {
          var avatarProps = {
            props: _extends$1({
              prefixCls: prefixCls + '-avatar'
            }, getAvatarBasicProps(hasTitle, hasParagraph), getComponentProps(avatar))
          };

          avatarNode = h(
            'div',
            { 'class': prefixCls + '-header' },
            [h(Avatar$1, avatarProps)]
          );
        }

        var contentNode = void 0;
        if (hasTitle || hasParagraph) {
          // Title
          var $title = void 0;
          if (hasTitle) {
            var titleProps = {
              props: _extends$1({
                prefixCls: prefixCls + '-title'
              }, getTitleBasicProps(hasAvatar, hasParagraph), getComponentProps(title))
            };

            $title = h(Title, titleProps);
          }

          // Paragraph
          var paragraphNode = void 0;
          if (hasParagraph) {
            var paragraphProps = {
              props: _extends$1({
                prefixCls: prefixCls + '-paragraph'
              }, getParagraphBasicProps(hasAvatar, hasTitle), getComponentProps(paragraph))
            };

            paragraphNode = h(Paragraph, paragraphProps);
          }

          contentNode = h(
            'div',
            { 'class': prefixCls + '-content' },
            [$title, paragraphNode]
          );
        }

        var cls = classnames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-with-avatar', hasAvatar), _defineProperty(_classNames, prefixCls + '-active', active), _classNames));

        return h(
          'div',
          { 'class': cls },
          [avatarNode, contentNode]
        );
      }
      var children = this.$slots['default'];
      return children && children.length === 1 ? children[0] : h('span', [children]);
    }
  };
  /* istanbul ignore next */
  Skeleton.install = function (Vue) {
    Vue.use(base);
    Vue.component(Skeleton.name, Skeleton);
  };

  var CommentProps = {
    actions: VuePropTypes.array,
    /** The element to display as the comment author. */
    author: VuePropTypes.any,
    /** The element to display as the comment avatar - generally an antd Avatar */
    avatar: VuePropTypes.any,
    /** The main content of the comment */
    content: VuePropTypes.any,
    /** Comment prefix defaults to '.ant-comment' */
    prefixCls: VuePropTypes.string,
    /** A datetime element containing the time to be displayed */
    datetime: VuePropTypes.any
  };

  var Comment = {
    name: 'AComment',
    props: CommentProps,
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    methods: {
      getAction: function getAction(actions) {
        var h = this.$createElement;

        if (!actions || !actions.length) {
          return null;
        }
        var actionList = actions.map(function (action, index) {
          return h(
            'li',
            { key: 'action-' + index },
            [action]
          );
        });
        return actionList;
      },
      renderNested: function renderNested(prefixCls, children) {
        var h = this.$createElement;

        return h(
          'div',
          { 'class': prefixCls + '-nested' },
          [children]
        );
      }
    },

    render: function render() {
      var h = arguments[0];
      var customizePrefixCls = this.$props.prefixCls;


      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('comment', customizePrefixCls);

      var actions = getComponentFromProp(this, 'actions');
      var author = getComponentFromProp(this, 'author');
      var avatar = getComponentFromProp(this, 'avatar');
      var content = getComponentFromProp(this, 'content');
      var datetime = getComponentFromProp(this, 'datetime');

      var avatarDom = h(
        'div',
        { 'class': prefixCls + '-avatar' },
        [typeof avatar === 'string' ? h('img', {
          attrs: { src: avatar, alt: 'comment-avatar' }
        }) : avatar]
      );

      var actionDom = actions && actions.length ? h(
        'ul',
        { 'class': prefixCls + '-actions' },
        [this.getAction(actions)]
      ) : null;

      var authorContent = h(
        'div',
        { 'class': prefixCls + '-content-author' },
        [author && h(
          'span',
          { 'class': prefixCls + '-content-author-name' },
          [author]
        ), datetime && h(
          'span',
          { 'class': prefixCls + '-content-author-time' },
          [datetime]
        )]
      );

      var contentDom = h(
        'div',
        { 'class': prefixCls + '-content' },
        [authorContent, h(
          'div',
          { 'class': prefixCls + '-content-detail' },
          [content]
        ), actionDom]
      );

      var comment = h(
        'div',
        { 'class': prefixCls + '-inner' },
        [avatarDom, contentDom]
      );
      var children = this.$slots['default'];
      return h(
        'div',
        babelHelperVueJsxMergeProps([{ 'class': prefixCls }, { on: getListeners(this) }]),
        [comment, children ? this.renderNested(prefixCls, children) : null]
      );
    }
  };

  /* istanbul ignore next */
  Comment.install = function (Vue) {
    Vue.use(base);
    Vue.component(Comment.name, Comment);
  };

  var NoFound = {
    functional: true,
    render: function render() {
      var h = arguments[0];

      return h(
        "svg",
        {
          attrs: { width: "252", height: "294" }
        },
        [h("defs", [h("path", {
          attrs: { d: "M0 .387h251.772v251.772H0z" }
        })]), h(
          "g",
          {
            attrs: { fill: "none", fillRule: "evenodd" }
          },
          [h(
            "g",
            {
              attrs: { transform: "translate(0 .012)" }
            },
            [h("mask", {
              attrs: { fill: "#fff" }
            }), h("path", {
              attrs: {
                d: "M0 127.32v-2.095C0 56.279 55.892.387 124.838.387h2.096c68.946 0 124.838 55.892 124.838 124.838v2.096c0 68.946-55.892 124.838-124.838 124.838h-2.096C55.892 252.16 0 196.267 0 127.321",
                fill: "#E4EBF7",
                mask: "url(#b)"
              }
            })]
          ), h("path", {
            attrs: {
              d: "M39.755 130.84a8.276 8.276 0 1 1-16.468-1.66 8.276 8.276 0 0 1 16.468 1.66",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M36.975 134.297l10.482 5.943M48.373 146.508l-12.648 10.788",
              stroke: "#FFF",
              strokeWidth: "2"
            }
          }), h("path", {
            attrs: {
              d: "M39.875 159.352a5.667 5.667 0 1 1-11.277-1.136 5.667 5.667 0 0 1 11.277 1.136M57.588 143.247a5.708 5.708 0 1 1-11.358-1.145 5.708 5.708 0 0 1 11.358 1.145M99.018 26.875l29.82-.014a4.587 4.587 0 1 0-.003-9.175l-29.82.013a4.587 4.587 0 1 0 .003 9.176M110.424 45.211l29.82-.013a4.588 4.588 0 0 0-.004-9.175l-29.82.013a4.587 4.587 0 1 0 .004 9.175",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M112.798 26.861v-.002l15.784-.006a4.588 4.588 0 1 0 .003 9.175l-15.783.007v-.002a4.586 4.586 0 0 0-.004-9.172M184.523 135.668c-.553 5.485-5.447 9.483-10.931 8.93-5.485-.553-9.483-5.448-8.93-10.932.552-5.485 5.447-9.483 10.932-8.93 5.485.553 9.483 5.447 8.93 10.932",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M179.26 141.75l12.64 7.167M193.006 156.477l-15.255 13.011",
              stroke: "#FFF",
              strokeWidth: "2"
            }
          }), h("path", {
            attrs: {
              d: "M184.668 170.057a6.835 6.835 0 1 1-13.6-1.372 6.835 6.835 0 0 1 13.6 1.372M203.34 153.325a6.885 6.885 0 1 1-13.7-1.382 6.885 6.885 0 0 1 13.7 1.382",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M151.931 192.324a2.222 2.222 0 1 1-4.444 0 2.222 2.222 0 0 1 4.444 0zM225.27 116.056a2.222 2.222 0 1 1-4.445 0 2.222 2.222 0 0 1 4.444 0zM216.38 151.08a2.223 2.223 0 1 1-4.446-.001 2.223 2.223 0 0 1 4.446 0zM176.917 107.636a2.223 2.223 0 1 1-4.445 0 2.223 2.223 0 0 1 4.445 0zM195.291 92.165a2.223 2.223 0 1 1-4.445 0 2.223 2.223 0 0 1 4.445 0zM202.058 180.711a2.223 2.223 0 1 1-4.446 0 2.223 2.223 0 0 1 4.446 0z",
              stroke: "#FFF",
              strokeWidth: "2"
            }
          }), h("path", {
            attrs: {
              stroke: "#FFF",
              strokeWidth: "2",
              d: "M214.404 153.302l-1.912 20.184-10.928 5.99M173.661 174.792l-6.356 9.814h-11.36l-4.508 6.484M174.941 125.168v-15.804M220.824 117.25l-12.84 7.901-15.31-7.902V94.39"
            }
          }), h("path", {
            attrs: {
              d: "M166.588 65.936h-3.951a4.756 4.756 0 0 1-4.743-4.742 4.756 4.756 0 0 1 4.743-4.743h3.951a4.756 4.756 0 0 1 4.743 4.743 4.756 4.756 0 0 1-4.743 4.742",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M174.823 30.03c0-16.281 13.198-29.48 29.48-29.48 16.28 0 29.48 13.199 29.48 29.48 0 16.28-13.2 29.48-29.48 29.48-16.282 0-29.48-13.2-29.48-29.48",
              fill: "#1890FF"
            }
          }), h("path", {
            attrs: {
              d: "M205.952 38.387c.5.5.785 1.142.785 1.928s-.286 1.465-.785 1.964c-.572.5-1.214.75-2 .75-.785 0-1.429-.285-1.929-.785-.572-.5-.82-1.143-.82-1.929s.248-1.428.82-1.928c.5-.5 1.144-.75 1.93-.75.785 0 1.462.25 1.999.75m4.285-19.463c1.428 1.249 2.143 2.963 2.143 5.142 0 1.712-.427 3.13-1.219 4.25-.067.096-.137.18-.218.265-.416.429-1.41 1.346-2.956 2.699a5.07 5.07 0 0 0-1.428 1.75 5.207 5.207 0 0 0-.536 2.357v.5h-4.107v-.5c0-1.357.215-2.536.714-3.5.464-.964 1.857-2.464 4.178-4.536l.43-.5c.643-.785.964-1.643.964-2.535 0-1.18-.358-2.108-1-2.785-.678-.68-1.643-1.001-2.858-1.001-1.536 0-2.642.464-3.357 1.43-.37.5-.621 1.135-.76 1.904a1.999 1.999 0 0 1-1.971 1.63h-.004c-1.277 0-2.257-1.183-1.98-2.43.337-1.518 1.02-2.78 2.073-3.784 1.536-1.5 3.607-2.25 6.25-2.25 2.32 0 4.214.607 5.642 1.894",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M52.04 76.131s21.81 5.36 27.307 15.945c5.575 10.74-6.352 9.26-15.73 4.935-10.86-5.008-24.7-11.822-11.577-20.88",
              fill: "#FFB594"
            }
          }), h("path", {
            attrs: {
              d: "M90.483 67.504l-.449 2.893c-.753.49-4.748-2.663-4.748-2.663l-1.645.748-1.346-5.684s6.815-4.589 8.917-5.018c2.452-.501 9.884.94 10.7 2.278 0 0 1.32.486-2.227.69-3.548.203-5.043.447-6.79 3.132-1.747 2.686-2.412 3.624-2.412 3.624",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              d: "M128.055 111.367c-2.627-7.724-6.15-13.18-8.917-15.478-3.5-2.906-9.34-2.225-11.366-4.187-1.27-1.231-3.215-1.197-3.215-1.197s-14.98-3.158-16.828-3.479c-2.37-.41-2.124-.714-6.054-1.405-1.57-1.907-2.917-1.122-2.917-1.122l-7.11-1.383c-.853-1.472-2.423-1.023-2.423-1.023l-2.468-.897c-1.645 9.976-7.74 13.796-7.74 13.796 1.795 1.122 15.703 8.3 15.703 8.3l5.107 37.11s-3.321 5.694 1.346 9.109c0 0 19.883-3.743 34.921-.329 0 0 3.047-2.546.972-8.806.523-3.01 1.394-8.263 1.736-11.622.385.772 2.019 1.918 3.14 3.477 0 0 9.407-7.365 11.052-14.012-.832-.723-1.598-1.585-2.267-2.453-.567-.736-.358-2.056-.765-2.717-.669-1.084-1.804-1.378-1.907-1.682",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M101.09 289.998s4.295 2.041 7.354 1.021c2.821-.94 4.53.668 7.08 1.178 2.55.51 6.874 1.1 11.686-1.26-.103-5.51-6.889-3.98-11.96-6.713-2.563-1.38-3.784-4.722-3.598-8.799h-9.402s-1.392 10.52-1.16 14.573",
              fill: "#CBD1D1"
            }
          }), h("path", {
            attrs: {
              d: "M101.067 289.826s2.428 1.271 6.759.653c3.058-.437 3.712.481 7.423 1.031 3.712.55 10.724-.069 11.823-.894.413 1.1-.343 2.063-.343 2.063s-1.512.603-4.812.824c-2.03.136-5.8.291-7.607-.503-1.787-1.375-5.247-1.903-5.728-.241-3.918.95-7.355-.286-7.355-.286l-.16-2.647z",
              fill: "#2B0849"
            }
          }), h("path", {
            attrs: {
              d: "M108.341 276.044h3.094s-.103 6.702 4.536 8.558c-4.64.618-8.558-2.303-7.63-8.558",
              fill: "#A4AABA"
            }
          }), h("path", {
            attrs: {
              d: "M57.542 272.401s-2.107 7.416-4.485 12.306c-1.798 3.695-4.225 7.492 5.465 7.492 6.648 0 8.953-.48 7.423-6.599-1.53-6.12.266-13.199.266-13.199h-8.669z",
              fill: "#CBD1D1"
            }
          }), h("path", {
            attrs: {
              d: "M51.476 289.793s2.097 1.169 6.633 1.169c6.083 0 8.249-1.65 8.249-1.65s.602 1.114-.619 2.165c-.993.855-3.597 1.591-7.39 1.546-4.145-.048-5.832-.566-6.736-1.168-.825-.55-.687-1.58-.137-2.062",
              fill: "#2B0849"
            }
          }), h("path", {
            attrs: {
              d: "M58.419 274.304s.033 1.519-.314 2.93c-.349 1.42-1.078 3.104-1.13 4.139-.058 1.151 4.537 1.58 5.155.034.62-1.547 1.294-6.427 1.913-7.252.619-.825-4.903-2.119-5.624.15",
              fill: "#A4AABA"
            }
          }), h("path", {
            attrs: {
              d: "M99.66 278.514l13.378.092s1.298-54.52 1.853-64.403c.554-9.882 3.776-43.364 1.002-63.128l-12.547-.644-22.849.78s-.434 3.966-1.195 9.976c-.063.496-.682.843-.749 1.365-.075.585.423 1.354.32 1.966-2.364 14.08-6.377 33.104-8.744 46.677-.116.666-1.234 1.009-1.458 2.691-.04.302.211 1.525.112 1.795-6.873 18.744-10.949 47.842-14.277 61.885l14.607-.014s2.197-8.57 4.03-16.97c2.811-12.886 23.111-85.01 23.111-85.01l3.016-.521 1.043 46.35s-.224 1.234.337 2.02c.56.785-.56 1.123-.392 2.244l.392 1.794s-.449 7.178-.898 11.89c-.448 4.71-.092 39.165-.092 39.165",
              fill: "#7BB2F9"
            }
          }), h("path", {
            attrs: {
              d: "M76.085 221.626c1.153.094 4.038-2.019 6.955-4.935M106.36 225.142s2.774-1.11 6.103-3.883",
              stroke: "#648BD8",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M107.275 222.1s2.773-1.11 6.102-3.884",
              stroke: "#648BD8",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M74.74 224.767s2.622-.591 6.505-3.365M86.03 151.634c-.27 3.106.3 8.525-4.336 9.123M103.625 149.88s.11 14.012-1.293 15.065c-2.219 1.664-2.99 1.944-2.99 1.944M99.79 150.438s.035 12.88-1.196 24.377M93.673 175.911s7.212-1.664 9.431-1.664M74.31 205.861a212.013 212.013 0 0 1-.979 4.56s-1.458 1.832-1.009 3.776c.449 1.944-.947 2.045-4.985 15.355-1.696 5.59-4.49 18.591-6.348 27.597l-.231 1.12M75.689 197.807a320.934 320.934 0 0 1-.882 4.754M82.591 152.233L81.395 162.7s-1.097.15-.5 2.244c.113 1.346-2.674 15.775-5.18 30.43M56.12 274.418h13.31",
              stroke: "#648BD8",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M116.241 148.22s-17.047-3.104-35.893.2c.158 2.514-.003 4.15-.003 4.15s14.687-2.818 35.67-.312c.252-2.355.226-4.038.226-4.038",
              fill: "#192064"
            }
          }), h("path", {
            attrs: {
              d: "M106.322 151.165l.003-4.911a.81.81 0 0 0-.778-.815c-2.44-.091-5.066-.108-7.836-.014a.818.818 0 0 0-.789.815l-.003 4.906a.81.81 0 0 0 .831.813c2.385-.06 4.973-.064 7.73.017a.815.815 0 0 0 .842-.81",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M105.207 150.233l.002-3.076a.642.642 0 0 0-.619-.646 94.321 94.321 0 0 0-5.866-.01.65.65 0 0 0-.63.647v3.072a.64.64 0 0 0 .654.644 121.12 121.12 0 0 1 5.794.011c.362.01.665-.28.665-.642",
              fill: "#192064"
            }
          }), h("path", {
            attrs: {
              d: "M100.263 275.415h12.338M101.436 270.53c.006 3.387.042 5.79.111 6.506M101.451 264.548a915.75 915.75 0 0 0-.015 4.337M100.986 174.965l.898 44.642s.673 1.57-.225 2.692c-.897 1.122 2.468.673.898 2.243-1.57 1.57.897 1.122 0 3.365-.596 1.489-.994 21.1-1.096 35.146",
              stroke: "#648BD8",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M46.876 83.427s-.516 6.045 7.223 5.552c11.2-.712 9.218-9.345 31.54-21.655-.786-2.708-2.447-4.744-2.447-4.744s-11.068 3.11-22.584 8.046c-6.766 2.9-13.395 6.352-13.732 12.801M104.46 91.057l.941-5.372-8.884-11.43-5.037 5.372-1.74 7.834a.321.321 0 0 0 .108.32c.965.8 6.5 5.013 14.347 3.544a.332.332 0 0 0 .264-.268",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              d: "M93.942 79.387s-4.533-2.853-2.432-6.855c1.623-3.09 4.513 1.133 4.513 1.133s.52-3.642 3.121-3.642c.52-1.04 1.561-4.162 1.561-4.162s11.445 2.601 13.526 3.121c0 5.203-2.304 19.424-7.84 19.861-8.892.703-12.449-9.456-12.449-9.456",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              d: "M113.874 73.446c2.601-2.081 3.47-9.722 3.47-9.722s-2.479-.49-6.64-2.05c-4.683-2.081-12.798-4.747-17.48.976-9.668 3.223-2.05 19.823-2.05 19.823l2.713-3.021s-3.935-3.287-2.08-6.243c2.17-3.462 3.92 1.073 3.92 1.073s.637-2.387 3.581-3.342c.355-.71 1.036-2.674 1.432-3.85a1.073 1.073 0 0 1 1.263-.704c2.4.558 8.677 2.019 11.356 2.662.522.125.871.615.82 1.15l-.305 3.248z",
              fill: "#520038"
            }
          }), h("path", {
            attrs: {
              d: "M104.977 76.064c-.103.61-.582 1.038-1.07.956-.489-.083-.801-.644-.698-1.254.103-.61.582-1.038 1.07-.956.488.082.8.644.698 1.254M112.132 77.694c-.103.61-.582 1.038-1.07.956-.488-.083-.8-.644-.698-1.254.103-.61.582-1.038 1.07-.956.488.082.8.643.698 1.254",
              fill: "#552950"
            }
          }), h("path", {
            attrs: {
              stroke: "#DB836E",
              strokeWidth: "1.118",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              d: "M110.13 74.84l-.896 1.61-.298 4.357h-2.228"
            }
          }), h("path", {
            attrs: {
              d: "M110.846 74.481s1.79-.716 2.506.537",
              stroke: "#5C2552",
              strokeWidth: "1.118",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M92.386 74.282s.477-1.114 1.113-.716c.637.398 1.274 1.433.558 1.99-.717.556.159 1.67.159 1.67",
              stroke: "#DB836E",
              strokeWidth: "1.118",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M103.287 72.93s1.83 1.113 4.137.954",
              stroke: "#5C2552",
              strokeWidth: "1.118",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M103.685 81.762s2.227 1.193 4.376 1.193M104.64 84.308s.954.398 1.511.318M94.693 81.205s2.308 7.4 10.424 7.639",
              stroke: "#DB836E",
              strokeWidth: "1.118",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M81.45 89.384s.45 5.647-4.935 12.787M69 82.654s-.726 9.282-8.204 14.206",
              stroke: "#E4EBF7",
              strokeWidth: "1.101",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M129.405 122.865s-5.272 7.403-9.422 10.768",
              stroke: "#E4EBF7",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M119.306 107.329s.452 4.366-2.127 32.062",
              stroke: "#E4EBF7",
              strokeWidth: "1.101",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M150.028 151.232h-49.837a1.01 1.01 0 0 1-1.01-1.01v-31.688c0-.557.452-1.01 1.01-1.01h49.837c.558 0 1.01.453 1.01 1.01v31.688a1.01 1.01 0 0 1-1.01 1.01",
              fill: "#F2D7AD"
            }
          }), h("path", {
            attrs: {
              d: "M150.29 151.232h-19.863v-33.707h20.784v32.786a.92.92 0 0 1-.92.92",
              fill: "#F4D19D"
            }
          }), h("path", {
            attrs: {
              d: "M123.554 127.896H92.917a.518.518 0 0 1-.425-.816l6.38-9.113c.193-.277.51-.442.85-.442h31.092l-7.26 10.371z",
              fill: "#F2D7AD"
            }
          }), h("path", {
            attrs: { fill: "#CC9B6E", d: "M123.689 128.447H99.25v-.519h24.169l7.183-10.26.424.298z" }
          }), h("path", {
            attrs: {
              d: "M158.298 127.896h-18.669a2.073 2.073 0 0 1-1.659-.83l-7.156-9.541h19.965c.49 0 .95.23 1.244.622l6.69 8.92a.519.519 0 0 1-.415.83",
              fill: "#F4D19D"
            }
          }), h("path", {
            attrs: {
              fill: "#CC9B6E",
              d: "M157.847 128.479h-19.384l-7.857-10.475.415-.31 7.7 10.266h19.126zM130.554 150.685l-.032-8.177.519-.002.032 8.177z"
            }
          }), h("path", {
            attrs: {
              fill: "#CC9B6E",
              d: "M130.511 139.783l-.08-21.414.519-.002.08 21.414zM111.876 140.932l-.498-.143 1.479-5.167.498.143zM108.437 141.06l-2.679-2.935 2.665-3.434.41.318-2.397 3.089 2.384 2.612zM116.607 141.06l-.383-.35 2.383-2.612-2.397-3.089.41-.318 2.665 3.434z"
            }
          }), h("path", {
            attrs: {
              d: "M154.316 131.892l-3.114-1.96.038 3.514-1.043.092c-1.682.115-3.634.23-4.789.23-1.902 0-2.693 2.258 2.23 2.648l-2.645-.596s-2.168 1.317.504 2.3c0 0-1.58 1.217.561 2.58-.584 3.504 5.247 4.058 7.122 3.59 1.876-.47 4.233-2.359 4.487-5.16.28-3.085-.89-5.432-3.35-7.238",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              d: "M153.686 133.577s-6.522.47-8.36.372c-1.836-.098-1.904 2.19 2.359 2.264 3.739.15 5.451-.044 5.451-.044",
              stroke: "#DB836E",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M145.16 135.877c-1.85 1.346.561 2.355.561 2.355s3.478.898 6.73.617",
              stroke: "#DB836E",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M151.89 141.71s-6.28.111-6.73-2.132c-.223-1.346.45-1.402.45-1.402M146.114 140.868s-1.103 3.16 5.44 3.533M151.202 129.932v3.477M52.838 89.286c3.533-.337 8.423-1.248 13.582-7.754",
              stroke: "#DB836E",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M168.567 248.318a6.647 6.647 0 0 1-6.647-6.647v-66.466a6.647 6.647 0 1 1 13.294 0v66.466a6.647 6.647 0 0 1-6.647 6.647",
              fill: "#5BA02E"
            }
          }), h("path", {
            attrs: {
              d: "M176.543 247.653a6.647 6.647 0 0 1-6.646-6.647v-33.232a6.647 6.647 0 1 1 13.293 0v33.232a6.647 6.647 0 0 1-6.647 6.647",
              fill: "#92C110"
            }
          }), h("path", {
            attrs: {
              d: "M186.443 293.613H158.92a3.187 3.187 0 0 1-3.187-3.187v-46.134a3.187 3.187 0 0 1 3.187-3.187h27.524a3.187 3.187 0 0 1 3.187 3.187v46.134a3.187 3.187 0 0 1-3.187 3.187",
              fill: "#F2D7AD"
            }
          }), h("path", {
            attrs: {
              d: "M88.979 89.48s7.776 5.384 16.6 2.842",
              stroke: "#E4EBF7",
              strokeWidth: "1.101",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          })]
        )]
      );
    }
  };

  var ServerError = {
    functional: true,
    render: function render() {
      var h = arguments[0];

      return h(
        "svg",
        {
          attrs: { width: "254", height: "294" }
        },
        [h("defs", [h("path", {
          attrs: { d: "M0 .335h253.49v253.49H0z" }
        }), h("path", {
          attrs: { d: "M0 293.665h253.49V.401H0z" }
        })]), h(
          "g",
          {
            attrs: { fill: "none", fillRule: "evenodd" }
          },
          [h(
            "g",
            {
              attrs: { transform: "translate(0 .067)" }
            },
            [h("mask", {
              attrs: { fill: "#fff" }
            }), h("path", {
              attrs: {
                d: "M0 128.134v-2.11C0 56.608 56.273.334 125.69.334h2.11c69.416 0 125.69 56.274 125.69 125.69v2.11c0 69.417-56.274 125.69-125.69 125.69h-2.11C56.273 253.824 0 197.551 0 128.134",
                fill: "#E4EBF7",
                mask: "url(#b)"
              }
            })]
          ), h("path", {
            attrs: {
              d: "M39.989 132.108a8.332 8.332 0 1 1-16.581-1.671 8.332 8.332 0 0 1 16.58 1.671",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M37.19 135.59l10.553 5.983M48.665 147.884l-12.734 10.861",
              stroke: "#FFF",
              strokeWidth: "2"
            }
          }), h("path", {
            attrs: {
              d: "M40.11 160.816a5.706 5.706 0 1 1-11.354-1.145 5.706 5.706 0 0 1 11.354 1.145M57.943 144.6a5.747 5.747 0 1 1-11.436-1.152 5.747 5.747 0 0 1 11.436 1.153M99.656 27.434l30.024-.013a4.619 4.619 0 1 0-.004-9.238l-30.024.013a4.62 4.62 0 0 0 .004 9.238M111.14 45.896l30.023-.013a4.62 4.62 0 1 0-.004-9.238l-30.024.013a4.619 4.619 0 1 0 .004 9.238",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M113.53 27.421v-.002l15.89-.007a4.619 4.619 0 1 0 .005 9.238l-15.892.007v-.002a4.618 4.618 0 0 0-.004-9.234M150.167 70.091h-3.979a4.789 4.789 0 0 1-4.774-4.775 4.788 4.788 0 0 1 4.774-4.774h3.979a4.789 4.789 0 0 1 4.775 4.774 4.789 4.789 0 0 1-4.775 4.775",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M171.687 30.234c0-16.392 13.289-29.68 29.681-29.68 16.392 0 29.68 13.288 29.68 29.68 0 16.393-13.288 29.681-29.68 29.681s-29.68-13.288-29.68-29.68",
              fill: "#FF603B"
            }
          }), h("path", {
            attrs: {
              d: "M203.557 19.435l-.676 15.035a1.514 1.514 0 0 1-3.026 0l-.675-15.035a2.19 2.19 0 1 1 4.377 0m-.264 19.378c.513.477.77 1.1.77 1.87s-.257 1.393-.77 1.907c-.55.476-1.21.733-1.943.733a2.545 2.545 0 0 1-1.87-.77c-.55-.514-.806-1.136-.806-1.87 0-.77.256-1.393.806-1.87.513-.513 1.137-.733 1.87-.733.77 0 1.43.22 1.943.733",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M119.3 133.275c4.426-.598 3.612-1.204 4.079-4.778.675-5.18-3.108-16.935-8.262-25.118-1.088-10.72-12.598-11.24-12.598-11.24s4.312 4.895 4.196 16.199c1.398 5.243.804 14.45.804 14.45s5.255 11.369 11.78 10.487",
              fill: "#FFB594"
            }
          }), h("path", {
            attrs: {
              d: "M100.944 91.61s1.463-.583 3.211.582c8.08 1.398 10.368 6.706 11.3 11.368 1.864 1.282 1.864 2.33 1.864 3.496.365.777 1.515 3.03 1.515 3.03s-7.225 1.748-10.954 6.758c-1.399-6.41-6.936-25.235-6.936-25.235",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M94.008 90.5l1.019-5.815-9.23-11.874-5.233 5.581-2.593 9.863s8.39 5.128 16.037 2.246",
              fill: "#FFB594"
            }
          }), h("path", {
            attrs: {
              d: "M82.931 78.216s-4.557-2.868-2.445-6.892c1.632-3.107 4.537 1.139 4.537 1.139s.524-3.662 3.139-3.662c.523-1.046 1.569-4.184 1.569-4.184s11.507 2.615 13.6 3.138c-.001 5.23-2.317 19.529-7.884 19.969-8.94.706-12.516-9.508-12.516-9.508",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              d: "M102.971 72.243c2.616-2.093 3.489-9.775 3.489-9.775s-2.492-.492-6.676-2.062c-4.708-2.092-12.867-4.771-17.575.982-9.54 4.41-2.062 19.93-2.062 19.93l2.729-3.037s-3.956-3.304-2.092-6.277c2.183-3.48 3.943 1.08 3.943 1.08s.64-2.4 3.6-3.36c.356-.714 1.04-2.69 1.44-3.872a1.08 1.08 0 0 1 1.27-.707c2.41.56 8.723 2.03 11.417 2.676.524.126.876.619.825 1.156l-.308 3.266z",
              fill: "#520038"
            }
          }), h("path", {
            attrs: {
              d: "M101.22 76.514c-.104.613-.585 1.044-1.076.96-.49-.082-.805-.646-.702-1.26.104-.613.585-1.044 1.076-.961.491.083.805.647.702 1.26M94.26 75.074c-.104.613-.585 1.044-1.076.96-.49-.082-.805-.646-.702-1.26.104-.613.585-1.044 1.076-.96.491.082.805.646.702 1.26",
              fill: "#552950"
            }
          }), h("path", {
            attrs: {
              stroke: "#DB836E",
              strokeWidth: "1.063",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              d: "M99.206 73.644l-.9 1.62-.3 4.38h-2.24"
            }
          }), h("path", {
            attrs: {
              d: "M99.926 73.284s1.8-.72 2.52.54",
              stroke: "#5C2552",
              strokeWidth: "1.117",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M81.367 73.084s.48-1.12 1.12-.72c.64.4 1.28 1.44.56 2s.16 1.68.16 1.68",
              stroke: "#DB836E",
              strokeWidth: "1.117",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M92.326 71.724s1.84 1.12 4.16.96",
              stroke: "#5C2552",
              strokeWidth: "1.117",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M92.726 80.604s2.24 1.2 4.4 1.2M93.686 83.164s.96.4 1.52.32M83.687 80.044s1.786 6.547 9.262 7.954",
              stroke: "#DB836E",
              strokeWidth: "1.063",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M95.548 91.663s-1.068 2.821-8.298 2.105c-7.23-.717-10.29-5.044-10.29-5.044",
              stroke: "#E4EBF7",
              strokeWidth: "1.136",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M78.126 87.478s6.526 4.972 16.47 2.486c0 0 9.577 1.02 11.536 5.322 5.36 11.77.543 36.835 0 39.962 3.496 4.055-.466 8.483-.466 8.483-15.624-3.548-35.81-.6-35.81-.6-4.849-3.546-1.223-9.044-1.223-9.044L62.38 110.32c-2.485-15.227.833-19.803 3.549-20.743 3.03-1.049 8.04-1.282 8.04-1.282.496-.058 1.08-.076 1.37-.233 2.36-1.282 2.787-.583 2.787-.583",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M65.828 89.81s-6.875.465-7.59 8.156c-.466 8.857 3.03 10.954 3.03 10.954s6.075 22.102 16.796 22.957c8.39-2.176 4.758-6.702 4.661-11.42-.233-11.304-7.108-16.897-7.108-16.897s-4.212-13.75-9.789-13.75",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              d: "M71.716 124.225s.855 11.264 9.828 6.486c4.765-2.536 7.581-13.828 9.789-22.568 1.456-5.768 2.58-12.197 2.58-12.197l-4.973-1.709s-2.408 5.516-7.769 12.275c-4.335 5.467-9.144 11.11-9.455 17.713",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              d: "M108.463 105.191s1.747 2.724-2.331 30.535c2.376 2.216 1.053 6.012-.233 7.51",
              stroke: "#E4EBF7",
              strokeWidth: "1.085",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M123.262 131.527s-.427 2.732-11.77 1.981c-15.187-1.006-25.326-3.25-25.326-3.25l.933-5.8s.723.215 9.71-.068c11.887-.373 18.714-6.07 24.964-1.022 4.039 3.263 1.489 8.16 1.489 8.16",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              d: "M70.24 90.974s-5.593-4.739-11.054 2.68c-3.318 7.223.517 15.284 2.664 19.578-.31 3.729 2.33 4.311 2.33 4.311s.108.895 1.516 2.68c4.078-7.03 6.72-9.166 13.711-12.546-.328-.656-1.877-3.265-1.825-3.767.175-1.69-1.282-2.623-1.282-2.623s-.286-.156-1.165-2.738c-.788-2.313-2.036-5.177-4.895-7.575",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M90.232 288.027s4.855 2.308 8.313 1.155c3.188-1.063 5.12.755 8.002 1.331 2.881.577 7.769 1.243 13.207-1.424-.117-6.228-7.786-4.499-13.518-7.588-2.895-1.56-4.276-5.336-4.066-9.944H91.544s-1.573 11.89-1.312 16.47",
              fill: "#CBD1D1"
            }
          }), h("path", {
            attrs: {
              d: "M90.207 287.833s2.745 1.437 7.639.738c3.456-.494 3.223.66 7.418 1.282 4.195.621 13.092-.194 14.334-1.126.466 1.242-.388 2.33-.388 2.33s-1.709.682-5.438.932c-2.295.154-8.098.276-10.14-.621-2.02-1.554-4.894-1.515-6.06-.234-4.427 1.075-7.184-.31-7.184-.31l-.181-2.991z",
              fill: "#2B0849"
            }
          }), h("path", {
            attrs: {
              d: "M98.429 272.257h3.496s-.117 7.574 5.127 9.671c-5.244.7-9.672-2.602-8.623-9.671",
              fill: "#A4AABA"
            }
          }), h("path", {
            attrs: {
              d: "M44.425 272.046s-2.208 7.774-4.702 12.899c-1.884 3.874-4.428 7.854 5.729 7.854 6.97 0 9.385-.503 7.782-6.917-1.604-6.415.279-13.836.279-13.836h-9.088z",
              fill: "#CBD1D1"
            }
          }), h("path", {
            attrs: {
              d: "M38.066 290.277s2.198 1.225 6.954 1.225c6.376 0 8.646-1.73 8.646-1.73s.63 1.168-.649 2.27c-1.04.897-3.77 1.668-7.745 1.621-4.347-.05-6.115-.593-7.062-1.224-.864-.577-.72-1.657-.144-2.162",
              fill: "#2B0849"
            }
          }), h("path", {
            attrs: {
              d: "M45.344 274.041s.035 1.592-.329 3.07c-.365 1.49-1.13 3.255-1.184 4.34-.061 1.206 4.755 1.657 5.403.036.65-1.622 1.357-6.737 2.006-7.602.648-.865-5.14-2.222-5.896.156",
              fill: "#A4AABA"
            }
          }), h("path", {
            attrs: {
              d: "M89.476 277.57l13.899.095s1.349-56.643 1.925-66.909c.576-10.267 3.923-45.052 1.042-65.585l-13.037-.669-23.737.81s-.452 4.12-1.243 10.365c-.065.515-.708.874-.777 1.417-.078.608.439 1.407.332 2.044-2.455 14.627-5.797 32.736-8.256 46.837-.121.693-1.282 1.048-1.515 2.796-.042.314.22 1.584.116 1.865-7.14 19.473-12.202 52.601-15.66 67.19l15.176-.015s2.282-10.145 4.185-18.871c2.922-13.389 24.012-88.32 24.012-88.32l3.133-.954-.158 48.568s-.233 1.282.35 2.098c.583.815-.581 1.167-.408 2.331l.408 1.864s-.466 7.458-.932 12.352c-.467 4.895 1.145 40.69 1.145 40.69",
              fill: "#7BB2F9"
            }
          }), h("path", {
            attrs: {
              d: "M64.57 218.881c1.197.099 4.195-2.097 7.225-5.127M96.024 222.534s2.881-1.152 6.34-4.034",
              stroke: "#648BD8",
              strokeWidth: "1.085",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M96.973 219.373s2.882-1.153 6.34-4.034",
              stroke: "#648BD8",
              strokeWidth: "1.032",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M63.172 222.144s2.724-.614 6.759-3.496M74.903 146.166c-.281 3.226.31 8.856-4.506 9.478M93.182 144.344s.115 14.557-1.344 15.65c-2.305 1.73-3.107 2.02-3.107 2.02M89.197 144.923s.269 13.144-1.01 25.088M83.525 170.71s6.81-1.051 9.116-1.051M46.026 270.045l-.892 4.538M46.937 263.289l-.815 4.157M62.725 202.503c-.33 1.618-.102 1.904-.449 3.438 0 0-2.756 1.903-2.29 3.923.466 2.02-.31 3.424-4.505 17.252-1.762 5.807-4.233 18.922-6.165 28.278-.03.144-.521 2.646-1.14 5.8M64.158 194.136c-.295 1.658-.6 3.31-.917 4.938M71.33 146.787l-1.244 10.877s-1.14.155-.519 2.33c.117 1.399-2.778 16.39-5.382 31.615M44.242 273.727H58.07",
              stroke: "#648BD8",
              strokeWidth: "1.085",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M106.18 142.117c-3.028-.489-18.825-2.744-36.219.2a.625.625 0 0 0-.518.644c.063 1.307.044 2.343.015 2.995a.617.617 0 0 0 .716.636c3.303-.534 17.037-2.412 35.664-.266.347.04.66-.214.692-.56.124-1.347.16-2.425.17-3.029a.616.616 0 0 0-.52-.62",
              fill: "#192064"
            }
          }), h("path", {
            attrs: {
              d: "M96.398 145.264l.003-5.102a.843.843 0 0 0-.809-.847 114.104 114.104 0 0 0-8.141-.014.85.85 0 0 0-.82.847l-.003 5.097c0 .476.388.857.864.845 2.478-.064 5.166-.067 8.03.017a.848.848 0 0 0 .876-.843",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M95.239 144.296l.002-3.195a.667.667 0 0 0-.643-.672c-1.9-.061-3.941-.073-6.094-.01a.675.675 0 0 0-.654.672l-.002 3.192c0 .376.305.677.68.669 1.859-.042 3.874-.043 6.02.012.376.01.69-.291.691-.668",
              fill: "#192064"
            }
          }), h("path", {
            attrs: {
              d: "M90.102 273.522h12.819M91.216 269.761c.006 3.519-.072 5.55 0 6.292M90.923 263.474c-.009 1.599-.016 2.558-.016 4.505M90.44 170.404l.932 46.38s.7 1.631-.233 2.796c-.932 1.166 2.564.7.932 2.33-1.63 1.633.933 1.166 0 3.497-.618 1.546-1.031 21.921-1.138 36.513",
              stroke: "#648BD8",
              strokeWidth: "1.085",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M73.736 98.665l2.214 4.312s2.098.816 1.865 2.68l.816 2.214M64.297 116.611c.233-.932 2.176-7.147 12.585-10.488M77.598 90.042s7.691 6.137 16.547 2.72",
              stroke: "#E4EBF7",
              strokeWidth: "1.085",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M91.974 86.954s5.476-.816 7.574-4.545c1.297-.345.72 2.212-.33 3.671-.7.971-1.01 1.554-1.01 1.554s.194.31.155.816c-.053.697-.175.653-.272 1.048-.081.335.108.657 0 1.049-.046.17-.198.5-.382.878-.12.249-.072.687-.2.948-.231.469-1.562 1.87-2.622 2.855-3.826 3.554-5.018 1.644-6.001-.408-.894-1.865-.661-5.127-.874-6.875-.35-2.914-2.622-3.03-1.923-4.429.343-.685 2.87.69 3.263 1.748.757 2.04 2.952 1.807 2.622 1.69",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              d: "M99.8 82.429c-.465.077-.35.272-.97 1.243-.622.971-4.817 2.932-6.39 3.224-2.589.48-2.278-1.56-4.254-2.855-1.69-1.107-3.562-.638-1.398 1.398.99.932.932 1.107 1.398 3.205.335 1.506-.64 3.67.7 5.593",
              stroke: "#DB836E",
              strokeWidth: ".774",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M79.543 108.673c-2.1 2.926-4.266 6.175-5.557 8.762",
              stroke: "#E59788",
              strokeWidth: ".774",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M87.72 124.768s-2.098-1.942-5.127-2.719c-3.03-.777-3.574-.155-5.516.078-1.942.233-3.885-.932-3.652.7.233 1.63 5.05 1.01 5.206 2.097.155 1.087-6.37 2.796-8.313 2.175-.777.777.466 1.864 2.02 2.175.233 1.554 2.253 1.554 2.253 1.554s.699 1.01 2.641 1.088c2.486 1.32 8.934-.7 10.954-1.554 2.02-.855-.466-5.594-.466-5.594",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              d: "M73.425 122.826s.66 1.127 3.167 1.418c2.315.27 2.563.583 2.563.583s-2.545 2.894-9.07 2.272M72.416 129.274s3.826.097 4.933-.718M74.98 130.75s1.961.136 3.36-.505M77.232 131.916s1.748.019 2.914-.505M73.328 122.321s-.595-1.032 1.262-.427c1.671.544 2.833.055 5.128.155 1.389.061 3.067-.297 3.982.15 1.606.784 3.632 2.181 3.632 2.181s10.526 1.204 19.033-1.127M78.864 108.104s-8.39 2.758-13.168 12.12",
              stroke: "#E59788",
              strokeWidth: ".774",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M109.278 112.533s3.38-3.613 7.575-4.662",
              stroke: "#E4EBF7",
              strokeWidth: "1.085",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M107.375 123.006s9.697-2.745 11.445-.88",
              stroke: "#E59788",
              strokeWidth: ".774",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M194.605 83.656l3.971-3.886M187.166 90.933l3.736-3.655M191.752 84.207l-4.462-4.56M198.453 91.057l-4.133-4.225M129.256 163.074l3.718-3.718M122.291 170.039l3.498-3.498M126.561 163.626l-4.27-4.27M132.975 170.039l-3.955-3.955",
              stroke: "#BFCDDD",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M190.156 211.779h-1.604a4.023 4.023 0 0 1-4.011-4.011V175.68a4.023 4.023 0 0 1 4.01-4.01h1.605a4.023 4.023 0 0 1 4.011 4.01v32.088a4.023 4.023 0 0 1-4.01 4.01",
              fill: "#A3B4C6"
            }
          }), h("path", {
            attrs: {
              d: "M237.824 212.977a4.813 4.813 0 0 1-4.813 4.813h-86.636a4.813 4.813 0 0 1 0-9.626h86.636a4.813 4.813 0 0 1 4.813 4.813",
              fill: "#A3B4C6"
            }
          }), h("mask", {
            attrs: { fill: "#fff" }
          }), h("path", {
            attrs: { fill: "#A3B4C6", mask: "url(#d)", d: "M154.098 190.096h70.513v-84.617h-70.513z" }
          }), h("path", {
            attrs: {
              d: "M224.928 190.096H153.78a3.219 3.219 0 0 1-3.208-3.209V167.92a3.219 3.219 0 0 1 3.208-3.21h71.148a3.219 3.219 0 0 1 3.209 3.21v18.967a3.219 3.219 0 0 1-3.21 3.209M224.928 130.832H153.78a3.218 3.218 0 0 1-3.208-3.208v-18.968a3.219 3.219 0 0 1 3.208-3.209h71.148a3.219 3.219 0 0 1 3.209 3.21v18.967a3.218 3.218 0 0 1-3.21 3.208",
              fill: "#BFCDDD",
              mask: "url(#d)"
            }
          }), h("path", {
            attrs: {
              d: "M159.563 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M166.98 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M174.397 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M222.539 120.546h-22.461a.802.802 0 0 1-.802-.802v-3.208c0-.443.359-.803.802-.803h22.46c.444 0 .803.36.803.803v3.208c0 .443-.36.802-.802.802",
              fill: "#FFF",
              mask: "url(#d)"
            }
          }), h("path", {
            attrs: {
              d: "M224.928 160.464H153.78a3.218 3.218 0 0 1-3.208-3.209v-18.967a3.219 3.219 0 0 1 3.208-3.209h71.148a3.219 3.219 0 0 1 3.209 3.209v18.967a3.218 3.218 0 0 1-3.21 3.209",
              fill: "#BFCDDD",
              mask: "url(#d)"
            }
          }), h("path", {
            attrs: {
              d: "M173.455 130.832h49.301M164.984 130.832h6.089M155.952 130.832h6.75M173.837 160.613h49.3M165.365 160.613h6.089M155.57 160.613h6.751",
              stroke: "#7C90A5",
              strokeWidth: "1.124",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              mask: "url(#d)"
            }
          }), h("path", {
            attrs: {
              d: "M159.563 151.038a2.407 2.407 0 1 1 0-4.814 2.407 2.407 0 0 1 0 4.814M166.98 151.038a2.407 2.407 0 1 1 0-4.814 2.407 2.407 0 0 1 0 4.814M174.397 151.038a2.407 2.407 0 1 1 .001-4.814 2.407 2.407 0 0 1 0 4.814M222.539 151.038h-22.461a.802.802 0 0 1-.802-.802v-3.209c0-.443.359-.802.802-.802h22.46c.444 0 .803.36.803.802v3.209c0 .443-.36.802-.802.802M159.563 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M166.98 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M174.397 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M222.539 179.987h-22.461a.802.802 0 0 1-.802-.802v-3.209c0-.443.359-.802.802-.802h22.46c.444 0 .803.36.803.802v3.209c0 .443-.36.802-.802.802",
              fill: "#FFF",
              mask: "url(#d)"
            }
          }), h("path", {
            attrs: {
              d: "M203.04 221.108h-27.372a2.413 2.413 0 0 1-2.406-2.407v-11.448a2.414 2.414 0 0 1 2.406-2.407h27.372a2.414 2.414 0 0 1 2.407 2.407V218.7a2.413 2.413 0 0 1-2.407 2.407",
              fill: "#BFCDDD",
              mask: "url(#d)"
            }
          }), h("path", {
            attrs: {
              d: "M177.259 207.217v11.52M201.05 207.217v11.52",
              stroke: "#A3B4C6",
              strokeWidth: "1.124",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              mask: "url(#d)"
            }
          }), h("path", {
            attrs: {
              d: "M162.873 267.894a9.422 9.422 0 0 1-9.422-9.422v-14.82a9.423 9.423 0 0 1 18.845 0v14.82a9.423 9.423 0 0 1-9.423 9.422",
              fill: "#5BA02E",
              mask: "url(#d)"
            }
          }), h("path", {
            attrs: {
              d: "M171.22 267.83a9.422 9.422 0 0 1-9.422-9.423v-3.438a9.423 9.423 0 0 1 18.845 0v3.438a9.423 9.423 0 0 1-9.422 9.423",
              fill: "#92C110",
              mask: "url(#d)"
            }
          }), h("path", {
            attrs: {
              d: "M181.31 293.666h-27.712a3.209 3.209 0 0 1-3.209-3.21V269.79a3.209 3.209 0 0 1 3.209-3.21h27.711a3.209 3.209 0 0 1 3.209 3.21v20.668a3.209 3.209 0 0 1-3.209 3.209",
              fill: "#F2D7AD",
              mask: "url(#d)"
            }
          })]
        )]
      );
    }
  };

  var Unauthorized = {
    functional: true,
    render: function render() {
      var h = arguments[0];

      return h(
        "svg",
        {
          attrs: { width: "251", height: "294" }
        },
        [h(
          "g",
          {
            attrs: { fill: "none", fillRule: "evenodd" }
          },
          [h("path", {
            attrs: {
              d: "M0 129.023v-2.084C0 58.364 55.591 2.774 124.165 2.774h2.085c68.574 0 124.165 55.59 124.165 124.165v2.084c0 68.575-55.59 124.166-124.165 124.166h-2.085C55.591 253.189 0 197.598 0 129.023",
              fill: "#E4EBF7"
            }
          }), h("path", {
            attrs: {
              d: "M41.417 132.92a8.231 8.231 0 1 1-16.38-1.65 8.231 8.231 0 0 1 16.38 1.65",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M38.652 136.36l10.425 5.91M49.989 148.505l-12.58 10.73",
              stroke: "#FFF",
              strokeWidth: "2"
            }
          }), h("path", {
            attrs: {
              d: "M41.536 161.28a5.636 5.636 0 1 1-11.216-1.13 5.636 5.636 0 0 1 11.216 1.13M59.154 145.261a5.677 5.677 0 1 1-11.297-1.138 5.677 5.677 0 0 1 11.297 1.138M100.36 29.516l29.66-.013a4.562 4.562 0 1 0-.004-9.126l-29.66.013a4.563 4.563 0 0 0 .005 9.126M111.705 47.754l29.659-.013a4.563 4.563 0 1 0-.004-9.126l-29.66.013a4.563 4.563 0 1 0 .005 9.126",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M114.066 29.503V29.5l15.698-.007a4.563 4.563 0 1 0 .004 9.126l-15.698.007v-.002a4.562 4.562 0 0 0-.004-9.122M185.405 137.723c-.55 5.455-5.418 9.432-10.873 8.882-5.456-.55-9.432-5.418-8.882-10.873.55-5.455 5.418-9.432 10.873-8.882 5.455.55 9.432 5.418 8.882 10.873",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M180.17 143.772l12.572 7.129M193.841 158.42L178.67 171.36",
              stroke: "#FFF",
              strokeWidth: "2"
            }
          }), h("path", {
            attrs: {
              d: "M185.55 171.926a6.798 6.798 0 1 1-13.528-1.363 6.798 6.798 0 0 1 13.527 1.363M204.12 155.285a6.848 6.848 0 1 1-13.627-1.375 6.848 6.848 0 0 1 13.626 1.375",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M152.988 194.074a2.21 2.21 0 1 1-4.42 0 2.21 2.21 0 0 1 4.42 0zM225.931 118.217a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.421 0zM217.09 153.051a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.42 0zM177.84 109.842a2.21 2.21 0 1 1-4.422 0 2.21 2.21 0 0 1 4.421 0zM196.114 94.454a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.421 0zM202.844 182.523a2.21 2.21 0 1 1-4.42 0 2.21 2.21 0 0 1 4.42 0z",
              stroke: "#FFF",
              strokeWidth: "2"
            }
          }), h("path", {
            attrs: {
              stroke: "#FFF",
              strokeWidth: "2",
              d: "M215.125 155.262l-1.902 20.075-10.87 5.958M174.601 176.636l-6.322 9.761H156.98l-4.484 6.449M175.874 127.28V111.56M221.51 119.404l-12.77 7.859-15.228-7.86V96.668"
            }
          }), h("path", {
            attrs: {
              d: "M180.68 29.32C180.68 13.128 193.806 0 210 0c16.193 0 29.32 13.127 29.32 29.32 0 16.194-13.127 29.322-29.32 29.322-16.193 0-29.32-13.128-29.32-29.321",
              fill: "#A26EF4"
            }
          }), h("path", {
            attrs: {
              d: "M221.45 41.706l-21.563-.125a1.744 1.744 0 0 1-1.734-1.754l.071-12.23a1.744 1.744 0 0 1 1.754-1.734l21.562.125c.964.006 1.74.791 1.735 1.755l-.071 12.229a1.744 1.744 0 0 1-1.754 1.734",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M215.106 29.192c-.015 2.577-2.049 4.654-4.543 4.64-2.494-.014-4.504-2.115-4.489-4.693l.04-6.925c.016-2.577 2.05-4.654 4.543-4.64 2.494.015 4.504 2.116 4.49 4.693l-.04 6.925zm-4.53-14.074a6.877 6.877 0 0 0-6.916 6.837l-.043 7.368a6.877 6.877 0 0 0 13.754.08l.042-7.368a6.878 6.878 0 0 0-6.837-6.917zM167.566 68.367h-3.93a4.73 4.73 0 0 1-4.717-4.717 4.73 4.73 0 0 1 4.717-4.717h3.93a4.73 4.73 0 0 1 4.717 4.717 4.73 4.73 0 0 1-4.717 4.717",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M168.214 248.838a6.611 6.611 0 0 1-6.61-6.611v-66.108a6.611 6.611 0 0 1 13.221 0v66.108a6.611 6.611 0 0 1-6.61 6.61",
              fill: "#5BA02E"
            }
          }), h("path", {
            attrs: {
              d: "M176.147 248.176a6.611 6.611 0 0 1-6.61-6.61v-33.054a6.611 6.611 0 1 1 13.221 0v33.053a6.611 6.611 0 0 1-6.61 6.611",
              fill: "#92C110"
            }
          }), h("path", {
            attrs: {
              d: "M185.994 293.89h-27.376a3.17 3.17 0 0 1-3.17-3.17v-45.887a3.17 3.17 0 0 1 3.17-3.17h27.376a3.17 3.17 0 0 1 3.17 3.17v45.886a3.17 3.17 0 0 1-3.17 3.17",
              fill: "#F2D7AD"
            }
          }), h("path", {
            attrs: {
              d: "M81.972 147.673s6.377-.927 17.566-1.28c11.729-.371 17.57 1.086 17.57 1.086s3.697-3.855.968-8.424c1.278-12.077 5.982-32.827.335-48.273-1.116-1.339-3.743-1.512-7.536-.62-1.337.315-7.147-.149-7.983-.1l-15.311-.347s-3.487-.17-8.035-.508c-1.512-.113-4.227-1.683-5.458-.338-.406.443-2.425 5.669-1.97 16.077l8.635 35.642s-3.141 3.61 1.219 7.085",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M75.768 73.325l-.9-6.397 11.982-6.52s7.302-.118 8.038 1.205c.737 1.324-5.616.993-5.616.993s-1.836 1.388-2.615 2.5c-1.654 2.363-.986 6.471-8.318 5.986-1.708.284-2.57 2.233-2.57 2.233",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              d: "M52.44 77.672s14.217 9.406 24.973 14.444c1.061.497-2.094 16.183-11.892 11.811-7.436-3.318-20.162-8.44-21.482-14.496-.71-3.258 2.543-7.643 8.401-11.76M141.862 80.113s-6.693 2.999-13.844 6.876c-3.894 2.11-10.137 4.704-12.33 7.988-6.224 9.314 3.536 11.22 12.947 7.503 6.71-2.651 28.999-12.127 13.227-22.367",
              fill: "#FFB594"
            }
          }), h("path", {
            attrs: {
              d: "M76.166 66.36l3.06 3.881s-2.783 2.67-6.31 5.747c-7.103 6.195-12.803 14.296-15.995 16.44-3.966 2.662-9.754 3.314-12.177-.118-3.553-5.032.464-14.628 31.422-25.95",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              d: "M64.674 85.116s-2.34 8.413-8.912 14.447c.652.548 18.586 10.51 22.144 10.056 5.238-.669 6.417-18.968 1.145-20.531-.702-.208-5.901-1.286-8.853-2.167-.87-.26-1.611-1.71-3.545-.936l-1.98-.869zM128.362 85.826s5.318 1.956 7.325 13.734c-.546.274-17.55 12.35-21.829 7.805-6.534-6.94-.766-17.393 4.275-18.61 4.646-1.121 5.03-1.37 10.23-2.929",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M78.18 94.656s.911 7.41-4.914 13.078",
              stroke: "#E4EBF7",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M87.397 94.68s3.124 2.572 10.263 2.572c7.14 0 9.074-3.437 9.074-3.437",
              stroke: "#E4EBF7",
              strokeWidth: ".932",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M117.184 68.639l-6.781-6.177s-5.355-4.314-9.223-.893c-3.867 3.422 4.463 2.083 5.653 4.165 1.19 2.082.848 1.143-2.083.446-5.603-1.331-2.082.893 2.975 5.355 2.091 1.845 6.992.955 6.992.955l2.467-3.851z",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              d: "M105.282 91.315l-.297-10.937-15.918-.027-.53 10.45c-.026.403.17.788.515.999 2.049 1.251 9.387 5.093 15.799.424.287-.21.443-.554.431-.91",
              fill: "#FFB594"
            }
          }), h("path", {
            attrs: {
              d: "M107.573 74.24c.817-1.147.982-9.118 1.015-11.928a1.046 1.046 0 0 0-.965-1.055l-4.62-.365c-7.71-1.044-17.071.624-18.253 6.346-5.482 5.813-.421 13.244-.421 13.244s1.963 3.566 4.305 6.791c.756 1.041.398-3.731 3.04-5.929 5.524-4.594 15.899-7.103 15.899-7.103",
              fill: "#5C2552"
            }
          }), h("path", {
            attrs: {
              d: "M88.426 83.206s2.685 6.202 11.602 6.522c7.82.28 8.973-7.008 7.434-17.505l-.909-5.483c-6.118-2.897-15.478.54-15.478.54s-.576 2.044-.19 5.504c-2.276 2.066-1.824 5.618-1.824 5.618s-.905-1.922-1.98-2.321c-.86-.32-1.897.089-2.322 1.98-1.04 4.632 3.667 5.145 3.667 5.145",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              stroke: "#DB836E",
              strokeWidth: "1.145",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              d: "M100.843 77.099l1.701-.928-1.015-4.324.674-1.406"
            }
          }), h("path", {
            attrs: {
              d: "M105.546 74.092c-.022.713-.452 1.279-.96 1.263-.51-.016-.904-.607-.882-1.32.021-.713.452-1.278.96-1.263.51.016.904.607.882 1.32M97.592 74.349c-.022.713-.452 1.278-.961 1.263-.509-.016-.904-.607-.882-1.32.022-.713.452-1.279.961-1.263.51.016.904.606.882 1.32",
              fill: "#552950"
            }
          }), h("path", {
            attrs: {
              d: "M91.132 86.786s5.269 4.957 12.679 2.327",
              stroke: "#DB836E",
              strokeWidth: "1.145",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M99.776 81.903s-3.592.232-1.44-2.79c1.59-1.496 4.897-.46 4.897-.46s1.156 3.906-3.457 3.25",
              fill: "#DB836E"
            }
          }), h("path", {
            attrs: {
              d: "M102.88 70.6s2.483.84 3.402.715M93.883 71.975s2.492-1.144 4.778-1.073",
              stroke: "#5C2552",
              strokeWidth: "1.526",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M86.32 77.374s.961.879 1.458 2.106c-.377.48-1.033 1.152-.236 1.809M99.337 83.719s1.911.151 2.509-.254",
              stroke: "#DB836E",
              strokeWidth: "1.145",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M87.782 115.821l15.73-3.012M100.165 115.821l10.04-2.008",
              stroke: "#E4EBF7",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M66.508 86.763s-1.598 8.83-6.697 14.078",
              stroke: "#E4EBF7",
              strokeWidth: "1.114",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M128.31 87.934s3.013 4.121 4.06 11.785",
              stroke: "#E4EBF7",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M64.09 84.816s-6.03 9.912-13.607 9.903",
              stroke: "#DB836E",
              strokeWidth: ".795",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M112.366 65.909l-.142 5.32s5.993 4.472 11.945 9.202c4.482 3.562 8.888 7.455 10.985 8.662 4.804 2.766 8.9 3.355 11.076 1.808 4.071-2.894 4.373-9.878-8.136-15.263-4.271-1.838-16.144-6.36-25.728-9.73",
              fill: "#FFC6A0"
            }
          }), h("path", {
            attrs: {
              d: "M130.532 85.488s4.588 5.757 11.619 6.214",
              stroke: "#DB836E",
              strokeWidth: ".75",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M121.708 105.73s-.393 8.564-1.34 13.612",
              stroke: "#E4EBF7",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M115.784 161.512s-3.57-1.488-2.678-7.14",
              stroke: "#648BD8",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M101.52 290.246s4.326 2.057 7.408 1.03c2.842-.948 4.564.673 7.132 1.186 2.57.514 6.925 1.108 11.772-1.269-.104-5.551-6.939-4.01-12.048-6.763-2.582-1.39-3.812-4.757-3.625-8.863h-9.471s-1.402 10.596-1.169 14.68",
              fill: "#CBD1D1"
            }
          }), h("path", {
            attrs: {
              d: "M101.496 290.073s2.447 1.281 6.809.658c3.081-.44 3.74.485 7.479 1.039 3.739.554 10.802-.07 11.91-.9.415 1.108-.347 2.077-.347 2.077s-1.523.608-4.847.831c-2.045.137-5.843.293-7.663-.507-1.8-1.385-5.286-1.917-5.77-.243-3.947.958-7.41-.288-7.41-.288l-.16-2.667z",
              fill: "#2B0849"
            }
          }), h("path", {
            attrs: {
              d: "M108.824 276.19h3.116s-.103 6.751 4.57 8.62c-4.673.624-8.62-2.32-7.686-8.62",
              fill: "#A4AABA"
            }
          }), h("path", {
            attrs: {
              d: "M57.65 272.52s-2.122 7.47-4.518 12.396c-1.811 3.724-4.255 7.548 5.505 7.548 6.698 0 9.02-.483 7.479-6.648-1.541-6.164.268-13.296.268-13.296H57.65z",
              fill: "#CBD1D1"
            }
          }), h("path", {
            attrs: {
              d: "M51.54 290.04s2.111 1.178 6.682 1.178c6.128 0 8.31-1.662 8.31-1.662s.605 1.122-.624 2.18c-1 .862-3.624 1.603-7.444 1.559-4.177-.049-5.876-.57-6.786-1.177-.831-.554-.692-1.593-.138-2.078",
              fill: "#2B0849"
            }
          }), h("path", {
            attrs: {
              d: "M58.533 274.438s.034 1.529-.315 2.95c-.352 1.431-1.087 3.127-1.139 4.17-.058 1.16 4.57 1.592 5.194.035.623-1.559 1.303-6.475 1.927-7.306.622-.831-4.94-2.135-5.667.15",
              fill: "#A4AABA"
            }
          }), h("path", {
            attrs: {
              d: "M100.885 277.015l13.306.092s1.291-54.228 1.843-64.056c.552-9.828 3.756-43.13.997-62.788l-12.48-.64-22.725.776s-.433 3.944-1.19 9.921c-.062.493-.677.838-.744 1.358-.075.582.42 1.347.318 1.956-2.35 14.003-6.343 32.926-8.697 46.425-.116.663-1.227 1.004-1.45 2.677-.04.3.21 1.516.112 1.785-6.836 18.643-10.89 47.584-14.2 61.551l14.528-.014s2.185-8.524 4.008-16.878c2.796-12.817 22.987-84.553 22.987-84.553l3-.517 1.037 46.1s-.223 1.228.334 2.008c.558.782-.556 1.117-.39 2.233l.39 1.784s-.446 7.14-.892 11.826c-.446 4.685-.092 38.954-.092 38.954",
              fill: "#7BB2F9"
            }
          }), h("path", {
            attrs: {
              d: "M77.438 220.434c1.146.094 4.016-2.008 6.916-4.91M107.55 223.931s2.758-1.103 6.069-3.862",
              stroke: "#648BD8",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M108.459 220.905s2.759-1.104 6.07-3.863",
              stroke: "#648BD8",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M76.099 223.557s2.608-.587 6.47-3.346M87.33 150.82c-.27 3.088.297 8.478-4.315 9.073M104.829 149.075s.11 13.936-1.286 14.983c-2.207 1.655-2.975 1.934-2.975 1.934M101.014 149.63s.035 12.81-1.19 24.245M94.93 174.965s7.174-1.655 9.38-1.655M75.671 204.754c-.316 1.55-.64 3.067-.973 4.535 0 0-1.45 1.822-1.003 3.756.446 1.934-.943 2.034-4.96 15.273-1.686 5.559-4.464 18.49-6.313 27.447-.078.38-4.018 18.06-4.093 18.423M77.043 196.743a313.269 313.269 0 0 1-.877 4.729M83.908 151.414l-1.19 10.413s-1.091.148-.496 2.23c.111 1.34-2.66 15.692-5.153 30.267M57.58 272.94h13.238",
              stroke: "#648BD8",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          }), h("path", {
            attrs: {
              d: "M117.377 147.423s-16.955-3.087-35.7.199c.157 2.501-.002 4.128-.002 4.128s14.607-2.802 35.476-.31c.251-2.342.226-4.017.226-4.017",
              fill: "#192064"
            }
          }), h("path", {
            attrs: {
              d: "M107.511 150.353l.004-4.885a.807.807 0 0 0-.774-.81c-2.428-.092-5.04-.108-7.795-.014a.814.814 0 0 0-.784.81l-.003 4.88c0 .456.371.82.827.808a140.76 140.76 0 0 1 7.688.017.81.81 0 0 0 .837-.806",
              fill: "#FFF"
            }
          }), h("path", {
            attrs: {
              d: "M106.402 149.426l.002-3.06a.64.64 0 0 0-.616-.643 94.135 94.135 0 0 0-5.834-.009.647.647 0 0 0-.626.643l-.001 3.056c0 .36.291.648.651.64 1.78-.04 3.708-.041 5.762.012.36.009.662-.279.662-.64",
              fill: "#192064"
            }
          }), h("path", {
            attrs: {
              d: "M101.485 273.933h12.272M102.652 269.075c.006 3.368.04 5.759.11 6.47M102.667 263.125c-.009 1.53-.015 2.98-.016 4.313M102.204 174.024l.893 44.402s.669 1.561-.224 2.677c-.892 1.116 2.455.67.893 2.231-1.562 1.562.893 1.116 0 3.347-.592 1.48-.988 20.987-1.09 34.956",
              stroke: "#648BD8",
              strokeWidth: "1.051",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          })]
        )]
      );
    }
  };

  var IconMap = {
    success: 'check-circle',
    error: 'close-circle',
    info: 'exclamation-circle',
    warning: 'warning'
  };

  var ExceptionMap = {
    '404': NoFound,
    '500': ServerError,
    '403': Unauthorized
  };

  // ExceptionImageMap keys
  var ExceptionStatus = Object.keys(ExceptionMap);

  var ResultProps = {
    prefixCls: VuePropTypes.string,
    icon: VuePropTypes.any,
    status: VuePropTypes.oneOf(['success', 'error', 'info', 'warning', '404', '403', '500']).def('info'),
    title: VuePropTypes.any,
    subTitle: VuePropTypes.any,
    extra: VuePropTypes.any
  };

  var renderIcon$1 = function renderIcon(h, prefixCls, _ref) {
    var status = _ref.status,
        icon = _ref.icon;

    if (ExceptionStatus.includes('' + status)) {
      var SVGComponent = ExceptionMap[status];
      return h(
        'div',
        { 'class': prefixCls + '-icon ' + prefixCls + '-image' },
        [h(SVGComponent)]
      );
    }
    // prop `icon` require slot or VNode
    var iconString = IconMap[status];
    var iconNode = icon || h(Icon$1, {
      attrs: { type: iconString, theme: 'filled' }
    });
    return h(
      'div',
      { 'class': prefixCls + '-icon' },
      [iconNode]
    );
  };

  var renderExtra = function renderExtra(h, prefixCls, extra) {
    return extra && h(
      'div',
      { 'class': prefixCls + '-extra' },
      [extra]
    );
  };

  var Result = {
    name: 'AResult',
    props: ResultProps,
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    render: function render(h) {
      var customizePrefixCls = this.prefixCls,
          status = this.status;

      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('result', customizePrefixCls);

      var title = getComponentFromProp(this, 'title');
      var subTitle = getComponentFromProp(this, 'subTitle');
      var icon = getComponentFromProp(this, 'icon');
      var extra = getComponentFromProp(this, 'extra');

      return h(
        'div',
        { 'class': prefixCls + ' ' + prefixCls + '-' + status },
        [renderIcon$1(h, prefixCls, { status: status, icon: icon }), h(
          'div',
          { 'class': prefixCls + '-title' },
          [title]
        ), subTitle && h(
          'div',
          { 'class': prefixCls + '-subtitle' },
          [subTitle]
        ), this.$slots['default'] && h(
          'div',
          { 'class': prefixCls + '-content' },
          [this.$slots['default']]
        ), renderExtra(h, prefixCls, extra)]
      );
    }
  };

  /* add resource */
  Result.PRESENTED_IMAGE_403 = ExceptionMap[403];
  Result.PRESENTED_IMAGE_404 = ExceptionMap[404];
  Result.PRESENTED_IMAGE_500 = ExceptionMap[500];

  /* istanbul ignore next */
  Result.install = function (Vue) {
    Vue.use(base);
    Vue.component(Result.name, Result);
  };

  var ColProps$1 = {
    child: VuePropTypes.any,
    bordered: VuePropTypes.bool,
    colon: VuePropTypes.bool,
    type: VuePropTypes.oneOf(['label', 'content']),
    layout: VuePropTypes.oneOf(['horizontal', 'vertical'])
  };

  var Col$1 = {
    functional: true,
    props: ColProps$1,
    render: function render(h, ctx) {
      var _ref;

      var _ctx$props = ctx.props,
          child = _ctx$props.child,
          bordered = _ctx$props.bordered,
          colon = _ctx$props.colon,
          type = _ctx$props.type,
          layout = _ctx$props.layout;

      var _getOptionProps = getOptionProps(child),
          prefixCls = _getOptionProps.prefixCls,
          _getOptionProps$span = _getOptionProps.span,
          span = _getOptionProps$span === undefined ? 1 : _getOptionProps$span;

      var key = ctx.data.key;

      var label = getComponentFromProp(child, 'label');
      var slots = getSlots(child);
      var labelProps = {
        attrs: {},
        'class': [prefixCls + '-item-label', (_ref = {}, _defineProperty(_ref, prefixCls + '-item-colon', colon), _defineProperty(_ref, prefixCls + '-item-no-label', !label), _ref)],
        key: key + '-label'
      };
      if (layout === 'vertical') {
        labelProps.attrs.colSpan = span * 2 - 1;
      }

      if (bordered) {
        if (type === 'label') {
          return h(
            'th',
            labelProps,
            [label]
          );
        }
        return h(
          'td',
          { 'class': prefixCls + '-item-content', key: key + '-content', attrs: { colSpan: span * 2 - 1 }
          },
          [slots['default']]
        );
      }
      if (layout === 'vertical') {
        if (type === 'content') {
          return h(
            'td',
            {
              attrs: { colSpan: span },
              'class': prefixCls + '-item' },
            [h(
              'span',
              { 'class': prefixCls + '-item-content', key: key + '-content' },
              [slots['default']]
            )]
          );
        }
        return h(
          'td',
          {
            attrs: { colSpan: span },
            'class': prefixCls + '-item' },
          [h(
            'span',
            {
              'class': [prefixCls + '-item-label', _defineProperty({}, prefixCls + '-item-colon', colon)],
              key: key + '-label'
            },
            [label]
          )]
        );
      }
      return h(
        'td',
        {
          attrs: { colSpan: span },
          'class': prefixCls + '-item' },
        [h(
          'span',
          labelProps,
          [label]
        ), h(
          'span',
          { 'class': prefixCls + '-item-content', key: key + '-content' },
          [slots['default']]
        )]
      );
    }
  };

  var DescriptionsItemProps = {
    prefixCls: VuePropTypes.string,
    label: VuePropTypes.any,
    span: VuePropTypes.number
  };

  function toArray$5(value) {
    var ret = value;
    if (value === undefined) {
      ret = [];
    } else if (!Array.isArray(value)) {
      ret = [value];
    }
    return ret;
  }

  var DescriptionsItem = {
    name: 'ADescriptionsItem',
    props: initDefaultProps(DescriptionsItemProps, { span: 1 })
  };

  var DescriptionsProps = {
    prefixCls: VuePropTypes.string,
    bordered: VuePropTypes.bool,
    size: VuePropTypes.oneOf(['default', 'middle', 'small']).def('default'),
    title: VuePropTypes.any,
    column: VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.object]),
    layout: VuePropTypes.oneOf(['horizontal', 'vertical']),
    colon: VuePropTypes.bool
  };

  /**
   * Convert children into `column` groups.
   * @param children: DescriptionsItem
   * @param column: number
   */
  var generateChildrenRows = function generateChildrenRows(children, column) {
    var rows = [];
    var columns = null;
    var leftSpans = void 0;

    var itemNodes = toArray$5(children);
    itemNodes.forEach(function (node, index) {
      var itemProps = getOptionProps(node);
      var itemNode = node;

      if (!columns) {
        leftSpans = column;
        columns = [];
        rows.push(columns);
      }

      // Always set last span to align the end of Descriptions
      var lastItem = index === itemNodes.length - 1;
      var lastSpanSame = true;
      if (lastItem) {
        lastSpanSame = !itemProps.span || itemProps.span === leftSpans;
        itemNode = cloneElement(itemNode, {
          props: {
            span: leftSpans
          }
        });
      }

      // Calculate left fill span
      var _itemProps$span = itemProps.span,
          span = _itemProps$span === undefined ? 1 : _itemProps$span;

      columns.push(itemNode);
      leftSpans -= span;

      if (leftSpans <= 0) {
        columns = null;

        warning$1(leftSpans === 0 && lastSpanSame, 'Descriptions', 'Sum of column `span` in a line exceeds `column` of Descriptions.');
      }
    });

    return rows;
  };

  var defaultColumnMap = {
    xxl: 3,
    xl: 3,
    lg: 3,
    md: 3,
    sm: 2,
    xs: 1
  };

  var Descriptions = {
    name: 'ADescriptions',
    Item: DescriptionsItem,
    mixins: [BaseMixin],
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    props: initDefaultProps(DescriptionsProps, {
      column: defaultColumnMap
    }),
    data: function data() {
      return {
        screens: {},
        token: undefined
      };
    },

    methods: {
      getColumn: function getColumn() {
        var column = this.$props.column;

        if ((typeof column === 'undefined' ? 'undefined' : _typeof(column)) === 'object') {
          for (var i = 0; i < responsiveArray.length; i++) {
            var breakpoint = responsiveArray[i];
            if (this.screens[breakpoint] && column[breakpoint] !== undefined) {
              return column[breakpoint] || defaultColumnMap[breakpoint];
            }
          }
        }
        // If the configuration is not an object, it is a number, return number
        if (typeof column === 'number') {
          return column;
        }
        // If it is an object, but no response is found, this happens only in the test.
        // Maybe there are some strange environments
        return 3;
      },
      renderRow: function renderRow(children, index, _ref, bordered, layout, colon) {
        var prefixCls = _ref.prefixCls;
        var h = this.$createElement;

        var renderCol = function renderCol(colItem, type, idx) {
          return h(Col$1, {
            attrs: {
              child: colItem,
              bordered: bordered,
              colon: colon,
              type: type,

              layout: layout
            },
            key: type + '-' + (colItem.key || idx) });
        };

        var cloneChildren = [];
        var cloneContentChildren = [];
        toArray$5(children).forEach(function (childrenItem, idx) {
          cloneChildren.push(renderCol(childrenItem, 'label', idx));
          if (layout === 'vertical') {
            cloneContentChildren.push(renderCol(childrenItem, 'content', idx));
          } else if (bordered) {
            cloneChildren.push(renderCol(childrenItem, 'content', idx));
          }
        });

        if (layout === 'vertical') {
          return [h(
            'tr',
            { 'class': prefixCls + '-row', key: 'label-' + index },
            [cloneChildren]
          ), h(
            'tr',
            { 'class': prefixCls + '-row', key: 'content-' + index },
            [cloneContentChildren]
          )];
        }

        return h(
          'tr',
          { 'class': prefixCls + '-row', key: index },
          [cloneChildren]
        );
      }
    },
    mounted: function mounted() {
      var _this = this;

      var column = this.$props.column;

      this.token = responsiveObserve.subscribe(function (screens) {
        if ((typeof column === 'undefined' ? 'undefined' : _typeof(column)) !== 'object') {
          return;
        }
        _this.setState({
          screens: screens
        });
      });
    },
    beforeDestroy: function beforeDestroy() {
      responsiveObserve.unsubscribe(this.token);
    },
    render: function render() {
      var _ref2,
          _this2 = this;

      var h = arguments[0];
      var _$props = this.$props,
          customizePrefixCls = _$props.prefixCls,
          size = _$props.size,
          _$props$bordered = _$props.bordered,
          bordered = _$props$bordered === undefined ? false : _$props$bordered,
          _$props$layout = _$props.layout,
          layout = _$props$layout === undefined ? 'horizontal' : _$props$layout,
          _$props$colon = _$props.colon,
          colon = _$props$colon === undefined ? true : _$props$colon;

      var title = getComponentFromProp(this, 'title') || null;
      var getPrefixCls = this.configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('descriptions', customizePrefixCls);

      var column = this.getColumn();
      var children = this.$slots['default'];
      var cloneChildren = toArray$5(children).map(function (child) {
        if (isValidElement(child)) {
          return cloneElement(child, {
            props: {
              prefixCls: prefixCls
            }
          });
        }
        return null;
      }).filter(function (node) {
        return node;
      });

      var childrenArray = generateChildrenRows(cloneChildren, column);
      return h(
        'div',
        {
          'class': [prefixCls, (_ref2 = {}, _defineProperty(_ref2, prefixCls + '-' + size, size !== 'default'), _defineProperty(_ref2, prefixCls + '-bordered', !!bordered), _ref2)]
        },
        [title && h(
          'div',
          { 'class': prefixCls + '-title' },
          [title]
        ), h(
          'div',
          { 'class': prefixCls + '-view' },
          [h('table', [h('tbody', [childrenArray.map(function (child, index) {
            return _this2.renderRow(child, index, {
              prefixCls: prefixCls
            }, bordered, layout, colon);
          })])])]
        )]
      );
    }
  };

  Descriptions.install = function (Vue) {
    Vue.use(base);
    Vue.component(Descriptions.name, Descriptions);
    Vue.component(Descriptions.Item.name, Descriptions.Item);
  };

  var PageHeaderProps = {
    backIcon: VuePropTypes.any,
    prefixCls: VuePropTypes.string,
    title: VuePropTypes.any,
    subTitle: VuePropTypes.any,
    breadcrumb: VuePropTypes.object,
    tags: VuePropTypes.any,
    footer: VuePropTypes.any,
    extra: VuePropTypes.any,
    avatar: VuePropTypes.object,
    ghost: VuePropTypes.bool
  };

  var renderBack = function renderBack(instance, prefixCls, backIcon, onBack) {
    // eslint-disable-next-line no-unused-vars
    var h = instance.$createElement;
    if (!backIcon || !onBack) {
      return null;
    }
    return h(
      LocaleReceiver,
      {
        attrs: { componentName: 'PageHeader' }
      },
      [function (_ref) {
        var back = _ref.back;
        return h(
          'div',
          { 'class': prefixCls + '-back' },
          [h(
            TransButton,
            {
              on: {
                'click': function click(e) {
                  instance.$emit('back', e);
                }
              },

              'class': prefixCls + '-back-button',
              attrs: { 'aria-label': back
              }
            },
            [backIcon]
          )]
        );
      }]
    );
  };

  var renderBreadcrumb = function renderBreadcrumb(h, breadcrumb) {
    return h(Breadcrumb, breadcrumb);
  };

  var renderTitle = function renderTitle(h, prefixCls, instance) {
    var avatar = instance.avatar;

    var title = getComponentFromProp(instance, 'title');
    var subTitle = getComponentFromProp(instance, 'subTitle');
    var tags = getComponentFromProp(instance, 'tags');
    var extra = getComponentFromProp(instance, 'extra');
    var backIcon = getComponentFromProp(instance, 'backIcon') !== undefined ? getComponentFromProp(instance, 'backIcon') : h(Icon$1, {
      attrs: { type: 'arrow-left' }
    });
    var onBack = instance.$listeners.back;
    var headingPrefixCls = prefixCls + '-heading';
    if (title || subTitle || tags || extra) {
      var backIconDom = renderBack(instance, prefixCls, backIcon, onBack);
      return h(
        'div',
        { 'class': headingPrefixCls },
        [backIconDom, avatar && h(Avatar, avatar), title && h(
          'span',
          { 'class': headingPrefixCls + '-title' },
          [title]
        ), subTitle && h(
          'span',
          { 'class': headingPrefixCls + '-sub-title' },
          [subTitle]
        ), tags && h(
          'span',
          { 'class': headingPrefixCls + '-tags' },
          [tags]
        ), extra && h(
          'span',
          { 'class': headingPrefixCls + '-extra' },
          [extra]
        )]
      );
    }
    return null;
  };

  var renderFooter = function renderFooter(h, prefixCls, footer) {
    if (footer) {
      return h(
        'div',
        { 'class': prefixCls + '-footer' },
        [footer]
      );
    }
    return null;
  };

  var renderChildren = function renderChildren(h, prefixCls, children) {
    return h(
      'div',
      { 'class': prefixCls + '-content' },
      [children]
    );
  };

  var PageHeader = {
    name: 'APageHeader',
    props: PageHeaderProps,
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    render: function render(h) {
      var _configProvider = this.configProvider,
          getPrefixCls = _configProvider.getPrefixCls,
          pageHeader = _configProvider.pageHeader;

      var props = getOptionProps(this);
      var customizePrefixCls = props.prefixCls,
          breadcrumb = props.breadcrumb;

      var footer = getComponentFromProp(this, 'footer');
      var children = this.$slots['default'];

      var ghost = true;

      // Use `ghost` from `props` or from `ConfigProvider` instead.
      if ('ghost' in props) {
        ghost = props.ghost;
      } else if (pageHeader && 'ghost' in pageHeader) {
        ghost = pageHeader.ghost;
      }
      var prefixCls = getPrefixCls('page-header', customizePrefixCls);
      var breadcrumbDom = breadcrumb && breadcrumb.props && breadcrumb.props.routes ? renderBreadcrumb(h, breadcrumb) : null;
      var className = [prefixCls, _defineProperty({
        'has-breadcrumb': breadcrumbDom,
        'has-footer': footer
      }, prefixCls + '-ghost', ghost)];

      return h(
        'div',
        { 'class': className },
        [breadcrumbDom, renderTitle(h, prefixCls, this), children && renderChildren(h, prefixCls, children), renderFooter(h, prefixCls, footer)]
      );
    }
  };

  /* istanbul ignore next */
  PageHeader.install = function (Vue) {
    Vue.use(base);
    Vue.component(PageHeader.name, PageHeader);
  };

  var SpaceSizeType = VuePropTypes.oneOfType([VuePropTypes.number, VuePropTypes.oneOf(['small', 'middle', 'large'])]);

  var spaceSize = {
    small: 8,
    middle: 16,
    large: 24
  };

  var SpaceProps = {
    prefixCls: VuePropTypes.string,
    size: SpaceSizeType,
    direction: VuePropTypes.oneOf(['horizontal', 'vertical']),
    align: VuePropTypes.oneOf(['start', 'end', 'center', 'baseline'])
  };

  var Space = {
    functional: true,
    name: 'ASpace',
    props: initDefaultProps(SpaceProps, {
      size: 'small',
      direction: 'horizontal'
    }),
    inject: {
      configProvider: { 'default': function _default() {
          return ConfigConsumerProps;
        } }
    },
    render: function render(h, content) {
      var _ref;

      var customizePrefixCls = content.prefixCls,
          configProvider = content.injections.configProvider,
          children = content.children;
      var _content$props = content.props,
          align = _content$props.align,
          size = _content$props.size,
          direction = _content$props.direction;


      var getPrefixCls = configProvider.getPrefixCls;
      var prefixCls = getPrefixCls('space', customizePrefixCls);
      var items = filterEmpty(children);
      var len = items.length;

      if (len === 0) {
        return null;
      }

      var mergedAlign = align === undefined && direction === 'horizontal' ? 'center' : align;

      var someSpaceClass = [(_ref = {}, _defineProperty(_ref, prefixCls, true), _defineProperty(_ref, prefixCls + '-' + direction, true), _defineProperty(_ref, prefixCls + '-align-' + mergedAlign, mergedAlign), _ref)];

      if (content.data['class']) {
        someSpaceClass.push(content.data['class']);
      }

      var itemClassName = prefixCls + '-item';
      var marginDirection = 'marginRight'; // directionConfig === 'rtl' ? 'marginLeft' : 'marginRight';

      return h(
        'div',
        babelHelperVueJsxMergeProps([content.data, { 'class': someSpaceClass }]),
        [items.map(function (child, i) {
          return h(
            'div',
            {
              'class': itemClassName,
              key: itemClassName + '-' + i,
              style: i === len - 1 ? {} : _defineProperty({}, direction === 'vertical' ? 'marginBottom' : marginDirection, typeof size === 'string' ? spaceSize[size] + 'px' : size + 'px')
            },
            [child]
          );
        })]
      );
    }
  };

  /* istanbul ignore next */
  Space.install = function (Vue) {
    Vue.component(Space.name, Space);
  };

  var components = [base, Affix, Anchor, AutoComplete, Alert, Avatar, BackTop, Badge, Breadcrumb, Button, Calendar, Card, Collapse$1, Carousel, Cascader$1, Checkbox$1, Col, DatePicker, Divider$1, Dropdown$1, Form, Form$1, Icon$1, Input, InputNumber, Layout, List, LocaleProvider, Menu$1, Mentions$1, Modal, Pagination, Popconfirm, Popover, Progress, Radio, Rate$1, Row, Select$1, Slider$1, Spin, Statistic, Steps$2, Switch$1, Table$1, Transfer, Tree$1, TreeSelect, Tabs$1, Tag, TimePicker, Timeline, ToolTip, Upload$1, Drawer$1, Skeleton, Comment,
  // ColorPicker,
  ConfigProvider, Empty$1, Result, Descriptions, PageHeader, Space];

  var install$1 = function install(Vue) {
    components.map(function (component) {
      Vue.use(component);
    });

    Vue.prototype.$message = api;
    Vue.prototype.$notification = api$1;
    Vue.prototype.$info = Modal.info;
    Vue.prototype.$success = Modal.success;
    Vue.prototype.$error = Modal.error;
    Vue.prototype.$warning = Modal.warning;
    Vue.prototype.$confirm = Modal.confirm;
    Vue.prototype.$destroyAll = Modal.destroyAll;
  };

  /* istanbul ignore if */
  if (typeof window !== 'undefined' && window.Vue) {
    install$1(window.Vue);
  }

  var ant = {
    version: version$1,
    install: install$1
  };

  // import { BSON } from "bsonfy";
  // import element from "element-ui";

  // const ant = require("ant-design-vue");

  // export * from "element-ui";

  console.log(ant, "+++++++++");

  // rollup();

})));
